/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 08:01:34 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("MI", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("8 {>A");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("+@1d%78mU", timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("%2yyS1T9FpfT(3L=Gw", timeZone0, locale0);
      assertEquals("%2yyS1T9FpfT(3L=Gw", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("D", "s<L\bL\"ArRu~");
      FastDateParser fastDateParser0 = new FastDateParser("_;z4E<[]#hKe)+5/", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(41);
      assertEquals(1941, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser(">=3{s(;FBoDz;EAZ>9W", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[>=3{s(;FBoDz;EAZ>9W,en_US,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("D", "s<L\bL\"ArRu~");
      FastDateParser fastDateParser0 = new FastDateParser("_;z4E<[]#hKe)+5/", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("GMT", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(11, "@L>Kae8Q$MeR=5q");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("@L>Kae8Q$MeR=5q", simpleTimeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("@L>Kae8Q$MeR=5q");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("ycO=?i", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(11, "@L>Kae8Q$MeR=5q");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("@L>Kae8Q$MeR=5q", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(11, timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-656), "German");
      FastDateParser fastDateParser0 = new FastDateParser("German", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("German", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "kVjTwsMi<(#!BUFo\"");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("{<bVCc;gf$Wh", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertFalse(timeZone0.useDaylightTime());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("D", "s<L\bL\"ArRu~");
      FastDateParser fastDateParser0 = new FastDateParser("_;z4E<[]#hKe)+5/", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser(" locale does not support dates before 1868 AD)\n", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-6279), "o>d~<S`K!n6DxP9");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("=mj3FTWPFB(7_C7=sPv", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-6279), "o>d~<S`K!n6DxP9");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("=mj3FTWPFB(7_C7=sPv", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeZone.setDefault(timeZone0);
      Locale locale0 = new Locale("_;z4E<[]#hKe)+5/", "s<L\bL\"ArRu~");
      FastDateParser fastDateParser0 = new FastDateParser("_;z4E<[]#hKe)+5/", timeZone0, locale0);
      TimeZone timeZone1 = fastDateParser0.getTimeZone();
      ParsePosition parsePosition0 = new ParsePosition(2098);
      Locale locale1 = Locale.ITALY;
      ParsePosition parsePosition1 = new ParsePosition(110);
      ParsePosition parsePosition2 = new ParsePosition((-2996));
      parsePosition2.setErrorIndex(890);
      String string0 = "GMTECT";
      Locale locale2 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser1 = new FastDateParser("GMTECT", timeZone0, locale2);
      FastDateParser fastDateParser2 = new FastDateParser("_;z4E<[]#hKe)+5/", timeZone1, locale1);
      String string1 = "EAT";
      FastDateParser fastDateParser3 = new FastDateParser(string1, timeZone1, locale2);
      fastDateParser2.equals(fastDateParser3);
      fastDateParser1.getLocale();
      fastDateParser1.isNextNumber();
      try { 
        fastDateParser2.parseObject(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"GMTECT\" does not match _;(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|ALMT|AMT|ANAT|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville Standard Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|DAVT|DDUT|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|Kostanay Standard Time|KRAT|KST|LHDT|LHST|LINT|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|Ora del Bangladesh|Ora del Bhutan|Ora del Brasile|Ora del Brunei|Ora del Cile|Ora del Kirghizistan|Ora del Nepal|Ora del Pakistan|Ora del Paraguay|Ora del Per\u00F9|Ora del Tagikistan|Ora del Terr\\. Britannico dell'Oceano Indiano|Ora del Turkmenistan|Ora del Venezuela|Ora dell'Afghanistan|Ora dell'Africa centrale|Ora dell'Africa occidentale|Ora dell'Africa orientale|Ora dell'Argentina|Ora dell'Armenia|Ora dell'Azerbaigian|Ora dell'Ecuador|Ora dell'Europa centrale|Ora dell'Europa occidentale|Ora dell'Europa orientale|Ora dell'Indocina|Ora dell'Indonesia centrale|Ora dell'Indonesia occidentale|Ora dell'Indonesia orientale|Ora dell'Isola Christmas|Ora dell'Isola della Fenice|Ora dell'Isola di Pasqua|Ora dell'Isola Macquarie|Ora dell'Uruguay|Ora dell'Uzbekistan|Ora della Birmania/Myanmar|Ora della Bolivia|Ora della Colombia|Ora della Georgia|Ora della Groenlandia occidentale|Ora della Groenlandia orientale|Ora della Guyana|Ora della Guyana Francese|Ora della Malaysia|Ora della Nuova Caledonia|Ora delle Azzorre|Ora delle Falkland|Ora delle Galapagos|Ora delle Isole Cocos|Ora delle Isole Cook|Ora delle Isole Gilbert|Ora delle Isole Marchesi|Ora delle Isole Marshall|Ora delle Isole Salomone|Ora delle Line Islands|Ora delle Maldive|Ora delle Seychelles|Ora delle Terre Australi e Antartiche Francesi|Ora di Acre|Ora di Alma-Ata|Ora di Anadyr|Ora di Aqtau|Ora di Aqtobe|Ora di Capo Verde|Ora di Chatham standard|Ora di Choibalsan|Ora di Chuuk|Ora di Davis|Ora di Dumont-d'Urville|Ora di Ekaterinburg|Ora di Fernando de Noronha|Ora di Figi|Ora di Gambier|Ora di Hong Kong|Ora di Hovd|Ora di Irkutsk|Ora di Jakutsk|Ora di Kosrae|Ora di Krasnojarsk|Ora di Magadan|Ora di Mauritius|Ora di Mawson|Ora di Nauru|Ora di Niue|Ora di Norfolk|Ora di Novosibirsk|Ora di Omsk|Ora di Oral|Ora di Palau|Ora di Papua Nuova Guinea|Ora di Petropavlovsk-Kamchatski|Ora di Pohnpei|Ora di Qyzylorda|Ora di Reunion|Ora di Rothera|Ora di Sakhalin|Ora di Samara|Ora di Samoa|Ora di Singapore|Ora di Suriname|Ora di Syowa|Ora di Tahiti|Ora di Timor Leste|Ora di Tokelau|Ora di Tonga|Ora di Tuvalu|Ora di Ulaanbaatar|Ora di Ust-Nera|Ora di Vanuatu|Ora di Vladivostok|Ora di Vostok|Ora di Wake|Ora di Wallis e Futuna|Ora estiva britannica|Ora estiva centrale \\(Australia del Sud\\)|Ora estiva centrale \\(Australia del Sud/Nuovo Galles del Sud\\)|Ora estiva del Cile|Ora estiva del Paraguay|Ora estiva dell'Australia orientale \\(Nuovo Galles del Sud\\)|Ora estiva dell'Europa centrale|Ora estiva dell'Europa occidentale|Ora estiva dell'Europa orientale|Ora estiva dell'Isola di Pasqua|Ora estiva dell'Isola Macquarie|Ora estiva della Groenlandia occidentale|Ora estiva della Groenlandia orientale|Ora estiva delle Azzorre|Ora estiva di Figi|Ora estiva di Lord Howe|Ora estiva di Norfolk|Ora estiva di Samoa|Ora estiva irlandese|Ora estiva orientale \\(Tasmania\\)|Ora estiva orientale \\(Victoria\\)|Ora legale Cuba|Ora legale dell'Alaska|Ora legale dell'Atlantico occidentale|Ora legale della costa occidentale USA|Ora legale della Nuova Zelanda|Ora legale delle Isole Hawaii|Ora legale di Chatham|Ora legale di Israele|Ora legale di Saint-Pierre e Miquelon|Ora legale di Terranova|Ora legale Iran|Ora legale USA centrale|Ora legale USA occidentale|Ora legale USA orientale|Ora media del Ghana|Ora media di Greenwich|Ora solare Cuba|Ora solare del Giappone|Ora solare del golfo|Ora solare del Sudafrica|Ora solare dell'Alaska|Ora solare dell'Amazzonia|Ora solare dell'Arabia|Ora solare dell'Atlantico occidentale|Ora solare dell'India|Ora solare della Cina|Ora solare della Corea|Ora solare della costa occidentale USA|Ora solare della Georgia Australe|Ora solare della Nuova Zelanda|Ora solare delle Isole Hawaii|Ora solare di Saint-Pierre e Miquelon|Ora solare di Terranova|Ora solare Iran|Ora solare USA centrale|Ora solare USA occidentale|Ora solare USA orientale|Ora standard Australia centro-occidentale|Ora standard centrale \\(Australia del Sud\\)|Ora standard centrale \\(Australia del Sud/Nuovo Galles del Sud\\)|Ora standard centrale \\(Territori del Nord\\)|Ora standard dell'Australia occidentale|Ora standard dell'Australia orientale \\(Nuovo Galles del Sud\\)|Ora standard di Chamorro|Ora standard di Israele|Ora standard di Lord Howe|Ora standard di Mosca|Ora standard di Pitcairn|Ora standard di Samoa|Ora standard orientale \\(Queensland\\)|Ora standard orientale \\(Tasmania\\)|Ora standard orientale \\(Victoria\\)|ORAT|PDT|PET|PETT|PGT|Philippines Standard Time|PHOT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk Time|SRET|SRT|SST|SYOT|TAHT|Tempo universale coordinato|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|YEKT)4(dom|domenica|gio|gioved\u00EC|lun|luned\u00EC|mar|marted\u00EC|mer|mercoled\u00EC|sab|sabato|ven|venerd\u00EC)<\\[\\]#(\\p{IsNd}{1}+)(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("}+)", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeZone.setDefault(timeZone0);
      Locale locale0 = new Locale("D", "s<L\bL\"ArRu~");
      FastDateParser fastDateParser0 = new FastDateParser("_;z4E<[]#hKe)+5/", timeZone0, locale0);
      TimeZone timeZone1 = fastDateParser0.getTimeZone();
      fastDateParser0.getPattern();
      timeZone0.getDisplayName(true, 0);
      FastDateParser fastDateParser1 = new FastDateParser("_;z4E<[]#hKe)+5/", timeZone1, locale0);
      Locale locale1 = Locale.ITALY;
      locale0.getDisplayName(locale1);
      fastDateParser0.equals(fastDateParser1);
      ParsePosition parsePosition0 = new ParsePosition(2286);
      // Undeclared exception!
      try { 
        fastDateParser1.parse("GMT", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("6DM#", "");
      FastDateParser fastDateParser0 = new FastDateParser("3@`z4A w0TYPAi", timeZone0, locale0);
      assertEquals("3@`z4A w0TYPAi", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("ycO=?i", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(6);
      fastDateParser0.parse(")?'%){8 :T>QU/dpSB", parsePosition0);
      assertEquals("java.text.ParsePosition[index=7,errorIndex=-1]", parsePosition0.toString());
      assertEquals(7, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "kVjTwsMi<(#!BUFo\"");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("{<bVCc;gf$Wh", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = fastDateParser0.parse("PLT", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("D", timeZone0, locale0);
      try { 
        fastDateParser0.parse("ACT");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"ACT\" does not match (\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("yO=?]i", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("905bi");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("`f=SfYC7wA", timeZone0, locale0);
      assertEquals("`f=SfYC7wA", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.UK;
      TimeZone timeZone0 = TimeZone.getTimeZone(":PO`Q6uZ{AL");
      FastDateParser fastDateParser0 = new FastDateParser(":PO`Q6uZ{AL", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse(":PO`Q6uZ{AL", parsePosition0);
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("98~q8Zz{GW", timeZone0, locale0);
      assertEquals("98~q8Zz{GW", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-6279), "o>d~<S`K!n6DxP9");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("Sm8|%x4'vB*41?R4q", simpleTimeZone0, locale0);
      assertEquals("Sm8|%x4'vB*41?R4q", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("D", "s<L\bL\"ArRu~");
      FastDateParser fastDateParser0 = new FastDateParser("7\"=-Wc+'", timeZone0, locale0);
      assertEquals("7\"=-Wc+'", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(11, ";a6c}-<9 &@b_GP");
      Locale locale0 = new Locale(";a6c}-<9 &@b_GP", ";a6c}-<9 &@b_GP");
      FastDateParser fastDateParser0 = new FastDateParser(";a6c}-<9 &@b_GP", simpleTimeZone0, locale0);
      assertEquals(";a6c}-<9 &@b_GP", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser(">H5JRK{[{XbAn.\"=da", timeZone0, locale0);
      assertEquals(">H5JRK{[{XbAn.\"=da", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(89, "f>T/");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("G/bKL", simpleTimeZone0, locale0);
      assertEquals("G/bKL", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-423), "PLT", (-423), 0, 140, 0, (-423), 0, (-2410), 0);
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("H.", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-3403));
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser(")HXM9c>", timeZone0, locale0);
      assertEquals(")HXM9c>", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("}+)", timeZone0, locale0);
      assertEquals("}+)", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("^obM6fT", timeZone0, locale0);
      assertEquals("^obM6fT", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-6279), "o>d~<S`K!n6DxP9");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("*\"Bz$J^8iY", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-6279));
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("GMTAET", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("", "s<L\bL\"ArRu~");
      FastDateParser fastDateParser0 = new FastDateParser("-R);h6#R", timeZone0, locale0);
      assertEquals("-R);h6#R", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(">=3{s(;FBoDz6;EAZ>9W", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1119);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = new Locale("G,z+$:", "G,z+$:", "%W]~]Imo%dY2");
      FastDateParser fastDateParser0 = new FastDateParser("G,z+$:", timeZone0, locale0);
      assertEquals("G,z+$:", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("2Fl|RL/ 3Y;", timeZone0, locale0);
      try { 
        fastDateParser0.parse("2Fl|RL/ 3Y;");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"2Fl|RL/ 3Y;\" does not match 2(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = new Locale("@L>KtKae8Q$heJ=5q", "@L>KtKae8Q$heJ=5q", "@L>KtKae8Q$heJ=5q");
      Locale locale1 = Locale.ITALY;
      TimeZone timeZone0 = TimeZone.getTimeZone("-2\"bA9");
      FastDateParser fastDateParser0 = new FastDateParser("GMTEAT", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("GMTEAT", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("3o!a", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(109, "GMTT");
      FastDateParser fastDateParser1 = new FastDateParser("3o!a", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("4u\"Ld(2DPqOsms%", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals("%2yyS1T9FpfT(3L=Gw");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = new Locale("@L>KtKae8Q$heJ=5q", "@L>KtKae8Q$heJ=5q", "@L>KtKae8Q$heJ=5q");
      TimeZone timeZone0 = TimeZone.getTimeZone("-2\"bA9");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("NST", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("hVnawIq,}B3)K!OCK", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("8KmN");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("hVnawIq,}B3)K!OCK", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("(\\p{IsNd}++)", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "@L>KtKae8Q$heJ=5q");
      Locale locale0 = new Locale("@L>KtKae8Q$heJ=5q");
      FastDateParser fastDateParser0 = new FastDateParser("@L>KtKae8Q$heJ=5q", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("@qgBI", parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("{");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("{", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("Sc-1K", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("2G69Z\".Z#W__");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("Hu)1?lS1+l=5n\"&^>%1", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("90K5bi");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("G?SG0B!fsE[P", timeZone0, locale0);
      assertEquals("G?SG0B!fsE[P", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("=Fz1&[w0Y\"1@", timeZone0, locale0);
      assertEquals("=Fz1&[w0Y\"1@", fastDateParser0.getPattern());
  }
}
