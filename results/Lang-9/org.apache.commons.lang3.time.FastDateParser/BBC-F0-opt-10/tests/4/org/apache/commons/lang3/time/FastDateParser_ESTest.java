/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 12:12:32 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("]:H#3c", timeZone0, locale0);
      assertEquals("]:H#3c", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("2n|", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser(")o_n_tA$Fbu~VJ", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1345, "06x*4$sp(h");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-5819));
      assertEquals((-3819), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("9R\"s#Jsw`");
      Locale locale0 = new Locale("9R\"s#Jsw`", "9R\"s#Jsw`", "9R\"s#Jsw`");
      FastDateParser fastDateParser0 = new FastDateParser("9R\"s#Jsw`", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1574));
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1345, "06x*4$sp(h");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("Germany", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parseObject("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\" does not match (n\\. Chr\\.|n\\. Chr\\.|v\\. Chr\\.|v\\. Chr\\.)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser(")o_n_tA$Fbu~VJ", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("9R\"s#Jsw`");
      Locale locale0 = Locale.ITALIAN;
      ParsePosition parsePosition0 = new ParsePosition(117);
      FastDateParser fastDateParser0 = new FastDateParser("},@ yzTaa.8", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("},@ yzTaa.8", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1345, "06x*4$sp(h");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("]", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTCAT");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("GMTCAT", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("zcB_e` R)(1>^4os", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser((String) null, timeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("`?", timeZone0, locale0);
      assertEquals("`?", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("S|5;:.");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("S|5;:.", timeZone0, locale0);
      assertEquals("S|5;:.", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("yyBG>?c}}", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      fastDateParser0.parse("*3w[sGmF_9", parsePosition0);
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("@?Af@5", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("@?Af@5", parsePosition0);
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
      assertEquals(2, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("zcB_e` R)(1>^4os", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("GMTSST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getTimeZone("yyy");
      FastDateParser fastDateParser0 = new FastDateParser("yyy", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-1680));
      assertEquals(320, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("@");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("m", timeZone0, locale0);
      assertEquals("m", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1098), "E-T");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("_`/n8??'A[qKj.|PV3", simpleTimeZone0, locale0);
      assertEquals("_`/n8??'A[qKj.|PV3", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("GM^CAT", timeZone0, locale0);
      assertEquals("GM^CAT", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(83, "@");
      FastDateParser fastDateParser0 = new FastDateParser("@", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2000));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "DT", (-1), 0, 2485, 0, 2485, 0, (-1), (-1), 2485);
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("?5'`S=|kQ13vK", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(95, "");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser(">Qmoks%x#RZD ", simpleTimeZone0, locale0);
      assertEquals(">Qmoks%x#RZD ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("=Cn=X:(O", timeZone0, locale0);
      assertEquals("=Cn=X:(O", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("<", timeZone0, locale0);
      assertEquals("<", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMT");
      Locale locale0 = Locale.forLanguageTag("DT");
      FastDateParser fastDateParser0 = new FastDateParser(":3bH;wKvfILAY", timeZone0, locale0);
      assertEquals(":3bH;wKvfILAY", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("S|e;:.");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("8%C}K0", timeZone0, locale0);
      assertEquals("8%C}K0", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMT");
      Locale locale0 = Locale.forLanguageTag("DT");
      FastDateParser fastDateParser0 = new FastDateParser("z7", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = fastDateParser0.parse(",[mYz@&hd_*[vE", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-538), "9R\"s#Jsw`");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("; y5", simpleTimeZone0, locale0);
      assertEquals("; y5", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(83, "6:H4ft)cA]");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("6:H4ft)cA]", simpleTimeZone0, locale0);
      assertEquals("6:H4ft)cA]", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(40, "");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("3", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("3", parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1098), "E-T");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("E-T", simpleTimeZone0, locale0);
      assertEquals("E-T", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1098), "ECT");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("/})z,!.v{Y", simpleTimeZone0, locale0);
      assertEquals("/})z,!.v{Y", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMT");
      Locale locale0 = Locale.forLanguageTag("DT");
      FastDateParser fastDateParser0 = new FastDateParser("sw*z05cB6 ps", timeZone0, locale0);
      assertEquals("sw*z05cB6 ps", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("9z,M(DxJ");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("MMMI", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("9z,M(DxJ");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone.getTimeZone("9zM(LiDJ");
      TimeZone timeZone0 = TimeZone.getTimeZone("9zM(LiDJ");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("9zM(LiDJ", timeZone0, locale0);
      Locale locale1 = Locale.GERMANY;
      FastDateParser fastDateParser1 = new FastDateParser("9zM(LiDJ", timeZone0, locale1);
      String string0 = "&2h";
      try { 
        fastDateParser1.parseObject(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"&2h\" does not match 9(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre Normalzeit|ACST|ACT|ACWST|ADT|AEDT|AEST|Afghanistanische Zeit|AFT|AKDT|AKST|Alaska Normalzeit|Alaska Sommerzeit|Alma Ata Zeit|ALMT|Amazonas Normalzeit|AMT|Anadyr Zeit|ANAT|Aqtau Zeit|Aqtobe Zeit|AQTT|Arabische Normalzeit|Argentinische Zeit|Armenische Zeit|ART|Aserbaidschanische Zeit|AST|Atlantik Normalzeit|Atlantik Sommerzeit|AWST|Azoren Sommerzeit|Azoren Zeit|AZOST|AZOT|AZT|Bangladesch Zeit|BDT|Bhutanische Zeit|BNT|Bolivianische Zeit|BOT|Bougainville Standard Time|Brasilianische Zeit|Britische Sommerzeit|BRT|Brunei Zeit|BST|BTT|CAT|CCT|CDT|CHADT|Chamorro Normalzeit|CHAST|Chatham Normalzeit|Chatham Sommerzeit|Chilenische Sommerzeit|Chilenische Zeit|Chinesische Normalzeit|Choibalsan Zeit|CHOT|Christmas Island Zeit|ChST|CHUT|Chuuk Zeit|CKT|CLST|CLT|Cocos Islands Zeit|Cook-Inseln Zeit|COT|CST|CVT|CXT|Davis Zeit|DAVT|DDUT|Dumont-d'Urville Zeit|EASST|EAST|EAT|ECT|Ecuadorianische Zeit|EDT|EGST|EGT|EST|Falkland Inseln Zeit|Fernando de Noronha Zeit|Fidschi Sommerzeit|Fidschi Zeit|FJST|FJT|FKT|FNT|Franz\u00F6sisch S\u00FCd- u\\. Antarktische Landzeit|Franz\u00F6sisch-Guiana Zeit|Galapagos Zeit|GALT|Gambier Zeit|GAMT|Georgische Zeit|GET|GFT|Ghanaische Normalzeit|Gilbert-Inseln Zeit|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|Golf Normalzeit|Greenwich Zeit|GST|Guyanische Zeit|GYT|Hawaii Normalzeit|Hawaii Sommerzeit|HDT|HKT|Hongkong Zeit|Hovd Zeit|HOVT|HST|ICT|IDT|Indische Normalzeit|Indischer Ozean Territorium Zeit|Indochina Zeit|IOT|Iranische Normalzeit|Iranische Sommerzeit|IRDT|Irische Sommerzeit|IRKT|Irkutsk Zeit|IRST|Israelische Normalzeit|Israelische Sommerzeit|IST|Jakutsk Zeit|Japanische Normalzeit|Jekaterinburger Zeit|JST|Kap Verde Zeit|KGT|Kirgisische Zeit|Kolumbianische Zeit|Koordinierte Universalzeit|Koreanische Normalzeit|Kosrae Zeit|KOST|Kostanay Standard Time|Krasnojarsker Zeit|KRAT|KST|Kubanische Normalzeit|Kubanische Sommerzeit|LHDT|LHST|Line Inseln Zeit|LINT|Lord Howe Normalzeit|Lord Howe Sommerzeit|Macquarieinsel Sommerzeit|Macquarieinsel Zeit|Magadanische Zeit|MAGT|Malaysische Zeit|Maledivische Zeit|Marquesas Zeit|Marshallinseln Zeit|MART|Mauritius Zeit|Mawson Zeit|MAWT|MDT|MEST|MESZ|MET|MEZ|MHT|MIST|Mitteleurop\u00E4ische Sommerzeit|Mitteleurop\u00E4ische Zeit|MMT|Moskauer Normalzeit|MSK|MST|MUT|MVT|Myanmar Zeit|MYT|Nauru Zeit|NCT|NDT|Nepalesische Zeit|Neufundland Normalzeit|Neufundland Sommerzeit|Neukaledonische Zeit|Neuseeland Normalzeit|Neuseeland Sommerzeit|NFST|NFT|Niue Zeit|Norfolk Sommerzeit|Norfolk Zeit|NOVT|Nowosibirsker Zeit|NPT|NRT|NST|NUT|NZDT|NZST|OESZ|OEZ|Omsk Zeit|OMST|Oral Zeit|ORAT|Ostafrikanische Zeit|Osterinseln Sommerzeit|Osterinseln Zeit|Osteurop\u00E4ische Sommerzeit|Osteurop\u00E4ische Zeit|Ostgr\u00F6nl\u00E4ndische Sommerzeit|Ostgr\u00F6nl\u00E4ndische Zeit|Ostindonesische Zeit|Pakistanische Zeit|Palau Zeit|Papua-Neuguinea Zeit|Paraguay Sommerzeit|Paraguay Zeit|Pazifische Normalzeit|Pazifische Sommerzeit|PDT|Peruanische Zeit|PET|Petropawlowsk-Kamtschatkische Zeit|PETT|PGT|Philippines Standard Time|Phoenix Inseln Zeit|PHOT|Pierre & Miquelon Normalzeit|Pierre & Miquelon Sommerzeit|Pitcairn Normalzeit|PKT|PMDT|PMST|Pohnpei Zeit|PONT|PST|PWT|PYST|PYT|QOST|QYZT|Qyzylorda Zeit|RET|Reunion Zeit|Rocky Mountains Normalzeit|Rocky Mountains Sommerzeit|Rothera Zeit|ROTT|Sakhalin Zeit|SAKT|Salomoninseln Zeit|Samarische Zeit|Samoa Normalzeit|SAMT|SAST|SBT|SCT|Seychellen Zeit|SGT|Singapur Zeit|South Georgia Normalzeit|Srednekolymsk Time|SRET|SRT|SST|Suriname Zeit|SYOT|Syowa Zeit|S\u00FCdafrikanische Normalzeit|Tadschikische Zeit|Tahiti Zeit|TAHT|TFT|Timor-Leste Normalzeit|TJT|TKT|TLT|TMT|Tokelau Zeit|Tonga Zeit|TOT|Turkmenische Zeit|Tuvalu Zeit|TVT|Ulaanbaatar Zeit|ULAT|Uruguayische Zeit|Usbekistan Zeit|Ust-Nera Zeit|UTC|UYT|UZT|Vanuatu Zeit|Venezuelanische Zeit|VET|VLAT|VOST|Vostok Zeit|VUT|Wake Zeit|WAKT|Wallis u\\. Futuna Zeit|WAT|West Samoa Sommerzeit|West Samoa Zeit|Westafrikanische Zeit|Westeurop\u00E4ische Sommerzeit|Westeurop\u00E4ische Zeit|Westgr\u00F6nl\u00E4ndische Sommerzeit|Westgr\u00F6nl\u00E4ndische Zeit|Westindonesische Zeit|Westliche Normalzeit \\(Australien\\)|WESZ|WEZ|WFT|WGST|WGT|WIB|WIT|WITA|Wladiwostok Zeit|WSDT|WSST|XJT|YAKT|YEKT|Zentral-Westliche Normalzeit \\(Australien\\)|Zentralafrikanische Zeit|Zentrale Normalzeit|Zentrale Normalzeit \\(Northern Territory\\)|Zentrale Normalzeit \\(S\u00FCdaustralien\\)|Zentrale Normalzeit \\(S\u00FCdaustralien/New South Wales\\)|Zentrale Sommerzeit|Zentrale Sommerzeit \\(S\u00FCdaustralien\\)|Zentrale Sommerzeit \\(S\u00FCdaustralien/New South Wales\\)|Zentraleurop\u00E4ische Sommerzeit|Zentraleurop\u00E4ische Zeit|Zentralindonesische Zeit|\u00D6stliche Normalzeit|\u00D6stliche Normalzeit \\(New South Wales\\)|\u00D6stliche Normalzeit \\(Queensland\\)|\u00D6stliche Normalzeit \\(Tasmanien\\)|\u00D6stliche Normalzeit \\(Victoria\\)|\u00D6stliche Sommerzeit|\u00D6stliche Sommerzeit \\(New South Wales\\)|\u00D6stliche Sommerzeit \\(Tasmanien\\)|\u00D6stliche Sommerzeit \\(Victoria\\))(\\p{IsNd}++)\\(
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("d{nhZ:9SD(C", timeZone0, locale0);
      assertEquals("d{nhZ:9SD(C", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("D+E+|F+G+|H+|K+|M+wS+|W|Z+|a+|d+|h+|k+|+|s+|G+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'AZa-]++");
      FastDateParser fastDateParser0 = new FastDateParser("D+E+|F+G+|H+|K+|M+wS+|W|Z+|a+|d+|h+|k+|+|s+|G+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'AZa-]++", timeZone0, locale0);
      assertEquals("D+E+|F+G+|H+|K+|M+wS+|W|Z+|a+|d+|h+|k+|+|s+|G+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'AZa-]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      FastDateParser fastDateParser0 = new FastDateParser("$gh5,>df<", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(4);
      Object object0 = fastDateParser0.parseObject("'u$|6ULP6zq7t4+", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1098), "E-T");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("&+1?h+e|?/7", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parse("6^{");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"6^{\" does not match &\\+1\\?(\\p{IsNd}++)\\+
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("yyuBG>?c}}", timeZone0, locale0);
      try { 
        fastDateParser0.parse("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\" does not match (\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("GMTPNT", timeZone0, locale0);
      Locale locale1 = Locale.forLanguageTag("GMTPNT");
      FastDateParser fastDateParser1 = new FastDateParser("GMTPNT", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "21/Z1");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("21/Z1", simpleTimeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("21/Z1", timeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("21/Z1", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("}+)", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1345, "06x*4$sp(h");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser(".", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(simpleTimeZone0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("GMTPNT", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMXTCAT");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("NshI8c", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getTimeZone(" not in (");
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("72@^B`S.)<)h6b");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1345, "06x*4$sp(h");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("Germany", simpleTimeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("(n\\. Chr\\.|n\\. Chr\\.|v\\. Chr\\.|v\\. Chr\\.)", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1345, "06x*4$sp(h");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser(".", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("yJ&u?L)?OC3o", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("50JyJta{\"ysM/(:");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1345, "06x*4$sp(h");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser(".", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals(".", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1345, "06x*4$sp(h");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser(".", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("yyBG>?c}}", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[yyBG>?c}},en_GB,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser(")o_n_tA$Fbu~VJ", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      TimeZone timeZone0 = TimeZone.getTimeZone("DJ&u8?L)%:3o");
      FastDateParser fastDateParser0 = new FastDateParser("DJ&u8?L)%:3o", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("72@^B`.)<)h6b");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("yhUJu8L)O:3");
      FastDateParser fastDateParser0 = new FastDateParser("yhUJu8L)O:3", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("72o3g`_{<f6");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1345, "06x*4$sp(h");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[", simpleTimeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("de", locale1.getLanguage());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("zcB_e` R)(1>^4os", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("PST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }
}
