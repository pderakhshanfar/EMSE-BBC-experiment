/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 10:02:54 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("^BT(f6u~ SMEWP(9#jC");
      FastDateParser fastDateParser0 = new FastDateParser("0s#Ayaa1M0xj:W?gd", timeZone0, locale0);
      assertEquals("0s#Ayaa1M0xj:W?gd", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("^BT(6u~ SMEWP(9#jC");
      FastDateParser fastDateParser0 = new FastDateParser("(^:!8%(e^vr", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(41);
      assertEquals(1941, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("HS7OuRClcL~`k-~^!|k", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("^,xN3", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(845, "/c{O?Xxr|C$G[G 9");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("/c{O?Xxr|C$G[G 9", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("/c{O?Xxr|C$G[G 9", parsePosition0);
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(845, "/c{O?X|C*Q$G[G .9");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("/c{O?X|C*Q$G[G .9", simpleTimeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("/c{O?X|C*Q$G[G .9");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("^BT(6u~ SMEWP(9#jC");
      FastDateParser fastDateParser0 = new FastDateParser("^BT(6u~ SMEWP(9#jC", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(845, "/c{O?Xxr|C$G[G 9");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("/c{O?Xxr|C$G[G 9", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-935), "@lw");
      FastDateParser fastDateParser0 = new FastDateParser("GMTIET", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("Jq8n%,45i/#]C*KJ", ",-+%B%z9wqwU@$h$2{e", ",-+%B%z9wqwU@$h$2{e");
      FastDateParser fastDateParser0 = new FastDateParser(",-+%B%z9wqwU@$h$2{e", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject(",-+%B%z9wqwU@$h$2{e", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("a");
      FastDateParser fastDateParser0 = new FastDateParser("a", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("^BT(6u~ SMEWP(9#jC", "Jq8n%,45i/#]C*KJ", "^BT(6u~ SMEWP(9#jC");
      ParsePosition parsePosition0 = new ParsePosition(2836);
      FastDateParser fastDateParser0 = new FastDateParser("^BT(6u~ SMEWP(9#jC", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("Jq8n%,45i/#]C*KJ", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("^BT(6u~ SMEWP(9#jC");
      FastDateParser fastDateParser0 = new FastDateParser("^BT(6u~ SMEWP(9#jC", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(23);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(845, "/c{O?X|C*Q$G[G .9");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("/c{O?X|C*Q$G[G .9", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      TimeZone timeZone0 = TimeZone.getTimeZone("x'9Y2M@.laRFJ#Ir");
      FastDateParser fastDateParser0 = new FastDateParser("]", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(193);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser((String) null, timeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++";
      Locale locale0 = Locale.ITALIAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1601), "zwba4Dg");
      SimpleTimeZone simpleTimeZone1 = (SimpleTimeZone)simpleTimeZone0.clone();
      Locale locale1 = Locale.CHINESE;
      FastDateParser fastDateParser1 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0, locale1);
      String string1 = "qIcY^Y";
      FastDateParser fastDateParser2 = null;
      try {
        fastDateParser2 = new FastDateParser(string1, simpleTimeZone1, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("<wg\"pa2?X#x(V]YY7", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1549));
      parsePosition0.setIndex(0);
      Date date0 = fastDateParser0.parse("<wg\"pa2?X#x(V]YY7", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("zjt{_-Pj5N+qvF", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("ART");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Z`I7S73`/");
      Locale locale0 = new Locale("");
      FastDateParser fastDateParser0 = new FastDateParser("Z`I7S73`/", timeZone0, locale0);
      assertEquals("Z`I7S73`/", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("W_G(n=Ui", timeZone0, locale0);
      assertEquals("W_G(n=Ui", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-935), "@lw");
      FastDateParser fastDateParser0 = new FastDateParser("@lw", simpleTimeZone0, locale0);
      assertEquals("@lw", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(845, "/c{O?Xxr|C$G[G 9");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("=_^rzh?iTfZ", simpleTimeZone0, locale0);
      assertEquals("=_^rzh?iTfZ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("^BT(6u~ SMEWP(9#jC");
      FastDateParser fastDateParser0 = new FastDateParser(";o", timeZone0, locale0);
      assertEquals(";o", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("^BT(6u~ SMEWP(9#jC");
      FastDateParser fastDateParser0 = new FastDateParser("GdS:Xw]5^6_'uM", timeZone0, locale0);
      assertEquals("GdS:Xw]5^6_'uM", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("9FM", timeZone0, locale0);
      assertEquals("9FM", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(845, "/c{O?Xxr|C$G[G 9");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("k4q2[MdHi$m", simpleTimeZone0, locale0);
      assertEquals("k4q2[MdHi$m", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3930), "\u30B0\u30EA\u30CB\u30C3\u30B8\u6A19\u6E96\u6642");
      FastDateParser fastDateParser0 = new FastDateParser("37 ", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parse("S+Ne2u");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"S+Ne2u\" does not match 37 
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("^BT(6u~ SMEWP(9#jC");
      FastDateParser fastDateParser0 = new FastDateParser("s2 !97>pMH}", timeZone0, locale0);
      assertEquals("s2 !97>pMH}", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(845, "/c{O?Xxr|C$G[G 9");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("/m<w1", simpleTimeZone0, locale0);
      assertEquals("/m<w1", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("0!|{al}.U7", timeZone0, locale0);
      assertEquals("0!|{al}.U7", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-935), "@lw");
      FastDateParser fastDateParser0 = new FastDateParser("y.^xi", simpleTimeZone0, locale0);
      assertEquals("y.^xi", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("-p~ ZoqX$j<*", timeZone0, locale0);
      assertEquals("-p~ ZoqX$j<*", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("*N6d6D)rl>SI/D3,B_", timeZone0, locale0);
      assertEquals("*N6d6D)rl>SI/D3,B_", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(845, "/c{O?Xxr|C$G[G 9");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("/c{O?Xxr|C$G[G 9", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-5059));
      assertEquals((-3059), int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("^BT(6u~ SMEWP(9#jC", "Jq8n%,45i/#]C*KJ", "^BT(6u~ SMEWP(9#jC");
      FastDateParser fastDateParser0 = new FastDateParser("^BT(6u~ SMEWP(9#jC", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("+|;>}d8O)", timeZone0, locale0);
      assertEquals("+|;>}d8O)", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(41, "6uGxiq=WI,Q");
      FastDateParser fastDateParser0 = new FastDateParser("{&yyAYedEg", simpleTimeZone0, locale0);
      assertEquals("{&yyAYedEg", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("|Ww?G6G,2`9yw>eM", timeZone0, locale0);
      assertEquals("|Ww?G6G,2`9yw>eM", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("^BT(6u~ SMEWP(9#jC", "Jq8n%,45i/#]C*KJ", "^BT(6u~ SMEWP(9#jC");
      FastDateParser fastDateParser0 = new FastDateParser(">$k);LU", timeZone0, locale0);
      assertEquals(">$k);LU", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(845, "/c{O?X|C*Q$G[G .9");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("~", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parse("/c{O?X|C*Q$G[G .9");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"/c{O?X|C*Q$G[G .9\" does not match ~
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("^BT(f6u~ SMEWP(9#jC");
      FastDateParser fastDateParser0 = new FastDateParser("^BT(f6u~ SMEWP(9#jC", timeZone0, locale0);
      Locale locale1 = Locale.ENGLISH;
      FastDateParser fastDateParser1 = new FastDateParser("^BT(f6u~ SMEWP(9#jC", timeZone0, locale1);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("7QxhrWmJb~%@", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2), "ECT");
      FastDateParser fastDateParser1 = new FastDateParser("7QxhrWmJb~%@", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(845, "/c{O?Xxr|C$G[G 9");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("/c{O?Xxr|C$G[G 9", simpleTimeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("ss5b6eI9q;W'CHO)iAO", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(112, "/c{O?X|C*Q$G[G .9");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("[pCk>#dOug[", simpleTimeZone0, locale0);
      Integer integer0 = new Integer(112);
      boolean boolean0 = fastDateParser0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("7QxhrWmJb~%@", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "6vwxnXv0o()8p.");
      FastDateParser fastDateParser0 = new FastDateParser("Heure de Greenwich", simpleTimeZone0, locale0);
      Date date0 = fastDateParser0.parse("67E{mb");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("83Znnx|\"~-B!gslxR", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals(0, pattern0.flags());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "ECT");
      FastDateParser fastDateParser0 = new FastDateParser("6uGBiq=]hI,Q", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("^BT(6u~ SMEWP(9#jC");
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}{", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("^BT(6u~ SMEWP(9#jC");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"^BT(6u~ SMEWP(9#jC\" does not match \\(
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("HS7OuRClcL~`k-~^!|k", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("FR", locale1.getCountry());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("`(r/hV");
      Locale locale0 = new Locale("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      FastDateParser fastDateParser0 = new FastDateParser("sXCwOUbur5j)F *", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("sXCwOUbur5j)F *", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("^BT(6u~ SMEWP(9#jC", "Jq8n%,45i/#]C*KJ", "^BT(6u~ SMEWP(9#jC");
      FastDateParser fastDateParser0 = new FastDateParser("^BT(6u~ SMEWP(9#jC", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-276));
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("^BT(6u~ SMEWP(9#jC", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("^BT(6u~ SMEWP(9#jC");
      FastDateParser fastDateParser0 = new FastDateParser("^BT(6u~ SMEWP(9#jC", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[^BT(6u~ SMEWP(9#jC,^bt(6u~ smewp(9#jc,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("^BT(6u~ SMEWP(9#jC", "Jq8n%,45i/#]C*KJ", "^BT(6u~ SMEWP(9#jC");
      FastDateParser fastDateParser0 = new FastDateParser("^BT(6u~ SMEWP(9#jC", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("`(r/hV");
      Locale locale0 = new Locale("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      FastDateParser fastDateParser0 = new FastDateParser("sXCwOUbur5j)F *", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("6eE{mb");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-935), "@lw");
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[", simpleTimeZone0, locale0);
      assertEquals("FastDateParser[", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      Locale locale0 = new Locale("Duq''Ba", "h.}:nSB+@DUAbHURK");
      FastDateParser fastDateParser0 = new FastDateParser("6Syzny~+'OlZ", timeZone0, locale0);
      assertEquals("6Syzny~+'OlZ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("zjt{_-PjL5N+vF", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("GMTPNT", parsePosition0);
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
      assertEquals(3, parsePosition0.getIndex());
  }
}
