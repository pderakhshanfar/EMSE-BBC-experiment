/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 10:08:20 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("~/l9g4^;O");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("Dy$c", timeZone0, locale0);
      assertEquals("Dy$c", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("yyuJh\"DiJ", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("67*1z}*kg`4`CM:iMI");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("yyuJh\"DiJ", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(3);
      fastDateParser0.parse("67*1z}*kg`4`CM:iMI", parsePosition0);
      assertEquals("java.text.ParsePosition[index=4,errorIndex=-1]", parsePosition0.toString());
      assertEquals(4, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      Locale locale1 = (Locale)locale0.clone();
      FastDateParser fastDateParser0 = new FastDateParser(">\")", timeZone0, locale1);
      try { 
        fastDateParser0.parse(";u@");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \";u@\" does not match >\"\\)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2388), "]", (-2388), 0, 0, (-2388), 0, 308, 0, (-1662), (-2388), 123, 123);
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("]", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("yyTwzk2Jhp7Of,", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      TimeZone timeZone0 = TimeZone.getTimeZone("~/Ol9g4^;O");
      FastDateParser fastDateParser0 = new FastDateParser("GMT", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2388), "]", (-2388), 0, 0, (-2388), 0, 308, 0, (-1662), (-2388), 123, 123);
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("]", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("]", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(45, "~/Ol9g4^;O");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("~/Ol9g4^;O", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("~/Ol9g4^;O", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("=^ktZTk@4W!.T[n2~z");
      Locale locale0 = new Locale("M''C B\"?S~", "M''C B\"?S~", "=^ktZTk@4W!.T[n2~z");
      FastDateParser fastDateParser0 = new FastDateParser("M''C B\"?S~", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(124);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("M''C B\"?S~", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("yyuJh\"DiJ", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(688);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2388), "]", (-2388), 0, 0, (-2388), 0, 308, 0, (-1662), (-2388), 123, 123);
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("z7z=->XFh9$Eo'cye1P", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-2388));
      // Undeclared exception!
      try { 
        fastDateParser0.parse("eKt*fV9<7", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("~/l9g4^;O");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("*W1.HCt,'cuLsG?", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("@}887$,Pa*& ", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("yy<J(hU\"DiJY", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(32, "~/l9g4^;O");
      TimeZone timeZone0 = TimeZone.getTimeZone("~/l9g4^;O");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("zu", timeZone0, locale0);
      Locale locale1 = Locale.ITALY;
      FastDateParser fastDateParser1 = new FastDateParser("zu", timeZone0, locale1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}{", timeZone0, locale0);
      assertEquals("(p{IsNd}{", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("zu", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = fastDateParser0.parse("zu", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(45, "i}xPK2O]L=x]");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("~/Ol9g4^;O", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parse("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\" does not match ~/
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(45, "~/l9g4^;O");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("zu", simpleTimeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("AST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("`");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("`", timeZone0, locale0);
      assertEquals("`", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      TimeZone timeZone0 = TimeZone.getTimeZone("1E\"K*xx(iY}");
      FastDateParser fastDateParser0 = new FastDateParser("^/DvH[96gWmBk5_s", timeZone0, locale0);
      assertEquals("^/DvH[96gWmBk5_s", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("j47yt");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("S}6F=|)DOO", timeZone0, locale0);
      assertEquals("S}6F=|)DOO", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("-Dz4z2YYe\"", "ART");
      FastDateParser fastDateParser0 = new FastDateParser(";c@~H~H\"mN", timeZone0, locale0);
      assertEquals(";c@~H~H\"mN", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("8E+!z|fbS*U>@", timeZone0, locale0);
      assertEquals("8E+!z|fbS*U>@", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      TimeZone timeZone0 = TimeZone.getTimeZone("~/Ol9g4^;O");
      FastDateParser fastDateParser0 = new FastDateParser("Ew:h7u0O", timeZone0, locale0);
      assertEquals("Ew:h7u0O", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("`");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("9 Gd:k6~", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("_\"S-\"Ddw2QI(~=;+dU");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("d4N@Ne`t", timeZone0, locale0);
      assertEquals("d4N@Ne`t", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("/l#9g4^;O");
      Locale locale0 = new Locale("/l#9g4^;O", "/l#9g4^;O");
      FastDateParser fastDateParser0 = new FastDateParser("3gh#Luv~R", timeZone0, locale0);
      assertEquals("3gh#Luv~R", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("1[![3q,U}bQ0$5<", timeZone0, locale0);
      assertEquals("1[![3q,U}bQ0$5<", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("`");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("0Ru$=.", timeZone0, locale0);
      assertEquals("0Ru$=.", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("|!H-=m.&Xtw", timeZone0, locale0);
      assertEquals("|!H-=m.&Xtw", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("_\"S-\"Ddw2QI(~=;+dU");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("_\"S-\"Ddw2QI(~=;+dU", timeZone0, locale0);
      assertEquals("_\"S-\"Ddw2QI(~=;+dU", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, ",<e6Tabg{|(IY1T");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser(",<e6Tabg{|(IY1T", simpleTimeZone0, locale0);
      assertEquals(",<e6Tabg{|(IY1T", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("$yy<J(8U!sD/piJY", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-4747));
      assertEquals((-2747), int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("yy<J(hU\"DiJY", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(45, "~/Ol9g4^;O");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("E*$ESY%i?", simpleTimeZone0, locale0);
      assertEquals("E*$ESY%i?", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(45, "~/Ol9g4^;O");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("{&g51P'M_Mj^h'GS", simpleTimeZone0, locale0);
      assertEquals("{&g51P'M_Mj^h'GS", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      TimeZone timeZone0 = TimeZone.getTimeZone("@n+c]-:j*<%");
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("_\"S-\"Ddw2QI(~=;+dU");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("aM5<", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("_\"S-\"Ddw2QI(~=;+dU");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"_\"S-\"Ddw2QI(~=;+dU\" does not match (\u5348\u524D|\u5348\u5F8C)(\\p{IsNd}{1}+)5<
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("M''C B\"?S~", timeZone0, locale0);
      Locale locale1 = Locale.ITALIAN;
      FastDateParser fastDateParser1 = new FastDateParser("M''C B\"?S~", timeZone0, locale1);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("z", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "PLT");
      FastDateParser fastDateParser1 = new FastDateParser("z", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("/l#9g4^;O");
      Locale locale0 = new Locale("/l#9g4^;O", "/l#9g4^;O");
      FastDateParser fastDateParser0 = new FastDateParser("/l#9g4^;O", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("\"}O#o64\"~p.0", timeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("}MM>", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(timeZone0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("z", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(24, "~/l9g4^;O");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(45, "~/l9g4^;O");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("M[", simpleTimeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("8[ira+_`/Yv/D");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("_\"S-\"Ddw2QI(~=;+dU");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("k)wwV", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("(\\p{IsNd}++)\\)(\\p{IsNd}++)", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(45, "~/l9g4^;O");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("M[", simpleTimeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("ja_JP", locale1.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("@}887$,Pa*& ", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("@}887$,Pa*& ", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("/l#9g4^;O");
      Locale locale0 = new Locale("/l#9g4^;O", "/l#9g4^;O");
      FastDateParser fastDateParser0 = new FastDateParser("/l#9g4^;O", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("/l#9g4^;O", parsePosition0);
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("yyuJh\"DiJ", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[yyuJh\"DiJ,fr_FR,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2388), "]", (-2388), 0, 0, (-2388), 0, 308, 0, (-1662), (-2388), 123, 123);
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("]", simpleTimeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("WCb&.4FQ!&p<X6<GN", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("9{%m9zoc/HgNm?");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("hij", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("81?M");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("_\"S-\"Ddw2QI(~=;+dU");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[_\"S-\"Ddw2QI(~=;+dU,ja,GMT]", timeZone0, locale0);
      assertEquals("FastDateParser[_\"S-\"Ddw2QI(~=;+dU,ja,GMT]", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(41, "Mz?~w@lita/");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("Mz?~w@lita/", simpleTimeZone0, locale0);
      assertEquals("Mz?~w@lita/", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("zu", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("GMTIST", parsePosition0);
      assertEquals(3, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
  }
}
