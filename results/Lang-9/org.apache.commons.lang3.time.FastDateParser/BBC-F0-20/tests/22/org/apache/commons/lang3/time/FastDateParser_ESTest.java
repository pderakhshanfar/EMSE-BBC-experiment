/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 10:04:50 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.LinkedList;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      fastDateParser0.parse("R9^2$K)P$5)O", parsePosition0);
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-474), "");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("S1..]u@", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-474), "(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("4}(;bM", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "9XC%");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("9XC%", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject(" locale does not support dates before 1868 AD)\n", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2768, "}<^8>H@&w@");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}{", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2408), "qzI");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("K", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=qzI,offset=-2408,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-474), "(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(122);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("4}(;bM", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-474), ">kIL`_1J");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser(">kIL`_1J", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(737, "GMTIST");
      FastDateParser fastDateParser0 = new FastDateParser("GMTIST", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-474), ">kIL`_1J");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser(">kIL`_1J", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(113);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("s%\"A*M?G{6XG4d8", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getTimeZone(";@A!:m?Szu`b");
      FastDateParser fastDateParser0 = new FastDateParser(";@A!:m?Szu`b", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("zW>H&w@", "A#&DZ_h", "^");
      FastDateParser fastDateParser0 = new FastDateParser("zW>H&w@", timeZone0, locale0);
      Locale locale1 = new Locale("A#&DZ_h", "^", "A#&DZ_h");
      FastDateParser fastDateParser1 = new FastDateParser("zW>H&w@", timeZone0, locale1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "9XC%");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("9XC%", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Date date0 = fastDateParser0.parse("9XC%", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("ZcU:ypRYo`c[Si<3qpJ", timeZone0, locale0);
      try { 
        fastDateParser0.parse("E6'A9uiJW0HQYf");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"E6'A9uiJW0HQYf\" does not match (GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|ALMT|AMT|ANAT|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville Standard Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|Chatham \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|Chatham \uD45C\uC900\uC2DC|Choibalsan \uC2DC\uAC04|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|Davis \uC2DC\uAC04|DAVT|DDUT|EASST|EAST|Easter Is\\. \uC2DC\uAC04|Easter Is\\. \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|Fernando de Noronha \uC2DC\uAC04|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|HKT|Hovd \uC2DC\uAC04|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|Kostanay Standard Time|KRAT|KST|LHDT|LHST|LINT|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|Omsk \uC2DC\uAC04|OMST|Oral \uD45C\uC900\uC2DC|ORAT|PDT|PET|PETT|PGT|Philippines Standard Time|PHOT|Pitcairn \uD45C\uC900\uC2DC|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|Qyzylorda \uD45C\uC900\uC2DC|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk Time|SRET|SRT|SST|SYOT|Syowa \uC2DC\uAC04|TAHT|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|Vostok \uC2DC\uAC04|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|YEKT|\uAC00\uB098 \uD45C\uC900\uC2DC|\uAC00\uC774\uC544\uB098 \uC2DC\uAC04|\uAC08\uB77C\uD30C\uACE0\uC2A4 \uC2DC\uAC04|\uAC10\uBE44\uC544 \uC2DC\uAC04|\uAC78\uD504\uB9CC \uD45C\uC900\uC2DC|\uADF8\uB8E8\uC9C0\uC57C \uC2DC\uAC04|\uADF8\uB9AC\uB2C8\uCE58 \uD45C\uC900\uC2DC|\uAE38\uBC84\uD2B8 \uAD70\uB3C4 \uC2DC\uAC04|\uAE4C\uBF40\uBCA0\uB974\uB370 \uC2DC\uAC04|\uB098\uC6B0\uB8E8 \uC2DC\uAC04|\uB0A8\uC544\uD504\uB9AC\uCE74 \uD45C\uC900\uC2DC|\uB124\uD314 \uC2DC\uAC04|\uB178\uBE0C\uC2DC\uBE4C\uC2A4\uD06C \uC2DC\uAC04|\uB178\uD37D \uC2DC\uAC04|\uB178\uD37D \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB274 \uCE7C\uB808\uB3C4\uB2C8\uC544 \uC2DC\uAC04|\uB274\uC9C8\uB79C\uB4DC \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB274\uC9C8\uB79C\uB4DC \uD45C\uC900\uC2DC|\uB274\uD380\uB4E4\uB79C\uB4DC \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB274\uD380\uB4E4\uB79C\uB4DC \uD45C\uC900\uC2DC|\uB2C8\uC6B0\uC5D0 \uC2DC\uAC04|\uB300\uC11C\uC591 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB300\uC11C\uC591 \uD45C\uC900\uC2DC|\uB3D9\uBD80 \uADF8\uB9B0\uB79C\uB4DC \uC2DC\uAC04|\uB3D9\uBD80 \uADF8\uB9B0\uB79C\uB4DC \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB3D9\uBD80 \uC544\uD504\uB9AC\uCE74 \uC2DC\uAC04|\uB3D9\uBD80 \uC778\uB3C4\uB124\uC2DC\uC544 \uC2DC\uAC04|\uB3D9\uBD80 \uC77C\uAD11 \uC808\uC57D \uC2DC\uAC04\\(\uB274\uC0AC\uC6B0\uC2A4\uC6E8\uC77C\uC988\\)|\uB3D9\uBD80 \uC77C\uAD11 \uC808\uC57D \uC2DC\uAC04\\(\uBE45\uD1A0\uB9AC\uC544\\)|\uB3D9\uBD80 \uC77C\uAD11 \uC808\uC57D \uC2DC\uAC04\\(\uD0DC\uC988\uBA54\uC774\uB2C8\uC544\\)|\uB3D9\uBD80 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB3D9\uBD80 \uD45C\uC900\uC2DC|\uB3D9\uBD80 \uD45C\uC900\uC2DC\\(\uB274\uC0AC\uC6B0\uC2A4\uC6E8\uC77C\uC988\\)|\uB3D9\uBD80 \uD45C\uC900\uC2DC\\(\uBE45\uD1A0\uB9AC\uC544\\)|\uB3D9\uBD80 \uD45C\uC900\uC2DC\\(\uD038\uC990\uB79C\uB4DC\\)|\uB3D9\uBD80 \uD45C\uC900\uC2DC\\(\uD0DC\uC988\uBA54\uC774\uB2C8\uC544\\)|\uB3D9\uC720\uB7FD \uC2DC\uAC04|\uB3D9\uC720\uB7FD \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB4A4\uBABD \uB4A4\uB974\uBE4C \uC2DC\uAC04|\uB77C\uC778 \uAD70\uB3C4 \uC2DC\uAC04|\uB85C\uB4DC \uD558\uC6B0 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB85C\uB4DC \uD558\uC6B0 \uD45C\uC900\uC2DC|\uB85C\uC81C\uB77C \uD45C\uC900\uC2DC|\uB9AC\uC720\uB2C8\uC5B8 \uC2DC\uAC04|\uB9C8\uAC00\uB2E8 \uC2DC\uAC04|\uB9C8\uB974\uCF00\uC0AC\uC2A4 \uC2DC\uAC04|\uB9C8\uC15C\uC81C\uB3C4 \uC2DC\uAC04|\uB9D0\uB808\uC774\uC2DC\uC544 \uC2DC\uAC04|\uB9E4\uCF70\uB9AC \uC12C \uC77C\uAD11 \uC808\uC57D \uC2DC\uAC04|\uB9E4\uCF70\uB9AC \uC12C \uD45C\uC900\uC2DC|\uBAA8\uB9AC\uC154\uC2A4 \uC2DC\uAC04|\uBAA8\uC2A4\uD06C\uBC14 \uD45C\uC900\uC2DC|\uBAA8\uC2A8 \uC2DC\uAC04|\uBAB0\uB514\uBE0C \uC2DC\uAC04|\uBBF8\uC580\uB9C8 \uC2DC\uAC04|\uBC29\uAE00\uB77C\uB370\uC2DC \uC2DC\uAC04|\uBCA0\uB124\uC218\uC5D8\uB77C \uC2DC\uAC04|\uBCFC\uB9AC\uBE44\uC544 \uC2DC\uAC04|\uBD80\uD0C4 \uC2DC\uAC04|\uBE0C\uB77C\uC9C8\uB9AC\uC544 \uC2DC\uAC04|\uBE0C\uB8E8\uB098\uC774 \uC2DC\uAC04|\uBE14\uB77C\uB514\uBCF4\uC2A4\uD1A1 \uC2DC\uAC04|\uBE44\uB204\uC544\uD22C \uC2DC\uAC04|\uC0AC\uB9C8\uB77C \uC2DC\uAC04|\uC0AC\uBAA8\uC544 \uD45C\uC900\uC2DC|\uC0AC\uC6B0\uC2A4 \uC870\uC9C0\uC544 \uD45C\uC900\uC2DC|\uC0AC\uD560\uB9B0 \uC2DC\uAC04|\uC0B0\uC9C0 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC0B0\uC9C0 \uD45C\uC900\uC2DC|\uC11C\uBD80 \uADF8\uB9B0\uB79C\uB4DC \uC2DC\uAC04|\uC11C\uBD80 \uADF8\uB9B0\uB79C\uB4DC \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC11C\uBD80 \uC544\uD504\uB9AC\uCE74 \uC2DC\uAC04|\uC11C\uBD80 \uD45C\uC900\uC2DC\\(\uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544\\)|\uC11C\uC0AC\uBAA8\uC544 \uC2DC\uAC04|\uC11C\uC0AC\uBAA8\uC544 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC11C\uC720\uB7FD \uC2DC\uAC04|\uC11C\uC720\uB7FD \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC11C\uC778\uB3C4\uB124\uC2DC\uC544 \uC2DC\uAC04|\uC138\uACC4 \uD45C\uC900\uC2DC|\uC138\uC774\uC140 \uC2DC\uAC04|\uC194\uB85C\uBAAC \uAD70\uB3C4 \uC2DC\uAC04|\uC218\uB9AC\uB0A8 \uC2DC\uAC04|\uC2F1\uAC00\uD3EC\uB974 \uC2DC\uAC04|\uC544\uB098\uB514\uB974 \uC2DC\uAC04|\uC544\uB78D \uD45C\uC900\uC2DC|\uC544\uB974\uBA54\uB2C8\uC544 \uC2DC\uAC04|\uC544\uB974\uD5E8\uD2F0\uB098 \uC2DC\uAC04|\uC544\uB9C8\uC874 \uC2DC\uAC04|\uC544\uC77C\uB79C\uB4DC \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC544\uC81C\uB974\uBC14\uC774\uC794 \uC2DC\uAC04|\uC544\uC870\uB808\uC2A4 \uC2DC\uAC04|\uC544\uC870\uB808\uC2A4 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC544\uD504\uAC00\uB2C8\uC2A4\uD0C4 \uC2DC\uAC04|\uC545\uD0C0\uC6B0 \uC2DC\uAC04|\uC545\uD1A0\uBE0C \uC2DC\uAC04|\uC54C\uB798\uC2A4\uCE74 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC54C\uB798\uC2A4\uCE74 \uD45C\uC900\uC2DC|\uC54C\uB9C8\uC544\uD0C0 \uC2DC\uAC04|\uC57C\uCE20\uD06C \uC2DC\uAC04|\uC5D0\uC774\uCEE4 \uC2DC\uAC04|\uC5D0\uCFE0\uC544\uB3C4\uB974 \uC2DC\uAC04|\uC601\uAD6D \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC601\uC778\uB3C4 \uC81C\uB3C4 \uC2DC\uAC04|\uC608\uCE74\uD14C\uB9B0\uBC84\uADF8 \uC2DC\uAC04|\uC6B0\uB8E8\uACFC\uC774 \uC2DC\uAC04|\uC6B0\uC2A4\uD2F0\uB124\uB77C \uD45C\uC900\uC2DC|\uC6B0\uC988\uBCA0\uD0A4\uC2A4\uD0C4 \uC2DC\uAC04|\uC6B8\uB780\uBC14\uD0C0\uB974 \uC2DC\uAC04|\uC6D4\uB9AC\uC2A4 \uD6C4\uD22C\uB098 \uC2DC\uAC04|\uC6E8\uC774\uD06C \uC2DC\uAC04|\uC774\uB780 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC774\uB780 \uD45C\uC900\uC2DC|\uC774\uB974\uCFE0\uCE20\uD06C \uC2DC\uAC04|\uC774\uC2A4\uB77C\uC5D8 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC774\uC2A4\uB77C\uC5D8 \uD45C\uC900\uC2DC|\uC778\uB3C4 \uD45C\uC900\uC2DC|\uC778\uB3C4\uCC28\uC774\uB098 \uBC18\uB3C4 \uC2DC\uAC04|\uC77C\uBCF8 \uD45C\uC900\uC2DC|\uC911\uAD6D \uD45C\uC900\uC2DC|\uC911\uBD80 \uC720\uB7FD \uC2DC\uAC04|\uC911\uBD80 \uC720\uB7FD \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC911\uBD80 \uC77C\uAD11 \uC808\uC57D \uC2DC\uAC04\\(\uB0A8\uBD80 \uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544\\)|\uC911\uBD80 \uC77C\uAD11 \uC808\uC57D \uC2DC\uAC04\\(\uB0A8\uBD80 \uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544/\uB274\uC0AC\uC6B0\uC2A4\uC6E8\uC77C\uC988\\)|\uC911\uBD80 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC911\uBD80 \uD45C\uC900\uC2DC|\uC911\uBD80 \uD45C\uC900\uC2DC\\(\uB0A8\uBD80 \uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544\\)|\uC911\uBD80 \uD45C\uC900\uC2DC\\(\uB0A8\uBD80 \uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544/\uB274\uC0AC\uC6B0\uC2A4\uC6E8\uC77C\uC988\\)|\uC911\uBD80 \uD45C\uC900\uC2DC\\(\uBD81\uBD80 \uC9C0\uC5ED\\)|\uC911\uC559 \uC11C\uBD80 \uD45C\uC900\uC2DC\\(\uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544\\)|\uC911\uC559 \uC544\uD504\uB9AC\uCE74 \uC2DC\uAC04|\uC911\uC559 \uC720\uB7FD \uC2DC\uAC04|\uC911\uC559 \uC720\uB7FD \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC911\uC559 \uC778\uB3C4\uB124\uC2DC\uC544 \uC2DC\uAC04|\uCC28\uBAA8\uB85C \uD45C\uC900\uC2DC|\uCD94\uD06C \uD45C\uC900\uC2DC|\uCE60\uB808 \uC2DC\uAC04|\uCE60\uB808 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uCF54\uC2A4\uB798 \uC2DC\uAC04|\uCF54\uCF54\uC2A4 \uAD70\uB3C4 \uC2DC\uAC04|\uCF5C\uB86C\uBE44\uC544 \uC2DC\uAC04|\uCFE0\uBC14 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uCFE0\uBC14 \uD45C\uC900\uC2DC|\uCFE0\uD06C \uAD70\uB3C4 \uC2DC\uAC04|\uD06C\uB77C\uC2A4\uB178\uC57C\uB974\uC2A4\uD06C \uC2DC\uAC04|\uD06C\uB9AC\uC2A4\uB9C8\uC2A4\uC12C \uC2DC\uAC04|\uD0A4\uB974\uD0A4\uC988\uC2A4\uD0C4 \uC2DC\uAC04|\uD0C0\uC9C0\uD0A4\uC2A4\uD0C4 \uC2DC\uAC04|\uD0C0\uD788\uD2F0 \uC2DC\uAC04|\uD0DC\uD3C9\uC591 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uD0DC\uD3C9\uC591 \uD45C\uC900\uC2DC|\uD1A0\uCF08\uB77C\uC6B0 \uC2DC\uAC04|\uD1B5\uAC00 \uC2DC\uAC04|\uD22C\uB974\uD06C\uBA54\uB2C8\uC2A4\uD0C4 \uC2DC\uAC04|\uD22C\uBC1C\uB8E8 \uC2DC\uAC04|\uD2F0\uBAA8\uB974-\uB808\uC2A4\uD14C \uC2DC\uAC04|\uD30C\uB77C\uACFC\uC774 \uC2DC\uAC04|\uD30C\uB77C\uACFC\uC774 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uD30C\uD0A4\uC2A4\uD0C4 \uC2DC\uAC04|\uD30C\uD478\uC544\uB274\uAE30\uB2C8 \uC2DC\uAC04|\uD314\uB77C\uC6B0 \uC2DC\uAC04|\uD398\uB8E8 \uC2DC\uAC04|\uD398\uD2B8\uB85C\uD30C\uBE14\uB85C\uD504\uC2A4\uD06C-\uCE84\uCC28\uCE20\uD0A4 \uC2DC\uAC04|\uD3EC\uD074\uB79C\uB4DC \uAD70\uB3C4 \uC2DC\uAC04|\uD3F0\uD398\uC774 \uD45C\uC900\uC2DC|\uD504\uB791\uC2A4 \uB0A8\uBD80 \uC9C0\uBC29 \uBC0F \uB0A8\uADF9 \uC9C0\uC5ED \uC2DC\uAC04|\uD504\uB791\uC2A4\uB839 \uAE30\uC544\uB098 \uC2DC\uAC04|\uD53C\uB2C9\uC2A4 \uAD70\uB3C4 \uC2DC\uAC04|\uD53C\uC5D0\uB974 \uBBF8\uD06C\uB860 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uD53C\uC5D0\uB974 \uBBF8\uD06C\uB860 \uD45C\uC900\uC2DC|\uD53C\uC9C0 \uC2DC\uAC04|\uD53C\uC9C0 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uD558\uC640\uC774 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uD558\uC640\uC774 \uD45C\uC900\uC2DC|\uD55C\uAD6D \uD45C\uC900\uC2DC|\uD64D\uCF69 \uC2DC\uAC04)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("ZcU:ypRYo`c[Si<3qpJ", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("ART");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("ZcU:ypRYo`c[Si<3qpJ", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("GMTIET");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("8E`#\"tCSBNKj", timeZone0, locale0);
      assertEquals("8E`#\"tCSBNKj", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("_Hnk*_/", timeZone0, locale0);
      assertEquals("_Hnk*_/", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(118, ",D~^1T.");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("|Fd^gR 75|Np:l", simpleTimeZone0, locale0);
      assertEquals("|Fd^gR 75|Np:l", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2408), "qzI");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("&.+/mD:*.ZB/\u0005wVsR", simpleTimeZone0, locale0);
      assertEquals("&.+/mD:*.ZB/\u0005wVsR", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("8", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(97);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("GMTIST", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("7u_l-CHcCQvz", timeZone0, locale0);
      assertEquals("7u_l-CHcCQvz", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-474), "(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("4}(;bM", simpleTimeZone0, locale0);
      Date date0 = fastDateParser0.parse("4}(;bM");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("w3uR\"4K/[x^", timeZone0, locale0);
      assertEquals("w3uR\"4K/[x^", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(101, "PST");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("y :M2Hqydc1G_Z@Y", simpleTimeZone0, locale0);
      assertEquals("y :M2Hqydc1G_Z@Y", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(402, "BuS");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("0", simpleTimeZone0, locale0);
      assertEquals("0", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(101, ".P");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser(".P", simpleTimeZone0, locale0);
      assertEquals(".P", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("-}lN^", timeZone0, locale0);
      assertEquals("-}lN^", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(8, ",");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser(",", simpleTimeZone0, locale0);
      assertEquals(",", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2690, "**pZ2kGO9_#t@%pX");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("**pZ2kGO9_#t@%pX", simpleTimeZone0, locale0);
      assertEquals("**pZ2kGO9_#t@%pX", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(737, "GMTIST");
      FastDateParser fastDateParser0 = new FastDateParser("GMTIST", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2642));
      assertEquals((-642), int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-474), ">kIL`_1J");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser(">kIL`_1J", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(666);
      assertEquals(2566, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("G5G19X^\"'eKi", timeZone0, locale0);
      assertEquals("G5G19X^\"'eKi", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Locale locale0 = new Locale("");
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("S;z?x.zaT", timeZone0, locale0);
      locale0.stripExtensions();
      Locale locale1 = Locale.ITALY;
      TimeZone timeZone1 = fastDateParser0.getTimeZone();
      assertEquals("GMT", timeZone1.getID());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-474), ">kIL`_1J");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("Ss$7", simpleTimeZone0, locale0);
      assertEquals("Ss$7", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-474), "(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("<E", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parse("w4$");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"w4$\" does not match <(\u571F|\u571F\u66DC\u65E5|\u65E5|\u65E5\u66DC\u65E5|\u6708|\u6708\u66DC\u65E5|\u6728|\u6728\u66DC\u65E5|\u6C34|\u6C34\u66DC\u65E5|\u706B|\u706B\u66DC\u65E5|\u91D1|\u91D1\u66DC\u65E5)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("=&n}Ah", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("8nA\"<)9iHqcHY6;W4|,");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"8nA\"<)9iHqcHY6;W4|,\" does not match =&
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      Locale locale1 = new Locale("GMTAST", "GMTAST", "GMTAST");
      FastDateParser fastDateParser0 = new FastDateParser("G9nf6puV;=/*+{", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("G9nf6puV;=/*+{", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2408), "qzI");
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("\" does not match ", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("\" does not match ", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(36, "");
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("\u0000%", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("GMTAST", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("9XC%", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(timeZone0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("ART", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("h/N%1(GsS2-)U", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("(\\p{IsNd}++)/", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("qzoI");
      FastDateParser fastDateParser0 = new FastDateParser(")[\"e,Fp|w@a%C", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("", locale1.getVariant());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("MIT", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("{5'G,DFY", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("{5'G,DFY", parsePosition0);
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "9XC%");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("9XC%", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[9XC%,it_IT,9XC%]", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-474), ">kIL`_1J");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser(">kIL`_1J", simpleTimeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("SST", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("8nA\"<)9iHqcHY6;W4|,");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "9XC%");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("6,>.Hw5", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-474), "(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[", simpleTimeZone0, locale0);
      assertEquals("FastDateParser[", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("9mzaBI'_A1k8|bggo>", timeZone0, locale0);
      assertEquals("9mzaBI'_A1k8|bggo>", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(402, "}<^8>H@&w@");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }
}
