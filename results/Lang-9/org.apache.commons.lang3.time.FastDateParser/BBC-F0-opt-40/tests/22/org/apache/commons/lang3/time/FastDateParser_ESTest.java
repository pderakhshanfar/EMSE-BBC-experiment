/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 09:35:50 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = new Locale("", ")-zkZ(w(9'l@f");
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("sH&,YRG/Y(Suv*L", timeZone0, locale0);
      assertEquals("sH&,YRG/Y(Suv*L", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(")-zkZ(w(9'lD@f");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("ZbyS?3?(X(0MmV$P", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(100);
      assertEquals(2000, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ZbyS?3?(X(0VmVHP");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("^nJS&]RG(of<qlo", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1001, "6>ax");
      FastDateParser fastDateParser0 = new FastDateParser("6>ax", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertFalse(timeZone0.useDaylightTime());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1094), "ZbyS?3?XB0VmVH");
      FastDateParser fastDateParser0 = new FastDateParser("ZbyS?3?XB0VmVH", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("G");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("G", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-3539));
      assertEquals((-1539), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = new Locale("&6YnPvHG!IXo", "org.apache.commons.lang3.time.FastDateParser$5");
      TimeZone timeZone0 = TimeZone.getTimeZone("-#^");
      FastDateParser fastDateParser0 = new FastDateParser("mrJh]KpRiwH^AKL%`", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(14);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = new Locale("Q;))V0B5J8>93MGmD!", "]");
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("10z4g7:a:!A{m YA", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("&6YnPvHG!IXo");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("hNv4k:0~2", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(121);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ")-zkZ(w(9'lD@f");
      FastDateParser fastDateParser0 = new FastDateParser("GMTCST", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1720), "Q;))V0B5J8>93MGmD!");
      Locale locale0 = Locale.forLanguageTag("Q;))V0B5J8>93MGmD!");
      FastDateParser fastDateParser0 = new FastDateParser("]", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(270, "r^b5");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("r^b5", simpleTimeZone0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(")-zkZ(w(9'lD@f");
      Locale locale0 = new Locale("Q;))V0B5J8>93MGmD!", "]");
      FastDateParser fastDateParser0 = new FastDateParser(")-zkZ(w(9'lD@f", timeZone0, locale0);
      assertEquals(")-zkZ(w(9'lD@f", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1298);
      parsePosition0.setIndex(14);
      Date date0 = fastDateParser0.parse("FastDateParser[", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("G");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("G", timeZone0, locale0);
      try { 
        fastDateParser0.parse("G");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"G\" does not match (AD|AD|BC|BC)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ZbyS?3?(X(0VmVHP");
      Locale locale0 = new Locale("ZbyS?3?(X(0VmVHP");
      FastDateParser fastDateParser0 = new FastDateParser("ZbyS?3?(X(0VmVHP", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("GMTCNT");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("ZbyS?3?XBS0VmVH", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(3);
      fastDateParser0.parse("GMTART", parsePosition0);
      assertEquals(6, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=6,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("``P", timeZone0, locale0);
      assertEquals("``P", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("G");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("_J3FE[ ]tP3n", timeZone0, locale0);
      assertEquals("_J3FE[ ]tP3n", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("@tLh~Nm;1n :<HL", timeZone0, locale0);
      assertEquals("@tLh~Nm;1n :<HL", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("<K=wxiFQP=[q|#Xw8", timeZone0, locale0);
      assertEquals("<K=wxiFQP=[q|#Xw8", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("&6YnPvHG!IXo");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser(";&0vcGD^]W Asc4-/", timeZone0, locale0);
      assertEquals(";&0vcGD^]W Asc4-/", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser(":#_{1mOOGycbKbN~#4", timeZone0, locale0);
      assertEquals(":#_{1mOOGycbKbN~#4", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = new Locale(")-zkZ(w(9'l@f", "?t#:lNt>x2's{^8$o");
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("8YvM#99+c5Du\"^", timeZone0, locale0);
      assertEquals("8YvM#99+c5Du\"^", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("M7wNvU)]%9iL&CS.", timeZone0, locale0);
      assertEquals("M7wNvU)]%9iL&CS.", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("5A\".x{fxS^AAG", timeZone0, locale0);
      assertEquals("5A\".x{fxS^AAG", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale locale0 = new Locale(")-zkZ(w(9'l@f", "?t#:lHt>x2's{r8$o");
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(14);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("3lufc-5]LD", timeZone0, locale0);
      assertEquals("3lufc-5]LD", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("2X/4 }#T'", timeZone0, locale0);
      assertEquals("2X/4 }#T'", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ZbyS?3?(X(0VmVHP");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("0?yDrpoa,H", timeZone0, locale0);
      assertEquals("0?yDrpoa,H", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("&6YnPvHG!IXo");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("/'", timeZone0, locale0);
      assertEquals("/'", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = new Locale("Q;))V0B5J8>93MGmD!", "]");
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser(".O@;->Uabb?", timeZone0, locale0);
      assertEquals(".O@;->Uabb?", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(")-zkZ(w(9'lD@f");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("-", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1));
      // Undeclared exception!
      try { 
        fastDateParser0.parse(")-zkZ(w(9'lD@f", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(")-zkZ(w(9'lD@f");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser(",", timeZone0, locale0);
      assertEquals(",", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("y", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("8'BN");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("a9at3yF5BXXD", timeZone0, locale0);
      assertEquals("a9at3yF5BXXD", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("}+)", timeZone0, locale0);
      assertEquals("}+)", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(")zk(dw(9'lDf");
      Locale locale0 = new Locale(")zk(dw(9'lDf", ")zk(dw(9'lDf");
      FastDateParser fastDateParser0 = new FastDateParser("{yy)zOFI3ng@w Pl$o", timeZone0, locale0);
      assertEquals("{yy)zOFI3ng@w Pl$o", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("&6YnPvHG!IXo");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("*KWRu@AnY", timeZone0, locale0);
      assertEquals("*KWRu@AnY", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("$6Q>a");
      FastDateParser fastDateParser0 = new FastDateParser("$6Q>a", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("$6Q>a", parsePosition0);
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ZbyS?3?(X(0VmVHP");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("^nJS&]Rw(of<qlo", timeZone0, locale0);
      try { 
        fastDateParser0.parse("7.?MN");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"7.?MN\" does not match \\^
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("K?FP)KWRc+X", timeZone0, locale0);
      Locale locale1 = Locale.FRENCH;
      FastDateParser fastDateParser1 = new FastDateParser("K?FP)KWRc+X", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1042, "6>ax");
      FastDateParser fastDateParser0 = new FastDateParser("6>ax", simpleTimeZone0, locale0);
      SimpleTimeZone simpleTimeZone1 = new SimpleTimeZone(3572, "GMTIET");
      FastDateParser fastDateParser1 = new FastDateParser("6>ax", simpleTimeZone1, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1001, "6>ax");
      FastDateParser fastDateParser0 = new FastDateParser("6>ax", simpleTimeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("GMCA", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ZbyS?3?(X(0VmVHP");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser(">1+EY(`Mu\"!!*^Gy2g", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals("ZbyS?3?(X(0VmVHP");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1001, "6>ax");
      FastDateParser fastDateParser0 = new FastDateParser("6>ax", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("&6YnPvHG!IXo");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("j=J:+G,F>\"v'VUg)5", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("Mrc`7BS5 ahJ3gk", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("5A\".x{fxS^AAG");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("Hp2?}+n", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("6");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("&6YnPvHG!IXo");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("&6YnPvHG!IXo", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("&6", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "G");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("GMTCST", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("G", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1042, "6>ax");
      FastDateParser fastDateParser0 = new FastDateParser("6>ax", simpleTimeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("zh", locale1.getLanguage());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1042, "6>ax");
      FastDateParser fastDateParser0 = new FastDateParser("6>ax", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("6>ax", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ZbyS?3?(X(0MmV$P");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("&6YnPvHG!Io", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(57);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("ZbyS?3?(X(0MmV$P", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|,en_GB,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(")-zkZ(w(9'lD@f");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("ZbyS?3?(X(0MmV$P", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("mmvYj(", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("5");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("GMTCNT");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"GMTCNT\" does not match (\\p{IsNd}++)(\u4E0A\u5348|\u4E0B\u5348)(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }
}
