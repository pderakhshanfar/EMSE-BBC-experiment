/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 07:41:03 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("WSE!KAEZ5", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(39);
      assertEquals(1939, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("WSE!KAEZ5", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Object object0 = fastDateParser0.parseObject("~E +{7ExNj>P", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = new Locale("WSE!KAEZ5");
      FastDateParser fastDateParser0 = new FastDateParser("m]qDq{7cwo(LI3'!!", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1968), "09kp]4}l\"k'uO.Wl");
      Locale locale0 = Locale.forLanguageTag("09kp]4}l\"k'uO.Wl");
      FastDateParser fastDateParser0 = new FastDateParser("09kp]4}l\"k'uO.Wl", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("09kp]4}l\"k'uO.Wl", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.forLanguageTag("WS[E!M:K5");
      FastDateParser fastDateParser0 = new FastDateParser("WS[E!M:K5", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2000));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1968), "09kp]4}l\"k'uO.Wl");
      Locale locale0 = Locale.forLanguageTag("09kp]4}l\"k'uO.Wl");
      FastDateParser fastDateParser0 = new FastDateParser("09kp]4}l\"k'uO.Wl", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-3994));
      assertEquals((-1994), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = new Locale("WSE!KAEZ5");
      FastDateParser fastDateParser0 = new FastDateParser("GMT-18:00", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1693));
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("pX5>.JHc", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = new Locale(").dSnKstz8U}", ").dSnKstz8U}");
      FastDateParser fastDateParser0 = new FastDateParser("GMTAST", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("<Z:V", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-933));
      // Undeclared exception!
      try { 
        fastDateParser0.parse("<Z:V", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = new Locale("Unparseable date: \"", "Unparseable date: \"");
      FastDateParser fastDateParser0 = new FastDateParser(",:\"02%j7(oZ", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1968), "09kp]4}l\"k'uO.Wl");
      Locale locale0 = Locale.forLanguageTag("09kp]4}l\"k'uO.Wl");
      FastDateParser fastDateParser0 = new FastDateParser("09kp]4}l\"k'uO.Wl", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1968), "09k[p]4}l\"k'uO.Wl");
      Locale locale0 = Locale.forLanguageTag("09k[p]4}l\"k'uO.Wl");
      FastDateParser fastDateParser0 = new FastDateParser("09k[p]4}l\"k'uO.Wl", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("7g,SQ+LDx)/2dJ", (TimeZone) null, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("w,A3n", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-3459));
      parsePosition0.setIndex(0);
      Date date0 = fastDateParser0.parse("m~", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("KRSAKOp)n-ZD+", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("4^H+OQ", parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = new Locale("l<$t^L.,q", "/z4r;+!*AzF!lW");
      TimeZone timeZone0 = TimeZone.getTimeZone("^*49P4*");
      FastDateParser fastDateParser0 = new FastDateParser("^_Sqfp9aJ0:?TJIS:", timeZone0, locale0);
      assertEquals("^_Sqfp9aJ0:?TJIS:", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("@F9musdOo", timeZone0, locale0);
      assertEquals("@F9musdOo", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("=K}|qb7~Q*~S/<S[l}v", timeZone0, locale0);
      assertEquals("=K}|qb7~Q*~S/<S[l}v", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("8vO]Bj*", timeZone0, locale0);
      assertEquals("8vO]Bj*", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(36);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("6dy.,yTiy{j%", timeZone0, locale0);
      assertEquals("6dy.,yTiy{j%", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = new Locale("Unparseable date: \"", "Unparseable date: \"");
      FastDateParser fastDateParser0 = new FastDateParser("4o\"Y+FK$2QeXqee,T", timeZone0, locale0);
      assertEquals("4o\"Y+FK$2QeXqee,T", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("3u9yXWNe(os0!p'@gHt", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\" does not match 3
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("2nu~Mfz\"@ )CR3r", timeZone0, locale0);
      assertEquals("2nu~Mfz\"@ )CR3r", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = new Locale("Unparseable date: \"", "Unparseable date: \"");
      FastDateParser fastDateParser0 = new FastDateParser("s1;2DCtCTp!JdiR", timeZone0, locale0);
      assertEquals("s1;2DCtCTp!JdiR", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(45, "y/7:XuO:IGyZp2NEi");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("y/7:XuO:IGyZp2NEi", simpleTimeZone0, locale0);
      assertEquals("y/7:XuO:IGyZp2NEi", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser(".hgl`", timeZone0, locale0);
      assertEquals(".hgl`", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("-", timeZone0, locale0);
      assertEquals("-", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("_G)'oND(~A1m|3>90", timeZone0, locale0);
      assertEquals("_G)'oND(~A1m|3>90", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(107, "WSE!KAEZ5");
      Locale locale0 = Locale.forLanguageTag("org.apache.commons.lang3.time.FastDateParser$2");
      FastDateParser fastDateParser0 = new FastDateParser("~S(tH>7-Yn`mYM+S", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=WSE!KAEZ5,offset=107,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("yc<V=B2Mp1oK+]|!!", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("4Mb");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("*U", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = new Locale("Unparseable date: \"", "Unparseable date: \"");
      FastDateParser fastDateParser0 = new FastDateParser("<{Z$UG!/", timeZone0, locale0);
      assertEquals("<{Z$UG!/", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = new Locale("Unparseable date: \"", "Unparseable date: \"");
      FastDateParser fastDateParser0 = new FastDateParser("GMTIET", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("WSE!KAEZ5", timeZone0, locale0);
      try { 
        fastDateParser0.parse("$:e");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"$:e\" does not match (\\p{IsNd}{1}+)(\\p{IsNd}++)(\u571F|\u571F\u66DC\u65E5|\u65E5|\u65E5\u66DC\u65E5|\u6708|\u6708\u66DC\u65E5|\u6728|\u6728\u66DC\u65E5|\u6C34|\u6C34\u66DC\u65E5|\u706B|\u706B\u66DC\u65E5|\u91D1|\u91D1\u66DC\u65E5)!(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser(">!f29KFj55", timeZone0, locale0);
      try { 
        fastDateParser0.parse("7w");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"7w\" does not match >!
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser(">!f29KFj55", timeZone0, locale0);
      Locale locale1 = Locale.ITALIAN;
      FastDateParser fastDateParser1 = new FastDateParser(">!f29KFj55", timeZone0, locale1);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("WSE!KAEZ5", timeZone0, locale0);
      TimeZone timeZone1 = TimeZone.getDefault();
      FastDateParser fastDateParser1 = new FastDateParser("WSE!KAEZ5", timeZone1, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.forLanguageTag("WS[E!M:K5");
      FastDateParser fastDateParser0 = new FastDateParser("WS[E!M:K5", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser(";n'.^T7x", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = new Locale("Unparseable date: \"", "Unparseable date: \"");
      FastDateParser fastDateParser0 = new FastDateParser(",:\"02%j7(oZ", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals("Unparseable date: \"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser(">!f29KFj55", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = new Locale("Unparseable date: \"", "Unparseable date: \"");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("Bj/0&rA@H}", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("He.0:!%WSjq1bgV", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("5Kho8\" ;");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("`SH*p2N*L$D}4", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("`(\\p{IsNd}{1}+)(\\p{IsNd}++)\\*", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("\"yy?=`>%pgiEMZj/", timeZone0, locale0);
      TimeZone timeZone1 = fastDateParser0.getTimeZone();
      assertSame(timeZone1, timeZone0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1968), "09kp]4}l\"k'uO.Wl");
      Locale locale0 = Locale.forLanguageTag("09kp]4}l\"k'uO.Wl");
      FastDateParser fastDateParser0 = new FastDateParser("09kp]4}l\"k'uO.Wl", simpleTimeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("", locale1.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("`SH*p2N*L$D}4", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("`SH*p2N*L$D}4", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("Mg4znHIn5^|On$6", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(8);
      fastDateParser0.parseObject("Mg4znHIn5^|On$6", parsePosition0);
      assertEquals("java.text.ParsePosition[index=9,errorIndex=-1]", parsePosition0.toString());
      assertEquals(9, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("`SH*p2N*L$D}4", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[`SH*p2N*L$D}4,it,GMT+18:00]", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("WSE!KAEZ5", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("KRSAKOp)n-ZD+", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("4^H+OQ");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("7 yyMvr@A=z\"P", timeZone0, locale0);
      assertEquals("7 yyMvr@A=z\"P", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+S+|W+|Z+|a+|d+|h+|k+|m+|s+|wa|y+|z+|''|'[^']++(''[^']*)*W'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+S+|W+|Z+|a+|d+|h+|k+|m+|s+|wa|y+|z+|''|'[^']++(''[^']*)*W'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1968), "09kp]4}l\"k'uO.Wl");
      Locale locale0 = Locale.forLanguageTag("09kp]4}l\"k'uO.Wl");
      FastDateParser fastDateParser0 = new FastDateParser("h%}Kzk~", simpleTimeZone0, locale0);
      assertEquals("h%}Kzk~", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("5$fgu");
      FastDateParser fastDateParser0 = new FastDateParser("ZI|:e2", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("CST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }
}
