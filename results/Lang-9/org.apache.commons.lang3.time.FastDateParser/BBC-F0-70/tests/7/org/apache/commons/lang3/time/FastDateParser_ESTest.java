/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 07:43:29 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("GMTPNT", "'}zE\u0003RM9U2r+V");
      FastDateParser fastDateParser0 = new FastDateParser("yyJ", timeZone0, locale0);
      assertEquals("yyJ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2781), "[(NExz~1_tv\"n9DcS", 1000, 0, 0, 0, 0, 0, 0, 0);
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("F)g O0Z:$", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(1149);
      assertEquals(3049, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTECT");
      FastDateParser fastDateParser0 = new FastDateParser("Z", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("ART", parsePosition0);
      fastDateParser0.parseObject("GMTIST", parsePosition0);
      assertEquals(6, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=6,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "81MpQiolAiv", 0, 0, 0, 16, 1, 0, 40, 0);
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser(";IH?PrW67 R+u", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[;IH?PrW67 R+u,zh_CN,81MpQiolAiv]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ak DD_Jby&&N+`!lM");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("ak DD_Jby&&N+`!lM", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "81MpQiolAiv", 0, 0, 0, 0, (-1573), 0, 40, 0);
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("hSe56Az", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject(";IH?PrW67 R+u", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTECT");
      FastDateParser fastDateParser0 = new FastDateParser("Z", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("GMTIST", parsePosition0);
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
      assertEquals(3, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2781), "[(NExz~1_tv\"n9DcS", 1000, 0, 0, 0, 0, 0, 0, 0);
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("F)g O0Z:$", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "81MpQiolAiv", 0, 0, 0, 16, 1, 0, 40, 0);
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser(";IH?PrW67 R+u", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertFalse(timeZone0.useDaylightTime());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.US;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3399, "");
      FastDateParser fastDateParser0 = new FastDateParser("|Y{3JIA", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2781), "[(NExz~1_tv\"n9DcS", 1000, 0, 0, 0, 0, 0, 0, 0);
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("F)g O0Z:$", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=[(NExz~1_tv\"n9DcS,offset=-2781,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=1000,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2781), "F)g O0Z:$", (-2781), 0, 0, 0, 0, 0, 0, 0);
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("F)g O0Z:$", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2781));
      assertEquals((-781), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "81MpQiolAiv", 0, 0, 0, 16, 1, 0, 37, 0);
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("7_[=Zu?c$6RH}S", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ak DD_Jby&&N+`!lM");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("ak DD_Jby&&N+`!lM", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(2020);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("%2xo`-1", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      TimeZone timeZone0 = TimeZone.getTimeZone("81MpQiolAiv");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser((String) null, timeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "81MpQiolAiv", 0, 0, 0, 16, 1, 0, 37, 0);
      Locale locale0 = Locale.CHINA;
      Locale locale1 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("7_[=Zu?c$6RH}S", simpleTimeZone0, locale1);
      Locale locale2 = fastDateParser0.getLocale();
      assertEquals("", locale2.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("M\"%lm.:d&X>KQR?");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("M\"%lm.:d&X>KQR?", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = fastDateParser0.parse("`eD", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("<kt");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("^IKo}", timeZone0, locale0);
      assertEquals("^IKo}", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ak DD_Jby&&N+`!lM");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("d[G?QE8", timeZone0, locale0);
      assertEquals("d[G?QE8", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "81MpQiolAiv", 0, 0, 0, (-24), (-1573), 0, 40, 0);
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser(">}HRpGFJJ8a2E^IMe^", simpleTimeZone0, locale0);
      assertEquals(">}HRpGFJJ8a2E^IMe^", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("F)g O0Z:$");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("m=a", timeZone0, locale0);
      assertEquals("m=a", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ak DD_Jby&&N+`!lM");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("<<d)?+xH5tF Y", timeZone0, locale0);
      assertEquals("<<d)?+xH5tF Y", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "81MpQiolAiv", 0, 0, 0, 16, 1, 0, 37, 0);
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser(";IH?PrW67 R+u", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ak DD_Jby&&N+`!lM");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("9Z8oc", timeZone0, locale0);
      assertEquals("9Z8oc", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ak DD_Jby&&N+`!lM");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("F6=U|'J=r1 0", timeZone0, locale0);
      assertEquals("F6=U|'J=r1 0", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2886), "r6f;p");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("a51$96", simpleTimeZone0, locale0);
      assertEquals("a51$96", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ak DD_Jby&&N+`!lM");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("4dY_kFLsk) 5oeC", timeZone0, locale0);
      assertEquals("4dY_kFLsk) 5oeC", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ak DD_Jby&&N+`!lM");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("3\".]PF4U^$=<O", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(12);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("d[G?QE8", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("2xo-Y", timeZone0, locale0);
      assertEquals("2xo-Y", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ak DD_Jby&&N+`!lM");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("1HpVNx?Lj(d`#", timeZone0, locale0);
      assertEquals("1HpVNx?Lj(d`#", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("81MpQiolAiv");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("/:/", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(63);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ak DD_Jby&&N+`!lM");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser(".", timeZone0, locale0);
      assertEquals(".", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2886), "r6f;p");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("-E", simpleTimeZone0, locale0);
      assertEquals("-E", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      TimeZone timeZone0 = TimeZone.getTimeZone("}rZ/{-X");
      FastDateParser fastDateParser0 = new FastDateParser("&m*I", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("81MpQiolAiv");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"81MpQiolAiv\" does not match &(\\p{IsNd}++)\\*
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ak DD_Jby&&N+`!lM");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("(r~+d+pjLqw", timeZone0, locale0);
      assertEquals("(r~+d+pjLqw", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("|S&");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("|S&", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("M\"%lm.:d&X>KQR?");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("{5H`e", timeZone0, locale0);
      assertEquals("{5H`e", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("81MpQiolAiv");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("%[d@d\"!}", timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("F)g O0Z:$");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("0\"a:?S!", timeZone0, locale0);
      assertEquals("0\"a:?S!", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      Locale locale1 = Locale.ITALY;
      FastDateParser fastDateParser1 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale1);
      fastDateParser1.equals(locale0);
      fastDateParser0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser(",n LBE2b", timeZone0, locale0);
      try { 
        fastDateParser0.parse("F)g O0Z:$");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"F)g O0Z:$\" does not match ,
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("yyy#0", timeZone0, locale0);
      try { 
        fastDateParser0.parse("D+|E+|F|G+|H+|K+|M+|S+|W|Z+|a+|d+|h+|k+m+|s+|w+|y+|z+|''|'^']++('[^']*+)*+'|[^'A-Wa-z]++");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"D+|E+|F|G+|H+|K+|M+|S+|W|Z+|a+|d+|h+|k+m+|s+|w+|y+|z+|''|'^']++('[^']*+)*+'|[^'A-Wa-z]++\" does not match (\\p{IsNd}++)#0
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Locale locale1 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone("81MpQiolAiv");
      FastDateParser fastDateParser0 = new FastDateParser("\uC774\uD0C8\uB9AC\uC544", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("\uC774\uD0C8\uB9AC\uC544", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getTimeZone("Z");
      FastDateParser fastDateParser0 = new FastDateParser("Z", timeZone0, locale0);
      ZoneId zoneId0 = ZoneId.of("Z");
      TimeZone timeZone1 = TimeZone.getTimeZone(zoneId0);
      FastDateParser fastDateParser1 = new FastDateParser("Z", timeZone1, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ak DD_Jby&&N+`!lM");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("ak DD_Jby&&N+`!lM", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("$A_", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getTimeZone("Z");
      FastDateParser fastDateParser0 = new FastDateParser("Z", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ak DD_Jby&&N+`!lM");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("OTG.7}IC^U0AdT", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("7");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("MTL!", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("7");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("81MpQiolAiv");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("HRKxq", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("81MpQiolAiv");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2788), "F)g O0Z:$", (-2788), 0, 0, 0, 0, 0, 0, 0);
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser(")($0", simpleTimeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("\\)\\(\\$0", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("%2xo`-1", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("%2xo`-1", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ak DD_Jby&&N+`!lM");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("ak DD_Jby&&N+`!lM", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(41, "81MpQiolAiv");
      ParsePosition parsePosition0 = new ParsePosition(0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("wi$", simpleTimeZone0, locale0);
      fastDateParser0.parse("81MpQiolAiv", parsePosition0);
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("7");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("h", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("7");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("+$0ESEYKtd^", "|S&");
      FastDateParser fastDateParser0 = new FastDateParser("+$0ESEYKtd^", timeZone0, locale0);
      assertEquals("+$0ESEYKtd^", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("81MpQiolAiv");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("DsZ,", timeZone0, locale0);
      assertEquals("DsZ,", fastDateParser0.getPattern());
  }
}
