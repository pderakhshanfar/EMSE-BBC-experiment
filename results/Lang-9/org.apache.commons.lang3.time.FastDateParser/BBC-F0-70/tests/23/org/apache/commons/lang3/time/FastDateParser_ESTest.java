/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 07:57:12 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("hi?|C|'%1P");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("hi?|C|'%1P", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("~8.4~\"\"F=L", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "9s8cHEn+g=zI");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("@", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "oN:}_OyAPJ");
      FastDateParser fastDateParser0 = new FastDateParser("GCnh%6v7%?D", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("oN:}_OyAPJ", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-690), "7");
      FastDateParser fastDateParser0 = new FastDateParser("7", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals((-690), timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(40, "9s8cHEn+g=zI");
      FastDateParser fastDateParser0 = new FastDateParser("9s8cHEn+g=zI", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = new Locale("y", "y");
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("~S^bvY!mRi~e?v.l[", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2254));
      assertEquals((-254), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("kj, @'o2Xa\"", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(94);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "9s8cHEn+g=zI");
      FastDateParser fastDateParser0 = new FastDateParser("9s8cHEn+g=zI", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("FastDateParser[9s8cHEn+g=zI,ja_JP,9s8cHEn+g=zI]", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("7", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-66));
      // Undeclared exception!
      try { 
        fastDateParser0.parse("sM", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("0b^9e");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("0b^9e", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-2741));
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("!V*r|", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("", "DLt[/y/W[JEp)3egXD");
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}{", timeZone0, locale0);
      assertEquals("(p{IsNd}{", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("", "DLt[/y/W[JEp)3egXD");
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}{", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("?", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "9s8cHEn+g=zI");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("@", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parse("Voi/rG");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"Voi/rG\" does not match @
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("GMTPST", "GMTPST");
      FastDateParser fastDateParser0 = new FastDateParser("zJ/GZr", timeZone0, locale0);
      fastDateParser0.parse("GMTPST", parsePosition0);
      fastDateParser0.parse("GMTPST", parsePosition0);
      assertEquals(6, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=6,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("yiZFL))`n", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("954wzATQ ");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-690), "7");
      FastDateParser fastDateParser0 = new FastDateParser("`3,vb $h", simpleTimeZone0, locale0);
      assertEquals("`3,vb $h", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = new Locale("y", "y");
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("__b9``;|%@fWW[s", timeZone0, locale0);
      assertEquals("__b9``;|%@fWW[s", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser(">7v/-}x>q>C0mcxG", timeZone0, locale0);
      assertEquals(">7v/-}x>q>C0mcxG", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("0b^9e");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("<lTQK)LbGh~}n(_", timeZone0, locale0);
      assertEquals("<lTQK)LbGh~}n(_", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("D{{R:p");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(";NCM1.nk,ryP.k.*", timeZone0, locale0);
      assertEquals(";NCM1.nk,ryP.k.*", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = new Locale("y", "y");
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser(":*#*.rG", timeZone0, locale0);
      assertEquals(":*#*.rG", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("hi?|C|'|1P");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("7M6np<(a7Ar~))O", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("5H'MoWj;`d^^", timeZone0, locale0);
      assertEquals("5H'MoWj;`d^^", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("4$~TGPFy]@?Qi)'N{/5");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("4$~TGPFy]@?Qi)'N{/5", timeZone0, locale0);
      assertEquals("4$~TGPFy]@?Qi)'N{/5", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "9s8cHEn+g=zI");
      FastDateParser fastDateParser0 = new FastDateParser("3^BC:/xdtv\",pbt\"fV", simpleTimeZone0, locale0);
      assertEquals("3^BC:/xdtv\",pbt\"fV", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "9s8cHEn+g=zI", 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("/T{y9XV?G[&", simpleTimeZone0, locale0);
      assertEquals("/T{y9XV?G[&", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("weV)|b[)`L");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(".kH2K6 q0]i 4QS", timeZone0, locale0);
      assertEquals(".kH2K6 q0]i 4QS", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("-`yqin=xin$wK", timeZone0, locale0);
      assertEquals("-`yqin=xin$wK", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = new Locale("y", "y");
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("s,Sblr:", timeZone0, locale0);
      assertEquals("s,Sblr:", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("=}OdWfxW\"9>");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("*bnxE!x;7,K$", timeZone0, locale0);
      assertEquals("*bnxE!x;7,K$", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale locale0 = new Locale("y", "y");
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("d)bryPDzLO =oh--5!?", timeZone0, locale0);
      assertEquals("d)bryPDzLO =oh--5!?", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = new Locale("y", "y");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-771), "");
      FastDateParser fastDateParser0 = new FastDateParser("y", simpleTimeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("6Liw}2Y%C<!G%(evdky");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(40, "9s8cHEn+g=zI");
      FastDateParser fastDateParser0 = new FastDateParser("9s8cHEn+g=zI", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(1046);
      assertEquals(2946, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "9s8cHEn+g=zI");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("?uF;&vm", simpleTimeZone0, locale0);
      assertEquals("?uF;&vm", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      String string0 = "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'g[^'A-Za-z]++";
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'g[^'A-Za-z]++", timeZone0, locale1);
      Locale locale2 = Locale.ENGLISH;
      FastDateParser fastDateParser1 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'g[^'A-Za-z]++", timeZone0, locale2);
      try { 
        fastDateParser1.parseObject(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'g[^'A-Za-z]++\" does not match (\\p{IsNd}++)\\+\\|(Fri|Friday|Mon|Monday|Sat|Saturday|Sun|Sunday|Thu|Thursday|Tue|Tuesday|Wed|Wednesday)\\+\\|(\\p{IsNd}++)\\+\\|(AD|AD|BC|BC)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre Time|ACST|ACT|ACWST|ADT|AEDT|AEST|Afghanistan Time|AFT|AKDT|AKST|Alaska Daylight Time|Alaska Standard Time|Alma-Ata Time|ALMT|Amazon Time|AMT|Anadyr Time|ANAT|Aqtau Time|Aqtobe Time|AQTT|Arabia Standard Time|Argentine Time|Armenia Time|ART|AST|Atlantic Daylight Time|Atlantic Standard Time|Australian Central Daylight Time \\(South Australia\\)|Australian Central Daylight Time \\(South Australia/New South Wales\\)|Australian Central Standard Time \\(Northern Territory\\)|Australian Central Standard Time \\(South Australia\\)|Australian Central Standard Time \\(South Australia/New South Wales\\)|Australian Central Western Standard Time|Australian Eastern Daylight Time \\(New South Wales\\)|Australian Eastern Daylight Time \\(Tasmania\\)|Australian Eastern Daylight Time \\(Victoria\\)|Australian Eastern Standard Time \\(New South Wales\\)|Australian Eastern Standard Time \\(Queensland\\)|Australian Eastern Standard Time \\(Tasmania\\)|Australian Eastern Standard Time \\(Victoria\\)|Australian Western Standard Time|AWST|Azerbaijan Time|Azores Summer Time|Azores Time|AZOST|AZOT|AZT|Bangladesh Time|BDT|Bhutan Time|BNT|Bolivia Time|BOT|Bougainville Standard Time|Brasilia Time|British Summer Time|BRT|Brunei Time|BST|BTT|Cape Verde Time|CAT|CCT|CDT|Central African Time|Central Daylight Time|Central European Summer Time|Central European Time|Central Indonesia Time|Central Standard Time|CEST|CET|CHADT|Chamorro Standard Time|CHAST|Chatham Daylight Time|Chatham Standard Time|Chile Summer Time|Chile Time|China Standard Time|Choibalsan Time|CHOT|Christmas Island Time|ChST|CHUT|Chuuk Time|CKT|CLST|CLT|Cocos Islands Time|Colombia Time|Cook Is\\. Time|Coordinated Universal Time|COT|CST|Cuba Daylight Time|Cuba Standard Time|CVT|CXT|Davis Time|DAVT|DDUT|Dumont-d'Urville Time|EASST|EAST|East Indonesia Time|Easter Is\\. Summer Time|Easter Is\\. Time|Eastern African Time|Eastern Daylight Time|Eastern European Summer Time|Eastern European Time|Eastern Greenland Summer Time|Eastern Greenland Time|Eastern Standard Time|EAT|ECT|Ecuador Time|EDT|EEST|EET|EGST|EGT|EST|Falkland Is\\. Time|Fernando de Noronha Time|Fiji Summer Time|Fiji Time|FJST|FJT|FKT|FNT|French Guiana Time|French Southern & Antarctic Lands Time|Galapagos Time|GALT|Gambier Time|GAMT|Georgia Time|GET|GFT|Ghana Mean Time|Gilbert Is\\. Time|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|Greenwich Mean Time|GST|Gulf Standard Time|Guyana Time|GYT|Hawaii Daylight Time|Hawaii Standard Time|HDT|HKT|Hong Kong Time|Hovd Time|HOVT|HST|ICT|IDT|India Standard Time|Indian Ocean Territory Time|Indochina Time|IOT|Iran Daylight Time|Iran Standard Time|IRDT|Irish Summer Time|IRKT|Irkutsk Time|IRST|Israel Daylight Time|Israel Standard Time|IST|Japan Standard Time|JST|KGT|Kirgizstan Time|Korea Standard Time|Kosrae Time|KOST|Kostanay Standard Time|Krasnoyarsk Time|KRAT|KST|LHDT|LHST|Line Is\\. Time|LINT|Lord Howe Daylight Time|Lord Howe Standard Time|Macquarie Island Daylight Time|Macquarie Island Standard Time|Magadan Time|MAGT|Malaysia Time|Maldives Time|Marquesas Time|Marshall Islands Time|MART|Mauritius Time|Mawson Time|MAWT|MDT|MEST|MET|MHT|Middle Europe Summer Time|Middle Europe Time|MIDT|MIST|MMT|Moscow Standard Time|Mountain Daylight Time|Mountain Standard Time|MSK|MST|MUT|MVT|Myanmar Time|MYT|Nauru Time|NCT|NDT|Nepal Time|New Caledonia Time|New Zealand Daylight Time|New Zealand Standard Time|Newfoundland Daylight Time|Newfoundland Standard Time|NFST|NFT|Niue Time|Norfolk Summer Time|Norfolk Time|Novosibirsk Time|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|Omsk Time|OMST|Oral Time|ORAT|Pacific Daylight Time|Pacific Standard Time|Pakistan Time|Palau Time|Papua New Guinea Time|Paraguay Summer Time|Paraguay Time|PDT|Peru Time|PET|Petropavlovsk-Kamchatski Time|PETT|PGT|Philippines Standard Time|Phoenix Is\\. Time|PHOT|Pierre & Miquelon Daylight Time|Pierre & Miquelon Standard Time|Pitcairn Standard Time|PKT|PMDT|PMST|Pohnpei Time|PONT|PST|PWT|PYST|PYT|QOST|QYZT|Qyzylorda Time|RET|Reunion Time|Rothera Time|ROTT|Sakhalin Time|SAKT|Samara Time|Samoa Standard Time|SAMT|SAST|SBT|SCT|Seychelles Time|SGT|Singapore Time|Solomon Is\\. Time|South Africa Standard Time|South Georgia Standard Time|Srednekolymsk Time|SRET|SRT|SST|Suriname Time|SYOT|Syowa Time|Tahiti Time|TAHT|Tajikistan Time|TFT|Timor-Leste Time|TJT|TKT|TLT|TMT|Tokelau Time|Tonga Time|TOT|TRT|Turkey Time|Turkmenistan Time|Tuvalu Time|TVT|Ulaanbaatar Time|ULAT|Uruguay Time|Ust-Nera Time|UTC|UYT|Uzbekistan Time|UZT|Vanuatu Time|Venezuela Time|VET|Vladivostok Time|VLAT|VOST|Vostok Time|VUT|Wake Time|WAKT|Wallis & Futuna Time|WAT|WEST|West Indonesia Time|West Samoa Daylight Time|West Samoa Standard Time|Western African Time|Western European Summer Time|Western European Time|Western Greenland Summer Time|Western Greenland Time|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|Xinjiang Standard Time|XJT|YAKT|Yakutsk Time|Yekaterinburg Time|YEKT)\\+\\|(AM|PM)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre Time|ACST|ACT|ACWST|ADT|AEDT|AEST|Afghanistan Time|AFT|AKDT|AKST|Alaska Daylight Time|Alaska Standard Time|Alma-Ata Time|ALMT|Amazon Time|AMT|Anadyr Time|ANAT|Aqtau Time|Aqtobe Time|AQTT|Arabia Standard Time|Argentine Time|Armenia Time|ART|AST|Atlantic Daylight Time|Atlantic Standard Time|Australian Central Daylight Time \\(South Australia\\)|Australian Central Daylight Time \\(South Australia/New South Wales\\)|Australian Central Standard Time \\(Northern Territory\\)|Australian Central Standard Time \\(South Australia\\)|Australian Central Standard Time \\(South Australia/New South Wales\\)|Australian Central Western Standard Time|Australian Eastern Daylight Time \\(New South Wales\\)|Australian Eastern Daylight Time \\(Tasmania\\)|Australian Eastern Daylight Time \\(Victoria\\)|Australian Eastern Standard Time \\(New South Wales\\)|Australian Eastern Standard Time \\(Queensland\\)|Australian Eastern Standard Time \\(Tasmania\\)|Australian Eastern Standard Time \\(Victoria\\)|Australian Western Standard Time|AWST|Azerbaijan Time|Azores Summer Time|Azores Time|AZOST|AZOT|AZT|Bangladesh Time|BDT|Bhutan Time|BNT|Bolivia Time|BOT|Bougainville Standard Time|Brasilia Time|British Summer Time|BRT|Brunei Time|BST|BTT|Cape Verde Time|CAT|CCT|CDT|Central African Time|Central Daylight Time|Central European Summer Time|Central European Time|Central Indonesia Time|Central Standard Time|CEST|CET|CHADT|Chamorro Standard Time|CHAST|Chatham Daylight Time|Chatham Standard Time|Chile Summer Time|Chile Time|China Standard Time|Choibalsan Time|CHOT|Christmas Island Time|ChST|CHUT|Chuuk Time|CKT|CLST|CLT|Cocos Islands Time|Colombia Time|Cook Is\\. Time|Coordinated Universal Time|COT|CST|Cuba Daylight Time|Cuba Standard Time|CVT|CXT|Davis Time|DAVT|DDUT|Dumont-d'Urville Time|EASST|EAST|East Indonesia Time|Easter Is\\. Summer Time|Easter Is\\. Time|Eastern African Time|Eastern Daylight Time|Eastern European Summer Time|Eastern European Time|Eastern Greenland Summer Time|Eastern Greenland Time|Eastern Standard Time|EAT|ECT|Ecuador Time|EDT|EEST|EET|EGST|EGT|EST|Falkland Is\\. Time|Fernando de Noronha Time|Fiji Summer Time|Fiji Time|FJST|FJT|FKT|FNT|French Guiana Time|French Southern & Antarctic Lands Time|Galapagos Time|GALT|Gambier Time|GAMT|Georgia Time|GET|GFT|Ghana Mean Time|Gilbert Is\\. Time|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|Greenwich Mean Time|GST|Gulf Standard Time|Guyana Time|GYT|Hawaii Daylight Time|Hawaii Standard Time|HDT|HKT|Hong Kong Time|Hovd Time|HOVT|HST|ICT|IDT|India Standard Time|Indian Ocean Territory Time|Indochina Time|IOT|Iran Daylight Time|Iran Standard Time|IRDT|Irish Summer Time|IRKT|Irkutsk Time|IRST|Israel Daylight Time|Israel Standard Time|IST|Japan Standard Time|JST|KGT|Kirgizstan Time|Korea Standard Time|Kosrae Time|KOST|Kostanay Standard Time|Krasnoyarsk Time|KRAT|KST|LHDT|LHST|Line Is\\. Time|LINT|Lord Howe Daylight Time|Lord Howe Standard Time|Macquarie Island Daylight Time|Macquarie Island Standard Time|Magadan Time|MAGT|Malaysia Time|Maldives Time|Marquesas Time|Marshall Islands Time|MART|Mauritius Time|Mawson Time|MAWT|MDT|MEST|MET|MHT|Middle Europe Summer Time|Middle Europe Time|MIDT|MIST|MMT|Moscow Standard Time|Mountain Daylight Time|Mountain Standard Time|MSK|MST|MUT|MVT|Myanmar Time|MYT|Nauru Time|NCT|NDT|Nepal Time|New Caledonia Time|New Zealand Daylight Time|New Zealand Standard Time|Newfoundland Daylight Time|Newfoundland Standard Time|NFST|NFT|Niue Time|Norfolk Summer Time|Norfolk Time|Novosibirsk Time|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|Omsk Time|OMST|Oral Time|ORAT|Pacific Daylight Time|Pacific Standard Time|Pakistan Time|Palau Time|Papua New Guinea Time|Paraguay Summer Time|Paraguay Time|PDT|Peru Time|PET|Petropavlovsk-Kamchatski Time|PETT|PGT|Philippines Standard Time|Phoenix Is\\. Time|PHOT|Pierre & Miquelon Daylight Time|Pierre & Miquelon Standard Time|Pitcairn Standard Time|PKT|PMDT|PMST|Pohnpei Time|PONT|PST|PWT|PYST|PYT|QOST|QYZT|Qyzylorda Time|RET|Reunion Time|Rothera Time|ROTT|Sakhalin Time|SAKT|Samara Time|Samoa Standard Time|SAMT|SAST|SBT|SCT|Seychelles Time|SGT|Singapore Time|Solomon Is\\. Time|South Africa Standard Time|South Georgia Standard Time|Srednekolymsk Time|SRET|SRT|SST|Suriname Time|SYOT|Syowa Time|Tahiti Time|TAHT|Tajikistan Time|TFT|Timor-Leste Time|TJT|TKT|TLT|TMT|Tokelau Time|Tonga Time|TOT|TRT|Turkey Time|Turkmenistan Time|Tuvalu Time|TVT|Ulaanbaatar Time|ULAT|Uruguay Time|Ust-Nera Time|UTC|UYT|Uzbekistan Time|UZT|Vanuatu Time|Venezuela Time|VET|Vladivostok Time|VLAT|VOST|Vostok Time|VUT|Wake Time|WAKT|Wallis & Futuna Time|WAT|WEST|West Indonesia Time|West Samoa Daylight Time|West Samoa Standard Time|Western African Time|Western European Summer Time|Western European Time|Western Greenland Summer Time|Western Greenland Time|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|Xinjiang Standard Time|XJT|YAKT|Yakutsk Time|Yekaterinburg Time|YEKT)\\+\\|'\\|\\[\\^\\]\\+\\+\\('\\[\\^\\]\\*\\+\\)\\*\\+
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "9s8cHEn+g=zI");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("d$c3q0q=ewi<Od9", simpleTimeZone0, locale0);
      assertEquals("d$c3q0q=ewi<Od9", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("K@;XQNDI|U", timeZone0, locale0);
      try { 
        fastDateParser0.parse("K@;XQNDI|U");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"K@;XQNDI|U\" does not match (\\p{IsNd}++)@;
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("GTCT", timeZone0, locale0);
      Locale locale1 = Locale.ROOT;
      FastDateParser fastDateParser1 = new FastDateParser("GTCT", timeZone0, locale1);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("0b^9e");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("0b^9e", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(107, "0b^9e");
      FastDateParser fastDateParser1 = new FastDateParser("0b^9e", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("hi?|C|'%1P");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("hi?|C|'%1P", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("1d+e?(X_dZ*G", timeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("HGK?)s&8r{In}4gr9u");
      FastDateParser fastDateParser0 = new FastDateParser("w''bF", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals("HGK?)s&8r{In}4gr9u");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("GTCT", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("D{{R:p");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("jdtT$", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("hi?|C|'%1P");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("hi?|C|'%1P", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("6Liw}2Y%C<!G%(evdky");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("0b^9e");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("0b^9e", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("0", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "@", 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("@", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertTrue(timeZone0.useDaylightTime());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("=}OdWfxW\"9>");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("=}OdWfxW\"9>", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("ja_JP", locale1.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("2K2yyL", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("2K2yyL", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(" is not a supported timezone name");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(" is not a supported timezone name", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject(" is not a supported timezone name", parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("", "(p{IsNd}{");
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}{", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[(p{IsNd}{,_(P{ISND}{,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(40, "9s8cHEn+g=zI");
      FastDateParser fastDateParser0 = new FastDateParser("9s8cHEn+g=zI", simpleTimeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("French", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("2`VcEuK6nev_p)(");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("MM',cMU$UOeh", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("0u^T_@P=|NU8");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("{#FWA)2@o^", timeZone0, locale0);
      assertEquals("{#FWA)2@o^", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("FasZDatePa=ser[", timeZone0, locale0);
      assertEquals("FasZDatePa=ser[", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("GMTPST", "GMTPST");
      FastDateParser fastDateParser0 = new FastDateParser("zJ/GZr", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }
}
