/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 09:47:50 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("Ho4M1,vzsDRH:7%(", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(12);
      fastDateParser0.parse("f8<G#.K>&LT-73", parsePosition0);
      assertEquals(14, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=14,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1749);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("y@LOn<\"8{\f^X)2", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(2329);
      parsePosition0.setIndex(0);
      Object object0 = fastDateParser0.parseObject("h()y>bv#PMi", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(42, "] 3");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("] 3", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("] 3", parsePosition0);
      assertEquals(3, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone("SST");
      FastDateParser fastDateParser0 = new FastDateParser("SST", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "a?]ufuru$wx]l.j");
      Locale locale0 = Locale.forLanguageTag("a?]ufuru$wx]l.j");
      FastDateParser fastDateParser0 = new FastDateParser("a?]ufuru$wx]l.j", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "j`", 1, 1, 1, 1, 1, 1, 1, 1);
      FastDateParser fastDateParser0 = new FastDateParser("GMTAET", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("j`", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]#H'");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("]#H'", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(103);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("]#H'", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1682, "");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("G)K ", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("zq:A>HE}n{ f8za", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1414));
      // Undeclared exception!
      try { 
        fastDateParser0.parse("+Ru<X", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("P");
      Locale locale0 = new Locale(":aZ~", "P", "q[w\"NF]ys'q\"Zj}[");
      FastDateParser fastDateParser0 = new FastDateParser("4}>BkILk'i|Z=[9laD ", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("[JJO#xk$3`_e;c bo%-", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "zE\"Bs]Aa1:VkL{U7Ff");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("zE\"Bs]Aa1:VkL{U7Ff", simpleTimeZone0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("P");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("ACT", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("k3L)`2xT7", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = fastDateParser0.parse("r-J%mfNsB", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("zq:A>HE}n{ f8za", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("SST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++W''[^_]*+)*+O|[^'-Za-z++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++W''[^_]*+)*+O|[^'-Za-z++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = new Locale("X2");
      FastDateParser fastDateParser0 = new FastDateParser("d`++\"q2X", timeZone0, locale0);
      assertEquals("d`++\"q2X", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]#H'");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("^|;", timeZone0, locale0);
      assertEquals("^|;", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]#H'");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("\r!`,zx!Ug}bA(", timeZone0, locale0);
      try { 
        fastDateParser0.parse("3oFe8r$*");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"3oFe8r$*\" does not match \r!`,(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre Normalzeit|ACST|ACT|ACWST|ADT|AEDT|AEST|Afghanistanische Zeit|AFT|AKDT|AKST|Alaska Normalzeit|Alaska Sommerzeit|Alma Ata Zeit|ALMT|Amazonas Normalzeit|AMT|Anadyr Zeit|ANAT|Aqtau Zeit|Aqtobe Zeit|AQTT|Arabische Normalzeit|Argentinische Zeit|Armenische Zeit|ART|Aserbaidschanische Zeit|AST|Atlantik Normalzeit|Atlantik Sommerzeit|AWST|Azoren Sommerzeit|Azoren Zeit|AZOST|AZOT|AZT|Bangladesch Zeit|BDT|Bhutanische Zeit|BNT|Bolivianische Zeit|BOT|Bougainville Standard Time|Brasilianische Zeit|Britische Sommerzeit|BRT|Brunei Zeit|BST|BTT|CAT|CCT|CDT|CHADT|Chamorro Normalzeit|CHAST|Chatham Normalzeit|Chatham Sommerzeit|Chilenische Sommerzeit|Chilenische Zeit|Chinesische Normalzeit|Choibalsan Zeit|CHOT|Christmas Island Zeit|ChST|CHUT|Chuuk Zeit|CKT|CLST|CLT|Cocos Islands Zeit|Cook-Inseln Zeit|COT|CST|CVT|CXT|Davis Zeit|DAVT|DDUT|Dumont-d'Urville Zeit|EASST|EAST|EAT|ECT|Ecuadorianische Zeit|EDT|EGST|EGT|EST|Falkland Inseln Zeit|Fernando de Noronha Zeit|Fidschi Sommerzeit|Fidschi Zeit|FJST|FJT|FKT|FNT|Franz\u00F6sisch S\u00FCd- u\\. Antarktische Landzeit|Franz\u00F6sisch-Guiana Zeit|Galapagos Zeit|GALT|Gambier Zeit|GAMT|Georgische Zeit|GET|GFT|Ghanaische Normalzeit|Gilbert-Inseln Zeit|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|Golf Normalzeit|Greenwich Zeit|GST|Guyanische Zeit|GYT|Hawaii Normalzeit|Hawaii Sommerzeit|HDT|HKT|Hongkong Zeit|Hovd Zeit|HOVT|HST|ICT|IDT|Indische Normalzeit|Indischer Ozean Territorium Zeit|Indochina Zeit|IOT|Iranische Normalzeit|Iranische Sommerzeit|IRDT|Irische Sommerzeit|IRKT|Irkutsk Zeit|IRST|Israelische Normalzeit|Israelische Sommerzeit|IST|Jakutsk Zeit|Japanische Normalzeit|Jekaterinburger Zeit|JST|Kap Verde Zeit|KGT|Kirgisische Zeit|Kolumbianische Zeit|Koordinierte Universalzeit|Koreanische Normalzeit|Kosrae Zeit|KOST|Kostanay Standard Time|Krasnojarsker Zeit|KRAT|KST|Kubanische Normalzeit|Kubanische Sommerzeit|LHDT|LHST|Line Inseln Zeit|LINT|Lord Howe Normalzeit|Lord Howe Sommerzeit|Macquarieinsel Sommerzeit|Macquarieinsel Zeit|Magadanische Zeit|MAGT|Malaysische Zeit|Maledivische Zeit|Marquesas Zeit|Marshallinseln Zeit|MART|Mauritius Zeit|Mawson Zeit|MAWT|MDT|MEST|MESZ|MET|MEZ|MHT|MIST|Mitteleurop\u00E4ische Sommerzeit|Mitteleurop\u00E4ische Zeit|MMT|Moskauer Normalzeit|MSK|MST|MUT|MVT|Myanmar Zeit|MYT|Nauru Zeit|NCT|NDT|Nepalesische Zeit|Neufundland Normalzeit|Neufundland Sommerzeit|Neukaledonische Zeit|Neuseeland Normalzeit|Neuseeland Sommerzeit|NFST|NFT|Niue Zeit|Norfolk Sommerzeit|Norfolk Zeit|NOVT|Nowosibirsker Zeit|NPT|NRT|NST|NUT|NZDT|NZST|OESZ|OEZ|Omsk Zeit|OMST|Oral Zeit|ORAT|Ostafrikanische Zeit|Osterinseln Sommerzeit|Osterinseln Zeit|Osteurop\u00E4ische Sommerzeit|Osteurop\u00E4ische Zeit|Ostgr\u00F6nl\u00E4ndische Sommerzeit|Ostgr\u00F6nl\u00E4ndische Zeit|Ostindonesische Zeit|Pakistanische Zeit|Palau Zeit|Papua-Neuguinea Zeit|Paraguay Sommerzeit|Paraguay Zeit|Pazifische Normalzeit|Pazifische Sommerzeit|PDT|Peruanische Zeit|PET|Petropawlowsk-Kamtschatkische Zeit|PETT|PGT|Philippines Standard Time|Phoenix Inseln Zeit|PHOT|Pierre & Miquelon Normalzeit|Pierre & Miquelon Sommerzeit|Pitcairn Normalzeit|PKT|PMDT|PMST|Pohnpei Zeit|PONT|PST|PWT|PYST|PYT|QOST|QYZT|Qyzylorda Zeit|RET|Reunion Zeit|Rocky Mountains Normalzeit|Rocky Mountains Sommerzeit|Rothera Zeit|ROTT|Sakhalin Zeit|SAKT|Salomoninseln Zeit|Samarische Zeit|Samoa Normalzeit|SAMT|SAST|SBT|SCT|Seychellen Zeit|SGT|Singapur Zeit|South Georgia Normalzeit|Srednekolymsk Time|SRET|SRT|SST|Suriname Zeit|SYOT|Syowa Zeit|S\u00FCdafrikanische Normalzeit|Tadschikische Zeit|Tahiti Zeit|TAHT|TFT|Timor-Leste Normalzeit|TJT|TKT|TLT|TMT|Tokelau Zeit|Tonga Zeit|TOT|Turkmenische Zeit|Tuvalu Zeit|TVT|Ulaanbaatar Zeit|ULAT|Uruguayische Zeit|Usbekistan Zeit|Ust-Nera Zeit|UTC|UYT|UZT|Vanuatu Zeit|Venezuelanische Zeit|VET|VLAT|VOST|Vostok Zeit|VUT|Wake Zeit|WAKT|Wallis u\\. Futuna Zeit|WAT|West Samoa Sommerzeit|West Samoa Zeit|Westafrikanische Zeit|Westeurop\u00E4ische Sommerzeit|Westeurop\u00E4ische Zeit|Westgr\u00F6nl\u00E4ndische Sommerzeit|Westgr\u00F6nl\u00E4ndische Zeit|Westindonesische Zeit|Westliche Normalzeit \\(Australien\\)|WESZ|WEZ|WFT|WGST|WGT|WIB|WIT|WITA|Wladiwostok Zeit|WSDT|WSST|XJT|YAKT|YEKT|Zentral-Westliche Normalzeit \\(Australien\\)|Zentralafrikanische Zeit|Zentrale Normalzeit|Zentrale Normalzeit \\(Northern Territory\\)|Zentrale Normalzeit \\(S\u00FCdaustralien\\)|Zentrale Normalzeit \\(S\u00FCdaustralien/New South Wales\\)|Zentrale Sommerzeit|Zentrale Sommerzeit \\(S\u00FCdaustralien\\)|Zentrale Sommerzeit \\(S\u00FCdaustralien/New South Wales\\)|Zentraleurop\u00E4ische Sommerzeit|Zentraleurop\u00E4ische Zeit|Zentralindonesische Zeit|\u00D6stliche Normalzeit|\u00D6stliche Normalzeit \\(New South Wales\\)|\u00D6stliche Normalzeit \\(Queensland\\)|\u00D6stliche Normalzeit \\(Tasmanien\\)|\u00D6stliche Normalzeit \\(Victoria\\)|\u00D6stliche Sommerzeit|\u00D6stliche Sommerzeit \\(New South Wales\\)|\u00D6stliche Sommerzeit \\(Tasmanien\\)|\u00D6stliche Sommerzeit \\(Victoria\\))
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-893), "h()y>bv#PMi");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("<+[;E|O;:4 ", simpleTimeZone0, locale0);
      assertEquals("<+[;E|O;:4 ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]#H'");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(":xVeR97|m8FSR%]{w", timeZone0, locale0);
      assertEquals(":xVeR97|m8FSR%]{w", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-893), "h()y>bv#PMi");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(";m7|;LS;eo{xV5QrFp", simpleTimeZone0, locale0);
      assertEquals(";m7|;LS;eo{xV5QrFp", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "@");
      Locale locale0 = new Locale("");
      FastDateParser fastDateParser0 = new FastDateParser("m6043BPVo0S", simpleTimeZone0, locale0);
      assertEquals("m6043BPVo0S", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("=yy\"F1G'}81CUVoE", timeZone0, locale0);
      assertEquals("=yy\"F1G'}81CUVoE", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("/r}sT~1*2Ro$;", timeZone0, locale0);
      assertEquals("/r}sT~1*2Ro$;", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]#H'");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("sM8EH-:F", timeZone0, locale0);
      assertEquals("sM8EH-:F", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser(",", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2918));
      assertEquals((-918), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("*m", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(36);
      assertEquals(1936, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("5XClFXX?yqp", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("r");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("M)a|+8)4*a4DjAN", timeZone0, locale0);
      assertEquals("M)a|+8)4*a4DjAN", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-6769), "G`>DEi<{$}/~z8U");
      FastDateParser fastDateParser0 = new FastDateParser("0p?Q*)i'x?^a", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parse("G`>DEi<{$}/~z8U");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"G`>DEi<{$}/~z8U\" does not match 0
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = new Locale("");
      FastDateParser fastDateParser0 = new FastDateParser("k3L)`2xT7", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parseObject("k3L)`2xT7");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"k3L)`2xT7\" does not match (\\p{IsNd}{1}+)3
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      Locale locale1 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("@iZ\";LoT:uo~bYZtU", timeZone0, locale1);
      FastDateParser fastDateParser1 = new FastDateParser("@iZ\";LoT:uo~bYZtU", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("$Z", timeZone0, locale0);
      TimeZone timeZone1 = TimeZone.getTimeZone("NET");
      FastDateParser fastDateParser1 = new FastDateParser("$Z", timeZone1, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "j`", 1, 1, 1, 1, 1, 1, 1, 1);
      FastDateParser fastDateParser0 = new FastDateParser("GMTAET", simpleTimeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("GMTPST", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-671), "GMTNST");
      FastDateParser fastDateParser0 = new FastDateParser("{", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(669, "y@LOn<\"8{\f^X)2");
      FastDateParser fastDateParser0 = new FastDateParser("~ezyi", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      ParsePosition parsePosition0 = new ParsePosition(10);
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("MMf(+aAh", timeZone0, locale0);
      fastDateParser0.parse("~:StP[oP-5s#?1.zR#", parsePosition0);
      assertEquals(11, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=11,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getTimeZone("hiAU\"LKB");
      FastDateParser fastDateParser0 = new FastDateParser("hiAU\"LKB", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("2X");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("GMTPST", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("(AD|AD|BC|BC)(\\p{IsNd}++)", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "0p?Q*)i'x?^a");
      FastDateParser fastDateParser0 = new FastDateParser("Mc\"*Xk/U-:Ze\f", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = new Locale("k3L)`2xT7");
      FastDateParser fastDateParser0 = new FastDateParser("(The ", simpleTimeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("k3l)`2xt7", locale1.getLanguage());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("GMTPST", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("GMTPST", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-930), "h()y>bv#PMi");
      Locale locale0 = new Locale("GMTEAT");
      FastDateParser fastDateParser0 = new FastDateParser("8+5k}745Z9Z_qf(", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("nq", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(120, "");
      FastDateParser fastDateParser0 = new FastDateParser("2isM]a2&s^63<", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[2isM]a2&s^63<,de,]", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("h()y>bv#PMi", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getTimeZone("SST");
      FastDateParser fastDateParser0 = new FastDateParser("SST", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("1bMepQJVHXR+AWf,}w");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]#H'");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("ky.U", timeZone0, locale0);
      assertEquals("ky.U", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1749);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[y@LOn<\"8{\f^X)2,de,GMT]", timeZone0, locale0);
      assertEquals("FastDateParser[y@LOn<\"8{\f^X)2,de,GMT]", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = new Locale("");
      FastDateParser fastDateParser0 = new FastDateParser("kZL)`2xT7", simpleTimeZone0, locale0);
      assertEquals("kZL)`2xT7", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("zq:A>HE}n{ f8za", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("GMTNET");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }
}
