/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 12:23:21 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("MV3DeoEw\"UBd@K>,4", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(1716);
      assertEquals(3616, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(179, "->U?VP)k?J!rsb");
      Locale locale0 = new Locale("|DL60}-$UQl}Q-@", "|DL60}-$UQl}Q-@", ")R&_/");
      FastDateParser fastDateParser0 = new FastDateParser("|DL60}-$UQl}Q-@", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Object object0 = fastDateParser0.parseObject("f/MI%72\"@", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("}+)", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("}+)", parsePosition0);
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
      assertEquals(3, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(179, "-lU?VPc)k?J!_rsy");
      Locale locale0 = new Locale("|DL60}-$UQl}Q-@", "|DL60}-$UQl}Q-@", ")R&<e");
      FastDateParser fastDateParser0 = new FastDateParser("-lU?VPc)k?J!_rsy", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "ynnJ|NTZe'ehO_P");
      Locale locale0 = new Locale("Unparseable date: \"", "Unparseable date: \"", "ynnJ|NTZe'ehO_P");
      FastDateParser fastDateParser0 = new FastDateParser("ynnJ|NTZe'ehO_P", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2557));
      assertEquals((-557), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(108, "");
      Locale locale0 = new Locale(")R&_/", "", "|DL60}-$UQl}Q-@");
      FastDateParser fastDateParser0 = new FastDateParser("ECT", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(43);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2456, "3FQ0)%=~#10MK: jva");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("3FQ0)%=~#10MK: jva", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(179, "-lU?VPc)k?J!_rsy");
      Locale locale0 = new Locale("|DL60}-$UQl}Q-@", "|DL60}-$UQl}Q-@", ")R&<e");
      FastDateParser fastDateParser0 = new FastDateParser("-lU?VPc)k?J!_rsy", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1532);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("-lU?VPc)k?J!_rsy", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("0T:W[H`B");
      Locale locale0 = new Locale("0T:W[H`B");
      FastDateParser fastDateParser0 = new FastDateParser("0T:W[H`B", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(9);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(515, "ja");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("(AIZb;ugLThB~(Ffv]@", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = new Locale("|DL60}-$UQl}Q-@", "|DL60}-$UQl}Q-@", ")R&<e");
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("H", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = new Locale("", "");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(":-Ga0H_mW", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1975), "");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(",SHiVg HJ", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(179, "-lU?VPc)k?J!_rsy");
      Locale locale0 = new Locale("|DL60}-$UQl}Q-@", "|DL60}-$UQl}Q-@", ")R&<e");
      FastDateParser fastDateParser0 = new FastDateParser("-lU?VPc)k?J!_rsy", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1532);
      parsePosition0.setIndex(10);
      Date date0 = fastDateParser0.parse("-lU?VPc)k?J!_rsy", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("ynnJooT\"eeh~_#", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("785_U");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("Zi", "Zi", "Zi");
      FastDateParser fastDateParser0 = new FastDateParser(")yyy+tSUL`5^7YcC", timeZone0, locale0);
      assertEquals(")yyy+tSUL`5^7YcC", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "ynnJ|NTZeehO_P");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("h=)d`z?\"M: j-", simpleTimeZone0, locale0);
      assertEquals("h=)d`z?\"M: j-", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(179, "-lU?VPc)k?J!_rsy");
      Locale locale0 = new Locale("|DL60}-$UQl}Q-@", "|DL60}-$UQl}Q-@", ")R&<e");
      FastDateParser fastDateParser0 = new FastDateParser("^<NYv", simpleTimeZone0, locale0);
      assertEquals("^<NYv", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(122, ">");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(">", simpleTimeZone0, locale0);
      assertEquals(">", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2456, "3FQ0)%=~#10MK: jva");
      Locale locale0 = new Locale("%@fwTHzea", "", "");
      FastDateParser fastDateParser0 = new FastDateParser("K;CFM", simpleTimeZone0, locale0);
      assertEquals("K;CFM", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "A");
      Locale locale0 = new Locale("ybx@3t4-$p", "Unparseable date: \"", "ynnJ|NTZeehO_P");
      FastDateParser fastDateParser0 = new FastDateParser("95bq^r", simpleTimeZone0, locale0);
      assertEquals("95bq^r", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(43, "z1@y_I,P+;8i7_");
      Locale locale0 = new Locale("(p{IsNd}++)", "GMTMIT", "(p{IsNd}++)");
      FastDateParser fastDateParser0 = new FastDateParser("d8Nh", simpleTimeZone0, locale0);
      assertEquals("d8Nh", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "ynnJ|NTZeehO_P");
      Locale locale0 = new Locale("GMTPNT", "org.apache.commons.lang3.time.FastDateParser", "GMTPNT");
      FastDateParser fastDateParser0 = new FastDateParser("7<3LYrmi5 (Y", simpleTimeZone0, locale0);
      assertEquals("7<3LYrmi5 (Y", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "ynnJ|NTZeehO_P");
      Locale locale0 = new Locale("49@th3tyD?4?m", "O/L", "qAIkbv@4fsMM");
      FastDateParser fastDateParser0 = new FastDateParser("66u^dmb\"\"N5qC", simpleTimeZone0, locale0);
      assertEquals("66u^dmb\"\"N5qC", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "0I:");
      Locale locale0 = new Locale("0I:", "M:", "1Z46RwN2U#l4Kdbfld ");
      FastDateParser fastDateParser0 = new FastDateParser("5&", simpleTimeZone0, locale0);
      assertEquals("5&", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(20, "ynnJ|NTZeehO_P");
      Locale locale0 = new Locale("ynnJ|NTZeehO_P", "ynnJ|NTZeehO_P", "7b~I*a");
      FastDateParser fastDateParser0 = new FastDateParser("2lH5-L/^", simpleTimeZone0, locale0);
      assertEquals("2lH5-L/^", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(20, "ynnJ|NTZeehO_P");
      Locale locale0 = new Locale("ynnJ|NTZeehO_P", "ynnJ|NTZeehO_P", "7b~I*a");
      FastDateParser fastDateParser0 = new FastDateParser("/~8KuTM{v", simpleTimeZone0, locale0);
      assertEquals("/~8KuTM{v", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "ynnJ|NTZe'ehO_P");
      Locale locale0 = new Locale("Unparseable date: \"", "Unparseable date: \"", "ynnJ|NTZe'ehO_P");
      FastDateParser fastDateParser0 = new FastDateParser(".o", simpleTimeZone0, locale0);
      assertEquals(".o", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(179, "-lU?VPc)k?J!_rsy");
      Locale locale0 = new Locale("|DL60}-$UQl}Q-@", "|DL60}-$UQl}Q-@", ")R&<e");
      FastDateParser fastDateParser0 = new FastDateParser("-lU?VPc)k?J!_rsy", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parse("Unparseable date: \"");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"Unparseable date: \"\" does not match -
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "T4|zC");
      Locale locale0 = new Locale("T4|zC", "O/L", "SZ*WI*8");
      FastDateParser fastDateParser0 = new FastDateParser(",`l{V7}.m", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("yynnJoNZeeh~_P", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(4);
      fastDateParser0.parse("qEqN0rP,uSl$$a", parsePosition0);
      assertEquals(5, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=5,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser(" not in (", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(108, "");
      Locale locale0 = new Locale("*y***9j7h>N", "cK|j{rh'", ".:&Eio$pEzBAFo$_t");
      FastDateParser fastDateParser0 = new FastDateParser("yK{<$|]M! }", simpleTimeZone0, locale0);
      assertEquals("yK{<$|]M! }", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(108, "");
      Locale locale0 = new Locale("~R.ML%", "~R.ML%", "|DL60}-$UQl}Q-@");
      FastDateParser fastDateParser0 = new FastDateParser("K_s{.aCea", simpleTimeZone0, locale0);
      assertEquals("K_s{.aCea", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|^'AiZa-z]++", timeZone0, locale0);
      fastDateParser0.getPattern();
      Locale locale1 = Locale.ITALY;
      FastDateParser fastDateParser1 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|^'AiZa-z]++", timeZone0, locale1);
      fastDateParser0.equals(fastDateParser1);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("Zi", timeZone0, locale0);
      fastDateParser0.parseObject("GMTMIT");
      System.setCurrentTimeMillis(1L);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(7, "ynnJ|NTZeehO_P");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("ynnJ|NTZeehO_P", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parse("Wx$V]\"");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"Wx$V]\"\" does not match (\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "ynnJ|NTZe'ehO_P");
      Locale locale0 = new Locale("Unparseable date: \"", "Unparseable date: \"", "ynnJ|NTZe'ehO_P");
      FastDateParser fastDateParser0 = new FastDateParser("ynnJ|NTZe'ehO_P", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parseObject("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\" does not match (\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(95, "GMTAST");
      FastDateParser fastDateParser0 = new FastDateParser("Hm:2khpmc_", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("Hm:2khpmc_", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(105, "|^*K7F");
      Locale locale0 = new Locale("VST");
      FastDateParser fastDateParser0 = new FastDateParser("sDk&`YX N<`OUL'", simpleTimeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("GMTCAT", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("Zi", "Zi", "Zi");
      FastDateParser fastDateParser0 = new FastDateParser("ynnJoNTZeeh~_#", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals("%ne`Nvhl]]v*-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("(The ", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "ynnJ|NTZeehO_P");
      Locale locale0 = new Locale("49@th3tyD?4?m", "O/L", "qAIkbv@4fsMM");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("HTh%?1G6J", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("2`_'xW5*_b{~phTE-,");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("hbcNx iDjVO_");
      FastDateParser fastDateParser0 = new FastDateParser("hbcNx iDjVO_", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("53Te0}p^Xo[!;RrUepI");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(179, "-lU?Pc)k?J!_rsy");
      Locale locale0 = new Locale("@MTNST", "@MTNST", "-lU?Pc)k?J!_rsy");
      FastDateParser fastDateParser0 = new FastDateParser("@MTNST", simpleTimeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("@(\\p{IsNd}++)", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "0I:");
      Locale locale0 = new Locale("0I:", "M:", "1Z46RwN2U#l4Kdbfld ");
      FastDateParser fastDateParser0 = new FastDateParser("1Z46RwN2U#l4Kdbfld ", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("0I:", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("yynnJoNZeeh~_P", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("en_US", locale1.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("hbcNx iDjVO_");
      FastDateParser fastDateParser0 = new FastDateParser("hbcNx iDjVO_", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(108);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("53Te0}p^Xo[!;RrUepI", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "0I:");
      Locale locale0 = new Locale("0I:", "M:", "1Z46RwN2U#l4Kdbfld ");
      FastDateParser fastDateParser0 = new FastDateParser("1Z46RwN2U#l4Kdbfld ", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[1Z46RwN2U#l4Kdbfld ,0i:_M:_1Z46RwN2U#l4Kdbfld ,0I:]", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(108, "");
      Locale locale0 = new Locale(")R&_/", "", "|DL60}-$UQl}Q-@");
      FastDateParser fastDateParser0 = new FastDateParser(")R&_/", simpleTimeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("s", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("0Dz(Z38w`:h=H(7A!* l");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      TimeZone timeZone0 = TimeZone.getDefault();
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateParser fastDateParser0 = new FastDateParser("MV3DeoEw\"UBd@K>,4", timeZone0, locale0);
      fastDateParser0.parse("0Dz(Z38w`:h=H(7A!* l", parsePosition0);
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("EMMMFmH=SHL", timeZone0, locale0);
      assertEquals("EMMMFmH=SHL", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(103, "0Dz(Z38w`:h=H(7A!* y");
      FastDateParser fastDateParser0 = new FastDateParser("K<asa?=pQ", simpleTimeZone0, locale0);
      assertEquals("K<asa?=pQ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "ynnJ|NTZeehO_P");
      Locale locale0 = new Locale("SZ*WI*8", "O/L", "O/L");
      FastDateParser fastDateParser0 = new FastDateParser("SZ*WI*8", simpleTimeZone0, locale0);
      assertEquals("SZ*WI*8", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("Zi", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("BST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }
}
