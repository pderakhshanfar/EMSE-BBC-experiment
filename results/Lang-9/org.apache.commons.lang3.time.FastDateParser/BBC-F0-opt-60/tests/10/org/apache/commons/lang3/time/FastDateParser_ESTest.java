/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 09:19:22 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("?na:8 .^W@txg", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(113);
      assertEquals(2013, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]5o{%%@a:JL");
      Locale locale0 = Locale.ITALY;
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateParser fastDateParser0 = new FastDateParser(";Qgt1\"GXe&]*^", timeZone0, locale0);
      fastDateParser0.parseObject(";Qgt1\"GXe&]*^", parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]5o{%%@a:JL");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("ZFp5", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 0, 0, 0, 0);
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser(":@KQi/^D(4^1:p9", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]5o{%%@a:JL");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("GMTCST", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-3379));
      assertEquals((-1379), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("dG+.[tr6x[");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("dG+.[tr6x[", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      parsePosition0.setIndex(392);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("dG+.[tr6x[", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]C`1\"Xf3!At#ZZY");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("Ko", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-654));
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("dG+.[tr6x[");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("dG+.[tr6x[", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]5o{%%@a:JL");
      Locale locale0 = Locale.ITALY;
      ParsePosition parsePosition0 = new ParsePosition(1007);
      FastDateParser fastDateParser0 = new FastDateParser("wZ'7`[qxT51v", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("]5o{%%@a:JL", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 0, 0, 0, 0);
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser(":@KQi/^D(4^1:p9", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("dG+.[tr6x[");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("dG+.[tr6x[", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("GMTCNT", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("dG+.[tr6x[");
      Locale locale0 = Locale.UK;
      ZoneId.getAvailableZoneIds();
      FastDateParser fastDateParser0 = new FastDateParser(";<?ZvHAA;-!O=2", timeZone0, locale0);
      assertEquals(";<?ZvHAA;-!O=2", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]5o{%%@a:JL");
      Locale locale0 = Locale.ITALY;
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateParser fastDateParser0 = new FastDateParser(";Qgt1\"GXe&]*^", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("CMU%[z6#FCyF$X5X-", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("93Q28n?Hr7Q8^waw");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("kkian", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(9);
      fastDateParser0.parse("93Q28n?Hr7Q8^waw", parsePosition0);
      assertEquals(10, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=10,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]C`1\"Xf3!At#ZZY");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("h`3Kr]R>", timeZone0, locale0);
      assertEquals("h`3Kr]R>", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("93Q28n?Hr7Q8^waw");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("_p@jp\":')M4@", timeZone0, locale0);
      assertEquals("_p@jp\":')M4@", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]5o{%%@a:JL");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("^", timeZone0, locale0);
      assertEquals("^", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]5o{%%@a:JL");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("@E>7'LJK/kJd%T", timeZone0, locale0);
      assertEquals("@E>7'LJK/kJd%T", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("=n", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parse("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\" does not match =
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("93Q28n?Hr7Q8^waw");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("93Q28n?Hr7Q8^waw", timeZone0, locale0);
      assertEquals("93Q28n?Hr7Q8^waw", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1300, "8h{`[u{z$");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("8h{`[u{z$", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(1300, timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.forLanguageTag("/)@jBQQ8vXyN';[|!");
      FastDateParser fastDateParser0 = new FastDateParser("7 v@~D+#_#FQ", simpleTimeZone0, locale0);
      assertEquals("7 v@~D+#_#FQ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]5o{%%@a:JL");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("5eZ", timeZone0, locale0);
      assertEquals("5eZ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("93Q2 8n?HrQ8^wa");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("4^wrb]\"", timeZone0, locale0);
      assertEquals("4^wrb]\"", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]5o{%%@a:JL");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("3;%_M$(la@}H>M,", timeZone0, locale0);
      assertEquals("3;%_M$(la@}H>M,", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]5o{%%@a:JL");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("Z2[*v*V$ (v$TW", timeZone0, locale0);
      assertEquals("Z2[*v*V$ (v$TW", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("PRT");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("1QFjNc6<phi09", timeZone0, locale0);
      assertEquals("1QFjNc6<phi09", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("93Q28n?Hr7Q8^waw");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("0", timeZone0, locale0);
      assertEquals("0", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]5o{%%@a:JL");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("W.S|-nk}dR", timeZone0, locale0);
      assertEquals("W.S|-nk}dR", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(100, "-CZm5#Kt");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("-CZm5#Kt", simpleTimeZone0, locale0);
      assertEquals("-CZm5#Kt", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("*B#nia>");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("*B#nia>", timeZone0, locale0);
      assertEquals("*B#nia>", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("dG+.[tr6x[");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}++)", timeZone0, locale0);
      assertEquals("(p{IsNd}++)", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[47]*+)*+'|[^'A Za-z]F+", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(11);
      assertEquals(2011, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("Ew6E", timeZone0, locale0);
      assertEquals("Ew6E", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("}}m,|44Kjs|S");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("}}m,|44Kjs|S", timeZone0, locale0);
      assertEquals("}}m,|44Kjs|S", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("a$0i", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]5o{%%@a:JL");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      String string0 = "ME 2?a\\u@tm;{;4h5\"O";
      FastDateParser fastDateParser0 = new FastDateParser(string0, timeZone0, locale0);
      try { 
        fastDateParser0.parse("Unparseable date: \"");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"Unparseable date: \"\" does not match (\\p{IsNd}++)(\u571F|\u571F\u66DC\u65E5|\u65E5|\u65E5\u66DC\u65E5|\u6708|\u6708\u66DC\u65E5|\u6728|\u6728\u66DC\u65E5|\u6C34|\u6C34\u66DC\u65E5|\u706B|\u706B\u66DC\u65E5|\u91D1|\u91D1\u66DC\u65E5) 2\\?(\u5348\u524D|\u5348\u5F8C)\\\\
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[47]*+)*+'|[^'A Za-z]F+", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[47]*+)*+'|[^'A Za-z]F+");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[47]*+)*+'|[^'A Za-z]F+\" does not match (\\p{IsNd}++)\\+\\|(dom|domenica|gio|gioved\u00EC|lun|luned\u00EC|mar|marted\u00EC|mer|mercoled\u00EC|sab|sabato|ven|venerd\u00EC)\\+\\|(\\p{IsNd}++)\\+\\|(BC|BC|dopo Cristo|dopo Cristo)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|ALMT|AMT|ANAT|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville Standard Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|DAVT|DDUT|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|Kostanay Standard Time|KRAT|KST|LHDT|LHST|LINT|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|Ora del Bangladesh|Ora del Bhutan|Ora del Brasile|Ora del Brunei|Ora del Cile|Ora del Kirghizistan|Ora del Nepal|Ora del Pakistan|Ora del Paraguay|Ora del Per\u00F9|Ora del Tagikistan|Ora del Terr\\. Britannico dell'Oceano Indiano|Ora del Turkmenistan|Ora del Venezuela|Ora dell'Afghanistan|Ora dell'Africa centrale|Ora dell'Africa occidentale|Ora dell'Africa orientale|Ora dell'Argentina|Ora dell'Armenia|Ora dell'Azerbaigian|Ora dell'Ecuador|Ora dell'Europa centrale|Ora dell'Europa occidentale|Ora dell'Europa orientale|Ora dell'Indocina|Ora dell'Indonesia centrale|Ora dell'Indonesia occidentale|Ora dell'Indonesia orientale|Ora dell'Isola Christmas|Ora dell'Isola della Fenice|Ora dell'Isola di Pasqua|Ora dell'Isola Macquarie|Ora dell'Uruguay|Ora dell'Uzbekistan|Ora della Birmania/Myanmar|Ora della Bolivia|Ora della Colombia|Ora della Georgia|Ora della Groenlandia occidentale|Ora della Groenlandia orientale|Ora della Guyana|Ora della Guyana Francese|Ora della Malaysia|Ora della Nuova Caledonia|Ora delle Azzorre|Ora delle Falkland|Ora delle Galapagos|Ora delle Isole Cocos|Ora delle Isole Cook|Ora delle Isole Gilbert|Ora delle Isole Marchesi|Ora delle Isole Marshall|Ora delle Isole Salomone|Ora delle Line Islands|Ora delle Maldive|Ora delle Seychelles|Ora delle Terre Australi e Antartiche Francesi|Ora di Acre|Ora di Alma-Ata|Ora di Anadyr|Ora di Aqtau|Ora di Aqtobe|Ora di Capo Verde|Ora di Chatham standard|Ora di Choibalsan|Ora di Chuuk|Ora di Davis|Ora di Dumont-d'Urville|Ora di Ekaterinburg|Ora di Fernando de Noronha|Ora di Figi|Ora di Gambier|Ora di Hong Kong|Ora di Hovd|Ora di Irkutsk|Ora di Jakutsk|Ora di Kosrae|Ora di Krasnojarsk|Ora di Magadan|Ora di Mauritius|Ora di Mawson|Ora di Nauru|Ora di Niue|Ora di Norfolk|Ora di Novosibirsk|Ora di Omsk|Ora di Oral|Ora di Palau|Ora di Papua Nuova Guinea|Ora di Petropavlovsk-Kamchatski|Ora di Pohnpei|Ora di Qyzylorda|Ora di Reunion|Ora di Rothera|Ora di Sakhalin|Ora di Samara|Ora di Samoa|Ora di Singapore|Ora di Suriname|Ora di Syowa|Ora di Tahiti|Ora di Timor Leste|Ora di Tokelau|Ora di Tonga|Ora di Tuvalu|Ora di Ulaanbaatar|Ora di Ust-Nera|Ora di Vanuatu|Ora di Vladivostok|Ora di Vostok|Ora di Wake|Ora di Wallis e Futuna|Ora estiva britannica|Ora estiva centrale \\(Australia del Sud\\)|Ora estiva centrale \\(Australia del Sud/Nuovo Galles del Sud\\)|Ora estiva del Cile|Ora estiva del Paraguay|Ora estiva dell'Australia orientale \\(Nuovo Galles del Sud\\)|Ora estiva dell'Europa centrale|Ora estiva dell'Europa occidentale|Ora estiva dell'Europa orientale|Ora estiva dell'Isola di Pasqua|Ora estiva dell'Isola Macquarie|Ora estiva della Groenlandia occidentale|Ora estiva della Groenlandia orientale|Ora estiva delle Azzorre|Ora estiva di Figi|Ora estiva di Lord Howe|Ora estiva di Norfolk|Ora estiva di Samoa|Ora estiva irlandese|Ora estiva orientale \\(Tasmania\\)|Ora estiva orientale \\(Victoria\\)|Ora legale Cuba|Ora legale dell'Alaska|Ora legale dell'Atlantico occidentale|Ora legale della costa occidentale USA|Ora legale della Nuova Zelanda|Ora legale delle Isole Hawaii|Ora legale di Chatham|Ora legale di Israele|Ora legale di Saint-Pierre e Miquelon|Ora legale di Terranova|Ora legale Iran|Ora legale USA centrale|Ora legale USA occidentale|Ora legale USA orientale|Ora media del Ghana|Ora media di Greenwich|Ora solare Cuba|Ora solare del Giappone|Ora solare del golfo|Ora solare del Sudafrica|Ora solare dell'Alaska|Ora solare dell'Amazzonia|Ora solare dell'Arabia|Ora solare dell'Atlantico occidentale|Ora solare dell'India|Ora solare della Cina|Ora solare della Corea|Ora solare della costa occidentale USA|Ora solare della Georgia Australe|Ora solare della Nuova Zelanda|Ora solare delle Isole Hawaii|Ora solare di Saint-Pierre e Miquelon|Ora solare di Terranova|Ora solare Iran|Ora solare USA centrale|Ora solare USA occidentale|Ora solare USA orientale|Ora standard Australia centro-occidentale|Ora standard centrale \\(Australia del Sud\\)|Ora standard centrale \\(Australia del Sud/Nuovo Galles del Sud\\)|Ora standard centrale \\(Territori del Nord\\)|Ora standard dell'Australia occidentale|Ora standard dell'Australia orientale \\(Nuovo Galles del Sud\\)|Ora standard di Chamorro|Ora standard di Israele|Ora standard di Lord Howe|Ora standard di Mosca|Ora standard di Pitcairn|Ora standard di Samoa|Ora standard orientale \\(Queensland\\)|Ora standard orientale \\(Tasmania\\)|Ora standard orientale \\(Victoria\\)|ORAT|PDT|PET|PETT|PGT|Philippines Standard Time|PHOT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk Time|SRET|SRT|SST|SYOT|TAHT|Tempo universale coordinato|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|YEKT)\\+\\|(AM|PM)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|ALMT|AMT|ANAT|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville Standard Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|DAVT|DDUT|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|Kostanay Standard Time|KRAT|KST|LHDT|LHST|LINT|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|Ora del Bangladesh|Ora del Bhutan|Ora del Brasile|Ora del Brunei|Ora del Cile|Ora del Kirghizistan|Ora del Nepal|Ora del Pakistan|Ora del Paraguay|Ora del Per\u00F9|Ora del Tagikistan|Ora del Terr\\. Britannico dell'Oceano Indiano|Ora del Turkmenistan|Ora del Venezuela|Ora dell'Afghanistan|Ora dell'Africa centrale|Ora dell'Africa occidentale|Ora dell'Africa orientale|Ora dell'Argentina|Ora dell'Armenia|Ora dell'Azerbaigian|Ora dell'Ecuador|Ora dell'Europa centrale|Ora dell'Europa occidentale|Ora dell'Europa orientale|Ora dell'Indocina|Ora dell'Indonesia centrale|Ora dell'Indonesia occidentale|Ora dell'Indonesia orientale|Ora dell'Isola Christmas|Ora dell'Isola della Fenice|Ora dell'Isola di Pasqua|Ora dell'Isola Macquarie|Ora dell'Uruguay|Ora dell'Uzbekistan|Ora della Birmania/Myanmar|Ora della Bolivia|Ora della Colombia|Ora della Georgia|Ora della Groenlandia occidentale|Ora della Groenlandia orientale|Ora della Guyana|Ora della Guyana Francese|Ora della Malaysia|Ora della Nuova Caledonia|Ora delle Azzorre|Ora delle Falkland|Ora delle Galapagos|Ora delle Isole Cocos|Ora delle Isole Cook|Ora delle Isole Gilbert|Ora delle Isole Marchesi|Ora delle Isole Marshall|Ora delle Isole Salomone|Ora delle Line Islands|Ora delle Maldive|Ora delle Seychelles|Ora delle Terre Australi e Antartiche Francesi|Ora di Acre|Ora di Alma-Ata|Ora di Anadyr|Ora di Aqtau|Ora di Aqtobe|Ora di Capo Verde|Ora di Chatham standard|Ora di Choibalsan|Ora di Chuuk|Ora di Davis|Ora di Dumont-d'Urville|Ora di Ekaterinburg|Ora di Fernando de Noronha|Ora di Figi|Ora di Gambier|Ora di Hong Kong|Ora di Hovd|Ora di Irkutsk|Ora di Jakutsk|Ora di Kosrae|Ora di Krasnojarsk|Ora di Magadan|Ora di Mauritius|Ora di Mawson|Ora di Nauru|Ora di Niue|Ora di Norfolk|Ora di Novosibirsk|Ora di Omsk|Ora di Oral|Ora di Palau|Ora di Papua Nuova Guinea|Ora di Petropavlovsk-Kamchatski|Ora di Pohnpei|Ora di Qyzylorda|Ora di Reunion|Ora di Rothera|Ora di Sakhalin|Ora di Samara|Ora di Samoa|Ora di Singapore|Ora di Suriname|Ora di Syowa|Ora di Tahiti|Ora di Timor Leste|Ora di Tokelau|Ora di Tonga|Ora di Tuvalu|Ora di Ulaanbaatar|Ora di Ust-Nera|Ora di Vanuatu|Ora di Vladivostok|Ora di Vostok|Ora di Wake|Ora di Wallis e Futuna|Ora estiva britannica|Ora estiva centrale \\(Australia del Sud\\)|Ora estiva centrale \\(Australia del Sud/Nuovo Galles del Sud\\)|Ora estiva del Cile|Ora estiva del Paraguay|Ora estiva dell'Australia orientale \\(Nuovo Galles del Sud\\)|Ora estiva dell'Europa centrale|Ora estiva dell'Europa occidentale|Ora estiva dell'Europa orientale|Ora estiva dell'Isola di Pasqua|Ora estiva dell'Isola Macquarie|Ora estiva della Groenlandia occidentale|Ora estiva della Groenlandia orientale|Ora estiva delle Azzorre|Ora estiva di Figi|Ora estiva di Lord Howe|Ora estiva di Norfolk|Ora estiva di Samoa|Ora estiva irlandese|Ora estiva orientale \\(Tasmania\\)|Ora estiva orientale \\(Victoria\\)|Ora legale Cuba|Ora legale dell'Alaska|Ora legale dell'Atlantico occidentale|Ora legale della costa occidentale USA|Ora legale della Nuova Zelanda|Ora legale delle Isole Hawaii|Ora legale di Chatham|Ora legale di Israele|Ora legale di Saint-Pierre e Miquelon|Ora legale di Terranova|Ora legale Iran|Ora legale USA centrale|Ora legale USA occidentale|Ora legale USA orientale|Ora media del Ghana|Ora media di Greenwich|Ora solare Cuba|Ora solare del Giappone|Ora solare del golfo|Ora solare del Sudafrica|Ora solare dell'Alaska|Ora solare dell'Amazzonia|Ora solare dell'Arabia|Ora solare dell'Atlantico occidentale|Ora solare dell'India|Ora solare della Cina|Ora solare della Corea|Ora solare della costa occidentale USA|Ora solare della Georgia Australe|Ora solare della Nuova Zelanda|Ora solare delle Isole Hawaii|Ora solare di Saint-Pierre e Miquelon|Ora solare di Terranova|Ora solare Iran|Ora solare USA centrale|Ora solare USA occidentale|Ora solare USA orientale|Ora standard Australia centro-occidentale|Ora standard centrale \\(Australia del Sud\\)|Ora standard centrale \\(Australia del Sud/Nuovo Galles del Sud\\)|Ora standard centrale \\(Territori del Nord\\)|Ora standard dell'Australia occidentale|Ora standard dell'Australia orientale \\(Nuovo Galles del Sud\\)|Ora standard di Chamorro|Ora standard di Israele|Ora standard di Lord Howe|Ora standard di Mosca|Ora standard di Pitcairn|Ora standard di Samoa|Ora standard orientale \\(Queensland\\)|Ora standard orientale \\(Tasmania\\)|Ora standard orientale \\(Victoria\\)|ORAT|PDT|PET|PETT|PGT|Philippines Standard Time|PHOT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk Time|SRET|SRT|SST|SYOT|TAHT|Tempo universale coordinato|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|YEKT)\\+\\|'\\|\\[\\^\\]\\+\\+\\('\\[47\\]\\*\\+\\)\\*\\+\\|\\[\\^
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]5o{%%@a:JL");
      Locale locale0 = Locale.ITALY;
      Locale locale1 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("|fTGq[\u0004B^2B6xC9", timeZone0, locale1);
      FastDateParser fastDateParser1 = new FastDateParser("|fTGq[\u0004B^2B6xC9", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("/)@jBQQ8vXyN';[|!", simpleTimeZone0, locale0);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser1 = new FastDateParser("/)@jBQQ8vXyN';[|!", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]5o{%%@a:JL");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser(";Qgt1\"GXe&]*^", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("MOGqekz=5:XD:g", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(41, "2q)p~Hgv'Y");
      FastDateParser fastDateParser0 = new FastDateParser(")", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]5o{%%@a:JL");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("kkian", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2708), "N?`M$4nu4>");
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'[^'A-Za-z]++", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("`>MM(Z");
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("zXW+:IJ", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("GMTNET");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("yJU~E/8>0", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("", locale1.getVariant());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("/)@jBQQ8vXyN';[|!", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("/)@jBQQ8vXyN';[|!", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("zg =cwU(ruGRs8BZ&L");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("yywmKx]+,", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("=&` \"", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("PRT");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("GMTAET", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[GMTAET,it_IT,PRT]", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("]5o{%%@a:JL");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("]5o{%%@a:JL", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("93Q28n?Hr7Q8^waw");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("kkian", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("93Q28n?Hr7Q8^waw");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("yyymM<<,", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("(\\p{IsNd}{3}+)(\\p{IsNd}{1}+)(\\p{IsNd}++)<<,", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("?)zv~(s47e,2cu", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }
}
