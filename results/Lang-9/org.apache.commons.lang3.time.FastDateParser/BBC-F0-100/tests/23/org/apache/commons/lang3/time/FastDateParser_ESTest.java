/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 04:32:42 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getTimeZone("9Qrh&Mtnaf9-}I)gd)G");
      FastDateParser fastDateParser0 = new FastDateParser("SST", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("9Qrh&Mtnaf9-}I)gd)G");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      ParsePosition parsePosition0 = new ParsePosition(1);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4533, "");
      FastDateParser fastDateParser0 = new FastDateParser(">U+VhC,{Xr=5/N$x", simpleTimeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("6lfW", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getTimeZone("9Qrh&Mtnaf9-}I)gd)G");
      FastDateParser fastDateParser0 = new FastDateParser("9Qrh&Mtnaf9-}I)gd)G", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getTimeZone("GZZJu{mDeqj#dIAU");
      FastDateParser fastDateParser0 = new FastDateParser("GZZJu{mDeqj#dIAU", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2323));
      assertEquals((-323), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("_wTY<WbnS", "_wTY<WbnS");
      FastDateParser fastDateParser0 = new FastDateParser("_wTY<WbnS", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(2000);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("v", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "#V=j6<WLw!CC&6");
      FastDateParser fastDateParser0 = new FastDateParser("#V=j6<WLw!CC&6", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null, (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("_wTY<WbnS", "_wTY<WbnS");
      FastDateParser fastDateParser0 = new FastDateParser("_wTY<WbnS", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("_wTY<WbnS");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"_wTY<WbnS\" does not match _(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getTimeZone("9Qrh&Mtnaf9-}I)gd)G");
      FastDateParser fastDateParser0 = new FastDateParser("9Qrh&Mtnaf9-}I)gd)G", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getTimeZone("GZZJu{mDeqj#dIAU");
      FastDateParser fastDateParser0 = new FastDateParser("GZZJu{mDeqj#dIAU", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(201);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("GZZJu{mDeqj#dIAU", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      FastDateParser fastDateParser0 = new FastDateParser("9Qrh&Mtnaf9-}I)gd)G", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getTimeZone("9Qrh&Mtnaf9-}I)gd)G");
      FastDateParser fastDateParser0 = new FastDateParser("9Qrh&Mtnaf9-}I)gd)G", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getTimeZone("9Qrh&Mtnaf9-}I)gd)G");
      FastDateParser fastDateParser0 = new FastDateParser("9Qrh&Mtnaf9-}I)gd)G", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3404), ",");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser((String) null, simpleTimeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getTimeZone("9Qrh&Mtnaf9-}I)gd)G");
      FastDateParser fastDateParser0 = new FastDateParser("\u0003k9", timeZone0, locale0);
      assertEquals("\u0003k9", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("_wTY<WbnS", "_wTY<WbnS");
      FastDateParser fastDateParser0 = new FastDateParser("_wTY<WbnS", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(43);
      parsePosition0.setIndex(1);
      Date date0 = fastDateParser0.parse("_wTY<WbnS", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("9Qrh&Mnaf9-}I)gd)G");
      Locale locale0 = new Locale("9Qrh&Mnaf9-}I)gd)G", "9Qrh&Mnaf9-}I)gd)G");
      FastDateParser fastDateParser0 = new FastDateParser("Zv?$GTNjzy~1\"", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("NST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("9Qrh&Mtnaf9-}I)gd)G");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("Zv?$GTNjzy~1\"", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("GMTNET");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getTimeZone("9Qrh&Mtnaf9-}I)gd)G");
      FastDateParser fastDateParser0 = new FastDateParser("?94'YO/8M_'`>", timeZone0, locale0);
      assertEquals("?94'YO/8M_'`>", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getTimeZone("9Qrh&Mtnaf9-}I)gd)G");
      FastDateParser fastDateParser0 = new FastDateParser("^CgVT9_:Upn3", timeZone0, locale0);
      assertEquals("^CgVT9_:Upn3", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("@(.", timeZone0, locale0);
      assertEquals("@(.", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser(";Q,[?N", timeZone0, locale0);
      assertEquals(";Q,[?N", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("afs.5).iY)#sT:,H");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("6(#AXvSo/Gt", timeZone0, locale0);
      assertEquals("6(#AXvSo/Gt", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("4OfyfTY", timeZone0, locale0);
      assertEquals("4OfyfTY", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("37VrN:W))D&{tsC7gw", timeZone0, locale0);
      assertEquals("37VrN:W))D&{tsC7gw", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getTimeZone("9Qrh&Mtnaf9-}I)gd)G");
      FastDateParser fastDateParser0 = new FastDateParser("a2pmt4PS%n54<]n?", timeZone0, locale0);
      assertEquals("a2pmt4PS%n54<]n?", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("_wTY<WbnS", "_wTY<WbnS");
      FastDateParser fastDateParser0 = new FastDateParser("F1!Zq}{_@9", timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getTimeZone("GZZJu{mDeqj#dIAU");
      FastDateParser fastDateParser0 = new FastDateParser("0P4([,jAT<t$L", timeZone0, locale0);
      assertEquals("0P4([,jAT<t$L", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getTimeZone("9Qrh&Mtnaf9-}I)gd)G");
      FastDateParser fastDateParser0 = new FastDateParser("/X@", timeZone0, locale0);
      assertEquals("/X@", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser(".+_L$", timeZone0, locale0);
      assertEquals(".+_L$", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getTimeZone("GZZJu{mDeqjdIAU");
      FastDateParser fastDateParser0 = new FastDateParser("s:a-d<CZpSOsV", timeZone0, locale0);
      assertEquals("s:a-d<CZpSOsV", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3404), ",");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser(",", simpleTimeZone0, locale0);
      assertEquals(",", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getTimeZone("9Qrh&Mtnaf9-}I)gd)G");
      FastDateParser fastDateParser0 = new FastDateParser("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", timeZone0, locale0);
      assertEquals("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("]h&]'", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-1198));
      assertEquals(802, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getTimeZone("9Qrh&Mtnaf9-}I)gd)G");
      FastDateParser fastDateParser0 = new FastDateParser("9Qrh&Mtnaf9-}I)gd)G", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(41);
      assertEquals(1941, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("{E*DE8?_]UM!ki+)", timeZone0, locale0);
      assertEquals("{E*DE8?_]UM!ki+)", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("zO+h_DnU|v!iS");
      Locale locale0 = new Locale("zO+h_DnU|v!iS", "zO+h_DnU|v!iS");
      FastDateParser fastDateParser0 = new FastDateParser("zO+h_DnU|v!iS", timeZone0, locale0);
      Locale locale1 = new Locale("zO+h_DnU|v!iS");
      FastDateParser fastDateParser1 = new FastDateParser("zO+h_DnU|v!iS", timeZone0, locale1);
      String string0 = "";
      try { 
        fastDateParser1.parse(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\" does not match (GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre Time|ACST|ACT|ADT|AEDT|AEST|Afghanistan Time|AFT|AKDT|AKST|Alaska Daylight Time|Alaska Standard Time|Alma-Ata Time|ALMT|Amazon Time|AMT|Anadyr Time|ANAT|Aqtobe Time|AQTT|Arabia Standard Time|Argentine Time|ART|AST|Atlantic Daylight Time|Atlantic Standard Time|Australian Central Daylight Time \\(South Australia/New South Wales\\)|Australian Central Standard Time \\(Northern Territory\\)|Australian Central Standard Time \\(South Australia/New South Wales\\)|Australian Eastern Daylight Time \\(New South Wales\\)|Australian Eastern Daylight Time \\(Tasmania\\)|Australian Eastern Daylight Time \\(Victoria\\)|Australian Eastern Standard Time \\(New South Wales\\)|Australian Eastern Standard Time \\(Queensland\\)|Australian Eastern Standard Time \\(Tasmania\\)|Australian Eastern Standard Time \\(Victoria\\)|Australian Western Standard Time|AWST|Azerbaijan Time|Azores Summer Time|Azores Time|AZOST|AZOT|AZT|Bangladesh Time|BDT|Bhutan Time|Bougainville Standard Time|Brasilia Time|British Summer Time|BRT|BST|BTT|CAT|CCT|CDT|Central African Time|Central Daylight Time|Central European Summer Time|Central European Time|Central Standard Time|CEST|CET|CHADT|Chamorro Standard Time|CHAST|Chatham Daylight Time|Chatham Standard Time|Chile Time|China Standard Time|Choibalsan Time|CHOT|ChST|CHUT|Chuuk Time|CLT|Cocos Islands Time|Colombia Time|Coordinated Universal Time|COT|CST|DDUT|Dumont-d'Urville Time|EASST|EAST|East Indonesia Time|Easter Is\\. Summer Time|Easter Is\\. Time|Eastern African Time|Eastern Daylight Time|Eastern European Summer Time|Eastern European Time|Eastern Greenland Summer Time|Eastern Greenland Time|Eastern Standard Time|EAT|ECT|Ecuador Time|EDT|EEST|EET|EGST|EGT|EST|Fernando de Noronha Time|FNT|French Guiana Time|French Southern & Antarctic Lands Time|Gambier Time|GAMT|Georgia Time|GET|GFT|Ghana Mean Time|GMT|GMT\\+02:00|GMT\\+03:00|GMT\\+05:00|GMT\\+07:00|GMT\\+09:00|GMT\\+10:00|GMT\\+12:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-04:00|GMT-06:00|GMT-08:00|GMT-11:00|Greenwich Mean Time|GST|Gulf Standard Time|Hawaii Daylight Time|Hawaii Standard Time|HDT|Hovd Time|HOVT|HST|ICT|IDT|India Standard Time|Indian Ocean Territory Time|Indochina Time|IOT|Iran Daylight Time|Iran Standard Time|IRDT|IRST|Israel Daylight Time|Israel Standard Time|IST|KGT|Kirgizstan Time|Korea Standard Time|Kosrae Time|KOST|Krasnoyarsk Time|KRAT|KST|Magadan Time|MAGT|Malaysia Time|Maldives Time|Marshall Islands Time|Mawson Time|MAWT|MDT|MEST|MET|MHT|Middle Europe Summer Time|Middle Europe Time|Moscow Standard Time|Mountain Daylight Time|Mountain Standard Time|MSK|MST|MVT|MYT|NCT|NDT|Nepal Time|New Caledonia Time|New Zealand Daylight Time|New Zealand Standard Time|Newfoundland Daylight Time|Newfoundland Standard Time|Niue Time|Novosibirsk Time|NOVT|NPT|NST|NUT|NZDT|NZST|Oral Time|ORAT|Pacific Daylight Time|Pacific Standard Time|Pakistan Time|Palau Time|Papua New Guinea Time|Paraguay Summer Time|Paraguay Time|PDT|Peru Time|PET|PGT|Philippines Standard Time|Pierre & Miquelon Daylight Time|Pierre & Miquelon Standard Time|PKT|PMDT|PMST|Pohnpei Time|PONT|PST|PWT|PYST|PYT|QYZT|Qyzylorda Time|Sakhalin Time|SAKT|Samara Time|Samoa Standard Time|SAMT|SAST|SGT|Singapore Time|South Africa Standard Time|SRT|SST|Suriname Time|Tahiti Time|TAHT|TFT|TKT|TMT|Tokelau Time|Tonga Time|TOT|TRT|Turkey Time|Turkmenistan Time|Tuvalu Time|TVT|Ulaanbaatar Time|ULAT|UTC|Vanuatu Time|Venezuela Time|VET|VUT|Wake Time|WAKT|WAT|WEST|West Indonesia Time|West Samoa Daylight Time|West Samoa Standard Time|Western African Time|Western European Summer Time|Western European Time|Western Greenland Summer Time|Western Greenland Time|WET|WGST|WGT|WIB|WIT|WSDT|WSST|Xinjiang Standard Time|XJT|YAKT|Yakutsk Time|Yekaterinburg Time|YEKT)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1276), "GMTNET");
      FastDateParser fastDateParser0 = new FastDateParser("?}\n,C.,L?/#`v", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("GMTNET", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("]%D$X]'", timeZone0, locale0);
      assertEquals("]%D$X]'", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("GKToNT", timeZone0, locale0);
      try { 
        fastDateParser0.parse("_wTY<WbnS");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"_wTY<WbnS\" does not match (\u7D00\u5143\u524D|\u7D00\u5143\u524D|\u897F\u66A6|\u897F\u66A6)(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("]h&]'", timeZone0, locale0);
      Locale locale1 = Locale.CHINESE;
      FastDateParser fastDateParser1 = new FastDateParser("]h&]'", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getTimeZone("GZZJu{mDeqjdIAU");
      FastDateParser fastDateParser0 = new FastDateParser("GZZJu{mDeqjdIAU", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(105, "GZZJu{mDeqjdIAU");
      FastDateParser fastDateParser1 = new FastDateParser("GZZJu{mDeqjdIAU", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getTimeZone("9Qrh&Mtnaf9-}I)gd)G");
      FastDateParser fastDateParser0 = new FastDateParser("9Qrh&Mtnaf9-}I)gd)G", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("Zv?$GTNjzy~1\"", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getTimeZone("9Qrh&Mtnaf9-}I)gd)G");
      FastDateParser fastDateParser0 = new FastDateParser("9Qrh&Mtnaf9-}I)gd)G", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals("m)Sp80Wh.gR{ns\"LLK");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("]h&]'", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = new Locale("9Qrh&Mnaf9-}I)gd)G", "9Qrh&Mnaf9-}I)gd)G");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(115, "MIT");
      FastDateParser fastDateParser0 = new FastDateParser("h", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getTimeZone("9Qrh&Mtnaf9-}I)gd)G");
      FastDateParser fastDateParser0 = new FastDateParser("9Qrh&Mtnaf9-}I)gd)G", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("9Qrh&Mtnaf9-}I)gd)G");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Locale locale0 = new Locale("9Qrh&Mnaf9-}I)gd)G", "9Qrh&Mnaf9-}I)gd)G");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(115, "MIT");
      FastDateParser fastDateParser0 = new FastDateParser("h", simpleTimeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("9QRH&MNAF9-}I)GD)G", locale1.getCountry());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getTimeZone("9Qrh&Mtnaf9-}I)gd)G");
      FastDateParser fastDateParser0 = new FastDateParser("9Qrh&Mtnaf9-}I)gd)G", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("9Qrh&Mtnaf9-}I)gd)G", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser(")9eGzcd6Nm`z", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject(")9eGzcd6Nm`z", parsePosition0);
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Locale locale0 = new Locale("9Qrh&Mnaf9-}I)gd)G", "9Qrh&Mnaf9-}I)gd)G");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(115, "MIT");
      FastDateParser fastDateParser0 = new FastDateParser("h", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[h,9qrh&mnaf9-}i)gd)g_9QRH&MNAF9-}I)GD)G,MIT]", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("_wTY<WbnS", "_wTY<WbnS");
      FastDateParser fastDateParser0 = new FastDateParser("_wTY<WbnS", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      ParsePosition parsePosition0 = new ParsePosition(1);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-743), "");
      FastDateParser fastDateParser0 = new FastDateParser("MDu+Q5", simpleTimeZone0, locale0);
      fastDateParser0.parse("~96Um[", parsePosition0);
      assertEquals(3, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getTimeZone("9Qrh&Mtnaf9-}I)gd)G");
      FastDateParser fastDateParser0 = new FastDateParser("d=#dDyJ", timeZone0, locale0);
      assertEquals("d=#dDyJ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("7KE5QrKcy%k:H:)W7d", timeZone0, locale0);
      assertEquals("7KE5QrKcy%k:H:)W7d", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("afs.5).iY)#sT:,H");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("Fztd_ueKVyi", timeZone0, locale0);
      assertEquals("Fztd_ueKVyi", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("9Qrh&Mtnaf9-}I)gd)G");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("Zv?$GTNjzy~1\"", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals(0, pattern0.flags());
  }
}
