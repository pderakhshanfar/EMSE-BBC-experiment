/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 04:25:55 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getTimeZone("MMW*Gi7");
      FastDateParser fastDateParser0 = new FastDateParser("d|yy7PIfS@TCBXFY4", timeZone0, locale0);
      assertEquals("d|yy7PIfS@TCBXFY4", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(0, 0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("=L)m*", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("=L)m*", parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("56b!9vcfv0K:w2[C9");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("org.apache.commons.lang3.time.FastDateParser");
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(116, "]");
      FastDateParser fastDateParser0 = new FastDateParser("]", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=],offset=116,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("4'gDagFxVk#Ew", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "VST");
      FastDateParser fastDateParser0 = new FastDateParser("_2+91mY>'7sH@7H#", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertFalse(timeZone0.useDaylightTime());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("0T'v=k.");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("0T'v=k.", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(120);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("}apK2$,>_&T}", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("\" does not match ", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|");
      FastDateParser fastDateParser0 = new FastDateParser("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(43);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser(" not in (", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("W@7");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("[|e`2v0mGCLA\"", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("MMW#", timeZone0, locale0);
      TimeZone timeZone1 = TimeZone.getDefault();
      FastDateParser fastDateParser1 = new FastDateParser("z", timeZone0, locale0);
      Locale locale1 = new Locale("aZC*WRzpk >");
      FastDateParser fastDateParser2 = new FastDateParser("aZC*WRzpk >", timeZone1, locale1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      String string0 = "(@ve";
      try { 
        fastDateParser2.parse(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"(@ve\" does not match (AM|PM)(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|CT|ceTm|CT|C|CS|D|ET|ET|fhnsa ie|F|KT|KT|lsaDyih ie|lsaSadr ie|laAaTm|LT|mznTm|M|ndrTm|NT|qa ie|qoeTm|QT|rbaSadr ie|retn ie|rei ie|R|S|tatcDyih ie|tatcSadr ie|utainCnrlDyih ie\\(ot utai\\)|utainCnrlDyih ie\\(ot utai/e ot ae\\)|utainCnrlSadr ie\\(otenTrioy|utainCnrlSadr ie\\(ot utai\\)|utainCnrlSadr ie\\(ot utai/e ot ae\\)|utainCnrlWsenSadr ie|utainEsenDyih ie\\(e ot ae\\)|utainEsenDyih ie\\(amna|utainEsenDyih ie\\(itra|utainEsenSadr ie\\(e ot ae\\)|utainEsenSadr ie\\(uesad|utainEsenSadr ie\\(amna|utainEsenSadr ie\\(itra|utainWsenSadr ie|WT|zrajnTm|zrsSme ie|zrsTm|ZS|ZT|Z|agaehTm|D|htnTm|N|oii ie|O|ogivleSadr ie|rslaTm|rts umrTm|R|rniTm|S|T|aeVreTm|A|C|D|eta fia ie|eta algtTm|eta uoenSme ie|eta uoenTm|eta noei ie|eta tnadTm|ET|E|HD|hmroSadr ie|HS|hta algtTm|hta tnadTm|hl umrTm|hl ie|hn tnadTm|hiasnTm|HT|hita sadTm|hT|HT|hu ie|K|LT|L|oo sad ie|oobaTm|okI\\.Tm|oriae nvra ie|O|S|uaDyih ie|uaSadr ie|V|X|ai ie|AT|DT|uotdUvleTm|AS|AT|atIdnsaTm|atrI\\.Sme ie|atrI\\.Tm|atr fia ie|atr algtTm|atr uoenSme ie|atr uoenTm|atr reln umrTm|atr reln ie|atr tnadTm|A|C|cao ie|D|ET|E|GT|G|S|akadI\\.Tm|ennod ooh ie|iiSme ie|iiTm|JT|J|K|N|rnhGin ie|rnhSuhr  naci ad ie|aaao ie|AT|abe ie|AT|eri ie|E|F|hn enTm|ibr s ie|IT|M|M\\+10|M\\+20|M\\+30|M\\+40|M\\+50|M\\+60|M\\+70|M\\+80|M\\+90|M\\+00|M\\+10|M\\+20|M\\+30|M\\+40|M-10|M-20|M-30|M-40|M-50|M-60|M-70|M-80|M-90|M-00|M-10|M-20|rewc enTm|S|ufSadr ie|uaaTm|Y|aaiDyih ie|aaiSadr ie|D|K|ogKn ie|odTm|OT|S|C|D|ni tnadTm|ninOenTrioyTm|nohn ie|O|rnDyih ie|rnSadr ie|RT|rs umrTm|RT|rus ie|RT|salDyih ie|salSadr ie|S|aa tnadTm|S|G|igztnTm|oe tnadTm|oreTm|OT|otnySadr ie|rsoas ie|RT|S|HT|HT|ieI\\.Tm|IT|odHw algtTm|odHw tnadTm|aqai sadDyih ie|aqai sadSadr ie|aaa ie|AT|aasaTm|advsTm|aqea ie|asalIlnsTm|AT|artu ie|asnTm|AT|D|ET|E|H|ideErp umrTm|ideErp ie|IT|IT|M|ocwSadr ie|onanDyih ie|onanSadr ie|S|S|U|V|yna ie|Y|ar ie|C|D|ea ie|e aeoi ie|e eln algtTm|e eln tnadTm|efudadDyih ie|efudadSadr ie|FT|F|ieTm|ofl umrTm|ofl ie|ooiis ie|OT|P|R|S|U|ZT|ZT|mkTm|MT|rlTm|RT|aii algtTm|aii tnadTm|aitnTm|aa ie|au e unaTm|aauySme ie|aauyTm|D|euTm|E|erpvos-acasiTm|ET|G|hlpie tnadTm|hei s ie|HT|ire&Mqeo algtTm|ire&Mqeo tnadTm|icinSadr ie|K|MT|MT|one ie|OT|S|W|YT|Y|OT|YT|yyod ie|E|eno ie|ohr ie|OT|ahlnTm|AT|aaaTm|ao tnadTm|AT|AT|B|C|ecelsTm|G|igpr ie|ooo s ie|ot fiaSadr ie|ot eri tnadTm|rdeoys ie|RT|R|S|uiaeTm|YT|yw ie|aiiTm|AT|aiitnTm|F|io-et ie|J|K|L|M|oea ie|og ie|O|R|ukyTm|ukeitnTm|uauTm|V|labaa ie|LT|rga ie|s-eaTm|T|Y|zeitnTm|Z|aut ie|eeul ie|E|ldvso ie|LT|OT|otkTm|U|aeTm|AT|als&Ftn ie|A|ET|etIdnsaTm|etSmaDyih ie|etSmaSadr ie|etr fia ie|etr uoenSme ie|etr uoenTm|etr reln umrTm|etr reln ie|E|F|GT|G|I|I|IA|ST|ST|ijagSadr ie|J|AT|aus ie|eaeibr ie|ET)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", timeZone0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("h[vW\"W$n&l'#{&n:XYZ", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = fastDateParser0.parse("h[vW\"W$n&l'#{&n:XYZ", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("-kwKs>m',p54fNZ", timeZone0, locale0);
      try { 
        fastDateParser0.parse("2BBo2r_UfT2c");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"2BBo2r_UfT2c\" does not match -(\\p{IsNd}{1}+)(\\p{IsNd}{1}+)(\\p{IsNd}{1}+)(\\p{IsNd}++)>(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("zi|nIx?~hm", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("GMTNET");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("S''vWU", timeZone0, locale0);
      assertEquals("S''vWU", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("`4Ozz3", timeZone0, locale0);
      assertEquals("`4Ozz3", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("Z\\blWo=Xr:@FioKL3", timeZone0, locale0);
      assertEquals("Z\\blWo=Xr:@FioKL3", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("W@7");
      Locale locale0 = new Locale("W@7");
      FastDateParser fastDateParser0 = new FastDateParser("<);.}.&z", timeZone0, locale0);
      assertEquals("<);.}.&z", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("K;{(=", timeZone0, locale0);
      assertEquals("K;{(=", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser(":UWD3*H 6X", timeZone0, locale0);
      assertEquals(":UWD3*H 6X", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("^H9tzG;m_qer6$4UAV$", timeZone0, locale0);
      assertEquals("^H9tzG;m_qer6$4UAV$", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("E8C:#u3}!3_/Y:'(|-l", timeZone0, locale0);
      assertEquals("E8C:#u3}!3_/Y:'(|-l", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("54\" i$Zw7", timeZone0, locale0);
      assertEquals("54\" i$Zw7", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("0T'v=k.");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("KZ2Nw9m13]M)", timeZone0, locale0);
      assertEquals("KZ2Nw9m13]M)", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(0, 0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("1~m@%3N(", timeZone0, locale0);
      assertEquals("1~m@%3N(", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("0T'v=k.");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("0T'v=k.", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-425));
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale(":8\"[$:N@EPKC6EG3Xr6");
      FastDateParser fastDateParser0 = new FastDateParser(".LZol!Z,s&Hf ", timeZone0, locale0);
      assertEquals(".LZol!Z,s&Hf ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("0T'v=k.");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser(",", timeZone0, locale0);
      assertEquals(",", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser(")Y:I", timeZone0, locale0);
      assertEquals(")Y:I", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-3594));
      assertEquals((-1594), int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("MIS)T");
      FastDateParser fastDateParser0 = new FastDateParser("MIS)T", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(35);
      assertEquals(1935, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("W@7");
      Locale locale0 = new Locale("");
      FastDateParser fastDateParser0 = new FastDateParser("\"E/EIS.A+w", timeZone0, locale0);
      assertEquals("\"E/EIS.A+w", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2710, "");
      FastDateParser fastDateParser0 = new FastDateParser("aM?drR<", simpleTimeZone0, locale0);
      assertEquals("aM?drR<", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      locale0.getDisplayCountry();
      Locale locale1 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      fastDateParser0.adjustYear(0);
      TimeZone timeZone1 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, timeZone1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      Locale locale1 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("/MZ6kuyzN@n", timeZone0, locale1);
      timeZone0.setID("aM?drR<");
      Locale locale2 = Locale.ITALIAN;
      assertFalse(locale2.equals((Object)locale0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("$-LKjaOTLFf", timeZone0, locale0);
      assertEquals("$-LKjaOTLFf", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getTimeZone("MMW*Gi7");
      FastDateParser fastDateParser0 = new FastDateParser("MMW*Gi7", timeZone0, locale0);
      try { 
        fastDateParser0.parse("H>i6#I%351{;Cx'YFR");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"H>i6#I%351{;Cx'YFR\" does not match (\\p{IsNd}{2}+)(\\p{IsNd}++)\\*(\u7D00\u5143\u524D|\u7D00\u5143\u524D|\u897F\u66A6|\u897F\u66A6)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("=L)m*", timeZone0, locale0);
      Locale locale1 = Locale.forLanguageTag("{0!{-sB(*=");
      FastDateParser fastDateParser1 = new FastDateParser("=L)m*", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(0, 0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("=L)m*", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=L)m*");
      FastDateParser fastDateParser1 = new FastDateParser("=L)m*", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("=L)m*", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("{xuHaSz", timeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("3=vnr", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals("=L)m*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(0, 0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("=L)m*", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("HIT", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("12]sud8+|Xt");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("k7h!etR", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("(\\p{IsNd}{1}+)7(\\p{IsNd}++)!", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("_qSl#*]", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("GMTCAT");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"GMTCAT\" does not match _
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("=L)m*", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("ko_KR", locale1.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("3=vnr", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("3=vnr", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(785, "4'gDagFxVk#Ew");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("4'gDagFxVk#Ew", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("QLw", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("* ot in (", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[* ot in (,ko_KR,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("h[vW\"W$n&l'#{&n:XYZ", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("ko-KR", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("1sud8+|Xt");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("MIS)T");
      FastDateParser fastDateParser0 = new FastDateParser("MIS)T", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(3);
      fastDateParser0.parse("Ad~8t(", parsePosition0);
      assertEquals(4, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=4,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(0, 0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("ymm+1LuS^UG", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("ymm+1LuS^UG", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("zi|nIx?~hm", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("ECT");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }
}
