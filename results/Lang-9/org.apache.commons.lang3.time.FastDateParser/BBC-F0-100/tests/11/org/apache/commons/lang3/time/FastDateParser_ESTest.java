/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 04:29:21 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-479), "lNpk5S3 Fy8F1ZC.rW");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("d td", simpleTimeZone0, locale0);
      assertEquals("d td", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("yys1B#Bw", timeZone0, locale0);
      assertEquals("yys1B#Bw", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("]", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("", locale1.getCountry());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("yR>ph", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      fastDateParser0.parseObject("77nQ%`X_bc(xvA}3{Qc", parsePosition0);
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("6^MP[j7YGeoC$Gf}", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "kZV&}u6jn");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("kZV&}u6jn", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2790, "m0P8");
      FastDateParser fastDateParser0 = new FastDateParser("m0P8", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(2790, timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-328), "IST");
      FastDateParser fastDateParser0 = new FastDateParser(".},", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals((-328), timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("6^MP[j7YGeoC$Gf}", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(46);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("6^MP[j7YGeoC$Gf}", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(42, "GMT");
      FastDateParser fastDateParser0 = new FastDateParser("GMT", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("7C3ZBfkv", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-328), "IST");
      FastDateParser fastDateParser0 = new FastDateParser(".},", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-2270));
      // Undeclared exception!
      try { 
        fastDateParser0.parse("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("\"Xgi?,bT", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("org.apache.commons.lang3.time.FastDateParser$KeyValue", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("+\"e1", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      String string0 = "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++";
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      Locale locale1 = Locale.ITALIAN;
      FastDateParser fastDateParser1 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale1);
      try { 
        fastDateParser1.parseObject(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++\" does not match (\\p{IsNd}++)\\+\\|(dom|domenica|gio|gioved\u00EC|lun|luned\u00EC|mar|marted\u00EC|mer|mercoled\u00EC|sab|sabato|ven|venerd\u00EC)\\+\\|(\\p{IsNd}++)\\+\\|(BC|BC|dopo Cristo|dopo Cristo)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|ALMT|AMT|ANAT|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville Daylight Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|DAVT|DDUT|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|Kostanay Summer Time|KRAT|KST|LHDT|LHST|LINT|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|Ora estiva Australia centro-occidentale|Ora estiva britannica|Ora estiva centrale \\(Australia del Sud\\)|Ora estiva centrale \\(Australia del Sud/Nuovo Galles del Sud\\)|Ora estiva centrale \\(Territori del Nord\\)|Ora estiva del Bangladesh|Ora estiva del Bhutan|Ora estiva del Brasile|Ora estiva del Brunei|Ora estiva del Cile|Ora estiva del Kirghizistan|Ora estiva del Nepal|Ora estiva del Pakistan|Ora estiva del Paraguay|Ora estiva del Per\u00F9|Ora estiva del Sudafrica|Ora estiva del Tagikistan|Ora estiva del Terr\\. Britannico dell'Oceano Indiano|Ora estiva del Turkmenistan|Ora estiva del Venezuela|Ora estiva dell'Afghanistan|Ora estiva dell'Africa centrale|Ora estiva dell'Africa occidentale|Ora estiva dell'Africa orientale|Ora estiva dell'Amazzonia|Ora estiva dell'Argentina|Ora estiva dell'Armenia|Ora estiva dell'Australia occidentale|Ora estiva dell'Australia orientale \\(Nuovo Galles del Sud\\)|Ora estiva dell'Azerbaigian|Ora estiva dell'Ecuador|Ora estiva dell'Europa centrale|Ora estiva dell'Europa occidentale|Ora estiva dell'Europa orientale|Ora estiva dell'Indocina|Ora estiva dell'Indonesia centrale|Ora estiva dell'Indonesia occidentale|Ora estiva dell'Indonesia orientale|Ora estiva dell'Isola Christmas|Ora estiva dell'Isola della Fenice|Ora estiva dell'Isola di Pasqua|Ora estiva dell'Isola Macquarie|Ora estiva dell'Uruguay|Ora estiva dell'Uzbekistan|Ora estiva della Birmania/Myanmar|Ora estiva della Bolivia|Ora estiva della Colombia|Ora estiva della Georgia|Ora estiva della Groenlandia occidentale|Ora estiva della Groenlandia orientale|Ora estiva della Guyana|Ora estiva della Guyana Francese|Ora estiva della Malaysia|Ora estiva della Nuova Caledonia|Ora estiva delle Azzorre|Ora estiva delle Falkland|Ora estiva delle Galapagos|Ora estiva delle Isole Cocos|Ora estiva delle Isole Cook|Ora estiva delle Isole Gilbert|Ora estiva delle Isole Marchesi|Ora estiva delle Isole Marshall|Ora estiva delle Isole Salomone|Ora estiva delle Line Islands|Ora estiva delle Maldive|Ora estiva delle Seychelles|Ora estiva delle Terre Australi Antartiche Francesi|Ora estiva di Acre|Ora estiva di Alma-Ata|Ora estiva di Anadyr|Ora estiva di Aqtau|Ora estiva di Aqtobe|Ora estiva di Capo Verde|Ora estiva di Choibalsan|Ora estiva di Chuuk|Ora estiva di Davis|Ora estiva di Dumont-d'Urville|Ora estiva di Ekaterinburg|Ora estiva di Fernando de Noronha|Ora estiva di Figi|Ora estiva di Gambier|Ora estiva di Hong Kong|Ora estiva di Hovd|Ora estiva di Irkutsk|Ora estiva di Jakutsk|Ora estiva di Kosrae|Ora estiva di Krasnojarsk|Ora estiva di Lord Howe|Ora estiva di Magadan|Ora estiva di Mauritius|Ora estiva di Mawson|Ora estiva di Nauru|Ora estiva di Niue|Ora estiva di Norfolk|Ora estiva di Novosibirsk|Ora estiva di Omsk|Ora estiva di Oral|Ora estiva di Palau|Ora estiva di Papua Nuova Guinea|Ora estiva di Petropavlovsk-Kamchatski|Ora estiva di Pohnpei|Ora estiva di Qyzylorda|Ora estiva di Reunion|Ora estiva di Rothera|Ora estiva di Sakhalin|Ora estiva di Samara|Ora estiva di Samoa|Ora estiva di Singapore|Ora estiva di Suriname|Ora estiva di Syowa|Ora estiva di Tahiti|Ora estiva di Timor Leste|Ora estiva di Tokelau|Ora estiva di Tonga|Ora estiva di Tuvalu|Ora estiva di Ulaanbaatar|Ora estiva di Ust-Nera|Ora estiva di Vanuatu|Ora estiva di Vladivostok|Ora estiva di Vostok|Ora estiva di Wake|Ora estiva di Wallis e Futuna|Ora estiva irlandese|Ora estiva orientale \\(Queensland\\)|Ora estiva orientale \\(Tasmania\\)|Ora estiva orientale \\(Victoria\\)|Ora legale Cuba|Ora legale del Ghana|Ora legale del Giappone|Ora legale del golfo|Ora legale dell'Alaska|Ora legale dell'Arabia|Ora legale dell'Atlantico occidentale|Ora legale dell'India|Ora legale della Cina|Ora legale della Corea|Ora legale della costa occidentale USA|Ora legale della Georgia Australe|Ora legale della Nuova Zelanda|Ora legale delle Isole Hawaii|Ora legale di Chamorro|Ora legale di Chatham|Ora legale di Israele|Ora legale di Mosca|Ora legale di Pitcairn|Ora legale di Saint-Pierre e Miquelon|Ora legale di Samoa|Ora legale di Terranova|Ora legale Iran|Ora legale USA centrale|Ora legale USA occidentale|Ora legale USA orientale|Ora media di Greenwich|ORAT|PDT|PET|PETT|PGT|Philippines Daylight Time|PHOT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk Daylight Time|SRET|SRT|SST|SYOT|TAHT|Tempo universale coordinato|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|YEKT)\\+\\|(AM|PM)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|ALMT|AMT|ANAT|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville Daylight Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|DAVT|DDUT|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|Kostanay Summer Time|KRAT|KST|LHDT|LHST|LINT|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|Ora estiva Australia centro-occidentale|Ora estiva britannica|Ora estiva centrale \\(Australia del Sud\\)|Ora estiva centrale \\(Australia del Sud/Nuovo Galles del Sud\\)|Ora estiva centrale \\(Territori del Nord\\)|Ora estiva del Bangladesh|Ora estiva del Bhutan|Ora estiva del Brasile|Ora estiva del Brunei|Ora estiva del Cile|Ora estiva del Kirghizistan|Ora estiva del Nepal|Ora estiva del Pakistan|Ora estiva del Paraguay|Ora estiva del Per\u00F9|Ora estiva del Sudafrica|Ora estiva del Tagikistan|Ora estiva del Terr\\. Britannico dell'Oceano Indiano|Ora estiva del Turkmenistan|Ora estiva del Venezuela|Ora estiva dell'Afghanistan|Ora estiva dell'Africa centrale|Ora estiva dell'Africa occidentale|Ora estiva dell'Africa orientale|Ora estiva dell'Amazzonia|Ora estiva dell'Argentina|Ora estiva dell'Armenia|Ora estiva dell'Australia occidentale|Ora estiva dell'Australia orientale \\(Nuovo Galles del Sud\\)|Ora estiva dell'Azerbaigian|Ora estiva dell'Ecuador|Ora estiva dell'Europa centrale|Ora estiva dell'Europa occidentale|Ora estiva dell'Europa orientale|Ora estiva dell'Indocina|Ora estiva dell'Indonesia centrale|Ora estiva dell'Indonesia occidentale|Ora estiva dell'Indonesia orientale|Ora estiva dell'Isola Christmas|Ora estiva dell'Isola della Fenice|Ora estiva dell'Isola di Pasqua|Ora estiva dell'Isola Macquarie|Ora estiva dell'Uruguay|Ora estiva dell'Uzbekistan|Ora estiva della Birmania/Myanmar|Ora estiva della Bolivia|Ora estiva della Colombia|Ora estiva della Georgia|Ora estiva della Groenlandia occidentale|Ora estiva della Groenlandia orientale|Ora estiva della Guyana|Ora estiva della Guyana Francese|Ora estiva della Malaysia|Ora estiva della Nuova Caledonia|Ora estiva delle Azzorre|Ora estiva delle Falkland|Ora estiva delle Galapagos|Ora estiva delle Isole Cocos|Ora estiva delle Isole Cook|Ora estiva delle Isole Gilbert|Ora estiva delle Isole Marchesi|Ora estiva delle Isole Marshall|Ora estiva delle Isole Salomone|Ora estiva delle Line Islands|Ora estiva delle Maldive|Ora estiva delle Seychelles|Ora estiva delle Terre Australi Antartiche Francesi|Ora estiva di Acre|Ora estiva di Alma-Ata|Ora estiva di Anadyr|Ora estiva di Aqtau|Ora estiva di Aqtobe|Ora estiva di Capo Verde|Ora estiva di Choibalsan|Ora estiva di Chuuk|Ora estiva di Davis|Ora estiva di Dumont-d'Urville|Ora estiva di Ekaterinburg|Ora estiva di Fernando de Noronha|Ora estiva di Figi|Ora estiva di Gambier|Ora estiva di Hong Kong|Ora estiva di Hovd|Ora estiva di Irkutsk|Ora estiva di Jakutsk|Ora estiva di Kosrae|Ora estiva di Krasnojarsk|Ora estiva di Lord Howe|Ora estiva di Magadan|Ora estiva di Mauritius|Ora estiva di Mawson|Ora estiva di Nauru|Ora estiva di Niue|Ora estiva di Norfolk|Ora estiva di Novosibirsk|Ora estiva di Omsk|Ora estiva di Oral|Ora estiva di Palau|Ora estiva di Papua Nuova Guinea|Ora estiva di Petropavlovsk-Kamchatski|Ora estiva di Pohnpei|Ora estiva di Qyzylorda|Ora estiva di Reunion|Ora estiva di Rothera|Ora estiva di Sakhalin|Ora estiva di Samara|Ora estiva di Samoa|Ora estiva di Singapore|Ora estiva di Suriname|Ora estiva di Syowa|Ora estiva di Tahiti|Ora estiva di Timor Leste|Ora estiva di Tokelau|Ora estiva di Tonga|Ora estiva di Tuvalu|Ora estiva di Ulaanbaatar|Ora estiva di Ust-Nera|Ora estiva di Vanuatu|Ora estiva di Vladivostok|Ora estiva di Vostok|Ora estiva di Wake|Ora estiva di Wallis e Futuna|Ora estiva irlandese|Ora estiva orientale \\(Queensland\\)|Ora estiva orientale \\(Tasmania\\)|Ora estiva orientale \\(Victoria\\)|Ora legale Cuba|Ora legale del Ghana|Ora legale del Giappone|Ora legale del golfo|Ora legale dell'Alaska|Ora legale dell'Arabia|Ora legale dell'Atlantico occidentale|Ora legale dell'India|Ora legale della Cina|Ora legale della Corea|Ora legale della costa occidentale USA|Ora legale della Georgia Australe|Ora legale della Nuova Zelanda|Ora legale delle Isole Hawaii|Ora legale di Chamorro|Ora legale di Chatham|Ora legale di Israele|Ora legale di Mosca|Ora legale di Pitcairn|Ora legale di Saint-Pierre e Miquelon|Ora legale di Samoa|Ora legale di Terranova|Ora legale Iran|Ora legale USA centrale|Ora legale USA occidentale|Ora legale USA orientale|Ora media di Greenwich|ORAT|PDT|PET|PETT|PGT|Philippines Daylight Time|PHOT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk Daylight Time|SRET|SRT|SST|SYOT|TAHT|Tempo universale coordinato|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|YEKT)\\+\\|'\\|\\[\\^\\]\\+\\+\\('\\[\\^\\]\\*\\+\\)\\*\\+\\|\\[\\^
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "'#C", (-827), 0, 0, 0, 0, 0, 0, 0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser((String) null, simpleTimeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}++)", timeZone0, locale0);
      assertEquals("(p{IsNd}++)", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("SO@[tNJ>QEAKJ,G0jS", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(6);
      Date date0 = fastDateParser0.parse("SO@[tNJ>QEAKJ,G0jS", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("yRoph", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      fastDateParser0.parse("77n~Q%`X_bc(xvA}{Qc", parsePosition0);
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("yRoph", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("77n~Q%`X_bc(xvA}{Qc");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|az|d+|h+|k+|m+|s+|w+|y+|z+S''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|az|d+|h+|k+|m+|s+|w+|y+|z+S''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("`", timeZone0, locale0);
      assertEquals("`", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("@+A<", timeZone0, locale0);
      assertEquals("@+A<", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("?t|?9$%Q{30@0u", timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("=8Tf", timeZone0, locale0);
      assertEquals("=8Tf", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("\"S;", timeZone0, locale0);
      assertEquals("\"S;", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser(":47O)", timeZone0, locale0);
      assertEquals(":47O)", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("[{5F5j`Ue-,yxs", timeZone0, locale0);
      assertEquals("[{5F5j`Ue-,yxs", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(">D3", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("8MGh2lm_", timeZone0, locale0);
      assertEquals("8MGh2lm_", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("9~0>!_3W-x`", timeZone0, locale0);
      assertEquals("9~0>!_3W-x`", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("):iHq", timeZone0, locale0);
      assertEquals("):iHq", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("ww7eD?m.)", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2193));
      assertEquals((-193), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("+$}WgMV", timeZone0, locale0);
      assertEquals("+$}WgMV", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser(",|OM8y#&suh0O", timeZone0, locale0);
      assertEquals(",|OM8y#&suh0O", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("{Ua$", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("_?", timeZone0, locale0);
      try { 
        fastDateParser0.parse("6V5HlL");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"6V5HlL\" does not match _\\?
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("&H*59", timeZone0, locale0);
      assertEquals("&H*59", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("^T3G/3rdIjqNw<Alt", timeZone0, locale0);
      try { 
        fastDateParser0.parse("FastDateParser[^T3G/3rdIjqNw<Alt,en_GB,GMT]");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"FastDateParser[^T3G/3rdIjqNw<Alt,en_GB,GMT]\" does not match \\^
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("/#D[7Oo", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("/#D[7Oo");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"/#D[7Oo\" does not match /#(\\p{IsNd}++)\\[7
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("\"Xgi?,bT", timeZone0, locale0);
      Locale locale1 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser1 = new FastDateParser("\"Xgi?,bT", timeZone0, locale1);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone1 = TimeZone.getTimeZone("SST");
      FastDateParser fastDateParser0 = new FastDateParser("GMTEAT", timeZone1, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("GMTEAT", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("GMTIET", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("$", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("W'+Va,5 FM;<&M", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(";*Q[=L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("GMTIET", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("6^MP[j7YGeoC$Gf}", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("6\\^(\\p{IsNd}++)", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("4J80JTs", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertSame(locale0, locale1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("<VT&", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("<VT&", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("0$O_,c{/I4-zM}", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(4);
      Object object0 = fastDateParser0.parseObject("(8FHc4`~/Caz`_Q%tqs", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "kZV&}u6jn");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("kZV&}u6jn", simpleTimeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("SST");
      FastDateParser fastDateParser0 = new FastDateParser("SST", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("4HZVW8rD~sg");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("3s\"\\9-J");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("FasDateParser[", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(251);
      assertEquals(2151, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("4HZVW8rD~sg", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[4HZVW8rD~sg,zh,GMT]", string0);
  }
}
