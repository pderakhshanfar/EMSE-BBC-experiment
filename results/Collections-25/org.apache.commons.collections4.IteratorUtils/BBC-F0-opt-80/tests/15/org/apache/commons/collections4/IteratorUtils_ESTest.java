/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 04:10:10 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[8];
      StringTokenizer stringTokenizer0 = new StringTokenizer("A'$", "A'$");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("org.apache.commons.collections4.functors.AndPredicate", "");
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("~C", "^Y*=,");
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("");
      stringTokenizerArray0[3] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = new StringTokenizer("A'$");
      stringTokenizerArray0[4] = stringTokenizer4;
      StringTokenizer stringTokenizer5 = new StringTokenizer("~C");
      stringTokenizerArray0[5] = stringTokenizer5;
      StringTokenizer stringTokenizer6 = new StringTokenizer("5[F");
      stringTokenizerArray0[7] = stringTokenizer6;
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.arrayIterator(stringTokenizerArray0);
      List<StringTokenizer> list0 = IteratorUtils.toList((Iterator<? extends StringTokenizer>) resettableIterator0, 93);
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      SQLWarning sQLWarning0 = new SQLWarning();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLWarning0);
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) resettableListIterator0, (Predicate<? super StringTokenizer>) predicate0);
      // Undeclared exception!
      IteratorUtils.get((Iterator<StringTokenizer>) listIterator0, 8);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(linkedList0);
      SQLDataException sQLDataException0 = new SQLDataException("");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("4L6<Pb", (String) null, sQLDataException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLNonTransientException0);
      loopingListIterator0.add(sQLTransientConnectionException0);
      // Undeclared exception!
      IteratorUtils.size(loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) arrayDeque0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator((SQLNonTransientConnectionException) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) anyPredicate0);
      predicateArray0[0] = predicate1;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(anyPredicate0);
      predicateArray0[1] = (Predicate<Object>) notPredicate0;
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicateArray0[1], notPredicate0);
      Predicate<Object> predicate2 = OrPredicate.orPredicate((Predicate<? super Object>) orPredicate0, (Predicate<? super Object>) notPredicate0);
      predicateArray0[2] = predicate2;
      Predicate<Object> predicate3 = UniquePredicate.uniquePredicate();
      predicateArray0[3] = predicate3;
      Predicate<Object> predicate4 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      Transformer<Object, Properties> transformer0 = ConstantTransformer.nullTransformer();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate2, transformerClosure0, transformerClosure0);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate2, ifClosure0, false);
      Closure<Object> closure0 = IfClosure.ifClosure((Predicate<? super Object>) predicate4, (Closure<? super Object>) whileClosure0, (Closure<? super Object>) ifClosure0);
      // Undeclared exception!
      IteratorUtils.apply((Iterator<SQLNonTransientConnectionException>) resettableIterator0, (Closure<? super SQLNonTransientConnectionException>) closure0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ux%QSG]0UgMJ!");
      Vector<Properties> vector0 = new Vector<Properties>();
      vector0.ensureCapacity(0);
      Properties properties0 = new Properties();
      vector0.add(properties0);
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Properties>) vector0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) orderedMapIterator0, (Class<SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) orderedIterator0, class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("XU~K", "<^6_P_pL", 959);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.singletonIterator(sQLSyntaxErrorException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>((Predicate<? super Object>) null);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(nullIsTruePredicate0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(nullIsFalsePredicate0, (Predicate<? super Object>) null);
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) orPredicate0);
      predicateArray0[0] = predicate0;
      AllPredicate<SQLSyntaxErrorException> allPredicate0 = new AllPredicate<SQLSyntaxErrorException>(predicateArray0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Predicate<? super SQLSyntaxErrorException>) allPredicate0);
      Iterator<SQLSyntaxErrorException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLSyntaxErrorException>) iterator1, (long) 959, (long) 959);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NullIsTruePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[10];
      IteratorUtils.arrayIterator(stringTokenizerArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      Transformer<SQLException, SQLInvalidAuthorizationSpecException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object object0 = new Object();
      int[] intArray0 = new int[7];
      intArray0[0] = 2422;
      intArray0[1] = 518;
      intArray0[2] = 518;
      intArray0[3] = 2933;
      intArray0[4] = 518;
      intArray0[5] = 518;
      intArray0[6] = 518;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLException sQLException0 = new SQLException(sQLTransactionRollbackException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Enumeration must not be null", "Enumeration must not be null", 518, batchUpdateException0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(uniquePredicate0, uniquePredicate0);
      Transformer<Object, SQLTransientConnectionException> transformer0 = ExceptionTransformer.exceptionTransformer();
      IfTransformer<Object, SQLTransientConnectionException> ifTransformer0 = new IfTransformer<Object, SQLTransientConnectionException>(orPredicate0, transformer0, transformer0);
      Iterator<SQLTransientException> iterator0 = IteratorUtils.objectGraphIterator((SQLTransientException) sQLTransientConnectionException0, (Transformer<? super SQLTransientException, ? extends SQLTransientException>) ifTransformer0);
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) iterator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedList<InputStream> linkedList0 = new LinkedList<InputStream>();
      ResettableListIterator<InputStream> resettableListIterator0 = IteratorUtils.loopingListIterator((List<InputStream>) linkedList0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      linkedList0.add((InputStream) sequenceInputStream0);
      ListIterator<InputStream> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<InputStream>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends InputStream>) listIterator0, 1059L, 1059L);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      Iterator<?> iterator0 = IteratorUtils.getIterator(class0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-125);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) equalPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<HashSet<Predicate>>) iterator0, (Predicate<? super HashSet<Predicate>>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.EqualPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      String string0 = "Hgt7";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Hgt7", "", 125);
      DataTruncation dataTruncation0 = new DataTruncation(1357, true, true, 1357, 2780, sQLNonTransientConnectionException0);
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.singletonListIterator((SQLWarning) dataTruncation0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLWarning>) listIterator0, 1073741817);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      OrderedMapIterator<SequenceInputStream, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SequenceInputStream, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SequenceInputStream, ? extends SQLException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SequenceInputStream>) orderedMapIterator1, (Transformer<? super SequenceInputStream, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ListIterator<Integer> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Integer>) listIterator0, (Transformer<? super Integer, String>) null, "", "#&G95wk3+Se17:O@q", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      IteratorUtils.getIterator("'+$5iBf.zC}Nt5$p");
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("#hPA+)D~;Li-c", ":");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "#hPA+)D~;Li-c", 36, sQLTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(":", sQLFeatureNotSupportedException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("'+$5iBf.zC}Nt5$p", ":", sQLFeatureNotSupportedException1);
      arrayList0.add(sQLNonTransientConnectionException0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) arrayList0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("3tpC'F");
      Transformer<StringTokenizer, StringTokenizer> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      IteratorUtils.emptyIterator();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "bV3Kf_J^fa/*p#^\"'9`";
      stringArray0[1] = "Mo9";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0, 0);
      Closure<String> closure0 = ExceptionClosure.exceptionClosure();
      ClosureTransformer<String> closureTransformer0 = new ClosureTransformer<String>(closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<String>) resettableIterator0, (Transformer<? super String, String>) closureTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Stack<SequenceInputStream> stack0 = new Stack<SequenceInputStream>();
      ResettableListIterator<SequenceInputStream> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<SequenceInputStream> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SequenceInputStream>) resettableListIterator0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      stack0.add(sequenceInputStream0);
      LoopingIterator<SequenceInputStream> loopingIterator0 = new LoopingIterator<SequenceInputStream>(stack0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends InputStream>) loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "";
      int int0 = 1249;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 1249);
      Transformer<Object, SQLRecoverableException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("]<(S$|R:UqM`Rx4Ts");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[3];
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.arrayIterator(stringTokenizerArray0);
      StringTokenizer stringTokenizer0 = IteratorUtils.get((Iterator<StringTokenizer>) resettableIterator0, 0);
      assertNull(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Iterator<StringTokenizer> iterator0 = null;
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>((Predicate<? super Object>) null);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Properties>) nullIsTruePredicate0);
      IteratorUtils.getIterator((Object) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "");
      IteratorUtils.singletonListIterator(sQLTransactionRollbackException0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) listIterator0, (Predicate<? super SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringTokenizer stringTokenizer0 = new StringTokenizer(", ", ", ");
      IteratorUtils.getIterator(stringTokenizer0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[4];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("end", "", 1116);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLInvalidAuthorizationSpecException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("Transformer must not be null", "The predicate array must not contain a null predicate, index ", 671, sQLNonTransientException0);
      SQLException sQLException0 = new SQLException(", ", "Transformer must not be null", 1254, sQLTransientException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException(sQLException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      BoundedIterator<SQLIntegrityConstraintViolationException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayListIterator0, (long) 1254, (long) 1116);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[3];
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("l+S8xy,..E{:ZQ");
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("", "", false);
      stringTokenizerArray0[2] = stringTokenizer2;
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.arrayIterator(stringTokenizerArray0);
      StringTokenizer stringTokenizer3 = IteratorUtils.get((Iterator<StringTokenizer>) resettableIterator0, 0);
      assertEquals(0, stringTokenizer3.countTokens());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, ArrayList<ClientInfoStatus>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLWarning>) null, (Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>(hashSet0);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Object>) null, (Predicate<? super Object>) nullIsFalsePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, ArrayList<ClientInfoStatus>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLRecoverableException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      IteratorUtils.toString((Iterator<StringTokenizer>) null);
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties0);
      Transformer<Properties, Integer> transformer0 = InvokerTransformer.invokerTransformer("Offset parameter must not be negative.");
      Iterator<Integer> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Properties>) resettableIterator0, (Transformer<? super Properties, ? extends Integer>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.contains(iterator0, (Object) "Offset parameter must not be negative.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Offset parameter must not be negative.' on 'class java.util.Properties' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = (-1481);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      Integer integer0 = new Integer((-1481));
      Iterator<?> iterator0 = IteratorUtils.getIterator(integer0);
      IteratorUtils.emptyIterator();
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(iterator0);
      listIteratorWrapper0.nextIndex();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>((Predicate<? super Object>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Object>) listIteratorWrapper0, (Predicate<? super Object>) notPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NotPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Closure<SQLException> closure1 = IfClosure.ifClosure((Predicate<? super SQLException>) predicate0, (Closure<? super SQLException>) closure0);
      IteratorUtils.apply((Iterator<SQLNonTransientConnectionException>) null, (Closure<? super SQLNonTransientConnectionException>) closure1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Tp", "Tp");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLSyntaxErrorException0);
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Transformer<Object, SQLDataException> transformer0 = InvokerTransformer.invokerTransformer("qXe7'rfXx-l|Xo!eE|v");
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLNonTransientConnectionException>) singletonListIterator0, (Closure<? super SQLNonTransientConnectionException>) transformerClosure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'qXe7'rfXx-l|Xo!eE|v' on 'class java.sql.SQLNonTransientConnectionException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 1;
      DataTruncation dataTruncation0 = new DataTruncation(1, true, true, 1, (-620), (Throwable) null);
      Transformer<DataTruncation, DataTruncation> transformer0 = CloneTransformer.cloneTransformer();
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0, (Collection<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.map.AbstractLinkedMap$KeySetIterator", "org.apache.commons.collections4.map.AbstractLinkedMap$KeySetIterator");
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLSyntaxErrorException0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      MapIterator<StringTokenizer, SQLDataException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<StringTokenizer>) mapIterator0, (Predicate<? super StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) resettableListIterator0, (Predicate<? super BatchUpdateException>) uniquePredicate0);
      FactoryTransformer<Object, IIOMetadataNode> factoryTransformer0 = new FactoryTransformer<Object, IIOMetadataNode>((Factory<? extends IIOMetadataNode>) null);
      Transformer<Object, IIOMetadataNode> transformer0 = IfTransformer.ifTransformer((Predicate<? super Object>) uniquePredicate0, (Transformer<? super Object, ? extends IIOMetadataNode>) factoryTransformer0, (Transformer<? super Object, ? extends IIOMetadataNode>) factoryTransformer0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Entry does not exist: ", "Entry does not exist: ", 10);
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0, false);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLNonTransientConnectionException>) singletonIterator0, (Closure<? super SQLNonTransientConnectionException>) transformerClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, Predicate<Object>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<SQLTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) mapIterator0);
      Vector<SQLTransientException> vector0 = new Vector<SQLTransientException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) enumeration0, (Collection<? super SQLTransientConnectionException>) vector0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) mapIterator0, class0);
      assertEquals(0, sQLTransientConnectionExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Vector<Object> vector0 = new Vector<Object>();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      int[] intArray0 = new int[5];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 4;
      intArray0[4] = (-4447);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException();
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 3);
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      predicateArray0[0] = predicate0;
      Vector<Predicate<Object>> vector1 = new Vector<Predicate<Object>>();
      Predicate<SQLException> predicate1 = AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLException>>) vector1);
      predicateArray0[1] = predicate1;
      AndPredicate<SQLException> andPredicate0 = new AndPredicate<SQLException>(predicate0, predicate1);
      predicateArray0[2] = (Predicate<SQLException>) andPredicate0;
      OnePredicate<SQLException> onePredicate0 = new OnePredicate<SQLException>(predicateArray0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) resettableListIterator0, (Predicate<? super BatchUpdateException>) onePredicate0);
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(listIterator0);
      Hashtable<Object, Boolean> hashtable0 = new Hashtable<Object, Boolean>();
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) hashtable0);
      Predicate<Object> predicate2 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      Predicate<Object> predicate3 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate2);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Object>) listIteratorWrapper0, (Predicate<? super Object>) predicate3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MapIterator<StringTokenizer, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<StringTokenizer>) mapIterator0, (Predicate<? super StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.singletonIterator((SQLNonTransientConnectionException) null);
      int int0 = 31;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((StringTokenizer[]) null, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.iterators.CollatingIterator", hashtable0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException0;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      ListIteratorWrapper<SQLClientInfoException> listIteratorWrapper0 = new ListIteratorWrapper<SQLClientInfoException>(resettableIterator0);
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      PriorityQueue<SQLClientInfoException> priorityQueue1 = new PriorityQueue<SQLClientInfoException>();
      priorityQueue1.iterator();
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) listIteratorWrapper0;
      iteratorArray0[1] = (Iterator<SQLClientInfoException>) listIteratorWrapper0;
      iteratorArray0[3] = (Iterator<SQLClientInfoException>) resettableIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IteratorUtils.singletonIterator((SQLNonTransientConnectionException) null);
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) null);
      Properties[] propertiesArray0 = new Properties[1];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) resettableIterator0);
      LoopingListIterator<Properties> loopingListIterator0 = new LoopingListIterator<Properties>(list0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      ListIterator<Properties> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) loopingListIterator0, (Predicate<? super Properties>) predicate0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      Transformer<Properties, String> transformer0 = InvokerTransformer.invokerTransformer("[]", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<Properties>) listIterator0, (Transformer<? super Properties, String>) transformer0, "G.vm+:", "", "");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, class0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("L6^<T[MhJBj");
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<String>) singletonListIterator0, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      IfClosure<SQLException> ifClosure0 = new IfClosure<SQLException>(predicate0, (Closure<? super SQLException>) null);
      ForClosure.forClosure(1942, (Closure<? super SQLException>) ifClosure0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator((SQLNonTransientConnectionException) null);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLNonTransientConnectionException>) resettableIterator0, (Closure<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      LinkedList<StringTokenizer> linkedList0 = new LinkedList<StringTokenizer>();
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) linkedList0);
      int int0 = 11;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) resettableIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("TES#l\"j", (String) null, (Map<String, ClientInfoStatus>) null);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>((Predicate<? super Object>) null);
      Hashtable<Object, SQLClientInfoException> hashtable0 = new Hashtable<Object, SQLClientInfoException>();
      Transformer<Object, SQLClientInfoException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLClientInfoException>) hashtable0);
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 6);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      classArray0[0] = class0;
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      classArray0[1] = class1;
      Class<SQLInvalidAuthorizationSpecException> class2 = SQLInvalidAuthorizationSpecException.class;
      classArray0[2] = class2;
      Class<SQLInvalidAuthorizationSpecException> class3 = SQLInvalidAuthorizationSpecException.class;
      classArray0[3] = class3;
      Class<SQLInvalidAuthorizationSpecException> class4 = SQLInvalidAuthorizationSpecException.class;
      classArray0[4] = class4;
      Class<SQLInvalidAuthorizationSpecException> class5 = SQLInvalidAuthorizationSpecException.class;
      classArray0[5] = class5;
      Transformer<Object, SQLClientInfoException> transformer1 = InvokerTransformer.invokerTransformer("]<", (Class<?>[]) classArray0, (Object[]) classArray0);
      Transformer<Object, SQLClientInfoException> transformer2 = IfTransformer.ifTransformer((Predicate<? super Object>) nullIsTruePredicate0, (Transformer<? super Object, ? extends SQLClientInfoException>) transformer0, (Transformer<? super Object, ? extends SQLClientInfoException>) transformer1);
      IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer2);
      Transformer<SQLException, String> transformer3 = InvokerTransformer.invokerTransformer("]<", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.toString((Iterator<SQLRecoverableException>) null, (Transformer<? super SQLRecoverableException, String>) transformer3, "TES#l\"j", "3~U/Z:4A#", "org.apache.commons.collections4.functors.FactoryTransformer");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      Integer integer0 = new Integer((-1481));
      Iterator<?> iterator0 = IteratorUtils.getIterator(integer0);
      IteratorUtils.emptyIterator();
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(iterator0);
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Object>) listIteratorWrapper0, (Predicate<? super Object>) predicate0);
      assertTrue(listIteratorWrapper0.hasPrevious());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "Ku0FqXy7uM`LE";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ku0FqXy7uM`LE");
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[0];
      IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, (-4297));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ArrayList<ArrayDeque<Closure<Object>>> arrayList0 = new ArrayList<ArrayDeque<Closure<Object>>>();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      Integer integer0 = new Integer((-480));
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      IteratorUtils.getIterator(locale_FilteringMode0);
      IteratorUtils.emptyIterator();
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>((SQLRecoverableException) null);
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("3~U/Z:4A#");
      String string0 = IteratorUtils.toString((Iterator<SQLRecoverableException>) singletonListIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0, "", "", "3~U/Z:4A#");
      assertEquals("null3~U/Z:4A#", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, Predicate<Object>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) mapIterator0, class0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.allOf(class1);
      ResettableIterator<EnumSet<ClientInfoStatus>> resettableIterator0 = IteratorUtils.singletonIterator(enumSet0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) resettableIterator0, comparator0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.find((Iterator<EnumSet<ClientInfoStatus>>) resettableIterator0, (Predicate<? super EnumSet<ClientInfoStatus>>) predicate1);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 6);
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      predicateArray1[0] = predicate1;
      predicateArray1[1] = predicate0;
      predicateArray1[2] = predicate0;
      predicateArray1[3] = predicate1;
      predicateArray1[4] = predicate1;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray1);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      ClosureTransformer<Object> closureTransformer0 = new ClosureTransformer<Object>(chainedClosure0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) closureTransformer0);
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) allPredicate0, (Closure<? super Object>) closure0, (Closure<? super Object>) closure0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, closure1);
      closureArray0[0] = (Closure<Object>) ifClosure0;
      Closure<Object> closure2 = NOPClosure.nopClosure();
      closureArray0[1] = closure2;
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(closureTransformer0);
      closureArray0[2] = (Closure<Object>) transformerClosure0;
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, closureArray0, closure2);
      closureArray0[3] = (Closure<Object>) switchClosure0;
      Closure<Object> closure3 = WhileClosure.whileClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) ifClosure0, false);
      closureArray0[4] = closure3;
      HashSet<Closure<Object>> hashSet0 = new HashSet<Closure<Object>>();
      Closure<Object> closure4 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) hashSet0);
      closureArray0[5] = closure4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(closureArray0, (-3426), 2316);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      Integer integer0 = new Integer((-1481));
      IteratorUtils.getIterator(integer0);
      IteratorUtils.emptyIterator();
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      int[] intArray0 = new int[9];
      intArray0[0] = (-1481);
      intArray0[1] = 0;
      intArray0[2] = 100;
      intArray0[3] = (-1481);
      intArray0[4] = (-1481);
      intArray0[5] = (-1481);
      intArray0[6] = (-1481);
      intArray0[7] = (-1481);
      intArray0[8] = (-1481);
      DataTruncation dataTruncation0 = new DataTruncation(100, false, true, 2903, 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, dataTruncation0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1481)).when(comparator0).compare(any(java.sql.SQLException.class) , any(java.sql.SQLException.class));
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) batchUpdateException0, comparator0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      ObjectArrayIterator<SQLSyntaxErrorException> objectArrayIterator0 = new ObjectArrayIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) objectArrayIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      MapIterator<Integer, Iterator<SQLInvalidAuthorizationSpecException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(arrayList0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      arrayList0.add(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) loopingListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      Integer integer0 = new Integer((-1481));
      IteratorUtils.getIterator(integer0);
      IteratorUtils.emptyIterator();
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      int[] intArray0 = new int[9];
      intArray0[0] = (-1481);
      intArray0[1] = 0;
      intArray0[2] = 100;
      intArray0[3] = (-1481);
      intArray0[4] = (-1481);
      intArray0[5] = (-1481);
      intArray0[6] = (-1481);
      intArray0[7] = (-1481);
      intArray0[8] = (-1481);
      DataTruncation dataTruncation0 = new DataTruncation(100, false, true, 2903, 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, dataTruncation0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.sql.SQLException.class) , any(java.sql.SQLException.class));
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) batchUpdateException0, comparator0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      ObjectArrayIterator<SQLSyntaxErrorException> objectArrayIterator0 = new ObjectArrayIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) objectArrayIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      MapIterator<Integer, Iterator<SQLInvalidAuthorizationSpecException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      Integer integer0 = new Integer((-1481));
      IteratorUtils.getIterator(integer0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("TES#l\"j", (String) null, (Map<String, ClientInfoStatus>) null);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>((Predicate<? super Object>) null);
      Hashtable<Object, SQLClientInfoException> hashtable0 = new Hashtable<Object, SQLClientInfoException>();
      Transformer<Object, SQLClientInfoException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLClientInfoException>) hashtable0);
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 6);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      classArray0[0] = class0;
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      classArray0[1] = class1;
      Class<SQLInvalidAuthorizationSpecException> class2 = SQLInvalidAuthorizationSpecException.class;
      classArray0[2] = class2;
      Class<SQLInvalidAuthorizationSpecException> class3 = SQLInvalidAuthorizationSpecException.class;
      classArray0[3] = class3;
      Class<SQLInvalidAuthorizationSpecException> class4 = SQLInvalidAuthorizationSpecException.class;
      classArray0[4] = class4;
      Class<SQLInvalidAuthorizationSpecException> class5 = SQLInvalidAuthorizationSpecException.class;
      classArray0[5] = class5;
      Transformer<Object, SQLClientInfoException> transformer1 = InvokerTransformer.invokerTransformer("]<", (Class<?>[]) classArray0, (Object[]) classArray0);
      Transformer<Object, SQLClientInfoException> transformer2 = IfTransformer.ifTransformer((Predicate<? super Object>) nullIsTruePredicate0, (Transformer<? super Object, ? extends SQLClientInfoException>) transformer0, (Transformer<? super Object, ? extends SQLClientInfoException>) transformer1);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer2);
      iteratorArray0[0] = iterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      Vector<Object> vector0 = new Vector<Object>(422);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) null, (Collection<? super SQLNonTransientException>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) arrayList0);
      IteratorUtils.contains((Iterator<Locale.FilteringMode>) resettableListIterator0, (Object) resettableListIterator0);
      OrderedMapIterator<SQLSyntaxErrorException, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, Object>(orderedMapIterator0);
      MapIterator<SQLSyntaxErrorException, Object> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, Object>) abstractOrderedMapIteratorDecorator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) sQLSyntaxErrorException0, comparator0);
      IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) mapIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      MapIterator<Integer, Iterator<SQLInvalidAuthorizationSpecException>> mapIterator1 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      OrderedMapIterator<ArrayDeque<SQLFeatureNotSupportedException>, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("oC)niXtbLeY5Q`!", "oC)niXtbLeY5Q`!", false);
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      IteratorUtils.matchesAll((Iterator<StringTokenizer>) singletonListIterator0, (Predicate<? super StringTokenizer>) predicate0);
      IteratorUtils.size(orderedMapIterator0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      String string0 = IteratorUtils.toString((Iterator<SQLRecoverableException>) resettableIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0, "3~U/Z:4A#", "Array class must not be null", "org.apache.commons.collections4.functors.AllPredicate");
      assertEquals("Array class must not be nullorg.apache.commons.collections4.functors.AllPredicate", string0);
      
      IteratorUtils.getIterator("3~U/Z:4A#");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) "Array class must not be null");
      predicateArray0[1] = predicate0;
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, uniquePredicate0);
      predicateArray0[2] = (Predicate<Object>) andPredicate0;
      AllPredicate<SQLException> allPredicate0 = new AllPredicate<SQLException>(predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<BatchUpdateException>) resettableListIterator0, (Predicate<? super BatchUpdateException>) allPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      InvokerTransformer<Object, SQLTransientConnectionException> invokerTransformer0 = new InvokerTransformer<Object, SQLTransientConnectionException>("5c.g6", (Class<?>[]) null, (Object[]) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("5c.g6", "5c.g6");
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("5c.g6", sQLRecoverableException0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.objectGraphIterator(sQLRecoverableException1, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) null);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) null, (Object[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLRecoverableException, String>) transformer0, ")TKeV VCD", "underlying nodeList has no more elements", "underlying nodeList has no more elements");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLRecoverableException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      Integer integer0 = new Integer((-1481));
      IteratorUtils.getIterator(integer0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLException>) resettableIterator0, (Transformer<? super SQLException, ? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator((Object[]) sQLNonTransientConnectionExceptionArray0, 0);
      IteratorUtils.isEmpty(resettableIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      ResettableListIterator<Closure<Object>> resettableListIterator0 = IteratorUtils.arrayListIterator(closureArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Closure<Object>>) resettableListIterator0, 1L, (-336L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) resettableListIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(listIterator0);
      ListIteratorWrapper<Object> listIteratorWrapper1 = new ListIteratorWrapper<Object>(listIteratorWrapper0);
      IteratorUtils.matchesAny((Iterator<Object>) listIteratorWrapper1, (Predicate<? super Object>) predicate0);
      MapIterator<Closure<Object>, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      BoundedIterator<Closure<Object>> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Closure<Object>>) mapIterator0, 1743L, 1743L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ArrayList<ArrayDeque<Closure<Object>>> arrayList0 = new ArrayList<ArrayDeque<Closure<Object>>>();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) resettableListIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(orderedMapIterator0);
      String string0 = "]LHh6zu7av^X";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("]LHh6zu7av^X", "", 12);
      ConstantTransformer<Object, SQLTimeoutException> constantTransformer0 = new ConstantTransformer<Object, SQLTimeoutException>(sQLTimeoutException0);
      IfTransformer<Object, SQLTimeoutException> ifTransformer0 = new IfTransformer<Object, SQLTimeoutException>(predicate0, constantTransformer0, constantTransformer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate0;
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      Transformer<Object, SQLException> transformer0 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate1, (Transformer<? super Object, ? extends SQLException>) constantTransformer0, (Transformer<? super Object, ? extends SQLException>) ifTransformer0);
      Iterator<SQLException> iterator0 = IteratorUtils.objectGraphIterator((SQLException) null, (Transformer<? super SQLException, ? extends SQLException>) transformer0);
      Transformer<Object, String> transformer1 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString(iterator0, (Transformer<? super SQLException, String>) transformer1, "<3.GZ?_R_X", "", "<3.GZ?_R_X");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) class0, (-1964), 1764);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LinkedList<LinkedHashSet<DataTruncation>> linkedList0 = new LinkedList<LinkedHashSet<DataTruncation>>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) iterator0, class0);
      IteratorUtils.singletonListIterator((BatchUpdateException) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("ListIterator must not be null");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransactionRollbackException0);
      IteratorUtils.getIterator(sQLFeatureNotSupportedException0);
      Transformer<Object, SQLTimeoutException> transformer0 = ExceptionTransformer.exceptionTransformer();
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>(arrayList0);
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      Transformer<Object, SQLTimeoutException> transformer1 = ConstantTransformer.nullTransformer();
      IfTransformer<Object, SQLTimeoutException> ifTransformer0 = new IfTransformer<Object, SQLTimeoutException>(predicate0, transformer0, transformer1);
      Transformer<Object, SQLException> transformer2 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends SQLException>) transformer0, (Transformer<? super Object, ? extends SQLException>) ifTransformer0);
      Iterator<SQLException> iterator1 = IteratorUtils.objectGraphIterator((SQLException) null, (Transformer<? super SQLException, ? extends SQLException>) transformer2);
      StringValueTransformer.stringValueTransformer();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("<3.G)?~R_X");
      Transformer<Object, String> transformer3 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator1, (Transformer<? super SQLException, String>) transformer3, (String) null, "", "oGD[kP$p0+_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, Predicate<Object>> mapIterator0 = IteratorUtils.emptyMapIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      MapIterator<SQLNonTransientConnectionException, Vector<EnumSet>> mapIterator1 = IteratorUtils.emptyMapIterator();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) mapIterator1, 1670L);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) mapIterator1, class0);
      IteratorUtils.singletonListIterator((BatchUpdateException) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("delimiter may not be null");
      IteratorUtils.getIterator(mapIterator0);
      Transformer<Object, SQLTimeoutException> transformer0 = ExceptionTransformer.exceptionTransformer();
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      IfTransformer<Object, SQLTimeoutException> ifTransformer0 = new IfTransformer<Object, SQLTimeoutException>(predicate0, transformer0, transformer0);
      IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends SQLException>) ifTransformer0, (Transformer<? super Object, ? extends SQLException>) transformer0);
      Iterator<SQLException> iterator0 = IteratorUtils.objectGraphIterator((SQLException) sQLTransactionRollbackException0, (Transformer<? super SQLException, ? extends SQLException>) transformer0);
      Transformer<Object, String> transformer1 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLException, String>) transformer1, (String) null, "", "DOLBa%KPJ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedList<LinkedHashSet<DataTruncation>> linkedList0 = new LinkedList<LinkedHashSet<DataTruncation>>();
      ResettableListIterator<LinkedHashSet<DataTruncation>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<LinkedHashSet<DataTruncation>>) linkedList0);
      IteratorUtils.unmodifiableListIterator((ListIterator<LinkedHashSet<DataTruncation>>) resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Integer integer0 = new Integer(4);
      IteratorUtils.getIterator(integer0);
      IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Integer integer0 = new Integer((-2234));
      IteratorUtils.getIterator(integer0);
      IteratorUtils.emptyListIterator();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      String string0 = IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) null, (Transformer<? super SQLNonTransientConnectionException, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedList<LinkedHashSet<DataTruncation>> linkedList0 = new LinkedList<LinkedHashSet<DataTruncation>>();
      ResettableListIterator<LinkedHashSet<DataTruncation>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<LinkedHashSet<DataTruncation>>) linkedList0);
      IteratorUtils.unmodifiableListIterator((ListIterator<LinkedHashSet<DataTruncation>>) resettableListIterator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[7];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode(";<s1N^|i");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode1;
      StringTokenizer stringTokenizer0 = new StringTokenizer(";essN^|i", "CiC3");
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.singletonListIterator(stringTokenizer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<StringTokenizer>) listIterator0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) vector0);
      IteratorUtils.getIterator(resettableListIterator0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      ForClosure.forClosure((-1481), (Closure<? super SQLException>) closure0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((IIOMetadataNode[]) null, 470, (-195));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      EmptyOrderedIterator.emptyOrderedIterator();
      MapIterator<SQLNonTransientConnectionException, Vector<EnumSet>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0, 1670L);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0, class0);
      IteratorUtils.singletonListIterator((BatchUpdateException) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("ListIterator must not be null");
      IteratorUtils.getIterator(sQLTransactionRollbackException0);
      Transformer<Object, SQLTimeoutException> transformer0 = ExceptionTransformer.exceptionTransformer();
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      IfTransformer<Object, SQLTimeoutException> ifTransformer0 = new IfTransformer<Object, SQLTimeoutException>(predicate0, transformer0, transformer0);
      IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends SQLException>) ifTransformer0, (Transformer<? super Object, ? extends SQLException>) transformer0);
      Iterator<SQLException> iterator0 = IteratorUtils.objectGraphIterator((SQLException) null, (Transformer<? super SQLException, ? extends SQLException>) ifTransformer0);
      Transformer<Object, String> transformer1 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString(iterator0, (Transformer<? super SQLException, String>) transformer1, "<3.G)?~R_X", "", "");
      int int0 = 7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) class0, (-2128), 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("S&Yuz~`&", "S&Yuz~`&");
      sQLNonTransientConnectionException0.getStackTrace();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Hashtable<Object, BatchUpdateException> hashtable0 = new Hashtable<Object, BatchUpdateException>(8, 8);
      Transformer<Object, BatchUpdateException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends BatchUpdateException>) hashtable0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      hashtable0.put(predicate0, batchUpdateException0);
      IfTransformer<Object, BatchUpdateException> ifTransformer0 = new IfTransformer<Object, BatchUpdateException>(predicate0, transformer0, transformer0);
      IfTransformer.ifTransformer((Predicate<? super SQLException>) predicate0, (Transformer<? super SQLException, ? extends SQLException>) ifTransformer0, (Transformer<? super SQLException, ? extends SQLException>) ifTransformer0);
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      ReverseListIterator<SQLNonTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLNonTransientConnectionException>(vector0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, 0L);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      vector0.add(sQLNonTransientConnectionException1);
      Transformer<Object, String> transformer1 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) resettableIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) transformer1);
      EmptyMapIterator.emptyMapIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = predicate0;
      Closure<SQLException>[] closureArray0 = (Closure<SQLException>[]) Array.newInstance(Closure.class, 8);
      Closure<SQLException> closure0 = NOPClosure.nopClosure();
      closureArray0[0] = closure0;
      Closure<SQLException> closure1 = IfClosure.ifClosure((Predicate<? super SQLException>) predicate0, (Closure<? super SQLException>) closure0, (Closure<? super SQLException>) closure0);
      closureArray0[1] = closure1;
      Closure<Object> closure2 = NOPClosure.nopClosure();
      Closure<Object> closure3 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer1);
      IfClosure<SQLException> ifClosure0 = new IfClosure<SQLException>(predicate0, closure2, closure3);
      closureArray0[2] = (Closure<SQLException>) ifClosure0;
      WhileClosure<SQLException> whileClosure0 = new WhileClosure<SQLException>(predicate0, closureArray0[2], true);
      closureArray0[3] = (Closure<SQLException>) whileClosure0;
      Closure<SQLException>[] closureArray1 = (Closure<SQLException>[]) Array.newInstance(Closure.class, 2);
      closureArray1[0] = closure0;
      closureArray1[1] = (Closure<SQLException>) ifClosure0;
      Closure<SQLException> closure4 = ChainedClosure.chainedClosure((Closure<? super SQLException>[]) closureArray1);
      closureArray0[4] = closure4;
      Closure<Object> closure5 = ForClosure.forClosure(1942, (Closure<? super Object>) closure2);
      Closure<SQLException> closure6 = IfClosure.ifClosure((Predicate<? super SQLException>) predicate0, (Closure<? super SQLException>) closure5);
      closureArray0[5] = closure6;
      IfClosure<SQLException> ifClosure1 = new IfClosure<SQLException>(predicate0, closure6);
      closureArray0[6] = (Closure<SQLException>) ifClosure1;
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      Closure<SQLException> closure7 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super SQLException>>) linkedList0);
      closureArray0[7] = closure7;
      IfClosure<SQLException> ifClosure2 = new IfClosure<SQLException>(predicate0, closureArray0[2]);
      // Undeclared exception!
      try { 
        SwitchClosure.switchClosure((Predicate<? super SQLException>[]) predicateArray0, (Closure<? super SQLException>[]) closureArray0, (Closure<? super SQLException>) ifClosure2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate and closure arrays must be the same size
         //
         verifyException("org.apache.commons.collections4.functors.SwitchClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      ListIterator<Locale.FilteringMode> listIterator0 = IteratorUtils.singletonListIterator(locale_FilteringMode0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, Boolean> factoryTransformer0 = new FactoryTransformer<Object, Boolean>((Factory<? extends Boolean>) null);
      TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) factoryTransformer0);
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) anyPredicate0);
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate1);
      OnePredicate<Locale.FilteringMode> onePredicate0 = new OnePredicate<Locale.FilteringMode>((Predicate<? super Locale.FilteringMode>[]) null);
      NotPredicate<Locale.FilteringMode> notPredicate0 = new NotPredicate<Locale.FilteringMode>(instanceofPredicate0);
      ListIterator<Locale.FilteringMode> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends Locale.FilteringMode>) listIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Locale.FilteringMode>) listIterator1, (Predicate<? super Locale.FilteringMode>) predicate1);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      EmptyOrderedIterator.emptyOrderedIterator();
      MapIterator<SQLNonTransientConnectionException, Vector<EnumSet>> mapIterator0 = IteratorUtils.emptyMapIterator();
      BoundedIterator<SQLNonTransientConnectionException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0, 1670L);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0, class0);
      IteratorUtils.singletonListIterator((BatchUpdateException) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("ListIterator must not be null");
      IteratorUtils.getIterator(sQLTransactionRollbackException0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      Closure<SQLException> closure1 = ForClosure.forClosure((-1481), (Closure<? super SQLException>) closure0);
      IteratorUtils.apply((Iterator<SQLNonTransientConnectionException>) boundedIterator0, (Closure<? super SQLNonTransientConnectionException>) closure1);
      OrderedMapIterator<SQLTimeoutException, Transformer<Object, String>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, Transformer<Object, String>> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends Transformer<Object, String>>) orderedMapIterator0);
      BoundedIterator<SQLTimeoutException> boundedIterator1 = IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator1, 1670L);
      assertNotNull(boundedIterator1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      stack0.add(iIOMetadataNode0);
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(stack0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) reverseListIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) null, (Iterator<? extends SQLWarning>) null, (Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedList<LinkedHashSet<DataTruncation>> linkedList0 = new LinkedList<LinkedHashSet<DataTruncation>>();
      ListIterator<SQLNonTransientException> listIterator0 = EmptyListIterator.emptyListIterator();
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 1);
      InvokerTransformer<Object, SQLTransientConnectionException> invokerTransformer0 = new InvokerTransformer<Object, SQLTransientConnectionException>("InstantiateTransformer: Input object was not an instanceof Class, it was a null object", classArray0, classArray0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLException>) listIterator0, (Transformer<? super SQLException, ? extends SQLException>) invokerTransformer0);
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      ReverseListIterator<SQLNonTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLNonTransientConnectionException>(vector0);
      BoundedIterator<SQLNonTransientConnectionException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) reverseListIterator0, 1535L);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      vector0.add(sQLNonTransientConnectionException0);
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      String string0 = IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) boundedIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException0;
      IteratorUtils.arrayIterator((Object[]) sQLNonTransientConnectionExceptionArray0, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      DataTruncation dataTruncation0 = new DataTruncation(0, true, false, 0, 0, sQLNonTransientConnectionExceptionArray0[1]);
      dataTruncationArray0[0] = dataTruncation0;
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      predicateArray0[0] = (Predicate<Object>) nullIsFalsePredicate0;
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      Predicate<Object> predicate2 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate1);
      Iterator<DataTruncation> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Predicate<? super DataTruncation>) predicate2);
      EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.size(iterator0);
      Iterator<SQLDataException> iterator1 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Integer integer0 = new Integer((-2238));
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      MapIterator<SQLNonTransientConnectionException, Vector<EnumSet>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0, 1670L);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0, class0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator((BatchUpdateException) null);
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<LinkedHashSet<DataTruncation>> linkedList0 = new LinkedList<LinkedHashSet<DataTruncation>>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      EmptyListIterator.emptyListIterator();
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate1);
      Predicate<Locale.FilteringMode>[] predicateArray0 = (Predicate<Locale.FilteringMode>[]) Array.newInstance(Predicate.class, 6);
      FactoryTransformer<Locale.FilteringMode, Boolean> factoryTransformer0 = new FactoryTransformer<Locale.FilteringMode, Boolean>((Factory<? extends Boolean>) null);
      Predicate<Locale.FilteringMode> predicate2 = TransformerPredicate.transformerPredicate((Transformer<? super Locale.FilteringMode, Boolean>) factoryTransformer0);
      predicateArray0[0] = predicate2;
      AndPredicate<Locale.FilteringMode> andPredicate0 = new AndPredicate<Locale.FilteringMode>(predicate0, predicate0);
      predicateArray0[1] = (Predicate<Locale.FilteringMode>) andPredicate0;
      AllPredicate<Locale.FilteringMode> allPredicate0 = new AllPredicate<Locale.FilteringMode>(predicateArray0);
      predicateArray0[2] = (Predicate<Locale.FilteringMode>) allPredicate0;
      AnyPredicate<Locale.FilteringMode> anyPredicate0 = new AnyPredicate<Locale.FilteringMode>(predicateArray0);
      predicateArray0[3] = (Predicate<Locale.FilteringMode>) anyPredicate0;
      Transformer<Object, Locale.FilteringMode> transformer0 = ExceptionTransformer.exceptionTransformer();
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(object0, comparator0, comparatorPredicate_Criterion0);
      Predicate<Locale.FilteringMode> predicate3 = TransformedPredicate.transformedPredicate((Transformer<? super Locale.FilteringMode, ? extends Locale.FilteringMode>) transformer0, (Predicate<? super Locale.FilteringMode>) comparatorPredicate0);
      predicateArray0[4] = predicate3;
      Predicate<Locale.FilteringMode> predicate4 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Locale.FilteringMode>>) hashSet0);
      predicateArray0[5] = predicate4;
      OnePredicate<Locale.FilteringMode> onePredicate0 = new OnePredicate<Locale.FilteringMode>(predicateArray0);
      Predicate<Object> predicate5 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      NotPredicate<Locale.FilteringMode> notPredicate0 = new NotPredicate<Locale.FilteringMode>(predicate5);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      ListIterator<Locale.FilteringMode> listIterator0 = IteratorUtils.singletonListIterator(locale_FilteringMode0);
      ListIterator<Locale.FilteringMode> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends Locale.FilteringMode>) listIterator0, (Predicate<? super Locale.FilteringMode>) predicate1);
      IteratorUtils.filteredIterator((Iterator<? extends Locale.FilteringMode>) listIterator1, (Predicate<? super Locale.FilteringMode>) predicate2);
      List<Locale.FilteringMode> list0 = IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) listIterator0);
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Locale.FilteringMode>) resettableListIterator0);
      IteratorUtils.contains(iterator0, (Object) locale_FilteringMode0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 4);
      OrderedMapIterator<Integer, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) orderedMapIterator0, (Iterator<? extends Integer>) orderedMapIterator0, (Iterator<? extends Integer>) orderedMapIterator0);
      Iterator<Integer> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends Integer>) zippingIterator0);
      iteratorArray0[0] = iterator1;
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-731));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-748));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(32);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-834));
      integerArray0[4] = integer4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, 0, (-3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("y");
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(singletonIterator0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) orPredicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Object>) listIteratorWrapper0, (Predicate<? super Object>) predicate1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      EmptyOrderedIterator.emptyOrderedIterator();
      MapIterator<SQLNonTransientConnectionException, Vector<EnumSet>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0, 1670L);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0, class0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator((BatchUpdateException) null);
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ArrayList<ArrayDeque<Closure<Object>>> arrayList0 = new ArrayList<ArrayDeque<Closure<Object>>>();
      EmptyListIterator.emptyListIterator();
      UniquePredicate<DataTruncation> uniquePredicate0 = new UniquePredicate<DataTruncation>();
      MapIterator<DataTruncation, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) mapIterator0, (Predicate<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      HashMap<Closure<Object>, Object> hashMap0 = new HashMap<Closure<Object>, Object>();
      EntrySetMapIterator<Closure<Object>, Object> entrySetMapIterator0 = new EntrySetMapIterator<Closure<Object>, Object>(hashMap0);
      IteratorUtils.toString((Iterator<Closure<Object>>) entrySetMapIterator0);
      LoopingListIterator<SQLNonTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientConnectionException>(list0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      loopingListIterator0.add(sQLNonTransientConnectionException0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      // Undeclared exception!
      IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) loopingListIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MapIterator<StringTokenizer, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      ArrayList<ArrayDeque<Closure<Object>>> arrayList0 = new ArrayList<ArrayDeque<Closure<Object>>>();
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      EmptyListIterator.emptyListIterator();
      EmptyListIterator.emptyListIterator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      ListIterator<Locale.FilteringMode> listIterator0 = IteratorUtils.singletonListIterator(locale_FilteringMode0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      predicateArray0[1] = predicate1;
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[2] = (Predicate<Object>) instanceofPredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      predicateArray0[3] = (Predicate<Object>) anyPredicate0;
      Predicate<Object> predicate2 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) anyPredicate0);
      predicateArray0[4] = predicate2;
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, Boolean> factoryTransformer0 = new FactoryTransformer<Object, Boolean>(factory0);
      Predicate<Object> predicate3 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) factoryTransformer0);
      predicateArray0[5] = predicate3;
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<Object> predicate4 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      predicateArray0[6] = predicate4;
      Predicate<Object> predicate5 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicateArray0[3]);
      predicateArray0[7] = predicate5;
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate2);
      predicateArray0[8] = (Predicate<Object>) nullIsTruePredicate0;
      OnePredicate<Locale.FilteringMode> onePredicate0 = new OnePredicate<Locale.FilteringMode>(predicateArray0);
      NotPredicate<Locale.FilteringMode> notPredicate0 = new NotPredicate<Locale.FilteringMode>(onePredicate0);
      ListIterator<Locale.FilteringMode> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends Locale.FilteringMode>) listIterator0, (Predicate<? super Locale.FilteringMode>) notPredicate0);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Locale.FilteringMode>) listIterator1, (Predicate<? super Locale.FilteringMode>) predicateArray0[3]);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) iterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ArrayList<ArrayDeque<Closure<Object>>> arrayList0 = new ArrayList<ArrayDeque<Closure<Object>>>();
      EmptyListIterator.emptyListIterator();
      UniquePredicate<DataTruncation> uniquePredicate0 = new UniquePredicate<DataTruncation>();
      MapIterator<DataTruncation, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<DataTruncation> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) mapIterator0, (Predicate<? super DataTruncation>) uniquePredicate0);
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) mapIterator0, (Iterator<? extends SQLWarning>) iterator0, (Iterator<? extends SQLWarning>) mapIterator0);
      IteratorUtils.size(orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = (-382);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) null, (-382));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) vector0);
      IteratorUtils.contains((Iterator<Locale.FilteringMode>) resettableListIterator0, (Object) vector0);
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      LoopingListIterator<SQLClientInfoException> loopingListIterator0 = new LoopingListIterator<SQLClientInfoException>(linkedList0);
      Comparator<SQLClientInfoException> comparator0 = (Comparator<SQLClientInfoException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>) loopingListIterator0, (Iterator<? extends SQLClientInfoException>) loopingListIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) loopingListIterator0, (Iterator<? extends SQLClientInfoException>) iterator0);
      EmptyOrderedIterator.emptyOrderedIterator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) locale_FilteringMode0, 123, 123);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.map.SingletonMap");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Integer integer0 = new Integer((-1));
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      IteratorUtils.asIterable((Iterator<? extends Integer>) listIterator0);
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 3);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0);
      ListIteratorWrapper<BatchUpdateException> listIteratorWrapper0 = new ListIteratorWrapper<BatchUpdateException>(zippingIterator0);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) listIteratorWrapper0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Iterator<SQLFeatureNotSupportedException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      stack0.add(iIOMetadataNode0);
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(stack0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) reverseListIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 6);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) reverseListIterator0;
      iteratorArray0[1] = (Iterator<IIOMetadataNode>) reverseListIterator0;
      iteratorArray0[2] = (Iterator<IIOMetadataNode>) reverseListIterator0;
      iteratorArray0[3] = (Iterator<IIOMetadataNode>) reverseListIterator0;
      iteratorArray0[4] = (Iterator<IIOMetadataNode>) reverseListIterator0;
      iteratorArray0[5] = (Iterator<IIOMetadataNode>) reverseListIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      Transformer<Object, EnumSet<Locale.FilteringMode>> transformer0 = InvokerTransformer.invokerTransformer("");
      Iterator<EnumSet<Locale.FilteringMode>> iterator0 = IteratorUtils.objectGraphIterator((EnumSet<Locale.FilteringMode>) null, (Transformer<? super EnumSet<Locale.FilteringMode>, ? extends EnumSet<Locale.FilteringMode>>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      IteratorUtils.loopingListIterator((List<SQLRecoverableException>) arrayList0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode0);
      List<Locale.FilteringMode> list0 = IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) singletonListIterator0);
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      // Undeclared exception!
      IteratorUtils.contains((Iterator<Locale.FilteringMode>) resettableListIterator0, (Object) sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      EmptyMapIterator.emptyMapIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("S&Yuz~`&", "S&Yuz~`&");
      sQLNonTransientConnectionException0.printStackTrace();
      sQLNonTransientConnectionException0.getStackTrace();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0);
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      ResettableIterator<StringTokenizer> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<StringTokenizer>) resettableIterator1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) resettableListIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      ListIteratorWrapper<Object> listIteratorWrapper0 = new ListIteratorWrapper<Object>(orderedMapIterator0);
      IteratorUtils.matchesAny((Iterator<Object>) listIteratorWrapper0, (Predicate<? super Object>) predicate0);
      MapIterator<Closure<Object>, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Closure<Object>>) mapIterator0, 1743L, (-28L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) vector0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLIntegrityConstraintViolationException0);
      IteratorUtils.contains((Iterator<Locale.FilteringMode>) resettableListIterator0, (Object) sQLTransactionRollbackException0);
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[6];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      int int0 = 1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("yBFqqQavv(T", "", 1);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("W:VeG*F", "", 1);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException((String) null, "#z/j_9&SQ1-");
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException((String) null);
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      ObjectArrayListIterator<SQLSyntaxErrorException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLSyntaxErrorException>) objectArrayListIterator0, (-893L), (-893L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      vector0.containsAll(priorityQueue0);
      Class<SQLWarning> class0 = SQLWarning.class;
      Class<SQLWarning> class1 = SQLWarning.class;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) class1;
      objectArray0[1] = (Object) priorityQueue0;
      objectArray0[2] = (Object) class1;
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) priorityQueue0;
      objectArray0[5] = (Object) priorityQueue0;
      InvokerTransformer<Object, SQLTransientConnectionException> invokerTransformer0 = new InvokerTransformer<Object, SQLTransientConnectionException>("delimiter may not be null", (Class<?>[]) null, objectArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      IteratorUtils.loopingListIterator((List<SQLRecoverableException>) arrayList0);
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) vector0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("B[JT", "B[JT", (Throwable) null);
      IteratorUtils.contains((Iterator<Locale.FilteringMode>) resettableListIterator0, (Object) sQLTransactionRollbackException0);
      ArrayList<SQLClientInfoException> arrayList1 = new ArrayList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      LoopingListIterator<SQLClientInfoException> loopingListIterator0 = new LoopingListIterator<SQLClientInfoException>(linkedList0);
      Iterator<SQLClientInfoException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException2;
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException2;
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException2;
      IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 0, 0);
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator((Object[]) sQLNonTransientConnectionExceptionArray0, 0);
      IteratorUtils.isEmpty(resettableIterator0);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[2];
      SQLWarning sQLWarning0 = new SQLWarning("J}I>`yjPn;^HZu.", "");
      sQLWarningArray0[0] = sQLWarning0;
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 1073741824);
      sQLWarningArray0[1] = (SQLWarning) dataTruncation0;
      ObjectArrayListIterator<SQLWarning> objectArrayListIterator0 = new ObjectArrayListIterator<SQLWarning>(sQLWarningArray0);
      Iterable<SQLWarning> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLWarning>) objectArrayListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedList<LinkedHashSet<DataTruncation>> linkedList0 = new LinkedList<LinkedHashSet<DataTruncation>>();
      ResettableListIterator<LinkedHashSet<DataTruncation>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<LinkedHashSet<DataTruncation>>) linkedList0);
      IteratorUtils.unmodifiableListIterator((ListIterator<LinkedHashSet<DataTruncation>>) resettableListIterator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[7];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      String string0 = ";essN^|i";
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode(";essN^|i");
      int int0 = 1;
      ResettableListIterator<StringTokenizer> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      List<StringTokenizer> list0 = IteratorUtils.toList((Iterator<? extends StringTokenizer>) resettableListIterator1, 1942);
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(list0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<StringTokenizer>) loopingIterator0, (-748));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -748
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      IteratorUtils.getIterator(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Properties>) null, (Iterator<? extends Properties>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Stack<Locale.FilteringMode>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      EmptyListIterator.emptyListIterator();
      UniquePredicate<DataTruncation> uniquePredicate0 = new UniquePredicate<DataTruncation>();
      OrderedIterator<StringTokenizer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      List<StringTokenizer> list0 = IteratorUtils.toList((Iterator<? extends StringTokenizer>) orderedIterator0);
      LoopingListIterator<StringTokenizer> loopingListIterator0 = new LoopingListIterator<StringTokenizer>(list0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<StringTokenizer>) loopingListIterator0, 512);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 512
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-281));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<LinkedHashSet<DataTruncation>> linkedList0 = new LinkedList<LinkedHashSet<DataTruncation>>();
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>();
      linkedList0.add(linkedHashSet0);
      ResettableListIterator<LinkedHashSet<DataTruncation>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<LinkedHashSet<DataTruncation>>) linkedList0);
      IteratorUtils.unmodifiableListIterator((ListIterator<LinkedHashSet<DataTruncation>>) resettableListIterator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[7];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode(";essN^|i");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode((String) null);
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode((String) null);
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      ResettableListIterator<IIOMetadataNode> resettableListIterator1 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 1, 1);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableListIterator1);
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      IteratorUtils.emptyMapIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, (-2049L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException2;
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException2;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException2;
      IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 0, 0);
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator((Object[]) sQLNonTransientConnectionExceptionArray0, 0);
      IteratorUtils.isEmpty(resettableIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      ArrayList<EnumSet> arrayList0 = IteratorUtils.find((Iterator<ArrayList<EnumSet>>) null, (Predicate<? super ArrayList<EnumSet>>) nullIsFalsePredicate0);
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MapIterator<StringTokenizer, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      ArrayList<ArrayDeque<Closure<Object>>> arrayList0 = new ArrayList<ArrayDeque<Closure<Object>>>();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) mapIterator0);
      ListIterator<SQLNonTransientException> listIterator0 = EmptyListIterator.emptyListIterator();
      Class<SQLRecoverableException>[] classArray0 = (Class<SQLRecoverableException>[]) Array.newInstance(Class.class, 2);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      classArray0[0] = class0;
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      classArray0[1] = class1;
      InvokerTransformer<Object, SQLTransientConnectionException> invokerTransformer0 = new InvokerTransformer<Object, SQLTransientConnectionException>("' does not exist", classArray0, objectArray0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLException>) listIterator0, (Transformer<? super SQLException, ? extends SQLException>) invokerTransformer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("' does not exist");
      iIOMetadataNode0.getNodeType();
      iIOMetadataNode0.getElementsByTagName("");
      EmptyMapIterator.emptyMapIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      MapIterator<SQLNonTransientConnectionException, DataTruncation> mapIterator1 = IteratorUtils.emptyMapIterator();
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) mapIterator1, class2);
      DataTruncation dataTruncation0 = new DataTruncation((-709), true, false, (-709), (-748));
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(dataTruncation0);
      IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) stack0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Integer integer0 = new Integer(92);
      IteratorUtils.getIterator(integer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("!m^vbNvkCy8C=");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator");
      iIOMetadataNode0.getElementsByTagName("Entry does not exist: ");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("wD6fQ*f]=");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      Integer integer1 = new Integer(1);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer1);
      IteratorUtils.asIterable((Iterator<? extends Integer>) listIterator0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      ChainedTransformer<SQLClientInfoException> chainedTransformer0 = new ChainedTransformer<SQLClientInfoException>((Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>[]) null);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) chainedTransformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Stack<Locale.FilteringMode>();
      Comparator<StringTokenizer> comparator0 = (Comparator<StringTokenizer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 4);
      OrderedIterator<StringTokenizer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<StringTokenizer>) orderedIterator0;
      Vector<StringTokenizer> vector1 = new Vector<StringTokenizer>();
      LoopingListIterator<StringTokenizer> loopingListIterator0 = new LoopingListIterator<StringTokenizer>(vector1);
      iteratorArray0[1] = (Iterator<StringTokenizer>) loopingListIterator0;
      OrderedMapIterator<StringTokenizer, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<StringTokenizer, ? extends SQLWarning>) orderedMapIterator0);
      OrderedMapIterator<StringTokenizer, SQLWarning> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<StringTokenizer, ? extends SQLWarning>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<StringTokenizer, SQLWarning> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, SQLWarning>(orderedMapIterator1);
      iteratorArray0[2] = (Iterator<StringTokenizer>) abstractOrderedMapIteratorDecorator0;
      StringTokenizer stringTokenizer0 = new StringTokenizer("prefix may not be null");
      Hashtable<Object, StringTokenizer> hashtable0 = new Hashtable<Object, StringTokenizer>();
      Transformer<Object, StringTokenizer> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends StringTokenizer>) hashtable0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) transformer0);
      iteratorArray0[3] = iterator0;
      Iterator<StringTokenizer> iterator1 = IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) comparator0, (Iterator<? extends StringTokenizer>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator1, (-2502));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -2502
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      vector0.containsAll(priorityQueue0);
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) vector0);
      IteratorUtils.contains((Iterator<Locale.FilteringMode>) resettableListIterator0, (Object) vector0);
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      LoopingListIterator<SQLClientInfoException> loopingListIterator0 = new LoopingListIterator<SQLClientInfoException>(linkedList0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) loopingListIterator0, (Iterator<? extends SQLClientInfoException>) loopingListIterator0);
      EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) loopingListIterator0, (-849), (-849));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedList<LinkedHashSet<DataTruncation>> linkedList0 = new LinkedList<LinkedHashSet<DataTruncation>>();
      ResettableListIterator<LinkedHashSet<DataTruncation>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<LinkedHashSet<DataTruncation>>) linkedList0);
      IteratorUtils.unmodifiableListIterator((ListIterator<LinkedHashSet<DataTruncation>>) resettableListIterator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[7];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(";essN^|i");
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[3] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode((String) null);
      iIOMetadataNode3.getAttributeNode((String) null);
      iIOMetadataNodeArray0[4] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[5] = iIOMetadataNode4;
      MapIterator<DataTruncation, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      int[] intArray0 = new int[5];
      intArray0[0] = 1811;
      intArray0[1] = 1811;
      intArray0[2] = 1811;
      intArray0[3] = 1811;
      intArray0[4] = 1811;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, 1811, intArray0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) batchUpdateException0, comparator0);
      IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) mapIterator0, (Predicate<? super DataTruncation>) predicate0);
      EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 6);
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      LoopingListIterator<SQLClientInfoException> loopingListIterator0 = new LoopingListIterator<SQLClientInfoException>(arrayList0);
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) loopingListIterator0;
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) loopingListIterator0, (Iterator<? extends SQLClientInfoException>) iteratorArray0[0]);
      iteratorArray0[1] = (Iterator<SQLClientInfoException>) zippingIterator0;
      OrderedIterator<SQLClientInfoException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[2] = (Iterator<SQLClientInfoException>) orderedIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode4, 1811, 1811);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MapIterator<StringTokenizer, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      int int0 = 1;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<StringTokenizer>) mapIterator0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode0);
      IteratorUtils.contains((Iterator<Locale.FilteringMode>) null, (Object) vector0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkedList<LinkedHashSet<DataTruncation>> linkedList0 = new LinkedList<LinkedHashSet<DataTruncation>>();
      ResettableListIterator<LinkedHashSet<DataTruncation>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<LinkedHashSet<DataTruncation>>) linkedList0);
      IteratorUtils.unmodifiableListIterator((ListIterator<LinkedHashSet<DataTruncation>>) resettableListIterator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[7];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode(";essN^|i");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode((String) null);
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode((String) null);
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      ResettableListIterator<IIOMetadataNode> resettableListIterator1 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 1, 1);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableListIterator1);
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      MapIterator<SQLTransactionRollbackException, Object> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) mapIterator0, 488L);
      MapIterator<DataTruncation, SQLFeatureNotSupportedException> mapIterator1 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedList<LinkedHashSet<DataTruncation>> linkedList0 = new LinkedList<LinkedHashSet<DataTruncation>>();
      ResettableListIterator<LinkedHashSet<DataTruncation>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<LinkedHashSet<DataTruncation>>) linkedList0);
      IteratorUtils.unmodifiableListIterator((ListIterator<LinkedHashSet<DataTruncation>>) resettableListIterator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[7];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode(";essN^|i");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode((String) null);
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode((String) null);
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      ResettableListIterator<IIOMetadataNode> resettableListIterator1 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 1, 1);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableListIterator1);
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      assertFalse(resettableListIterator1.hasNext());
      
      MapIterator<SQLTransactionRollbackException, Object> mapIterator0 = IteratorUtils.emptyMapIterator();
      BoundedIterator<SQLTransactionRollbackException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) mapIterator0, 488L);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<SQLException> predicate0 = NonePredicate.nonePredicate((Predicate<? super SQLException>[]) predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLTransactionRollbackException>) boundedIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) vector0);
      boolean boolean0 = IteratorUtils.contains((Iterator<Locale.FilteringMode>) resettableListIterator0, (Object) vector0);
      assertFalse(boolean0);
      
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      IteratorUtils.loopingListIterator((List<SQLNonTransientException>) stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1185);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException2;
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException2;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException2;
      IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 0, 0);
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator((Object[]) sQLNonTransientConnectionExceptionArray0, 0);
      IteratorUtils.isEmpty(resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLClientInfoException[]) null, 719);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException1;
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException1;
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) stack0);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>) resettableListIterator0, (Iterator<? extends Locale.FilteringMode>) resettableListIterator0);
      Properties properties0 = new Properties();
      IteratorUtils.contains(iterator0, (Object) properties0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, Object>(orderedMapIterator0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0);
      Iterator<SQLFeatureNotSupportedException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator0, (Iterator<? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) iterator1);
      Iterator<SQLFeatureNotSupportedException> iterator2 = IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
      assertFalse(iterator2.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      vector0.add(locale_FilteringMode0);
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) vector0);
      // Undeclared exception!
      IteratorUtils.contains((Iterator<Locale.FilteringMode>) resettableListIterator0, (Object) vector0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException1);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Predicate<DataTruncation> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      predicateArray0[0] = predicate1;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(predicate0, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[1] = (Predicate<Object>) comparatorPredicate0;
      AllPredicate.allPredicate((Predicate<? super DataTruncation>[]) predicateArray0);
      EmptyMapIterator.emptyMapIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      sQLNonTransientConnectionException0.spliterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("S&Yuz~`&", "S&Yuz~`&");
      sQLNonTransientConnectionException0.printStackTrace();
      sQLNonTransientConnectionException0.getStackTrace();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("S&Yuz~`&");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      Predicate<DataTruncation> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<DataTruncation>[] predicateArray0 = (Predicate<DataTruncation>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      AllPredicate.allPredicate((Predicate<? super DataTruncation>[]) predicateArray0);
      EmptyMapIterator.emptyMapIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLNonTransientConnectionException0);
      IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator1 = IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator1);
      assertFalse(listIterator0.hasPrevious());
      
      Properties[] propertiesArray0 = new Properties[8];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties(properties2);
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("S&Yuz~`&", "S&Yuz~`&");
      sQLNonTransientConnectionException0.printStackTrace();
      sQLNonTransientConnectionException0.getStackTrace();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Integer integer0 = new Integer((-2234));
      IteratorUtils.getIterator(integer0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      String string0 = "";
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 1);
      Class<SQLDataException> class0 = SQLDataException.class;
      classArray0[0] = class0;
      InvokerTransformer<Object, SQLTransientConnectionException> invokerTransformer0 = new InvokerTransformer<Object, SQLTransientConnectionException>("", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-2234), 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      ArrayList<ArrayDeque<Closure<Object>>> arrayList0 = new ArrayList<ArrayDeque<Closure<Object>>>();
      IteratorUtils.toArray((Iterator<?>) nodeListIterator0);
      ListIterator<SQLNonTransientException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) listIterator0);
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 1);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[0] = class0;
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) zippingIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) zippingIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("S&Yuz~`&", "S&Yuz~`&");
      sQLNonTransientConnectionException0.printStackTrace();
      sQLNonTransientConnectionException0.getStackTrace();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, SQLTransientConnectionException> invokerTransformer0 = new InvokerTransformer<Object, SQLTransientConnectionException>("S&Yuz~`&", classArray0, (Object[]) null);
      IteratorUtils.transformedIterator((Iterator<? extends SQLException>) resettableIterator0, (Transformer<? super SQLException, ? extends SQLException>) invokerTransformer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("S&Yuz~`&");
      iIOMetadataNode0.getElementsByTagName("");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("[");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      Integer integer0 = new Integer(1);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      Iterable<Integer> iterable0 = IteratorUtils.asIterable((Iterator<? extends Integer>) listIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      List<Locale.FilteringMode> list0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      IteratorUtils.loopingListIterator((List<SQLRecoverableException>) arrayList0);
      Class<SQLWarning>[] classArray0 = (Class<SQLWarning>[]) Array.newInstance(Class.class, 4);
      Class<SQLWarning> class0 = SQLWarning.class;
      classArray0[0] = class0;
      Class<SQLWarning> class1 = SQLWarning.class;
      classArray0[1] = class1;
      Class<SQLWarning> class2 = SQLWarning.class;
      classArray0[2] = class2;
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("No element at index ", "No element at index ", sQLIntegrityConstraintViolationException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("");
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLWarning sQLWarning0 = new SQLWarning("", "", 1185);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException((String) null, "", (-5317), sQLWarning0);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("|H}Qv>G,4<K", "delimiter may not be null", sQLFeatureNotSupportedException3);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      List<SQLNonTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) objectArrayIterator0, 1185);
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("S&Yuz~`&", "S&Yuz~`&");
      sQLNonTransientConnectionException0.printStackTrace();
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException1.getStackTrace();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("JS9 ");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      UniquePredicate.uniquePredicate();
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 2);
      Predicate<SQLException> predicate0 = FalsePredicate.falsePredicate();
      predicateArray0[0] = predicate0;
      int[] intArray0 = new int[5];
      intArray0[0] = 125;
      intArray0[1] = 1;
      intArray0[2] = 495;
      intArray0[3] = (-748);
      intArray0[4] = 10;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("_j]y2", "_j]y2", intArray0, sQLNonTransientConnectionException1);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<SQLException> predicate1 = EqualPredicate.equalPredicate((SQLException) batchUpdateException0, (Equator<SQLException>) defaultEquator0);
      predicateArray0[1] = predicate1;
      AllPredicate.allPredicate((Predicate<? super DataTruncation>[]) predicateArray0);
      MapIterator<DataTruncation, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<DataTruncation> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) mapIterator0, (Predicate<? super DataTruncation>) predicate1);
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ZippingIterator<SQLWarning> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) orderedIterator0, (Iterator<? extends SQLWarning>) iterator0, (Iterator<? extends SQLWarning>) iterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("S&Yuz~`&", "S&Yuz~`&");
      sQLNonTransientConnectionException0.printStackTrace();
      sQLNonTransientConnectionException0.getStackTrace();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("S&Yuz~`&");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      Predicate<DataTruncation> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<DataTruncation>[] predicateArray0 = (Predicate<DataTruncation>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      AllPredicate.allPredicate((Predicate<? super DataTruncation>[]) predicateArray0);
      MapIterator<DataTruncation, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) orderedIterator0, (Iterator<? extends SQLWarning>) orderedIterator0, (Iterator<? extends SQLWarning>) mapIterator0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLNonTransientConnectionException0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[42];
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.arrayIterator(stringTokenizerArray0);
      IteratorUtils.get((Iterator<StringTokenizer>) resettableIterator0, 21);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 7);
      OrderedMapIterator<Integer, SQLException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<Integer, Object> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ?>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<Integer, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, Object>(orderedMapIterator1);
      iteratorArray0[0] = (Iterator<Integer>) abstractOrderedMapIteratorDecorator0;
      Integer integer0 = new Integer(0);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) singletonIterator0);
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      iteratorArray0[1] = iterator0;
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate1, predicate1);
      Iterator<Integer> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends Integer>) iteratorArray0[0], (Predicate<? super Integer>) andPredicate0);
      iteratorArray0[2] = iterator1;
      Integer[] integerArray0 = new Integer[9];
      Integer integer1 = new Integer(0);
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      integerArray0[8] = integer0;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      iteratorArray0[3] = (Iterator<Integer>) objectArrayListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Integer>) null, (Iterator<? extends Integer>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 3);
      HashMap<SQLTransientConnectionException, SQLTimeoutException> hashMap0 = new HashMap<SQLTransientConnectionException, SQLTimeoutException>();
      EntrySetMapIterator<SQLTransientConnectionException, SQLTimeoutException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientConnectionException, SQLTimeoutException>(hashMap0);
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) entrySetMapIterator0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("P_6bn", sQLNonTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("qF&G!d;M", "P_6bn", (-1), sQLTimeoutException0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0, true);
      iteratorArray0[1] = (Iterator<SQLTransientConnectionException>) singletonIterator0;
      List<SQLTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) iteratorArray0[0]);
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      iteratorArray0[2] = (Iterator<SQLTransientConnectionException>) resettableListIterator0;
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) iterator0, class0);
      assertEquals(1, sQLTransientConnectionExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("S&Yuz~`&", "S&Yuz~`&");
      sQLNonTransientConnectionException0.printStackTrace();
      sQLNonTransientConnectionException0.getStackTrace();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("S&Yuz~`&");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      Predicate<DataTruncation> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<DataTruncation>[] predicateArray0 = (Predicate<DataTruncation>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      Predicate<DataTruncation> predicate1 = AllPredicate.allPredicate((Predicate<? super DataTruncation>[]) predicateArray0);
      MapIterator<DataTruncation, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<DataTruncation> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) mapIterator0, (Predicate<? super DataTruncation>) predicate1);
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ZippingIterator<SQLWarning> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) orderedIterator0, (Iterator<? extends SQLWarning>) orderedIterator0, (Iterator<? extends SQLWarning>) iterator0);
      assertNotNull(zippingIterator0);
      
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 1);
      Comparator<SQLIntegrityConstraintViolationException> comparator0 = (Comparator<SQLIntegrityConstraintViolationException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator0, (Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLRecoverableException>) arrayList0);
      Class<SQLWarning>[] classArray0 = (Class<SQLWarning>[]) Array.newInstance(Class.class, 4);
      Class<SQLWarning> class0 = SQLWarning.class;
      classArray0[0] = class0;
      Class<SQLWarning> class1 = SQLWarning.class;
      classArray0[1] = class1;
      Class<SQLWarning> class2 = SQLWarning.class;
      classArray0[2] = class2;
      Class<SQLWarning> class3 = SQLWarning.class;
      classArray0[3] = class3;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      InvokerTransformer<Object, SQLTransientConnectionException> invokerTransformer0 = new InvokerTransformer<Object, SQLTransientConnectionException>("No element at index ", classArray0, classArray0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLException>) resettableListIterator0, (Transformer<? super SQLException, ? extends SQLException>) invokerTransformer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("No element at index ");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("[");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Predicate<DataTruncation>[] predicateArray0 = (Predicate<DataTruncation>[]) Array.newInstance(Predicate.class, 4);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Predicate<DataTruncation> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super DataTruncation>) uniquePredicate0);
      predicateArray0[0] = predicate0;
      Predicate<DataTruncation> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super DataTruncation>) predicate0);
      predicateArray0[1] = predicate1;
      Predicate<DataTruncation> predicate2 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[2] = predicate2;
      Predicate<DataTruncation> predicate3 = UniquePredicate.uniquePredicate();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[8];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", "", 1540, sQLSyntaxErrorException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException(sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("", "E2lRuO", sQLSyntaxErrorException0);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("", (String) null, 100);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("", "E2lRuO", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException("", "", sQLTransactionRollbackException2);
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      SQLTransactionRollbackException sQLTransactionRollbackException7 = new SQLTransactionRollbackException("", sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException7;
      IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, 1);
      predicateArray0[3] = predicate3;
      Predicate<DataTruncation> predicate4 = AllPredicate.allPredicate((Predicate<? super DataTruncation>[]) predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) null, (Predicate<? super DataTruncation>) predicate4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("%", "%");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException3);
      int int0 = 0;
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException3;
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException3;
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException3;
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException4;
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 0, (-242));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Integer integer0 = new Integer((-2222));
      IteratorUtils.getIterator(integer0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("akPn<4hZL)-);&*P", "", (-2222));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "akPn<4hZL)-);&*P", sQLSyntaxErrorException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      IteratorUtils.loopingListIterator((List<SQLNonTransientException>) vector0);
      OrderedMapIterator<DataTruncation, Iterator<SQLInvalidAuthorizationSpecException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<DataTruncation, Iterator<SQLInvalidAuthorizationSpecException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, Iterator<SQLInvalidAuthorizationSpecException>>(orderedMapIterator0);
      MapIterator<SQLWarning, Iterator<SQLInvalidAuthorizationSpecException>> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLWarning, ? extends Iterator<SQLInvalidAuthorizationSpecException>>) abstractMapIteratorDecorator0);
      MapIterator<SQLWarning, Iterator<SQLInvalidAuthorizationSpecException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      MapIterator<SQLWarning, Iterator<SQLInvalidAuthorizationSpecException>> mapIterator2 = IteratorUtils.unmodifiableMapIterator(mapIterator1);
      assertSame(mapIterator2, mapIterator1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      Integer integer0 = new Integer(58);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) listIterator0);
      ListIterator<SQLNonTransientException> listIterator1 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) listIterator1);
      int int0 = 5350;
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[9];
      ObjectArrayIterator<SQLSyntaxErrorException> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0, 1163);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      ArrayList<ArrayDeque<Closure<Object>>> arrayList0 = new ArrayList<ArrayDeque<Closure<Object>>>();
      ArrayDeque<Closure<Object>> arrayDeque0 = new ArrayDeque<Closure<Object>>();
      arrayList0.add(arrayDeque0);
      IteratorUtils.loopingListIterator((List<ArrayDeque<Closure<Object>>>) arrayList0);
      IteratorUtils.toArray((Iterator<?>) nodeListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Integer integer0 = new Integer((-2222));
      IteratorUtils.getIterator(integer0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("akPn<4hZL)-);&*P", "", (-2222));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "akPn<4hZL)-);&*P", sQLSyntaxErrorException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException((String) null);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException5;
      IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 0, 0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[4];
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException0;
      ObjectArrayIterator<SQLSyntaxErrorException> objectArrayIterator0 = new ObjectArrayIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) objectArrayIterator0, (-748));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      Iterator<StringTokenizer> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<StringTokenizer>) null, 2139);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<SQLTransactionRollbackException>[] classArray0 = (Class<SQLTransactionRollbackException>[]) Array.newInstance(Class.class, 6);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      classArray0[0] = class0;
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      classArray0[1] = class1;
      Class<SQLTransactionRollbackException> class2 = SQLTransactionRollbackException.class;
      classArray0[2] = class2;
      Class<SQLTransactionRollbackException> class3 = SQLTransactionRollbackException.class;
      classArray0[3] = class3;
      Class<SQLTransactionRollbackException> class4 = SQLTransactionRollbackException.class;
      classArray0[4] = class4;
      Class<SQLTransactionRollbackException> class5 = SQLTransactionRollbackException.class;
      classArray0[5] = class5;
      InvokerTransformer<Object, SQLTransientConnectionException> invokerTransformer0 = new InvokerTransformer<Object, SQLTransientConnectionException>("Iterator must not be null", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLException>) null, (Transformer<? super SQLException, ? extends SQLException>) invokerTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      ArrayList<ArrayDeque<Closure<Object>>> arrayList0 = new ArrayList<ArrayDeque<Closure<Object>>>();
      IteratorUtils.loopingListIterator((List<ArrayDeque<Closure<Object>>>) arrayList0);
      IteratorUtils.toArray((Iterator<?>) nodeListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Integer>) null, 2428L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[0];
      ObjectArrayIterator<StringTokenizer> objectArrayIterator0 = new ObjectArrayIterator<StringTokenizer>(stringTokenizerArray0);
      ListIteratorWrapper<StringTokenizer> listIteratorWrapper0 = new ListIteratorWrapper<StringTokenizer>(objectArrayIterator0);
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) listIteratorWrapper0);
      IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0);
      Iterator<Locale.FilteringMode> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator(iterator0, (-3001L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Iterator<Locale.FilteringMode> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator(iterator0, (-1555L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getPreviousSibling();
      IteratorUtils.getIterator((Object) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("akPn<4hZL)-);&*P", (String) null, 1073741824);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "akPn<4hZL)-);&*P", sQLSyntaxErrorException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("akPn<4hZL)-);&*P", "2=|%Nz#|9yeTM-{]k ");
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, (-2311), 1073741824);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Integer integer0 = new Integer((-2222));
      IteratorUtils.getIterator(integer0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("akPn<4hZL)-);&*P", "akPn<4hZL)-);&*P", (-2222));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "akPn<4hZL)-);&*P", sQLSyntaxErrorException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException((String) null, (String) null);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer1;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, 0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIteratorWrapper<BatchUpdateException> listIteratorWrapper0 = new ListIteratorWrapper<BatchUpdateException>(listIterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      listIteratorWrapper0.forEachRemaining(consumer0);
      listIteratorWrapper0.hasNext();
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) listIteratorWrapper0, (Iterator<? extends BatchUpdateException>) listIterator0);
      IteratorUtils.isEmpty(listIteratorWrapper0);
      Properties properties0 = new Properties();
      Properties[] propertiesArray0 = new Properties[8];
      propertiesArray0[0] = properties0;
      propertiesArray0[1] = properties0;
      propertiesArray0[2] = properties0;
      propertiesArray0[3] = properties0;
      propertiesArray0[4] = properties0;
      propertiesArray0[5] = properties0;
      propertiesArray0[6] = properties0;
      propertiesArray0[7] = properties0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(propertiesArray0, (-21), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[4];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      properties1.clear();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      DataTruncation dataTruncation0 = new DataTruncation(421, true, true, 421, (-1), (Throwable) null);
      IteratorUtils.getIterator(dataTruncation0);
      int int0 = (-226);
      int int1 = 4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((DataTruncation[]) null, 93, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Iterator<Locale.FilteringMode> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.skippingIterator(iterator0, 0L);
      IteratorUtils.emptyOrderedIterator();
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      IteratorUtils.loopingListIterator((List<SQLNonTransientException>) vector0);
      int[] intArray0 = new int[8];
      intArray0[0] = 934;
      intArray0[1] = 1;
      intArray0[2] = 100;
      intArray0[3] = 125;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 100;
      intArray0[7] = 61;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      Iterator<?> iterator1 = IteratorUtils.getIterator(batchUpdateException0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Integer integer0 = new Integer((-2222));
      IteratorUtils.getIterator(integer0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("akPn<4hZL)-);&*P", "", (-2222));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "akPn<4hZL)-);&*P", sQLSyntaxErrorException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException((String) null, (String) null);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionException2.initCause(sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((EnumSet<Locale.FilteringMode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Predicate<DataTruncation>[] predicateArray0 = (Predicate<DataTruncation>[]) Array.newInstance(Predicate.class, 4);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<DataTruncation> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super DataTruncation>) uniquePredicate0);
      predicateArray0[0] = predicate0;
      Predicate<DataTruncation> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super DataTruncation>) predicate0);
      predicateArray0[1] = predicate1;
      Predicate<DataTruncation> predicate2 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[2] = predicate2;
      Predicate<DataTruncation> predicate3 = UniquePredicate.uniquePredicate();
      predicateArray0[3] = predicate3;
      Predicate<DataTruncation> predicate4 = AllPredicate.allPredicate((Predicate<? super DataTruncation>[]) predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) null, (Predicate<? super DataTruncation>) predicate4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) orderedIterator0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLException>) iterator0);
      IteratorUtils.emptyListIterator();
      Integer integer0 = new Integer(9);
      IteratorUtils.getIterator(integer0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("U2Gg/haDA\"^1", "}V)Oy3]w>J7Dz?OdCmB", 61, batchUpdateException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      ListIteratorWrapper<SQLFeatureNotSupportedException> listIteratorWrapper0 = new ListIteratorWrapper<SQLFeatureNotSupportedException>(resettableIterator0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLFeatureNotSupportedException>) listIteratorWrapper0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "U2Gg/haDA\"^1";
      stringArray0[1] = "U2Gg/haDA\"^1";
      stringArray0[2] = "U2Gg/haDA\"^1";
      int int0 = 2578;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringArray0, 2578);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ListIterator<SQLTransientException> listIterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      int int0 = 1139;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) batchUpdateException0, 1139);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) vector0);
      HashSet<Properties>[] hashSetArray0 = (HashSet<Properties>[]) Array.newInstance(HashSet.class, 7);
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      hashSetArray0[0] = hashSet0;
      HashSet<Properties> hashSet1 = new HashSet<Properties>();
      hashSetArray0[1] = hashSet1;
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      hashSetArray0[2] = (HashSet<Properties>) linkedHashSet0;
      HashSet<Properties> hashSet2 = new HashSet<Properties>();
      hashSetArray0[3] = hashSet2;
      HashSet<Properties> hashSet3 = new HashSet<Properties>();
      hashSetArray0[4] = hashSet3;
      HashSet<Properties> hashSet4 = new HashSet<Properties>();
      hashSetArray0[5] = hashSet4;
      HashSet<Properties> hashSet5 = new HashSet<Properties>();
      hashSet0.containsAll(hashSet4);
      hashSetArray0[6] = hashSet5;
      int int0 = 0;
      hashSet1.clone();
      ObjectArrayListIterator<HashSet<Properties>> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<HashSet<Properties>>(hashSetArray0, 619, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[4];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      properties1.clear();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      int int0 = (-21);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(propertiesArray0, (-21), (-21));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = 1939;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      DataTruncation dataTruncation0 = new DataTruncation(1939, true, false, 1939, 1939, sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0, 1939);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      IteratorUtils.loopingListIterator((List<SQLRecoverableException>) arrayList0);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 8);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      classArray0[2] = class2;
      Class<SQLClientInfoException> class3 = SQLClientInfoException.class;
      classArray0[3] = class3;
      Class<SQLClientInfoException> class4 = SQLClientInfoException.class;
      classArray0[4] = class4;
      Class<SQLClientInfoException> class5 = SQLClientInfoException.class;
      classArray0[5] = class5;
      Class<SQLClientInfoException> class6 = SQLClientInfoException.class;
      classArray0[6] = class6;
      Class<SQLClientInfoException> class7 = SQLClientInfoException.class;
      classArray0[7] = class7;
      InvokerTransformer<Object, SQLTransientConnectionException> invokerTransformer0 = new InvokerTransformer<Object, SQLTransientConnectionException>("No element at index ", classArray0, classArray0);
      Iterator<SQLException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLException>) orderedMapIterator0, (Transformer<? super SQLException, ? extends SQLException>) invokerTransformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[3];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", (Throwable) null);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("", "H/l1y?oF}@", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("", "");
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      Comparator<SQLTransientException> comparator0 = (Comparator<SQLTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTimeoutException>) resettableListIterator0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>) listIterator0, (Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      Iterator<SQLTimeoutException> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTimeoutException>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) comparator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = "dFd@AX";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dFd@AX");
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataException0.printStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ArrayList<ArrayDeque<Closure<Object>>> arrayList0 = new ArrayList<ArrayDeque<Closure<Object>>>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      int int0 = 0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLNonTransientConnectionException[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) vector0);
      IteratorUtils.getIterator(resettableListIterator0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      ForClosure.forClosure((-1481), (Closure<? super SQLException>) closure0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator((SQLNonTransientConnectionException) null);
      IteratorUtils.apply((Iterator<SQLNonTransientConnectionException>) resettableIterator0, (Closure<? super SQLNonTransientConnectionException>) closure0);
      OrderedMapIterator<SQLTimeoutException, Transformer<Object, String>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, Transformer<Object, String>> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends Transformer<Object, String>>) orderedMapIterator0);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends Transformer<Object, String>>) orderedMapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0, (long) (-1481));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Integer integer0 = new Integer((-2222));
      IteratorUtils.getIterator(integer0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("akPn<4hZL)-);&*P", "", (-2222));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "akPn<4hZL)-);&*P", sQLSyntaxErrorException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException((String) null, (String) null);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 0, 0);
      assertNotNull(resettableIterator0);
      
      ResettableIterator<Object> resettableIterator1 = IteratorUtils.arrayIterator((Object[]) sQLNonTransientConnectionExceptionArray0, 0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIteratorWrapper<BatchUpdateException> listIteratorWrapper0 = new ListIteratorWrapper<BatchUpdateException>(listIterator0);
      listIteratorWrapper0.hasNext();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) listIteratorWrapper0, (Iterator<? extends BatchUpdateException>) listIterator0);
      IteratorUtils.isEmpty(listIteratorWrapper0);
      IteratorUtils.getIterator(iterator0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((DataTruncation[]) null, 0, (-226));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.singletonIterator((SQLNonTransientConnectionException) null);
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("V97VeUCc%s", "NodeList must not be null", 1, sQLClientInfoException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("f_.d}6/=(97E:Dx!", "", 1, (Map<String, ClientInfoStatus>) null, sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException1, 1210, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getNextSibling();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientException>) stack0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = "";
      MockThrowable mockThrowable0 = new MockThrowable("[", (Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", mockThrowable0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int int0 = (-1624);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, (-1624));
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(batchUpdateException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("B2'", sQLTransactionRollbackException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLFeatureNotSupportedException0, 302, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[0];
      IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      LinkedList<Boolean>[] linkedListArray0 = (LinkedList<Boolean>[]) Array.newInstance(LinkedList.class, 9);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      linkedListArray0[0] = linkedList0;
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      linkedListArray0[1] = linkedList1;
      LinkedList<Boolean> linkedList2 = new LinkedList<Boolean>();
      linkedListArray0[2] = linkedList2;
      LinkedList<Boolean> linkedList3 = new LinkedList<Boolean>();
      linkedListArray0[3] = linkedList3;
      LinkedList<Boolean> linkedList4 = new LinkedList<Boolean>();
      linkedListArray0[4] = linkedList4;
      LinkedList<Boolean> linkedList5 = new LinkedList<Boolean>(linkedList2);
      linkedListArray0[5] = linkedList5;
      LinkedList<Boolean> linkedList6 = new LinkedList<Boolean>();
      linkedListArray0[6] = linkedList6;
      Object object0 = linkedList3.clone();
      LinkedList<Boolean> linkedList7 = new LinkedList<Boolean>();
      linkedListArray0[7] = linkedList7;
      LinkedList<Boolean> linkedList8 = new LinkedList<Boolean>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(object0);
      Predicate<Object> predicate0 = AndPredicate.andPredicate((Predicate<? super Object>) equalPredicate0, (Predicate<? super Object>) equalPredicate0);
      predicateArray0[0] = predicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) onePredicate0;
      NonePredicate<String> nonePredicate0 = new NonePredicate<String>(predicateArray0);
      PredicateTransformer<String> predicateTransformer0 = new PredicateTransformer<String>(nonePredicate0);
      linkedList8.parallelStream();
      // Undeclared exception!
      predicateTransformer0.transform("org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator");
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Estimated size must be greater than 0", "Estimated size must be greater than 0", 903);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Estimated size must be greater than 0", "Estimated size must be greater than 0", (-3849), sQLTransactionRollbackException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Estimated size must be greater than 0", "Estimated size must be greater than 0", "G8+AN,\"|+", 903);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("2Fmp$wW%7F3{", "2Fmp$wW%7F3{", "1&H:j", (-3933));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("iterator", " d~", "XfZ {YRvq7L", 512);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("", "Estimated size must be greater than 0", "add() not supported for empty Iterator", (-1963));
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement(" d~", "Transformer must not be null", "l(", 903);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("iterator", "1&H:j", "XfZ {YRvq7L", 512);
      stackTraceElementArray0[5] = stackTraceElement5;
      sQLSyntaxErrorException0.setStackTrace(stackTraceElementArray0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, true);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLSyntaxErrorException>) singletonIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) properties0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ListIterator<ServiceLoader<StringTokenizer>> listIterator0 = IteratorUtils.singletonListIterator((ServiceLoader<StringTokenizer>) null);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      MapIterator<StringTokenizer, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<StringTokenizer>) mapIterator0, (-2502));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -2502
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("%V)", "%V)");
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("%V)");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("yjUT1fHcp$R");
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("", "");
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException();
      sQLDataExceptionArray0[2] = sQLDataException2;
      String string0 = "d5SUD%r";
      int int0 = 637;
      SQLDataException sQLDataException3 = new SQLDataException("", "d5SUD%r", 637);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("d5SUD%r");
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLDataException sQLDataException5 = new SQLDataException(sQLIntegrityConstraintViolationException0);
      sQLDataExceptionArray0[5] = sQLDataException5;
      int int1 = (-1473);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLDataExceptionArray0, 637, (-1473));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[6];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      String string0 = "";
      int int0 = (-1369);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", (-1369), sQLNonTransientExceptionArray0[0]);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLSyntaxErrorException0;
      sQLNonTransientConnectionException0.spliterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLSyntaxErrorException0);
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("O)'&{]5T&\"zN", sQLNonTransientExceptionArray0[1]);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientException0.forEach(consumer0);
      sQLNonTransientExceptionArray0[4] = sQLNonTransientException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("O)'&{]5T&\"zN");
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLFeatureNotSupportedException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, (-1369), 1898);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[2];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(locale_FilteringModeArray0, 4848);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(989);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, (int) integerArray0[2]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(objectArray0, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }
}
