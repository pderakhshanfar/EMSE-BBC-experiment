/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 14:04:57 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintStream;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      IteratorUtils.emptyIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "suffix may not be null", (-4066));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTimeoutException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("", "", sQLIntegrityConstraintViolationException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", sQLIntegrityConstraintViolationException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLSyntaxErrorException0, comparator0);
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer0 = InvokerTransformer.invokerTransformer("suffix may not be null");
      Transformer<SQLException, SQLIntegrityConstraintViolationException> transformer1 = IfTransformer.ifTransformer((Predicate<? super SQLException>) predicate0, (Transformer<? super SQLException, ? extends SQLIntegrityConstraintViolationException>) transformer0, (Transformer<? super SQLException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.objectGraphIterator(sQLIntegrityConstraintViolationException1, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) transformer1);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'suffix may not be null' on 'class java.sql.SQLIntegrityConstraintViolationException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.singletonIterator(locale_Category0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>((Predicate<? super Object>) null, (Closure<? super Object>) null, (Closure<? super Object>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Locale.Category>) resettableIterator0, (Closure<? super Locale.Category>) ifClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("", (Transformer<? super String, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 696);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[16];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      IteratorUtils.get((Iterator<String>) resettableIterator0, 4);
      int[] intArray0 = new int[6];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 4;
      intArray0[4] = 4;
      intArray0[5] = 4;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("(this Collection)", intArray0);
      Transformer<BatchUpdateException, BatchUpdateException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends BatchUpdateException>) iterator0, 118);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[3];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", hashMap0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException((String) null, "", 119, hashMap0, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      ObjectArrayIterator<SQLClientInfoException> objectArrayIterator0 = new ObjectArrayIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      Predicate<SQLClientInfoException> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) objectArrayIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<ServiceLoader<IIOMetadataNode>>) null, (Transformer<? super ServiceLoader<IIOMetadataNode>, String>) transformer0, "", "", "");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toList((Iterator<? extends SQLTransientException>) resettableIterator0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[3];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("FilterListIterator.add(Object) is not supported.", "FilterListIterator.add(Object) is not supported.", (-1));
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("FilterListIterator.add(Object) is not supported.", "FilterListIterator.add(Object) is not supported.", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0);
      LoopingIterator<SQLIntegrityConstraintViolationException> loopingIterator0 = new LoopingIterator<SQLIntegrityConstraintViolationException>(list0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) loopingIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0);
      ZippingIterator<SQLIntegrityConstraintViolationException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) zippingIterator0);
      // Undeclared exception!
      IteratorUtils.size(loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[7];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", (String) null);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 5);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      classArray0[1] = class1;
      Class<SQLNonTransientException> class2 = SQLNonTransientException.class;
      classArray0[2] = class2;
      Class<SQLNonTransientException> class3 = SQLNonTransientException.class;
      classArray0[3] = class3;
      Class<SQLNonTransientException> class4 = SQLNonTransientException.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      classArray0[4] = class4;
      InvokerTransformer<SQLTransientConnectionException, String> invokerTransformer0 = new InvokerTransformer<SQLTransientConnectionException, String>((String) null, classArray0, stringArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) resettableIterator0, (Transformer<? super SQLTransientConnectionException, String>) invokerTransformer0, "org.apache.commons.collections4.iterators.ReverseListIterator", "", "org.apache.commons.collections4.iterators.ReverseListIterator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableIterator0, (Class<SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IteratorUtils.emptyIterator();
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable.replacement_getStackTrace(mockThrowable0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 100, (int[]) null, mockThrowable0);
      IteratorUtils.getIterator(batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      IteratorUtils.get((Iterator<String>) resettableIterator0, 1);
      IteratorUtils.contains((Iterator<PriorityQueue<LinkedList>>) resettableIterator0, (Object) null);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 6);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[1];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "0YV}yuH~EnRP5hBr", hashMap0, (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLClientInfoException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, 1, 125);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      IteratorUtils.get((Iterator<String>) resettableIterator0, 1);
      ResettableIterator<Object> resettableIterator1 = IteratorUtils.arrayIterator((Object[]) stringArray0, 1, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) resettableIterator1, (Transformer<? super Object, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("DvZ~!6C9<o");
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0, 1);
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) zippingIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableIterator0, class0);
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 1);
      StringTokenizer stringTokenizer0 = new StringTokenizer("3c\"EO?2.<;F<tn", "3c\"EO?2.<;F<tn", false);
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      iteratorArray0[0] = (Iterator<StringTokenizer>) singletonListIterator0;
      Iterator<StringTokenizer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      SkippingIterator<StringTokenizer> skippingIterator0 = IteratorUtils.skippingIterator(iterator0, 0L);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      Iterator<StringTokenizer> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends StringTokenizer>) skippingIterator0, (Predicate<? super StringTokenizer>) allPredicate0);
      Iterator<StringTokenizer> iterator2 = IteratorUtils.unmodifiableIterator(iterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AllPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ExceptionPredicate.exceptionPredicate();
      String[] stringArray0 = new String[2];
      stringArray0[1] = stringArray0[0];
      SQLDataException sQLDataException0 = new SQLDataException("'", "KE");
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 6);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      classArray0[0] = class0;
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      classArray0[1] = class1;
      Class<SQLInvalidAuthorizationSpecException> class2 = SQLInvalidAuthorizationSpecException.class;
      classArray0[2] = class2;
      Class<SQLInvalidAuthorizationSpecException> class3 = SQLInvalidAuthorizationSpecException.class;
      classArray0[3] = class3;
      Class<SQLInvalidAuthorizationSpecException> class4 = SQLInvalidAuthorizationSpecException.class;
      classArray0[4] = class4;
      Class<SQLInvalidAuthorizationSpecException> class5 = SQLInvalidAuthorizationSpecException.class;
      classArray0[5] = class5;
      InvokerTransformer<SQLException, SQLDataException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLDataException>("9{2", classArray0, stringArray0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) invokerTransformer0);
      Class<SQLNonTransientException> class6 = SQLNonTransientException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) iterator0, class6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '9{2' on 'class java.sql.SQLDataException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) vector0);
      IteratorUtils.size(resettableListIterator0);
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) stack0);
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 5);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) resettableIterator0;
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) resettableIterator0;
      iteratorArray0[3] = (Iterator<SQLNonTransientConnectionException>) resettableIterator0;
      iteratorArray0[4] = (Iterator<SQLNonTransientConnectionException>) resettableIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 4);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", "E%R,", (-1355), sQLSyntaxErrorException0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.singletonIterator(sQLSyntaxErrorException1);
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) resettableIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("d1}m");
      ResettableIterator<String> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends String>) linkedHashSet0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends String>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) null, (-1105));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      UniquePredicate<SQLNonTransientException> uniquePredicate0 = new UniquePredicate<SQLNonTransientException>();
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(909, closure0);
      Closure<Object> closure1 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, closure0, true);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 2);
      closureArray0[0] = closure1;
      closureArray0[1] = (Closure<Object>) forClosure0;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, whileClosure0);
      ExceptionClosure.exceptionClosure();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate0;
      predicateArray0[4] = predicate0;
      predicateArray0[5] = predicate0;
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      predicateArray0[6] = predicate1;
      predicateArray0[7] = predicate0;
      predicateArray0[8] = predicate0;
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, closureArray0, closure0);
      IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) forClosure0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.singletonIterator(locale_Category0);
      IteratorUtils.apply((Iterator<Locale.Category>) resettableIterator0, (Closure<? super Locale.Category>) closure0);
      IteratorUtils.getIterator(predicate0);
      Iterator<BatchUpdateException> iterator0 = EmptyIterator.emptyIterator();
      ListIteratorWrapper<BatchUpdateException> listIteratorWrapper0 = new ListIteratorWrapper<BatchUpdateException>(iterator0);
      IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) listIteratorWrapper0, (Predicate<? super BatchUpdateException>) predicate0);
      Hashtable<SQLTransactionRollbackException, ClientInfoStatus> hashtable0 = new Hashtable<SQLTransactionRollbackException, ClientInfoStatus>(2, 2);
      IteratorUtils.singletonListIterator(hashtable0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("Z#");
      IteratorUtils.toString((Iterator<EnumSet<Locale.Category>>) null, (Transformer<? super EnumSet<Locale.Category>, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      UniquePredicate<SQLNonTransientException> uniquePredicate0 = new UniquePredicate<SQLNonTransientException>();
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(909, closure0);
      TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, closure0, true);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 2);
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) whileClosure0, (Closure<? super Object>) whileClosure0);
      closureArray0[0] = closure1;
      closureArray0[1] = (Closure<Object>) forClosure0;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, closure1);
      ExceptionClosure.exceptionClosure();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate0;
      predicateArray0[4] = predicate0;
      predicateArray0[5] = predicate0;
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      predicateArray0[6] = predicate1;
      predicateArray0[7] = predicate0;
      predicateArray0[8] = predicate0;
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, closureArray0, closure1);
      IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) forClosure0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.singletonIterator(locale_Category0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Locale.Category>) resettableIterator0, (Closure<? super Locale.Category>) closure1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Transformer<Object, SQLTransactionRollbackException> transformer0 = InvokerTransformer.invokerTransformer("z<;vn O-");
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)95;
      IteratorUtils.apply((Iterator<Locale.Category>) null, (Closure<? super Locale.Category>) closure0);
      IteratorUtils.emptyIterator();
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) orderedIterator0, (Transformer<? super IIOMetadataNode, String>) null, "Estimated size must be greater than 0", "Estimated size must be greater than 0", "The collection must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      OrderedIterator<Locale.Category> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(onePredicate0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(notPredicate0);
      Predicate<Object> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) nullIsTruePredicate0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 7);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(59, closure0);
      closureArray0[0] = (Closure<Object>) forClosure0;
      Closure<Object> closure1 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      closureArray0[1] = closure1;
      Closure<Object> closure2 = IfClosure.ifClosure((Predicate<? super Object>) nullIsTruePredicate0, (Closure<? super Object>) closure0, (Closure<? super Object>) closure1);
      closureArray0[2] = closure2;
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(notPredicate0, closure1, true);
      closureArray0[3] = (Closure<Object>) whileClosure0;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      closureArray0[4] = (Closure<Object>) chainedClosure0;
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, closure1);
      closureArray0[5] = (Closure<Object>) ifClosure0;
      Closure<Object> closure3 = ExceptionClosure.exceptionClosure();
      closureArray0[6] = closure3;
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, closureArray0, forClosure0);
      Closure<Object> closure4 = IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) switchClosure0);
      IteratorUtils.apply((Iterator<Locale.Category>) orderedIterator0, (Closure<? super Locale.Category>) closure4);
      IteratorUtils.emptyIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.getIterator(resettableListIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, (Iterator<? extends IIOMetadataNode>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLNonTransientConnectionException0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) listIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "z<;vn O-";
      Transformer<Object, SQLTransactionRollbackException> transformer0 = InvokerTransformer.invokerTransformer("z<;vn O-");
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)95;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IteratorUtils.apply((Iterator<Locale.Category>) null, (Closure<? super Locale.Category>) closure0);
      ResettableIterator<Stack<Iterator>> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.size((Iterator<?>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends String>) null, (long) 95, 3432L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<PriorityQueue<SQLTransientConnectionException>>) null, (Closure<? super PriorityQueue<SQLTransientConnectionException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ExceptionPredicate.exceptionPredicate();
      UniquePredicate<SQLNonTransientException> uniquePredicate0 = new UniquePredicate<SQLNonTransientException>();
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) orderedIterator0, (Predicate<? super SQLFeatureNotSupportedException>) uniquePredicate0);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "'";
      stringArray0[1] = stringArray0[0];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      IteratorUtils.get((Iterator<String>) resettableIterator0, 1);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[8];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("'", sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException(sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("", "'", (-175), (Throwable) null);
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("", "Node must not be null", 1, sQLSyntaxErrorException2);
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("-CXWqwK");
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      SQLSyntaxErrorException sQLSyntaxErrorException7 = new SQLSyntaxErrorException((String) null, "Node must not be null");
      sQLSyntaxErrorExceptionArray0[7] = sQLSyntaxErrorException7;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator1 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      ObjectArrayListIterator<SQLSyntaxErrorException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator1, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator1, (Iterator<? extends SQLSyntaxErrorException>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) orderedIterator0);
      Vector<SQLException> vector0 = new Vector<SQLException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0, (Collection<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      OrderedIterator<String> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<[;fZi%R");
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<IIOMetadataNode>) null, (Transformer<? super IIOMetadataNode, String>) transformer0, "ARDm/crpH `498+mK", "ARDm/crpH `498+mK", "Bf`BWtdgsPO$C.6");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Vector<String> vector0 = new Vector<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(vector0);
      vector0.add("%");
      loopingListIterator0.nextIndex();
      ListIterator<String> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<String>) loopingListIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends String>) listIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("%", "%", true);
      IteratorUtils.singletonIterator(stringTokenizer0);
      IteratorUtils.emptyOrderedIterator();
      ListIteratorWrapper<SQLTransientException> listIteratorWrapper0 = null;
      try {
        listIteratorWrapper0 = new ListIteratorWrapper<SQLTransientException>((Iterator<? extends SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.ListIteratorWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 912, 664);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      ExceptionPredicate.exceptionPredicate();
      UniquePredicate<SQLNonTransientException> uniquePredicate0 = new UniquePredicate<SQLNonTransientException>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) null, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) null, (Collection<? super SQLTransientConnectionException>) arrayDeque0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate<SQLNonTransientException> uniquePredicate1 = new UniquePredicate<SQLNonTransientException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("7a7I~~wNP-b]h~)");
      uniquePredicate1.evaluate(sQLSyntaxErrorException0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", sQLSyntaxErrorException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("7a7I~~wNP-b]h~)", "", 392);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Predicate<? super SQLFeatureNotSupportedException>) uniquePredicate0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      ResettableIterator<String> resettableIterator1 = IteratorUtils.arrayIterator(stringArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<String>) resettableIterator1, 392);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 390
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      UniquePredicate<SQLNonTransientException> uniquePredicate0 = new UniquePredicate<SQLNonTransientException>();
      String string0 = ">xa36#%IYO6DYkH:hb_";
      SQLWarning sQLWarning0 = new SQLWarning(">xa36#%IYO6DYkH:hb_");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLWarning0);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) singletonIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      IteratorUtils.getIterator(resettableListIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 3);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[8];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("prefix may not be null", "prefix may not be null", 701);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("prefix may not be null");
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("Array class must not be null", "suffix may not be null", sQLRecoverableException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("suffix may not be null");
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException((String) null, "Index cannot be negative: ", (-2384), sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("Z$+$xg");
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("transformer may not be null", "cWwR=SOnG$cwl", sQLRecoverableException0);
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      SQLSyntaxErrorException sQLSyntaxErrorException7 = new SQLSyntaxErrorException("Array class must not be null", "Z$+$xg", (-2384));
      sQLSyntaxErrorExceptionArray0[7] = sQLSyntaxErrorException7;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      Predicate<SQLSyntaxErrorException> predicate0 = IdentityPredicate.identityPredicate(sQLSyntaxErrorException5);
      SQLSyntaxErrorException sQLSyntaxErrorException8 = IteratorUtils.find((Iterator<SQLSyntaxErrorException>) resettableListIterator1, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      ArrayIterator<SQLNonTransientConnectionException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLNonTransientConnectionException>(sQLSyntaxErrorException8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ExceptionPredicate.exceptionPredicate();
      UniquePredicate<SQLNonTransientException> uniquePredicate0 = new UniquePredicate<SQLNonTransientException>();
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) orderedIterator0, (Predicate<? super SQLFeatureNotSupportedException>) uniquePredicate0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[7];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode("MZB7jjWIA,Xc");
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      ConstantTransformer<IIOMetadataNode, String> constantTransformer0 = new ConstantTransformer<IIOMetadataNode, String>("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0, (Transformer<? super IIOMetadataNode, String>) constantTransformer0, "", "Collection must not be null", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      TreeSet<SQLSyntaxErrorException> treeSet0 = new TreeSet<SQLSyntaxErrorException>();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super String>) null, (Iterator<? extends String>) null, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) stack0);
      Stack<Predicate<Object>> stack1 = new Stack<Predicate<Object>>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLException sQLException0 = new SQLException("Array class must not be null", "Array class must not be null", sQLTimeoutException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLException0);
      stack0.add(sQLTransactionRollbackException0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<String>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      ExceptionPredicate.exceptionPredicate();
      ListIterator<String> listIterator0 = new SingletonListIterator<String>("Node mut not be null");
      ListIterator<String> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends String>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<String>) listIterator1, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 9
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = " 6D|3mD|\"stW*xr>";
      stringArray0[1] = "transformer may not be null";
      stringArray0[2] = "k8'T_ui7bCrvH(Sl";
      stringArray0[3] = "PTKYjr<Wiu:}F41o*C";
      stringArray0[4] = "";
      stringArray0[5] = "`^oX-:OFMuT0w<h";
      stringArray0[6] = "";
      stringArray0[7] = ":$,<0'(68v$Z";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      IteratorUtils.get((Iterator<String>) resettableIterator0, 1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LinkedHashSet<StringTokenizer> linkedHashSet0 = new LinkedHashSet<StringTokenizer>();
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(linkedHashSet0);
      EqualPredicate.equalPredicate((Object) loopingIterator0);
      UniquePredicate<SQLNonTransientException> uniquePredicate0 = new UniquePredicate<SQLNonTransientException>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLFeatureNotSupportedException[]) null, 731, 731);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) vector0);
      Class<SQLException> class0 = SQLException.class;
      String string0 = "#?/,NJL";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("#?/,NJL", "#?/,NJL");
      vector0.add(sQLInvalidAuthorizationSpecException0);
      InstanceofPredicate.instanceOfPredicate(class0);
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) resettableIterator0, class1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(vector0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      vector0.add(sQLTransientConnectionException0);
      Transformer<SQLException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends String>) hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) loopingListIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      InvokerTransformer.invokerTransformer("");
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.emptyIterator();
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends Locale.Category>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) vector0);
      IteratorUtils.size(resettableListIterator0);
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) stack0);
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 5);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) resettableIterator0;
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) resettableIterator0;
      iteratorArray0[2] = (Iterator<SQLNonTransientConnectionException>) resettableIterator0;
      iteratorArray0[3] = (Iterator<SQLNonTransientConnectionException>) resettableIterator0;
      iteratorArray0[4] = (Iterator<SQLNonTransientConnectionException>) resettableIterator0;
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientConnectionException>) zippingIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<SQLNonTransientException> predicate1 = NotPredicate.notPredicate((Predicate<? super SQLNonTransientException>) predicate0);
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) orderedIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate1);
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      InvokerTransformer.invokerTransformer("");
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.emptyIterator();
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) orderedIterator0;
      iteratorArray0[1] = (Iterator<SQLFeatureNotSupportedException>) orderedIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      Transformer<IIOMetadataNode, String> transformer0 = InvokerTransformer.invokerTransformer("delimiter may not be null");
      IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0, "delimiter may not be null", "ARDm/crpH `498+mK", "delimiter may not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-856));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[7];
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator0 = new ObjectArrayIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      objectArrayIterator0.reset();
      objectArrayIterator0.next();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) objectArrayIterator0, (Iterator<? extends SQLTimeoutException>) objectArrayIterator0);
      IteratorUtils.isEmpty((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      Transformer<IIOMetadataNode, String> transformer0 = InvokerTransformer.invokerTransformer("delimiter may not be null");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "delimiter may not be null");
      IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0, "delimiter may not be null", "ARDm/crpH `498+mK", "delimiter may not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((EnumSet<Locale.Category>[]) null, 20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TruePredicate.truePredicate();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("@<[U>pvg1JZ%ebj2");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      ResettableListIterator<IIOMetadataNode> resettableListIterator1 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      Transformer<IIOMetadataNode, String> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator1, (Transformer<? super IIOMetadataNode, String>) transformer0, "delimiter may not be null", (String) null, "V4XC%\b2Qdo2qC>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ExceptionPredicate.exceptionPredicate();
      UniquePredicate<SQLNonTransientException> uniquePredicate0 = new UniquePredicate<SQLNonTransientException>();
      UniquePredicate.uniquePredicate();
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) orderedIterator0, (Predicate<? super SQLFeatureNotSupportedException>) uniquePredicate0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "'";
      stringArray0[0] = "";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      IteratorUtils.get((Iterator<String>) resettableIterator0, 1);
      Hashtable<SQLClientInfoException, SQLNonTransientConnectionException> hashtable0 = new Hashtable<SQLClientInfoException, SQLNonTransientConnectionException>();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = hashtable0.elements();
      IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object[]) stringArray0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Predicate<SQLException> predicate0 = NotNullPredicate.notNullPredicate();
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) iterator0, class0);
      ResettableIterator<SQLDataException> resettableIterator1 = IteratorUtils.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) resettableIterator1);
      Iterator<SQLDataException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0);
      Iterator<SQLDataException> iterator2 = IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) iterator1, (Iterator<? extends SQLDataException>) iterator1);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLDataException>) iterator2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<String> vector1 = new Vector<String>();
      LoopingListIterator<String> loopingListIterator0 = null;
      try {
        loopingListIterator0 = new LoopingListIterator<String>((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The list must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.LoopingListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      String string0 = "Node must not be null";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Node must not be null", "Node must not be null", 334, sQLFeatureNotSupportedException0);
      sQLTransactionRollbackException0.getLocalizedMessage();
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransactionRollbackException0);
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) listIterator0, 1589);
      IteratorUtils.loopingListIterator(list0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[7];
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator0 = new ObjectArrayIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      objectArrayIterator0.reset();
      objectArrayIterator0.next();
      OrderedMapIterator<SQLTimeoutException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, SQLInvalidAuthorizationSpecException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLInvalidAuthorizationSpecException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLInvalidAuthorizationSpecException>(orderedMapIterator1);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      IteratorUtils.isEmpty(objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      InvokerTransformer.invokerTransformer("");
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.emptyIterator();
      Predicate<SQLNonTransientConnectionException>[] predicateArray0 = (Predicate<SQLNonTransientConnectionException>[]) Array.newInstance(Predicate.class, 0);
      IteratorUtils.arrayListIterator(predicateArray0);
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(arrayList0);
      IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) reverseListIterator0, (Predicate<? super StringTokenizer>) predicate0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 218;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, 218);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableListIterator0, class0);
      IteratorUtils.emptyIterator();
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "");
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      HashMap<Predicate<SQLWarning>, Transformer<Object, String>> hashMap0 = new HashMap<Predicate<SQLWarning>, Transformer<Object, String>>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "org.apache.commons.collections4.iterators.TransformIterator", 5, sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException1, 5, 1419);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends Boolean>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Locale.Category> class0 = Locale.Category.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      DataTruncation dataTruncation0 = new DataTruncation(10, true, true, 10, 10);
      dataTruncation0.getNextWarning();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("*)jx#,U", "hxI.,Yuzhm[2", (Throwable) null);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      HashMap<Predicate<SQLWarning>, Transformer<Object, String>> hashMap0 = new HashMap<Predicate<SQLWarning>, Transformer<Object, String>>();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<String> class0 = String.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>((SQLInvalidAuthorizationSpecException) null);
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      HashMap<Predicate<SQLWarning>, Transformer<Object, String>> hashMap0 = new HashMap<Predicate<SQLWarning>, Transformer<Object, String>>();
      DataTruncation dataTruncation0 = new DataTruncation((-3797), false, true, (-3797), (-203));
      SingletonListIterator<DataTruncation> singletonListIterator1 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) singletonListIterator1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      TruePredicate.truePredicate();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) stack0);
      DataTruncation dataTruncation0 = new DataTruncation(125, false, false, 10, 125);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) listIterator0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)20;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)76;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(list0);
      reverseListIterator0.next();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) reverseListIterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      int int0 = IteratorUtils.size(resettableIterator0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) stack0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientConnectionException>) resettableIterator1);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[3];
      String string0 = null;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(string0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(string0, string0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, int0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientConnectionException>) resettableListIterator1, (Predicate<? super SQLTransientConnectionException>) predicate0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLTransientConnectionException>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) stack0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientConnectionException>) resettableIterator1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) orderedIterator0);
      ResettableIterator<IIOMetadataNode> resettableIterator2 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) list0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>) resettableIterator2, (Iterator<? extends IIOMetadataNode>) resettableIterator2);
      ListIteratorWrapper<IIOMetadataNode> listIteratorWrapper0 = new ListIteratorWrapper<IIOMetadataNode>(iterator0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, transformer0, transformer0);
      IteratorUtils.toString((Iterator<IIOMetadataNode>) listIteratorWrapper0, (Transformer<? super IIOMetadataNode, String>) ifTransformer0, "hsJ/J%cbh@hR", "' threw an exception", "Node must not be null");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, (-1552L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[8];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "", (Throwable) null);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", "Predicate must not be null", 10, (Throwable) null);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("org.apache.commons.collections4.set.AbstractSerializableSetDecorator");
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException((String) null);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("org.apache.commons.collections4.set.AbstractSerializableSetDecorator", "t&7:@", 10, sQLTimeoutException3);
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("NodeList must not be null", "", 10, sQLTimeoutException3);
      sQLTimeoutException5.addSuppressed(sQLTimeoutException3);
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      SQLTimeoutException sQLTimeoutException7 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException3;
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator0 = new ObjectArrayIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      objectArrayIterator0.reset();
      objectArrayIterator0.next();
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) objectArrayIterator0, (Iterator<? extends SQLTimeoutException>) objectArrayIterator0);
      IteratorUtils.isEmpty(zippingIterator0);
      IteratorUtils.toArray((Iterator<?>) objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      SQLException sQLException0 = new SQLException(sQLInvalidAuthorizationSpecException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "", 1, sQLTransactionRollbackException0);
      sQLInvalidAuthorizationSpecException1.spliterator();
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException1);
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      HashMap<Predicate<SQLWarning>, Transformer<Object, String>> hashMap0 = new HashMap<Predicate<SQLWarning>, Transformer<Object, String>>();
      SwitchTransformer.switchTransformer((Map<? extends Predicate<? super SQLWarning>, ? extends Transformer<? super SQLWarning, ? extends String>>) hashMap0);
      IteratorUtils.emptyIterator();
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[8];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[1] = clientInfoStatus1;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[2] = clientInfoStatus2;
      ClientInfoStatus clientInfoStatus3 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[3] = clientInfoStatus3;
      ClientInfoStatus clientInfoStatus4 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[4] = clientInfoStatus4;
      ClientInfoStatus clientInfoStatus5 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[5] = clientInfoStatus5;
      ClientInfoStatus clientInfoStatus6 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[6] = clientInfoStatus6;
      ClientInfoStatus clientInfoStatus7 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[7] = clientInfoStatus7;
      IteratorUtils.arrayListIterator(clientInfoStatusArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      String string0 = "delimiter may not be null";
      IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrderedMapIterator<DataTruncation, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, IIOMetadataNode>(orderedMapIterator0);
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) abstractOrderedMapIteratorDecorator0);
      Vector<SQLException> vector0 = new Vector<SQLException>();
      IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0, (Collection<? super DataTruncation>) vector0);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) resettableIterator0);
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(list0);
      loopingListIterator0.reset();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 100, sQLClientInfoException0);
      EqualPredicate.equalPredicate((Object) sQLFeatureNotSupportedException0);
      IteratorUtils.filteredListIterator((ListIterator<? extends String>) loopingListIterator0, (Predicate<? super String>) uniquePredicate0);
      SQLWarning sQLWarning0 = new SQLWarning();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrderedMapIterator<DataTruncation, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, IIOMetadataNode>(orderedMapIterator0);
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) abstractOrderedMapIteratorDecorator0);
      Vector<SQLException> vector0 = new Vector<SQLException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("kSI", "a|bO|B|;1", (-1418));
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("kSI", "", (-1312), (Map<String, ClientInfoStatus>) null, sQLIntegrityConstraintViolationException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("kSI", "", sQLClientInfoException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientConnectionException0);
      vector0.add((SQLException) sQLInvalidAuthorizationSpecException0);
      IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0, (Collection<? super DataTruncation>) vector0);
      IteratorUtils.matchesAll((Iterator<SQLTransientException>) null, (Predicate<? super SQLTransientException>) uniquePredicate0);
      IteratorUtils.isEmpty(abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientConnectionException, Stack<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      Transformer<IIOMetadataNode, String> transformer0 = new ConstantTransformer<IIOMetadataNode, String>("delimiter may not be null");
      IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0, "delimiter may not be null", "ARDm/crpH `498+mK", "delimiter may not be null");
      EnumSet<ClientInfoStatus>[] enumSetArray0 = (EnumSet<ClientInfoStatus>[]) Array.newInstance(EnumSet.class, 2);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.noneOf(class0);
      enumSetArray0[0] = enumSet0;
      EnumSet<ClientInfoStatus> enumSet1 = EnumSet.noneOf(class0);
      enumSetArray0[1] = enumSet1;
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      enumSet1.add(clientInfoStatus0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(enumSetArray0, 76, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator0 = new ObjectArrayIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttributeNodeNS("61-yM", ",H$Wkg,?9_i$");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      OrderedMapIterator<SQLDataException, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) orderedMapIterator0, (Iterator<? extends SQLDataException>) orderedMapIterator0, (Iterator<? extends SQLDataException>) orderedMapIterator0);
      EmptyIterator.resettableEmptyIterator();
      Class<Properties> class0 = Properties.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Properties>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<SQLNonTransientException> predicate1 = NotPredicate.notPredicate((Predicate<? super SQLNonTransientException>) predicate0);
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) orderedIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate1);
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      Comparator<IIOMetadataNode> comparator1 = (Comparator<IIOMetadataNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0, 0, 0);
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      IteratorUtils.getIterator(hashtable0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator0 = new ObjectArrayIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      objectArrayIterator0.reset();
      IteratorUtils.emptyIterator();
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      SQLException sQLException0 = new SQLException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLException0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.getIterator(hashtable0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator0 = new ObjectArrayIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) "delimiter may not be null");
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      HashMap<Predicate<SQLWarning>, Transformer<Object, String>> hashMap0 = new HashMap<Predicate<SQLWarning>, Transformer<Object, String>>();
      SwitchTransformer.switchTransformer((Map<? extends Predicate<? super SQLWarning>, ? extends Transformer<? super SQLWarning, ? extends String>>) hashMap0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      Transformer<DataTruncation, String> transformer0 = MapTransformer.mapTransformer((Map<? super DataTruncation, ? extends String>) hashMap1);
      Object object0 = new Object();
      hashMap1.put(object0, "delimiter may not be null");
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      IteratorUtils.toString((Iterator<DataTruncation>) zippingIterator0, (Transformer<? super DataTruncation, String>) transformer0);
      LoopingIterator<SQLException> loopingIterator0 = null;
      try {
        loopingIterator0 = new LoopingIterator<SQLException>((Collection<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The collection must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.LoopingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("delimiter may not be null");
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[2];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, sQLTransactionRollbackException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransientConnectionException0);
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTimeoutException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("jJ5L*b", "", (-1548));
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransactionRollbackException1;
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      Transformer<Object, SQLWarning> transformer0 = InvokerTransformer.invokerTransformer("jJ5L*b");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0);
      FalsePredicate.falsePredicate();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", (String) null, hashMap0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<Object> predicate1 = ComparatorPredicate.comparatorPredicate((Object) sQLClientInfoException0, comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Predicate<Object> predicate2 = AndPredicate.andPredicate((Predicate<? super Object>) predicate1, (Predicate<? super Object>) predicate0);
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>(transformer0, predicate0);
      IteratorUtils.matchesAll((Iterator<SQLTransientException>) resettableIterator0, (Predicate<? super SQLTransientException>) predicate2);
      sQLTimeoutException0.fillInStackTrace();
      Vector<SQLSyntaxErrorException> vector0 = new Vector<SQLSyntaxErrorException>();
      IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) vector0);
      IteratorUtils.size(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(vector0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      vector0.add(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(loopingListIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      OrderedMapIterator<Hashtable<SQLClientInfoException, IIOMetadataNode>, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Hashtable<SQLClientInfoException, IIOMetadataNode>, IIOMetadataNode>) orderedMapIterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      TruePredicate.truePredicate();
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[6];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("uCx`", (String) null);
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransactionRollbackException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("uCx`", "TC", 3, sQLFeatureNotSupportedException0);
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException((String) null, "org.apache.commons.collections4.map.AbstractLinkedMap$LinkMapIterator", 3);
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTimeoutException1;
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkMapIterator", sQLTransactionRollbackException0);
      sQLTransientExceptionArray0[3] = sQLTransientException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTransactionRollbackException1;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientExceptionArray0[5] = (SQLTransientException) sQLTransientConnectionException0;
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Object, IIOMetadataNode>[] transformerArray0 = (Transformer<Object, IIOMetadataNode>[]) Array.newInstance(Transformer.class, 2);
      transformerArray0[0] = null;
      transformerArray0[1] = null;
      SwitchTransformer<Object, IIOMetadataNode> switchTransformer0 = new SwitchTransformer<Object, IIOMetadataNode>(predicateArray0, transformerArray0, (Transformer<? super Object, ? extends IIOMetadataNode>) null);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLException>) resettableIterator0, (Transformer<? super SQLException, ? extends IIOMetadataNode>) switchTransformer0);
      IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Iterator<? extends IIOMetadataNode>) iterator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(stack0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) loopingListIterator0, (Iterator<? extends SQLTimeoutException>) loopingListIterator0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<BatchUpdateException, SQLTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<BatchUpdateException, ? extends SQLTransientConnectionException>) orderedMapIterator0);
      SkippingIterator<BatchUpdateException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) orderedMapIterator1, 1L);
      BoundedIterator<BatchUpdateException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) skippingIterator0, 0L, 2969L);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<BatchUpdateException>) boundedIterator0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 10
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("delimiter may not be null");
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      Transformer<IIOMetadataNode, String> transformer0 = InvokerTransformer.invokerTransformer("delimiter may not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0, "delimiter may not be null", "ARDm/crpH `498+mK", "delimiter may not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'delimiter may not be null' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator0 = new ObjectArrayIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      objectArrayIterator0.reset();
      objectArrayIterator0.next();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) objectArrayIterator0, (Iterator<? extends SQLTimeoutException>) objectArrayIterator0);
      IteratorUtils.emptyIterator();
      int int0 = (-487);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 0, (-487));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrderedMapIterator<DataTruncation, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, IIOMetadataNode>(orderedMapIterator0);
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) abstractOrderedMapIteratorDecorator0);
      Vector<SQLException> vector0 = new Vector<SQLException>();
      IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0, (Collection<? super DataTruncation>) vector0);
      IteratorUtils.matchesAll((Iterator<SQLTransientException>) null, (Predicate<? super SQLTransientException>) uniquePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLException>) null, (Transformer<? super SQLException, ? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OrderedIterator<String> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) vector0);
      IteratorUtils.asIterable((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0);
      TreeSet<SQLSyntaxErrorException> treeSet0 = new TreeSet<SQLSyntaxErrorException>();
      LoopingIterator<SQLSyntaxErrorException> loopingIterator0 = new LoopingIterator<SQLSyntaxErrorException>(treeSet0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) loopingIterator0, (Iterator<? extends SQLSyntaxErrorException>) loopingIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableListIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      OrderedMapIterator<Hashtable<SQLClientInfoException, IIOMetadataNode>, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Hashtable<SQLClientInfoException, IIOMetadataNode>, IIOMetadataNode>) orderedMapIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", (String) null);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("TZ!?Qnqg", (String) null, (-1));
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[7];
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransientConnectionException0;
      SQLTransientException sQLTransientException0 = new SQLTransientException("1F%H~/pm0q\"{K]", "b`%pI");
      sQLTransientExceptionArray0[1] = sQLTransientException0;
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTransientConnectionException0;
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransientConnectionException1;
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTransientConnectionException0;
      sQLTransientExceptionArray0[5] = (SQLTransientException) sQLTransientConnectionException1;
      sQLTransientExceptionArray0[6] = (SQLTransientException) sQLTransientConnectionException1;
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      Transformer<Object, SQLWarning> transformer0 = InvokerTransformer.invokerTransformer(" must be Comparable");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLTransientException0, comparator0);
      Predicate<Object> predicate1 = FalsePredicate.falsePredicate();
      AndPredicate.andPredicate((Predicate<? super Object>) predicate1, (Predicate<? super Object>) predicate0);
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>(transformer0, predicate1);
      IteratorUtils.matchesAll((Iterator<SQLTransientException>) resettableIterator0, (Predicate<? super SQLTransientException>) predicate0);
      Vector<SQLSyntaxErrorException> vector0 = new Vector<SQLSyntaxErrorException>();
      IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) vector0);
      IteratorUtils.size(orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      String string0 = "delimiter may not be null";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("delimiter may not be null");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 61);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", false);
      vector0.add(stringTokenizer0);
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(vector0);
      loopingIterator0.size();
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) listIterator0, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNode0.getAttributeNodeNS("\"x\"0'2:$3^~.", "=");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      DataTruncation dataTruncation0 = new DataTruncation(1, false, true, 1, 1);
      Integer integer0 = new Integer(946);
      Vector<String> vector0 = new Vector<String>();
      vector0.add("=");
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(vector0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) iIOMetadataNode0);
      IteratorUtils.filteredListIterator((ListIterator<? extends String>) loopingListIterator0, (Predicate<? super String>) predicate0);
      SQLWarning sQLWarning0 = new SQLWarning();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableListIterator0, class0);
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) resettableIterator0, (Iterator<? extends SQLDataException>) resettableListIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLDataException>) resettableListIterator0);
      IteratorUtils.emptyIterator();
      Integer integer0 = new Integer(0);
      String string0 = "Iterator remove() can only be called once after next()";
      Vector<String> vector0 = new Vector<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(vector0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) class0);
      ListIterator<String> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends String>) loopingListIterator0, (Predicate<? super String>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<String>) listIterator0, 93);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 93
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OrderedMapIterator<SQLDataException, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) orderedMapIterator0, (Iterator<? extends SQLDataException>) orderedMapIterator0, (Iterator<? extends SQLDataException>) orderedMapIterator0);
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<Properties> class0 = Properties.class;
      IteratorUtils.toArray((Iterator<? extends Properties>) resettableIterator0, class0);
      MapIterator<String, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends String, ? extends Integer>) mapIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "}[?9QM\"ywZZ1nQ80}t");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("Entry does not exist: ", "Entry does not exist: ", 1073741824);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[8];
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransientConnectionException1;
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransientConnectionException1;
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTransientConnectionException0;
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransientConnectionException0;
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTransientConnectionException0;
      sQLTransientExceptionArray0[5] = (SQLTransientException) sQLTransientConnectionException1;
      sQLTransientExceptionArray0[6] = (SQLTransientException) sQLTransientConnectionException1;
      sQLTransientExceptionArray0[7] = (SQLTransientException) sQLTransientConnectionException0;
      ResettableIterator<SQLTransientException> resettableIterator1 = IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      Transformer<Object, SQLWarning> transformer0 = InvokerTransformer.invokerTransformer("Entry does not exist: ");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) resettableIterator1, comparator0);
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>(transformer0, predicate1);
      IteratorUtils.matchesAll((Iterator<SQLTransientException>) resettableIterator1, (Predicate<? super SQLTransientException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.getIterator(":JvjS]yv~c99Hg");
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[9];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("qK:H)of&f$|lfu`[Z");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException(sQLRecoverableException1);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException(":JvjS]yv~c99Hg");
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException(":JvjS]yv~c99Hg", "qK:H)of&f$|lfu`[Z");
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException(sQLRecoverableException1);
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      SQLRecoverableException sQLRecoverableException7 = new SQLRecoverableException("nu[r!7}sv");
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException7;
      SQLRecoverableException sQLRecoverableException8 = new SQLRecoverableException(sQLRecoverableException5);
      sQLRecoverableExceptionArray0[8] = sQLRecoverableException8;
      ObjectArrayIterator<SQLRecoverableException> objectArrayIterator0 = new ObjectArrayIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLRecoverableException>) objectArrayIterator0);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLRecoverableException>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      OrderedMapIterator<SQLException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[5];
      SQLDataException sQLDataException0 = new SQLDataException();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("cAxW9y`6nO>", "", 1, sQLDataException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("Ek')h%", "", 1);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException(sQLDataException0);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException(sQLTimeoutException2);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 1, sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("6ZV", sQLTransactionRollbackException0);
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) orderedMapIterator0, (Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      SQLWarning sQLWarning0 = new SQLWarning();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.getIterator((Object) null);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      SQLWarning sQLWarning0 = new SQLWarning();
      TruePredicate.truePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransientException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      SQLWarning sQLWarning0 = new SQLWarning();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[0];
      ResettableIterator<SQLTransientException> resettableIterator1 = IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      IteratorUtils.matchesAll((Iterator<SQLTransientException>) resettableIterator1, (Predicate<? super SQLTransientException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLException>) resettableIterator1, (Transformer<? super SQLException, ? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNode0.getAttributeNodeNS("\"x\"0'2:$3^~.", "=");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      DataTruncation dataTruncation0 = new DataTruncation(1, false, true, 1, 1);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0);
      BoundedIterator<DataTruncation> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) resettableListIterator0, 1L);
      IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) boundedIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) boundedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableListIterator0, class0);
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) resettableIterator0, (Iterator<? extends SQLDataException>) resettableListIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLDataException>) resettableListIterator0);
      IteratorUtils.emptyIterator();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1548));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Iterator remove() can only be called once after next()", "");
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[8];
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransientConnectionException0;
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransientConnectionException0;
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTransientConnectionException0;
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransientConnectionException0;
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTransientConnectionException0;
      sQLTransientExceptionArray0[5] = (SQLTransientException) sQLTransientConnectionException0;
      sQLTransientExceptionArray0[6] = (SQLTransientException) sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("Iterator remove() can only be called once after next()", "", 1073741824);
      sQLTransientExceptionArray0[7] = (SQLTransientException) sQLTransientConnectionException1;
      ResettableIterator<SQLTransientException> resettableIterator1 = IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      Transformer<Object, SQLWarning> transformer0 = InvokerTransformer.invokerTransformer("");
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) integer0, comparator1);
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>(transformer0, predicate1);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLTransientException>) resettableIterator1, (Predicate<? super SQLTransientException>) transformedPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLTransientConnectionException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0);
      SQLWarning sQLWarning0 = new SQLWarning();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[7];
      sQLTransientExceptionArray0[0] = sQLTransientException0;
      sQLTransientExceptionArray0[1] = sQLTransientException0;
      sQLTransientExceptionArray0[2] = sQLTransientException0;
      sQLTransientExceptionArray0[3] = sQLTransientException0;
      sQLTransientExceptionArray0[4] = sQLTransientException0;
      sQLTransientExceptionArray0[5] = sQLTransientException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransientExceptionArray0[6] = (SQLTransientException) sQLTransactionRollbackException0;
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      NotPredicate<SQLException> notPredicate0 = new NotPredicate<SQLException>(predicate0);
      IteratorUtils.matchesAll((Iterator<SQLTransientException>) resettableIterator0, (Predicate<? super SQLTransientException>) notPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLException>) resettableListIterator0, (Transformer<? super SQLException, ? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[9];
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      iIOMetadataNodeArray0[2] = iIOMetadataNode0;
      iIOMetadataNodeArray0[3] = iIOMetadataNode0;
      iIOMetadataNodeArray0[4] = iIOMetadataNode0;
      iIOMetadataNodeArray0[5] = iIOMetadataNode0;
      iIOMetadataNodeArray0[6] = iIOMetadataNode1;
      iIOMetadataNodeArray0[7] = iIOMetadataNode1;
      iIOMetadataNodeArray0[8] = iIOMetadataNode0;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      String string0 = "*CPwS+Dj@+.A-le";
      iIOMetadataNode0.hasChildNodes();
      Transformer<IIOMetadataNode, String> transformer0 = InvokerTransformer.invokerTransformer("*CPwS+Dj@+.A-le");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0, (String) null, (String) null, "d");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, 0);
      HashMap<Predicate<SQLWarning>, Transformer<Object, String>> hashMap0 = new HashMap<Predicate<SQLWarning>, Transformer<Object, String>>();
      SwitchTransformer.switchTransformer((Map<? extends Predicate<? super SQLWarning>, ? extends Transformer<? super SQLWarning, ? extends String>>) hashMap0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.getIterator(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTransactionRollbackException[]) null, 100, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "delimiter may not be null");
      IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      ConstantTransformer<IIOMetadataNode, String> constantTransformer0 = new ConstantTransformer<IIOMetadataNode, String>("delimiter may not be null");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MapIterator<DataTruncation, Iterator<StringTokenizer>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(mapIterator0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) listIteratorWrapper0);
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0, (Collection<? super DataTruncation>) priorityQueue0);
      IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) vector0);
      Class<SQLException> class0 = SQLException.class;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("#?/,NJL", "#?/,NJL");
      SQLWarning sQLWarning0 = new SQLWarning("", "", sQLInvalidAuthorizationSpecException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      sQLInvalidAuthorizationSpecException0.initCause(sQLWarning0);
      vector0.add(sQLInvalidAuthorizationSpecException0);
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.emptyOrderedMapIterator();
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 3);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      classArray0[1] = class1;
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      classArray0[2] = class2;
      InvokerTransformer<IIOMetadataNode, SQLWarning> invokerTransformer0 = new InvokerTransformer<IIOMetadataNode, SQLWarning>("p", classArray0, classArray0);
      InvokerTransformer<IIOMetadataNode, SQLWarning> invokerTransformer1 = new InvokerTransformer<IIOMetadataNode, SQLWarning>("p", classArray0, classArray0);
      Transformer<IIOMetadataNode, SQLWarning>[] transformerArray0 = (Transformer<IIOMetadataNode, SQLWarning>[]) Array.newInstance(Transformer.class, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(transformerArray0, 1300, (-1854));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "Transformer must not be null";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Transformer must not be null");
      MapIterator<Locale.Category, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Locale.Category>) mapIterator0, (Predicate<? super Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 2);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<Properties> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Properties>) resettableListIterator0);
      iteratorArray0[0] = iterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iterator0, 100, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      OrderedMapIterator<SQLDataException, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) orderedMapIterator0, (Iterator<? extends SQLDataException>) orderedMapIterator0, (Iterator<? extends SQLDataException>) orderedMapIterator0);
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<Properties> class0 = Properties.class;
      IteratorUtils.toArray((Iterator<? extends Properties>) resettableIterator0, class0);
      IteratorUtils.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((IIOMetadataNode[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 0, 145);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      TruePredicate.truePredicate();
      OrderedMapIterator<DataTruncation, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, IIOMetadataNode>(orderedMapIterator0);
      SQLWarning sQLWarning0 = new SQLWarning("", "O&udF7UV\u0006m", 100);
      SQLWarning sQLWarning1 = new SQLWarning(sQLWarning0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) listIterator0);
      Stack<Object> stack0 = new Stack<Object>();
      Iterator<DataTruncation> iterator0 = IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0, (Collection<? super DataTruncation>) stack0);
      OrderedIterator<HashMap<IIOMetadataNode, SQLDataException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.contains(iterator0, (Object) orderedIterator0);
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      Transformer<SQLWarning, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super SQLWarning>, ? extends Transformer<? super SQLWarning, ? extends String>>) hashtable0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toString((Iterator<DataTruncation>) resettableListIterator0, (Transformer<? super DataTruncation, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 5);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) resettableIterator0;
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLSyntaxErrorException>) iteratorArray0[0]);
      iteratorArray0[1] = iterator0;
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) arrayList0);
      iteratorArray0[2] = (Iterator<SQLSyntaxErrorException>) resettableListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableIterator0, 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAll((Iterator<SQLTransientException>) null, (Predicate<? super SQLTransientException>) predicate0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) resettableIterator0, (-1548));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PriorityQueue<DataTruncation>[] priorityQueueArray0 = (PriorityQueue<DataTruncation>[]) Array.newInstance(PriorityQueue.class, 9);
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<DataTruncation> priorityQueue1 = new PriorityQueue<DataTruncation>();
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<DataTruncation> priorityQueue2 = new PriorityQueue<DataTruncation>();
      priorityQueueArray0[2] = priorityQueue2;
      Comparator<DataTruncation> comparator0 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<DataTruncation> priorityQueue3 = new PriorityQueue<DataTruncation>(comparator0);
      priorityQueueArray0[3] = priorityQueue3;
      PriorityQueue<DataTruncation> priorityQueue4 = new PriorityQueue<DataTruncation>();
      priorityQueueArray0[4] = priorityQueue4;
      PriorityQueue<DataTruncation> priorityQueue5 = new PriorityQueue<DataTruncation>();
      priorityQueueArray0[5] = priorityQueue5;
      PriorityQueue<DataTruncation> priorityQueue6 = new PriorityQueue<DataTruncation>();
      priorityQueueArray0[6] = priorityQueue6;
      HashSet<DataTruncation> hashSet0 = new HashSet<DataTruncation>();
      PriorityQueue<DataTruncation> priorityQueue7 = new PriorityQueue<DataTruncation>(hashSet0);
      priorityQueueArray0[7] = priorityQueue7;
      PriorityQueue<DataTruncation> priorityQueue8 = new PriorityQueue<DataTruncation>();
      priorityQueueArray0[8] = priorityQueue8;
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("iterator", "iterator", 1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", sQLInvalidAuthorizationSpecException0);
      IteratorUtils.singletonListIterator((SQLException) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Iterator must not be null");
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      HashSet<DataTruncation> hashSet0 = new HashSet<DataTruncation>();
      PriorityQueue<DataTruncation> priorityQueue1 = new PriorityQueue<DataTruncation>((Collection<? extends DataTruncation>) priorityQueue0);
      PriorityQueue<DataTruncation> priorityQueue2 = new PriorityQueue<DataTruncation>();
      Object object0 = new Object();
      IteratorUtils.getIterator("Iterator must not be null");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "Iterator must not be null", 1);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("q<U}gW2q", sQLTimeoutException0);
      IteratorUtils.singletonListIterator((SQLException) sQLTimeoutException1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      OrderedMapIterator<Hashtable<SQLClientInfoException, IIOMetadataNode>, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Hashtable<SQLClientInfoException, IIOMetadataNode>, IIOMetadataNode> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Hashtable<SQLClientInfoException, IIOMetadataNode>, IIOMetadataNode>) orderedMapIterator0);
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) objectArrayListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) objectArrayListIterator0);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      IteratorUtils.isEmpty(resettableListIterator0);
      ResettableListIterator<BatchUpdateException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<BatchUpdateException>) resettableListIterator1);
      IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) listIterator0);
      IteratorUtils.emptyIterator();
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, Properties> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, Properties> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLInvalidAuthorizationSpecException, ? extends Properties>) orderedMapIterator1);
      IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator1, (Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator2);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) properties0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<?>) resettableListIterator0, (Iterator<?>) resettableListIterator0);
      Hashtable<SQLInvalidAuthorizationSpecException, String> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, String>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, String> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, String>(hashtable0);
      int int0 = 100;
      List<SQLInvalidAuthorizationSpecException> list0 = IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0, 100);
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(list0);
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 4);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = null;
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>((SQLFeatureNotSupportedException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Integer integer0 = new Integer(16);
      Transformer<Object, StringTokenizer> transformer0 = InvokerTransformer.invokerTransformer(";xL$}B");
      IteratorUtils.objectGraphIterator((Object) integer0, (Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) integer0, 16, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("delimiter may not be null");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      Transformer<IIOMetadataNode, String> transformer0 = InvokerTransformer.invokerTransformer("delimiter may not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0, "delimiter may not be null", "ARDm/crpH `498+mK", "delimiter may not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'delimiter may not be null' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      OrderedMapIterator<SQLTransientException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("+s@6}N98#q4$a4]7w", "~.fc=>Mw>!I6!z@V1K5");
      Predicate<SQLTransientException> predicate0 = IdentityPredicate.identityPredicate((SQLTransientException) sQLTimeoutException0);
      IteratorUtils.matchesAll((Iterator<SQLTransientException>) orderedMapIterator0, (Predicate<? super SQLTransientException>) predicate0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(".", hashMap0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put((String) null, clientInfoStatus0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("~.fc=>Mw>!I6!z@V1K5", "", map0, sQLClientInfoException0);
      sQLClientInfoException1.spliterator();
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException1);
      // Undeclared exception!
      try { 
        singletonIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.SingletonIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "\\3@W{;Z:0iPG4KPC1";
      int int0 = 0;
      SQLException sQLException0 = new SQLException("iterator", "\u0003@W{;Z:0iPG4KPC1", 0);
      sQLException0.spliterator();
      IteratorUtils.singletonListIterator(sQLException0);
      Iterator<DataTruncation> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      int int0 = 0;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0);
      IteratorUtils.toString((Iterator<Closure<ArrayDeque>>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends String>) null, (long) 0, (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      OrderedMapIterator<Hashtable<SQLClientInfoException, IIOMetadataNode>, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Hashtable<SQLClientInfoException, IIOMetadataNode>, IIOMetadataNode>) orderedMapIterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) objectArrayListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) objectArrayListIterator0);
      IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<BatchUpdateException>) resettableListIterator0);
      IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) listIterator0);
      IteratorUtils.emptyIterator();
      OrderedMapIterator<DataTruncation, IIOMetadataNode> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, IIOMetadataNode>(orderedMapIterator1);
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      IteratorUtils.getIterator(sQLFeatureNotSupportedException1);
      OrderedMapIterator<Stack<SQLTransactionRollbackException>, Object> orderedMapIterator2 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Stack<SQLTransactionRollbackException>, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Stack<SQLTransactionRollbackException>, Object>(orderedMapIterator2);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Stack<SQLTransactionRollbackException>>) abstractMapIteratorDecorator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      OrderedMapIterator<SQLTransientException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("+s@6}N98#q4$a4]7w", "~.fc=>Mw>!I6!z@V1K5");
      Predicate<SQLTransientException> predicate0 = IdentityPredicate.identityPredicate((SQLTransientException) sQLTimeoutException0);
      IteratorUtils.matchesAll((Iterator<SQLTransientException>) orderedMapIterator0, (Predicate<? super SQLTransientException>) predicate0);
      String string0 = "";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int int0 = 3992;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0, 3992, 3992);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      OrderedIterator<ClientInfoStatus> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super Boolean>) comparator0, (Iterator<? extends Boolean>[]) iteratorArray0);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.skippingIterator((Iterator<String>) resettableIterator0, 1L);
      int int0 = 3992;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) orderedIterator0, 3992, 3992);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLWarning0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "42 O7,";
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("oh=x:YjY. U|", "42 O7,", (-162), intArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) batchUpdateException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      OrderedMapIterator<SQLDataException, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) orderedMapIterator0, (Iterator<? extends SQLDataException>) orderedMapIterator0, (Iterator<? extends SQLDataException>) orderedMapIterator0);
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransientConnectionException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      Comparator<SQLIntegrityConstraintViolationException> comparator0 = null;
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator1, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) zippingIterator0, 52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<String> class0 = String.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>((SQLInvalidAuthorizationSpecException) null);
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      HashMap<Predicate<SQLWarning>, Transformer<Object, String>> hashMap0 = new HashMap<Predicate<SQLWarning>, Transformer<Object, String>>();
      Transformer<SQLWarning, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super SQLWarning>, ? extends Transformer<? super SQLWarning, ? extends String>>) hashMap0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      MapTransformer.mapTransformer((Map<? super DataTruncation, ? extends String>) hashMap1);
      IteratorUtils.toString((Iterator<DataTruncation>) resettableIterator0, (Transformer<? super DataTruncation, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      Collection<SQLNonTransientConnectionException> collection0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MapIterator<Properties, Predicate<SQLClientInfoException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      MapIterator<SQLRecoverableException, Locale.Category> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLRecoverableException, Locale.Category> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLRecoverableException, Locale.Category>(mapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) abstractMapIteratorDecorator0, (Predicate<? super SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) vector0);
      Class<SQLException> class0 = SQLException.class;
      String string0 = "#?/,NJL";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("#?/,NJL", "#?/,NJL");
      vector0.add(sQLInvalidAuthorizationSpecException0);
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      assertNotNull(enumeration0);
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(0, int0);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) stack0);
      assertNotNull(resettableIterator1);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientConnectionException>) resettableIterator1);
      assertNotNull(iterator0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      Iterator<SQLNonTransientException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0, (Iterator<? extends SQLNonTransientException>) iterator0);
      assertNotNull(iterator1);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = IteratorUtils.matchesAny(iterator1, (Predicate<? super SQLNonTransientException>) predicate0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) vector0);
      assertNotNull(resettableIterator0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Class<SQLException> class0 = SQLException.class;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("#?/,NJL", "#?/,NJL");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("#?/,NJL", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("#?/,NJL", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: #?/,NJL", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      boolean boolean0 = vector0.add(sQLInvalidAuthorizationSpecException0);
      assertTrue(vector0.contains(sQLInvalidAuthorizationSpecException0));
      assertEquals("[java.sql.SQLInvalidAuthorizationSpecException: #?/,NJL]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals("#?/,NJL", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("#?/,NJL", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: #?/,NJL", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertTrue(boolean0);
      
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      assertNotNull(predicate0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Transformer<IIOMetadataNode, SQLWarning>[] transformerArray0 = (Transformer<IIOMetadataNode, SQLWarning>[]) Array.newInstance(Transformer.class, 2);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 9);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<String> class3 = String.class;
      classArray0[3] = class3;
      Class<String> class4 = String.class;
      classArray0[4] = class4;
      Class<String> class5 = String.class;
      classArray0[5] = class5;
      Class<String> class6 = String.class;
      classArray0[6] = class6;
      Class<String> class7 = String.class;
      classArray0[7] = class7;
      Class<String> class8 = String.class;
      classArray0[8] = class8;
      InvokerTransformer<IIOMetadataNode, SQLWarning> invokerTransformer0 = new InvokerTransformer<IIOMetadataNode, SQLWarning>("OC?=", classArray0, transformerArray0);
      assertNotNull(invokerTransformer0);
      assertEquals(2, transformerArray0.length);
      assertEquals(9, classArray0.length);
      
      transformerArray0[0] = (Transformer<IIOMetadataNode, SQLWarning>) invokerTransformer0;
      InvokerTransformer<IIOMetadataNode, SQLWarning> invokerTransformer1 = new InvokerTransformer<IIOMetadataNode, SQLWarning>("OC?=", classArray0, classArray0);
      assertNotNull(invokerTransformer1);
      assertFalse(invokerTransformer1.equals((Object)invokerTransformer0));
      assertEquals(9, classArray0.length);
      
      transformerArray0[1] = (Transformer<IIOMetadataNode, SQLWarning>) invokerTransformer1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(transformerArray0, (-1854), (-1854));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      SQLWarning sQLWarning0 = new SQLWarning("", "");
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      
      sQLExceptionArray0[0] = (SQLException) sQLWarning0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("[q3X=4Sd%zo[7$6`Eel", "[q3X=4Sd%zo[7$6`Eel", 3230);
      assertNotNull(sQLNonTransientException0);
      assertEquals(3230, sQLNonTransientException0.getErrorCode());
      assertEquals("[q3X=4Sd%zo[7$6`Eel", sQLNonTransientException0.getMessage());
      assertEquals("[q3X=4Sd%zo[7$6`Eel", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: [q3X=4Sd%zo[7$6`Eel", sQLNonTransientException0.toString());
      
      sQLExceptionArray0[1] = (SQLException) sQLNonTransientException0;
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLExceptionArray0[0]);
      assertNotNull(sQLTransientException0);
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLWarning: ", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLWarning: ", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals(7, sQLExceptionArray0.length);
      
      sQLExceptionArray0[2] = (SQLException) sQLTransientException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[q3X=4Sd%zo[7$6`Eel", "");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("[q3X=4Sd%zo[7$6`Eel", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: [q3X=4Sd%zo[7$6`Eel", sQLIntegrityConstraintViolationException0.toString());
      
      sQLExceptionArray0[3] = (SQLException) sQLIntegrityConstraintViolationException0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (Throwable) null);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      
      sQLExceptionArray0[4] = (SQLException) sQLTransientConnectionException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      sQLExceptionArray0[5] = (SQLException) sQLTransactionRollbackException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("g3G;*M%z3h\"qwCLA", "");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: g3G;*M%z3h\"qwCLA", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("g3G;*M%z3h\"qwCLA", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      sQLExceptionArray0[6] = (SQLException) sQLInvalidAuthorizationSpecException0;
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0);
      assertNotNull(resettableIterator0);
      assertEquals(7, sQLExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PriorityQueue<DataTruncation>[] priorityQueueArray0 = (PriorityQueue<DataTruncation>[]) Array.newInstance(PriorityQueue.class, 9);
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<DataTruncation> priorityQueue1 = new PriorityQueue<DataTruncation>();
      assertNotNull(priorityQueue1);
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertEquals(0, priorityQueue1.size());
      
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<DataTruncation> priorityQueue2 = new PriorityQueue<DataTruncation>();
      assertNotNull(priorityQueue2);
      assertFalse(priorityQueue2.equals((Object)priorityQueue0));
      assertFalse(priorityQueue2.equals((Object)priorityQueue1));
      assertEquals(0, priorityQueue2.size());
      
      priorityQueueArray0[2] = priorityQueue2;
      Comparator<DataTruncation> comparator0 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<DataTruncation> priorityQueue3 = new PriorityQueue<DataTruncation>(comparator0);
      assertNotNull(priorityQueue3);
      assertFalse(priorityQueue3.equals((Object)priorityQueue1));
      assertFalse(priorityQueue3.equals((Object)priorityQueue0));
      assertFalse(priorityQueue3.equals((Object)priorityQueue2));
      assertEquals(0, priorityQueue3.size());
      
      priorityQueueArray0[3] = priorityQueue3;
      PriorityQueue<DataTruncation> priorityQueue4 = new PriorityQueue<DataTruncation>();
      assertNotNull(priorityQueue4);
      assertFalse(priorityQueue4.equals((Object)priorityQueue2));
      assertFalse(priorityQueue4.equals((Object)priorityQueue3));
      assertFalse(priorityQueue4.equals((Object)priorityQueue0));
      assertFalse(priorityQueue4.equals((Object)priorityQueue1));
      assertEquals(0, priorityQueue4.size());
      
      priorityQueueArray0[4] = priorityQueue4;
      PriorityQueue<DataTruncation> priorityQueue5 = new PriorityQueue<DataTruncation>();
      assertNotNull(priorityQueue5);
      assertFalse(priorityQueue5.equals((Object)priorityQueue3));
      assertFalse(priorityQueue5.equals((Object)priorityQueue4));
      assertFalse(priorityQueue5.equals((Object)priorityQueue2));
      assertFalse(priorityQueue5.equals((Object)priorityQueue0));
      assertFalse(priorityQueue5.equals((Object)priorityQueue1));
      assertEquals(0, priorityQueue5.size());
      
      priorityQueueArray0[5] = priorityQueue5;
      PriorityQueue<DataTruncation> priorityQueue6 = new PriorityQueue<DataTruncation>();
      assertNotNull(priorityQueue6);
      assertFalse(priorityQueue6.equals((Object)priorityQueue0));
      assertFalse(priorityQueue6.equals((Object)priorityQueue5));
      assertFalse(priorityQueue6.equals((Object)priorityQueue2));
      assertFalse(priorityQueue6.equals((Object)priorityQueue1));
      assertFalse(priorityQueue6.equals((Object)priorityQueue3));
      assertFalse(priorityQueue6.equals((Object)priorityQueue4));
      assertEquals(0, priorityQueue6.size());
      
      priorityQueueArray0[6] = priorityQueue6;
      HashSet<DataTruncation> hashSet0 = new HashSet<DataTruncation>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      PriorityQueue<DataTruncation> priorityQueue7 = new PriorityQueue<DataTruncation>(hashSet0);
      assertNotNull(priorityQueue7);
      assertFalse(priorityQueue7.equals((Object)priorityQueue0));
      assertFalse(priorityQueue7.equals((Object)priorityQueue5));
      assertFalse(priorityQueue7.equals((Object)priorityQueue2));
      assertFalse(priorityQueue7.equals((Object)priorityQueue6));
      assertFalse(priorityQueue7.equals((Object)priorityQueue1));
      assertFalse(priorityQueue7.equals((Object)priorityQueue3));
      assertFalse(priorityQueue7.equals((Object)priorityQueue4));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, priorityQueue7.size());
      
      priorityQueueArray0[7] = priorityQueue7;
      PriorityQueue<DataTruncation> priorityQueue8 = new PriorityQueue<DataTruncation>();
      assertNotNull(priorityQueue8);
      assertFalse(priorityQueue8.equals((Object)priorityQueue5));
      assertFalse(priorityQueue8.equals((Object)priorityQueue7));
      assertFalse(priorityQueue8.equals((Object)priorityQueue1));
      assertFalse(priorityQueue8.equals((Object)priorityQueue3));
      assertFalse(priorityQueue8.equals((Object)priorityQueue6));
      assertFalse(priorityQueue8.equals((Object)priorityQueue4));
      assertFalse(priorityQueue8.equals((Object)priorityQueue2));
      assertFalse(priorityQueue8.equals((Object)priorityQueue0));
      assertEquals(0, priorityQueue8.size());
      
      priorityQueueArray0[8] = priorityQueue8;
      ObjectArrayListIterator<PriorityQueue<DataTruncation>> objectArrayListIterator0 = new ObjectArrayListIterator<PriorityQueue<DataTruncation>>(priorityQueueArray0, 0, 0);
      assertNotNull(objectArrayListIterator0);
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertEquals(9, priorityQueueArray0.length);
      
      ListIterator<PriorityQueue<DataTruncation>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<PriorityQueue<DataTruncation>>) objectArrayListIterator0);
      assertNotNull(listIterator0);
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals(9, priorityQueueArray0.length);
      
      ObjectArrayIterator<Object> objectArrayIterator0 = new ObjectArrayIterator<Object>(priorityQueueArray0, 0);
      assertNotNull(objectArrayIterator0);
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(9, objectArrayIterator0.getEndIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(9, priorityQueueArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Object>) objectArrayIterator0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      OrderedMapIterator<SQLDataException, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) orderedMapIterator0, (Iterator<? extends SQLDataException>) orderedMapIterator0, (Iterator<? extends SQLDataException>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      Class<Properties> class0 = Properties.class;
      Properties[] propertiesArray0 = IteratorUtils.toArray((Iterator<? extends Properties>) resettableIterator0, class0);
      assertNotNull(propertiesArray0);
      assertEquals(0, propertiesArray0.length);
      
      MapIterator<String, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<String, Integer> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends String, ? extends Integer>) mapIterator0);
      assertNotNull(mapIterator1);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      
      int int0 = 2593;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<String>) mapIterator1, 2593);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2593
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Iterator must not be null");
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: Iterator must not be null", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("Iterator must not be null", sQLTimeoutException0.getMessage());
      
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator0 = new ObjectArrayIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      assertNotNull(objectArrayIterator0);
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(1, objectArrayIterator0.getEndIndex());
      assertEquals(1, sQLTimeoutExceptionArray0.length);
      
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) objectArrayIterator0, (Iterator<? extends SQLTimeoutException>) objectArrayIterator0);
      assertNotNull(zippingIterator0);
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(1, objectArrayIterator0.getEndIndex());
      assertEquals(1, sQLTimeoutExceptionArray0.length);
      
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[8];
      int[] intArray0 = new int[6];
      intArray0[0] = 2511;
      intArray0[1] = 2511;
      intArray0[2] = (-1382);
      intArray0[3] = 2511;
      intArray0[4] = 2511;
      intArray0[5] = 2511;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("(Y+@X_[[Ty", "(Y+@X_[[Ty", (-1327), batchUpdateException0);
      assertNotNull(sQLTransientException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals("java.sql.SQLTransientException: (Y+@X_[[Ty", sQLTransientException0.toString());
      assertEquals((-1327), sQLTransientException0.getErrorCode());
      assertEquals("(Y+@X_[[Ty", sQLTransientException0.getSQLState());
      assertEquals("(Y+@X_[[Ty", sQLTransientException0.getMessage());
      
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray0, sQLTransientException0);
      assertNotNull(batchUpdateException1);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals("java.sql.SQLTransientException: (Y+@X_[[Ty", sQLTransientException0.toString());
      assertEquals((-1327), sQLTransientException0.getErrorCode());
      assertEquals("(Y+@X_[[Ty", sQLTransientException0.getSQLState());
      assertEquals("(Y+@X_[[Ty", sQLTransientException0.getMessage());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLTransientException: (Y+@X_[[Ty", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.SQLTransientException: (Y+@X_[[Ty", batchUpdateException1.getMessage());
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {2511, 2511, (-1382), 2511, 2511, 2511}, intArray0);
      
      DataTruncation dataTruncation0 = new DataTruncation(2511, false, false, 2511, 2511, batchUpdateException1);
      assertNotNull(dataTruncation0);
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals("java.sql.SQLTransientException: (Y+@X_[[Ty", sQLTransientException0.toString());
      assertEquals((-1327), sQLTransientException0.getErrorCode());
      assertEquals("(Y+@X_[[Ty", sQLTransientException0.getSQLState());
      assertEquals("(Y+@X_[[Ty", sQLTransientException0.getMessage());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLTransientException: (Y+@X_[[Ty", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.SQLTransientException: (Y+@X_[[Ty", batchUpdateException1.getMessage());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {2511, 2511, (-1382), 2511, 2511, 2511}, intArray0);
      
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(2511, false, false, (-1382), 2511, dataTruncation0);
      assertNotNull(dataTruncation1);
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals("java.sql.SQLTransientException: (Y+@X_[[Ty", sQLTransientException0.toString());
      assertEquals((-1327), sQLTransientException0.getErrorCode());
      assertEquals("(Y+@X_[[Ty", sQLTransientException0.getSQLState());
      assertEquals("(Y+@X_[[Ty", sQLTransientException0.getMessage());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLTransientException: (Y+@X_[[Ty", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.SQLTransientException: (Y+@X_[[Ty", batchUpdateException1.getMessage());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals("22001", dataTruncation1.getSQLState());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {2511, 2511, (-1382), 2511, 2511, 2511}, intArray0);
      
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(2511, false, false, 0, 2511, dataTruncation1);
      assertNotNull(dataTruncation2);
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertFalse(dataTruncation0.equals((Object)dataTruncation1));
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      assertFalse(dataTruncation2.equals((Object)dataTruncation1));
      assertFalse(dataTruncation2.equals((Object)dataTruncation0));
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals("java.sql.SQLTransientException: (Y+@X_[[Ty", sQLTransientException0.toString());
      assertEquals((-1327), sQLTransientException0.getErrorCode());
      assertEquals("(Y+@X_[[Ty", sQLTransientException0.getSQLState());
      assertEquals("(Y+@X_[[Ty", sQLTransientException0.getMessage());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLTransientException: (Y+@X_[[Ty", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.SQLTransientException: (Y+@X_[[Ty", batchUpdateException1.getMessage());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals("22001", dataTruncation1.getSQLState());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation2.toString());
      assertEquals(0, dataTruncation2.getErrorCode());
      assertEquals("22001", dataTruncation2.getSQLState());
      assertEquals("Data truncation", dataTruncation2.getMessage());
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {2511, 2511, (-1382), 2511, 2511, 2511}, intArray0);
      
      dataTruncationArray0[2] = dataTruncation2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("(Y+@X_[[Ty");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: (Y+@X_[[Ty", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("(Y+@X_[[Ty", sQLNonTransientConnectionException0.getMessage());
      
      DataTruncation dataTruncation3 = new DataTruncation(93, true, false, 1575, 333, sQLNonTransientConnectionException0);
      assertNotNull(dataTruncation3);
      assertFalse(dataTruncation3.equals((Object)dataTruncation0));
      assertFalse(dataTruncation3.equals((Object)dataTruncation2));
      assertFalse(dataTruncation3.equals((Object)dataTruncation1));
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: (Y+@X_[[Ty", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("(Y+@X_[[Ty", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation3.toString());
      assertEquals("Data truncation", dataTruncation3.getMessage());
      assertEquals("22001", dataTruncation3.getSQLState());
      assertEquals(0, dataTruncation3.getErrorCode());
      
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(2511, false, false, 0, 93, dataTruncation2);
      assertNotNull(dataTruncation4);
      assertFalse(dataTruncation4.equals((Object)dataTruncation1));
      assertFalse(dataTruncation4.equals((Object)dataTruncation3));
      assertFalse(dataTruncation4.equals((Object)dataTruncation0));
      assertFalse(dataTruncation4.equals((Object)dataTruncation2));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertFalse(dataTruncation0.equals((Object)dataTruncation1));
      assertFalse(dataTruncation0.equals((Object)dataTruncation3));
      assertFalse(dataTruncation0.equals((Object)dataTruncation2));
      assertFalse(dataTruncation1.equals((Object)dataTruncation3));
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      assertFalse(dataTruncation1.equals((Object)dataTruncation2));
      assertFalse(dataTruncation2.equals((Object)dataTruncation1));
      assertFalse(dataTruncation2.equals((Object)dataTruncation3));
      assertFalse(dataTruncation2.equals((Object)dataTruncation0));
      assertEquals(0, dataTruncation4.getErrorCode());
      assertEquals("22001", dataTruncation4.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation4.toString());
      assertEquals("Data truncation", dataTruncation4.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals("java.sql.SQLTransientException: (Y+@X_[[Ty", sQLTransientException0.toString());
      assertEquals((-1327), sQLTransientException0.getErrorCode());
      assertEquals("(Y+@X_[[Ty", sQLTransientException0.getSQLState());
      assertEquals("(Y+@X_[[Ty", sQLTransientException0.getMessage());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLTransientException: (Y+@X_[[Ty", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.SQLTransientException: (Y+@X_[[Ty", batchUpdateException1.getMessage());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals("22001", dataTruncation1.getSQLState());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation2.toString());
      assertEquals(0, dataTruncation2.getErrorCode());
      assertEquals("22001", dataTruncation2.getSQLState());
      assertEquals("Data truncation", dataTruncation2.getMessage());
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {2511, 2511, (-1382), 2511, 2511, 2511}, intArray0);
      
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(0, false, false, 10, 2511, dataTruncation0);
      assertNotNull(dataTruncation5);
      assertFalse(dataTruncation5.equals((Object)dataTruncation4));
      assertFalse(dataTruncation5.equals((Object)dataTruncation3));
      assertFalse(dataTruncation5.equals((Object)dataTruncation0));
      assertFalse(dataTruncation5.equals((Object)dataTruncation2));
      assertFalse(dataTruncation5.equals((Object)dataTruncation1));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertFalse(dataTruncation0.equals((Object)dataTruncation1));
      assertFalse(dataTruncation0.equals((Object)dataTruncation3));
      assertFalse(dataTruncation0.equals((Object)dataTruncation2));
      assertFalse(dataTruncation0.equals((Object)dataTruncation4));
      assertEquals("Data truncation", dataTruncation5.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation5.toString());
      assertEquals("22001", dataTruncation5.getSQLState());
      assertEquals(0, dataTruncation5.getErrorCode());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals("java.sql.SQLTransientException: (Y+@X_[[Ty", sQLTransientException0.toString());
      assertEquals((-1327), sQLTransientException0.getErrorCode());
      assertEquals("(Y+@X_[[Ty", sQLTransientException0.getSQLState());
      assertEquals("(Y+@X_[[Ty", sQLTransientException0.getMessage());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLTransientException: (Y+@X_[[Ty", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.SQLTransientException: (Y+@X_[[Ty", batchUpdateException1.getMessage());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {2511, 2511, (-1382), 2511, 2511, 2511}, intArray0);
      
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation((-851), true, false, 2511, (-1382), dataTruncation2);
      assertNotNull(dataTruncation6);
      assertFalse(dataTruncation6.equals((Object)dataTruncation1));
      assertFalse(dataTruncation6.equals((Object)dataTruncation5));
      assertFalse(dataTruncation6.equals((Object)dataTruncation3));
      assertFalse(dataTruncation6.equals((Object)dataTruncation4));
      assertFalse(dataTruncation6.equals((Object)dataTruncation2));
      assertFalse(dataTruncation6.equals((Object)dataTruncation0));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertFalse(dataTruncation0.equals((Object)dataTruncation5));
      assertFalse(dataTruncation0.equals((Object)dataTruncation1));
      assertFalse(dataTruncation0.equals((Object)dataTruncation3));
      assertFalse(dataTruncation0.equals((Object)dataTruncation2));
      assertFalse(dataTruncation0.equals((Object)dataTruncation4));
      assertFalse(dataTruncation1.equals((Object)dataTruncation3));
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      assertFalse(dataTruncation1.equals((Object)dataTruncation2));
      assertFalse(dataTruncation1.equals((Object)dataTruncation4));
      assertFalse(dataTruncation1.equals((Object)dataTruncation5));
      assertFalse(dataTruncation2.equals((Object)dataTruncation5));
      assertFalse(dataTruncation2.equals((Object)dataTruncation1));
      assertFalse(dataTruncation2.equals((Object)dataTruncation3));
      assertFalse(dataTruncation2.equals((Object)dataTruncation0));
      assertFalse(dataTruncation2.equals((Object)dataTruncation4));
      assertEquals("Data truncation", dataTruncation6.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation6.toString());
      assertEquals("22001", dataTruncation6.getSQLState());
      assertEquals(0, dataTruncation6.getErrorCode());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals("java.sql.SQLTransientException: (Y+@X_[[Ty", sQLTransientException0.toString());
      assertEquals((-1327), sQLTransientException0.getErrorCode());
      assertEquals("(Y+@X_[[Ty", sQLTransientException0.getSQLState());
      assertEquals("(Y+@X_[[Ty", sQLTransientException0.getMessage());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLTransientException: (Y+@X_[[Ty", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.SQLTransientException: (Y+@X_[[Ty", batchUpdateException1.getMessage());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals("22001", dataTruncation1.getSQLState());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation2.toString());
      assertEquals(0, dataTruncation2.getErrorCode());
      assertEquals("22001", dataTruncation2.getSQLState());
      assertEquals("Data truncation", dataTruncation2.getMessage());
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {2511, 2511, (-1382), 2511, 2511, 2511}, intArray0);
      
      dataTruncationArray0[6] = dataTruncation6;
      DataTruncation dataTruncation7 = new DataTruncation((-1327), false, true, 0, 0);
      assertNotNull(dataTruncation7);
      assertFalse(dataTruncation7.equals((Object)dataTruncation3));
      assertFalse(dataTruncation7.equals((Object)dataTruncation4));
      assertFalse(dataTruncation7.equals((Object)dataTruncation5));
      assertFalse(dataTruncation7.equals((Object)dataTruncation6));
      assertFalse(dataTruncation7.equals((Object)dataTruncation0));
      assertFalse(dataTruncation7.equals((Object)dataTruncation2));
      assertFalse(dataTruncation7.equals((Object)dataTruncation1));
      assertEquals("Data truncation", dataTruncation7.getMessage());
      assertEquals(0, dataTruncation7.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation7.toString());
      assertEquals("01004", dataTruncation7.getSQLState());
      
      dataTruncationArray0[7] = dataTruncation7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, 2511);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) listIterator0, (Predicate<? super SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(10, false, false, 10, 2938, (Throwable) null);
      assertNotNull(dataTruncation0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0, 560);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "Nb1gMXw4");
      assertNotNull(sQLTimeoutException0);
      assertEquals("Nb1gMXw4", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Iterator<StringTokenizer> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = "";
      int int0 = 16;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 16, sQLSyntaxErrorException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(16, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLFeatureNotSupportedException0);
      assertNotNull(iterator0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(16, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      
      PriorityQueue<SQLTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLTransientConnectionException>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      // Undeclared exception!
      try { 
        priorityQueue0.add((SQLTransientConnectionException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      OrderedMapIterator<SQLDataException, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) orderedMapIterator0, (Iterator<? extends SQLDataException>) orderedMapIterator0, (Iterator<? extends SQLDataException>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      Class<Properties> class0 = Properties.class;
      Properties[] propertiesArray0 = IteratorUtils.toArray((Iterator<? extends Properties>) resettableIterator0, class0);
      assertNotNull(propertiesArray0);
      assertEquals(0, propertiesArray0.length);
      
      MapIterator<String, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<String, Integer> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends String, ? extends Integer>) mapIterator0);
      assertNotNull(mapIterator1);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      
      ResettableIterator<Properties> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
      assertSame(resettableIterator1, resettableIterator0);
      
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 9);
      OrderedMapIterator<DataTruncation, IIOMetadataNode> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<DataTruncation, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, IIOMetadataNode>(orderedMapIterator1);
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      boolean boolean0 = IteratorUtils.contains((Iterator<DataTruncation>) abstractOrderedMapIteratorDecorator0, (Object) abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertFalse(boolean0);
      
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      assertNotNull(stringTokenizer0);
      assertEquals(0, stringTokenizer0.countTokens());
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
      assertEquals(0, stringTokenizer0.countTokens());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, 0);
      assertNotNull(dataTruncation0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(dataTruncation0);
      assertNotNull(iterator0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLClientInfoException[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableListIterator0, class0);
      assertNotNull(sQLNonTransientExceptionArray0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertEquals(0, sQLNonTransientExceptionArray0.length);
      
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) stack0);
      assertFalse(stack0.contains(predicate0));
      assertNotNull(predicate0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends String>) null, (Predicate<? super String>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, PriorityQueue<SQLRecoverableException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, PriorityQueue<SQLRecoverableException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, PriorityQueue<SQLRecoverableException>>(orderedMapIterator0);
      MapIterator<SQLNonTransientConnectionException, PriorityQueue<SQLRecoverableException>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, PriorityQueue<SQLRecoverableException>>) abstractOrderedMapIteratorDecorator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate1);
      predicateArray0[1] = (Predicate<Object>) nullIsExceptionPredicate0;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(predicate1);
      predicateArray0[2] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate2 = UniquePredicate.uniquePredicate();
      predicateArray0[3] = predicate2;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0, (Predicate<? super SQLNonTransientConnectionException>) allPredicate0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.functors.MapTransformer", "");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("x9Hlk316]h ?{D ", "WrT&\"Q", sQLTimeoutException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("x9Hlk316]h ?{D ", "x9Hlk316]h ?{D ", 512, sQLInvalidAuthorizationSpecException1);
      boolean boolean0 = IteratorUtils.contains(iterator0, (Object) sQLTransactionRollbackException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      String string0 = "";
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLWarning0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator1 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, transformer0, transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) resettableIterator1, (Transformer<? super SQLFeatureNotSupportedException, String>) ifTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLFeatureNotSupportedException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Integer integer0 = new Integer(1068);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      Iterable<Integer> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends Integer>) resettableIterator0);
      ArrayListIterator<Locale.Category> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<Locale.Category>(iterable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "fZDzi6xv(IjZ9";
      stringArray0[2] = "Collection must not be null";
      int int0 = 489;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringArray0, 489);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      OrderedMapIterator<Hashtable<SQLClientInfoException, IIOMetadataNode>, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Hashtable<SQLClientInfoException, IIOMetadataNode>, IIOMetadataNode> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Hashtable<SQLClientInfoException, IIOMetadataNode>, IIOMetadataNode>) orderedMapIterator0);
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) objectArrayListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) objectArrayListIterator0);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableListIterator0);
      ResettableListIterator<BatchUpdateException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<BatchUpdateException>) resettableListIterator1);
      IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) listIterator0);
      IteratorUtils.emptyIterator();
      OrderedMapIterator<DataTruncation, IIOMetadataNode> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, IIOMetadataNode>(orderedMapIterator1);
      boolean boolean1 = IteratorUtils.contains((Iterator<DataTruncation>) abstractOrderedMapIteratorDecorator0, (Object) orderedMapIterator0);
      assertTrue(boolean1 == boolean0);
      
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      Transformer<SQLWarning, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super SQLWarning>, ? extends Transformer<? super SQLWarning, ? extends String>>) hashtable0);
      String string0 = IteratorUtils.toString((Iterator<DataTruncation>) abstractOrderedMapIteratorDecorator0, (Transformer<? super DataTruncation, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableListIterator0, class0);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) stack0);
      MapIterator<SQLTransactionRollbackException, Predicate<SQLException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      assertFalse(listIterator0.hasNext());
      
      IteratorUtils.find((Iterator<SQLTransactionRollbackException>) listIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      int int0 = 100;
      ObjectArrayIterator<SQLInvalidAuthorizationSpecException> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0, 100, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
      Object object0 = new Object();
      ArrayListIterator<SQLTimeoutException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLTimeoutException>(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<Object> iterator0 = IteratorUtils.chainedIterator((Iterator<?>) resettableListIterator0, (Iterator<?>) resettableListIterator0);
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      NotPredicate.notPredicate((Predicate<? super SQLNonTransientException>) predicate0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("fo1Q4FS|L:KO=");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      Transformer<IIOMetadataNode, String> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0, "", "ARDm/crpH `498+mK", "J;Gl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      classLoader0.getParent();
      classLoader0.setDefaultAssertionStatus(false);
      ServiceLoader<SQLTransientConnectionException> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      IteratorUtils.singletonListIterator(serviceLoader0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      IteratorUtils.find((Iterator<Integer>) null, (Predicate<? super Integer>) predicate0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.arrayIterator(locale_CategoryArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      sQLTransientException0.printStackTrace();
      SQLDataException sQLDataException0 = new SQLDataException("NodeList must not be null", sQLTransientException0);
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.singletonListIterator((SQLNonTransientException) sQLDataException0);
      IteratorUtils.isEmpty(listIterator0);
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<SQLNonTransientException> predicate1 = NotPredicate.notPredicate((Predicate<? super SQLNonTransientException>) predicate0);
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) orderedIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate1);
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      Comparator<IIOMetadataNode> comparator1 = (Comparator<IIOMetadataNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0, 0, 0);
      // Undeclared exception!
      try { 
        objectArrayListIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 2019;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("", "", 2019, intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(batchUpdateExceptionArray0, 0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Iterator<SQLTransactionRollbackException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0, 512, 512);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
