/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:59:19 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MapIterator<String, SQLRecoverableException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<String, SQLRecoverableException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, SQLRecoverableException>(mapIterator0);
      MapIterator<String, SQLRecoverableException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends String, ? extends SQLRecoverableException>) abstractMapIteratorDecorator0);
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) mapIterator1, (Iterator<? extends String>) mapIterator1, (Iterator<? extends String>) mapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      ListIterator<Integer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Integer>) resettableListIterator0);
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) resettableListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<String> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<String> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<String>) orderedIterator0);
      Iterator<String> iterator1 = IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) iterator0, (Iterator<? extends String>) orderedIterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 5);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) resettableIterator0;
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) iteratorArray0[0], (Iterator<? extends SQLTimeoutException>) iteratorArray0[0]);
      iteratorArray0[1] = (Iterator<SQLTimeoutException>) zippingIterator0;
      SkippingIterator<SQLTimeoutException> skippingIterator0 = IteratorUtils.skippingIterator(iteratorArray0[1], 0L);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) iteratorArray0[0], (Iterator<? extends SQLTimeoutException>) skippingIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Closure<SQLException> closure0 = ForClosure.forClosure(1253, (Closure<? super SQLException>) null);
      SQLWarning sQLWarning0 = new SQLWarning("TT\"]a\"KHLT.ZavOSB");
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLWarning0, true);
      IteratorUtils.apply((Iterator<SQLException>) singletonIterator0, (Closure<? super SQLException>) closure0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 2);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("} p<A'KUOQy:t1`]", "p<A'KUOQy:t1`]");
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      iteratorArray0[0] = (Iterator<SQLRecoverableException>) listIterator0;
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[3];
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      iteratorArray0[1] = (Iterator<SQLRecoverableException>) resettableIterator0;
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 3889, (Throwable) null);
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0, false);
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(stack0);
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) singletonIterator0, (Iterator<? extends SQLTimeoutException>) loopingListIterator0, (Iterator<? extends SQLTimeoutException>) loopingListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) objectArrayListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("97`AYpz");
      String string0 = IteratorUtils.toString((Iterator<InstanceofPredicate>) listIterator0, (Transformer<? super InstanceofPredicate, String>) transformer0, "Hu~j8qtg(#P", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("97`AYpz97`AYpz", (String) null, 512, sQLTransientException0);
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MapIterator<SQLNonTransientException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLException> class0 = SQLException.class;
      SQLException[] sQLExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLException>) mapIterator0, class0);
      assertEquals(0, sQLExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MapIterator<Properties, SQLInvalidAuthorizationSpecException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) mapIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.emptyListIterator();
      SkippingIterator<InstanceofPredicate> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<InstanceofPredicate>) resettableListIterator0, 0L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      int int0 = IteratorUtils.size(singletonListIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<String> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends String>) orderedIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      stack0.add((SQLFeatureNotSupportedException) null);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) stack0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashSet<SQLWarning>[] hashSetArray0 = (HashSet<SQLWarning>[]) Array.newInstance(HashSet.class, 8);
      ResettableListIterator<HashSet<SQLWarning>> resettableListIterator0 = IteratorUtils.arrayListIterator(hashSetArray0);
      HashSet<SQLWarning> hashSet0 = IteratorUtils.get((Iterator<HashSet<SQLWarning>>) resettableListIterator0, 0);
      assertNull(hashSet0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = IteratorUtils.contains((Iterator<String>) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 3);
      MapIterator<Locale.Category, Hashtable<SQLTransientConnectionException, StringTokenizer>> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[0] = (Iterator<Locale.Category>) mapIterator0;
      MapIterator<Locale.Category, SQLDataException> mapIterator1 = IteratorUtils.emptyMapIterator();
      iteratorArray0[1] = (Iterator<Locale.Category>) mapIterator1;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[8];
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>(locale_CategoryArray0);
      iteratorArray0[2] = (Iterator<Locale.Category>) objectArrayIterator0;
      Iterator<Locale.Category> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) null, (Iterator<? extends Locale.Category>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(mockThrowable0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 8);
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) singletonIterator0;
      iteratorArray0[1] = (Iterator<SQLTransientConnectionException>) singletonIterator0;
      iteratorArray0[2] = (Iterator<SQLTransientConnectionException>) singletonIterator0;
      iteratorArray0[3] = (Iterator<SQLTransientConnectionException>) singletonIterator0;
      iteratorArray0[4] = (Iterator<SQLTransientConnectionException>) singletonIterator0;
      iteratorArray0[5] = (Iterator<SQLTransientConnectionException>) singletonIterator0;
      iteratorArray0[6] = (Iterator<SQLTransientConnectionException>) singletonIterator0;
      iteratorArray0[7] = (Iterator<SQLTransientConnectionException>) singletonIterator0;
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[1];
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.arrayIterator(sQLWarningArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[2];
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 6);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Properties, SQLSyntaxErrorException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[7];
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[5] = instanceofPredicate0;
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<InstanceofPredicate>) resettableListIterator0, (Transformer<? super InstanceofPredicate, String>) transformer0, "", "/F*eU", "/F*eU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class org.apache.commons.collections4.functors.InstanceofPredicate' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[8];
      int[] intArray0 = new int[6];
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.collection.UnmodifiableCollection", "org.apache.commons.collections4.collection.UnmodifiableCollection");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.collection.UnmodifiableCollection", "org.apache.commons.collections4.collection.UnmodifiableCollection", intArray0, sQLDataException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("InstantiateTransformer: Constructor must be public");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) objectArrayIterator0, (Transformer<? super BatchUpdateException, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'InstantiateTransformer: Constructor must be public' on 'class java.sql.BatchUpdateException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<HashSet<SQLWarning>>) null, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, Boolean> factoryTransformer0 = new FactoryTransformer<Object, Boolean>(factory0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(factoryTransformer0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Iterator must not be null", "Iterator must not be null", 2);
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLTransientException>) singletonIterator0, (Predicate<? super SQLTransientException>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Comparator<SQLNonTransientConnectionException> comparator0 = (Comparator<SQLNonTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransientException>) null, (Iterator<? extends SQLTransientException>) null, (Iterator<? extends SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 5);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "J?+kt^jsGukdqb", (-1189));
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientException>) singletonIterator0, (-1L), (long) (-1189));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, TreeSet<SQLNonTransientException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, TreeSet<SQLNonTransientException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, TreeSet<SQLNonTransientException>>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0, (-375L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLClientInfoException[]) null, 48, 48);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[9];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 171, 52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((ClientInfoStatus[]) null, 61);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, 683);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((InstanceofPredicate[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 2448, 91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 2077);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLFeatureNotSupportedException[]) null, 1182, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLFeatureNotSupportedException[]) null, (-97), 1471);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((IIOMetadataNode[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLNonTransientConnectionException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 100, 1622);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "[]", 915);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[7];
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      String string0 = IteratorUtils.toString((Iterator<InstanceofPredicate>) resettableListIterator0, (Transformer<? super InstanceofPredicate, String>) transformer0, "", "/F*eU", "/F*eU");
      assertTrue(resettableListIterator0.hasPrevious());
      assertEquals("/F*eUnullnullnullnullnullnullnull/F*eU", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("");
      IfTransformer<InstanceofPredicate, String> ifTransformer0 = new IfTransformer<InstanceofPredicate, String>(instanceofPredicate0, transformer0, transformer0);
      String string0 = IteratorUtils.toString((Iterator<InstanceofPredicate>) null, (Transformer<? super InstanceofPredicate, String>) ifTransformer0, "p<A'KUOQy:t1`]", "0p()CR", "#BpHNCJc7L*");
      assertEquals("0p()CR#BpHNCJc7L*", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[2];
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<InstanceofPredicate>) resettableListIterator0, (Transformer<? super InstanceofPredicate, String>) null, "/F*eU", "/F*eU", "/F*eU");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ServiceLoader<Integer>[] serviceLoaderArray0 = (ServiceLoader<Integer>[]) Array.newInstance(ServiceLoader.class, 4);
      ResettableListIterator<ServiceLoader<Integer>> resettableListIterator0 = IteratorUtils.arrayListIterator(serviceLoaderArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[1] = (Predicate<Object>) uniquePredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<ServiceLoader<Integer>>) resettableListIterator0, (Predicate<? super ServiceLoader<Integer>>) allPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ServiceLoader<Integer>[] serviceLoaderArray0 = (ServiceLoader<Integer>[]) Array.newInstance(ServiceLoader.class, 1);
      ResettableListIterator<ServiceLoader<Integer>> resettableListIterator0 = IteratorUtils.arrayListIterator(serviceLoaderArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<ServiceLoader<Integer>>) resettableListIterator0, (Predicate<? super ServiceLoader<Integer>>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      ServiceLoader<Integer>[] serviceLoaderArray0 = (ServiceLoader<Integer>[]) Array.newInstance(ServiceLoader.class, 3);
      ResettableListIterator<ServiceLoader<Integer>> resettableListIterator0 = IteratorUtils.arrayListIterator(serviceLoaderArray0, 0, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<ServiceLoader<Integer>>) resettableListIterator0, (Predicate<? super ServiceLoader<Integer>>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("iNH]m<X~3");
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) listIterator0, 1);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<StringTokenizer> class0 = StringTokenizer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.singletonIterator(instanceofPredicate0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Hashtable<DataTruncation, PriorityQueue<SQLDataException>> hashtable0 = new Hashtable<DataTruncation, PriorityQueue<SQLDataException>>();
      EntrySetMapIterator<DataTruncation, PriorityQueue<SQLDataException>> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, PriorityQueue<SQLDataException>>(hashtable0);
      BoundedIterator<SQLWarning> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLWarning>) entrySetMapIterator0, 781L, 1L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[8];
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("InstantiateTransformer: Constructor must be public");
      String string0 = IteratorUtils.toString((Iterator<BatchUpdateException>) objectArrayIterator0, (Transformer<? super BatchUpdateException, String>) transformer0);
      assertFalse(objectArrayIterator0.hasNext());
      assertEquals("[null, null, null, null, null, null, null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>((String) null);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[2];
      ObjectArrayListIterator<InstanceofPredicate> objectArrayListIterator0 = new ObjectArrayListIterator<InstanceofPredicate>(instanceofPredicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<InstanceofPredicate>) objectArrayListIterator0, (Transformer<? super InstanceofPredicate, String>) constantTransformer0, "@bbmm~5PR\"ZZ(D6Oi", " -?OQWoWzshM`},@=t;", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0, true);
      Transformer<InstanceofPredicate, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<InstanceofPredicate>) singletonIterator0, (Transformer<? super InstanceofPredicate, String>) transformer0, "", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ArrayList<ClientInfoStatus> arrayList0 = new ArrayList<ClientInfoStatus>();
      LoopingIterator<ClientInfoStatus> loopingIterator0 = new LoopingIterator<ClientInfoStatus>(arrayList0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      arrayList0.add(clientInfoStatus0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(loopingIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ArrayList<ClientInfoStatus> arrayList0 = new ArrayList<ClientInfoStatus>();
      LoopingIterator<ClientInfoStatus> loopingIterator0 = new LoopingIterator<ClientInfoStatus>(arrayList0);
      int int0 = IteratorUtils.size(loopingIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashSet<SQLWarning>[] hashSetArray0 = (HashSet<SQLWarning>[]) Array.newInstance(HashSet.class, 7);
      ResettableListIterator<HashSet<SQLWarning>> resettableListIterator0 = IteratorUtils.arrayListIterator(hashSetArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<HashSet<SQLWarning>>) resettableListIterator0, 940);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 933
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>();
      SingletonListIterator<HashSet<SQLWarning>> singletonListIterator0 = new SingletonListIterator<HashSet<SQLWarning>>(linkedHashSet0);
      HashSet<SQLWarning> hashSet0 = IteratorUtils.get((Iterator<HashSet<SQLWarning>>) singletonListIterator0, 0);
      assertTrue(hashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      boolean boolean0 = IteratorUtils.isEmpty(singletonListIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      boolean boolean0 = IteratorUtils.isEmpty(listIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<StringTokenizer> class0 = StringTokenizer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("Node must not be null", "Node must not be null", false);
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.singletonListIterator(stringTokenizer0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<StringTokenizer>) listIterator0, (Predicate<? super StringTokenizer>) instanceofPredicate0);
      assertFalse(listIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<StringTokenizer, SQLClientInfoException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<StringTokenizer, SQLClientInfoException>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<StringTokenizer>) abstractMapIteratorDecorator0, (Predicate<? super StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.singletonListIterator(stringTokenizer0);
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<StringTokenizer>) listIterator0, (Predicate<? super StringTokenizer>) predicate0);
      assertTrue(listIterator0.hasPrevious());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-1525));
      integerArray0[0] = integer0;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<Integer>) objectArrayListIterator0, (Object) integerArray0[2]);
      assertEquals(1, objectArrayListIterator0.previousIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ServiceLoader<Integer>[] serviceLoaderArray0 = (ServiceLoader<Integer>[]) Array.newInstance(ServiceLoader.class, 0);
      ResettableListIterator<ServiceLoader<Integer>> resettableListIterator0 = IteratorUtils.arrayListIterator(serviceLoaderArray0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<ServiceLoader<Integer>>) resettableListIterator0, (Predicate<? super ServiceLoader<Integer>>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<ServiceLoader<Integer>>) null, (Predicate<? super ServiceLoader<Integer>>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Integer>) null, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTransientConnectionException0);
      SQLTransientException sQLTransientException0 = IteratorUtils.find((Iterator<SQLTransientException>) singletonIterator0, (Predicate<? super SQLTransientException>) instanceofPredicate0);
      assertNull(sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      SQLTransientException sQLTransientException0 = IteratorUtils.find((Iterator<SQLTransientException>) null, (Predicate<? super SQLTransientException>) predicate0);
      assertNull(sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<SQLTransientException, Integer> hashMap0 = new HashMap<SQLTransientException, Integer>();
      EntrySetMapIterator<SQLTransientException, Integer> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientException, Integer>(hashMap0);
      AbstractMapIteratorDecorator<SQLTransientException, Integer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransientException, Integer>(entrySetMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLTransientException>) abstractMapIteratorDecorator0, (Predicate<? super SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLTransientConnectionException0, true);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("");
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      closureArray0[0] = (Closure<Object>) transformerClosure0;
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLException>) singletonIterator0, (Closure<? super SQLException>) closureArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLTransientConnectionException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TreeSet<Closure<Object>> treeSet0 = new TreeSet<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) treeSet0);
      IteratorUtils.apply((Iterator<SQLException>) null, (Closure<? super SQLException>) closure0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Hashtable<EnumSet<Locale.Category>, Properties> hashtable0 = new Hashtable<EnumSet<Locale.Category>, Properties>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(hashtable0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Hashtable<EnumSet<Locale.Category>, Properties> hashtable0 = new Hashtable<EnumSet<Locale.Category>, Properties>();
      Enumeration<Properties> enumeration0 = hashtable0.elements();
      Iterator<?> iterator0 = IteratorUtils.getIterator(enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(stack0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ListIterator<Integer> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("QARgQ5?R ", "QARgQ5?R ", 213);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "org.apache.commons.collections4.map.AbstractLinkedMap$EntrySetIterator", sQLIntegrityConstraintViolationException0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) listIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLWarning>) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MapIterator<SQLNonTransientException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) mapIterator0, (Class<SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) null);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IIOMetadataNode[] iIOMetadataNodeArray0 = IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) iterator0, class0);
      assertEquals(1, iIOMetadataNodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>((SQLFeatureNotSupportedException) null);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) singletonListIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Uf,da>", "Uf,da>", 2448, (Throwable) null);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      Iterable<SQLNonTransientException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientException>) singletonIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterable<SQLTransientConnectionException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) null, (Collection<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Hashtable<EnumSet<Locale.Category>, Properties> hashtable0 = new Hashtable<EnumSet<Locale.Category>, Properties>();
      Enumeration<Properties> enumeration0 = hashtable0.elements();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Hashtable<EnumSet<Locale.Category>, Properties> hashtable0 = new Hashtable<EnumSet<Locale.Category>, Properties>();
      Enumeration<Properties> enumeration0 = hashtable0.elements();
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) resettableIterator0, 243);
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLException>) resettableListIterator0, (Closure<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      ResettableIterator<String> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends String>) stack0);
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) orderedIterator0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableIterator0, 5);
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) list0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[7];
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) objectArrayListIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) nonePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 5);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) resettableIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) iteratorArray0[0], (Predicate<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Properties>) null, (Predicate<? super Properties>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) null);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) iterator1, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      OrderedMapIterator<SQLDataException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, IIOMetadataNode>(orderedMapIterator0);
      Transformer<SQLDataException, Locale.Category> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<Locale.Category> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) abstractOrderedMapIteratorDecorator0, (Transformer<? super SQLDataException, ? extends Locale.Category>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Transformer<SQLDataException, Locale.Category> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) null, (Transformer<? super SQLDataException, ? extends Locale.Category>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) null, (Iterator<? extends SQLTransientException>) null, (Iterator<? extends SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) null, (Iterator<? extends Locale.Category>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) listIterator0);
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(list0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) reverseListIterator0, (Predicate<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<ArrayDeque<SQLRecoverableException>>) null, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<Iterator<Locale.Category>, Object> hashMap0 = new HashMap<Iterator<Locale.Category>, Object>();
      EntrySetMapIterator<Iterator<Locale.Category>, Object> entrySetMapIterator0 = new EntrySetMapIterator<Iterator<Locale.Category>, Object>(hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Iterator<Locale.Category>>) entrySetMapIterator0, (Transformer<? super Iterator<Locale.Category>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) hashMap0, (-2205), 2089);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(integerArray0, (-1464));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("NodeList must not be null");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0);
      int[] intArray0 = new int[5];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "qeE0y~=/z6a", batchUpdateException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLIntegrityConstraintViolationException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLSyntaxErrorException0, (Equator<Object>) defaultEquator0);
      SQLRecoverableException sQLRecoverableException0 = IteratorUtils.find((Iterator<SQLRecoverableException>) listIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      assertNull(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Hashtable<Locale.LanguageRange, SQLNonTransientException> hashtable0 = new Hashtable<Locale.LanguageRange, SQLNonTransientException>();
      EntrySetMapIterator<Locale.LanguageRange, SQLNonTransientException> entrySetMapIterator0 = new EntrySetMapIterator<Locale.LanguageRange, SQLNonTransientException>(hashtable0);
      MapIterator<Locale.LanguageRange, SQLNonTransientException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Locale.LanguageRange, SQLNonTransientException>) entrySetMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Iterator<SQLClientInfoException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(mockThrowable0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransientException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientException>) comparator0, (Iterator<? extends SQLTransientException>) singletonIterator0, (Iterator<? extends SQLTransientException>) singletonIterator0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.find(iterator0, (Predicate<? super SQLTransientException>) predicate0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, 0, (-1553));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LinkedHashSet<SQLTransientConnectionException>[] linkedHashSetArray0 = (LinkedHashSet<SQLTransientConnectionException>[]) Array.newInstance(LinkedHashSet.class, 6);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(linkedHashSetArray0, 5, (-6013));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = IteratorUtils.toString((Iterator<Hashtable<SQLIntegrityConstraintViolationException, ServiceLoader>>) null);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 6);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) iteratorArray0[0], (Iterator<? extends SQLClientInfoException>) iteratorArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int[] intArray0 = new int[5];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "qeE0y~=/z6a", batchUpdateException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLIntegrityConstraintViolationException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLSyntaxErrorException0, (Equator<Object>) defaultEquator0);
      Transformer<Object, SQLSyntaxErrorException> transformer0 = InvokerTransformer.invokerTransformer("");
      IfTransformer<Object, SQLSyntaxErrorException> ifTransformer0 = new IfTransformer<Object, SQLSyntaxErrorException>(predicate0, transformer0, transformer0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) ifTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) iterator0, 10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLSyntaxErrorException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException> iterator0 = EmptyIterator.emptyIterator();
      BoundedIterator<SQLFeatureNotSupportedException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator0, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "List must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("5tqEOYk", (Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0, 10, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[6];
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 6);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "g`");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0, (-3021));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1543);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) resettableListIterator0, (Transformer<? super SQLDataException, ? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) objectArrayListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }
}
