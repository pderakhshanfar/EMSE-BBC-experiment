/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 21:24:07 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IteratorUtils.singletonIterator(linkedList0);
      Comparator<SQLNonTransientConnectionException> comparator0 = (Comparator<SQLNonTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<SQLNonTransientConnectionException, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLNonTransientConnectionException, Integer> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>) mapIterator1, (Iterator<? extends SQLNonTransientConnectionException>) mapIterator0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      Vector<SQLException> vector0 = new Vector<SQLException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) vector0);
      OrderedMapIterator<StringTokenizer, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<StringTokenizer, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, Integer>(orderedMapIterator0);
      SQLDataException sQLDataException0 = new SQLDataException("^", "Hq]v{49dsvZgR");
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLDataException0);
      IteratorUtils.find((Iterator<StringTokenizer>) abstractOrderedMapIteratorDecorator0, (Predicate<? super StringTokenizer>) predicate0);
      IteratorUtils.getIterator((Object) null);
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.boundedIterator((Iterator<? extends String>) orderedIterator0, 0L, 0L);
      MapIterator<Properties, ClientInfoStatus> mapIterator2 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) mapIterator2);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Y", "^", sQLDataException0);
      IteratorUtils.getIterator(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.size(mapIterator0);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 5);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[7];
      SQLDataException sQLDataException1 = new SQLDataException("Hq]v{49dsvZgR", "", 1, sQLInvalidAuthorizationSpecException0);
      sQLDataExceptionArray0[0] = sQLDataException1;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      SQLDataException sQLDataException2 = new SQLDataException("", sQLTimeoutException0);
      sQLDataExceptionArray0[1] = sQLDataException2;
      sQLDataExceptionArray0[2] = sQLDataException0;
      SQLDataException sQLDataException3 = new SQLDataException("Hq]v{49dsvZgR", "Y", 3);
      sQLDataExceptionArray0[3] = sQLDataException3;
      sQLDataExceptionArray0[4] = sQLDataException0;
      sQLDataExceptionArray0[5] = sQLDataException0;
      sQLDataExceptionArray0[6] = sQLDataException0;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0, 1, 1);
      iteratorArray0[0] = (Iterator<SQLDataException>) resettableIterator0;
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLWarning0, (-284), 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLDataException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("G*q >yspJ9E", "W3<Z/", sQLNonTransientException0);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      Transformer<SQLTimeoutException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTimeoutException>) resettableIterator0, (Transformer<? super SQLTimeoutException, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", "", (int[]) null);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      int[] intArray0 = new int[3];
      intArray0[0] = 25;
      intArray0[1] = 4086;
      intArray0[2] = (-1271);
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("org.apache.commons.collections4.functors.AndPredicate", "", intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, transformer0, transformer0);
      IteratorUtils.toString((Iterator<BatchUpdateException>) resettableIterator0, (Transformer<? super BatchUpdateException, String>) ifTransformer0, "", "org.apache.commons.collections4.functors.AndPredicate", "org.apache.commons.collections4.functors.AndPredicate");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      LinkedList<Integer>[] linkedListArray0 = (LinkedList<Integer>[]) Array.newInstance(LinkedList.class, 6);
      linkedListArray0[1] = linkedList0;
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      ResettableIterator<LinkedList<Integer>> resettableIterator0 = IteratorUtils.arrayIterator(linkedListArray0, 1);
      IteratorUtils.get((Iterator<LinkedList<Integer>>) resettableIterator0, 1);
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, class0);
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      OrderedIterator<BatchUpdateException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) orderedIterator0);
      StringValueTransformer.stringValueTransformer();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[3] = integer0;
      IteratorUtils.arrayIterator(integerArray0);
      FalsePredicate.falsePredicate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      IteratorUtils.getIterator(locale_FilteringMode0);
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.IteratorUtils", sQLTimeoutException0);
      SingletonListIterator<SQLNonTransientException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientException>(sQLIntegrityConstraintViolationException0);
      IteratorUtils.get((Iterator<SQLNonTransientException>) singletonListIterator0, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[7];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Enumeration must not be null");
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException((String) null, sQLTransientConnectionException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("Enumeration must not be null", "", (-1), sQLTimeoutException0);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLDataException sQLDataException0 = new SQLDataException("", "5>oE$%rHN", 914);
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("Gw71", "Enumeration must not be null", (-1), sQLDataException0);
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("5>oE$%rHN", "Gw71", 12, sQLDataException0);
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException("Enumeration must not be null", "Gw71", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 5);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      ResettableIterator<LinkedList<Integer>> resettableIterator0 = IteratorUtils.singletonIterator(linkedList1);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<LinkedList<Integer>>) resettableIterator0, 100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 99
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Properties properties0 = new Properties();
      Integer integer0 = new Integer((-1));
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<Integer>) resettableIterator0, (Predicate<? super Integer>) predicate0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ConstantTransformer.nullTransformer();
      Properties properties0 = new Properties();
      properties0.propertyNames();
      Integer integer0 = new Integer((-1));
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) listIterator0, (Iterator<? extends BatchUpdateException>) listIterator0, (Iterator<? extends BatchUpdateException>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) zippingIterator0, (Transformer<? super BatchUpdateException, String>) null, "vo#((B3L", "QaH,RU;h", "{!Q}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(linkedList0);
      StringValueTransformer.stringValueTransformer();
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      ReverseListIterator<SQLNonTransientConnectionException> reverseListIterator1 = new ReverseListIterator<SQLNonTransientConnectionException>(stack0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) reverseListIterator1);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLNonTransientConnectionException, String>) null, "", "##uXe(raby;", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, class0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer[] integerArray0 = new Integer[17];
      Integer integer0 = new Integer((-349));
      integerArray0[0] = integer0;
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) reverseListIterator0, (Predicate<? super SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>((Integer) (-1));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      IteratorUtils.getIterator(defaultEquator0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      Integer integer0 = new Integer((-1440));
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      IteratorUtils.arrayIterator(integerArray0);
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      DefaultEquator.defaultEquator();
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("z", "2Eh>vS5KxX)", intArray0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0, true);
      ConstantTransformer<BatchUpdateException, String> constantTransformer0 = new ConstantTransformer<BatchUpdateException, String>("z");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) singletonIterator0, (Transformer<? super BatchUpdateException, String>) constantTransformer0, "2Eh>vS5KxX)", "z", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ConstantTransformer.nullTransformer();
      Properties properties0 = new Properties();
      properties0.propertyNames();
      Integer integer0 = new Integer((-1));
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      IteratorUtils.isEmpty((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[3];
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("add() not supported for empty Iterator", sQLDataException0);
      SQLDataException sQLDataException1 = new SQLDataException("", ".`5L&-|Bj", (-2418), sQLSyntaxErrorException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLDataException1);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException0;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, 0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, class0);
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ConstantTransformer.nullTransformer();
      Properties properties0 = new Properties();
      properties0.propertyNames();
      String string0 = "org.apache.commons.collections4.functors.ExceptionTransformer";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.functors.ExceptionTransformer", "org.apache.commons.collections4.functors.ExceptionTransformer", 997, sQLNonTransientException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientConnectionException0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.functors.ExceptionTransformer");
      Transformer<SQLException, SQLIntegrityConstraintViolationException> transformer1 = IfTransformer.ifTransformer((Predicate<? super SQLException>) predicate0, (Transformer<? super SQLException, ? extends SQLIntegrityConstraintViolationException>) transformer0, (Transformer<? super SQLException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.objectGraphIterator(sQLIntegrityConstraintViolationException0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) transformer1);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'org.apache.commons.collections4.functors.ExceptionTransformer' on 'class java.sql.SQLIntegrityConstraintViolationException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TreeSet<SQLTransientException> treeSet0 = new TreeSet<SQLTransientException>();
      ListIterator<StringTokenizer> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) listIterator0, (Predicate<? super StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ExceptionClosure.exceptionClosure();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("grhSY37=C`d;&Jt|]");
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("suffix may not be null", "#+^$p\"&F7F[fHcg1+W4");
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException1);
      ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLRecoverableException>) listIterator0, (Transformer<? super SQLRecoverableException, ? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      NonePredicate<Properties> nonePredicate0 = new NonePredicate<Properties>(predicateArray0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<Integer>) null, (Closure<? super Integer>) closure0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      NonePredicate<Properties> nonePredicate0 = new NonePredicate<Properties>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Properties>) null, (Predicate<? super Properties>) nonePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTimeoutException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("-=", sQLSyntaxErrorException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("-=", sQLNonTransientException0);
      ListIterator<SQLRecoverableException> listIterator1 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      Transformer<Object, SQLWarning> transformer0 = ExceptionTransformer.exceptionTransformer();
      sQLNonTransientException0.printStackTrace();
      Iterator<SQLWarning> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends SQLRecoverableException>) listIterator1, (Transformer<? super SQLRecoverableException, ? extends SQLWarning>) transformer0);
      ListIteratorWrapper<SQLWarning> listIteratorWrapper0 = new ListIteratorWrapper<SQLWarning>(iterator1);
      TreeSet<SQLTransientException> treeSet0 = new TreeSet<SQLTransientException>();
      Iterator<ClientInfoStatus>[] iteratorArray0 = (Iterator<ClientInfoStatus>[]) Array.newInstance(Iterator.class, 0);
      Iterator<ClientInfoStatus> iterator2 = IteratorUtils.chainedIterator((Iterator<? extends ClientInfoStatus>[]) iteratorArray0);
      IteratorUtils.zippingIterator((Iterator<?>) listIterator1, (Iterator<?>) iterator2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ArrayList<Closure<Object>> arrayList0 = new ArrayList<Closure<Object>>();
      LoopingIterator<Closure<Object>> loopingIterator0 = new LoopingIterator<Closure<Object>>(arrayList0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      loopingIterator0.size();
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      linkedList0.add((Closure<Object>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Closure<Object>>) loopingIterator0, (Transformer<? super Closure<Object>, String>) transformer0, (String) null, "f*jZOXHAy", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ExceptionClosure.exceptionClosure();
      OrderedIterator<LinkedList<Integer>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<LinkedList<Integer>>) orderedIterator0, 100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 100
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      DefaultEquator.defaultEquator();
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(arrayList0);
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) reverseListIterator0, (Predicate<? super SQLSyntaxErrorException>) onePredicate0);
      IteratorUtils.size(reverseListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1307);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      NonePredicate<Properties> nonePredicate0 = new NonePredicate<Properties>(predicateArray0);
      IteratorUtils.filteredIterator((Iterator<? extends Properties>) resettableListIterator0, (Predicate<? super Properties>) nonePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MapIterator<SQLRecoverableException, TreeSet<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.isEmpty(mapIterator0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "D6 gN[[yas(=.)rq1");
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      ConstantTransformer<Object, StringTokenizer> constantTransformer0 = new ConstantTransformer<Object, StringTokenizer>((StringTokenizer) null);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      SingletonIterator<ArrayList<IIOMetadataNode>> singletonIterator0 = new SingletonIterator<ArrayList<IIOMetadataNode>>(arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<ArrayList<IIOMetadataNode>>) singletonIterator0, (Predicate<? super ArrayList<IIOMetadataNode>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      DataTruncation dataTruncation0 = new DataTruncation(3724, true, true, 3724, 3724, sQLTransientConnectionException0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      OrderedMapIterator<SQLFeatureNotSupportedException, PriorityQueue<SQLDataException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTransientConnectionException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTransactionRollbackException0, defaultEquator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      DefaultEquator<Locale.FilteringMode> defaultEquator1 = DefaultEquator.defaultEquator();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      EqualPredicate.equalPredicate(class0);
      EqualPredicate.equalPredicate(locale_FilteringMode0, (Equator<Locale.FilteringMode>) defaultEquator1);
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) orderedMapIterator0, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      IteratorUtils.isEmpty(listIterator0);
      IteratorUtils.emptyOrderedIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        iIOMetadataNode0.getElementsByTagNameNS("Predicate must not be null", "N6B{`D9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      OrderedIterator<BatchUpdateException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) orderedIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("z");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("L79m[rL77>", "");
      ConstantTransformer.constantTransformer((SQLTransientException) sQLTimeoutException0);
      HashMap<SQLException, String> hashMap0 = new HashMap<SQLException, String>();
      Transformer<SQLException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<BatchUpdateException>) orderedIterator0, (Transformer<? super BatchUpdateException, String>) transformer0, "delimiter may not be null", "X9", "^+-;");
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator((SQLTransientConnectionException) null);
      TreeSet<SQLTransientException> treeSet0 = new TreeSet<SQLTransientException>();
      LinkedHashSet<Closure<Object>> linkedHashSet1 = new LinkedHashSet<Closure<Object>>();
      Integer integer0 = new Integer(0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) integer0, (Equator<Object>) defaultEquator0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap1 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap1);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(andPredicate0, closure0);
      linkedHashSet1.add(ifClosure0);
      Closure<Object> closure1 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) linkedHashSet1);
      IteratorUtils.apply((Iterator<Transformer<Boolean, LinkedHashSet>>) listIterator0, (Closure<? super Transformer<Boolean, LinkedHashSet>>) closure1);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0);
      ExceptionClosure.exceptionClosure();
      IteratorUtils.emptyOrderedMapIterator();
      Integer integer0 = new Integer(1);
      IteratorUtils.getIterator(zippingIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Predicate<StringTokenizer> predicate0 = NullPredicate.nullPredicate();
      ListIterator<StringTokenizer> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) listIterator0, (Predicate<? super StringTokenizer>) predicate0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>();
      Iterator<SQLDataException> iterator0 = arrayDeque0.iterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLException>) iterator0, 705L);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      OrderedIterator<BatchUpdateException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) orderedIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) linkedHashSet0);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      SingletonIterator<ArrayList<IIOMetadataNode>> singletonIterator0 = new SingletonIterator<ArrayList<IIOMetadataNode>>(arrayList0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.find((Iterator<ArrayList<IIOMetadataNode>>) singletonIterator0, (Predicate<? super ArrayList<IIOMetadataNode>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "D6 gN[[yas(=.)rq1");
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "pJDaYc}:&K");
      OrderedMapIterator<StringTokenizer, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.isEmpty(orderedMapIterator0);
      IteratorUtils.emptyMapIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Ry_iVOM\u0007v%lZB_(");
      Transformer<SQLException, SQLTransactionRollbackException> transformer0 = ExceptionTransformer.exceptionTransformer();
      IfTransformer<SQLTransientException, SQLTransactionRollbackException> ifTransformer0 = new IfTransformer<SQLTransientException, SQLTransactionRollbackException>(instanceofPredicate0, transformer0, transformer0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransactionRollbackException0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) ifTransformer0);
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) iterator0, (Iterator<? extends SQLTransactionRollbackException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(zippingIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      LinkedList<BatchUpdateException> linkedList1 = new LinkedList<BatchUpdateException>();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.isEmpty(resettableIterator0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.size((Iterator<?>) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("", (String) null);
      IteratorUtils.nodeListIterator(nodeList0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[7];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("NodeList must not be null", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("NodeList must not be null", "NodeList must not be null");
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("NodeList must not be null", "NodeList must not be null");
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("NodeList must not be null", "NodeList must not be null", 27, sQLInvalidAuthorizationSpecException3);
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException6;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      HashMap<InstanceofPredicate, Transformer<Object, String>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<Object, String>>(27);
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashMap0);
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Iterator<SQLFeatureNotSupportedException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MapIterator<SQLRecoverableException, TreeSet<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      OrderedMapIterator<SQLSyntaxErrorException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLSyntaxErrorException>) orderedMapIterator0);
      IteratorUtils.isEmpty(mapIterator0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      OrderedMapIterator<SQLFeatureNotSupportedException, ClientInfoStatus> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator1, (Predicate<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      NonePredicate<Properties> nonePredicate0 = new NonePredicate<Properties>(predicateArray0);
      Iterator<Properties> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Properties>) resettableListIterator0, (Predicate<? super Properties>) nonePredicate0);
      IteratorUtils.asIterable((Iterator<? extends Properties>) iterator0);
      Class<Object> class0 = Object.class;
      ServiceLoader.loadInstalled(class0);
      EmptyListIterator.resettableEmptyListIterator();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      Class<Integer> class1 = Integer.class;
      classArray0[0] = class1;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("3};/K(.v}CsE+:", classArray0, classArray0);
      IteratorUtils.toString((Iterator<ServiceLoader<ArrayDeque>>) resettableListIterator0, (Transformer<? super ServiceLoader<ArrayDeque>, String>) invokerTransformer0);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[]", mockThrowable0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLInvalidAuthorizationSpecException0);
      SQLWarning sQLWarning0 = new SQLWarning("3};/K(.v}CsE+:", sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLWarning0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", "Gy?4Z9q&*o^$6R:L", (-1193));
      sQLTimeoutException0.fillInStackTrace();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class0);
      priorityQueue0.add(instanceofPredicate0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      IteratorUtils.matchesAny((Iterator<SQLTimeoutException>) resettableIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", 3442);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Transformer<Object, Properties> transformer0 = ConstantTransformer.nullTransformer();
      Properties properties0 = new Properties();
      properties0.propertyNames();
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) transformer0);
      IteratorUtils.size(iterator0);
      IteratorUtils.size(iterator0);
      IteratorUtils.emptyOrderedMapIterator();
      Integer integer0 = new Integer(1);
      IteratorUtils.getIterator(integer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("~^eyg.V%Mp#+2");
      Predicate<StringTokenizer> predicate0 = NullPredicate.nullPredicate();
      ListIterator<StringTokenizer> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) listIterator0, (Predicate<? super StringTokenizer>) predicate0);
      IteratorUtils.toArray(iterator0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      OrderedIterator<BatchUpdateException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.size(resettableIterator0);
      IteratorUtils.size(orderedIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      Integer integer0 = new Integer(12);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(integer0);
      predicateArray0[0] = (Predicate<Object>) identityPredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      IteratorUtils.getIterator(onePredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("~^eyg.V%Mp#+2");
      NullPredicate.nullPredicate();
      ListIterator<StringTokenizer> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) listIterator0, (Predicate<? super StringTokenizer>) onePredicate0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", "Gy?4Z9q&*o^$6R:L", (-1193));
      sQLTimeoutException0.fillInStackTrace();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      IteratorUtils.matchesAny((Iterator<SQLTimeoutException>) resettableIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      int int0 = 3442;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", 3442);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      LoopingIterator<Closure<Object>> loopingIterator0 = new LoopingIterator<Closure<Object>>(linkedList0);
      ConstantTransformer.nullTransformer();
      loopingIterator0.size();
      linkedList0.add((Closure<Object>) null);
      IteratorUtils.isEmpty(loopingIterator0);
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.size(loopingIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      SQLWarning sQLWarning0 = new SQLWarning("", "");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("", defaultEquator0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) equalPredicate0);
      predicateArray0[2] = predicate1;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(arrayList0);
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) reverseListIterator0, (Predicate<? super SQLSyntaxErrorException>) predicateArray0[0]);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator1 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) reverseListIterator1, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("UE~dGEW]");
      hashSet0.add(sQLFeatureNotSupportedException0);
      LoopingIterator<SQLFeatureNotSupportedException> loopingIterator0 = new LoopingIterator<SQLFeatureNotSupportedException>(hashSet0);
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) loopingIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[1];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      int int0 = (-2883);
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0, int0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      objectArrayIterator0.forEachRemaining(consumer0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLIntegrityConstraintViolationException>) objectArrayIterator0);
      Iterator<Object> iterator1 = IteratorUtils.chainedIterator((Iterator<?>) iterator0, (Iterator<?>) loopingIterator0);
      IteratorUtils.size(iterator1);
      IteratorUtils.loopingIterator((Collection<? extends SQLException>) hashSet0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      int int1 = 2226;
      int int2 = 592;
      IteratorUtils.arrayListIterator(dataTruncationArray0, int1, int2);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "D6 gN[[yas(=.)rq1");
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      ResettableIterator<Boolean> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Comparator<Boolean> comparator0 = (Comparator<Boolean>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      PredicateTransformer<SQLDataException> predicateTransformer0 = new PredicateTransformer<SQLDataException>(predicate0);
      SQLDataException sQLDataException0 = new SQLDataException("c", sQLInvalidAuthorizationSpecException0);
      Boolean boolean0 = predicateTransformer0.transform(sQLDataException0);
      SingletonIterator<Boolean> singletonIterator0 = new SingletonIterator<Boolean>(boolean0);
      Iterator<Boolean> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Boolean>) comparator0, (Iterator<? extends Boolean>) singletonIterator0, (Iterator<? extends Boolean>) resettableIterator0);
      List<Boolean> list0 = IteratorUtils.toList((Iterator<? extends Boolean>) iterator0, 914);
      IteratorUtils.loopingListIterator(list0);
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ArrayListIterator<IIOMetadataNode> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<IIOMetadataNode>(instanceofPredicate0, 914, 77);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      OrderedIterator<BatchUpdateException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) orderedIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Class<SQLTransientException> class0 = SQLTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 7);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(arrayList0);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) loopingListIterator0;
      iteratorArray0[1] = (Iterator<SQLFeatureNotSupportedException>) resettableIterator0;
      iteratorArray0[2] = (Iterator<SQLFeatureNotSupportedException>) resettableIterator0;
      iteratorArray0[3] = (Iterator<SQLFeatureNotSupportedException>) resettableIterator0;
      iteratorArray0[5] = (Iterator<SQLFeatureNotSupportedException>) resettableIterator0;
      iteratorArray0[6] = (Iterator<SQLFeatureNotSupportedException>) resettableIterator0;
      ObjectArrayIterator<Iterator<SQLFeatureNotSupportedException>> objectArrayIterator0 = new ObjectArrayIterator<Iterator<SQLFeatureNotSupportedException>>(iteratorArray0);
      OrderedMapIterator<IIOMetadataNode, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) orderedMapIterator0);
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) orderedMapIterator0, class1);
      MapIterator<Properties, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "D6 gN[[yas(=.)rq1");
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      ConstantTransformer<Object, StringTokenizer> constantTransformer0 = new ConstantTransformer<Object, StringTokenizer>((StringTokenizer) null);
      IteratorUtils.transformedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends StringTokenizer>) constantTransformer0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "pJDaYc}:&K");
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 7);
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ObjectArrayIterator<Iterator<SQLFeatureNotSupportedException>> objectArrayIterator0 = new ObjectArrayIterator<Iterator<SQLFeatureNotSupportedException>>(iteratorArray0);
      OrderedMapIterator<IIOMetadataNode, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) orderedMapIterator0);
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) iterator0, class1);
      MapIterator<Properties, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MapIterator<SQLRecoverableException, TreeSet<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.isEmpty(mapIterator0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[7];
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      Class<String> class1 = String.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[3] = instanceofPredicate3;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[4] = instanceofPredicate4;
      Class<SQLTransactionRollbackException> class2 = SQLTransactionRollbackException.class;
      InstanceofPredicate instanceofPredicate5 = new InstanceofPredicate(class2);
      instanceofPredicateArray0[5] = instanceofPredicate5;
      Class<SQLDataException> class3 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate6 = new InstanceofPredicate(class3);
      instanceofPredicateArray0[6] = instanceofPredicate6;
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.arrayIterator(instanceofPredicateArray0);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) resettableIterator0);
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) list0);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      SingletonIterator<ArrayList<IIOMetadataNode>> singletonIterator0 = new SingletonIterator<ArrayList<IIOMetadataNode>>(arrayList0);
      IteratorUtils.find((Iterator<ArrayList<IIOMetadataNode>>) singletonIterator0, (Predicate<? super ArrayList<IIOMetadataNode>>) instanceofPredicate2);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MapIterator<BatchUpdateException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) mapIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) linkedHashSet0);
      Vector<Class<SQLTransactionRollbackException>>[] vectorArray0 = (Vector<Class<SQLTransactionRollbackException>>[]) Array.newInstance(Vector.class, 15);
      Stack<Class<SQLTransactionRollbackException>> stack0 = new Stack<Class<SQLTransactionRollbackException>>();
      vectorArray0[0] = (Vector<Class<SQLTransactionRollbackException>>) stack0;
      Stack<Class<SQLTransactionRollbackException>> stack1 = new Stack<Class<SQLTransactionRollbackException>>();
      Vector<Class<SQLTransactionRollbackException>> vector0 = new Vector<Class<SQLTransactionRollbackException>>();
      vectorArray0[2] = vector0;
      Stack<Class<SQLTransactionRollbackException>> stack2 = new Stack<Class<SQLTransactionRollbackException>>();
      vectorArray0[3] = (Vector<Class<SQLTransactionRollbackException>>) stack2;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate((Object) vector0, (Equator<Object>) defaultEquator0);
      Predicate<StringTokenizer> predicate0 = NullPredicate.nullPredicate();
      ListIterator<StringTokenizer> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) listIterator0, (Predicate<? super StringTokenizer>) predicate0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, (-1), (-1));
      DataTruncation dataTruncation1 = new DataTruncation(0, true, true, (-2099), 0, dataTruncation0);
      IteratorUtils.getIterator(dataTruncation1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("ugkG$Z^5e4ksK\" mZz}");
      iIOMetadataNode0.getChildNodes();
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      IteratorUtils.emptyIterator();
      ResettableIterator<Boolean> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<Boolean> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Boolean>) null, (Iterator<? extends Boolean>) resettableIterator0, (Iterator<? extends Boolean>) resettableIterator0);
      IteratorUtils.toList((Iterator<? extends Boolean>) resettableIterator0, 2761);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.size(iterator0);
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      Iterator<SQLNonTransientException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) loopingListIterator0);
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) iterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLNonTransientException>) listIterator0, (-750L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      Stack<Class<SQLTransactionRollbackException>> stack0 = new Stack<Class<SQLTransactionRollbackException>>();
      Vector<Class<SQLTransactionRollbackException>> vector0 = new Vector<Class<SQLTransactionRollbackException>>();
      Stack<Class<SQLTransactionRollbackException>> stack1 = new Stack<Class<SQLTransactionRollbackException>>();
      Vector<Class<SQLTransactionRollbackException>> vector1 = new Vector<Class<SQLTransactionRollbackException>>();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) null, (Collection<? super SQLDataException>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0);
      ExceptionClosure.exceptionClosure();
      String string0 = "";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      ConstantTransformer<Object, StringTokenizer> constantTransformer0 = new ConstantTransformer<Object, StringTokenizer>((StringTokenizer) null);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[3];
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 1, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0);
      int int0 = 1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 1);
      NullPredicate.nullPredicate();
      IteratorUtils.emptyMapIterator();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      ResettableIterator<Integer> resettableIterator1 = IteratorUtils.arrayIterator(integerArray0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.matchesAll((Iterator<Integer>) resettableIterator1, (Predicate<? super Integer>) predicate0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      Comparator<SQLException> comparator0 = null;
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 9);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0;
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[1] = iterator0;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator2 = IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      iteratorArray0[2] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLInvalidAuthorizationSpecException[]) null, int0, (-3474));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "D6 gN[[yas(=.)rq1");
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Vector<Class<SQLTransactionRollbackException>> vector0 = new Vector<Class<SQLTransactionRollbackException>>();
      Vector<Class<SQLTransactionRollbackException>> vector1 = new Vector<Class<SQLTransactionRollbackException>>();
      Stack<Class<SQLTransactionRollbackException>> stack0 = new Stack<Class<SQLTransactionRollbackException>>();
      Stack<Class<SQLTransactionRollbackException>> stack1 = new Stack<Class<SQLTransactionRollbackException>>();
      Vector<Class<SQLTransactionRollbackException>> vector2 = new Vector<Class<SQLTransactionRollbackException>>();
      Transformer<StringTokenizer, StringTokenizer> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.objectGraphIterator((StringTokenizer) null, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) singletonListIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      Stack<Class<SQLTransactionRollbackException>> stack0 = new Stack<Class<SQLTransactionRollbackException>>();
      Vector<Class<SQLTransactionRollbackException>> vector0 = new Vector<Class<SQLTransactionRollbackException>>();
      Stack<Class<SQLTransactionRollbackException>> stack1 = new Stack<Class<SQLTransactionRollbackException>>();
      Vector<Class<SQLTransactionRollbackException>> vector1 = new Vector<Class<SQLTransactionRollbackException>>();
      ArrayList<Boolean> arrayList0 = new ArrayList<Boolean>();
      LoopingListIterator<Boolean> loopingListIterator0 = new LoopingListIterator<Boolean>(arrayList0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Boolean>) loopingListIterator0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      LoopingIterator<Closure<Object>> loopingIterator0 = new LoopingIterator<Closure<Object>>(linkedList0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      loopingIterator0.size();
      linkedList0.add((Closure<Object>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Closure<Object>>) loopingIterator0, (Transformer<? super Closure<Object>, String>) transformer0, "Node must not be null", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      String string0 = "";
      SQLWarning sQLWarning0 = new SQLWarning("");
      DefaultEquator.defaultEquator();
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      OrderedMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      OrderedMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator1);
      IteratorUtils.boundedIterator((Iterator<? extends SQLWarning>) orderedMapIterator2, 0L);
      ResettableIterator<Boolean> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.collatedIterator((Comparator<? super Boolean>) null, (Iterator<? extends Boolean>) resettableIterator0, (Iterator<? extends Boolean>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Boolean>) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      OrderedMapIterator<InstanceofPredicate, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.isEmpty(orderedMapIterator0);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) orderedMapIterator0);
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) list0);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      SingletonIterator<ArrayList<IIOMetadataNode>> singletonIterator0 = new SingletonIterator<ArrayList<IIOMetadataNode>>(arrayList0);
      IteratorUtils.find((Iterator<ArrayList<IIOMetadataNode>>) singletonIterator0, (Predicate<? super ArrayList<IIOMetadataNode>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0);
      ExceptionClosure.exceptionClosure();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 1);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLIntegrityConstraintViolationException0, (Equator<Object>) defaultEquator0);
      NullPredicate.nullPredicate();
      ListIterator<StringTokenizer> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) listIterator0, (Predicate<? super StringTokenizer>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((DataTruncation[]) null, 19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getElementsByTagNameNS("", "4fkS*Zc");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      ResettableListIterator<ArrayList<IIOMetadataNode>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      IteratorUtils.find((Iterator<ArrayList<IIOMetadataNode>>) resettableListIterator0, (Predicate<? super ArrayList<IIOMetadataNode>>) predicate0);
      ResettableListIterator<SQLDataException> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLDataException>) resettableListIterator1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0);
      assertNotNull(zippingIterator0);
      
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      assertNotNull(closure0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 1);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(1, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLIntegrityConstraintViolationException0, (Equator<Object>) defaultEquator0);
      assertNotNull(predicate0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(1, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      Predicate<StringTokenizer> predicate1 = NullPredicate.nullPredicate();
      assertNotNull(predicate1);
      
      MapIterator<Integer, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) (-1);
      ResettableIterator<Integer> resettableIterator1 = IteratorUtils.arrayIterator(integerArray0);
      assertFalse(resettableIterator1.equals((Object)resettableIterator0));
      assertNotNull(resettableIterator1);
      assertEquals(1, integerArray0.length);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Integer>) resettableIterator1, (Predicate<? super Integer>) predicate0);
      assertFalse(resettableIterator1.equals((Object)resettableIterator0));
      assertEquals(1, integerArray0.length);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(1, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertFalse(boolean0);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertFalse(resettableIterator0.equals((Object)resettableIterator1));
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      Iterable<Object> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<?>) resettableIterator1);
      assertFalse(resettableIterator1.equals((Object)resettableIterator0));
      assertNotNull(iterable0);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      EmptyIterator.resettableEmptyIterator();
      LinkedList<BatchUpdateException> linkedList1 = new LinkedList<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(linkedList1);
      Transformer<BatchUpdateException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<BatchUpdateException>) reverseListIterator0, (Transformer<? super BatchUpdateException, String>) transformer0, "org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", "Qz");
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0);
      ExceptionClosure.exceptionClosure();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 1);
      DefaultEquator.defaultEquator();
      IteratorUtils.emptyIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("umy", sQLIntegrityConstraintViolationException0);
      Transformer<Object, SQLTimeoutException> transformer0 = InvokerTransformer.invokerTransformer("e-0b/9?ka$");
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'e-0b/9?ka$' on 'class java.sql.SQLTimeoutException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      Stack<Class<SQLTransactionRollbackException>> stack0 = new Stack<Class<SQLTransactionRollbackException>>();
      Vector<Class<SQLTransactionRollbackException>> vector0 = new Vector<Class<SQLTransactionRollbackException>>();
      Stack<Class<SQLTransactionRollbackException>> stack1 = new Stack<Class<SQLTransactionRollbackException>>();
      Vector<Class<SQLTransactionRollbackException>> vector1 = new Vector<Class<SQLTransactionRollbackException>>();
      Stack<Class<SQLTransactionRollbackException>> stack2 = new Stack<Class<SQLTransactionRollbackException>>();
      Stack<Class<SQLTransactionRollbackException>> stack3 = new Stack<Class<SQLTransactionRollbackException>>();
      Vector<Class<SQLTransactionRollbackException>> vector2 = new Vector<Class<SQLTransactionRollbackException>>();
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 3);
      OrderedMapIterator<SQLClientInfoException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLClientInfoException, SQLSyntaxErrorException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends SQLSyntaxErrorException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLSyntaxErrorException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLSyntaxErrorException>(orderedMapIterator1);
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) abstractOrderedMapIteratorDecorator0;
      BoundedIterator<SQLClientInfoException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) orderedMapIterator0, 0L);
      iteratorArray0[1] = (Iterator<SQLClientInfoException>) boundedIterator0;
      Vector<SQLClientInfoException> vector3 = new Vector<SQLClientInfoException>();
      vector3.clear();
      ReverseListIterator<SQLClientInfoException> reverseListIterator0 = new ReverseListIterator<SQLClientInfoException>(vector3);
      iteratorArray0[2] = (Iterator<SQLClientInfoException>) reverseListIterator0;
      IteratorUtils.chainedIterator((Iterator<?>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      EmptyIterator.resettableEmptyIterator();
      LinkedList<BatchUpdateException> linkedList1 = new LinkedList<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(linkedList1);
      StringValueTransformer.stringValueTransformer();
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      serviceLoader0.reload();
      ServiceLoader.load(class1);
      IteratorUtils.singletonIterator(serviceLoader0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.getIterator((Object) null);
      Class<SQLRecoverableException> class2 = SQLRecoverableException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class2);
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 289, (-2452));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(resettableListIterator0);
      predicateArray0[0] = (Predicate<Object>) identityPredicate0;
      NonePredicate<Properties> nonePredicate0 = new NonePredicate<Properties>(predicateArray0);
      Iterator<Properties> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Properties>) resettableListIterator0, (Predicate<? super Properties>) nonePredicate0);
      IteratorUtils.asIterable((Iterator<? extends Properties>) iterator0);
      OrderedMapIterator<SQLSyntaxErrorException, StringTokenizer> orderedMapIterator0 = null;
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, StringTokenizer> abstractOrderedMapIteratorDecorator0 = null;
      try {
        abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, StringTokenizer>((OrderedMapIterator<SQLSyntaxErrorException, StringTokenizer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OrderedMapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      SQLWarning sQLWarning0 = new SQLWarning("-de2-Ry?aAG(i^Vt}]");
      DefaultEquator.defaultEquator();
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      ArrayList<SQLSyntaxErrorException> arrayList1 = new ArrayList<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(arrayList1);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) reverseListIterator0, (Iterator<? extends SQLSyntaxErrorException>) reverseListIterator0);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLSyntaxErrorException>) onePredicate0);
      IteratorUtils.size(reverseListIterator0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
      IteratorUtils.asIterable((Iterator<?>) iterator0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MapIterator<BatchUpdateException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) mapIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) linkedHashSet0);
      Vector<Class<SQLTransactionRollbackException>>[] vectorArray0 = (Vector<Class<SQLTransactionRollbackException>>[]) Array.newInstance(Vector.class, 15);
      Stack<Class<SQLTransactionRollbackException>> stack0 = new Stack<Class<SQLTransactionRollbackException>>();
      vectorArray0[0] = (Vector<Class<SQLTransactionRollbackException>>) stack0;
      Stack<Class<SQLTransactionRollbackException>> stack1 = new Stack<Class<SQLTransactionRollbackException>>();
      Vector<Class<SQLTransactionRollbackException>> vector0 = new Vector<Class<SQLTransactionRollbackException>>();
      vectorArray0[2] = vector0;
      Stack<Class<SQLTransactionRollbackException>> stack2 = new Stack<Class<SQLTransactionRollbackException>>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTimeoutException0);
      IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MapIterator<BatchUpdateException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) mapIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) linkedHashSet0);
      Vector<Class<SQLTransactionRollbackException>>[] vectorArray0 = (Vector<Class<SQLTransactionRollbackException>>[]) Array.newInstance(Vector.class, 8);
      Stack<Class<SQLTransactionRollbackException>> stack0 = new Stack<Class<SQLTransactionRollbackException>>();
      vectorArray0[0] = (Vector<Class<SQLTransactionRollbackException>>) stack0;
      Stack<Class<SQLTransactionRollbackException>> stack1 = new Stack<Class<SQLTransactionRollbackException>>();
      String string0 = "";
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", false);
      ConstantTransformer<Object, StringTokenizer> constantTransformer0 = new ConstantTransformer<Object, StringTokenizer>(stringTokenizer0);
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      EmptyIterator.resettableEmptyIterator();
      StringValueTransformer.stringValueTransformer();
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(predicate0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "4R*k:uQ~ \"T`H'fjlq");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Integer[]) null, (-813));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Comparator<IIOMetadataNode> comparator0 = (Comparator<IIOMetadataNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "List must not be null", 1277);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLSyntaxErrorException0);
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 2);
      Class<DataTruncation> class0 = DataTruncation.class;
      classArray0[0] = class0;
      Class<DataTruncation> class1 = DataTruncation.class;
      classArray0[1] = class1;
      InvokerTransformer<SQLException, SQLInvalidAuthorizationSpecException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLInvalidAuthorizationSpecException>("List must not be null", classArray0, classArray0);
      invokerTransformer0.transform((Object) null);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'List must not be null' on 'class java.sql.SQLInvalidAuthorizationSpecException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      OrderedIterator<BatchUpdateException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) orderedIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("z");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("^+-;", "");
      ConstantTransformer.constantTransformer((SQLTransientException) sQLTimeoutException0);
      IteratorUtils.toString((Iterator<BatchUpdateException>) orderedIterator0, (Transformer<? super BatchUpdateException, String>) constantTransformer0, "L79m[rL77>", "z", "Jt[rC^DF&DBW.dE");
      IteratorUtils.singletonListIterator((SQLTransientConnectionException) null);
      TreeSet<SQLTransientException> treeSet0 = new TreeSet<SQLTransientException>();
      LinkedHashSet<Closure<Object>> linkedHashSet1 = new LinkedHashSet<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) linkedHashSet1);
      IteratorUtils.apply((Iterator<Transformer<Boolean, LinkedHashSet>>) resettableIterator0, (Closure<? super Transformer<Boolean, LinkedHashSet>>) closure0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      ListIterator<ArrayDeque<SQLFeatureNotSupportedException>> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<ArrayDeque<SQLFeatureNotSupportedException>>) listIterator0, (Closure<? super ArrayDeque<SQLFeatureNotSupportedException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MapIterator<BatchUpdateException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) mapIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) linkedHashSet0);
      OrderedMapIterator<ArrayDeque<SQLFeatureNotSupportedException>, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<ArrayDeque<SQLFeatureNotSupportedException>, SQLInvalidAuthorizationSpecException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<ArrayDeque<SQLFeatureNotSupportedException>, ? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<ArrayDeque<SQLFeatureNotSupportedException>>) orderedMapIterator1, (Closure<? super ArrayDeque<SQLFeatureNotSupportedException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) resettableIterator0);
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(list0);
      Transformer<BatchUpdateException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<BatchUpdateException>) reverseListIterator0, (Transformer<? super BatchUpdateException, String>) transformer0, "", "", "z");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("J0F?n}AF~9Em", "#cP-PwF=j)iNlnHZK/", (Throwable) null);
      sQLTransactionRollbackException0.getStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      OrderedMapIterator<InstanceofPredicate, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      OrderedMapIterator<SQLSyntaxErrorException, DataTruncation> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLSyntaxErrorException>) orderedMapIterator1);
      IteratorUtils.isEmpty(orderedMapIterator0);
      IteratorUtils.emptyMapIterator();
      ArrayDeque<SQLTimeoutException>[] arrayDequeArray0 = (ArrayDeque<SQLTimeoutException>[]) Array.newInstance(ArrayDeque.class, 2);
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      arrayDequeArray0[0] = arrayDeque0;
      arrayDequeArray0[1] = arrayDeque0;
      AndPredicate<Integer> andPredicate0 = new AndPredicate<Integer>((Predicate<? super Integer>) null, (Predicate<? super Integer>) null);
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Hashtable<Locale.FilteringMode, String> hashtable0 = new Hashtable<Locale.FilteringMode, String>();
      EntrySetMapIterator<Locale.FilteringMode, String> entrySetMapIterator0 = new EntrySetMapIterator<Locale.FilteringMode, String>(hashtable0);
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(hashtable1);
      SQLWarning sQLWarning0 = new SQLWarning("");
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      StringTokenizer stringTokenizer1 = new StringTokenizer("", "");
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[2];
      stringTokenizerArray0[0] = stringTokenizer0;
      stringTokenizerArray0[1] = stringTokenizer0;
      ObjectArrayListIterator<StringTokenizer> objectArrayListIterator0 = new ObjectArrayListIterator<StringTokenizer>(stringTokenizerArray0);
      HashSet<SQLTransientException> hashSet0 = new HashSet<SQLTransientException>();
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientException>) hashSet0);
      SkippingIterator<SQLTransientException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLTransientException>) resettableIterator0, 1400L);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientException>) skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Iterable<Properties> iterable0 = new LinkedList<Properties>();
      ListIterator<SQLException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.skippingIterator((Iterator<SQLException>) listIterator0, 0L);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "D6 gN[[yas(=.)rq1");
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      ConstantTransformer<Object, StringTokenizer> constantTransformer0 = new ConstantTransformer<Object, StringTokenizer>((StringTokenizer) null);
      IteratorUtils.transformedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends StringTokenizer>) constantTransformer0);
      AndPredicate<Integer> andPredicate0 = new AndPredicate<Integer>((Predicate<? super Integer>) null, (Predicate<? super Integer>) null);
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableIterator0);
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0);
      ZippingIterator<Integer> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) zippingIterator0, (Iterator<? extends Integer>) zippingIterator0, (Iterator<? extends Integer>) resettableIterator0);
      IteratorUtils.toListIterator((Iterator<? extends Integer>) zippingIterator1);
      // Undeclared exception!
      try { 
        OrPredicate.orPredicate((Predicate<? super String>) null, (Predicate<? super String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.OrPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Hashtable<Locale.FilteringMode, String> hashtable0 = new Hashtable<Locale.FilteringMode, String>();
      EntrySetMapIterator<Locale.FilteringMode, String> entrySetMapIterator0 = new EntrySetMapIterator<Locale.FilteringMode, String>(hashtable0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      SQLWarning sQLWarning0 = new SQLWarning("");
      DefaultEquator.defaultEquator();
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) entrySetMapIterator0, (Predicate<? super Locale.FilteringMode>) onePredicate0);
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(arrayList0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", (-173));
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) resettableIterator0, (Predicate<? super SQLSyntaxErrorException>) onePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.OnePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Properties properties0 = new Properties();
      Transformer<Object, Properties> transformer0 = ConstantTransformer.nullTransformer();
      Enumeration<?> enumeration0 = properties0.propertyNames();
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) transformer0);
      IteratorUtils.size(iterator0);
      IteratorUtils.size(iterator0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.getIterator(enumeration0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("=#3fgV<`>/'g");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("GbqN_k");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("GbqN_k");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Iterator<ClientInfoStatus>[] iteratorArray0 = (Iterator<ClientInfoStatus>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<ClientInfoStatus> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends ClientInfoStatus>[]) iteratorArray0);
      IteratorUtils.size(zippingIterator0);
      ArrayListIterator<SQLTransientConnectionException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLTransientConnectionException>(zippingIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) stack0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>) resettableListIterator0, (Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      Comparator<SQLNonTransientException> comparator1 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<SQLClientInfoException, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) mapIterator0);
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 1);
      ObjectArrayIterator<Iterator<SQLFeatureNotSupportedException>> objectArrayIterator0 = new ObjectArrayIterator<Iterator<SQLFeatureNotSupportedException>>(iteratorArray0);
      IteratorUtils.chainedIterator((Iterator<?>) objectArrayIterator0, (Iterator<?>) iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("rP1fQ_=?");
      iIOMetadataNode0.getNextSibling();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getPreviousSibling();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("ugkG$Z^5e4ksK\" mZz}");
      assertNotNull(iIOMetadataNode0);
      
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("org.apache.commons.collections4.IteratorUtils", "");
      assertNotNull(nodeList0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      assertNotNull(nodeListIterator0);
      
      EmptyListIterator.resettableEmptyListIterator();
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      ArrayList<IIOMetadataNode>[] arrayListArray0 = (ArrayList<IIOMetadataNode>[]) Array.newInstance(ArrayList.class, 0);
      ResettableListIterator<ArrayList<IIOMetadataNode>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayListArray0);
      IteratorUtils.find((Iterator<ArrayList<IIOMetadataNode>>) resettableListIterator0, (Predicate<? super ArrayList<IIOMetadataNode>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0);
      ExceptionClosure.exceptionClosure();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 1);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate((Object) sQLIntegrityConstraintViolationException0, (Equator<Object>) defaultEquator0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "D6 gN[[yas(=.)rq1");
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      ConstantTransformer<Object, StringTokenizer> constantTransformer0 = new ConstantTransformer<Object, StringTokenizer>((StringTokenizer) null);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends StringTokenizer>) constantTransformer0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "pJDaYc}:&K");
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("Iterator must not be null", (String) null, 0, sQLTimeoutException0);
      OrderedMapIterator<StringTokenizer, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<StringTokenizer, SQLNonTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<StringTokenizer, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<StringTokenizer, ? extends SQLNonTransientConnectionException>) orderedMapIterator1);
      IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) iterator0);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      ArrayList<SQLIntegrityConstraintViolationException> arrayList1 = new ArrayList<SQLIntegrityConstraintViolationException>();
      ArrayList<SQLIntegrityConstraintViolationException> arrayList2 = new ArrayList<SQLIntegrityConstraintViolationException>();
      ArrayList<SQLIntegrityConstraintViolationException> arrayList3 = new ArrayList<SQLIntegrityConstraintViolationException>();
      ArrayList<SQLIntegrityConstraintViolationException> arrayList4 = new ArrayList<SQLIntegrityConstraintViolationException>();
      ArrayList<SQLIntegrityConstraintViolationException> arrayList5 = new ArrayList<SQLIntegrityConstraintViolationException>();
      ArrayList<SQLIntegrityConstraintViolationException>[] arrayListArray0 = (ArrayList<SQLIntegrityConstraintViolationException>[]) Array.newInstance(ArrayList.class, 0);
      int int0 = (-634);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(arrayListArray0, 0, (-634));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[7];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.list.CursorableLinkedList$Cursor", "~(~PS", (Throwable) null);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("l8x7*", "l8x7*", 19);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLWarning sQLWarning0 = new SQLWarning("~(~PS", sQLRecoverableException0);
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException(sQLWarning0);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException(sQLRecoverableException2);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("Node must not be null");
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException("org.apache.commons.collections4.iterators.PushbackIterator", "org.apache.commons.collections4.iterators.PushbackIterator");
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 19, 19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLRecoverableException, Integer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLRecoverableException, ? extends Integer>) orderedMapIterator0);
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) orderedMapIterator1, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      SQLWarning sQLWarning0 = new SQLWarning("");
      DefaultEquator.defaultEquator();
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(arrayList0);
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) reverseListIterator0, (Predicate<? super SQLSyntaxErrorException>) onePredicate0);
      IteratorUtils.size(reverseListIterator0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
      IteratorUtils.toString((Iterator<Locale.FilteringMode>) null);
      Stack<DataTruncation>[] stackArray0 = (Stack<DataTruncation>[]) Array.newInstance(Stack.class, 5);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      stackArray0[0] = stack0;
      Stack<DataTruncation> stack1 = new Stack<DataTruncation>();
      stackArray0[1] = stack1;
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 4664, 4664, batchUpdateException0);
      stack0.add(dataTruncation0);
      Stack<DataTruncation> stack2 = new Stack<DataTruncation>();
      stackArray0[2] = stack2;
      Stack<DataTruncation> stack3 = new Stack<DataTruncation>();
      stackArray0[3] = stack3;
      Stack<DataTruncation> stack4 = new Stack<DataTruncation>();
      stackArray0[4] = stack4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stackArray0, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("ugkG$Z^5e4ksK\" mZz}");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("ugkG$Z^5e4ksK\" mZz}", "");
      IteratorUtils.nodeListIterator(nodeList0);
      EmptyListIterator.resettableEmptyListIterator();
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      IteratorUtils.emptyMapIterator();
      SQLDataException sQLDataException0 = new SQLDataException("[", "");
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0, false);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) singletonIterator0, (Transformer<? super SQLDataException, String>) transformer0, "g;)je)~I~Es-6", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      OrderedIterator<BatchUpdateException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) orderedIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) linkedHashSet0);
      Stack<Class<SQLTransactionRollbackException>> stack0 = new Stack<Class<SQLTransactionRollbackException>>();
      Stack<Class<SQLTransactionRollbackException>> stack1 = new Stack<Class<SQLTransactionRollbackException>>();
      Vector<Class<SQLTransactionRollbackException>> vector0 = new Vector<Class<SQLTransactionRollbackException>>();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      vector0.add(class0);
      Stack<Class<SQLTransactionRollbackException>> stack2 = new Stack<Class<SQLTransactionRollbackException>>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate((Object) vector0, (Equator<Object>) defaultEquator0);
      NullPredicate.nullPredicate();
      EmptyListIterator.emptyListIterator();
      IteratorUtils.toArray(iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      EmptyIterator.resettableEmptyIterator();
      StringValueTransformer.stringValueTransformer();
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(predicate0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "4R*k:uQ~ \"T`H'fjlq");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate1);
      TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) predicateTransformer0);
      MapIterator<Integer, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.matchesAll((Iterator<Integer>) mapIterator0, (Predicate<? super Integer>) equalPredicate0);
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(linkedList0);
      StringValueTransformer.stringValueTransformer();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) reverseListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) linkedList0);
      IteratorUtils.size(reverseListIterator0);
      LinkedHashSet<Closure<Object>> linkedHashSet0 = new LinkedHashSet<Closure<Object>>();
      SingletonListIterator<HashSet<Closure<Object>>> singletonListIterator0 = new SingletonListIterator<HashSet<Closure<Object>>>(linkedHashSet0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("NmN.&0_vq_skR;");
      IteratorUtils.toString((Iterator<HashSet<Closure<Object>>>) singletonListIterator0, (Transformer<? super HashSet<Closure<Object>>, String>) constantTransformer0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[9];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("[NmN.&0_vq_skR;]");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode();
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[7] = iIOMetadataNode7;
      IIOMetadataNode iIOMetadataNode8 = new IIOMetadataNode("O6Fxy6AK");
      iIOMetadataNodeArray0[8] = iIOMetadataNode8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 0, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) stack0);
      IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>) resettableListIterator0, (Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      Comparator<SQLNonTransientException> comparator1 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.singletonIterator((SQLInvalidAuthorizationSpecException) null);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator1, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      IteratorUtils.toString(iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[null]");
      Node node0 = iIOMetadataNode0.cloneNode(false);
      IteratorUtils.nodeListIterator(node0);
      IteratorUtils.singletonListIterator((SQLTransientConnectionException) null);
      MapIterator<SQLClientInfoException, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) mapIterator0);
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 1);
      ArrayListIterator<SQLFeatureNotSupportedException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLFeatureNotSupportedException>(resettableIterator0, (-3379), (-3379));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MapIterator<BatchUpdateException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) mapIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) linkedHashSet0);
      Vector<Class<SQLTransactionRollbackException>>[] vectorArray0 = (Vector<Class<SQLTransactionRollbackException>>[]) Array.newInstance(Vector.class, 8);
      Stack<Class<SQLTransactionRollbackException>> stack0 = new Stack<Class<SQLTransactionRollbackException>>();
      vectorArray0[0] = (Vector<Class<SQLTransactionRollbackException>>) stack0;
      Stack<Class<SQLTransactionRollbackException>> stack1 = new Stack<Class<SQLTransactionRollbackException>>();
      Vector<Class<SQLTransactionRollbackException>> vector0 = new Vector<Class<SQLTransactionRollbackException>>();
      vectorArray0[2] = vector0;
      Stack<Class<SQLTransactionRollbackException>> stack2 = new Stack<Class<SQLTransactionRollbackException>>();
      Vector<Class<SQLTransactionRollbackException>> vector1 = new Vector<Class<SQLTransactionRollbackException>>();
      Stack<Class<SQLTransactionRollbackException>> stack3 = new Stack<Class<SQLTransactionRollbackException>>();
      Stack<Class<SQLTransactionRollbackException>> stack4 = new Stack<Class<SQLTransactionRollbackException>>();
      Vector<Class<SQLTransactionRollbackException>> vector2 = new Vector<Class<SQLTransactionRollbackException>>();
      vectorArray0[7] = vector2;
      IteratorUtils.arrayIterator(vectorArray0);
      Iterator<Boolean> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.chainedIterator((Iterator<? extends Boolean>) iterator0, (Iterator<? extends Boolean>) iterator0);
      OrderedMapIterator<SQLWarning, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0);
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      IteratorUtils.chainedIterator((Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[2];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("suffix may not be null", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      int int0 = 32;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("suffix may not be null", "", 32, (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException2;
      int int1 = 0;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 0, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) resettableListIterator0, (Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      IteratorUtils.loopingListIterator((List<SQLRecoverableException>) stack0);
      OrderedIterator<Boolean> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Boolean>) orderedIterator0, (Iterator<? extends Boolean>) orderedIterator0, (Iterator<? extends Boolean>) orderedIterator0);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Boolean>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "D6 gN[[yas(=.)rq1");
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      ConstantTransformer<Object, StringTokenizer> constantTransformer0 = new ConstantTransformer<Object, StringTokenizer>((StringTokenizer) null);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends StringTokenizer>) constantTransformer0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "pJDaYc}:&K");
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("Iterator must not be null", (String) null, 0, sQLTimeoutException0);
      OrderedMapIterator<StringTokenizer, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<StringTokenizer, SQLNonTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<StringTokenizer, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<StringTokenizer, ? extends SQLNonTransientConnectionException>) orderedMapIterator1);
      IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) iterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("Iterator must not be null", "D6 gN[[yas(=.)rq1", false);
      StringTokenizer stringTokenizer1 = new StringTokenizer("r%tfJ6Ti~,", "getKey() can only be called after next() and before remove()");
      StringTokenizer stringTokenizer2 = new StringTokenizer("");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("n^y57g)");
      iIOMetadataNode0.getElementsByTagNameNS("r%tfJ6Ti~,", (String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedHashSet<SQLDataException>[] linkedHashSetArray0 = (LinkedHashSet<SQLDataException>[]) Array.newInstance(LinkedHashSet.class, 0);
      IteratorUtils.arrayIterator(linkedHashSetArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      predicateArray0[1] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) allPredicate0;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("sh-=fc4h1*r");
      predicateArray0[3] = (Predicate<Object>) equalPredicate0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Collection must not be null", "Qu}q`~~h=_>L/G8");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate1 = new EqualPredicate<Object>(sQLTimeoutException0, defaultEquator0);
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientException>) stack0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Hashtable<Locale.FilteringMode, String> hashtable0 = new Hashtable<Locale.FilteringMode, String>();
      EntrySetMapIterator<Locale.FilteringMode, String> entrySetMapIterator0 = new EntrySetMapIterator<Locale.FilteringMode, String>(hashtable0);
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(hashtable1);
      SQLWarning sQLWarning0 = new SQLWarning("");
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      StringTokenizer stringTokenizer1 = new StringTokenizer("", "", false);
      StringTokenizer stringTokenizer2 = new StringTokenizer("");
      StringTokenizer stringTokenizer3 = new StringTokenizer("", "", true);
      StringTokenizer stringTokenizer4 = new StringTokenizer("", "");
      DataTruncation dataTruncation0 = new DataTruncation(1442, false, true, 1442, 648);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 1, sQLWarning0);
      DataTruncation dataTruncation1 = new DataTruncation(3064, false, true, 100, 12, sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((DataTruncation[]) null, 240, (-353));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Hashtable<Locale.FilteringMode, String> hashtable0 = new Hashtable<Locale.FilteringMode, String>();
      EntrySetMapIterator<Locale.FilteringMode, String> entrySetMapIterator0 = new EntrySetMapIterator<Locale.FilteringMode, String>(hashtable0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      SQLWarning sQLWarning0 = new SQLWarning("");
      DefaultEquator.defaultEquator();
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) entrySetMapIterator0, (Predicate<? super Locale.FilteringMode>) onePredicate0);
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(arrayList0);
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) reverseListIterator0, (Predicate<? super SQLSyntaxErrorException>) onePredicate0);
      IteratorUtils.size(reverseListIterator0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) null, (Predicate<? super Integer>) anyPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("z", "z");
      IteratorUtils.singletonIterator(sQLSyntaxErrorException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 5);
      OrderedMapIterator<StringTokenizer, ArrayDeque<SQLNonTransientConnectionException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<StringTokenizer>) orderedMapIterator0;
      OrderedMapIterator<StringTokenizer, SQLNonTransientConnectionException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<StringTokenizer, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, SQLNonTransientConnectionException>(orderedMapIterator1);
      OrderedMapIterator<StringTokenizer, SQLNonTransientConnectionException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<StringTokenizer, ? extends SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      iteratorArray0[1] = (Iterator<StringTokenizer>) orderedMapIterator2;
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) orderedMapIterator1);
      iteratorArray0[2] = (Iterator<StringTokenizer>) listIterator0;
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[9];
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "sV8;Q'-da", false);
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("sV8;Q'-da", "");
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("sV8;Q'-da");
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("Z@]U6<{a(}I;", "Z@]U6<{a(}I;", true);
      stringTokenizerArray0[3] = stringTokenizer3;
      Iterator<Object> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>) listIterator0, (Iterator<?>) iteratorArray0[1]);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      IteratorUtils.find(iterator0, (Predicate<? super Object>) predicate0);
      IteratorUtils.arrayListIterator((Object[]) stringTokenizerArray0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MapIterator<SQLRecoverableException, TreeSet<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLRecoverableException, TreeSet<BatchUpdateException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) mapIterator1);
      Transformer<SQLException, String>[] transformerArray0 = (Transformer<SQLException, String>[]) Array.newInstance(Transformer.class, 8);
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("");
      Transformer<SQLException, String> transformer0 = IfTransformer.ifTransformer((Predicate<? super SQLException>) predicate0, (Transformer<? super SQLException, ? extends String>) constantTransformer0, (Transformer<? super SQLException, ? extends String>) constantTransformer0);
      transformerArray0[0] = transformer0;
      Transformer<SQLException, String> transformer1 = ConstantTransformer.nullTransformer();
      transformerArray0[1] = transformer1;
      InvokerTransformer.invokerTransformer("");
      long[] longArray0 = new long[0];
      SQLWarning sQLWarning0 = new SQLWarning("", "", 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.iterators.UnmodifiableIterator", "org.apache.commons.collections4.iterators.UnmodifiableIterator", 0, longArray0, sQLWarning0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.iterators.UnmodifiableIterator", "", 0, batchUpdateException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException((String) null, "", (-2786), sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("", ")XGMsw{%E", batchUpdateException0);
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("|D(v", "0kn|16':RB/l%");
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException((String) null, "", (-140));
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException(sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractHashedMap$EntrySet", "");
      SQLTimeoutException sQLTimeoutException7 = new SQLTimeoutException("", batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTimeoutException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) resettableIterator0);
      Stack<String> stack0 = new Stack<String>();
      stack0.addElement("");
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) stack0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Closure must not be null", "Closure must not be null", (-1));
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLFeatureNotSupportedException0, (Equator<Object>) defaultEquator0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) null, (Predicate<? super Locale.FilteringMode>) onePredicate0);
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(arrayList0);
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) reverseListIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      IteratorUtils.size(iterator0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLFeatureNotSupportedException0);
      IteratorUtils.contains((Iterator<SQLClientInfoException>) null, (Object) resettableIterator0);
      IteratorUtils.find((Iterator<SQLSyntaxErrorException>) reverseListIterator0, (Predicate<? super SQLSyntaxErrorException>) orPredicate0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Closure must not be null", "ListIterator must not be null", sQLFeatureNotSupportedException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("");
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[0];
      IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 0);
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 2);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      ArrayIterator<SQLRecoverableException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLRecoverableException>(sQLTimeoutException0, 123);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MapIterator<SQLRecoverableException, TreeSet<BatchUpdateException>> mapIterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLRecoverableException, TreeSet<BatchUpdateException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "D6 gN[[yas(=.)rq1");
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      ConstantTransformer<Object, StringTokenizer> constantTransformer0 = new ConstantTransformer<Object, StringTokenizer>((StringTokenizer) null);
      IteratorUtils.transformedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends StringTokenizer>) constantTransformer0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "pJDaYc}:&K");
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("Iterator must not be null", (String) null, 0, sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("J", "node must not be null!", 0, sQLInvalidAuthorizationSpecException0);
      SQLException sQLException0 = new SQLException("node must not be null!", "suffix may not be null", sQLTimeoutException1);
      sQLInvalidAuthorizationSpecException0.initCause(sQLException0);
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("r%tfJ6Ti~,", "node must not be null!", sQLTimeoutException1);
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("Iterator must not be null", "org.apache.commons.collections4.iterators.EmptyMapIterator");
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("J", "", 0);
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException(sQLTimeoutException2);
      SQLTimeoutException sQLTimeoutException7 = new SQLTimeoutException("r%tfJ6Ti~,", (String) null);
      SQLTimeoutException sQLTimeoutException8 = new SQLTimeoutException("{6rM8KpiX[#`~_h$w", sQLTimeoutException4);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException7;
      IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      HashMap<Locale.FilteringMode, String> hashMap0 = new HashMap<Locale.FilteringMode, String>();
      EntrySetMapIterator<Locale.FilteringMode, String> entrySetMapIterator0 = new EntrySetMapIterator<Locale.FilteringMode, String>(hashMap0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Factory<BatchUpdateException> factory0 = ConstantFactory.constantFactory(batchUpdateException0);
      FactoryTransformer<Locale.FilteringMode, BatchUpdateException> factoryTransformer0 = new FactoryTransformer<Locale.FilteringMode, BatchUpdateException>(factory0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Locale.FilteringMode>) entrySetMapIterator0, (Transformer<? super Locale.FilteringMode, ? extends BatchUpdateException>) factoryTransformer0);
      Predicate<BatchUpdateException> predicate0 = ExceptionPredicate.exceptionPredicate();
      IteratorUtils.matchesAll(iterator0, (Predicate<? super BatchUpdateException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("ugkG$Z^5e4ksK\" mZz}");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("org.apache.commons.collections4.IteratorUtils", "");
      IteratorUtils.nodeListIterator(nodeList0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MapIterator<SQLRecoverableException, TreeSet<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLRecoverableException, TreeSet<BatchUpdateException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) mapIterator1);
      Transformer<SQLException, String>[] transformerArray0 = (Transformer<SQLException, String>[]) Array.newInstance(Transformer.class, 8);
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("");
      Transformer<SQLException, String> transformer0 = IfTransformer.ifTransformer((Predicate<? super SQLException>) predicate0, (Transformer<? super SQLException, ? extends String>) constantTransformer0, (Transformer<? super SQLException, ? extends String>) constantTransformer0);
      transformerArray0[0] = transformer0;
      Transformer<SQLException, String> transformer1 = ConstantTransformer.nullTransformer();
      transformerArray0[1] = transformer1;
      Transformer<SQLException, String> transformer2 = InvokerTransformer.invokerTransformer("");
      transformerArray0[2] = transformer2;
      Transformer<SQLException, String> transformer3 = InvokerTransformer.invokerTransformer("(g.B+,@+w MM)4", (Class<?>[]) null, (Object[]) null);
      transformerArray0[3] = transformer3;
      Transformer<SQLException, String> transformer4 = ConstantTransformer.nullTransformer();
      transformerArray0[4] = transformer4;
      Transformer<SQLException, String> transformer5 = InvokerTransformer.invokerTransformer("");
      transformerArray0[5] = transformer5;
      Transformer<SQLException, String> transformer6 = StringValueTransformer.stringValueTransformer();
      transformerArray0[6] = transformer6;
      Transformer<SQLException, String> transformer7 = InvokerTransformer.invokerTransformer("(g.B+,@+w MM)4");
      transformerArray0[7] = transformer7;
      SwitchTransformer<SQLException, String> switchTransformer0 = new SwitchTransformer<SQLException, String>((Predicate<? super SQLException>[]) null, transformerArray0, transformer3);
      IfTransformer<SQLRecoverableException, String> ifTransformer0 = new IfTransformer<SQLRecoverableException, String>(predicate0, switchTransformer0, transformer2);
      String string0 = IteratorUtils.toString((Iterator<SQLRecoverableException>) mapIterator1, (Transformer<? super SQLRecoverableException, String>) ifTransformer0, "", "", "");
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Closure<Object>>) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("ugkG$Z^5e4ksK\" mZz}");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("SG\"O'hc8W", "^I o5YU|/", 1);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) iIOMetadataNode0, (Equator<Object>) defaultEquator0);
      NullPredicate.nullPredicate();
      MapIterator<Integer, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) (-1);
      integerArray0[2] = (Integer) (-1);
      integerArray0[3] = (Integer) (-1);
      integerArray0[4] = (Integer) (-1);
      integerArray0[5] = (Integer) (-1);
      integerArray0[6] = (Integer) (-1);
      Integer integer0 = new Integer((int) integerArray0[3]);
      integerArray0[7] = integer0;
      integerArray0[8] = (Integer) (-1);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      IteratorUtils.matchesAll((Iterator<Integer>) mapIterator0, (Predicate<? super Integer>) predicate0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) resettableListIterator0, 32);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("LnA20KBOZfO_TqYQ");
      sQLFeatureNotSupportedException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) resettableIterator0);
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(list0);
      Transformer<BatchUpdateException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      String string0 = "";
      IteratorUtils.toString((Iterator<BatchUpdateException>) reverseListIterator0, (Transformer<? super BatchUpdateException, String>) transformer0, "", "", "z");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("J0F?n}AF~9Em", "#cP-PwF=j)iNlnHZK/", (Throwable) null);
      ArrayIterator<SQLIntegrityConstraintViolationException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLIntegrityConstraintViolationException>(sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Iterator<Properties> iterator0 = null;
      Iterable<Properties> iterable0 = new LinkedList<Properties>();
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) resettableIterator0);
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(list0);
      Transformer<BatchUpdateException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<BatchUpdateException>) reverseListIterator0, (Transformer<? super BatchUpdateException, String>) transformer0, "", "", "z");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("J0F?n}AF~9Em", "#cP-PwF=j)iNlnHZK/", (Throwable) null);
      ArrayIterator<SQLIntegrityConstraintViolationException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLIntegrityConstraintViolationException>(sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      predicateArray0[1] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) allPredicate0;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("sh-=fc4h1*r");
      predicateArray0[3] = (Predicate<Object>) equalPredicate0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Collection must not be null", "Qu}q`~~h=_>L/G8");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate1 = new EqualPredicate<Object>(sQLTimeoutException0, defaultEquator0);
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      priorityQueue0.containsAll(hashSet0);
      predicateArray0[4] = (Predicate<Object>) equalPredicate1;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(anyPredicate0);
      Predicate<Object> predicate1 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) predicateTransformer0);
      AndPredicate<Integer> andPredicate0 = new AndPredicate<Integer>(predicate1, (Predicate<? super Integer>) null);
      IteratorUtils.matchesAll((Iterator<Integer>) null, (Predicate<? super Integer>) andPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Transformer<DataTruncation, String> transformer0 = ConstantTransformer.constantTransformer("\u0007T]X(ki)-Dni");
      IteratorUtils.toString((Iterator<DataTruncation>) null, (Transformer<? super DataTruncation, String>) transformer0, "8MVFG4%l.Hx", "8MVFG4%l.Hx", "\u0007T]X(ki)-Dni");
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("qK8Z3~", "Transformer must not be null", 4);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLRecoverableException0);
      arrayList0.add(sQLSyntaxErrorException0);
      SQLException sQLException0 = new SQLException("xy}_S85uh", "remove() is not supported");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLException0);
      SQLException sQLException1 = new SQLException("\u0007T]X(ki)-Dni", sQLFeatureNotSupportedException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("8MVFG4%l.Hx", "", sQLFeatureNotSupportedException0);
      arrayList0.add(sQLSyntaxErrorException1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("8MVFG4%l.Hx\u0007T]X(ki)-Dni", "\u0007T]X(ki)-Dni", 100, sQLException1);
      sQLException1.fillInStackTrace();
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("8MVFG4%l.Hx\u0007T]X(ki)-Dni", "8MVFG4%l.Hx", sQLIntegrityConstraintViolationException0);
      arrayList0.add(sQLSyntaxErrorException2);
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("\u0007T]X(ki)-Dni");
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException(sQLSyntaxErrorException3);
      arrayList0.add(sQLSyntaxErrorException4);
      IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) arrayList0);
      IteratorUtils.emptyListIterator();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(object0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) locale_FilteringMode0, 1, 883);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[7];
      StringTokenizer stringTokenizer0 = new StringTokenizer("^kKw25{L", "^kKw25{L");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("^kKw25{L", "^kKw25{L");
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("^kKw25{L", "");
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("", "", true);
      stringTokenizerArray0[3] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = new StringTokenizer("");
      stringTokenizerArray0[4] = stringTokenizer4;
      StringTokenizer stringTokenizer5 = new StringTokenizer("", "", true);
      stringTokenizerArray0[5] = stringTokenizer5;
      StringTokenizer stringTokenizer6 = new StringTokenizer("", "^kKw25{L");
      stringTokenizerArray0[6] = stringTokenizer6;
      ObjectArrayListIterator<StringTokenizer> objectArrayListIterator0 = new ObjectArrayListIterator<StringTokenizer>(stringTokenizerArray0);
      Predicate<StringTokenizer> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) objectArrayListIterator0, (Predicate<? super StringTokenizer>) predicate0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      OrderedMapIterator<InstanceofPredicate, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      OrderedMapIterator<SQLSyntaxErrorException, DataTruncation> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLSyntaxErrorException>) orderedMapIterator1);
      IteratorUtils.isEmpty(orderedMapIterator0);
      IteratorUtils.emptyMapIterator();
      ArrayDeque<SQLTimeoutException>[] arrayDequeArray0 = (ArrayDeque<SQLTimeoutException>[]) Array.newInstance(ArrayDeque.class, 2);
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      arrayDequeArray0[0] = arrayDeque0;
      arrayDequeArray0[1] = arrayDeque0;
      AndPredicate<Integer> andPredicate0 = new AndPredicate<Integer>((Predicate<? super Integer>) null, (Predicate<? super Integer>) null);
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableIterator0);
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0);
      ListIterator<Integer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Integer>) zippingIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Integer>) listIterator0, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MapIterator<BatchUpdateException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) mapIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) linkedHashSet0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("null keys not allowed", "");
      IteratorUtils.singletonIterator((SQLSyntaxErrorException) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      // Undeclared exception!
      try { 
        iIOMetadataNode0.getElementsByTagNameNS("Array class must not be null", "Array class must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("z", "z");
      IteratorUtils.singletonIterator(sQLSyntaxErrorException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 5);
      OrderedMapIterator<StringTokenizer, ArrayDeque<SQLNonTransientConnectionException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<StringTokenizer>) orderedMapIterator0;
      OrderedMapIterator<StringTokenizer, SQLNonTransientConnectionException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<StringTokenizer, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, SQLNonTransientConnectionException>(orderedMapIterator1);
      OrderedMapIterator<StringTokenizer, SQLNonTransientConnectionException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<StringTokenizer, ? extends SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      iteratorArray0[1] = (Iterator<StringTokenizer>) orderedMapIterator2;
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) orderedMapIterator1);
      iteratorArray0[2] = (Iterator<StringTokenizer>) listIterator0;
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[9];
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "sV8;Q'-da", false);
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("sV8;Q'-da", "");
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("sV8;Q'-da");
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("Z@]U6<{a(}I;", "Z@]U6<{a(}I;", true);
      stringTokenizerArray0[3] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = new StringTokenizer("", "C-$EgTXr9");
      stringTokenizerArray0[4] = stringTokenizer4;
      StringTokenizer stringTokenizer5 = new StringTokenizer("\"17dt2", "", false);
      stringTokenizerArray0[5] = stringTokenizer5;
      StringTokenizer stringTokenizer6 = new StringTokenizer("cL&,s", "sV8;Q'-da", true);
      stringTokenizerArray0[6] = stringTokenizer6;
      StringTokenizer stringTokenizer7 = new StringTokenizer("", "", true);
      stringTokenizerArray0[7] = stringTokenizer7;
      StringTokenizer stringTokenizer8 = new StringTokenizer("Z@]U6<{a(}I;");
      stringTokenizerArray0[8] = stringTokenizer8;
      ObjectArrayListIterator<StringTokenizer> objectArrayListIterator0 = new ObjectArrayListIterator<StringTokenizer>(stringTokenizerArray0);
      iteratorArray0[3] = (Iterator<StringTokenizer>) objectArrayListIterator0;
      ResettableIterator<StringTokenizer> resettableIterator1 = IteratorUtils.singletonIterator(stringTokenizer2);
      iteratorArray0[4] = (Iterator<StringTokenizer>) resettableIterator1;
      IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) comparator0, (Iterator<? extends StringTokenizer>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      PriorityQueue<Object>[] priorityQueueArray0 = (PriorityQueue<Object>[]) Array.newInstance(PriorityQueue.class, 9);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<Object> priorityQueue1 = new PriorityQueue<Object>();
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<Object> priorityQueue2 = new PriorityQueue<Object>();
      priorityQueueArray0[2] = priorityQueue2;
      PriorityQueue<Object> priorityQueue3 = new PriorityQueue<Object>();
      priorityQueueArray0[3] = priorityQueue3;
      PriorityQueue<Object> priorityQueue4 = new PriorityQueue<Object>();
      priorityQueueArray0[4] = priorityQueue4;
      PriorityQueue<Object> priorityQueue5 = new PriorityQueue<Object>();
      priorityQueueArray0[5] = priorityQueue5;
      PriorityQueue<Object> priorityQueue6 = new PriorityQueue<Object>();
      priorityQueueArray0[6] = priorityQueue6;
      PriorityQueue<Object> priorityQueue7 = new PriorityQueue<Object>(priorityQueue5);
      priorityQueueArray0[7] = priorityQueue7;
      PriorityQueue<Object> priorityQueue8 = new PriorityQueue<Object>();
      priorityQueueArray0[8] = priorityQueue8;
      ResettableIterator<PriorityQueue<Object>> resettableIterator0 = IteratorUtils.arrayIterator(priorityQueueArray0);
      IteratorUtils.contains((Iterator<PriorityQueue<Object>>) resettableIterator0, (Object) priorityQueue2);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.matchesAll((Iterator<EnumSet<Locale.FilteringMode>>) null, (Predicate<? super EnumSet<Locale.FilteringMode>>) predicate0);
      LinkedList<SQLTransactionRollbackException>[] linkedListArray0 = (LinkedList<SQLTransactionRollbackException>[]) Array.newInstance(LinkedList.class, 3);
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      linkedListArray0[0] = linkedList0;
      LinkedList<SQLTransactionRollbackException> linkedList1 = new LinkedList<SQLTransactionRollbackException>();
      linkedListArray0[1] = linkedList1;
      LinkedList<SQLTransactionRollbackException> linkedList2 = new LinkedList<SQLTransactionRollbackException>();
      linkedList0.iterator();
      linkedListArray0[2] = linkedList2;
      IteratorUtils.arrayListIterator(linkedListArray0);
      OrderedMapIterator<DataTruncation, Locale.FilteringMode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, Locale.FilteringMode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, Locale.FilteringMode>(orderedMapIterator0);
      OrderedMapIterator<DataTruncation, Locale.FilteringMode> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends Locale.FilteringMode>) abstractOrderedMapIteratorDecorator0);
      MapIterator<DataTruncation, Locale.FilteringMode> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, Locale.FilteringMode>) orderedMapIterator1);
      IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) mapIterator0, 0L, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ArrayList<ArrayDeque<SQLTimeoutException>> arrayList0 = new ArrayList<ArrayDeque<SQLTimeoutException>>();
      IteratorUtils.loopingListIterator((List<ArrayDeque<SQLTimeoutException>>) arrayList0);
      ArrayDeque<Properties>[] arrayDequeArray0 = (ArrayDeque<Properties>[]) Array.newInstance(ArrayDeque.class, 6);
      ArrayDeque<Properties> arrayDeque0 = new ArrayDeque<Properties>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<Properties> arrayDeque1 = new ArrayDeque<Properties>();
      arrayDequeArray0[1] = arrayDeque1;
      ArrayDeque<Properties> arrayDeque2 = new ArrayDeque<Properties>();
      arrayDequeArray0[2] = arrayDeque2;
      ArrayDeque<Properties> arrayDeque3 = new ArrayDeque<Properties>();
      arrayDequeArray0[3] = arrayDeque3;
      ArrayDeque<Properties> arrayDeque4 = new ArrayDeque<Properties>();
      arrayDequeArray0[4] = arrayDeque4;
      ArrayDeque<Properties> arrayDeque5 = new ArrayDeque<Properties>();
      arrayDequeArray0[5] = arrayDeque5;
      int int0 = 1908;
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      Predicate<StringTokenizer> predicate1 = AndPredicate.andPredicate((Predicate<? super StringTokenizer>) orPredicate0, (Predicate<? super StringTokenizer>) orPredicate0);
      IteratorUtils.find((Iterator<StringTokenizer>) null, (Predicate<? super StringTokenizer>) predicate1);
      arrayDeque4.remove((Object) null);
      Properties properties0 = new Properties();
      arrayDeque3.add(properties0);
      ObjectArrayListIterator<ArrayDeque<Properties>> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<ArrayDeque<Properties>>(arrayDequeArray0, (-519), 1908);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("sbU$Q*%[*%:", (String) null);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      ConstantTransformer<Object, StringTokenizer> constantTransformer0 = new ConstantTransformer<Object, StringTokenizer>((StringTokenizer) null);
      IteratorUtils.transformedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends StringTokenizer>) constantTransformer0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[9];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("sbU$Q*%[*%:", "pJDaYc}:&K");
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("pJDaYc}:&K", "r%tfJ6Ti~,", 0, sQLInvalidAuthorizationSpecException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("2wbs2etr1XGsxgER%M.", "sbU$Q*%[*%:", (-2786), sQLTimeoutException1);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("r%tfJ6Ti~,", "2wbs2etr1XGsxgER%M.", sQLTimeoutException1);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException((String) null, "2wbs2etr1XGsxgER%M.");
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("pJDaYc}:&K", "sbU$Q*%[*%:", (-2786));
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException(sQLTimeoutException0);
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      SQLTimeoutException sQLTimeoutException7 = new SQLTimeoutException("sbU$Q*%[*%:", "2wbs2etr1XGsxgER%M.");
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException7;
      SQLTimeoutException sQLTimeoutException8 = new SQLTimeoutException("2wbs2etr1XGsxgER%M.", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[8] = sQLTimeoutException8;
      IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      SQLWarning sQLWarning0 = new SQLWarning("");
      DefaultEquator.defaultEquator();
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iIOMetadataNode0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("4R*k:uQ~ \"T`H'fjlq", "4R*k:uQ~ \"T`H'fjlq");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray1[0] = (Predicate<Object>) onePredicate0;
      predicateArray1[1] = (Predicate<Object>) equalPredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray1);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) equalPredicate0);
      ListIterator<StringTokenizer> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<StringTokenizer> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) listIterator0, (Predicate<? super StringTokenizer>) equalPredicate0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("4R*k:uQ~ \"T`H'fjlq");
      Iterator<String> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends StringTokenizer>) listIterator1, (Transformer<? super StringTokenizer, ? extends String>) transformer0);
      IteratorUtils.toListIterator((Iterator<? extends String>) iterator0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLInvalidAuthorizationSpecException, ? extends DataTruncation>) orderedMapIterator0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 4);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      closureArray0[0] = closure0;
      Hashtable<Predicate<Object>, Closure<Object>> hashtable0 = new Hashtable<Predicate<Object>, Closure<Object>>();
      // Undeclared exception!
      try { 
        SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Comparator<ClientInfoStatus> comparator0 = (Comparator<ClientInfoStatus>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super ClientInfoStatus>) comparator0, (Iterator<? extends ClientInfoStatus>) null, (Iterator<? extends ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      DefaultEquator.defaultEquator();
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(arrayList0);
      ResettableIterator<Boolean> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Boolean>) null, (Iterator<? extends Boolean>) null, (Iterator<? extends Boolean>) resettableIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedList<BatchUpdateException>[] linkedListArray0 = (LinkedList<BatchUpdateException>[]) Array.newInstance(LinkedList.class, 4);
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      linkedListArray0[0] = linkedList0;
      LinkedList<BatchUpdateException> linkedList1 = new LinkedList<BatchUpdateException>();
      linkedListArray0[1] = linkedList1;
      LinkedList<BatchUpdateException> linkedList2 = new LinkedList<BatchUpdateException>();
      linkedListArray0[2] = linkedList2;
      LinkedList<BatchUpdateException> linkedList3 = new LinkedList<BatchUpdateException>();
      linkedListArray0[3] = linkedList3;
      IteratorUtils.arrayListIterator(linkedListArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Iterator<Locale.FilteringMode> iterator0 = null;
      long long0 = 0L;
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) null, 1L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Transformer<SQLException, IIOMetadataNode> transformer0 = InvokerTransformer.invokerTransformer("?^bWL&FM.mA0");
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTransientConnectionException>) null, (Transformer<? super SQLTransientConnectionException, ? extends IIOMetadataNode>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[9];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(";XH#D8");
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ;XH#D8", sQLTransientConnectionException0.toString());
      assertEquals(";XH#D8", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.map.Flat3Map", "org.apache.commons.collections4.map.Flat3Map", 0, sQLTransientConnectionException0);
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ;XH#D8", sQLTransientConnectionException0.toString());
      assertEquals(";XH#D8", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("org.apache.commons.collections4.map.Flat3Map", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.map.Flat3Map", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: org.apache.commons.collections4.map.Flat3Map", sQLRecoverableException0.toString());
      
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("`.w(4\"3x!!]<!,FZp#", "Array class must not be null", 0);
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertNotNull(sQLRecoverableException1);
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: `.w(4\"3x!!]<!,FZp#", sQLRecoverableException1.toString());
      assertEquals("Array class must not be null", sQLRecoverableException1.getSQLState());
      assertEquals("`.w(4\"3x!!]<!,FZp#", sQLRecoverableException1.getMessage());
      
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("B", sQLRecoverableException1);
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException2.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException2.equals((Object)sQLRecoverableException1));
      assertNotNull(sQLRecoverableException2);
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: `.w(4\"3x!!]<!,FZp#", sQLRecoverableException1.toString());
      assertEquals("Array class must not be null", sQLRecoverableException1.getSQLState());
      assertEquals("`.w(4\"3x!!]<!,FZp#", sQLRecoverableException1.getMessage());
      assertEquals(0, sQLRecoverableException2.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: B", sQLRecoverableException2.toString());
      assertNull(sQLRecoverableException2.getSQLState());
      assertEquals("B", sQLRecoverableException2.getMessage());
      
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("`.w(4\"3x!!]<!,FZp#", "org.apache.commons.collections4.map.Flat3Map");
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException2));
      assertNotNull(sQLRecoverableException3);
      assertEquals("org.apache.commons.collections4.map.Flat3Map", sQLRecoverableException3.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: `.w(4\"3x!!]<!,FZp#", sQLRecoverableException3.toString());
      assertEquals("`.w(4\"3x!!]<!,FZp#", sQLRecoverableException3.getMessage());
      assertEquals(0, sQLRecoverableException3.getErrorCode());
      
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException(";XH#D8", "Array class must not be null", 0);
      assertFalse(sQLRecoverableException4.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException4.equals((Object)sQLRecoverableException3));
      assertFalse(sQLRecoverableException4.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException4.equals((Object)sQLRecoverableException1));
      assertNotNull(sQLRecoverableException4);
      assertEquals(";XH#D8", sQLRecoverableException4.getMessage());
      assertEquals("java.sql.SQLRecoverableException: ;XH#D8", sQLRecoverableException4.toString());
      assertEquals(0, sQLRecoverableException4.getErrorCode());
      assertEquals("Array class must not be null", sQLRecoverableException4.getSQLState());
      
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException(";XH#D8", "org.apache.commons.collections4.map.Flat3Map", (-5), sQLRecoverableException0);
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException4));
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException3));
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException3));
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException4));
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException1));
      assertNotNull(sQLRecoverableException5);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ;XH#D8", sQLTransientConnectionException0.toString());
      assertEquals(";XH#D8", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("org.apache.commons.collections4.map.Flat3Map", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.map.Flat3Map", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: org.apache.commons.collections4.map.Flat3Map", sQLRecoverableException0.toString());
      assertEquals("org.apache.commons.collections4.map.Flat3Map", sQLRecoverableException5.getSQLState());
      assertEquals(";XH#D8", sQLRecoverableException5.getMessage());
      assertEquals("java.sql.SQLRecoverableException: ;XH#D8", sQLRecoverableException5.toString());
      assertEquals((-5), sQLRecoverableException5.getErrorCode());
      
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException("B");
      assertFalse(sQLRecoverableException6.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException6.equals((Object)sQLRecoverableException4));
      assertFalse(sQLRecoverableException6.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException6.equals((Object)sQLRecoverableException3));
      assertFalse(sQLRecoverableException6.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException6.equals((Object)sQLRecoverableException5));
      assertNotNull(sQLRecoverableException6);
      assertEquals(0, sQLRecoverableException6.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: B", sQLRecoverableException6.toString());
      assertNull(sQLRecoverableException6.getSQLState());
      assertEquals("B", sQLRecoverableException6.getMessage());
      
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      SQLRecoverableException sQLRecoverableException7 = new SQLRecoverableException();
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException6));
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException4));
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException5));
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException3));
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException0));
      assertNotNull(sQLRecoverableException7);
      assertEquals(0, sQLRecoverableException7.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException7.toString());
      assertNull(sQLRecoverableException7.getSQLState());
      assertNull(sQLRecoverableException7.getMessage());
      
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException7;
      SQLRecoverableException sQLRecoverableException8 = new SQLRecoverableException(sQLRecoverableException5);
      assertFalse(sQLRecoverableException8.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException8.equals((Object)sQLRecoverableException5));
      assertFalse(sQLRecoverableException8.equals((Object)sQLRecoverableException7));
      assertFalse(sQLRecoverableException8.equals((Object)sQLRecoverableException3));
      assertFalse(sQLRecoverableException8.equals((Object)sQLRecoverableException6));
      assertFalse(sQLRecoverableException8.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException8.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException8.equals((Object)sQLRecoverableException4));
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException6));
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException4));
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException5));
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException3));
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException7));
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException3));
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException7));
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException4));
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException6));
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException1));
      assertNotNull(sQLRecoverableException8);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ;XH#D8", sQLTransientConnectionException0.toString());
      assertEquals(";XH#D8", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ;XH#D8", sQLRecoverableException8.getMessage());
      assertNull(sQLRecoverableException8.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLRecoverableException: ;XH#D8", sQLRecoverableException8.toString());
      assertEquals(0, sQLRecoverableException8.getErrorCode());
      assertEquals("org.apache.commons.collections4.map.Flat3Map", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.map.Flat3Map", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: org.apache.commons.collections4.map.Flat3Map", sQLRecoverableException0.toString());
      assertEquals("org.apache.commons.collections4.map.Flat3Map", sQLRecoverableException5.getSQLState());
      assertEquals(";XH#D8", sQLRecoverableException5.getMessage());
      assertEquals("java.sql.SQLRecoverableException: ;XH#D8", sQLRecoverableException5.toString());
      assertEquals((-5), sQLRecoverableException5.getErrorCode());
      
      sQLRecoverableExceptionArray0[8] = sQLRecoverableException8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, (-2452), (-5));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Stack<SQLNonTransientException>[] stackArray0 = (Stack<SQLNonTransientException>[]) Array.newInstance(Stack.class, 3);
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      stackArray0[0] = stack0;
      Stack<SQLNonTransientException> stack1 = new Stack<SQLNonTransientException>();
      assertTrue(stack1.equals((Object)stack0));
      assertNotNull(stack1);
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      
      stackArray0[1] = stack1;
      Stack<SQLNonTransientException> stack2 = new Stack<SQLNonTransientException>();
      assertTrue(stack2.equals((Object)stack0));
      assertTrue(stack2.equals((Object)stack1));
      assertNotNull(stack2);
      assertEquals(0, stack2.size());
      assertTrue(stack2.empty());
      assertEquals("[]", stack2.toString());
      assertTrue(stack2.isEmpty());
      assertEquals(10, stack2.capacity());
      
      stackArray0[2] = stack2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stackArray0, 2883);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) resettableIterator0);
      assertNotNull(enumeration0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      stack0.addElement("");
      assertTrue(stack0.contains(""));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) stack0);
      assertNotNull(iterator0);
      assertTrue(stack0.contains(""));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[2];
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      assertFalse(instanceofPredicate1.equals((Object)instanceofPredicate0));
      assertNotNull(instanceofPredicate1);
      
      instanceofPredicateArray0[1] = instanceofPredicate1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(instanceofPredicateArray0, 510, 510);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTransientConnectionException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0);
      assertNotNull(zippingIterator0);
      
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 9);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      assertNotNull(closure0);
      
      closureArray0[0] = closure0;
      int int0 = 1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 1);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(1, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLIntegrityConstraintViolationException0, (Equator<Object>) defaultEquator0);
      assertNotNull(predicate0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(1, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      boolean boolean0 = false;
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure0, false);
      assertFalse(closure1.equals((Object)closure0));
      assertNotNull(closure1);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(1, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      closureArray0[1] = closure1;
      Closure<Object> closure2 = IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure1, (Closure<? super Object>) closure0);
      assertFalse(closure0.equals((Object)closure1));
      assertFalse(closure1.equals((Object)closure0));
      assertFalse(closure2.equals((Object)closure0));
      assertFalse(closure2.equals((Object)closure1));
      assertNotNull(closure2);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(1, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      closureArray0[2] = closure2;
      // Undeclared exception!
      try { 
        ChainedClosure.chainedClosure((Closure<? super Object>[]) closureArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The closure array must not contain a null closure, index 3 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Hashtable<Locale.FilteringMode, String> hashtable0 = new Hashtable<Locale.FilteringMode, String>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      EntrySetMapIterator<Locale.FilteringMode, String> entrySetMapIterator0 = new EntrySetMapIterator<Locale.FilteringMode, String>(hashtable0);
      assertNotNull(entrySetMapIterator0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>();
      assertNotNull(hashtable1);
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.isEmpty());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(hashtable1);
      assertNotNull(hashMap0);
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SQLWarning sQLWarning0 = new SQLWarning("");
      assertNotNull(sQLWarning0);
      assertEquals("", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0, sQLWarning0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLClientInfoException0, (Equator<Object>) defaultEquator0);
      assertNotNull(predicate0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      assertNotNull(orPredicate0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      predicateArray0[0] = (Predicate<Object>) orPredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      assertNotNull(onePredicate0);
      assertEquals(1, predicateArray0.length);
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) entrySetMapIterator0, (Predicate<? super Locale.FilteringMode>) onePredicate0);
      assertEquals(1, predicateArray0.length);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertFalse(boolean0);
      
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(arrayList0);
      assertNotNull(reverseListIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      
      boolean boolean1 = IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) reverseListIterator0, (Predicate<? super SQLSyntaxErrorException>) onePredicate0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, predicateArray0.length);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(boolean1);
      
      int int0 = IteratorUtils.size(reverseListIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertEquals(0, int0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLWarning: ", batchUpdateException0.toString());
      assertEquals("java.sql.SQLWarning: ", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      boolean boolean2 = IteratorUtils.contains((Iterator<SQLClientInfoException>) null, (Object) batchUpdateException0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLWarning: ", batchUpdateException0.toString());
      assertEquals("java.sql.SQLWarning: ", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertFalse(boolean2);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = IteratorUtils.find((Iterator<SQLSyntaxErrorException>) reverseListIterator0, (Predicate<? super SQLSyntaxErrorException>) predicateArray0[0]);
      assertNull(sQLSyntaxErrorException0);
      assertEquals(1, predicateArray0.length);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "PrototypeCloneFactory: Clone method must be public", batchUpdateException0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLWarning: ", batchUpdateException0.toString());
      assertEquals("java.sql.SQLWarning: ", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("PrototypeCloneFactory: Clone method must be public", sQLTransientConnectionException0.getSQLState());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("PrototypeCloneFactory: Clone method must be public");
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertNotNull(sQLTransientConnectionException1);
      assertEquals("PrototypeCloneFactory: Clone method must be public", sQLTransientConnectionException1.getMessage());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: PrototypeCloneFactory: Clone method must be public", sQLTransientConnectionException1.toString());
      
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Iterator<Properties> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      ConstantTransformer<Object, StringTokenizer> constantTransformer0 = new ConstantTransformer<Object, StringTokenizer>((StringTokenizer) null);
      assertNotNull(constantTransformer0);
      
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Iterator<StringTokenizer> iterator0 = new SingletonIterator<StringTokenizer>((StringTokenizer) null);
      assertNotNull(iterator0);
      
      OrderedMapIterator<StringTokenizer, SQLNonTransientConnectionException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      assertNotNull(predicate0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ResettableIterator<LinkedList<Integer>> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<LinkedList<Integer>>) resettableIterator0, (-559));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -559
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      
      String string0 = null;
      SQLException sQLException0 = new SQLException((String) null, "zl");
      assertNotNull(sQLException0);
      assertEquals("zl", sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      
      sQLInvalidAuthorizationSpecException0.addSuppressed(sQLException0);
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("zl", sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      assertNotNull(predicate0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) instanceofPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      OrderedMapIterator<InstanceofPredicate, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      int int0 = IteratorUtils.size(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertEquals(0, int0);
      
      OrderedMapIterator<SQLSyntaxErrorException, DataTruncation> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLSyntaxErrorException>) orderedMapIterator1);
      assertNotNull(iterator0);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      boolean boolean0 = IteratorUtils.isEmpty(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertTrue(boolean0);
      
      MapIterator<ArrayList<SQLException>, Object> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      ArrayDeque<SQLTimeoutException>[] arrayDequeArray0 = (ArrayDeque<SQLTimeoutException>[]) Array.newInstance(ArrayDeque.class, 2);
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLTimeoutException> arrayDeque1 = new ArrayDeque<SQLTimeoutException>();
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertNotNull(arrayDeque1);
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      
      arrayDequeArray0[1] = arrayDeque1;
      ResettableIterator<ArrayDeque<SQLTimeoutException>> resettableIterator0 = IteratorUtils.arrayIterator(arrayDequeArray0);
      assertNotNull(resettableIterator0);
      assertEquals(2, arrayDequeArray0.length);
      
      String string0 = "nR;5-#8\"";
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "nR;5-#8\"", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      assertNotNull(predicate0);
      assertEquals(0, priorityQueue0.size());
      
      predicateArray0[1] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      assertNotNull(allPredicate0);
      assertEquals(5, predicateArray0.length);
      
      predicateArray0[2] = (Predicate<Object>) allPredicate0;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("sh-=fc4h1*r");
      assertNotNull(equalPredicate0);
      
      predicateArray0[3] = (Predicate<Object>) equalPredicate0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Collection must not be null", "Qu}q`~~h=_>L/G8");
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: Collection must not be null", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("Qu}q`~~h=_>L/G8", sQLTimeoutException0.getSQLState());
      assertEquals("Collection must not be null", sQLTimeoutException0.getMessage());
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      EqualPredicate<Object> equalPredicate1 = new EqualPredicate<Object>(sQLTimeoutException0, defaultEquator0);
      assertFalse(equalPredicate1.equals((Object)equalPredicate0));
      assertNotNull(equalPredicate1);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertEquals("java.sql.SQLTimeoutException: Collection must not be null", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("Qu}q`~~h=_>L/G8", sQLTimeoutException0.getSQLState());
      assertEquals("Collection must not be null", sQLTimeoutException0.getMessage());
      
      predicateArray0[4] = (Predicate<Object>) equalPredicate1;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      assertNotNull(anyPredicate0);
      assertEquals(5, predicateArray0.length);
      
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(anyPredicate0);
      assertNotNull(predicateTransformer0);
      assertEquals(5, predicateArray0.length);
      
      Predicate<Object> predicate1 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) predicateTransformer0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      assertEquals(5, predicateArray0.length);
      
      AndPredicate<Integer> andPredicate0 = new AndPredicate<Integer>(predicate1, (Predicate<? super Integer>) null);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(andPredicate0);
      assertEquals(5, predicateArray0.length);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Integer>) null, (Predicate<? super Integer>) andPredicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertEquals(5, predicateArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("x*XP", "*Rm9IPE", (-588));
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("*Rm9IPE", "x*XP", (-588), sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.getSuppressed();
      sQLTimeoutException0.getSuppressed();
      sQLTimeoutException0.setNextException(sQLTransactionRollbackException0);
      sQLTimeoutException0.getSuppressed();
      sQLTransactionRollbackException0.addSuppressed(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0, (-588), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
