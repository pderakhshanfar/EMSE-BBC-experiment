/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 16:49:28 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      ResettableIterator<SQLDataException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLDataException>) resettableIterator0, (Class<SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      int[] intArray0 = new int[6];
      intArray0[0] = 2092;
      intArray0[1] = 2092;
      intArray0[2] = 2371;
      intArray0[3] = 2371;
      intArray0[4] = 1290;
      intArray0[5] = 2092;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      batchUpdateException0.printStackTrace();
      batchUpdateException0.fillInStackTrace();
      DataTruncation dataTruncation0 = new DataTruncation(2092, false, false, 2092, 2371, batchUpdateException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      dataTruncation0.forEach(consumer0);
      hashMap0.put(dataTruncation0, "KUaW?=");
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.toString((Iterator<SQLException>) null, (Transformer<? super SQLException, String>) transformer0, "", "ListIterator must not be null", "89:wk!{PMM6F)OQHk,");
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      vector0.add(sQLTimeoutException0);
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(vector0);
      loopingListIterator0.previousIndex();
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLTimeoutException>) loopingListIterator0);
      IteratorUtils.emptyListIterator();
      LinkedList<ComparatorPredicate.Criterion> linkedList0 = new LinkedList<ComparatorPredicate.Criterion>();
      LoopingListIterator<ComparatorPredicate.Criterion> loopingListIterator1 = new LoopingListIterator<ComparatorPredicate.Criterion>(linkedList0);
      IteratorUtils.unmodifiableListIterator((ListIterator<ComparatorPredicate.Criterion>) loopingListIterator1);
      MapIterator<Locale.LanguageRange, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      Properties properties0 = new Properties();
      Properties[] propertiesArray0 = new Properties[4];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("USbF:", "USbF:");
      properties0.remove((Object) sQLInvalidAuthorizationSpecException0);
      propertiesArray0[0] = properties0;
      propertiesArray0[1] = properties0;
      propertiesArray0[2] = properties0;
      propertiesArray0[3] = properties0;
      int int0 = 4;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Properties>) resettableListIterator0, 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 4
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 3);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      OrderedMapIterator<SQLDataException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      SQLDataException[] sQLDataExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLDataException>) orderedMapIterator0, class0);
      IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[2];
      SQLDataException sQLDataException0 = new SQLDataException("JK>", (Throwable) null);
      MockThrowable mockThrowable0 = new MockThrowable((String) null, sQLDataException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("JK>", "JK>", 10, mockThrowable0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("JK>", "", 940, (Throwable) null);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLFeatureNotSupportedException0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 6);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      Class<Object> class2 = Object.class;
      classArray0[1] = class2;
      Class<Object> class3 = Object.class;
      classArray0[2] = class3;
      Class<Object> class4 = Object.class;
      classArray0[3] = class4;
      Class<Object> class5 = Object.class;
      classArray0[4] = class5;
      Class<Object> class6 = Object.class;
      classArray0[5] = class6;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>((String) null, classArray0, sQLInvalidAuthorizationSpecExceptionArray0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, invokerTransformer0, invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) objectArrayListIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) ifTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[3];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("|,\"D", sQLRecoverableException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("|,\"D", "|,\"D", (-1678), sQLIntegrityConstraintViolationException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("ku#,%UB#'V>)zy_", "", sQLRecoverableException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("", "jwlf'&lB;{[TG", (-1678));
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      IteratorUtils.contains((Iterator<SQLTransientConnectionException>) resettableListIterator0, (Object) sQLTransientConnectionException2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Comparator<Object> comparator0 = null;
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 4);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[7];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransactionRollbackException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLTransactionRollbackException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException(sQLIntegrityConstraintViolationException0);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException((String) null, sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("&u=2Bx-:)T_l", "transformer may not be null", 0, sQLNonTransientConnectionException2);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("(*>bc2sGWT", "", 589, sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException4);
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 1, 1);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) listIterator0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("(*>bc2sGWT", sQLNonTransientConnectionException2);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 59;
      Integer integer0 = new Integer(59);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      String string0 = ";3OtQ-";
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Integer>) resettableIterator0, (Transformer<? super Integer, String>) null, ";3OtQ-", ";3OtQ-", ";3OtQ-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedHashSet<SQLClientInfoException> linkedHashSet0 = new LinkedHashSet<SQLClientInfoException>();
      java.util.function.Predicate<Object> predicate0 = java.util.function.Predicate.isEqual((Object) linkedHashSet0);
      java.util.function.Predicate<Object> predicate1 = predicate0.negate();
      java.util.function.Predicate<Object> predicate2 = predicate1.or(predicate0);
      java.util.function.Predicate.isEqual((Object) predicate1);
      linkedHashSet0.removeIf(predicate2);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("q!H5}nJ!", "Iterator must not be null", (Map<String, ClientInfoStatus>) null);
      linkedHashSet0.add(sQLClientInfoException0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<?>) resettableIterator0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Integer integer0 = new Integer((-1810));
      IteratorUtils.getIterator(integer0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLException[]) null, 1754);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Integer integer0 = new Integer((-1792));
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("$?kc~!&v", "$?kc~!&v", (-1792), sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException1);
      sQLDataExceptionArray0[0] = sQLDataException0;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      IteratorUtils.get((Iterator<SQLDataException>) resettableListIterator0, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) stack0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLRecoverableException>) resettableListIterator0, (Closure<? super SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Integer integer0 = new Integer((-1792));
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[10];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      IteratorUtils.get((Iterator<SQLDataException>) resettableListIterator0, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      OrderedMapIterator<Object, ArrayDeque<SQLTransientConnectionException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Object, ArrayDeque<SQLTransientConnectionException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Object, ArrayDeque<SQLTransientConnectionException>>(orderedMapIterator0);
      StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) orderedMapIterator0, (Transformer<? super Object, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte)100;
      byteArray0[8] = (byte)16;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[10];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      IteratorUtils.get((Iterator<SQLDataException>) resettableListIterator0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-10), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 4);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonListIterator<Locale.Category> singletonListIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      iteratorArray0[0] = (Iterator<Locale.Category>) singletonListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Locale.Category>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0);
      Iterator<SQLClientInfoException> iterator0 = null;
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<SQLClientInfoException> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLClientInfoException>>) stack0);
      IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Predicate<IIOMetadataNode> predicate0 = IdentityPredicate.identityPredicate(iIOMetadataNode0);
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) singletonListIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Predicate<IIOMetadataNode> predicate0 = IdentityPredicate.identityPredicate(iIOMetadataNode0);
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) singletonListIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      iIOMetadataNode0.cloneNode(true);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, HashSet<Locale.Category>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
      Transformer<String, String> transformer0 = CloneTransformer.cloneTransformer();
      IteratorUtils.objectGraphIterator("we|>s(mfx#kSN2", (Transformer<? super String, ? extends String>) transformer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Integer integer0 = new Integer(1);
      StringTokenizer stringTokenizer0 = new StringTokenizer("#dK+ 9} T-v", "", true);
      IteratorUtils.getIterator(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[7];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException((String) null, "", 2539, sQLRecoverableExceptionArray0[2]);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("");
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException2;
      ResettableIterator<SQLRecoverableException> resettableIterator1 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      IfClosure<SQLException> ifClosure0 = new IfClosure<SQLException>(predicate0, (Closure<? super SQLException>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLRecoverableException>) resettableIterator1, (Closure<? super SQLRecoverableException>) ifClosure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      PriorityQueue<Closure<Object>> priorityQueue0 = new PriorityQueue<Closure<Object>>();
      ChainedClosure.chainedClosure((Collection<? extends Closure<? super SQLException>>) priorityQueue0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[9];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("8vnWAk_>|5=\fJ,h");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode((String) null);
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode();
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[7] = iIOMetadataNode7;
      IIOMetadataNode iIOMetadataNode8 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[8] = iIOMetadataNode8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 2, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      OrderedMapIterator<SQLDataException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) orderedMapIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) stack0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", (String) null, false);
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.singletonListIterator(stringTokenizer0);
      Transformer<Object, SQLRecoverableException> transformer0 = ConstantTransformer.nullTransformer();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>("", comparator0, comparatorPredicate_Criterion0);
      ResettableIterator<Predicate<Object>> resettableIterator1 = IteratorUtils.singletonIterator((Predicate<Object>) comparatorPredicate0);
      List<Predicate<Object>> list0 = IteratorUtils.toList((Iterator<? extends Predicate<Object>>) resettableIterator1);
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) list0);
      IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends SQLRecoverableException>) transformer0, (Transformer<? super Object, ? extends SQLRecoverableException>) transformer0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends StringTokenizer>) listIterator0, (Transformer<? super StringTokenizer, ? extends SQLRecoverableException>) transformer0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Closure<? super Object>[]) closureArray0);
      IteratorUtils.apply(iterator0, (Closure<? super SQLRecoverableException>) closure0);
      IteratorUtils.isEmpty(listIterator0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      LinkedHashSet<Closure<Object>> linkedHashSet0 = new LinkedHashSet<Closure<Object>>();
      Closure<SQLException> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super SQLException>>) linkedHashSet0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[1];
      SQLTransientException sQLTransientException0 = new SQLTransientException("Iterator must not be null", (String) null, (-331));
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Transformer must not be null", "Transformer must not be null", (-331), (int[]) null, sQLTransientException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Transformer must not be null", "Transformer must not be null", (-331), batchUpdateException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      ResettableIterator<SQLRecoverableException> resettableIterator1 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      IteratorUtils.apply((Iterator<SQLRecoverableException>) resettableIterator1, (Closure<? super SQLRecoverableException>) closure0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Integer integer0 = new Integer((-1795));
      IteratorUtils.getIterator(integer0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 4);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) equalPredicate0, (Closure<? super Object>) closure0);
      closureArray0[0] = closure1;
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      Closure<Object> closure2 = IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure1);
      closureArray0[1] = closure2;
      Closure<Object> closure3 = IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure1);
      closureArray0[2] = closure3;
      Closure<Object> closure4 = ExceptionClosure.exceptionClosure();
      closureArray0[3] = closure4;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>((-1795), chainedClosure0);
      WhileClosure.whileClosure((Predicate<? super SQLException>) equalPredicate0, (Closure<? super SQLException>) forClosure0, false);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", " {a<9", true);
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.singletonListIterator(stringTokenizer0);
      Transformer<Object, SQLRecoverableException> transformer0 = ConstantTransformer.nullTransformer();
      Transformer<Object, SQLRecoverableException> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) equalPredicate0, (Transformer<? super Object, ? extends SQLRecoverableException>) transformer0, (Transformer<? super Object, ? extends SQLRecoverableException>) transformer0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends StringTokenizer>) listIterator0, (Transformer<? super StringTokenizer, ? extends SQLRecoverableException>) transformer1);
      // Undeclared exception!
      try { 
        IteratorUtils.apply(iterator0, (Closure<? super SQLRecoverableException>) closure4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.EqualPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<Properties>) null, (Transformer<? super Properties, String>) transformer0, "getKey() can only be called after next() and before remove()", "getKey() can only be called after next() and before remove()", "getKey() can only be called after next() and before remove()");
      IteratorUtils.emptyIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(transformer0);
      IteratorUtils.find((Iterator<Properties>) null, (Predicate<? super Properties>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 128, 123);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      IteratorUtils.getIterator((Object) null);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(113, false, false, 113, 113);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) resettableListIterator0, (Predicate<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(100, false, false, 10, 100);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      AndPredicate<IIOMetadataNode> andPredicate0 = new AndPredicate<IIOMetadataNode>(predicate0, predicate0);
      LinkedList<ServiceLoader<Properties>> linkedList0 = new LinkedList<ServiceLoader<Properties>>();
      PriorityQueue<Closure<Object>> priorityQueue0 = new PriorityQueue<Closure<Object>>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      AndPredicate<IIOMetadataNode> andPredicate0 = new AndPredicate<IIOMetadataNode>(predicate0, predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLDataException sQLDataException0 = new SQLDataException("Predicate must not be null", "Predicate must not be null");
      Factory<SQLDataException> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<SQLDataException, SQLDataException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLDataException>) factory0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      Class<SQLDataException> class0 = SQLDataException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLDataException>) iterator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      EmptyIterator.resettableEmptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      AndPredicate<IIOMetadataNode> andPredicate0 = new AndPredicate<IIOMetadataNode>(predicate0, predicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) andPredicate0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      IteratorUtils.find((Iterator<IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) andPredicate0);
      PriorityQueue<Closure<Object>> priorityQueue0 = new PriorityQueue<Closure<Object>>();
      Closure<SQLException> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super SQLException>>) priorityQueue0);
      Closure<SQLException> closure1 = WhileClosure.whileClosure((Predicate<? super SQLException>) predicate0, (Closure<? super SQLException>) closure0, false);
      IteratorUtils.apply((Iterator<SQLRecoverableException>) null, (Closure<? super SQLRecoverableException>) closure1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      HashSet<SQLDataException> hashSet0 = new HashSet<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) hashSet0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.iterators.EmptyIterator");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException((Throwable) null);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("MH,k@8bm~8;]+G^x", "Iterator setValue() can only be called after next() and before remove()", 12);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("MH,k@8bm~8;]+G^x");
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<ArrayList<HashSet>>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLException>) null, (Transformer<? super SQLException, ? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLDataExceptionArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null, (Equator<Object>) defaultEquator0);
      SQLDataException sQLDataException0 = new SQLDataException("-Ga^=MYKu", "U>wg\t-m)*,!:A6k");
      DataTruncation dataTruncation0 = new DataTruncation((-251), true, true, (-251), 1945, sQLDataException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("-Ga^=MYKu", dataTruncation0);
      Integer integer0 = new Integer(1829);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(integer0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(identityPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = (Predicate<Object>) identityPredicate0;
      predicateArray0[2] = (Predicate<Object>) identityPredicate0;
      predicateArray0[3] = (Predicate<Object>) notPredicate0;
      predicateArray0[4] = predicate0;
      predicateArray0[5] = (Predicate<Object>) notPredicate0;
      predicateArray0[6] = (Predicate<Object>) identityPredicate0;
      predicateArray0[7] = (Predicate<Object>) notPredicate0;
      Predicate<Object> predicate1 = NotNullPredicate.notNullPredicate();
      predicateArray0[8] = predicate1;
      OnePredicate.onePredicate((Predicate<? super Integer>[]) predicateArray0);
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) (-1);
      Integer integer1 = new Integer(1311);
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = (Integer) (-1);
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0);
      IteratorUtils.matchesAny((Iterator<Integer>) objectArrayIterator0, (Predicate<? super Integer>) predicate0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      String string0 = "U>wg\\t-m)*,!:A6k";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("U>wg\t-m)*,!:A6k");
      iIOMetadataNode0.getElementsByTagNameNS("U>wg\t-m)*,!:A6k", "U>wg\t-m)*,!:A6k");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("U>wg\t-m)*,!:A6k");
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLDataException>) null, 1957);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("U>wg\t-m)*,!:A6k");
      iIOMetadataNode0.getElementsByTagNameNS("U>wg\t-m)*,!:A6k", "U>wg\t-m)*,!:A6k");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("U>wg\t-m)*,!:A6k");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) stack0, (Equator<Object>) defaultEquator0);
      SQLDataException sQLDataException0 = new SQLDataException("U>wg\t-m)*,!:A6k", "U>wg\t-m)*,!:A6k");
      DataTruncation dataTruncation0 = new DataTruncation((-1), true, true, (-1), (-1), sQLDataException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("U>wg\t-m)*,!:A6k", dataTruncation0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLTimeoutException0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = (Predicate<Object>) identityPredicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = (Predicate<Object>) notPredicate0;
      predicateArray0[4] = predicate0;
      predicateArray0[5] = (Predicate<Object>) identityPredicate0;
      predicateArray0[6] = predicate0;
      predicateArray0[7] = (Predicate<Object>) identityPredicate0;
      Predicate<Integer> predicate1 = OnePredicate.onePredicate((Predicate<? super Integer>[]) predicateArray0);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) (-1);
      integerArray0[2] = (Integer) (-1);
      integerArray0[3] = (Integer) (-1);
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0);
      IteratorUtils.matchesAny((Iterator<Integer>) objectArrayIterator0, (Predicate<? super Integer>) predicate1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Enumeration<SQLTransientConnectionException> enumeration0 = (Enumeration<SQLTransientConnectionException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[22];
      sQLDataExceptionArray0[1] = sQLDataException0;
      sQLDataExceptionArray0[2] = sQLDataException0;
      sQLDataExceptionArray0[3] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("2E>69Q{'uCfe?W+F\"/", "2E>69Q{'uCfe?W+F\"/");
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      Iterator<Properties> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Properties>) iterator0, (Iterator<? extends Properties>) iterator0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer((String) null);
      IteratorUtils.toString(iterator1, (Transformer<? super Properties, String>) transformer0, "2E>69Q{'uCfe?W+F\"/", "", "");
      IteratorUtils.emptyIterator();
      IteratorUtils.getIterator(sQLDataException1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      MapIterator<Properties, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<Properties, SQLTimeoutException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) mapIterator0, (Iterator<? extends Properties>) mapIterator0);
      Factory<String> factory0 = ConstantFactory.constantFactory("3");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IteratorUtils.toString((Iterator<Properties>) mapIterator1, (Transformer<? super Properties, String>) transformer0, "3", "*C?H'", "mLr:`-t-");
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.getIterator(transformer0);
      IteratorUtils.isEmpty(resettableIterator0);
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Integer integer0 = new Integer((-1795));
      IteratorUtils.getIterator(integer0);
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      ObjectArrayIterator<Properties> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<Properties>(propertiesArray0, (-1795));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      OrderedMapIterator<SQLTimeoutException, HashSet<Locale.Category>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      InvokerTransformer.invokerTransformer("H!DlCH,d7lIclP}");
      Properties properties0 = new Properties();
      Integer[] integerArray0 = new Integer[5];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1888));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1994));
      integerArray0[4] = integer4;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) anyPredicate0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLSyntaxErrorException0);
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) orderedIterator0, (Equator<Object>) defaultEquator0);
      predicateArray0[2] = predicate0;
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      predicateArray0[3] = (Predicate<Object>) identityPredicate0;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(equalPredicate0);
      predicateArray0[4] = (Predicate<Object>) notPredicate0;
      Predicate<Integer> predicate1 = OnePredicate.onePredicate((Predicate<? super Integer>[]) predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Integer>) resettableListIterator0, (Predicate<? super Integer>) predicate1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      OrderedMapIterator<SQLTimeoutException, HashSet<Locale.Category>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      InvokerTransformer.invokerTransformer("H!DlCH,d7lIclP}");
      Properties properties0 = new Properties();
      Integer[] integerArray0 = new Integer[5];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      int int1 = 10;
      Integer integer1 = new Integer(10);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int1);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1994));
      integerArray0[4] = integer4;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      anyPredicate0.getPredicates();
      predicateArray0[0] = (Predicate<Object>) anyPredicate0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      EmptyListIterator.emptyListIterator();
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      ResettableListIterator<String> resettableListIterator1 = IteratorUtils.loopingListIterator(list0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<String>) resettableListIterator1, (Transformer<? super String, String>) transformer0);
      IteratorUtils.size(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      IteratorUtils.loopingListIterator((List<SQLNonTransientException>) stack0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("U>wg\t-m)*,!:A6k");
      iIOMetadataNode0.getElementsByTagNameNS("U>wg\t-m)*,!:A6k", "U>wg\t-m)*,!:A6k");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Class<SQLDataException> class0 = SQLDataException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLDataException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      MapIterator<Properties, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<Properties, SQLTimeoutException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.collatedIterator((Comparator<? super Properties>) null, (Iterator<? extends Properties>) mapIterator1, (Iterator<? extends Properties>) mapIterator0);
      String string0 = "XQ-V'";
      Factory<String> factory0 = ConstantFactory.constantFactory("XQ-V'");
      FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ResettableListIterator<EnumSet<ComparatorPredicate.Criterion>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asIterable((Iterator<?>) resettableListIterator0);
      EmptyIterator.resettableEmptyIterator();
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      ResettableListIterator<Properties> resettableListIterator1 = IteratorUtils.arrayListIterator(propertiesArray0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>((String) null);
      FactoryTransformer<Properties, String> factoryTransformer0 = new FactoryTransformer<Properties, String>(constantFactory0);
      IteratorUtils.toString((Iterator<Properties>) resettableListIterator1, (Transformer<? super Properties, String>) factoryTransformer0, "", "", "");
      IteratorUtils.emptyIterator();
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator2 = IteratorUtils.emptyListIterator();
      FalsePredicate.falsePredicate();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLInvalidAuthorizationSpecException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLRecoverableException0);
      Predicate<IIOMetadataNode> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super IIOMetadataNode>) equalPredicate0);
      AndPredicate<IIOMetadataNode> andPredicate0 = new AndPredicate<IIOMetadataNode>(equalPredicate0, predicate0);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator2, (Predicate<? super IIOMetadataNode>) equalPredicate0);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate1 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      IteratorUtils.find((Iterator<IIOMetadataNode>) resettableListIterator2, (Predicate<? super IIOMetadataNode>) predicate1);
      Predicate<IIOMetadataNode> predicate2 = OnePredicate.onePredicate((Collection<? extends Predicate<? super IIOMetadataNode>>) priorityQueue0);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) predicate2);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      MapIterator<Properties, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.collatedIterator((Comparator<? super Properties>) null, (Iterator<? extends Properties>) mapIterator0, (Iterator<? extends Properties>) mapIterator0);
      Factory<String> factory0 = ConstantFactory.constantFactory("XQ-V'");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IteratorUtils.toString((Iterator<Properties>) mapIterator0, (Transformer<? super Properties, String>) transformer0, "XQ-V'", "You must invoke setComparator() to set a comparator first.", "Entry does not exist: ");
      IteratorUtils.emptyIterator();
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      AndPredicate<IIOMetadataNode> andPredicate0 = new AndPredicate<IIOMetadataNode>(predicate0, predicate0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("prefix may not be null");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) andPredicate0);
      Predicate<Object> predicate1 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      IteratorUtils.find((Iterator<IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      MapIterator<Properties, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<Properties, SQLTimeoutException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) mapIterator0, (Iterator<? extends Properties>) mapIterator0);
      Factory<String> factory0 = ConstantFactory.constantFactory("3");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IteratorUtils.toString((Iterator<Properties>) mapIterator1, (Transformer<? super Properties, String>) transformer0, "3", "*C?H'", "mLr:`-t-");
      IteratorUtils.emptyIterator();
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      AndPredicate<IIOMetadataNode> andPredicate0 = new AndPredicate<IIOMetadataNode>(predicate0, predicate0);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) andPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      IteratorUtils.find((Iterator<IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(100, false, false, 10, 100);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      AndPredicate<IIOMetadataNode> andPredicate0 = new AndPredicate<IIOMetadataNode>(predicate0, predicate0);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) andPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      IteratorUtils.find((Iterator<IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ResettableListIterator<EnumSet<ComparatorPredicate.Criterion>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asIterable((Iterator<?>) resettableListIterator0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      ListIterator<Boolean> listIterator0 = EmptyListIterator.emptyListIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("!)L]f;^", "!)L]f;^");
      IteratorUtils.contains((Iterator<Boolean>) listIterator0, (Object) sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, HashSet<Locale.Category>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Locale.LanguageRange>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 100;
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Vector<ServiceLoader<Properties>> vector0 = new Vector<ServiceLoader<Properties>>();
      ResettableListIterator<ServiceLoader<Properties>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<ServiceLoader<Properties>>) vector0);
      NotNullPredicate.notNullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends ServiceLoader<Properties>>) resettableListIterator0, (Predicate<? super ServiceLoader<Properties>>) predicate0);
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      OrderedMapIterator<SQLTimeoutException, HashSet<Locale.Category>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      InvokerTransformer.invokerTransformer("H!DlCH,d7lIclP}");
      Properties properties0 = new Properties();
      Integer[] integerArray0 = new Integer[5];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      int int1 = 10;
      Integer integer1 = new Integer(10);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int1);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1994));
      integerArray0[4] = integer4;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) anyPredicate0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLSyntaxErrorException0);
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) orderedIterator0, (Equator<Object>) defaultEquator0);
      predicateArray0[2] = predicate0;
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      predicateArray0[3] = (Predicate<Object>) identityPredicate0;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(equalPredicate0);
      predicateArray0[4] = (Predicate<Object>) notPredicate0;
      Predicate<Integer> predicate1 = OnePredicate.onePredicate((Predicate<? super Integer>[]) predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Integer>) resettableListIterator0, (Predicate<? super Integer>) predicate1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      Stack<IIOMetadataNode> stack1 = new Stack<IIOMetadataNode>();
      MapIterator<Properties, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<Properties, SQLTimeoutException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) null, (Iterator<? extends Properties>) mapIterator1, (Iterator<? extends Properties>) mapIterator0);
      Factory<String> factory0 = ConstantFactory.constantFactory("XQ-V'");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IteratorUtils.toString(iterator0, (Transformer<? super Properties, String>) transformer0, "XQ-V'", "XQ-V'", "prefix may not be null");
      IteratorUtils.emptyIterator();
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      AndPredicate<IIOMetadataNode> andPredicate0 = new AndPredicate<IIOMetadataNode>(predicate0, predicate0);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) andPredicate0);
      IteratorUtils.find((Iterator<IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) andPredicate0);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) andPredicate0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      MapIterator<Properties, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<Properties, SQLTimeoutException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) null, (Iterator<? extends Properties>) mapIterator1, (Iterator<? extends Properties>) mapIterator0);
      Factory<String> factory0 = ConstantFactory.constantFactory("XQ-V'");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super Properties, String>) transformer0, "uA%KGAOj<j,ys", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 5);
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>((SQLNonTransientConnectionException) null, false);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) singletonIterator0);
      iteratorArray0[0] = iterator0;
      ArrayListIterator<SQLNonTransientConnectionException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLNonTransientConnectionException>((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{)q-.");
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLRecoverableException>) resettableIterator0, (-715L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Integer integer0 = new Integer(2329);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      IteratorUtils.toString((Iterator<Integer>) singletonListIterator0);
      IteratorUtils.emptyIterator();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator((IIOMetadataNode) null);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) listIterator0, 2329);
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(list0);
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) orderedIterator0);
      OrderedMapIterator<SQLDataException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends BatchUpdateException>) orderedMapIterator0);
      IteratorUtils.isEmpty(orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) listIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null);
      IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.emptyMapIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "!@9>P", (-2367), sQLIntegrityConstraintViolationException0);
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      IteratorUtils.toArray((Iterator<?>) singletonListIterator0);
      HashSet<SQLDataException> hashSet0 = new HashSet<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) hashSet0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<Properties>) null, (Transformer<? super Properties, String>) transformer0, "getKey() can only be called after next() and before remove()", "getKey() can only be called after next() and before remove()", "getKey() can only be called after next() and before remove()");
      IteratorUtils.emptyIterator();
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Locale.Category, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<Locale.Category, String> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Locale.Category, ? extends String>) mapIterator1);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>((Predicate<? super Object>) null);
      IteratorUtils.getIterator(mapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 10;
      DataTruncation dataTruncation0 = new DataTruncation(100, false, false, 10, 100);
      Iterator<?> iterator0 = IteratorUtils.getIterator(dataTruncation0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLException>) resettableListIterator0, 0L, (long) 10);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayIterator<SQLFeatureNotSupportedException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLFeatureNotSupportedException>(iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DataTruncation dataTruncation0 = new DataTruncation(100, false, false, 10, 100);
      Iterator<?> iterator0 = IteratorUtils.getIterator(dataTruncation0);
      ArrayIterator<SQLFeatureNotSupportedException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLFeatureNotSupportedException>(iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      OrderedMapIterator<SQLDataException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) orderedMapIterator0, class0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.singletonListIterator(stringTokenizer0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) listIterator0, (Iterator<? extends StringTokenizer>) listIterator0);
      Iterator<Vector<IIOMetadataNode>>[] iteratorArray0 = (Iterator<Vector<IIOMetadataNode>>[]) Array.newInstance(Iterator.class, 1);
      Vector<IIOMetadataNode>[] vectorArray0 = (Vector<IIOMetadataNode>[]) Array.newInstance(Vector.class, 4);
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      vectorArray0[0] = vector0;
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      vectorArray0[1] = (Vector<IIOMetadataNode>) stack0;
      Vector<IIOMetadataNode> vector1 = new Vector<IIOMetadataNode>();
      vectorArray0[2] = vector1;
      Stack<IIOMetadataNode> stack1 = new Stack<IIOMetadataNode>();
      vectorArray0[3] = (Vector<IIOMetadataNode>) stack1;
      ResettableListIterator<Vector<IIOMetadataNode>> resettableListIterator0 = IteratorUtils.arrayListIterator(vectorArray0, 0);
      iteratorArray0[0] = (Iterator<Vector<IIOMetadataNode>>) resettableListIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends Vector<IIOMetadataNode>>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, PriorityQueue<SQLIntegrityConstraintViolationException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, PriorityQueue<SQLIntegrityConstraintViolationException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, PriorityQueue<SQLIntegrityConstraintViolationException>>(orderedMapIterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractOrderedMapIteratorDecorator0.forEachRemaining(consumer0);
      SkippingIterator<SQLIntegrityConstraintViolationException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLIntegrityConstraintViolationException>) orderedMapIterator0, 0L);
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) skippingIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0);
      OrderedMapIterator<SQLDataException, Class<SQLInvalidAuthorizationSpecException>> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) orderedMapIterator1);
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0);
      IteratorUtils.toList((Iterator<? extends SQLDataException>) orderedMapIterator1);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = iterator0;
      iteratorArray0[1] = iterator0;
      iteratorArray0[2] = (Iterator<SQLDataException>) orderedMapIterator1;
      iteratorArray0[3] = iterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<Properties>) null, (Transformer<? super Properties, String>) transformer0, "", "getKey() can only be called after next() and before remove()", "lje");
      IteratorUtils.emptyIterator();
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Locale.Category, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      MapIterator<Locale.Category, String> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Locale.Category, ? extends String>) mapIterator0);
      Predicate<Object> predicate0 = null;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>((Predicate<? super Object>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Locale.Category>) mapIterator1, (Predicate<? super Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      OrderedMapIterator<SQLDataException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) orderedMapIterator0, (-2367));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) listIterator0);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) resettableIterator0, 5228);
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(list0);
      IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) loopingListIterator0);
      OrderedMapIterator<SQLDataException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends BatchUpdateException>) orderedMapIterator0);
      IteratorUtils.isEmpty(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLDataException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      OrderedMapIterator<SQLDataException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      SQLDataException[] sQLDataExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLDataException>) orderedMapIterator0, class0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "i");
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLDataException>) resettableListIterator0, 985);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 985
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) resettableIterator0, 10);
      Stack<IIOMetadataNode> stack1 = new Stack<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(stack1);
      IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      OrderedMapIterator<SQLDataException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends BatchUpdateException>) orderedMapIterator0);
      IteratorUtils.isEmpty(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(arrayList0);
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 7);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      classArray0[0] = class0;
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      classArray0[1] = class1;
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      classArray0[2] = class2;
      Class<BatchUpdateException> class3 = BatchUpdateException.class;
      classArray0[3] = class3;
      Class<BatchUpdateException> class4 = BatchUpdateException.class;
      classArray0[4] = class4;
      Class<BatchUpdateException> class5 = BatchUpdateException.class;
      classArray0[5] = class5;
      Class<BatchUpdateException> class6 = BatchUpdateException.class;
      classArray0[6] = class6;
      InvokerTransformer<Object, SQLDataException> invokerTransformer0 = new InvokerTransformer<Object, SQLDataException>("", classArray0, classArray0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLWarning>) loopingListIterator0, (Transformer<? super SQLWarning, ? extends SQLDataException>) invokerTransformer0);
      Class<SQLDataException> class7 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) iterator0, class7);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLWarning sQLWarning0 = new SQLWarning("'", "FLuJ");
      SQLWarning[] sQLWarningArray0 = new SQLWarning[8];
      sQLWarningArray0[0] = sQLWarning0;
      sQLWarningArray0[1] = sQLWarning0;
      sQLWarningArray0[2] = sQLWarning0;
      sQLWarningArray0[3] = sQLWarning0;
      sQLWarningArray0[4] = sQLWarning0;
      sQLWarningArray0[5] = sQLWarning0;
      sQLWarningArray0[6] = sQLWarning0;
      sQLWarningArray0[7] = sQLWarning0;
      IteratorUtils.arrayIterator(sQLWarningArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("FLuJ");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("org.apache.commons.collections4.map.SingletonMap");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      iIOMetadataNode0.getAttributeNodeNS("FLuJ", "FLuJ");
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<?>) nodeListIterator0, (-1526L), (-1526L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<Properties>) null, (Transformer<? super Properties, String>) transformer0, "getKey() can only be called after next() and before remove()", "getKey() can only be called after next() and before remove()", "getKey() can only be called after next() and before remove()");
      IteratorUtils.emptyIterator();
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      OrderedMapIterator<SQLDataException, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends BatchUpdateException>) orderedMapIterator0);
      IteratorUtils.isEmpty(orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      IteratorUtils.loopingListIterator((List<SQLNonTransientException>) stack0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("U>wg\t-m)x,!:A6k");
      iIOMetadataNode0.getElementsByTagNameNS("U>wg\t-m)x,!:A6k", "U>wg\t-m)x,!:A6k");
      Class<SQLDataException> class0 = SQLDataException.class;
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>(1968, (-772));
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) vector0);
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLFeatureNotSupportedException> iterator0 = null;
      Predicate<SQLFeatureNotSupportedException> predicate0 = UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(100, false, false, 10, 100);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      AndPredicate<IIOMetadataNode> andPredicate0 = new AndPredicate<IIOMetadataNode>(predicate0, predicate0);
      LinkedList<ServiceLoader<Properties>> linkedList0 = new LinkedList<ServiceLoader<Properties>>();
      LoopingListIterator<ServiceLoader<Properties>> loopingListIterator0 = new LoopingListIterator<ServiceLoader<Properties>>(linkedList0);
      ResettableListIterator<ServiceLoader<Properties>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<ServiceLoader<Properties>>) linkedList0);
      Predicate<Object> predicate1 = NotNullPredicate.notNullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends ServiceLoader<Properties>>) resettableListIterator0, (Predicate<? super ServiceLoader<Properties>>) predicate1);
      IteratorUtils.size(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, PriorityQueue<SQLIntegrityConstraintViolationException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, PriorityQueue<SQLIntegrityConstraintViolationException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, PriorityQueue<SQLIntegrityConstraintViolationException>>(orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLIntegrityConstraintViolationException, PriorityQueue<SQLIntegrityConstraintViolationException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLIntegrityConstraintViolationException, PriorityQueue<SQLIntegrityConstraintViolationException>>(abstractOrderedMapIteratorDecorator0);
      Consumer<SQLIntegrityConstraintViolationException> consumer0 = (Consumer<SQLIntegrityConstraintViolationException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractOrderedMapIteratorDecorator0.forEachRemaining(consumer0);
      IteratorUtils.isEmpty(abstractMapIteratorDecorator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OrderedMapIterator<SQLDataException, BatchUpdateException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) orderedMapIterator1, class0);
      LinkedList<ServiceLoader<Properties>> linkedList0 = new LinkedList<ServiceLoader<Properties>>();
      LoopingListIterator<ServiceLoader<Properties>> loopingListIterator0 = new LoopingListIterator<ServiceLoader<Properties>>(linkedList0);
      List<ServiceLoader<Properties>> list0 = IteratorUtils.toList((Iterator<? extends ServiceLoader<Properties>>) loopingListIterator0);
      ResettableListIterator<ServiceLoader<Properties>> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Iterator<ServiceLoader<Properties>> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends ServiceLoader<Properties>>) resettableListIterator0, (Predicate<? super ServiceLoader<Properties>>) predicate0);
      IteratorUtils.skippingIterator(iterator0, 1534L);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      Predicate<Object> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) uniquePredicate0);
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = TruePredicate.truePredicate();
      predicateArray0[2] = predicate1;
      Predicate<Object> predicate2 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate2);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nullIsTruePredicate0, predicateArray0[0]);
      NullIsFalsePredicate<Boolean> nullIsFalsePredicate0 = new NullIsFalsePredicate<Boolean>(andPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Boolean>) null, (Predicate<? super Boolean>) nullIsFalsePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      IteratorUtils.loopingListIterator((List<SQLNonTransientException>) stack0);
      IteratorUtils.toString((Iterator<Integer>) null);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.unmodifiableIterator((Iterator<DataTruncation>) resettableIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "G%W#%#");
      MapIterator<Integer, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIteratorWrapper<Integer> listIteratorWrapper0 = new ListIteratorWrapper<Integer>(mapIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) anyPredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) nonePredicate0;
      AnyPredicate<Object> anyPredicate1 = new AnyPredicate<Object>(predicateArray0);
      ListIterator<Integer> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) listIteratorWrapper0, (Predicate<? super Integer>) predicateArray0[1]);
      IteratorUtils.collatedIterator((Comparator<? super Integer>) null, (Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, PriorityQueue<SQLIntegrityConstraintViolationException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, PriorityQueue<SQLIntegrityConstraintViolationException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, PriorityQueue<SQLIntegrityConstraintViolationException>>(orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLIntegrityConstraintViolationException, PriorityQueue<SQLIntegrityConstraintViolationException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLIntegrityConstraintViolationException, PriorityQueue<SQLIntegrityConstraintViolationException>>(abstractOrderedMapIteratorDecorator0);
      Consumer<SQLIntegrityConstraintViolationException> consumer0 = (Consumer<SQLIntegrityConstraintViolationException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractOrderedMapIteratorDecorator0.forEachRemaining(consumer0);
      SkippingIterator<SQLIntegrityConstraintViolationException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLIntegrityConstraintViolationException>) abstractMapIteratorDecorator0, 0L);
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) skippingIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) abstractMapIteratorDecorator0);
      IteratorUtils.asIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) abstractMapIteratorDecorator0);
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "");
      MapIterator<Integer, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ListIteratorWrapper<Integer> listIteratorWrapper0 = new ListIteratorWrapper<Integer>(mapIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      ListIterator<Integer> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) listIteratorWrapper0, (Predicate<? super Integer>) anyPredicate0);
      IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[6];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode1;
      iIOMetadataNodeArray0[3] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("");
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[5] = iIOMetadataNode3;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0, (Iterator<? extends IIOMetadataNode>) resettableIterator0);
      Predicate<IIOMetadataNode> predicate0 = IdentityPredicate.identityPredicate(iIOMetadataNode0);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[2];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Di(v<", "iterator");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 0, sQLRecoverableException0);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.map.Flat3Map$EntrySet", "org.apache.commons.collections4.map.Flat3Map$EntrySet", sQLRecoverableException0);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, 0, 0);
      OrderedMapIterator<Properties, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Properties, SQLIntegrityConstraintViolationException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Properties, SQLIntegrityConstraintViolationException>(orderedMapIterator0);
      MapIterator<Properties, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Properties, SQLIntegrityConstraintViolationException>) abstractMapIteratorDecorator0);
      MapIterator<Properties, SQLIntegrityConstraintViolationException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Properties, ? extends SQLIntegrityConstraintViolationException>) mapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) mapIterator1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLException sQLException0 = new SQLException((String) null, "", 5);
      int[] intArray0 = new int[5];
      intArray0[0] = 5;
      intArray0[1] = 255;
      intArray0[2] = 0;
      intArray0[3] = 5;
      intArray0[4] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("j7gn}+}-", "Max parameter must not be negative.", 2430, sQLException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", intArray0);
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(intArray0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[7];
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray0, sQLException0);
      batchUpdateExceptionArray0[6] = batchUpdateException3;
      batchUpdateExceptionArray0[3] = batchUpdateException0;
      batchUpdateExceptionArray0[4] = batchUpdateException2;
      batchUpdateExceptionArray0[5] = batchUpdateException0;
      batchUpdateExceptionArray0[6] = batchUpdateException0;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) resettableIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends BatchUpdateException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<String, SQLNonTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Integer integer0 = new Integer(2329);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      IteratorUtils.toString((Iterator<Integer>) singletonListIterator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<DataTruncation> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<DataTruncation>) resettableIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray(iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("tR&'");
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      ResettableIterator<IIOMetadataNode> resettableIterator1 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 0);
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) resettableIterator1, (Iterator<? extends IIOMetadataNode>) resettableIterator1);
      Predicate<IIOMetadataNode> predicate0 = IdentityPredicate.identityPredicate(iIOMetadataNode0);
      IteratorUtils.matchesAll(iterator1, (Predicate<? super IIOMetadataNode>) predicate0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      IteratorUtils.loopingListIterator((List<SQLNonTransientException>) stack0);
      OrderedMapIterator<SQLDataException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, BatchUpdateException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends BatchUpdateException>) orderedMapIterator0);
      IteratorUtils.isEmpty(orderedMapIterator1);
      OrderedMapIterator<SQLTimeoutException, HashSet<Locale.Category>> orderedMapIterator2 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLTimeoutException, HashSet<Locale.Category>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTimeoutException, HashSet<Locale.Category>>) orderedMapIterator2);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTimeoutException>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) orderedMapIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 8);
      linkedList0.remove((Object) sQLIntegrityConstraintViolationException0);
      Iterator<SQLTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) linkedList0);
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      iteratorArray0[1] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      iteratorArray0[2] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      iteratorArray0[3] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "l4rPFzC0DPqX.dkl{25";
      stringArray0[1] = "^|<_wT*;{`";
      stringArray0[2] = "li9?`n2";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "l4rPFzC0DPqX.dkl{25";
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(iIOMetadataNodeArray0, (-859));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Integer integer0 = new Integer(2329);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      IteratorUtils.loopingListIterator((List<SQLNonTransientException>) vector0);
      OrderedMapIterator<SQLDataException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends BatchUpdateException>) orderedMapIterator0);
      IteratorUtils.isEmpty(singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      int[] intArray0 = new int[0];
      SQLDataException sQLDataException0 = new SQLDataException("");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLDataException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", intArray0, batchUpdateException0);
      ArrayListIterator<SQLIntegrityConstraintViolationException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLIntegrityConstraintViolationException>(batchUpdateException1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Integer integer0 = new Integer(2329);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      IteratorUtils.toString((Iterator<Integer>) singletonListIterator0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.unmodifiableIterator((Iterator<DataTruncation>) resettableIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(singletonListIterator0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Properties>) null, (Transformer<? super Properties, String>) transformer0, (String) null, "[2329]", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) "getKey() can only be called after next() and before remove()");
      Predicate<Object> predicate1 = FalsePredicate.falsePredicate();
      InvokerTransformer.invokerTransformer("org.apache.commons.collections4.list.CursorableLinkedList$SubCursor");
      Properties properties0 = new Properties();
      Predicate<Object> predicate2 = IdentityPredicate.identityPredicate((Object) predicate1);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate2);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(predicateTransformer0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Oe`_22bD2@", hashtable0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLClientInfoException0, defaultEquator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = (Predicate<Object>) transformedPredicate0;
      AnyPredicate<SQLException> anyPredicate0 = new AnyPredicate<SQLException>(predicateArray0);
      OrPredicate<SQLNonTransientConnectionException> orPredicate0 = new OrPredicate<SQLNonTransientConnectionException>(equalPredicate0, predicateArray0[0]);
      IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) predicateArray0[0]);
      Integer integer0 = new Integer(1455);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0, false);
      singletonIterator0.next();
      IteratorUtils.toString((Iterator<Integer>) singletonIterator0, (Transformer<? super Integer, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("Zaq^7!(g@", "6|", false);
      java.util.function.Predicate<Object> predicate0 = java.util.function.Predicate.isEqual((Object) stringTokenizer0);
      linkedList0.removeIf(predicate0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) linkedList0);
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      iteratorArray0[1] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      iteratorArray0[2] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      iteratorArray0[3] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      String[] stringArray0 = new String[9];
      stringArray0[1] = "^|<_wT*;{`";
      stringArray0[2] = "li9?`n2";
      stringArray0[3] = "";
      String string0 = "";
      stringArray0[4] = "";
      stringArray0[5] = stringArray0[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Properties[]) null, (-1211));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, PriorityQueue<SQLIntegrityConstraintViolationException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, PriorityQueue<SQLIntegrityConstraintViolationException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, PriorityQueue<SQLIntegrityConstraintViolationException>>(orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLIntegrityConstraintViolationException, PriorityQueue<SQLIntegrityConstraintViolationException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLIntegrityConstraintViolationException, PriorityQueue<SQLIntegrityConstraintViolationException>>(abstractOrderedMapIteratorDecorator0);
      SkippingIterator<SQLIntegrityConstraintViolationException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLIntegrityConstraintViolationException>) abstractMapIteratorDecorator0, 0L);
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) skippingIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) abstractMapIteratorDecorator0);
      IteratorUtils.asIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) abstractMapIteratorDecorator0);
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("S41F>clY");
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("|lT<s^vD)nnD^uvDI_i");
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode("org.apache.commons.collections4.map.AbstractSortedMapDecorator");
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      iIOMetadataNodeArray0[0] = iIOMetadataNode2;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0, (Iterator<? extends IIOMetadataNode>) resettableIterator0);
      IdentityPredicate.identityPredicate(iIOMetadataNode4);
      IdentityPredicate<IIOMetadataNode> identityPredicate0 = new IdentityPredicate<IIOMetadataNode>(iIOMetadataNode4);
      LinkedHashSet<ServiceLoader<SQLIntegrityConstraintViolationException>> linkedHashSet0 = new LinkedHashSet<ServiceLoader<SQLIntegrityConstraintViolationException>>();
      IdentityPredicate.identityPredicate(linkedHashSet0);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super IIOMetadataNode>) identityPredicate0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[9];
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.map.AbstractSortedMapDecorator", "Criterion must not be null.", intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException((String) null, intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException();
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("/xcGwib/BE ?", "Criterion must not be null.", 0);
      BatchUpdateException batchUpdateException4 = new BatchUpdateException(sQLRecoverableException0);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("/xcGwib/BE ?", intArray0);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException("0gJR]$/@4y ", "{+TUnEo4y|$", intArray0, batchUpdateException5);
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      BatchUpdateException batchUpdateException7 = new BatchUpdateException("\u0003w5!8", "Estimated size must be greater than 0", (-1223), intArray0, batchUpdateException2);
      batchUpdateExceptionArray0[7] = batchUpdateException7;
      BatchUpdateException batchUpdateException8 = new BatchUpdateException("0gJR]$/@4y ", "", intArray0, batchUpdateException5);
      batchUpdateExceptionArray0[8] = batchUpdateException8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, (-1223), 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = 2266;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) comparator0, (-1968), 2266);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      Stack<IIOMetadataNode> stack1 = new Stack<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(stack1);
      IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      ArrayList<Boolean> arrayList0 = new ArrayList<Boolean>();
      ResettableIterator<Boolean> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends Boolean>) arrayList0);
      IteratorUtils.toList((Iterator<? extends Boolean>) resettableIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) stack1, (-338), (-338));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OrderedMapIterator<SQLDataException, ComparatorPredicate.Criterion> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) orderedMapIterator0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0);
      IteratorUtils.toList((Iterator<? extends SQLDataException>) iterator0);
      ServiceLoader<Boolean>[] serviceLoaderArray0 = (ServiceLoader<Boolean>[]) Array.newInstance(ServiceLoader.class, 3);
      Class<Boolean> class0 = Boolean.class;
      ServiceLoader<Boolean> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      serviceLoaderArray0[0] = serviceLoader0;
      ServiceLoader<Boolean> serviceLoader1 = ServiceLoader.loadInstalled(class0);
      serviceLoaderArray0[1] = serviceLoader1;
      Class<Boolean> class1 = Boolean.class;
      ServiceLoader<Boolean> serviceLoader2 = ServiceLoader.loadInstalled(class1);
      serviceLoaderArray0[2] = serviceLoader2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(serviceLoaderArray0, 1, 2853);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(stack0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) loopingListIterator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      IteratorUtils.size(iterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) iterator0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = FalsePredicate.falsePredicate();
      predicateArray0[1] = predicate1;
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.list.CursorableLinkedList$SubCursor");
      Properties properties0 = new Properties();
      Predicate<Object> predicate2 = IdentityPredicate.identityPredicate((Object) properties0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate2);
      predicateArray0[2] = (Predicate<Object>) transformedPredicate0;
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate2);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(predicateTransformer0);
      predicateArray0[3] = (Predicate<Object>) transformerPredicate0;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(predicate0, defaultEquator0);
      predicateArray0[4] = (Predicate<Object>) equalPredicate0;
      AnyPredicate<SQLException> anyPredicate0 = new AnyPredicate<SQLException>(predicateArray0);
      OrPredicate<SQLNonTransientConnectionException> orPredicate0 = new OrPredicate<SQLNonTransientConnectionException>(anyPredicate0, transformedPredicate0);
      IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) orPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<IIOMetadataNode> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator");
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("tuWR8NB@");
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[6];
      iIOMetadataNodeArray0[0] = iIOMetadataNode2;
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      iIOMetadataNodeArray0[3] = iIOMetadataNode2;
      iIOMetadataNodeArray0[4] = iIOMetadataNode2;
      iIOMetadataNodeArray0[5] = iIOMetadataNode0;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate1);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(notPredicate0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(notPredicate0, (Equator<Object>) null);
      AnyPredicate<SQLException> anyPredicate0 = new AnyPredicate<SQLException>(predicateArray0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      OrPredicate<SQLNonTransientConnectionException> orPredicate0 = new OrPredicate<SQLNonTransientConnectionException>(allPredicate0, allPredicate0);
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      LoopingIterator<SQLNonTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLNonTransientConnectionException>(vector0);
      IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) loopingIterator0, (Predicate<? super SQLNonTransientConnectionException>) notPredicate0);
      ListIterator<StringTokenizer> listIterator1 = EmptyListIterator.emptyListIterator();
      IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) listIterator1, 1594L);
      IteratorUtils.boundedIterator((Iterator<? extends SQLException>) listIterator0, 1594L);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator");
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("tuWR8NB@");
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator");
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode("iaP{6V?;");
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode((String) null);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[8];
      iIOMetadataNodeArray0[3] = iIOMetadataNode2;
      iIOMetadataNodeArray0[1] = iIOMetadataNode5;
      iIOMetadataNodeArray0[2] = iIOMetadataNode0;
      iIOMetadataNodeArray0[3] = iIOMetadataNode4;
      iIOMetadataNodeArray0[4] = iIOMetadataNode2;
      iIOMetadataNodeArray0[5] = iIOMetadataNode4;
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      iIOMetadataNodeArray0[7] = iIOMetadataNode5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(iIOMetadataNodeArray0, (-3651));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator");
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator");
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode((String) null);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      iIOMetadataNodeArray0[0] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("{C-LS@W^vjm9");
      iIOMetadataNodeArray0[1] = iIOMetadataNode4;
      iIOMetadataNodeArray0[2] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode("{C-LS@W^vjm9");
      iIOMetadataNodeArray0[3] = iIOMetadataNode5;
      iIOMetadataNodeArray0[4] = iIOMetadataNode1;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 0);
      HashMap<IIOMetadataNode, SQLWarning> hashMap0 = new HashMap<IIOMetadataNode, SQLWarning>();
      EntrySetMapIterator<IIOMetadataNode, SQLWarning> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLWarning>(hashMap0);
      AbstractMapIteratorDecorator<IIOMetadataNode, SQLWarning> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, SQLWarning>(entrySetMapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) abstractMapIteratorDecorator0, (Iterator<? extends IIOMetadataNode>) resettableIterator0);
      entrySetMapIterator0.hasNext();
      IdentityPredicate.identityPredicate(iIOMetadataNode4);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) entrySetMapIterator0, (Predicate<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(stack0);
      SQLException sQLException0 = new SQLException("org.apache.commons.collections4.iterators.SingletonListIterator", "org.apache.commons.collections4.iterators.SingletonListIterator", 0);
      int[] intArray0 = new int[1];
      intArray0[0] = 5;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("j7gn}+}-", "org.apache.commons.collections4.iterators.SingletonListIterator", 1, batchUpdateException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray0, sQLFeatureNotSupportedException0);
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("org.apache.commonscolections4.IteratorUtls", intArray0);
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 1508;
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Properties>) null, (Transformer<? super Properties, String>) transformer0, "getKey() can only be called after next() and before remove()", (String) null, "getKey() can only be called after next() and before remove()");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.map.AbstractSortedMapDecorator");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("org.apache.commons.collections4.map.AbstractSortedMapDecorator", "org.apache.commons.collections4.map.AbstractSortedMapDecorator");
      IteratorUtils.nodeListIterator(nodeList0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.map.AbstractSortedMapDecorator", "delimiter may not be null", (-1210));
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("delimiter may not be null", sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException(":k\"`H|;vIdhA", "68#_srbNN]87", sQLDataException1);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("1WCtiHeDBy", sQLDataException1);
      sQLDataExceptionArray0[3] = sQLDataException3;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLDataException>) resettableListIterator0, 1971);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1967
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 1508;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1508);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[6];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      iIOMetadataNodeArray0[3] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[4] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[5] = iIOMetadataNode4;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 0);
      IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0, (Iterator<? extends IIOMetadataNode>) resettableIterator0);
      IdentityPredicate.identityPredicate(iIOMetadataNode1);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("(W,xv&");
      IteratorUtils.toString((Iterator<Transformer<Object, String>>) null, (Transformer<? super Transformer<Object, String>, String>) constantTransformer0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Integer integer0 = new Integer(2329);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      IteratorUtils.toString((Iterator<Integer>) singletonListIterator0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<DataTruncation> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<DataTruncation>) resettableIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray(iterator0);
      IteratorUtils.emptyOrderedMapIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(singletonListIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("[2329]", "", 2329);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("[2329]", "org.apache.commons.collections4.functors.EqualPredicate", 2329);
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransientConnectionException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[8];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("*Od*rh6", "(H)j|mkV#}0", sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("*Od*rh6", sQLDataException1);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("(H)j|mkV#}0");
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException((String) null, "", (-2403), sQLDataException0);
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException(sQLDataException0);
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException("", sQLDataException4);
      sQLDataExceptionArray0[6] = sQLDataException6;
      SQLDataException sQLDataException7 = new SQLDataException("*Od*rh6", "xc3O>`QHC{dTzxMy", sQLDataException0);
      sQLDataExceptionArray0[7] = sQLDataException7;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0);
      IteratorUtils.toList((Iterator<? extends SQLDataException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<IIOMetadataNode> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator");
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("tuWR8NB@");
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[6];
      iIOMetadataNodeArray0[0] = iIOMetadataNode2;
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      iIOMetadataNodeArray0[3] = iIOMetadataNode2;
      iIOMetadataNodeArray0[4] = iIOMetadataNode2;
      iIOMetadataNodeArray0[5] = iIOMetadataNode0;
      IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 0);
      HashMap<IIOMetadataNode, SQLWarning> hashMap0 = new HashMap<IIOMetadataNode, SQLWarning>();
      EntrySetMapIterator<IIOMetadataNode, SQLWarning> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLWarning>(hashMap0);
      AbstractMapIteratorDecorator<IIOMetadataNode, SQLWarning> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, SQLWarning>(entrySetMapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) abstractMapIteratorDecorator0, (Iterator<? extends IIOMetadataNode>) abstractMapIteratorDecorator0);
      entrySetMapIterator0.hasNext();
      Predicate<IIOMetadataNode> predicate0 = IdentityPredicate.identityPredicate(iIOMetadataNode2);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) abstractMapIteratorDecorator0, (Predicate<? super IIOMetadataNode>) predicate0);
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      OrderedMapIterator<SQLDataException, ComparatorPredicate.Criterion> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) orderedMapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0);
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      LinkedList<SQLTransientConnectionException>[] linkedListArray0 = (LinkedList<SQLTransientConnectionException>[]) Array.newInstance(LinkedList.class, 9);
      linkedListArray0[0] = linkedList0;
      linkedListArray0[1] = linkedList0;
      linkedListArray0[2] = linkedList0;
      LinkedList<SQLTransientConnectionException> linkedList1 = new LinkedList<SQLTransientConnectionException>();
      linkedListArray0[8] = linkedList1;
      linkedListArray0[4] = linkedList0;
      linkedListArray0[5] = linkedList0;
      linkedListArray0[6] = linkedList0;
      linkedListArray0[7] = linkedList0;
      linkedListArray0[8] = linkedList0;
      IteratorUtils.arrayListIterator(linkedListArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[6];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0, (Iterator<? extends IIOMetadataNode>) resettableIterator0);
      Predicate<IIOMetadataNode> predicate0 = IdentityPredicate.identityPredicate(iIOMetadataNode1);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super IIOMetadataNode>) predicate0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      IteratorUtils.loopingListIterator((List<SQLNonTransientException>) stack0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("U>wg\t-m)*,!:A6k");
      iIOMetadataNode0.getElementsByTagNameNS("U>wg\t-m)*,!:A6k", "U>wg\t-m)*,!:A6k");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      ArrayList<SQLNonTransientException> arrayList0 = new ArrayList<SQLNonTransientException>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) null, (Collection<? super SQLFeatureNotSupportedException>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) null, (Iterator<? extends SQLDataException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) linkedList0);
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      iteratorArray0[1] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      iteratorArray0[2] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      iteratorArray0[3] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "l4rPFzC0DPqX.dkl{25";
      stringArray0[1] = "^|<_wT*;{`";
      stringArray0[2] = "li9?`n2";
      stringArray0[3] = "";
      String string0 = "";
      stringArray0[4] = "";
      stringArray0[5] = "l4rPFzC0DPqX.dkl{25";
      stringArray0[6] = "dh<9j/ Ezt2D4d";
      stringArray0[7] = "{$";
      stringArray0[8] = "remove() is not supported";
      ObjectArrayListIterator<String> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0, 2687);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) linkedList0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      iteratorArray0[1] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      iteratorArray0[2] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      iteratorArray0[3] = (Iterator<SQLTimeoutException>) orderedMapIterator0;
      IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "l4rPFzC0DPqX.dkl{25";
      stringArray0[1] = "^|<_wT*;{`";
      stringArray0[2] = "li9?`n2";
      stringArray0[3] = "";
      String string0 = "";
      stringArray0[4] = "";
      stringArray0[5] = "Collection must not be null";
      stringArray0[6] = "dh<9j/ Ezt2D4d";
      stringArray0[7] = "{$";
      stringArray0[8] = "remove() is not supported";
      ObjectArrayListIterator<String> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0, 2687);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      IteratorUtils.singletonIterator((SQLTimeoutException) null);
      OrderedMapIterator<Properties, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, SQLException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, SQLException>(orderedMapIterator0);
      OrderedMapIterator<Properties, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Properties, ? extends SQLException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator1);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[9];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("7AKV1b");
      SQLDataException sQLDataException0 = new SQLDataException("7AKV1b", sQLNonTransientException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException();
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException();
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLDataException2);
      SQLException sQLException0 = new SQLException(sQLNonTransientConnectionException0);
      SQLDataException sQLDataException3 = new SQLDataException("q+puHf?}", "7AKV1b", sQLException0);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("q+puHf?}", "q+puHf?}");
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("7AKV1b", "7AKV1b", 2124);
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException();
      sQLDataExceptionArray0[6] = sQLDataException6;
      SQLDataException sQLDataException7 = new SQLDataException("7AKV1b", (Throwable) null);
      sQLDataExceptionArray0[7] = sQLDataException7;
      SQLDataException sQLDataException8 = new SQLDataException(sQLDataException1);
      sQLDataExceptionArray0[8] = sQLDataException8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLDataExceptionArray0, (-1699));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLException>) orderedIterator0, (Transformer<? super SQLException, ? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.unmodifiableIterator((Iterator<Properties>) resettableListIterator0);
      int int0 = 6918;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTimeoutException[]) null, 6918, 6918);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = (-620);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-620));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = (-304);
      intArray0[2] = 0;
      intArray0[3] = 5;
      intArray0[4] = 0;
      SQLException sQLException0 = new SQLException("org.apache.commons.collections4.iterators.SingletonListIterator", "jNlB&Yu6:", 693);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("org.apache.commons.collections4.iterators.SingletonListIterator", intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) resettableIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransientException[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[9];
      long[] longArray0 = new long[0];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("delimiter may not be null", "W`es:o'rQ0!A]Bw.Bc", 0, longArray0, sQLTransactionRollbackException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("W`es:o'rQ0!A]Bw.Bc", intArray0, sQLTransactionRollbackException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("0", "", intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("delimiter may not be null", "delimiter may not be null", intArray0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("[", (String) null, 9, intArray0);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("B&\"h.o]2", "B&\"h.o]2", intArray0);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException("", "B&\"h.o]2", 2707, longArray0, batchUpdateException0);
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      BatchUpdateException batchUpdateException7 = new BatchUpdateException();
      batchUpdateExceptionArray0[7] = batchUpdateException7;
      BatchUpdateException batchUpdateException8 = new BatchUpdateException("", "0", intArray0);
      batchUpdateExceptionArray0[8] = batchUpdateException8;
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) objectArrayListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<StringTokenizer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("%(SEw,");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, sQLTransactionRollbackException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashtable0.put("%(SEw,", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "Closure must not be null", map0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLClientInfoException1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLRecoverableException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<SQLDataException, SQLClientInfoException> hashMap0 = new HashMap<SQLDataException, SQLClientInfoException>();
      EntrySetMapIterator<SQLDataException, SQLClientInfoException> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, SQLClientInfoException>(hashMap0);
      IteratorUtils.size(entrySetMapIterator0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) entrySetMapIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Object object0 = new Object();
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 3);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      classArray0[0] = class0;
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      classArray0[1] = class1;
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      classArray0[2] = class2;
      InvokerTransformer<Object, Iterator<SQLFeatureNotSupportedException>> invokerTransformer0 = new InvokerTransformer<Object, Iterator<SQLFeatureNotSupportedException>>("MapIterator[", classArray0, classArray0);
      Transformer<Object, DataTruncation> transformer0 = InvokerTransformer.invokerTransformer("Z#R");
      IteratorUtils.objectGraphIterator(object0, (Transformer<? super Object, ?>) invokerTransformer0);
      int int0 = 1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) transformer0, 1, (-2445));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(128);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Enumeration must not be null", "org.apache.commons.collections4.map.Flat3Map$EntrySet", 128, hashMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.map.Flat3Map$EntrySet", "org.apache.commons.collections4.map.Flat3Map$EntrySet", 128, sQLClientInfoException0);
      ConstantTransformer<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException> constantTransformer0 = new ConstantTransformer<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) constantTransformer0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[6];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("}");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(")C4Tl0=$h62d", "", sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("", "", (-1171));
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("", "[", 91);
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = null;
      SQLWarning sQLWarning0 = new SQLWarning();
      sQLWarning0.getSuppressed();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, sQLWarning0);
      sQLTransientConnectionException0.setNextException(sQLWarning0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = 0;
      OrderedMapIterator<SQLDataException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) orderedMapIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = "prefix may not be null";
      int int0 = (-949);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("prefix may not be null", "pI16)[j-3j{ P}j$fY", (-949));
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLSyntaxErrorException0, (-949));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) null, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<Locale.Category, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Locale.Category, IIOMetadataNode> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.Category, ? extends IIOMetadataNode>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<Locale.Category, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Locale.Category, IIOMetadataNode>(orderedMapIterator1);
      IteratorUtils.peekingIterator((Iterator<? extends Locale.Category>) abstractOrderedMapIteratorDecorator0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[1];
      SQLWarning sQLWarning0 = new SQLWarning();
      sQLWarning0.getSuppressed();
      StackTraceElement[] stackTraceElementArray0 = sQLWarning0.getStackTrace();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null, (-747));
      sQLIntegrityConstraintViolationException0.setStackTrace(stackTraceElementArray0);
      sQLWarning0.addSuppressed(sQLIntegrityConstraintViolationException0);
      sQLWarningArray0[0] = sQLWarning0;
      sQLWarning0.setNextWarning(sQLWarning0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLWarningArray0, (-4500), 1943);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) listIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null);
      IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<Integer, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) mapIterator0, (Iterator<? extends Integer>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "delimiter may not be null";
      int int0 = (-482);
      SQLException sQLException0 = new SQLException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("delimiter may not be null", "transformer may not be null", (-482), sQLException0);
      ListIterator<SQLTransientException> listIterator0 = IteratorUtils.singletonListIterator((SQLTransientException) sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransientException>) listIterator0, (-482));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -482
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(stack0);
      SQLException sQLException0 = new SQLException("org.apache.commons.collections4.iterators.SingletonListIterator", "org.apache.commons.collections4.iterators.SingletonListIterator", 0);
      int[] intArray0 = new int[1];
      intArray0[0] = 5;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLException0);
      MapIterator<Integer, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.collatedIterator((Comparator<? super Integer>) null, (Iterator<? extends Integer>) mapIterator0, (Iterator<? extends Integer>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = 93;
      MockThrowable mockThrowable0 = new MockThrowable();
      DataTruncation dataTruncation0 = new DataTruncation(93, true, true, 93, 93, mockThrowable0);
      mockThrowable0.addSuppressed(dataTruncation0);
      int int1 = (-1462);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation0, (-1462));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("'", "'", 0);
      stack0.add((SQLNonTransientException) sQLInvalidAuthorizationSpecException0);
      IteratorUtils.loopingListIterator((List<SQLNonTransientException>) stack0);
      OrderedMapIterator<SQLDataException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, BatchUpdateException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends BatchUpdateException>) orderedMapIterator0);
      Class<SQLDataException> class0 = SQLDataException.class;
      SQLDataException[] sQLDataExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLDataException>) orderedMapIterator1, class0);
      assertEquals(0, sQLDataExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      IteratorUtils.loopingListIterator((List<SQLClientInfoException>) linkedList0);
      MapIterator<SQLTransactionRollbackException, Class<IIOMetadataNode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIteratorWrapper<SQLTransactionRollbackException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransactionRollbackException>(mapIterator0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransactionRollbackException>) listIteratorWrapper0);
      ListIterator<SQLTransactionRollbackException> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) listIterator0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>) listIterator1, (Iterator<? extends SQLTransactionRollbackException>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Iterator<LinkedList<Properties>> iterator0 = null;
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAny((Iterator<LinkedList<Properties>>) null, (Predicate<? super LinkedList<Properties>>) predicate0);
      Object object0 = new Object();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(object0, 0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      OrderedMapIterator<Locale.Category, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte) (-99);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SW*9]SUgA=qg");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Locale.Category> class0 = Locale.Category.class;
      IteratorUtils.toArray((Iterator<? extends Locale.Category>) orderedMapIterator0, class0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("phss$l");
      BoundedIterator<String> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends String>) singletonListIterator0, 0L);
      IteratorUtils.toString((Iterator<String>) boundedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends ClientInfoStatus>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Integer integer0 = new Integer(2329);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      IteratorUtils.toString((Iterator<Integer>) singletonListIterator0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<DataTruncation> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<DataTruncation>) resettableIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray(iterator0);
      IteratorUtils.emptyOrderedMapIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(singletonListIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(equalPredicate0, predicate0);
      OrPredicate.orPredicate((Predicate<? super SQLTransactionRollbackException>) equalPredicate0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      IteratorUtils.matchesAny((Iterator<Integer>) singletonListIterator0, (Predicate<? super Integer>) orPredicate0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        iIOMetadataNode0.getElementsByTagNameNS("[2329]", "[2329]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }
}
