/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 18 09:33:01 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Iterator<Iterator<Integer>>[] iteratorArray0 = (Iterator<Iterator<Integer>>[]) Array.newInstance(Iterator.class, 6);
      ResettableListIterator<Iterator<Integer>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Iterator<Integer>>) resettableListIterator0, (Iterator<? extends Iterator<Integer>>) iteratorArray0[0], (Iterator<? extends Iterator<Integer>>) iteratorArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ListIterator<Locale.FilteringMode> listIterator0 = EmptyListIterator.emptyListIterator();
      Class<Integer> class0 = Integer.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      ListIterator<Locale.FilteringMode> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends Locale.FilteringMode>) listIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) comparator0, (Iterator<? extends Locale.FilteringMode>) listIterator0, (Iterator<? extends Locale.FilteringMode>) listIterator1);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Iterator<SQLSyntaxErrorException> iterator0 = EmptyIterator.emptyIterator();
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0, (Iterator<? extends SQLSyntaxErrorException>) iterator0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[8];
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 0);
      Iterator<SQLSyntaxErrorException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) zippingIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 3);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[", "Node must not be null", 3, sQLRecoverableException0);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      BoundedIterator<SQLTimeoutException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) listIterator0, (long) 3);
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) boundedIterator0;
      iteratorArray0[1] = (Iterator<SQLTimeoutException>) listIterator0;
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      LoopingIterator<SQLTimeoutException> loopingIterator0 = new LoopingIterator<SQLTimeoutException>(vector0);
      iteratorArray0[2] = (Iterator<SQLTimeoutException>) loopingIterator0;
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>[]) iteratorArray0);
      Closure<SQLException>[] closureArray0 = (Closure<SQLException>[]) Array.newInstance(Closure.class, 0);
      Closure<SQLException> closure0 = ChainedClosure.chainedClosure((Closure<? super SQLException>[]) closureArray0);
      IteratorUtils.apply((Iterator<SQLTransientException>) zippingIterator0, (Closure<? super SQLTransientException>) closure0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      OrderedMapIterator<String, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<String, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<String, SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      OrderedMapIterator<String, ArrayList<SQLNonTransientException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ListIteratorWrapper<String> listIteratorWrapper0 = new ListIteratorWrapper<String>(orderedMapIterator0);
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) listIteratorWrapper0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(31, true, true, 31, 31);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) resettableIterator0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "PJ{fZvpc", (Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(3216, true, false, 3216, 3216, sQLTransactionRollbackException0);
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>(dataTruncation0, false);
      SQLWarning[] sQLWarningArray0 = IteratorUtils.toArray((Iterator<? extends SQLWarning>) singletonIterator0, class0);
      assertEquals(1, sQLWarningArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      SkippingIterator<IIOMetadataNode> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<IIOMetadataNode>) resettableListIterator0, 0L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[9];
      int[] intArray0 = new int[4];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "gWq}gNs\r(EC)");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLNonTransientConnectionException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      batchUpdateExceptionArray0[4] = batchUpdateExceptionArray0[0];
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 1);
      Predicate<BatchUpdateException> predicate0 = EqualPredicate.equalPredicate(batchUpdateExceptionArray0[4]);
      BatchUpdateException batchUpdateException1 = IteratorUtils.find((Iterator<BatchUpdateException>) resettableListIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      assertNotNull(batchUpdateException1);
      assertTrue(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      integerArray0[1] = integer0;
      int int1 = 1;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0, int1, int0);
      boolean boolean0 = IteratorUtils.contains((Iterator<Integer>) resettableListIterator0, (Object) int0);
      assertTrue(resettableListIterator0.hasPrevious());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 1);
      TreeSet<SQLInvalidAuthorizationSpecException> treeSet0 = new TreeSet<SQLInvalidAuthorizationSpecException>();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = treeSet0.iterator();
      iteratorArray0[0] = iterator0;
      Iterator<SQLInvalidAuthorizationSpecException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 2);
      MapIterator<SQLTransactionRollbackException, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) mapIterator0;
      iteratorArray0[1] = (Iterator<SQLTransactionRollbackException>) mapIterator0;
      Iterator<SQLTransientException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0, (Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[9];
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[6];
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Iterator<Integer>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>((Properties) null, true);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Properties>) singletonIterator0, (Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLDataException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLTransactionRollbackException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 3);
      ResettableIterator<Closure<Object>> resettableIterator0 = IteratorUtils.arrayIterator(closureArray0, 0);
      Factory<String> factory0 = ConstantFactory.constantFactory("P>gyK*~u\"_]kTQ");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>((Predicate<? super Object>) null, transformer0, transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Closure<Object>>) resettableIterator0, (Transformer<? super Closure<Object>, String>) ifTransformer0, "", "4il_vaXTM", "4il_vaXTM");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<IIOMetadataNode, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[8];
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) objectArrayListIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      vector0.add(iIOMetadataNode0);
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(vector0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("YsOVj4");
      // Undeclared exception!
      IteratorUtils.toString((Iterator<IIOMetadataNode>) loopingListIterator0, (Transformer<? super IIOMetadataNode, String>) constantTransformer0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(vector0);
      int[] intArray0 = new int[5];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("The closure array must not contain a null closure, index ", "The closure array must not contain a null closure, index ", (-233), (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("The closure array must not contain a null closure, index ", sQLInvalidAuthorizationSpecException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("The closure array must not contain a null closure, index ", "The closure array must not contain a null closure, index ", (-233), intArray0, sQLSyntaxErrorException0);
      vector0.add(batchUpdateException0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("The closure array must not contain a null closure, index ");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) loopingListIterator0, (Transformer<? super BatchUpdateException, String>) transformer0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MapIterator<IIOMetadataNode, ClientInfoStatus> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) mapIterator0, (Transformer<? super IIOMetadataNode, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1);
      classArray0[0] = class0;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0, classArray0, classArray0);
      Transformer<IIOMetadataNode, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[8];
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      Iterator<SQLNonTransientConnectionException> iterator0 = stack0.iterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("#-S#_k80s*'lKY2'KV", "#-S#_k80s*'lKY2'KV", 2223);
      stack0.add(sQLNonTransientConnectionException0);
      ListIteratorWrapper<SQLNonTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLNonTransientConnectionException>(iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) listIteratorWrapper0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[2];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("?Pd=s2@yByv;/')", "");
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      Transformer<SQLNonTransientException, SQLInvalidAuthorizationSpecException> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<SQLNonTransientException>[] predicateArray0 = (Predicate<SQLNonTransientException>[]) Array.newInstance(Predicate.class, 7);
      DefaultEquator<SQLNonTransientException> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<SQLNonTransientException> predicate0 = EqualPredicate.equalPredicate((SQLNonTransientException) sQLInvalidAuthorizationSpecException0, (Equator<SQLNonTransientException>) defaultEquator0);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      NullIsExceptionPredicate<SQLNonTransientException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLNonTransientException>(predicate0);
      predicateArray0[2] = (Predicate<SQLNonTransientException>) nullIsExceptionPredicate0;
      OnePredicate<SQLNonTransientException> onePredicate0 = new OnePredicate<SQLNonTransientException>(predicateArray0);
      TransformedPredicate<SQLInvalidAuthorizationSpecException> transformedPredicate0 = new TransformedPredicate<SQLInvalidAuthorizationSpecException>(transformer0, onePredicate0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) transformedPredicate0);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input Object must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      DataTruncation dataTruncation0 = new DataTruncation(1035, false, false, 63, (-619));
      priorityQueue0.add(dataTruncation0);
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLWarning>) priorityQueue0);
      Class<SQLWarning> class0 = SQLWarning.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLWarning>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLWarning>) linkedList0);
      Class<SQLWarning> class0 = SQLWarning.class;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, 37);
      DataTruncation dataTruncation0 = new DataTruncation(33, true, true, 33, 33, sQLRecoverableException0);
      linkedList0.add(dataTruncation0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLWarning>) resettableIterator0, class0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("t10z_\"CH*HEpBh B5b", "t10z_\"CH*HEpBh B5b", 449);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("t10z_\"CH*HEpBh B5b", "t10z_\"CH*HEpBh B5b", 449, sQLInvalidAuthorizationSpecException0);
      Transformer<SQLException, SQLNonTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("t10z_\"CH*HEpBh B5b");
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 't10z_\"CH*HEpBh B5b' on 'class java.sql.SQLNonTransientConnectionException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLWarning>) linkedList0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, 37);
      DataTruncation dataTruncation0 = new DataTruncation(33, true, true, 33, 33, sQLRecoverableException0);
      linkedList0.add(dataTruncation0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) resettableIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      List<SQLNonTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) objectArrayListIterator0, 2510);
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      // Undeclared exception!
      IteratorUtils.size(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      Transformer<Object, ClientInfoStatus>[] transformerArray0 = (Transformer<Object, ClientInfoStatus>[]) Array.newInstance(Transformer.class, 4);
      ChainedTransformer<ClientInfoStatus> chainedTransformer0 = new ChainedTransformer<ClientInfoStatus>(transformerArray0);
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.objectGraphIterator(clientInfoStatus0, (Transformer<? super ClientInfoStatus, ? extends ClientInfoStatus>) chainedTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(iterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ChainedTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("NodeList must not be null", "NodeList must not be null", sQLTransientException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<SQLException> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) listIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<PriorityQueue<Iterator<Hashtable>>>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 8);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) null, 14L, 14L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Node must not be null", "Node must not be null", 36, sQLRecoverableException0);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) listIterator0, (-2873L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((String[]) null, 128, (-1079));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stringArray0, 0, (-2822));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Class<Integer>[]) null, 270);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stringArray0, (-891));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Properties[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(93, true, true, 93, (-1));
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation0, 0, 93);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLRecoverableException0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int[] intArray0 = new int[7];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("O}9m'bme", "O}9m'bme", 0, intArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Integer[]) null, 30, 30);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[8];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, (-3705), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[5];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, 1264);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1, (-1726));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.set.AbstractSetDecorator", (String) null, 2);
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTimeoutException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      Class<SQLTransientConnectionException>[] classArray0 = (Class<SQLTransientConnectionException>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>("Mm", classArray0, classArray0);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(invokerTransformer0, nonePredicate0);
      predicateArray0[0] = (Predicate<Object>) transformedPredicate0;
      Transformer<Object, SQLInvalidAuthorizationSpecException>[] transformerArray0 = (Transformer<Object, SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Transformer.class, 0);
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = ConstantTransformer.nullTransformer();
      SwitchTransformer<Object, SQLInvalidAuthorizationSpecException> switchTransformer0 = new SwitchTransformer<Object, SQLInvalidAuthorizationSpecException>(predicateArray0, transformerArray0, transformer0);
      Closure<SQLException> closure0 = TransformerClosure.transformerClosure((Transformer<? super SQLException, ?>) switchTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLTransientException>) singletonIterator0, (Closure<? super SQLTransientException>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Mm' on 'class java.sql.SQLTimeoutException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      Integer integer0 = new Integer(270);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      String string0 = IteratorUtils.toString((Iterator<Integer>) listIterator0, (Transformer<? super Integer, String>) transformer0, "InstantiateTransformer: The constructor must exist and be public ", "InstantiateTransformer: The constructor must exist and be public ", "InstantiateTransformer: The constructor must exist and be public ");
      assertEquals("InstantiateTransformer: The constructor must exist and be public InstantiateTransformer: The constructor must exist and be public ", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Integer integer0 = new Integer(61);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Integer>) listIterator0, (Transformer<? super Integer, String>) transformer0, "List must not be null", "List must not be null", "+q9v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Transformer<SQLException, String> transformer0 = ConstantTransformer.constantTransformer("K0KNrG");
      String string0 = IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) transformer0, "^LE#L\"A", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.iterators.AbstractEmptyMapIterator", "Enumeration must not be null", (Throwable) null);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      UniquePredicate<SQLNonTransientException> uniquePredicate0 = new UniquePredicate<SQLNonTransientException>();
      uniquePredicate0.evaluate(sQLSyntaxErrorException0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) listIterator0, (Predicate<? super SQLSyntaxErrorException>) uniquePredicate0);
      assertFalse(listIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      List<Locale.FilteringMode> list0 = IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) resettableListIterator0, 9);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      String string0 = IteratorUtils.toString((Iterator<Integer>) null, (Transformer<? super Integer, String>) transformer0, "InstantiateTransformer: The constructor must exist and be public ", "[]", "[]");
      assertEquals("[][]", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[0] = (Iterator<String>) resettableListIterator0;
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>[]) iteratorArray0);
      ConstantTransformer<String, String> constantTransformer0 = new ConstantTransformer<String, String>("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<String>) zippingIterator0, (Transformer<? super String, String>) constantTransformer0, "", "9xFtZ", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) resettableIterator0, (Transformer<? super DataTruncation, String>) transformer0, (String) null, "", "i:9OwI");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientException>) stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientException>) resettableListIterator0, (Transformer<? super SQLNonTransientException, String>) null, "", "List must not be null", "D#[7*+L");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "");
      ListIterator<SQLException> listIterator0 = IteratorUtils.singletonListIterator((SQLException) sQLTransientConnectionException0);
      int int0 = IteratorUtils.size(listIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[8];
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ListIterator<Locale.FilteringMode> listIterator0 = EmptyListIterator.emptyListIterator();
      BoundedIterator<Locale.FilteringMode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) listIterator0, 0L, 0L);
      boolean boolean0 = IteratorUtils.isEmpty(boundedIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLWarning sQLWarning0 = new SQLWarning("Cq", "Cq", (-3124));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, sQLWarning0);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(sQLTransientConnectionException0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Object>) singletonIterator0, (Predicate<? super Object>) uniquePredicate0);
      assertFalse(singletonIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MapIterator<Object, InstanceofPredicate> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Object>) mapIterator0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Object>) null, (Predicate<? super Object>) instanceofPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      UniquePredicate<SQLNonTransientException> uniquePredicate0 = new UniquePredicate<SQLNonTransientException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("NodeList must not be null", "NodeList must not be null", (Throwable) null);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) listIterator0, (Predicate<? super SQLSyntaxErrorException>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      Predicate<SQLSyntaxErrorException> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super SQLSyntaxErrorException>>) arrayList0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) resettableIterator0, (Predicate<? super SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Integer integer0 = new Integer((-2822));
      Integer integer1 = new Integer((-491));
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer1);
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) singletonListIterator0, (Iterator<? extends Integer>) singletonListIterator0, (Iterator<? extends Integer>) singletonListIterator0);
      IdentityPredicate<Integer> identityPredicate0 = new IdentityPredicate<Integer>(integer0);
      IteratorUtils.find((Iterator<Integer>) zippingIterator0, (Predicate<? super Integer>) identityPredicate0);
      assertFalse(singletonListIterator0.hasNext());
      assertTrue(singletonListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      UniquePredicate<SQLWarning> uniquePredicate0 = new UniquePredicate<SQLWarning>();
      SQLWarning sQLWarning0 = IteratorUtils.find((Iterator<SQLWarning>) null, (Predicate<? super SQLWarning>) uniquePredicate0);
      assertNull(sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Integer>) null, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.set.AbstractSetDecorator", (String) null, 2);
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTimeoutException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      Transformer<Object, SQLInvalidAuthorizationSpecException>[] transformerArray0 = (Transformer<Object, SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Transformer.class, 0);
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = ConstantTransformer.nullTransformer();
      SwitchTransformer<Object, SQLInvalidAuthorizationSpecException> switchTransformer0 = new SwitchTransformer<Object, SQLInvalidAuthorizationSpecException>(predicateArray0, transformerArray0, transformer0);
      Closure<SQLException> closure0 = TransformerClosure.transformerClosure((Transformer<? super SQLException, ?>) switchTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLTransientException>) singletonIterator0, (Closure<? super SQLTransientException>) closure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      TreeSet<Closure<Object>> treeSet0 = new TreeSet<Closure<Object>>((Comparator<? super Closure<Object>>) null);
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) treeSet0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, closure0, closure0);
      IteratorUtils.apply((Iterator<SQLTransientException>) null, (Closure<? super SQLTransientException>) ifClosure0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("%x3-:hY&lHC6Fok'A:$");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<EnumSet<Locale.FilteringMode>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.apache.commons.collections4.functors.StringValueTransformer", "", (-1));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLNonTransientException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLTransientConnectionException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Iterator<String> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends String>) iterator0, (-2822));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLException>) null, (-2822));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      OrderedMapIterator<DataTruncation, SQLTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLWarning>) orderedMapIterator0, (Class<SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLWarning>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OrderedMapIterator<SQLWarning, Class<SQLException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<SQLWarning> class0 = SQLWarning.class;
      SQLWarning[] sQLWarningArray0 = IteratorUtils.toArray((Iterator<? extends SQLWarning>) orderedMapIterator0, class0);
      assertEquals(0, sQLWarningArray0.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("t10z_\"CH*HEpBh B5b", "t10z_\"CH*HEpBh B5b", 449);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(31, true, true, 31, 31);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) resettableIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterable<SQLIntegrityConstraintViolationException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MapIterator<Properties, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterable<Properties> iterable0 = IteratorUtils.asIterable((Iterator<? extends Properties>) mapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, HashSet<SQLTransientException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, HashSet<SQLTransientException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, HashSet<SQLTransientException>>(orderedMapIterator0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) null, (Collection<? super SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<SQLRecoverableException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) resettableListIterator0);
      Stack<Object> stack0 = new Stack<Object>();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) enumeration0, (Collection<? super SQLRecoverableException>) stack0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Hashtable<SQLDataException, Vector<Object>> hashtable0 = new Hashtable<SQLDataException, Vector<Object>>();
      Enumeration<SQLDataException> enumeration0 = hashtable0.keys();
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Iterator[]");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<ServiceLoader<Properties>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ListIterator<SQLRecoverableException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLRecoverableException>) listIterator0, (Predicate<? super SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      Predicate<SQLException> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) arrayList0);
      OrPredicate<SQLException> orPredicate0 = new OrPredicate<SQLException>(predicate0, predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLRecoverableException>) null, (Predicate<? super SQLRecoverableException>) orPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<SQLRecoverableException, ArrayDeque<IIOMetadataNode>> hashMap0 = new HashMap<SQLRecoverableException, ArrayDeque<IIOMetadataNode>>();
      EntrySetMapIterator<SQLRecoverableException, ArrayDeque<IIOMetadataNode>> entrySetMapIterator0 = new EntrySetMapIterator<SQLRecoverableException, ArrayDeque<IIOMetadataNode>>(hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLRecoverableException>) entrySetMapIterator0, (Predicate<? super SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(batchUpdateException0);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) identityPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLWarning sQLWarning0 = new SQLWarning("Cq", "Cq", (-3124));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, sQLWarning0);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(sQLTransientConnectionException0);
      Iterator<Object> iterator0 = IteratorUtils.filteredIterator((Iterator<?>) singletonIterator0, (Predicate<? super Object>) uniquePredicate0);
      boolean boolean0 = IteratorUtils.matchesAll(iterator0, (Predicate<? super Object>) uniquePredicate0);
      assertFalse(singletonIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(treeSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) loopingIterator0, (Transformer<? super BatchUpdateException, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) null, (Transformer<? super BatchUpdateException, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 4);
      InvokerTransformer<SQLException, SQLNonTransientConnectionException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLNonTransientConnectionException>("+H~- [L\"Z#s.:?#", classArray0, classArray0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLException>) mapIterator0, (Transformer<? super SQLException, ? extends SQLNonTransientConnectionException>) invokerTransformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.FunctorException", (Map<String, ClientInfoStatus>) null, (Throwable) null);
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, SQLClientInfoException> invokerTransformer0 = new InvokerTransformer<Object, SQLClientInfoException>("equator may not be null", classArray0, classArray0);
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      TransformedPredicate<SQLClientInfoException> transformedPredicate0 = new TransformedPredicate<SQLClientInfoException>(invokerTransformer0, instanceofPredicate0);
      Transformer<SQLClientInfoException, SQLClientInfoException> transformer0 = IfTransformer.ifTransformer((Predicate<? super SQLClientInfoException>) transformedPredicate0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) invokerTransformer0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'equator may not be null' on 'class java.sql.SQLClientInfoException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Integer>) loopingIterator0, (-9L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(vector0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("YsOVj4");
      String string0 = IteratorUtils.toString((Iterator<IIOMetadataNode>) loopingListIterator0, (Transformer<? super IIOMetadataNode, String>) constantTransformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) integer0, 0, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Integer[]) null, 1335);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MapIterator<String, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) mapIterator0);
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Object>) arrayList0);
      ListIterator<Object> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Object>) resettableListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Object, SQLClientInfoException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<EnumSet<Locale.FilteringMode>> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<EnumSet<Locale.FilteringMode>>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLSyntaxErrorException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stringArray0, 1078, (-1936));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[9];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(dataTruncationArray0, 1, (-1715));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      ObjectArrayIterator<Object> objectArrayIterator0 = new ObjectArrayIterator<Object>(objectArray0, 1);
      String string0 = IteratorUtils.toString((Iterator<Object>) objectArrayIterator0);
      assertFalse(objectArrayIterator0.hasNext());
      assertEquals("[null, null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("rgK4{j:}Ixr+U[%l", "rgK4{j:}Ixr+U[%l", 0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("rgK4{j:}Ixr+U[%l", sQLSyntaxErrorException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLRecoverableException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ListIterator<SQLRecoverableException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLRecoverableException>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1198), (-1198));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Integer integer0 = new Integer(1557);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      Iterator<Integer> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Integer>) singletonListIterator0);
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) iterator0, (Iterator<? extends Integer>) iterator0, (Iterator<? extends Integer>) singletonListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      OrderedMapIterator<ClientInfoStatus, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 6);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("ListIterator must not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ClientInfoStatus>) orderedMapIterator0, (Transformer<? super ClientInfoStatus, String>) transformer0, "ListIterator must not be null", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("B7(YWAn%W=9O#", "uR? R\" ~l}a");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLSyntaxErrorException0, (-2629));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[0];
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLTransientException>) resettableListIterator0, (Closure<? super SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Object>) arrayList0);
      ListIterator<Object> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Object>) resettableListIterator0);
      assertFalse(listIterator0.hasNext());
  }
}
