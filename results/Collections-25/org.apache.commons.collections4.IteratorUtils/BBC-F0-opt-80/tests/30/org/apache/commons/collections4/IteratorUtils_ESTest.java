/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 10:53:28 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.io.PrintStream;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate.uniquePredicate();
      IteratorUtils.getIterator(uniquePredicate0);
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(arrayList0);
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("|]!(Kc3d$", "|]!(Kc3d$");
      SQLDataException sQLDataException0 = new SQLDataException(">1;j-L7?BcU':Q#", "|]!(Kc3d$", sQLInvalidAuthorizationSpecException0);
      arrayList0.add(sQLDataException0);
      Transformer<SQLNonTransientException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) loopingListIterator0, (Transformer<? super SQLDataException, String>) transformer0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      SQLDataException sQLDataException1 = IteratorUtils.get((Iterator<SQLDataException>) singletonIterator0, 0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[3];
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLDataException1;
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLDataException0;
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLDataException1;
      int int0 = (-2577);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, 0, (-2577));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      int int0 = 0;
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[7];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("7Es3#O0d9O8<0fW&{k", "7Es3#O0d9O8<0fW&{k", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("7Es3#O0d9O8<0fW&{k", "7Es3#O0d9O8<0fW&{k", sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("7Es3#O0d9O8<0fW&{k");
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", (int[]) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException(batchUpdateException0);
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 0, (-1964));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      LoopingListIterator<SQLNonTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientConnectionException>(vector0);
      String string0 = "l2X0-Z<\"u9,A' ";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionException0.fillInStackTrace();
      loopingListIterator0.add(sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("l2X0-Z<\"u9,A' ", "JU\"Eekz)';77", (-478));
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLClientInfoException[]) null, 794);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>((SQLDataException) null);
      IteratorUtils.get((Iterator<SQLDataException>) singletonIterator0, 0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SingletonIterator<BatchUpdateException> singletonIterator1 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<BatchUpdateException>) singletonIterator1, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("$=IZ", "$=IZ", 1187);
      int[] intArray0 = new int[9];
      intArray0[0] = 1187;
      intArray0[1] = 1187;
      intArray0[2] = 1187;
      intArray0[3] = (-2336);
      intArray0[4] = (-2336);
      intArray0[5] = (-2336);
      intArray0[6] = (-2336);
      intArray0[7] = 1187;
      intArray0[8] = (-2336);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("$=IZ", "$=IZ", (-2336), intArray0, sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("$=IZ", "$=IZ", 1187, batchUpdateException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("$=IZ", sQLFeatureNotSupportedException0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      List<SQLInvalidAuthorizationSpecException> list0 = IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      LoopingIterator<SQLInvalidAuthorizationSpecException> loopingIterator0 = new LoopingIterator<SQLInvalidAuthorizationSpecException>(list0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Comparator<SQLInvalidAuthorizationSpecException> comparator0 = (Comparator<SQLInvalidAuthorizationSpecException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 5);
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) listIterator0;
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0, true);
      iteratorArray0[1] = (Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0;
      iteratorArray0[2] = (Iterator<SQLInvalidAuthorizationSpecException>) loopingIterator0;
      iteratorArray0[3] = (Iterator<SQLInvalidAuthorizationSpecException>) loopingIterator0;
      iteratorArray0[4] = (Iterator<SQLInvalidAuthorizationSpecException>) listIterator0;
      IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
      IteratorUtils.matchesAll((Iterator<SQLInvalidAuthorizationSpecException>) loopingIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) uniquePredicate0);
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> abstractMapIteratorDecorator0 = null;
      try {
        abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLNonTransientConnectionException>((MapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      ServiceLoader<Integer>[] serviceLoaderArray0 = (ServiceLoader<Integer>[]) Array.newInstance(ServiceLoader.class, 9);
      Class<Integer> class0 = Integer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0, classLoader1);
      serviceLoaderArray0[0] = serviceLoader0;
      Class<Integer> class1 = Integer.class;
      ServiceLoader<Integer> serviceLoader1 = ServiceLoader.load(class1, classLoader0);
      serviceLoaderArray0[1] = serviceLoader1;
      Class<Integer> class2 = Integer.class;
      ServiceLoader<Integer> serviceLoader2 = ServiceLoader.load(class2);
      serviceLoaderArray0[2] = serviceLoader2;
      Class<Integer> class3 = Integer.class;
      ServiceLoader<Integer> serviceLoader3 = ServiceLoader.load(class3, classLoader1);
      serviceLoaderArray0[3] = serviceLoader3;
      ServiceLoader<Integer> serviceLoader4 = ServiceLoader.load(class0);
      serviceLoaderArray0[4] = serviceLoader4;
      ServiceLoader<Integer> serviceLoader5 = ServiceLoader.loadInstalled(class2);
      serviceLoaderArray0[5] = serviceLoader5;
      Class<Integer> class4 = Integer.class;
      ServiceLoader<Integer> serviceLoader6 = ServiceLoader.load(class4);
      serviceLoaderArray0[6] = serviceLoader6;
      Class<Integer> class5 = Integer.class;
      ServiceLoader<Integer> serviceLoader7 = ServiceLoader.loadInstalled(class5);
      serviceLoaderArray0[7] = serviceLoader7;
      Class<Integer> class6 = Integer.class;
      ServiceLoader<Integer> serviceLoader8 = ServiceLoader.load(class6);
      serviceLoaderArray0[8] = serviceLoader8;
      ResettableListIterator<ServiceLoader<Integer>> resettableListIterator0 = IteratorUtils.arrayListIterator(serviceLoaderArray0, 2);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Class<Locale.FilteringMode> class7 = Locale.FilteringMode.class;
      ServiceLoader.loadInstalled(class7);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      IteratorUtils.matchesAll((Iterator<ServiceLoader<Integer>>) resettableListIterator0, (Predicate<? super ServiceLoader<Integer>>) notPredicate0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringValueTransformer.stringValueTransformer();
      EmptyIterator.resettableEmptyIterator();
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 2);
      String string0 = "";
      String string1 = "org.apache.commons.collections4.IteratorUtils";
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringValueTransformer.stringValueTransformer();
      EmptyIterator.resettableEmptyIterator();
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      Vector<SQLInvalidAuthorizationSpecException> vector1 = new Vector<SQLInvalidAuthorizationSpecException>(vector0);
      IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) vector1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      predicateArray0[0] = predicate1;
      AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      SQLDataException sQLDataException0 = new SQLDataException("'5\"_%g%YL4B5pioi_", "f", 1298);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      IteratorUtils.get((Iterator<SQLDataException>) singletonIterator0, 0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      EmptyIterator.resettableEmptyIterator();
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      predicateArray0[0] = predicate1;
      AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 2);
      String string0 = "";
      String string1 = "org.apache.commons.collections4.IteratorUtils";
      SQLException sQLException0 = new SQLException(">{r.k8CG irhI", "org.apache.commons.collections4.IteratorUtils", (Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(">{r.k8CG irhI", "org.apache.commons.collections4.IteratorUtils", (-1057), sQLException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLTransactionRollbackException0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) listIterator0;
      List<SQLInvalidAuthorizationSpecException> list0 = IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      LoopingIterator<SQLInvalidAuthorizationSpecException> loopingIterator0 = new LoopingIterator<SQLInvalidAuthorizationSpecException>(list0);
      iteratorArray0[1] = (Iterator<SQLInvalidAuthorizationSpecException>) loopingIterator0;
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate1);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      // Undeclared exception!
      IteratorUtils.apply((Iterator<ArrayList<Closure>>) iterator0, (Closure<? super ArrayList<Closure>>) transformerClosure0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) linkedList0);
      String string0 = "";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (Throwable) null);
      linkedList0.add(sQLInvalidAuthorizationSpecException0);
      ConstantTransformer<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException> constantTransformer0 = new ConstantTransformer<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      Predicate<SQLInvalidAuthorizationSpecException> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) constantTransformer0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      int[] intArray0 = new int[2];
      intArray0[0] = (-497);
      intArray0[1] = (-497);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      uniquePredicate0.evaluate("");
      IteratorUtils.emptyListIterator();
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>((SQLTimeoutException) null);
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 4);
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>();
      ReverseListIterator<SQLTimeoutException> reverseListIterator0 = new ReverseListIterator<SQLTimeoutException>(linkedList0);
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) reverseListIterator0;
      iteratorArray0[1] = (Iterator<SQLTimeoutException>) singletonListIterator0;
      ReverseListIterator<SQLTimeoutException> reverseListIterator1 = new ReverseListIterator<SQLTimeoutException>(linkedList0);
      iteratorArray0[2] = (Iterator<SQLTimeoutException>) reverseListIterator1;
      iteratorArray0[3] = (Iterator<SQLTimeoutException>) singletonListIterator0;
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) zippingIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      ExceptionPredicate.exceptionPredicate();
      String string0 = "";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 3036);
      int[] intArray0 = new int[2];
      intArray0[0] = 3036;
      intArray0[1] = 3036;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "[", intArray0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("[", batchUpdateException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "Attempt to make an ArrayIterator that ", sQLTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException("", (String) null, sQLIntegrityConstraintViolationException0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) singletonIterator0, (long) 3036, (-12L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.getIterator(uniquePredicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 3);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("7%~p&*].\"5h=9", "The predicate collection must not be null", 1889);
      SQLException sQLException0 = new SQLException(", ", "The predicate collection must not be null", 1889, sQLTransactionRollbackException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", sQLException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", sQLFeatureNotSupportedException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) resettableListIterator0;
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) listIterator0;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[2] = (Iterator<SQLSyntaxErrorException>) resettableIterator0;
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator0, (Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      IteratorUtils.toString(iterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "", "n.", ", ");
      IteratorUtils.getIterator((Object) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) resettableIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, ">{r.k8CG irhI", ">{r.k8CG irhI", ">{r.k8CG irhI");
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      BoundedIterator<SQLNonTransientException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0, 0L, 0L);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) ">{r.k8CG irhI", (Equator<Object>) defaultEquator0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) orPredicate0);
      IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) boundedIterator0, (Predicate<? super SQLNonTransientException>) predicate1);
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Iterator<SQLTransientConnectionException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      EmptyIterator.resettableEmptyIterator();
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "v~/dQr(o5RY8:Vz", true);
      vector0.add(stringTokenizer0);
      LoopingListIterator<StringTokenizer> loopingListIterator0 = new LoopingListIterator<StringTokenizer>(vector0);
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) resettableListIterator0);
      HashSet<DataTruncation> hashSet0 = new HashSet<DataTruncation>();
      IteratorUtils.loopingIterator((Collection<? extends SQLException>) hashSet0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<ArrayList<HashMap>>) loopingListIterator0, (Transformer<? super ArrayList<HashMap>, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends SQLTransientException>) orderedMapIterator0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.apply((Iterator<ArrayList<Closure>>) orderedMapIterator0, (Closure<? super ArrayList<Closure>>) closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) resettableIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, ">{r.k8CG irhI", ">{r.k8CG irhI", ">{r.k8CG irhI");
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<ArrayList<Closure>>) resettableIterator0, (Closure<? super ArrayList<Closure>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>((SQLTimeoutException) null);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) singletonListIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<PriorityQueue<EnumSet>>) iterator0, (Closure<? super PriorityQueue<EnumSet>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      Stack<StringTokenizer> stack0 = new Stack<StringTokenizer>();
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(stack0);
      ListIteratorWrapper<StringTokenizer> listIteratorWrapper0 = new ListIteratorWrapper<StringTokenizer>(reverseListIterator0);
      List<StringTokenizer> list0 = IteratorUtils.toList((Iterator<? extends StringTokenizer>) listIteratorWrapper0, 53);
      LoopingListIterator<StringTokenizer> loopingListIterator0 = new LoopingListIterator<StringTokenizer>(list0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 4);
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) resettableListIterator0;
      SkippingIterator<SQLTimeoutException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLTimeoutException>) resettableListIterator0, (long) 53);
      iteratorArray0[1] = (Iterator<SQLTimeoutException>) skippingIterator0;
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[6];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", "");
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("", "", (-613));
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("org.apache.commons.collections4.iterators.IteratorIterable", "", sQLTimeoutException1);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("The prototype must be cloneable via a public clone method", "", sQLTimeoutException2);
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      ResettableListIterator<SQLTimeoutException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 0, 0);
      iteratorArray0[2] = (Iterator<SQLTimeoutException>) resettableListIterator1;
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.emptyIterator();
      iteratorArray0[3] = (Iterator<SQLTimeoutException>) resettableIterator0;
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) iterator0, (Predicate<? super SQLTimeoutException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringValueTransformer.stringValueTransformer();
      EmptyIterator.resettableEmptyIterator();
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      linkedHashSet0.add(predicate0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.find((Iterator<BatchUpdateException>) resettableIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      SQLDataException sQLDataException0 = new SQLDataException("VBtG(S>SM%VFkO<x", "hajEdc9)1$3L8O8", (Throwable) null);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLDataException>) singletonIterator0, 4058);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 4057
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringValueTransformer.stringValueTransformer();
      OrderedMapIterator<SQLTransientConnectionException, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends SQLTransientException>) orderedMapIterator0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.apply((Iterator<ArrayList<Closure>>) null, (Closure<? super ArrayList<Closure>>) closure0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MapIterator<Object, PriorityQueue<SQLDataException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      StringValueTransformer.stringValueTransformer();
      EmptyIterator.resettableEmptyIterator();
      OrderedMapIterator<SQLTransientConnectionException, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends SQLTransientException>) orderedMapIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) mapIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      NotPredicate<SQLException> notPredicate0 = new NotPredicate<SQLException>(predicate0);
      NullIsFalsePredicate<SQLException> nullIsFalsePredicate0 = new NullIsFalsePredicate<SQLException>(notPredicate0);
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<ClientInfoStatus> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends ClientInfoStatus>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends ClientInfoStatus>) enumeration0, (Collection<? super ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringValueTransformer.stringValueTransformer();
      EmptyIterator.resettableEmptyIterator();
      OrderedMapIterator<ArrayList<BatchUpdateException>, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<ArrayList<BatchUpdateException>, SQLFeatureNotSupportedException>) orderedMapIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("6#O(RCKoTDa^\"SN");
      Factory<StringTokenizer> factory0 = ConstantFactory.constantFactory(stringTokenizer0);
      FactoryTransformer<Object, StringTokenizer> factoryTransformer0 = new FactoryTransformer<Object, StringTokenizer>(factory0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) factoryTransformer0);
      List<StringTokenizer> list0 = IteratorUtils.toList((Iterator<? extends StringTokenizer>) iterator0, 1548);
      LoopingListIterator<StringTokenizer> loopingListIterator0 = new LoopingListIterator<StringTokenizer>(list0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) iterator0);
      HashSet<DataTruncation> hashSet0 = new HashSet<DataTruncation>();
      IteratorUtils.loopingIterator((Collection<? extends SQLException>) hashSet0);
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      // Undeclared exception!
      IteratorUtils.matchesAny((Iterator<Vector<ServiceLoader>>) loopingListIterator0, (Predicate<? super Vector<ServiceLoader>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      OrderedIterator<Boolean> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Boolean>) orderedIterator0);
      LinkedHashSet<Boolean> linkedHashSet0 = new LinkedHashSet<Boolean>();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, transformerClosure0, transformerClosure0);
      hashMap0.put(predicate0, ifClosure0);
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLNonTransientConnectionException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends SQLTransientException>) orderedMapIterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("FOj5c]@$P-47V(m]?HD", "FOj5c]@$P-47V(m]?HD", 601, (Throwable) null);
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) singletonIterator0, class0);
      OrderedMapIterator<ArrayList<BatchUpdateException>, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<ArrayList<BatchUpdateException>, SQLFeatureNotSupportedException>) orderedMapIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("VCF{|;.I#BG +vey<v");
      Factory<StringTokenizer> factory0 = ConstantFactory.constantFactory(stringTokenizer0);
      FactoryTransformer<Object, StringTokenizer> factoryTransformer0 = new FactoryTransformer<Object, StringTokenizer>(factory0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("VCF{|;.I#BG +vey<v", "VCF{|;.I#BG +vey<v");
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException();
      ConstantTransformer<SQLNonTransientException, SQLSyntaxErrorException> constantTransformer0 = new ConstantTransformer<SQLNonTransientException, SQLSyntaxErrorException>(sQLSyntaxErrorException1);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) constantTransformer0);
      BoundedIterator<SQLSyntaxErrorException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0, (long) 601);
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, sQLNonTransientConnectionExceptionArray0);
      IfTransformer<SQLException, String> ifTransformer0 = new IfTransformer<SQLException, String>(predicate0, invokerTransformer0, invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) boundedIterator0, (Transformer<? super SQLSyntaxErrorException, String>) ifTransformer0, "", "org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubListIterator", "FOj5c]@$P-47V(m]?HD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLSyntaxErrorException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) resettableIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "@#", "", "");
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransientConnectionException, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransientConnectionException, SQLTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends SQLTransientException>) orderedMapIterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<?>) orderedMapIterator0, (Iterator<?>) orderedMapIterator1);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[3];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      IteratorUtils.arrayListIterator(locale_FilteringModeArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      OrderedMapIterator<Iterator<Predicate<Object>>, ClientInfoStatus> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Iterator<Predicate<Object>>, ClientInfoStatus> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Iterator<Predicate<Object>>, ClientInfoStatus>(orderedMapIterator0);
      OrderedMapIterator<SQLTransientConnectionException, SQLTransactionRollbackException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends SQLTransientException>) orderedMapIterator1);
      OrderedIterator<SQLNonTransientException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.apply((Iterator<ArrayList<Closure>>) orderedIterator0, (Closure<? super ArrayList<Closure>>) closure0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = ConstantTransformer.nullTransformer();
      Transformer<Object, SQLNonTransientConnectionException> transformer1 = ConstantTransformer.constantTransformer((SQLNonTransientConnectionException) null);
      IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends SQLNonTransientConnectionException>) transformer0, (Transformer<? super Object, ? extends SQLNonTransientConnectionException>) transformer1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("mK7`eG");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("mK7`eG", "org.apache.commons.collections4.functors.OnePredicate", 601, sQLSyntaxErrorException0);
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>((SQLNonTransientConnectionException) null);
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) singletonIterator0, class1);
      StringTokenizer stringTokenizer0 = new StringTokenizer("|vC~ki}6kNdjDeU");
      IteratorUtils.getIterator(stringTokenizer0);
      Hashtable<SQLTransientException, String> hashtable0 = new Hashtable<SQLTransientException, String>();
      hashtable0.elements();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stringArray0, (-2465));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TruePredicate.truePredicate();
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>((SQLTimeoutException) null);
      Class<Iterator> class0 = Iterator.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = ConstantTransformer.nullTransformer();
      IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends SQLNonTransientConnectionException>) transformer0, (Transformer<? super Object, ? extends SQLNonTransientConnectionException>) transformer0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("FOj5c]@$P-47V(m]?HD", "FOj5c]@$P-47V(m]?HD", 601, (Throwable) null);
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      singletonIterator0.next();
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) singletonIterator0, class1);
      IteratorUtils.matchesAny((Iterator<HashMap<HashSet, Predicate>>) singletonListIterator0, (Predicate<? super HashMap<HashSet, Predicate>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte) (-55);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      ArrayList<DataTruncation> arrayList1 = new ArrayList<DataTruncation>();
      DataTruncation dataTruncation0 = new DataTruncation(601, false, false, 2187, 8);
      arrayList1.add(dataTruncation0);
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(arrayList1);
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) reverseListIterator0);
      EmptyIterator.resettableEmptyIterator();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>((Transformer<? super Object, ?>) null, predicate0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      IteratorUtils.getIterator((Object) null);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TruePredicate.truePredicate();
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>((SQLTimeoutException) null);
      Class<Iterator> class0 = Iterator.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = ConstantTransformer.nullTransformer();
      IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends SQLNonTransientConnectionException>) transformer0, (Transformer<? super Object, ? extends SQLNonTransientConnectionException>) transformer0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("FOj5c]@$P-47V(m]?HD", "FOj5c]@$P-47V(m]?HD", 601, (Throwable) null);
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) singletonIterator0, class1);
      IteratorUtils.getIterator("FOj5c]@$P-47V(m]?HD");
      OrderedMapIterator<ArrayList<BatchUpdateException>, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<ArrayList<BatchUpdateException>, SQLFeatureNotSupportedException>) orderedMapIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("=Cz0!n;nvieR>G");
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) null);
      List<StringTokenizer> list0 = IteratorUtils.toList((Iterator<? extends StringTokenizer>) iterator0, 601);
      LoopingListIterator<StringTokenizer> loopingListIterator0 = new LoopingListIterator<StringTokenizer>(list0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) arrayList0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) resettableIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "", "org.apache.commons.collections4.functors.FunctorUtils", "org.apache.commons.collections4.functors.FunctorUtils");
      ArrayList<IIOMetadataNode> arrayList1 = new ArrayList<IIOMetadataNode>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      EmptyOrderedIterator.emptyOrderedIterator();
      OrderedMapIterator<SQLTransientConnectionException, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends SQLTransientException>) orderedMapIterator0);
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransientConnectionException, SQLTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends SQLTransientException>) orderedMapIterator0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      OrderedMapIterator<SQLNonTransientConnectionException, IIOMetadataNode> orderedMapIterator2 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator2, class0);
      Class<SQLTransientException> class1 = SQLTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) orderedMapIterator1, class1);
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) null, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>((SQLTimeoutException) null);
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("&\"");
      sQLDataException0.getLocalizedMessage();
      sQLDataException0.printStackTrace();
      StringValueTransformer.stringValueTransformer();
      EmptyIterator.resettableEmptyIterator();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>((Transformer<? super Object, ?>) null, predicate0);
      int[] intArray0 = new int[7];
      intArray0[0] = 657;
      intArray0[1] = 52;
      intArray0[2] = 205;
      intArray0[3] = (-1);
      intArray0[4] = 16;
      intArray0[5] = 0;
      int int0 = 3753;
      intArray0[6] = 3753;
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 657, 205);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      IteratorUtils.emptyMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null);
      sQLRecoverableException0.getStackTrace();
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      stack0.add(sQLRecoverableException0);
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLRecoverableException>) stack0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "@i0", 4043);
      sQLSyntaxErrorException0.printStackTrace();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) resettableIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "1nY14%Q;~W,(", "", "1nY14%Q;~W,(");
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      FalsePredicate.falsePredicate();
      IteratorUtils.getIterator(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TruePredicate.truePredicate();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(arrayList0);
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) reverseListIterator0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      DataTruncation dataTruncation0 = new DataTruncation(1, true, false, (-1399), (-1399), sQLNonTransientException0);
      dataTruncation0.getNextWarning();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.bidimap.TreeBidiMap$Inverse", "org.apache.commons.collections4.bidimap.TreeBidiMap$Inverse", 233, (Throwable) null);
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) singletonIterator0, class0);
      IteratorUtils.getIterator(reverseListIterator0);
      Hashtable<SQLTransientException, String> hashtable0 = new Hashtable<SQLTransientException, String>();
      Enumeration<String> enumeration0 = hashtable0.elements();
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0);
      Transformer<Object, EnumSet<Locale.FilteringMode>> transformer0 = ConstantTransformer.nullTransformer();
      OrderedMapIterator<String, PriorityQueue<Iterator<TreeSet<Object>>>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<String, PriorityQueue<Iterator<TreeSet<Object>>>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, PriorityQueue<Iterator<TreeSet<Object>>>>(orderedMapIterator0);
      IteratorUtils.transformedIterator((Iterator<? extends String>) abstractOrderedMapIteratorDecorator0, (Transformer<? super String, ? extends EnumSet<Locale.FilteringMode>>) transformer0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "-VL,!cSNF}}@Cop1'q";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("-VL,!cSNF}}@Cop1'q", "-VL,!cSNF}}@Cop1'q", (-647));
      sQLNonTransientException0.printStackTrace();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) resettableIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "org.apache.commons.collections4.functors.NOPClosure", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TruePredicate.truePredicate();
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>((SQLTimeoutException) null);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[7];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("Invalid map index: ", "za8hW=!");
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLTransientException sQLTransientException0 = new SQLTransientException("za8hW=!", "", (-1664));
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException(sQLTransientException0);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("Invalid map index: ", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("", "NodeList must not be null", (-1));
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransientConnectionException, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends SQLTransientException>) orderedMapIterator0);
      OrderedMapIterator<Locale.FilteringMode, SQLClientInfoException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Locale.FilteringMode, SQLClientInfoException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Locale.FilteringMode, SQLClientInfoException>(orderedMapIterator1);
      OrderedMapIterator<Locale.FilteringMode, SQLClientInfoException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.FilteringMode, ? extends SQLClientInfoException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.peekingIterator((Iterator<? extends Locale.FilteringMode>) orderedMapIterator2);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) iIOMetadataNode0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      ConstantTransformer<Object, SQLNonTransientConnectionException> constantTransformer0 = new ConstantTransformer<Object, SQLNonTransientConnectionException>((SQLNonTransientConnectionException) null);
      IfTransformer.ifTransformer((Predicate<? super Object>) nullIsFalsePredicate0, (Transformer<? super Object, ? extends SQLNonTransientConnectionException>) constantTransformer0, (Transformer<? super Object, ? extends SQLNonTransientConnectionException>) constantTransformer0);
      Iterator<SQLNonTransientConnectionException> iterator0 = new SingletonIterator<SQLNonTransientConnectionException>((SQLNonTransientConnectionException) null);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) iterator0, class0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringTokenizer stringTokenizer0 = new StringTokenizer("+e_/qu{\"");
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)12;
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)0;
      byte byte1 = (byte)10;
      byteArray0[2] = (byte)10;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte) (-23);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringTokenizer0.hasMoreElements();
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) orderedIterator0, (Object) stringTokenizer0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      IteratorUtils.singletonIterator((SQLDataException) null);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) null, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "org.apache.commons.collections4.functors.NOPClosure", "]YDuZ", "<2");
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      FalsePredicate.falsePredicate();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      OrderedMapIterator<SQLWarning, EnumSet<Locale.FilteringMode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.size(orderedMapIterator0);
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((BatchUpdateException[]) null, 0, 1948);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TruePredicate.truePredicate();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(arrayList0);
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) reverseListIterator0);
      EmptyIterator.resettableEmptyIterator();
      LinkedHashSet<Boolean> linkedHashSet0 = new LinkedHashSet<Boolean>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>((SQLTimeoutException) null);
      MapIterator<SQLTimeoutException, Closure<SQLTransactionRollbackException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>((SQLTimeoutException) null);
      IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      IteratorUtils.isEmpty((Iterator<?>) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.size(singletonListIterator0);
      IteratorUtils.toArray((Iterator<?>) singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("s#x_/}[xny", sQLTransientException0);
      IteratorUtils.emptyMapIterator();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      SQLDataException sQLDataException0 = new SQLDataException(sQLFeatureNotSupportedException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException();
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException(sQLDataException1);
      sQLDataExceptionArray0[2] = sQLDataException0;
      SQLDataException sQLDataException3 = new SQLDataException();
      sQLDataExceptionArray0[3] = sQLDataException3;
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLDataException>) objectArrayIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLException>) iterator0);
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) arrayList0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator1 = EmptyListIterator.emptyListIterator();
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator1);
      IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAll((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator");
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("", "");
      sQLTimeoutException2.printStackTrace();
      sQLTimeoutException3.getLocalizedMessage();
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      OrderedMapIterator<SQLTransientConnectionException, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends SQLTransientException>) orderedMapIterator0);
      OrderedMapIterator<SQLTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends SQLNonTransientConnectionException>) orderedMapIterator1);
      AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, SQLNonTransientConnectionException>(orderedMapIterator2);
      MapIterator<SQLTransientConnectionException, SQLNonTransientConnectionException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTransientConnectionException, ? extends SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.asIterable((Iterator<? extends SQLTransientConnectionException>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0, (-240), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>();
      IteratorUtils.loopingListIterator((List<SQLRecoverableException>) vector0);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Comparator<SQLTransientException> comparator0 = (Comparator<SQLTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("s#x_/}[xny", sQLTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException("s#x_/}[xny", "fromIndex(", 35);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(35).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLDataException0, comparator0, comparatorPredicate_Criterion0);
      Integer integer0 = new Integer((-1146));
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      IteratorUtils.matchesAny((Iterator<Integer>) singletonListIterator0, (Predicate<? super Integer>) comparatorPredicate0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientException0.getLocalizedMessage();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("fromIndex(", "fromIndex(");
      sQLFeatureNotSupportedException1.printStackTrace();
      StringValueTransformer.stringValueTransformer();
      ReverseListIterator<DataTruncation> reverseListIterator0 = null;
      try {
        reverseListIterator0 = new ReverseListIterator<DataTruncation>((List<DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ReverseListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("&\"");
      sQLDataException0.getLocalizedMessage();
      sQLDataException0.printStackTrace();
      StringValueTransformer.stringValueTransformer();
      EmptyIterator.resettableEmptyIterator();
      Integer integer0 = new Integer(4);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.matchesAny((Iterator<Integer>) singletonListIterator0, (Predicate<? super Integer>) predicate0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientException0.getLocalizedMessage();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "&\"");
      sQLFeatureNotSupportedException0.printStackTrace();
      StringValueTransformer.stringValueTransformer();
      DataTruncation dataTruncation0 = new DataTruncation(4, false, true, 4, (-1216), sQLFeatureNotSupportedException0);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, false);
      Iterator<DataTruncation> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) singletonIterator0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) iterator0);
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(list0);
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) iterator0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("");
      IteratorUtils.getIterator(sQLWarning0);
      IteratorUtils.emptyOrderedIterator();
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[7];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[1] = clientInfoStatus1;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[2] = clientInfoStatus2;
      ClientInfoStatus clientInfoStatus3 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[3] = clientInfoStatus3;
      ClientInfoStatus clientInfoStatus4 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      clientInfoStatusArray0[4] = clientInfoStatus4;
      ClientInfoStatus clientInfoStatus5 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[5] = clientInfoStatus5;
      ClientInfoStatus clientInfoStatus6 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[6] = clientInfoStatus6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(clientInfoStatusArray0, 2208);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TruePredicate.truePredicate();
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>((SQLTimeoutException) null);
      Class<Iterator> class0 = Iterator.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = ConstantTransformer.nullTransformer();
      IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends SQLNonTransientConnectionException>) transformer0, (Transformer<? super Object, ? extends SQLNonTransientConnectionException>) transformer0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("FOj5c]@$P-47V(m]?HD", "FOj5c]@$P-47V(m]?HD", 601, (Throwable) null);
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) singletonIterator0, class1);
      IteratorUtils.getIterator("FOj5c]@$P-47V(m]?HD");
      Hashtable<SQLTransientException, String> hashtable0 = new Hashtable<SQLTransientException, String>();
      Enumeration<String> enumeration0 = hashtable0.elements();
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0);
      Transformer<Object, EnumSet<Locale.FilteringMode>> transformer1 = ConstantTransformer.nullTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends String>) iterator0, (Transformer<? super String, ? extends EnumSet<Locale.FilteringMode>>) transformer1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("");
      IteratorUtils.getIterator(sQLWarning0);
      IteratorUtils.emptyOrderedIterator();
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[7];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>();
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) arrayList0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      predicateArray0[1] = predicate0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", (String) null, sQLWarning0);
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) sQLRecoverableException0);
      predicateArray0[2] = predicate1;
      // Undeclared exception!
      try { 
        AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not contain a null predicate, index 3 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Predicate<SQLClientInfoException> predicate0 = EqualPredicate.equalPredicate(sQLClientInfoException0);
      ListIterator<SQLClientInfoException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) listIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLException>) listIterator1);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLClientInfoException0.forEach(consumer0);
      DataTruncation dataTruncation0 = new DataTruncation(330, true, false, (-1881), (-1881), sQLClientInfoException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(330, false, false, (-1881), (-1881), dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-557), false, true, 330, 3442, dataTruncation1);
      dataTruncationArray0[2] = dataTruncation2;
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0, 0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) resettableListIterator0, 1212);
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(list0);
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("s#x_/}[xny", sQLTransientException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("s#x_/}[xny", "s#x_/}[xny", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("s#x_/}[xny", "s#x_/}[xny", 12, sQLTransientException0);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("Iterator[", "s#x_/}[xny", 12, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("Y[]Mh92!1PQWuMn]4.+", "s#x_/}[xny", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException4;
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0, 0);
      Iterator<SQLException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) objectArrayIterator0);
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      IteratorUtils.find(iterator0, (Predicate<? super SQLException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) singletonIterator0, (Iterator<? extends IIOMetadataNode>) singletonIterator0);
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) singletonIterator0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode1);
      iIOMetadataNode0.setNodeValue("!k");
      IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      int int0 = 0;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      OrderedMapIterator<DataTruncation, ServiceLoader<DataTruncation>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) orderedMapIterator0, (-647));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("&\"");
      sQLDataException0.getLocalizedMessage();
      sQLDataException0.printStackTrace();
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      ArrayDeque<Predicate<Object>> arrayDeque1 = arrayDeque0.clone();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, sQLDataException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) listIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      FalsePredicate.falsePredicate();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Predicate<SQLClientInfoException> predicate0 = EqualPredicate.equalPredicate(sQLClientInfoException0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) listIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      SQLDataException sQLDataException0 = new SQLDataException("BTIP$N4cyV|=", "org.apache.commons.collections4.IteratorUtils", 10);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(locale_FilteringMode0, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      Integer integer0 = new Integer(512);
      Integer integer1 = new Integer(10);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer1);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Integer>) singletonListIterator0, (Predicate<? super Integer>) comparatorPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ComparatorPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("s#x_/}[xny", sQLTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException("s#x_/}[xny", "fromIndex(", 35);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLDataException0, comparator0, comparatorPredicate_Criterion0);
      Integer integer0 = new Integer((-1146));
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      IteratorUtils.matchesAny((Iterator<Integer>) singletonListIterator0, (Predicate<? super Integer>) comparatorPredicate0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientException0.getLocalizedMessage();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("fromIndex(", "fromIndex(");
      sQLFeatureNotSupportedException1.printStackTrace();
      StringValueTransformer.stringValueTransformer();
      ReverseListIterator<DataTruncation> reverseListIterator0 = null;
      try {
        reverseListIterator0 = new ReverseListIterator<DataTruncation>((List<DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ReverseListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      ConstantTransformer<SQLDataException, IIOMetadataNode> constantTransformer0 = new ConstantTransformer<SQLDataException, IIOMetadataNode>(iIOMetadataNode0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode1, locale_FilteringMode2);
      ConstantTransformer.constantTransformer(enumSet0);
      OrderedMapIterator<SQLDataException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) orderedMapIterator0, (Transformer<? super SQLDataException, ? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Transformer must not be null", "Transformer must not be null");
      sQLRecoverableException0.getStackTrace();
      stack0.add(sQLRecoverableException0);
      IteratorUtils.emptyMapIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Transformer must not be null", "Transformer must not be null", (-2076));
      ConstantFactory<SQLFeatureNotSupportedException> constantFactory0 = new ConstantFactory<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLFeatureNotSupportedException>) constantFactory0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) transformer0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLException>) iterator0);
      OrderedMapIterator<SQLTransientConnectionException, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransientConnectionException, SQLTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends SQLTransientException>) orderedMapIterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator1);
      FalsePredicate.falsePredicate();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>((SQLTimeoutException) null);
      MapIterator<SQLTimeoutException, Closure<SQLTransactionRollbackException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>((SQLTimeoutException) null);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) singletonListIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      IteratorUtils.isEmpty(mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.size(iterator0);
      IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      HashMap<Object, SQLTransientConnectionException> hashMap0 = new HashMap<Object, SQLTransientConnectionException>();
      EntrySetMapIterator<Object, SQLTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<Object, SQLTransientConnectionException>(hashMap0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      IteratorUtils.matchesAny((Iterator<Object>) entrySetMapIterator0, (Predicate<? super Object>) identityPredicate0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(resettableListIterator0, comparator0, comparatorPredicate_Criterion0);
      MapIterator<SQLTimeoutException, Closure<SQLTransactionRollbackException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("5*y", "5*y");
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      IteratorUtils.isEmpty(mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.size(mapIterator0);
      IteratorUtils.toArray((Iterator<?>) singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("!{!\"=Jk,J4");
      ConstantTransformer<SQLDataException, IIOMetadataNode> constantTransformer0 = new ConstantTransformer<SQLDataException, IIOMetadataNode>(iIOMetadataNode0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode1);
      ConstantTransformer.constantTransformer(enumSet0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) orderedIterator0, (Transformer<? super SQLDataException, ? extends IIOMetadataNode>) constantTransformer0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ListIterator<SQLTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      ZippingIterator<SQLTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) listIterator0, (Iterator<? extends SQLTransientConnectionException>) listIterator0);
      IteratorUtils.asEnumeration((Iterator<?>) zippingIterator0);
      OrderedMapIterator<Integer, Class<IIOMetadataNode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.contains((Iterator<Integer>) orderedMapIterator0, (Object) null);
      Boolean[] booleanArray0 = new Boolean[7];
      Predicate<SQLException> predicate0 = FalsePredicate.falsePredicate();
      PredicateTransformer<SQLNonTransientException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientException>(predicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Boolean boolean0 = predicateTransformer0.transform(sQLNonTransientConnectionException0);
      booleanArray0[0] = boolean0;
      Boolean boolean1 = predicateTransformer0.transform(sQLNonTransientConnectionException0);
      booleanArray0[1] = boolean1;
      PredicateTransformer<SQLNonTransientException> predicateTransformer1 = new PredicateTransformer<SQLNonTransientException>(predicate0);
      Boolean boolean2 = predicateTransformer1.transform(sQLNonTransientConnectionException0);
      booleanArray0[2] = boolean2;
      Boolean boolean3 = predicateTransformer0.transform(sQLNonTransientConnectionException0);
      booleanArray0[3] = boolean3;
      Boolean boolean4 = predicateTransformer1.transform(sQLNonTransientConnectionException0);
      booleanArray0[4] = boolean4;
      Boolean boolean5 = predicateTransformer1.transform(sQLNonTransientConnectionException0);
      booleanArray0[5] = boolean5;
      Boolean boolean6 = predicateTransformer0.transform(sQLNonTransientConnectionException0);
      booleanArray0[6] = boolean6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(booleanArray0, 52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      OrderedIterator<Boolean> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Boolean>) orderedIterator0);
      Hashtable<IIOMetadataNode, SQLTimeoutException> hashtable0 = new Hashtable<IIOMetadataNode, SQLTimeoutException>();
      EntrySetMapIterator<IIOMetadataNode, SQLTimeoutException> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLTimeoutException>(hashtable0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("L", "Collection must not be null");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Y[]Mh92!1PQWuMn]4.+", "Collection must not be null", sQLInvalidAuthorizationSpecException0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("i(2Mg4.", "L", 123, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException0;
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0, 0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) objectArrayIterator0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.find((Iterator<SQLException>) null, (Predicate<? super SQLException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(resettableListIterator0, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.matchesAny((Iterator<Integer>) resettableIterator0, (Predicate<? super Integer>) comparatorPredicate0);
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientException0.getLocalizedMessage();
      sQLNonTransientException0.printStackTrace();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "Predicate must not be null", ";eSnSV;W.(oZC]f+", "The transformer to call must not be null");
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      FalsePredicate.falsePredicate();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLWarning sQLWarning0 = new SQLWarning("5,)_=>0ez?'P?:Fzd", "s#x_/}[xny", 1274, sQLTransientException0);
      sQLTransientException0.setNextException(sQLWarning0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("s#x_/}[xny", sQLTransientException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("s#x_/}[xny", "s#x_/}[xny", sQLTransientException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("s#x_/}[xny", "s#x_/}[xny", sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("s#x_/}[xny", "s#x_/}[xny", 12, sQLTransientException0);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("Iterator[", "s#x_/}[xny", 0, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      OrderedMapIterator<SQLTransientConnectionException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransientConnectionException, SQLTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends SQLTransientException>) orderedMapIterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator1);
      FalsePredicate.falsePredicate();
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<DataTruncation>) null, 1686);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      OrderedIterator<SQLWarning> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<SQLWarning>[] iteratorArray0 = (Iterator<SQLWarning>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray0[0] = (Iterator<SQLWarning>) orderedIterator0;
      iteratorArray0[1] = (Iterator<SQLWarning>) orderedIterator0;
      IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) null, (Iterator<? extends SQLWarning>[]) iteratorArray0);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.size(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(resettableListIterator0, comparator0, comparatorPredicate_Criterion0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<SQLSyntaxErrorException> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      Comparator<ServiceLoader<SQLSyntaxErrorException>> comparator1 = (Comparator<ServiceLoader<SQLSyntaxErrorException>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate(serviceLoader0, comparator1);
      IteratorUtils.matchesAny((Iterator<Integer>) resettableIterator0, (Predicate<? super Integer>) comparatorPredicate0);
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      EmptyListIterator.emptyListIterator();
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) resettableListIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.singletonListIterator((SQLNonTransientException) sQLFeatureNotSupportedException0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator2, (Iterator<? extends SQLNonTransientConnectionException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      EqualPredicate.equalPredicate(sQLClientInfoException0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLException>) listIterator0);
      OrderedMapIterator<SQLTransientConnectionException, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransientConnectionException, SQLTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends SQLTransientException>) orderedMapIterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("FYkaT");
      iIOMetadataNode0.getOwnerDocument();
      FalsePredicate.falsePredicate();
      Integer[] integerArray0 = new Integer[0];
      IteratorUtils.arrayIterator(integerArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 0, 1135);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      int int0 = 0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      ArrayList<IIOMetadataNode>[] arrayListArray0 = (ArrayList<IIOMetadataNode>[]) Array.newInstance(ArrayList.class, 6);
      arrayListArray0[1] = arrayList0;
      arrayList0.remove((Object) listIterator0);
      arrayListArray0[2] = arrayList0;
      arrayListArray0[3] = arrayList0;
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TruePredicate.truePredicate();
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>((SQLTimeoutException) null);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OrderedMapIterator<Iterator<Predicate<Object>>, ClientInfoStatus> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Iterator<Predicate<Object>>, ClientInfoStatus> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Iterator<Predicate<Object>>, ClientInfoStatus>(orderedMapIterator0);
      OrderedMapIterator<DataTruncation, ServiceLoader<DataTruncation>> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) orderedMapIterator1, 330);
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(list0);
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) orderedMapIterator1);
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 8);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      Class<Properties> class1 = Properties.class;
      classArray0[1] = class1;
      Class<Properties> class2 = Properties.class;
      classArray0[2] = class2;
      Class<Properties> class3 = Properties.class;
      classArray0[3] = class3;
      Class<Properties> class4 = Properties.class;
      classArray0[4] = class4;
      Class<Properties> class5 = Properties.class;
      classArray0[5] = class5;
      Class<Properties> class6 = Properties.class;
      classArray0[6] = class6;
      Class<Properties> class7 = Properties.class;
      classArray0[7] = class7;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("underlying nodeList has no more elements", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.toString((Iterator<SQLException>) null, (Transformer<? super SQLException, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(resettableListIterator0, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.matchesAny((Iterator<Integer>) resettableIterator0, (Predicate<? super Integer>) comparatorPredicate0);
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientException0.printStackTrace();
      linkedList0.clone();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLNonTransientException0);
      Throwable[] throwableArray0 = sQLNonTransientConnectionException0.getSuppressed();
      linkedList0.add((SQLNonTransientException) sQLNonTransientConnectionException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("%5=_'~3jd", "%5=_'~3jd", (int[]) null);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("org.apache.commons.collections4.iterators.IteratorIterable$1", "org.apache.commons.collections4.iterators.IteratorIterable$1", (int[]) null, batchUpdateException0);
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("8EMv8T6K", "%5=_'~3jd", (-2652), (int[]) null);
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("org.apache.commons.collections4.iterators.IteratorIterable$1", (int[]) null, batchUpdateException0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[6];
      batchUpdateExceptionArray0[0] = batchUpdateException2;
      batchUpdateExceptionArray0[1] = batchUpdateException0;
      batchUpdateExceptionArray0[2] = batchUpdateException0;
      batchUpdateExceptionArray0[3] = batchUpdateException1;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("org.apache.commons.collections4.iterators.IteratorIterable$1", "R`816R&#7Zkn", (int[]) null, batchUpdateException1);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      batchUpdateExceptionArray0[5] = batchUpdateException2;
      ResettableListIterator<BatchUpdateException> resettableListIterator1 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) throwableArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) resettableListIterator1, (Transformer<? super BatchUpdateException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.emptyIterator();
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(comparatorPredicate_Criterion0, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.matchesAny((Iterator<Integer>) resettableIterator0, (Predicate<? super Integer>) comparatorPredicate0);
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientException0.printStackTrace();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLNonTransientException0);
      sQLNonTransientConnectionException0.getSuppressed();
      linkedList0.add(sQLNonTransientException0);
      IteratorUtils.loopingListIterator((List<SQLNonTransientException>) linkedList0);
      IteratorUtils.emptyOrderedMapIterator();
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) resettableListIterator0);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) listIterator0, (Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(resettableListIterator0, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.matchesAny((Iterator<Integer>) resettableIterator0, (Predicate<? super Integer>) comparatorPredicate0);
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientException0.printStackTrace();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLNonTransientException0);
      sQLNonTransientConnectionException0.getSuppressed();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Transformer<? super SQLSyntaxErrorException, String>) null, ")H)YufY", " cannot be null", "Jv%wyp[rd4?6oib");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TruePredicate.truePredicate();
      MapIterator<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) mapIterator0, (Transformer<? super SQLSyntaxErrorException, String>) null, "^@(7P3c||", "Uz*;", "Uz*;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(resettableListIterator0, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.matchesAny((Iterator<Integer>) resettableIterator0, (Predicate<? super Integer>) comparatorPredicate0);
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientException0.printStackTrace();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLNonTransientException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 1);
      Class<SQLException> class0 = SQLException.class;
      classArray0[0] = class0;
      InvokerTransformer.invokerTransformer(") less than zero.", (Class<?>[]) classArray0, (Object[]) classArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>((SQLTimeoutException) null);
      IteratorUtils.emptyMapIterator();
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>((SQLTimeoutException) null);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) singletonListIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      IteratorUtils.isEmpty(iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getLastChild();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      OrderedMapIterator<Iterator<Predicate<Object>>, ClientInfoStatus> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Iterator<Predicate<Object>>, ClientInfoStatus> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Iterator<Predicate<Object>>, ClientInfoStatus>(orderedMapIterator0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      OrderedMapIterator<DataTruncation, ServiceLoader<DataTruncation>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<DataTruncation> list0 = new Vector<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(list0);
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) orderedMapIterator0);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLException>) nullIsTruePredicate0);
      Predicate<SQLException> predicate1 = new UniquePredicate<SQLException>();
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      EqualPredicate.equalPredicate(sQLClientInfoException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, ";4", sQLClientInfoException0);
      IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      OrderedMapIterator<DataTruncation, ServiceLoader<DataTruncation>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) orderedMapIterator0, 1212);
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(list0);
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) reverseListIterator0);
      ArrayList<IIOMetadataNode>[] arrayListArray0 = (ArrayList<IIOMetadataNode>[]) Array.newInstance(ArrayList.class, 9);
      arrayListArray0[0] = arrayList0;
      arrayListArray0[1] = arrayList0;
      arrayListArray0[2] = arrayList0;
      arrayListArray0[3] = arrayList0;
      arrayListArray0[4] = arrayList0;
      arrayListArray0[5] = arrayList0;
      arrayListArray0[6] = arrayList0;
      arrayListArray0[7] = arrayList0;
      arrayListArray0[8] = arrayList0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(arrayListArray0, 1212);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("s#x_/}[xny", sQLTransientException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("s#x_/}[xny", "s#x_/}[xny", sQLTransientException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("s#x_/}[xny", "s#x_/}[xny", sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      int int0 = 12;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("s#x_/}[xny", "s#x_/}[xny", 12, sQLTransientException0);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("Iterator[", "s#x_/}[xny", 0, sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("Y[]Mh92!1PQWuMn]4.+", "s#x_/}[xny", sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedException5.printStackTrace();
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) null, (Predicate<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OrderedMapIterator<Iterator<Predicate<Object>>, ClientInfoStatus> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Iterator<Predicate<Object>>, ClientInfoStatus> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Iterator<Predicate<Object>>, ClientInfoStatus>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Iterator<Predicate<Object>>>) abstractMapIteratorDecorator0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      vector0.stream();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(vector0);
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) reverseListIterator0);
      ArrayList<IIOMetadataNode>[] arrayListArray0 = (ArrayList<IIOMetadataNode>[]) Array.newInstance(ArrayList.class, 0);
      IteratorUtils.arrayListIterator(arrayListArray0, 0);
      IteratorUtils.emptyListIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTransactionRollbackException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("GIMa:", "GIMa:", 0, sQLInvalidAuthorizationSpecException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLIntegrityConstraintViolationException0);
      IteratorUtils.singletonListIterator(sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      OrderedIterator<Boolean> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Hashtable<IIOMetadataNode, SQLTimeoutException> hashtable0 = new Hashtable<IIOMetadataNode, SQLTimeoutException>();
      IteratorUtils.isEmpty(orderedIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getLastChild();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      IteratorUtils.singletonListIterator(clientInfoStatus0);
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends ArrayList<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<Boolean> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<Boolean> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Boolean>) orderedIterator0);
      LinkedHashSet<Boolean> linkedHashSet0 = new LinkedHashSet<Boolean>();
      IteratorUtils.asIterator((Enumeration<? extends Boolean>) enumeration0, (Collection<? super Boolean>) linkedHashSet0);
      Hashtable<IIOMetadataNode, SQLTimeoutException> hashtable0 = new Hashtable<IIOMetadataNode, SQLTimeoutException>();
      EntrySetMapIterator<IIOMetadataNode, SQLTimeoutException> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLTimeoutException>(hashtable0);
      MapIterator<IIOMetadataNode, SQLTransientException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ? extends SQLTransientException>) entrySetMapIterator0);
      IteratorUtils.size(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      OrderedIterator<Boolean> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Boolean>) orderedIterator0);
      Hashtable<IIOMetadataNode, SQLTimeoutException> hashtable0 = new Hashtable<IIOMetadataNode, SQLTimeoutException>();
      EntrySetMapIterator<IIOMetadataNode, SQLTimeoutException> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLTimeoutException>(hashtable0);
      MapIterator<IIOMetadataNode, SQLTransientException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ? extends SQLTransientException>) entrySetMapIterator0);
      IteratorUtils.size(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 7);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "M594_", 1380);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "ListIterator must not be null", 1380, sQLTransientConnectionException0);
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0);
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) singletonIterator0;
      MapIterator<SQLTimeoutException, Closure<SQLTransactionRollbackException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[1] = (Iterator<SQLTimeoutException>) mapIterator0;
      SkippingIterator<SQLTimeoutException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLTimeoutException>) mapIterator0, (long) 1380);
      iteratorArray0[2] = (Iterator<SQLTimeoutException>) skippingIterator0;
      TruePredicate.truePredicate();
      Integer integer0 = new Integer(1380);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      predicateArray0[0] = (Predicate<Object>) notPredicate0;
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      predicateArray0[1] = predicate1;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(instanceofPredicate0);
      Predicate<SQLException> predicate2 = TruePredicate.truePredicate();
      Predicate<SQLException> predicate3 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLException>) predicate2);
      AndPredicate.andPredicate((Predicate<? super SQLException>) anyPredicate0, (Predicate<? super SQLException>) predicate1);
      IteratorUtils.matchesAll((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate3);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>((SQLTimeoutException) null);
      IteratorUtils.emptyOrderedIterator();
      OrderedMapIterator<SQLNonTransientConnectionException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, IIOMetadataNode>(orderedMapIterator0);
      Predicate<SQLNonTransientException> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAll((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      OrderedMapIterator<SQLTransientConnectionException, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends SQLTransientException>) orderedMapIterator0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>(10);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Boolean>) null, (Collection<? super Boolean>) arrayDeque0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("s#x_/}[xny", sQLTransientException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("s#x_/}[xny", "s#x_/}[xny", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("s#x_/}[xny", "s#x_/}[xny", 12, sQLTransientException0);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("Iterator[", "s#x_/}[xny", 12, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("Y[]Mh92!1PQWuMn]4.+", "s#x_/}[xny", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException4;
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0, 0);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(linkedList0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) reverseListIterator0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0, (Collection<? super DataTruncation>) linkedList0);
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) iterator0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = null;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null);
      sQLRecoverableException0.getStackTrace();
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      stack0.add(sQLRecoverableException0);
      IteratorUtils.loopingListIterator((List<SQLRecoverableException>) stack0);
      IteratorUtils.emptyOrderedMapIterator();
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) linkedList0);
      Stack<DataTruncation> stack1 = new Stack<DataTruncation>();
      Enumeration<DataTruncation> enumeration0 = stack1.elements();
      Iterator<DataTruncation> iterator0 = IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0, (Collection<? super DataTruncation>) linkedList0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) iterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      java.util.function.Predicate<Object> predicate0 = java.util.function.Predicate.isEqual((Object) sQLFeatureNotSupportedException0);
      java.util.function.Predicate<Object> predicate1 = predicate0.negate();
      java.util.function.Predicate<Object> predicate2 = predicate1.or(predicate0);
      stack1.removeIf(predicate2);
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(zippingIterator0);
      ListIteratorWrapper<DataTruncation> listIteratorWrapper1 = new ListIteratorWrapper<DataTruncation>(zippingIterator0);
      // Undeclared exception!
      try { 
        listIteratorWrapper1.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot remove element at index -1.
         //
         verifyException("org.apache.commons.collections4.iterators.ListIteratorWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "", 1380);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, (-3089), sQLTransientConnectionException0);
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.skippingIterator((Iterator<SQLTimeoutException>) singletonIterator0, (long) 1380);
      TruePredicate.truePredicate();
      Integer integer0 = new Integer((-490));
      Integer integer1 = new Integer((-3089));
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("ListIterator must not be null");
      stringTokenizer0.hasMoreTokens();
      StringTokenizer stringTokenizer1 = new StringTokenizer("Transformer must not be null");
      stringTokenizer1.hasMoreElements();
      stringTokenizer1.hasMoreTokens();
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer1);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.size(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(nullIsExceptionPredicate0);
      predicateArray0[0] = (Predicate<Object>) notPredicate0;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(nullIsExceptionPredicate0, defaultEquator0);
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      Integer integer0 = new Integer(133);
      IteratorUtils.singletonIterator((Integer) (-1));
      StringTokenizer stringTokenizer0 = new StringTokenizer("ListIterator must not be null");
      stringTokenizer0.hasMoreTokens();
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.size(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 7);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "M594_", 1380);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "ListIterator must not be null", 1380, sQLTransientConnectionException0);
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0);
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) singletonIterator0;
      MapIterator<SQLTimeoutException, Closure<SQLTransactionRollbackException>> mapIterator1 = IteratorUtils.emptyMapIterator();
      iteratorArray0[1] = (Iterator<SQLTimeoutException>) mapIterator1;
      SkippingIterator<SQLTimeoutException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLTimeoutException>) mapIterator1, (long) 1380);
      iteratorArray0[2] = (Iterator<SQLTimeoutException>) skippingIterator0;
      TruePredicate.truePredicate();
      Integer integer0 = new Integer(1380);
      Integer integer1 = new Integer(133);
      IteratorUtils.singletonIterator(integer1);
      StringTokenizer stringTokenizer0 = new StringTokenizer("ListIterator must not be null");
      stringTokenizer0.hasMoreTokens();
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 2);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class0;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      classArray0[1] = class1;
      Transformer<SQLException, SQLTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("[`!#g2^O", (Class<?>[]) classArray0, (Object[]) classArray0);
      IfTransformer<SQLException, SQLTransientConnectionException> ifTransformer0 = new IfTransformer<SQLException, SQLTransientConnectionException>(predicate0, transformer0, transformer0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientException0.printStackTrace();
      SQLWarning sQLWarning0 = new SQLWarning("[`!#g2^O", "[`!#g2^O", (-2814));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLWarning0);
      sQLNonTransientConnectionException0.getSuppressed();
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      linkedList0.add((SQLNonTransientException) sQLNonTransientConnectionException0);
      IteratorUtils.loopingListIterator((List<SQLNonTransientException>) linkedList0);
      IteratorUtils.emptyOrderedMapIterator();
      ListIterator<DataTruncation> listIterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 1);
      Class<SQLException> class0 = SQLException.class;
      classArray0[0] = class0;
      InvokerTransformer.invokerTransformer(") less than zero.", (Class<?>[]) classArray0, (Object[]) classArray0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      DataTruncation dataTruncation0 = new DataTruncation(100, false, false, 52, 52);
      dataTruncationArray0[0] = dataTruncation0;
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) objectArrayListIterator0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) objectArrayListIterator0, (Iterator<? extends DataTruncation>) objectArrayListIterator0, (Iterator<? extends DataTruncation>) listIterator0);
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(zippingIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) listIterator0, (Predicate<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(resettableListIterator0, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.matchesAny((Iterator<Integer>) resettableIterator0, (Predicate<? super Integer>) comparatorPredicate0);
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientException0.printStackTrace();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLNonTransientException0);
      sQLNonTransientConnectionException0.getSuppressed();
      linkedList0.add((SQLNonTransientException) sQLNonTransientConnectionException0);
      IteratorUtils.loopingListIterator((List<SQLNonTransientException>) linkedList0);
      IteratorUtils.emptyOrderedMapIterator();
      ArrayList<Closure<Object>> arrayList0 = new ArrayList<Closure<Object>>(1);
      // Undeclared exception!
      try { 
        arrayList0.listIterator(51);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 2);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class0;
      classArray0[1] = class0;
      Transformer<SQLException, SQLTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("[`!#g2^O", (Class<?>[]) classArray0, (Object[]) classArray0);
      IfTransformer<SQLException, SQLTransientConnectionException> ifTransformer0 = new IfTransformer<SQLException, SQLTransientConnectionException>(predicate0, transformer0, transformer0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 0);
      TreeSet<SQLSyntaxErrorException> treeSet0 = new TreeSet<SQLSyntaxErrorException>();
      LoopingIterator<SQLSyntaxErrorException> loopingIterator0 = new LoopingIterator<SQLSyntaxErrorException>(treeSet0);
      Object object0 = new Object();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(object0);
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) loopingIterator0, (Predicate<? super SQLSyntaxErrorException>) equalPredicate0);
      MapIterator<Properties, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<Properties, SQLFeatureNotSupportedException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Properties, SQLFeatureNotSupportedException>(mapIterator0);
      MapIterator<Properties, SQLFeatureNotSupportedException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Properties, ? extends SQLFeatureNotSupportedException>) abstractMapIteratorDecorator0);
      IteratorUtils.unmodifiableMapIterator(mapIterator1);
      IteratorUtils.toString((Iterator<EnumSet<Locale.FilteringMode>>) null);
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) iterator0, (long) 0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[`!#g2^O", "[]", 0, dataTruncation0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator1, (long) 0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ArrayList<IIOMetadataNode>[] arrayListArray0 = (ArrayList<IIOMetadataNode>[]) Array.newInstance(ArrayList.class, 1);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      arrayListArray0[0] = arrayList0;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<DataTruncation> list0 = new LinkedList<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(list0);
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) reverseListIterator0);
      IteratorUtils.arrayListIterator(arrayListArray0, 0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ArrayList<IIOMetadataNode>[] arrayListArray0 = (ArrayList<IIOMetadataNode>[]) Array.newInstance(ArrayList.class, 1);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      arrayListArray0[0] = arrayList0;
      int int0 = 0;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      OrderedMapIterator<DataTruncation, ServiceLoader<DataTruncation>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) orderedMapIterator0, (-2814));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      Integer integer0 = new Integer(91);
      Integer integer1 = new Integer(91);
      Integer integer2 = new Integer(536);
      Integer integer3 = new Integer(10);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Integer[]) null, 270, (-339));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Transformer must not be null", "Transformer must not be null");
      sQLRecoverableException0.getStackTrace();
      stack0.add(sQLRecoverableException0);
      IteratorUtils.loopingListIterator((List<SQLRecoverableException>) stack0);
      IteratorUtils.emptyOrderedMapIterator();
      Integer integer0 = new Integer(10);
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, 51, 1513);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) orderedMapIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) listIterator0);
      MapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) mapIterator1, (Iterator<? extends DataTruncation>) mapIterator0);
      ListIterator<DataTruncation> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) mapIterator1);
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) listIterator1, (Iterator<? extends DataTruncation>) listIterator1, (Iterator<? extends DataTruncation>) mapIterator0);
      ResettableIterator<SQLDataException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) resettableIterator0, (Iterator<? extends SQLDataException>) resettableIterator0);
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0);
      Object object0 = new Object();
      ArrayListIterator<DataTruncation> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<DataTruncation>(listIterator1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNode0.hasChildNodes();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      Integer integer0 = new Integer(1273);
      IteratorUtils.singletonIterator(integer0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[0];
      IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0);
      // Undeclared exception!
      try { 
        AnyPredicate.anyPredicate((Predicate<? super Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Predicate<SQLClientInfoException> predicate0 = EqualPredicate.equalPredicate(sQLClientInfoException0);
      ListIterator<SQLClientInfoException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) listIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLException>) listIterator1);
      OrderedMapIterator<SQLTransientConnectionException, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransientConnectionException, SQLTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends SQLTransientException>) orderedMapIterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "(this Map)";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) "(this Map)", comparator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Transformer must not be null", "Transformer must not be null");
      sQLRecoverableException0.getStackTrace();
      stack0.add(sQLRecoverableException0);
      Stack<SQLSyntaxErrorException> stack1 = new Stack<SQLSyntaxErrorException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) stack1);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      StringValueTransformer.stringValueTransformer();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(arrayList0);
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) reverseListIterator0);
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<SQLException> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) predicate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      arrayDeque0.clone();
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Hashtable<SQLTransientException, String> hashtable0 = new Hashtable<SQLTransientException, String>();
      hashtable0.elements();
      TruePredicate.truePredicate();
      ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLInvalidAuthorizationSpecException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("s#x_/}[xny", sQLTransientException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("s#x_/}[xny", "s#x_/}[xny", sQLTransientException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("s#x_/}[xny", "s#x_/}[xny", sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("s#x_/}[xny", "s#x_/}[xny", 12, sQLTransientException0);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("Iterator[", "s#x_/}[xny", 0, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("Y[]Mh92!1PQWuMn]4.+", "s#x_/}[xny", sQLFeatureNotSupportedException1);
      IteratorUtils.toString((Iterator<EnumSet<Locale.FilteringMode>>) null);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) resettableListIterator0);
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) iterator0, (long) 12);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[]", "Iterator[", 0, sQLFeatureNotSupportedException0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator1, (-1855L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Iterator<DataTruncation> iterator0 = null;
      UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      OrderedIterator<Class<SQLClientInfoException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) orderedIterator0, (-1013));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      arrayDeque0.clone();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      OrderedMapIterator<String, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<String, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, DataTruncation>(orderedMapIterator0);
      MapIterator<String, DataTruncation> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<String, DataTruncation>) orderedMapIterator0);
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 6);
      EmptyMapIterator.emptyMapIterator();
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      iteratorArray0[1] = (Iterator<SQLClientInfoException>) resettableIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) iteratorArray0[0], (Iterator<? extends SQLClientInfoException>) resettableIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      predicateArray0[2] = predicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(anyPredicate0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLException>) nullIsTruePredicate0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Predicate<SQLClientInfoException> predicate0 = EqualPredicate.equalPredicate(sQLClientInfoException0);
      ListIterator<SQLClientInfoException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) listIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLException>) listIterator1);
      OrderedMapIterator<SQLTransientConnectionException, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransientConnectionException, SQLTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends SQLTransientException>) orderedMapIterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("FYkaT");
      iIOMetadataNode0.getOwnerDocument();
      IteratorUtils.emptyIterator();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[3];
      int int0 = 2325;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(2325);
      SQLWarning sQLWarning0 = new SQLWarning("k=");
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("U^0tdZdUcl2lrg", hashMap0, sQLWarning0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException0;
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0, 2325);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      OrderedMapIterator<String, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<String, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, DataTruncation>(orderedMapIterator0);
      OrderedMapIterator<String, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ? extends DataTruncation>) abstractOrderedMapIteratorDecorator0);
      MapIterator<String, DataTruncation> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<String, DataTruncation>) orderedMapIterator1);
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 6);
      MapIterator<SQLClientInfoException, Iterator<SQLFeatureNotSupportedException>> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) mapIterator1;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      iteratorArray0[1] = (Iterator<SQLClientInfoException>) resettableIterator0;
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) iteratorArray0[0], (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      iteratorArray0[2] = iterator0;
      Iterator<SQLClientInfoException>[] iteratorArray1 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 9);
      iteratorArray1[0] = iterator0;
      iteratorArray1[1] = (Iterator<SQLClientInfoException>) mapIterator1;
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("jaz/Y$@c#,br20EYA", "jh&KVQ`u");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0, sQLFeatureNotSupportedException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("0D", "", (-2103), map0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(map0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("jh&KVQ`u", hashMap0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("jh&KVQ`u", "cpT+M", hashMap0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("jh&KVQ`u", "jaz/Y$@c#,br20EYA", (-1), map0, sQLClientInfoException4);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("Set and List must be empty", (String) null, (-2103), map0, sQLClientInfoException5);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException("", "t/<1!*s", (Map<String, ClientInfoStatus>) null, sQLClientInfoException6);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException7;
      SQLClientInfoException sQLClientInfoException8 = new SQLClientInfoException("t/<1!*s", "N}LFpPp}FeT", (-1), map0, sQLClientInfoException6);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException8;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      iteratorArray1[2] = (Iterator<SQLClientInfoException>) resettableListIterator0;
      iteratorArray1[3] = (Iterator<SQLClientInfoException>) mapIterator1;
      iteratorArray1[4] = iterator0;
      iteratorArray1[5] = (Iterator<SQLClientInfoException>) resettableIterator0;
      iteratorArray1[6] = iterator0;
      iteratorArray1[7] = (Iterator<SQLClientInfoException>) resettableIterator0;
      iteratorArray1[8] = (Iterator<SQLClientInfoException>) mapIterator1;
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray1);
      iteratorArray0[3] = iterator1;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) iteratorArray0[1], (Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[7];
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      PredicateTransformer<ArrayDeque<DataTruncation>> predicateTransformer0 = new PredicateTransformer<ArrayDeque<DataTruncation>>(predicate0);
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      Boolean boolean0 = predicateTransformer0.transform(arrayDeque0);
      booleanArray0[0] = boolean0;
      Boolean boolean1 = predicateTransformer0.transform(arrayDeque0);
      booleanArray0[1] = boolean1;
      Boolean boolean2 = predicateTransformer0.transform(arrayDeque0);
      booleanArray0[2] = boolean2;
      ArrayDeque<DataTruncation> arrayDeque1 = new ArrayDeque<DataTruncation>();
      Boolean boolean3 = predicateTransformer0.transform(arrayDeque1);
      booleanArray0[3] = boolean3;
      Boolean boolean4 = predicateTransformer0.transform(arrayDeque0);
      booleanArray0[4] = boolean4;
      Boolean boolean5 = predicateTransformer0.transform(arrayDeque1);
      booleanArray0[5] = boolean5;
      Boolean boolean6 = predicateTransformer0.transform(arrayDeque0);
      booleanArray0[6] = boolean6;
      ObjectArrayListIterator<Boolean> objectArrayListIterator0 = new ObjectArrayListIterator<Boolean>(booleanArray0);
      IteratorUtils.peekingIterator((Iterator<? extends Boolean>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Iterator<DataTruncation> iterator0 = null;
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      String string0 = "[`!#g2^O";
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 2);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class0;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      classArray0[1] = class1;
      Transformer<SQLException, SQLTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("[`!#g2^O", (Class<?>[]) classArray0, (Object[]) classArray0);
      IfTransformer<SQLException, SQLTransientConnectionException> ifTransformer0 = new IfTransformer<SQLException, SQLTransientConnectionException>(predicate0, transformer0, transformer0);
      int int0 = 0;
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 0);
      Transformer<SQLException, DataTruncation> transformer1 = ConstantTransformer.constantTransformer(dataTruncation0);
      IfTransformer.ifTransformer((Predicate<? super DataTruncation>) predicate0, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer1);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) null, (Transformer<? super DataTruncation, ? extends SQLTransientConnectionException>) ifTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IteratorUtils.singletonListIterator("[;|-&&>k6f\">M8gf0A");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-1114));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1114));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integer3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(integerArray0, (int) integerArray0[2]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("y7g;C/D ?q9w|!&v", "y7g;C/D ?q9w|!&v", 113, (Throwable) null);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLException sQLException0 = new SQLException("y7g;C/D ?q9w|!&v", "transformer may not be null", 113);
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException(sQLException0);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("u~", "@p4.8zRI", sQLRecoverableException1);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("y7g;C/D ?q9w|!&v", "g$gAt!");
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException("u~", "org.apache.commons.collections4.functors.InstantiateFactory");
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException("@p4.8zRI", "y7g;C/D ?q9w|!&v", 113, sQLRecoverableException5);
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      SQLRecoverableException sQLRecoverableException7 = new SQLRecoverableException((Throwable) null);
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException7;
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0, (-1357), (-1357));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("");
      IteratorUtils.getIterator(sQLWarning0);
      IteratorUtils.emptyOrderedIterator();
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[7];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[1] = clientInfoStatus1;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[2] = clientInfoStatus2;
      ClientInfoStatus clientInfoStatus3 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[3] = clientInfoStatus3;
      ClientInfoStatus clientInfoStatus4 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      clientInfoStatusArray0[4] = clientInfoStatus4;
      OrderedMapIterator<SQLTransientConnectionException, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends SQLTransientException>) orderedMapIterator0);
      MapIterator<IIOMetadataNode, ArrayDeque<Transformer>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      int int0 = (-2191);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLException[]) null, (-2191));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      IteratorUtils.emptyIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      singletonListIterator0.next();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) singletonListIterator0, (Predicate<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", (-307));
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0);
      IteratorUtils.emptyMapIterator();
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) singletonIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      IteratorUtils.isEmpty(iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getLastChild();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 7);
      String string0 = "M594_";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "M594_", 1380);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "ListIterator must not be null", 1380, sQLTransientConnectionException0);
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0);
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) singletonIterator0;
      MapIterator<SQLTimeoutException, Closure<SQLTransactionRollbackException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[1] = (Iterator<SQLTimeoutException>) mapIterator0;
      SkippingIterator<SQLTimeoutException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLTimeoutException>) mapIterator0, (long) 1380);
      iteratorArray0[2] = (Iterator<SQLTimeoutException>) skippingIterator0;
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) skippingIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      iteratorArray0[3] = iterator0;
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTimeoutException[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, 3423);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, (-1104), sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLSyntaxErrorException0, 12, 165);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      vector0.add(iIOMetadataNode0);
      MapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) mapIterator1, (Iterator<? extends DataTruncation>) mapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) iterator0, (Iterator<? extends DataTruncation>) mapIterator1, (Iterator<? extends DataTruncation>) iterator0);
      ResettableIterator<SQLDataException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) resettableIterator0, (Iterator<? extends SQLDataException>) resettableIterator0);
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", sQLNonTransientException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", sQLRecoverableException0);
      sQLNonTransientException0.getStackTrace();
      sQLTimeoutException0.spliterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "8k2a=6Qv6<,:c6$w6O'", 14, sQLTimeoutException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("8]KPzpua3$@<", "org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLIntegrityConstraintViolationException0, 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLClientInfoException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedIterator();
      OrderedMapIterator<SQLNonTransientConnectionException, IIOMetadataNode> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, IIOMetadataNode>(orderedMapIterator1);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator1, class0);
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      LoopingIterator<IIOMetadataNode> loopingIterator0 = new LoopingIterator<IIOMetadataNode>(stack0);
      IteratorUtils.contains((Iterator<IIOMetadataNode>) loopingIterator0, (Object) null);
      IteratorUtils.collatedIterator((Comparator<? super SQLException>) null, (Iterator<? extends SQLException>) orderedMapIterator1, (Iterator<? extends SQLException>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Predicate<SQLException> predicate0 = new UniquePredicate<SQLException>();
      EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) mapIterator0, (Predicate<? super SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SQLDataException sQLDataException0 = null;
      IteratorUtils.singletonIterator((SQLDataException) null);
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      arrayDeque0.clone();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      SQLDataException sQLDataException1 = new SQLDataException((Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLDataException1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      IteratorUtils.singletonIterator((SQLDataException) null);
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      arrayDeque0.clone();
      arrayDeque0.spliterator();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      SQLDataException sQLDataException0 = new SQLDataException((Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      IteratorUtils.loopingListIterator((List<BatchUpdateException>) vector0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-2936);
      intArray0[2] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "%Qw", intArray0);
      ArrayIterator<SQLTransientConnectionException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLTransientConnectionException>(batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) orderedMapIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) listIterator0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("9wLdKEW7", "", 0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, (-1463));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<IIOMetadataNode, SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      int int0 = 0;
      int int1 = 569;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 0, 569);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 1);
      Class<SQLException> class0 = SQLException.class;
      classArray0[0] = class0;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer(") less than zero.", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) null, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, (String) null, ") less than zero.", ") less than zero.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      LinkedList<SQLWarning> linkedList0 = new LinkedList<SQLWarning>();
      SQLWarning sQLWarning0 = new SQLWarning();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLWarning0.setStackTrace(stackTraceElementArray0);
      linkedList0.add(sQLWarning0);
      stack0.retainAll(linkedList0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("l_3O^U>p");
      sQLTimeoutException0.printStackTrace();
      stack0.add(sQLTimeoutException0);
      stack0.spliterator();
      IteratorUtils.loopingListIterator((List<SQLTimeoutException>) stack0);
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2965);
      integerArray0[3] = integer3;
      IteratorUtils.arrayIterator(integerArray0);
      SQLException[] sQLExceptionArray0 = new SQLException[2];
      sQLExceptionArray0[0] = (SQLException) sQLTimeoutException0;
      sQLExceptionArray0[1] = (SQLException) sQLTimeoutException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLExceptionArray0, (int) integerArray0[3]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-1299));
      assertEquals((-1299), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(536);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(10);
      integerArray0[4] = integer4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, 270, 270);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Transformer must not be null", "Transformer must not be null");
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: Transformer must not be null", sQLRecoverableException0.toString());
      assertEquals("Transformer must not be null", sQLRecoverableException0.getMessage());
      assertEquals("Transformer must not be null", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      StackTraceElement[] stackTraceElementArray0 = sQLRecoverableException0.getStackTrace();
      assertEquals(13, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      assertEquals("java.sql.SQLRecoverableException: Transformer must not be null", sQLRecoverableException0.toString());
      assertEquals("Transformer must not be null", sQLRecoverableException0.getMessage());
      assertEquals("Transformer must not be null", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      boolean boolean0 = stack0.add(sQLRecoverableException0);
      assertTrue(boolean0);
      assertTrue(stack0.contains(sQLRecoverableException0));
      assertEquals("[java.sql.SQLRecoverableException: Transformer must not be null]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("java.sql.SQLRecoverableException: Transformer must not be null", sQLRecoverableException0.toString());
      assertEquals("Transformer must not be null", sQLRecoverableException0.getMessage());
      assertEquals("Transformer must not be null", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLRecoverableException>) stack0);
      assertNotNull(resettableListIterator0);
      assertTrue(stack0.contains(sQLRecoverableException0));
      assertEquals("[java.sql.SQLRecoverableException: Transformer must not be null]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      
      OrderedMapIterator<LinkedList<SQLNonTransientConnectionException>, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<LinkedList<SQLNonTransientConnectionException>>) orderedMapIterator0, (Predicate<? super LinkedList<SQLNonTransientConnectionException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      assertNotNull(predicate0);
      
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) resettableListIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      assertNotNull(listIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      int int0 = 1233;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) null, 1233);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "Transformer must not be null";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Transformer must not be null");
      assertNotNull(sQLRecoverableException0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: Transformer must not be null", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("Transformer must not be null", sQLRecoverableException0.getMessage());
      
      DataTruncation dataTruncation0 = new DataTruncation(44, true, true, 44, 44, sQLRecoverableException0);
      assertNotNull(dataTruncation0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: Transformer must not be null", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("Transformer must not be null", sQLRecoverableException0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      
      dataTruncation0.printStackTrace();
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: Transformer must not be null", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("Transformer must not be null", sQLRecoverableException0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      
      dataTruncation0.printStackTrace();
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: Transformer must not be null", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("Transformer must not be null", sQLRecoverableException0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = 365;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 365);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, Predicate<Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      assertNotNull(predicate0);
      assertFalse(hashSet0.contains(predicate0));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      assertNotNull(nullIsExceptionPredicate0);
      assertFalse(hashSet0.contains(predicate0));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(nullIsExceptionPredicate0);
      assertNotNull(notPredicate0);
      assertFalse(hashSet0.contains(predicate0));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      predicateArray0[0] = (Predicate<Object>) notPredicate0;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator0);
      
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(nullIsExceptionPredicate0, defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(equalPredicate0);
      assertFalse(hashSet0.contains(predicate0));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(hashSet0.contains(predicate0));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      predicateArray0[2] = predicate1;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      assertEquals(3, predicateArray0.length);
      assertNotNull(anyPredicate0);
      
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(anyPredicate0);
      assertEquals(3, predicateArray0.length);
      assertNotNull(nullIsTruePredicate0);
      
      Predicate<SQLException> predicate2 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLException>) nullIsTruePredicate0);
      assertEquals(3, predicateArray0.length);
      assertNotNull(predicate2);
      
      Predicate<SQLException> predicate3 = AndPredicate.andPredicate((Predicate<? super SQLException>) predicate2, (Predicate<? super SQLException>) nullIsExceptionPredicate0);
      assertEquals(3, predicateArray0.length);
      assertNotNull(predicate3);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(hashSet0.contains(predicate0));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLInvalidAuthorizationSpecException>) orderedIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate3);
      assertTrue(boolean0);
      assertEquals(3, predicateArray0.length);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(hashSet0.contains(predicate0));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[1];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      
      SQLWarning sQLWarning0 = new SQLWarning(sQLClientInfoException0);
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLWarning: java.sql.SQLClientInfoException", sQLWarning0.toString());
      assertEquals("java.sql.SQLClientInfoException", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("eV@:^)(mSjy", "org.apache.commons.collections4.functors.TransformerPredicate", sQLWarning0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLWarning: java.sql.SQLClientInfoException", sQLWarning0.toString());
      assertEquals("java.sql.SQLClientInfoException", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.TransformerPredicate", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: eV@:^)(mSjy", sQLTransientConnectionException0.toString());
      assertEquals("eV@:^)(mSjy", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "iterator", (-363), sQLTransientConnectionException0);
      assertNotNull(sQLNonTransientException0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLWarning: java.sql.SQLClientInfoException", sQLWarning0.toString());
      assertEquals("java.sql.SQLClientInfoException", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.TransformerPredicate", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: eV@:^)(mSjy", sQLTransientConnectionException0.toString());
      assertEquals("eV@:^)(mSjy", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("iterator", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertEquals((-363), sQLNonTransientException0.getErrorCode());
      
      sQLNonTransientExceptionArray0[0] = sQLNonTransientException0;
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      assertEquals(1, sQLNonTransientExceptionArray0.length);
      assertNotNull(resettableListIterator0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      assertNotNull(sQLTransientException0);
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("s#x_/}[xny", sQLTransientException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("s#x_/}[xny", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: s#x_/}[xny", sQLFeatureNotSupportedException0.toString());
      
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("s#x_/}[xny", "s#x_/}[xny", sQLTransientException0);
      assertNotNull(sQLFeatureNotSupportedException1);
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("s#x_/}[xny", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("s#x_/}[xny", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: s#x_/}[xny", sQLFeatureNotSupportedException1.toString());
      
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("s#x_/}[xny", "s#x_/}[xny", sQLFeatureNotSupportedException1);
      assertNotNull(sQLFeatureNotSupportedException2);
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException1));
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("s#x_/}[xny", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("s#x_/}[xny", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: s#x_/}[xny", sQLFeatureNotSupportedException1.toString());
      assertEquals(0, sQLFeatureNotSupportedException2.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: s#x_/}[xny", sQLFeatureNotSupportedException2.toString());
      assertEquals("s#x_/}[xny", sQLFeatureNotSupportedException2.getSQLState());
      assertEquals("s#x_/}[xny", sQLFeatureNotSupportedException2.getMessage());
      
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("s#x_/}[xny", "s#x_/}[xny", 12, sQLTransientException0);
      assertNotNull(sQLFeatureNotSupportedException3);
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException2));
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("s#x_/}[xny", sQLFeatureNotSupportedException3.getSQLState());
      assertEquals("s#x_/}[xny", sQLFeatureNotSupportedException3.getMessage());
      assertEquals(12, sQLFeatureNotSupportedException3.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: s#x_/}[xny", sQLFeatureNotSupportedException3.toString());
      
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("Iterator[", "s#x_/}[xny", 0, sQLFeatureNotSupportedException0);
      assertNotNull(sQLFeatureNotSupportedException4);
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException2));
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("s#x_/}[xny", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: s#x_/}[xny", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException4.getErrorCode());
      assertEquals("Iterator[", sQLFeatureNotSupportedException4.getMessage());
      assertEquals("s#x_/}[xny", sQLFeatureNotSupportedException4.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Iterator[", sQLFeatureNotSupportedException4.toString());
      
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("Y[]Mh92!1PQWuMn]4.+", "s#x_/}[xny", sQLFeatureNotSupportedException1);
      assertNotNull(sQLFeatureNotSupportedException5);
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException4));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException4));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException0));
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("s#x_/}[xny", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("s#x_/}[xny", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: s#x_/}[xny", sQLFeatureNotSupportedException1.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Y[]Mh92!1PQWuMn]4.+", sQLFeatureNotSupportedException5.toString());
      assertEquals("Y[]Mh92!1PQWuMn]4.+", sQLFeatureNotSupportedException5.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException5.getErrorCode());
      assertEquals("s#x_/}[xny", sQLFeatureNotSupportedException5.getSQLState());
      
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0, 0);
      assertEquals(6, sQLFeatureNotSupportedExceptionArray0.length);
      assertNotNull(objectArrayIterator0);
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(6, objectArrayIterator0.getEndIndex());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      
      Iterator<SQLException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) objectArrayIterator0);
      assertEquals(6, sQLFeatureNotSupportedExceptionArray0.length);
      assertNotNull(iterator0);
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(6, objectArrayIterator0.getEndIndex());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      assertNotNull(predicate0);
      
      SQLException sQLException0 = IteratorUtils.find(iterator0, (Predicate<? super SQLException>) predicate0);
      assertEquals(6, sQLFeatureNotSupportedExceptionArray0.length);
      assertNull(sQLException0);
      assertEquals(6, objectArrayIterator0.getEndIndex());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertFalse(objectArrayIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(1, true, false, 10, 1073741824);
      assertNotNull(dataTruncation0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("/h#N1f(LE1'\"z\"7", "uX@Q\"[NcO%h?%{W*", dataTruncation0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("/h#N1f(LE1'\"z\"7", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: /h#N1f(LE1'\"z\"7", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("uX@Q\"[NcO%h?%{W*", sQLIntegrityConstraintViolationException0.getSQLState());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0, (-1838));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      assertNotNull(iIOMetadataNode0);
      
      boolean boolean0 = iIOMetadataNode0.hasChildNodes();
      assertFalse(boolean0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      Integer integer0 = new Integer(1273);
      assertEquals(1273, (int)integer0);
      assertNotNull(integer0);
      
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      assertNotNull(resettableIterator0);
      
      StringTokenizer stringTokenizer0 = new StringTokenizer("ListIterator must not be null");
      assertNotNull(stringTokenizer0);
      assertEquals(5, stringTokenizer0.countTokens());
      
      ResettableIterator<StringTokenizer> resettableIterator1 = IteratorUtils.singletonIterator(stringTokenizer0);
      assertNotNull(resettableIterator1);
      assertEquals(5, stringTokenizer0.countTokens());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("", sQLTimeoutException0.getMessage());
      
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", sQLTimeoutException0);
      assertNotNull(sQLTimeoutException1);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException1.toString());
      assertNull(sQLTimeoutException1.getSQLState());
      assertEquals("", sQLTimeoutException1.getMessage());
      
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", sQLTimeoutException0);
      assertNotNull(sQLTimeoutException2);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException1));
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", sQLTimeoutException2.toString());
      assertNull(sQLTimeoutException2.getSQLState());
      assertEquals("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", sQLTimeoutException2.getMessage());
      assertEquals(0, sQLTimeoutException2.getErrorCode());
      
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("", "");
      assertNotNull(sQLTimeoutException3);
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException1));
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException3.toString());
      assertEquals(0, sQLTimeoutException3.getErrorCode());
      assertEquals("", sQLTimeoutException3.getMessage());
      assertEquals("", sQLTimeoutException3.getSQLState());
      
      sQLTimeoutException2.printStackTrace();
      assertNotSame(sQLTimeoutException0, sQLTimeoutException3);
      assertNotSame(sQLTimeoutException0, sQLTimeoutException2);
      assertNotSame(sQLTimeoutException0, sQLTimeoutException1);
      assertNotSame(sQLTimeoutException2, sQLTimeoutException0);
      assertNotSame(sQLTimeoutException2, sQLTimeoutException3);
      assertNotSame(sQLTimeoutException2, sQLTimeoutException1);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException1));
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", sQLTimeoutException2.toString());
      assertNull(sQLTimeoutException2.getSQLState());
      assertEquals("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", sQLTimeoutException2.getMessage());
      assertEquals(0, sQLTimeoutException2.getErrorCode());
      
      String string0 = sQLTimeoutException3.getLocalizedMessage();
      assertNotSame(sQLTimeoutException3, sQLTimeoutException0);
      assertNotSame(sQLTimeoutException3, sQLTimeoutException2);
      assertNotSame(sQLTimeoutException3, sQLTimeoutException1);
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException1));
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException3.toString());
      assertEquals(0, sQLTimeoutException3.getErrorCode());
      assertEquals("", sQLTimeoutException3.getMessage());
      assertEquals("", sQLTimeoutException3.getSQLState());
      
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, 0, 0);
      assertEquals(4, sQLTimeoutExceptionArray0.length);
      assertNotNull(resettableIterator0);
      
      String string1 = IteratorUtils.toString((Iterator<SQLTimeoutException>) resettableIterator0);
      assertEquals("[]", string1);
      assertEquals(4, sQLTimeoutExceptionArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      MapIterator<Object, PriorityQueue<SQLDataException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      String string0 = null;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      vector0.add(iIOMetadataNode0);
      ResettableIterator<Vector<IIOMetadataNode>> resettableIterator0 = IteratorUtils.singletonIterator(vector0);
      IteratorUtils.toString((Iterator<Vector<IIOMetadataNode>>) resettableIterator0);
      MapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) mapIterator1, (Iterator<? extends DataTruncation>) mapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) iterator0, (Iterator<? extends DataTruncation>) mapIterator1, (Iterator<? extends DataTruncation>) iterator0);
      ResettableIterator<SQLDataException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) resettableIterator1, (Iterator<? extends SQLDataException>) resettableIterator1);
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0);
      String string1 = "";
      String string2 = "8k2a=6Qv6<,:c6$w6O'";
      int int0 = 14;
      String string3 = "org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", sQLNonTransientException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", sQLRecoverableException0);
      sQLTimeoutException0.spliterator();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true, "org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) mapIterator0, 14, 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
