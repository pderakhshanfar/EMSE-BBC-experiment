/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 09 07:26:16 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "");
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[17];
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      ZippingIterator<SQLIntegrityConstraintViolationException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<ClientInfoStatus, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends ClientInfoStatus>) orderedMapIterator0);
      Iterator<ClientInfoStatus> iterator1 = IteratorUtils.collatedIterator((Comparator<? super ClientInfoStatus>) comparator0, (Iterator<? extends ClientInfoStatus>) orderedMapIterator0, (Iterator<? extends ClientInfoStatus>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends InstanceofPredicate>) listIterator0);
      Iterator<InstanceofPredicate> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends InstanceofPredicate>) iterator0, (Iterator<? extends InstanceofPredicate>) listIterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("W8`DSCt#v5{%x<-B$<n");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", (-1418), sQLTransientException0);
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 6);
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) singletonListIterator0;
      iteratorArray0[1] = (Iterator<SQLIntegrityConstraintViolationException>) singletonListIterator0;
      iteratorArray0[2] = (Iterator<SQLIntegrityConstraintViolationException>) singletonListIterator0;
      iteratorArray0[3] = (Iterator<SQLIntegrityConstraintViolationException>) singletonListIterator0;
      iteratorArray0[4] = (Iterator<SQLIntegrityConstraintViolationException>) singletonListIterator0;
      iteratorArray0[5] = (Iterator<SQLIntegrityConstraintViolationException>) singletonListIterator0;
      ZippingIterator<SQLIntegrityConstraintViolationException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      vector0.add(sQLNonTransientConnectionException0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) resettableListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<DataTruncation> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(listIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      String string0 = IteratorUtils.toString((Iterator<InstanceofPredicate>) null, (Transformer<? super InstanceofPredicate, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.emptyIterator();
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) resettableIterator0, 141);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, StringTokenizer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((Throwable) null);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) listIterator0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(", ", "");
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) singletonListIterator0, (Iterator<? extends SQLNonTransientException>) singletonListIterator0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) zippingIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      Properties properties0 = new Properties();
      linkedList0.add(properties0);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Properties>) linkedList0);
      assertTrue(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SingletonIterator<PriorityQueue<StringTokenizer>> singletonIterator0 = new SingletonIterator<PriorityQueue<StringTokenizer>>((PriorityQueue<StringTokenizer>) null);
      PriorityQueue<StringTokenizer> priorityQueue0 = IteratorUtils.get((Iterator<PriorityQueue<StringTokenizer>>) singletonIterator0, 0);
      assertNull(priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLDataException sQLDataException0 = new SQLDataException("+u", "org.apache.commons.collections4.functors.AndPredicate", (-154), sQLWarning0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      sQLDataExceptionArray0[0] = sQLDataException0;
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLDataException>) objectArrayIterator0, (Object) sQLDataException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 1);
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      LoopingIterator<Boolean> loopingIterator0 = new LoopingIterator<Boolean>(priorityQueue0);
      iteratorArray0[0] = (Iterator<Boolean>) loopingIterator0;
      Iterator<Boolean> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Boolean>) comparator0, (Iterator<? extends Boolean>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 1);
      OrderedMapIterator<InstanceofPredicate, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ZippingIterator<InstanceofPredicate> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>) orderedMapIterator0, (Iterator<? extends InstanceofPredicate>) orderedMapIterator0, (Iterator<? extends InstanceofPredicate>) orderedMapIterator0);
      iteratorArray0[0] = (Iterator<InstanceofPredicate>) zippingIterator0;
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Estimated size must be greater than 0");
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      BoundedIterator<IIOMetadataNode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) singletonIterator0, 0L, 3169L);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) boundedIterator0, class0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Q<bm=R0:*;-LKsP", "Q<bm=R0:*;-LKsP");
      Transformer<SQLNonTransientException, SQLIntegrityConstraintViolationException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.objectGraphIterator(sQLIntegrityConstraintViolationException0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      BoundedIterator<SQLIntegrityConstraintViolationException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[7];
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[0];
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.arrayListIterator(stringTokenizerArray0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[4];
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("]");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("]", "]", 476, sQLSyntaxErrorException0);
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Boolean>) null, (Iterator<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<ClientInfoStatus>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonListIterator<InstanceofPredicate> singletonListIterator0 = new SingletonListIterator<InstanceofPredicate>(instanceofPredicate0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<InstanceofPredicate>) singletonListIterator0, (Transformer<? super InstanceofPredicate, String>) transformer0, "$!^", "wp(o|d", "wp(o|d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("c;oN+7+:");
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0, true);
      NotPredicate<SQLTransientConnectionException> notPredicate0 = new NotPredicate<SQLTransientConnectionException>((Predicate<? super SQLTransientConnectionException>) null);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTransientConnectionException>) singletonIterator0, (Predicate<? super SQLTransientConnectionException>) notPredicate0);
      Factory<String> factory0 = ConstantFactory.constantFactory("fLpR\u0003");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "fLpR\u0003", "fLpR\u0003", "I`Yw)]U3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NotPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[3];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("-S", "giHt-");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0, 0);
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 3);
      Transformer<SQLRecoverableException, String> transformer0 = InvokerTransformer.invokerTransformer("Map is empty", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) objectArrayListIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Map is empty' on 'class java.sql.SQLRecoverableException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      vector0.add(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, 3039);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(695, true, true, 695, 695);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, false);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) singletonIterator0, 695);
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(list0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends DataTruncation>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Transformer<Object, InstanceofPredicate>[] transformerArray0 = (Transformer<Object, InstanceofPredicate>[]) Array.newInstance(Transformer.class, 0);
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 2);
      InvokerTransformer<Object, InstanceofPredicate> invokerTransformer0 = new InvokerTransformer<Object, InstanceofPredicate>("", classArray0, predicateArray0);
      SwitchTransformer<Object, InstanceofPredicate> switchTransformer0 = new SwitchTransformer<Object, InstanceofPredicate>(predicateArray0, transformerArray0, invokerTransformer0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.objectGraphIterator(instanceofPredicate0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) switchTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) iterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("Iterable must not be null");
      priorityQueue0.add(stringTokenizer0);
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) priorityQueue0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLTimeoutException>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      SingletonIterator<ArrayList<Locale.FilteringMode>> singletonIterator0 = new SingletonIterator<ArrayList<Locale.FilteringMode>>(arrayList0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 3);
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>("NodeList must not be null", classArray0, classArray0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) invokerTransformer0);
      predicateArray0[2] = predicate0;
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<ArrayList<Locale.FilteringMode>>) singletonIterator0, (Predicate<? super ArrayList<Locale.FilteringMode>>) predicateArray0[2]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'NodeList must not be null' on 'class java.util.ArrayList' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0, 2);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(objectArray0[1]);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Object>) objectArrayListIterator0, (Predicate<? super Object>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.EqualPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 6);
      InvokerTransformer<ClientInfoStatus, ClientInfoStatus> invokerTransformer0 = new InvokerTransformer<ClientInfoStatus, ClientInfoStatus>("M99?%;Jn0m)\"\"S0YI", classArray0, classArray0);
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.objectGraphIterator(clientInfoStatus0, (Transformer<? super ClientInfoStatus, ? extends ClientInfoStatus>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'M99?%;Jn0m)\"\"S0YI' on 'class java.sql.ClientInfoStatus' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<PriorityQueue<StringTokenizer>>) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTimeoutException0);
      SQLWarning sQLWarning0 = new SQLWarning("Collection must not be null", "Collection must not be null", batchUpdateException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"&`", sQLWarning0);
      Class<StringTokenizer>[] classArray0 = (Class<StringTokenizer>[]) Array.newInstance(Class.class, 8);
      InvokerTransformer<SQLException, SQLTransientConnectionException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLTransientConnectionException>("vAHau;>m/66W9gxgH", classArray0, classArray0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.find(iterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'vAHau;>m/66W9gxgH' on 'class java.sql.SQLTransientConnectionException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Properties>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends InstanceofPredicate>) null, (Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransientConnectionException>) null, 802L, (-1671L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Integer[]) null, 3578, 3578);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, 0, (-664));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(objectArray0, 314, (-460));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLFeatureNotSupportedException[]) null, (-1325));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Stack<SQLSyntaxErrorException>[] stackArray0 = (Stack<SQLSyntaxErrorException>[]) Array.newInstance(Stack.class, 9);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stackArray0, (-470));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTimeoutException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) orderedMapIterator0, 128, 893);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1629);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLNonTransientException[]) null, 31, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[6];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, 0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLRecoverableException[]) null, 14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(instanceofPredicateArray0, (-1559));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((LinkedList<SQLFeatureNotSupportedException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 328, 328);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("8MV~8yU,1NtB'Ep", "gunb='*,4o0Z>D\"= \"8");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("aA;.nstDu,+W@", "", true);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[7];
      stringTokenizerArray0[0] = stringTokenizer0;
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.arrayListIterator(stringTokenizerArray0);
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = InvokerTransformer.invokerTransformer("aA;.nstDu,+W@");
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<StringTokenizer>) resettableListIterator0, (Closure<? super StringTokenizer>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'aA;.nstDu,+W@' on 'class java.util.StringTokenizer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("r");
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[4];
      StringTokenizer stringTokenizer0 = new StringTokenizer("rEstimated size must be greater than 0");
      stringTokenizerArray0[0] = stringTokenizer0;
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.arrayListIterator(stringTokenizerArray0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) constantTransformer0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(141, closure0);
      Closure<StringTokenizer> closure1 = WhileClosure.whileClosure((Predicate<? super StringTokenizer>) predicate0, (Closure<? super StringTokenizer>) forClosure0, true);
      // Undeclared exception!
      IteratorUtils.apply((Iterator<StringTokenizer>) resettableListIterator0, (Closure<? super StringTokenizer>) closure1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("]", false);
      Transformer<String, String> transformer0 = NOPTransformer.nopTransformer();
      String string0 = IteratorUtils.toString((Iterator<String>) singletonIterator0, (Transformer<? super String, String>) transformer0, "]", "C`b15Ly47mnpr6Hf`_", "Closure must not be null");
      assertEquals("C`b15Ly47mnpr6Hf`_]Closure must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("r");
      String string0 = IteratorUtils.toString((Iterator<InstanceofPredicate>) null, (Transformer<? super InstanceofPredicate, String>) constantTransformer0, "Estimated size must be greater than 0", "r", "Estimated size must be greater than 0");
      assertEquals("rEstimated size must be greater than 0", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<InstanceofPredicate>) null, (Transformer<? super InstanceofPredicate, String>) null, "79+xj/{-h", ")", "D80uJV");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) null, 1379);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(1450, true, false, 1450, (-1144), (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("fV;EQ$6F^|,<", "fV;EQ$6F^|,<", (int[]) null, dataTruncation0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fV;EQ$6F^|,<", "fV;EQ$6F^|,<", 1450, batchUpdateException0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer(", ", ", ");
      Factory<StringTokenizer> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<StringTokenizer, StringTokenizer> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends StringTokenizer>) factory0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) iterator0, 2482L, 2482L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("+Vo%jpu\"u 4b<cF?[O=", "+Vo%jpu\"u 4b<cF?[O=", 14, (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLIntegrityConstraintViolationException0);
      DataTruncation dataTruncation0 = new DataTruncation(1346, false, false, 1346, 14, sQLRecoverableException0);
      linkedList0.push(dataTruncation0);
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(linkedList0);
      String string0 = IteratorUtils.toString((Iterator<DataTruncation>) reverseListIterator0);
      assertFalse(reverseListIterator0.hasNext());
      assertEquals("[java.sql.DataTruncation: Data truncation]", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<InstanceofPredicate, String> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator");
      String string0 = IteratorUtils.toString((Iterator<InstanceofPredicate>) listIterator0, (Transformer<? super InstanceofPredicate, String>) transformer0, "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator");
      assertEquals("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIteratororg.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<InstanceofPredicate>) listIterator0, (Transformer<? super InstanceofPredicate, String>) transformer0, "", "bId/9!|V_-,a", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<InstanceofPredicate>) listIterator0, (Transformer<? super InstanceofPredicate, String>) transformer0, "", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ListIterator<InstanceofPredicate> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<InstanceofPredicate>) listIterator0, (Transformer<? super InstanceofPredicate, String>) transformer0, (String) null, (String) null, "List must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      SingletonIterator<PriorityQueue<StringTokenizer>> singletonIterator0 = new SingletonIterator<PriorityQueue<StringTokenizer>>(priorityQueue0);
      int int0 = IteratorUtils.size(singletonIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PriorityQueue<StringTokenizer>[] priorityQueueArray0 = (PriorityQueue<StringTokenizer>[]) Array.newInstance(PriorityQueue.class, 10);
      ResettableIterator<PriorityQueue<StringTokenizer>> resettableIterator0 = IteratorUtils.arrayIterator(priorityQueueArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<PriorityQueue<StringTokenizer>>) resettableIterator0, 1384);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1374
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      SingletonIterator<PriorityQueue<StringTokenizer>> singletonIterator0 = new SingletonIterator<PriorityQueue<StringTokenizer>>(priorityQueue0);
      PriorityQueue<StringTokenizer> priorityQueue1 = IteratorUtils.get((Iterator<PriorityQueue<StringTokenizer>>) singletonIterator0, 0);
      assertSame(priorityQueue0, priorityQueue1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("delimiter may not be null");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("delimiter may not be null");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      boolean boolean0 = IteratorUtils.isEmpty(nodeListIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.emptyIterator();
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, (-15), (-15));
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.singletonListIterator((SQLWarning) dataTruncation0);
      UniquePredicate<SQLWarning> uniquePredicate0 = new UniquePredicate<SQLWarning>();
      uniquePredicate0.evaluate(dataTruncation0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLWarning>) listIterator0, (Predicate<? super SQLWarning>) uniquePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-128), true, true, (-2), (-128));
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.singletonListIterator((SQLWarning) dataTruncation0);
      UniquePredicate<SQLWarning> uniquePredicate0 = new UniquePredicate<SQLWarning>();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLWarning>) listIterator0, (Predicate<? super SQLWarning>) uniquePredicate0);
      assertFalse(listIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) allPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object[] objectArray0 = new Object[15];
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0, 2);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Object>) objectArrayListIterator0, (Predicate<? super Object>) predicate0);
      assertEquals(0, objectArrayListIterator0.previousIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      SingletonIterator<ArrayList<Locale.FilteringMode>> singletonIterator0 = new SingletonIterator<ArrayList<Locale.FilteringMode>>(arrayList0);
      Transformer<Object, SQLDataException> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) singletonIterator0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(transformedPredicate0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(notPredicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<ArrayList<Locale.FilteringMode>>) singletonIterator0, (Predicate<? super ArrayList<Locale.FilteringMode>>) identityPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Gai8>(8%", "Gai8>(8%");
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>(sQLInvalidAuthorizationSpecException0);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) stack0);
      Object object0 = IteratorUtils.find((Iterator<Object>) singletonListIterator0, (Predicate<? super Object>) predicate0);
      assertSame(object0, sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "Iterable must not be null");
      priorityQueue0.add(stringTokenizer0);
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) priorityQueue0);
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      IteratorUtils.find((Iterator<StringTokenizer>) resettableIterator0, (Predicate<? super StringTokenizer>) instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      LinkedList<Integer> linkedList0 = IteratorUtils.find((Iterator<LinkedList<Integer>>) null, (Predicate<? super LinkedList<Integer>>) allPredicate0);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLClientInfoException>) objectArrayListIterator0, (Predicate<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) priorityQueue0);
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      StringTokenizer stringTokenizer0 = IteratorUtils.find((Iterator<StringTokenizer>) resettableIterator0, (Predicate<? super StringTokenizer>) instanceofPredicate0);
      assertNull(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[7];
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.arrayListIterator(stringTokenizerArray0);
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = InvokerTransformer.invokerTransformer("aA;.nstDu,+W@");
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<StringTokenizer>) resettableListIterator0, (Closure<? super StringTokenizer>) closure0);
      assertTrue(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[4];
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLTransactionRollbackException>) resettableListIterator0, (Closure<? super SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLRecoverableException>) null, (Closure<? super SQLRecoverableException>) closure0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("?vui,9q;7", "?vui,9q;7");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-2261), true, true, 15, 125, (Throwable) null);
      Iterator<?> iterator0 = IteratorUtils.getIterator(dataTruncation0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) resettableIterator0, (-356));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) resettableIterator0, (Class<SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ListIterator<SQLTimeoutException> listIterator0 = EmptyListIterator.emptyListIterator();
      Class<SQLException> class0 = SQLException.class;
      SQLException[] sQLExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLException>) listIterator0, class0);
      assertEquals(0, sQLExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) priorityQueue0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      ListIterator<SQLNonTransientException> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) listIterator0);
      assertTrue(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterable<SQLTransactionRollbackException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ListIterator<SQLTimeoutException> listIterator0 = EmptyListIterator.emptyListIterator();
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("i");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", sQLNonTransientConnectionException0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) null);
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) iterator0, 1378);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) null, (Collection<? super SQLTimeoutException>) list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MapIterator<SQLTimeoutException, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) mapIterator0);
      PriorityQueue<SQLTimeoutException> priorityQueue0 = new PriorityQueue<SQLTimeoutException>();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) priorityQueue0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) objectArrayListIterator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<ArrayList<ServiceLoader>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      arrayList0.add((DataTruncation) null);
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) resettableListIterator0, class0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ArrayDeque<BatchUpdateException> arrayDeque0 = new ArrayDeque<BatchUpdateException>();
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) arrayDeque0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      arrayDeque0.add(batchUpdateException0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends BatchUpdateException>) resettableIterator0, 1982);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ResettableIterator<PriorityQueue<StringTokenizer>> resettableIterator0 = IteratorUtils.emptyIterator();
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      ResettableListIterator<Closure<Object>> resettableListIterator0 = IteratorUtils.arrayListIterator(closureArray0, 0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) resettableIterator0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(nullIsFalsePredicate0);
      ListIterator<Closure<Object>> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Closure<Object>>) resettableListIterator0, (Predicate<? super Closure<Object>>) nullIsTruePredicate0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      OrderedIterator<Iterator<BatchUpdateException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Iterator<BatchUpdateException>>) orderedIterator0, (Predicate<? super Iterator<BatchUpdateException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Iterator<BatchUpdateException>>) null, (Predicate<? super Iterator<BatchUpdateException>>) uniquePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[7];
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      NonePredicate<SQLDataException> nonePredicate0 = new NonePredicate<SQLDataException>((Predicate<? super SQLDataException>[]) null);
      Iterator<SQLDataException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLDataException>) objectArrayIterator0, (Predicate<? super SQLDataException>) nonePredicate0);
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) iterator0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NonePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Transformer<? super DataTruncation, ? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<Object, SQLTransactionRollbackException> hashMap0 = new HashMap<Object, SQLTransactionRollbackException>();
      Transformer<Object, SQLTransactionRollbackException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLTransactionRollbackException>) hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) null, (Transformer<? super DataTruncation, ? extends SQLTransactionRollbackException>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      HashMap<Object, SQLTransactionRollbackException> hashMap0 = new HashMap<Object, SQLTransactionRollbackException>();
      Transformer<Object, SQLTransactionRollbackException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLTransactionRollbackException>) hashMap0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Transformer<? super DataTruncation, ? extends SQLTransactionRollbackException>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      Factory<SQLRecoverableException> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<SQLRecoverableException, SQLRecoverableException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLRecoverableException>) factory0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.emptyIterator();
      SkippingIterator<InstanceofPredicate> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<InstanceofPredicate>) resettableIterator0, 0L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientException>) null, (Transformer<? super SQLNonTransientException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Start index must not be less than zero");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("transformer may not be null", "transformer may not be null", 31, sQLIntegrityConstraintViolationException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientConnectionException0, 0, 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 0;
      Integer[] integerArray0 = new Integer[2];
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0, int0);
      Iterable<Integer> iterable0 = IteratorUtils.asIterable((Iterator<? extends Integer>) resettableIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      Iterator<?> iterator0 = IteratorUtils.getIterator(class0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, StringTokenizer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLSyntaxErrorException, StringTokenizer> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, StringTokenizer>) orderedMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<InstanceofPredicate>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super ClientInfoStatus>) null, (Iterator<? extends ClientInfoStatus>) null, (Iterator<? extends ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 0, 6);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[1];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, (-953), (-953));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Properties properties0 = new Properties();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      ArrayList<Properties> arrayList0 = new ArrayList<Properties>();
      LoopingListIterator<Properties> loopingListIterator0 = new LoopingListIterator<Properties>(arrayList0);
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>) loopingListIterator0, (Iterator<? extends Properties>) listIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      TreeSet<SQLDataException> treeSet0 = new TreeSet<SQLDataException>();
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>((SortedSet<? extends SQLDataException>) treeSet0);
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(priorityQueue0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<?>) loopingIterator0, (-332L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MapIterator<TreeSet<SQLException>, Object> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) arrayDeque0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 170, 3266);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      ResettableListIterator<Closure<Object>> resettableListIterator0 = IteratorUtils.arrayListIterator(closureArray0, 0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Closure<Object>>) resettableListIterator0, (Predicate<? super Closure<Object>>) predicateArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      OrderedMapIterator<BatchUpdateException, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      boolean boolean0 = IteratorUtils.contains((Iterator<BatchUpdateException>) orderedMapIterator0, (Object) iIOMetadataNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("@@j{", "");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLWarning0, 3255);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.singletonListIterator(instanceofPredicate0);
      ConstantTransformer<InstanceofPredicate, String> constantTransformer0 = new ConstantTransformer<InstanceofPredicate, String>("");
      IteratorUtils.toString((Iterator<InstanceofPredicate>) listIterator0, (Transformer<? super InstanceofPredicate, String>) constantTransformer0, "", "", "");
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 2155);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[4];
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0, 417);
      LoopingListIterator<SQLTransactionRollbackException> loopingListIterator0 = new LoopingListIterator<SQLTransactionRollbackException>(list0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) loopingListIterator0);
  }
}
