/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 21:00:55 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedHashSet<SQLClientInfoException> linkedHashSet0 = new LinkedHashSet<SQLClientInfoException>();
      ListIterator<LinkedHashSet<SQLClientInfoException>> listIterator0 = IteratorUtils.singletonListIterator(linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<LinkedHashSet<SQLClientInfoException>>) listIterator0, 832);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 831
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<Closure<Object>, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<Closure<Object>, SQLSyntaxErrorException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Closure<Object>, SQLSyntaxErrorException>(mapIterator0);
      Iterator<Closure<Object>> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Closure<Object>>) comparator0, (Iterator<? extends Closure<Object>>) abstractMapIteratorDecorator0, (Iterator<? extends Closure<Object>>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableIterator0);
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
      Iterator<Object> iterator1 = IteratorUtils.chainedIterator((Iterator<?>) resettableIterator0, (Iterator<?>) iterator0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      OrderedMapIterator<DataTruncation, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<Locale.FilteringMode, SQLNonTransientException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Locale.FilteringMode, SQLNonTransientException>) orderedMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, 603, hashtable0);
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      singletonListIterator0.next();
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) singletonListIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<DataTruncation> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<DataTruncation>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<InstanceofPredicate, Transformer<Object, String>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashMap0);
      String string0 = IteratorUtils.toString((Iterator<TreeSet<SQLSyntaxErrorException>>) null, (Transformer<? super TreeSet<SQLSyntaxErrorException>, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.emptyIterator();
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) resettableIterator0, 10);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, LinkedHashSet<SQLNonTransientConnectionException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLTransientConnectionException, LinkedHashSet<SQLNonTransientConnectionException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransientConnectionException, LinkedHashSet<SQLNonTransientConnectionException>>(orderedMapIterator0);
      List<SQLTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) abstractMapIteratorDecorator0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[9];
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0);
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      assertEquals(9, list0.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = new String[7];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0, 0);
      BoundedIterator<String> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends String>) resettableIterator0, 365L);
      Class<String> class0 = String.class;
      String[] stringArray1 = IteratorUtils.toArray((Iterator<? extends String>) boundedIterator0, class0);
      assertEquals(7, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Stack<SQLFeatureNotSupportedException>[] stackArray0 = (Stack<SQLFeatureNotSupportedException>[]) Array.newInstance(Stack.class, 8);
      ObjectArrayListIterator<Stack<SQLFeatureNotSupportedException>> objectArrayListIterator0 = new ObjectArrayListIterator<Stack<SQLFeatureNotSupportedException>>(stackArray0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) objectArrayListIterator0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[]", "[]");
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.singletonIterator((SQLException) sQLIntegrityConstraintViolationException0);
      SkippingIterator<SQLException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLException>) resettableIterator0, 0L);
      int int0 = IteratorUtils.size(skippingIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ArrayList<LinkedHashSet<SQLClientInfoException>> arrayList0 = new ArrayList<LinkedHashSet<SQLClientInfoException>>();
      LinkedHashSet<SQLClientInfoException> linkedHashSet0 = new LinkedHashSet<SQLClientInfoException>();
      arrayList0.add(linkedHashSet0);
      ResettableListIterator<LinkedHashSet<SQLClientInfoException>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<LinkedHashSet<SQLClientInfoException>>) arrayList0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedHashSet<SQLClientInfoException> linkedHashSet0 = new LinkedHashSet<SQLClientInfoException>();
      LinkedHashSet<SQLClientInfoException>[] linkedHashSetArray0 = (LinkedHashSet<SQLClientInfoException>[]) Array.newInstance(LinkedHashSet.class, 6);
      linkedHashSetArray0[1] = linkedHashSet0;
      ResettableIterator<LinkedHashSet<SQLClientInfoException>> resettableIterator0 = IteratorUtils.arrayIterator(linkedHashSetArray0);
      LinkedHashSet<SQLClientInfoException> linkedHashSet1 = IteratorUtils.get((Iterator<LinkedHashSet<SQLClientInfoException>>) resettableIterator0, 1);
      assertTrue(linkedHashSet1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("cmJ", "\"e\u0005T");
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.singletonIterator((SQLTransientException) sQLTransactionRollbackException0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(uniquePredicate0);
      SQLTransientException sQLTransientException0 = IteratorUtils.find((Iterator<SQLTransientException>) resettableIterator0, (Predicate<? super SQLTransientException>) nullIsExceptionPredicate0);
      assertSame(sQLTransactionRollbackException0, sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 1);
      OrderedMapIterator<SQLClientInfoException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLClientInfoException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLClientInfoException>(orderedMapIterator0);
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) abstractOrderedMapIteratorDecorator0;
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[6];
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0, 0);
      IteratorUtils.boundedIterator((Iterator<? extends String>) objectArrayIterator0, 667L, 0L);
      assertFalse(objectArrayIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[6];
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0, 0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[0];
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_FilteringModeArray0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashSet<Properties>[] hashSetArray0 = (HashSet<Properties>[]) Array.newInstance(HashSet.class, 9);
      ResettableIterator<HashSet<Properties>> resettableIterator0 = IteratorUtils.arrayIterator(hashSetArray0, 1, 1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      SQLDataException sQLDataException0 = new SQLDataException("Transformer must not be null");
      sQLDataExceptionArray0[0] = sQLDataException0;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      Transformer<SQLDataException, String> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) objectArrayListIterator0, (Transformer<? super SQLDataException, String>) transformer0, "suffix may not be null", "Enumeration must not be null", "Transformer must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLDataException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLSyntaxErrorException0);
      Transformer<SQLTransientException, SQLTransactionRollbackException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransactionRollbackException0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) iterator0, 128);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("MV", "");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLSyntaxErrorException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "4YRS `_P+Nmk%m}TD!", sQLTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransactionRollbackException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("MV", "4YRS `_P+Nmk%m}TD!", (-4366), sQLTimeoutException0);
      stack0.add(sQLFeatureNotSupportedException0);
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(stack0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) loopingListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(vector0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      vector0.add(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(loopingListIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Predicate<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(10, true, true, (-521), (-521));
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 1);
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[0] = predicate0;
      OnePredicate<DataTruncation> onePredicate0 = new OnePredicate<DataTruncation>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<DataTruncation>) singletonIterator0, (Predicate<? super DataTruncation>) onePredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<ServiceLoader<HashSet>>) null, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Iterable must not be null");
      Class<Properties> class0 = Properties.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 5);
      Transformer<Object, IIOMetadataNode> transformer0 = InvokerTransformer.invokerTransformer("Iterable must not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.find(iterator0, (Predicate<? super IIOMetadataNode>) instanceofPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Iterable must not be null' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientException0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>((Transformer<? super SQLException, ? extends SQLException>) null, predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLTransientException>) resettableIterator0, (Predicate<? super SQLTransientException>) transformedPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformedPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("%bB&Tu$M3HM");
      Transformer<Object, SQLException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<Object> iterator0 = IteratorUtils.objectGraphIterator((Object) sQLFeatureNotSupportedException0, (Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.contains(iterator0, (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Comparator<SQLTransientConnectionException> comparator0 = (Comparator<SQLTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((IIOMetadataNode[]) null, 1661, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 0, (-2306));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, (-1883), (-1883));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLNonTransientConnectionException[]) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(iteratorArray0, (-603));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((BatchUpdateException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("", "", 1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLWarning0, 1, 504);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[8];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTransientExceptionArray0, 0, (-1416));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((HashSet<Properties>[]) null, (-1766), 125);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLDataException[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Transformer<Boolean, Integer>[] transformerArray0 = (Transformer<Boolean, Integer>[]) Array.newInstance(Transformer.class, 7);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(transformerArray0, (-2120));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Stack<SQLFeatureNotSupportedException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int[] intArray0 = new int[3];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("cO:<Z4}", "cO:<Z4}", intArray0, (Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException0, (-97), 1441);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) stack0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransientException>[] iteratorArray0 = (Iterator<SQLTransientException>[]) Array.newInstance(Iterator.class, 1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 11);
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Enumeration<SQLTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) singletonListIterator0);
      Iterator<SQLTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0);
      iteratorArray0[0] = iterator0;
      Iterator<Object> iterator1 = IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>[]) iteratorArray0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 3);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(11, closureArray0[0]);
      closureArray0[1] = (Closure<Object>) forClosure0;
      // Undeclared exception!
      try { 
        IteratorUtils.apply(iterator1, (Closure<? super Object>) closureArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ForClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<InstanceofPredicate, Transformer<Object, String>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashMap0);
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      SingletonIterator<LinkedList<SQLNonTransientException>> singletonIterator0 = new SingletonIterator<LinkedList<SQLNonTransientException>>(linkedList0, false);
      String string0 = IteratorUtils.toString((Iterator<LinkedList<SQLNonTransientException>>) singletonIterator0, (Transformer<? super LinkedList<SQLNonTransientException>, String>) transformer0, "", "|WlK'E}vS9?`Z", "");
      assertEquals("|WlK'E}vS9?`Znull", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) uniquePredicate0);
      assertTrue(resettableListIterator0.hasPrevious());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Transformer<Object, String>>) null, 1908);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(4040, false, false, 123, 123);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) singletonIterator0, (-2006L), (-2006L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Hashtable<Vector<SQLTransientException>, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<Vector<SQLTransientException>, SQLInvalidAuthorizationSpecException>();
      EntrySetMapIterator<Vector<SQLTransientException>, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<Vector<SQLTransientException>, SQLInvalidAuthorizationSpecException>(hashtable0);
      Hashtable<InstanceofPredicate, Transformer<Object, String>> hashtable1 = new Hashtable<InstanceofPredicate, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashtable1);
      String string0 = IteratorUtils.toString((Iterator<Vector<SQLTransientException>>) entrySetMapIterator0, (Transformer<? super Vector<SQLTransientException>, String>) transformer0, "", "", ":Q67");
      assertEquals(":Q67", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Transformer<SQLDataException, String> transformer0 = ConstantTransformer.constantTransformer("");
      String string0 = IteratorUtils.toString((Iterator<SQLDataException>) null, (Transformer<? super SQLDataException, String>) transformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      Transformer<SQLDataException, String> transformer0 = InvokerTransformer.invokerTransformer("[]");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) objectArrayListIterator0, (Transformer<? super SQLDataException, String>) transformer0, "", (String) null, "~L{_6sdUpTEKG}7T(a");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<LinkedList<SQLNonTransientException>>) null, (Transformer<? super LinkedList<SQLNonTransientException>, String>) transformer0, (String) null, "[", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Hashtable<Vector<SQLTransientException>, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<Vector<SQLTransientException>, SQLInvalidAuthorizationSpecException>();
      EntrySetMapIterator<Vector<SQLTransientException>, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<Vector<SQLTransientException>, SQLInvalidAuthorizationSpecException>(hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Vector<SQLTransientException>>) entrySetMapIterator0, (Transformer<? super Vector<SQLTransientException>, String>) null, "", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer(4375);
      stack0.add(integer0);
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(stack0);
      // Undeclared exception!
      IteratorUtils.size(loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(stack0);
      int int0 = IteratorUtils.size(loopingIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedHashSet<SQLClientInfoException>[] linkedHashSetArray0 = (LinkedHashSet<SQLClientInfoException>[]) Array.newInstance(LinkedHashSet.class, 4);
      ResettableIterator<LinkedHashSet<SQLClientInfoException>> resettableIterator0 = IteratorUtils.arrayIterator(linkedHashSetArray0);
      LinkedHashSet<SQLClientInfoException> linkedHashSet0 = IteratorUtils.get((Iterator<LinkedHashSet<SQLClientInfoException>>) resettableIterator0, 1);
      assertNull(linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      linkedHashSet0.add(sQLFeatureNotSupportedException0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) linkedHashSet0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) linkedHashSet0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Stack<SQLFeatureNotSupportedException>[] stackArray0 = (Stack<SQLFeatureNotSupportedException>[]) Array.newInstance(Stack.class, 8);
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      stackArray0[0] = stack0;
      ObjectArrayListIterator<Stack<SQLFeatureNotSupportedException>> objectArrayListIterator0 = new ObjectArrayListIterator<Stack<SQLFeatureNotSupportedException>>(stackArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      predicateArray0[2] = predicate0;
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Stack<SQLFeatureNotSupportedException>>) objectArrayListIterator0, (Predicate<? super Stack<SQLFeatureNotSupportedException>>) predicateArray0[2]);
      assertEquals(2, objectArrayListIterator0.nextIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 7);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<LinkedList<Object>>) null, (Predicate<? super LinkedList<Object>>) transformerPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Predicate<Object>>) null, (Predicate<? super Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Stack<SQLFeatureNotSupportedException>[] stackArray0 = (Stack<SQLFeatureNotSupportedException>[]) Array.newInstance(Stack.class, 0);
      ResettableIterator<Stack<SQLFeatureNotSupportedException>> resettableIterator0 = IteratorUtils.arrayIterator(stackArray0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Stack<SQLFeatureNotSupportedException>>) resettableIterator0, (Predicate<? super Stack<SQLFeatureNotSupportedException>>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      DataTruncation dataTruncation0 = new DataTruncation(2024, false, false, (-2525), (-2525));
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(locale_FilteringMode0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<DataTruncation>) singletonIterator0, (Predicate<? super DataTruncation>) equalPredicate0);
      assertFalse(singletonIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("dS}7y");
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.constantTransformer(iIOMetadataNode0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      Properties properties0 = new Properties();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(properties0);
      IIOMetadataNode iIOMetadataNode1 = IteratorUtils.find(iterator0, (Predicate<? super IIOMetadataNode>) identityPredicate0);
      assertNull(iIOMetadataNode1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      MapIterator<SQLDataException, Locale.FilteringMode> mapIterator0 = IteratorUtils.emptyMapIterator();
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) mapIterator0, (Iterator<? extends SQLDataException>) mapIterator0, (Iterator<? extends SQLDataException>) mapIterator0);
      HashMap<Object, IIOMetadataNode> hashMap0 = new HashMap<Object, IIOMetadataNode>();
      Transformer<SQLException, IIOMetadataNode> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends IIOMetadataNode>) hashMap0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) zippingIterator0, (Transformer<? super SQLDataException, ? extends IIOMetadataNode>) transformer0);
      ListIteratorWrapper<IIOMetadataNode> listIteratorWrapper0 = new ListIteratorWrapper<IIOMetadataNode>(iterator0);
      IIOMetadataNode iIOMetadataNode0 = IteratorUtils.find((Iterator<IIOMetadataNode>) listIteratorWrapper0, (Predicate<? super IIOMetadataNode>) uniquePredicate0);
      assertNull(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IIOMetadataNode iIOMetadataNode0 = IteratorUtils.find((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) predicate0);
      assertNull(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.singletonIterator((SQLTransientException) null);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLTransientException>) resettableIterator0, (Predicate<? super SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Integer integer0 = new Integer(5);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      ConstantTransformer<Object, Properties> constantTransformer0 = new ConstantTransformer<Object, Properties>((Properties) null);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) constantTransformer0);
      IteratorUtils.apply((Iterator<Integer>) resettableIterator0, (Closure<? super Integer>) closure0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Closure<Object> closure0 = ForClosure.forClosure(125, (Closure<? super Object>) null);
      IteratorUtils.apply((Iterator<InstanceofPredicate>) null, (Closure<? super InstanceofPredicate>) closure0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<InstanceofPredicate>) resettableListIterator0, (Closure<? super InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale_FilteringMode0);
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 5);
      Transformer<Object, IIOMetadataNode> transformer0 = InvokerTransformer.invokerTransformer("6.z]AFpu2?kFM(Rv8Pw", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(123, transformerClosure0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Transformer<ArrayDeque, Transformer<Object, String>>>) iterator0, (Closure<? super Transformer<ArrayDeque, Transformer<Object, String>>>) forClosure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '6.z]AFpu2?kFM(Rv8Pw' on 'class java.util.Locale$FilteringMode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", false);
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 198);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLSyntaxErrorException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MapIterator<HashSet<Properties>, LinkedHashSet<SQLSyntaxErrorException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) singletonListIterator0, 10);
      assertTrue(list0.contains(properties0));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) resettableIterator0, (-35));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, (Class<SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLTransientException>(orderedMapIterator0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0, class0);
      assertEquals(0, sQLFeatureNotSupportedExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterable<SQLNonTransientConnectionException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Iterator<Boolean> iterator0 = EmptyIterator.emptyIterator();
      Iterable<Boolean> iterable0 = IteratorUtils.asIterable((Iterator<? extends Boolean>) iterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      OrderedMapIterator<DataTruncation, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) orderedMapIterator0);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      Iterator<DataTruncation> iterator0 = IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0, (Collection<? super DataTruncation>) linkedList0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) iterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) null, (Collection<? super DataTruncation>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Hashtable<SQLInvalidAuthorizationSpecException, SQLDataException> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, SQLDataException>();
      Enumeration<SQLDataException> enumeration0 = hashtable0.elements();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<PriorityQueue<SQLException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ArrayList<LinkedHashSet<SQLClientInfoException>> arrayList0 = new ArrayList<LinkedHashSet<SQLClientInfoException>>();
      ResettableListIterator<LinkedHashSet<SQLClientInfoException>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<LinkedHashSet<SQLClientInfoException>>) arrayList0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) resettableListIterator0, (Predicate<? super SQLNonTransientException>) uniquePredicate0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      NullIsExceptionPredicate<BatchUpdateException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<BatchUpdateException>(predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) nullIsExceptionPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) resettableListIterator0, (Predicate<? super SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) uniquePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      MapIterator<SQLNonTransientConnectionException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0, (Predicate<? super SQLNonTransientConnectionException>) uniquePredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      ObjectArrayIterator<SQLClientInfoException> objectArrayIterator0 = new ObjectArrayIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) objectArrayIterator0, (Transformer<? super SQLClientInfoException, ? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 1);
      InvokerTransformer<Object, BatchUpdateException> invokerTransformer0 = new InvokerTransformer<Object, BatchUpdateException>("", classArray0, classArray0);
      IfTransformer<Object, BatchUpdateException> ifTransformer0 = new IfTransformer<Object, BatchUpdateException>(predicate0, invokerTransformer0, invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) null, (Transformer<? super SQLClientInfoException, ? extends BatchUpdateException>) ifTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransientException>[] iteratorArray0 = (Iterator<SQLTransientException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Vector<SQLTransactionRollbackException>>) null, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = new int[5];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("R4", (String) null, 4, intArray0);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) singletonListIterator0, (Iterator<? extends BatchUpdateException>) singletonListIterator0, (Iterator<? extends BatchUpdateException>) singletonListIterator0);
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 6);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("_aA1Hn5^`l\">f&v1!", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) zippingIterator0, (Transformer<? super BatchUpdateException, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '_aA1Hn5^`l\">f&v1!' on 'class java.sql.BatchUpdateException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-647), (-647));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Iterator<ClientInfoStatus>[] iteratorArray0 = (Iterator<ClientInfoStatus>[]) Array.newInstance(Iterator.class, 5);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends ClientInfoStatus>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Locale.FilteringMode, BatchUpdateException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<ArrayList<SQLTransientConnectionException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LinkedHashSet<SQLClientInfoException>[] linkedHashSetArray0 = (LinkedHashSet<SQLClientInfoException>[]) Array.newInstance(LinkedHashSet.class, 10);
      ResettableListIterator<LinkedHashSet<SQLClientInfoException>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedHashSetArray0, 1, 1);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((HashSet<Properties>[]) null, 125, 2104);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      SingletonListIterator<HashSet<Properties>> singletonListIterator0 = new SingletonListIterator<HashSet<Properties>>(hashSet0);
      String string0 = IteratorUtils.toString((Iterator<HashSet<Properties>>) singletonListIterator0);
      assertTrue(singletonListIterator0.hasPrevious());
      assertEquals("[[]]", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransientException>) null, 770L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 7);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "[]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "", 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<DataTruncation> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) orderedIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1417, 1240);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[4];
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, 4);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("org.apache.commons.collections4.iterators.EmptyIterator", (String) null);
      Iterator<Object> iterator0 = IteratorUtils.objectGraphIterator((Object) sQLWarning0, (Transformer<? super Object, ?>) null);
      boolean boolean0 = IteratorUtils.contains(iterator0, (Object) sQLWarning0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SQLException sQLException0 = new SQLException("", (String) null, (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "Di-!", sQLException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLRecoverableException0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 11);
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Enumeration<SQLTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) singletonListIterator0);
      Iterator<SQLTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0);
      Iterator<SQLTransientException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLTransientException>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) resettableListIterator0);
      assertTrue(listIterator0.hasNext());
  }
}
