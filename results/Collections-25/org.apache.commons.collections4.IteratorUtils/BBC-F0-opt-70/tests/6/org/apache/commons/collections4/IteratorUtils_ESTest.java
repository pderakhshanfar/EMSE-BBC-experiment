/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 21:04:29 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.net.URI;
import java.net.URISyntaxException;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = new Object();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) uniquePredicate0;
      objectArray0[1] = object0;
      objectArray0[2] = object1;
      objectArray0[3] = object1;
      objectArray0[4] = object0;
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) resettableListIterator0, (Equator<Object>) defaultEquator0);
      IteratorUtils.find((Iterator<Object>) resettableListIterator0, (Predicate<? super Object>) predicate0);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[1];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      ObjectArrayListIterator<Locale.FilteringMode> objectArrayListIterator0 = new ObjectArrayListIterator<Locale.FilteringMode>(locale_FilteringModeArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) objectArrayListIterator0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      MapIterator<SQLWarning, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLWarning, BatchUpdateException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ForClosure<SQLException> forClosure0 = new ForClosure<SQLException>(409, closure0);
      IteratorUtils.apply((Iterator<SQLWarning>) mapIterator1, (Closure<? super SQLWarning>) forClosure0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      UniquePredicate<Properties> uniquePredicate0 = new UniquePredicate<Properties>();
      IteratorUtils.isEmpty(iterator0);
      Object[] objectArray0 = new Object[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.arrayListIterator(objectArray0);
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      IteratorUtils.loopingIterator((Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        NotPredicate.notPredicate((Predicate<? super Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NotPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      IteratorUtils.isEmpty(iterator0);
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      UniquePredicate<Properties> uniquePredicate0 = new UniquePredicate<Properties>();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ForClosure<SQLException> forClosure0 = new ForClosure<SQLException>(61, closure0);
      IteratorUtils.apply((Iterator<SQLWarning>) null, (Closure<? super SQLWarning>) closure0);
      String string0 = ";8";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(";8");
      String string1 = "org.apache.commons.collections4.IteratorUtils";
      String string2 = "";
      String string3 = "";
      try { 
        MockURI.URI(";8", ";8", ";8", 61, "org.apache.commons.collections4.IteratorUtils", "", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ;8://;8@;8:61org.apache.commons.collections4.IteratorUtils?#
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<Properties> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Properties>) orderedIterator0);
      IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>) iterator0, (Iterator<?>) iterator0);
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      IteratorUtils.singletonIterator((LinkedList<ArrayDeque>) linkedList0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) orderedIterator0, comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IteratorUtils.matchesAll((Iterator<SQLException>) null, (Predicate<? super SQLException>) predicate0);
      SQLException sQLException0 = new SQLException("maxSize parameter must not be negative.", "", (-2875));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("maxSize parameter must not be negative.", "3u=22uD}_nn", (-2875), sQLException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0, (-2875), (-2875));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(">0W|Qk7b");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLFeatureNotSupportedException0);
      MapIterator<SQLWarning, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLWarning, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLWarning, BatchUpdateException>(mapIterator0);
      ExceptionClosure.exceptionClosure();
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>(treeSet0);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) nullIsExceptionPredicate0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) sQLFeatureNotSupportedException0;
      objectArray0[1] = null;
      objectArray0[2] = (Object) ">0W|Qk7b";
      objectArray0[3] = (Object) nullIsExceptionPredicate0;
      objectArray0[4] = null;
      Object object0 = new Object();
      objectArray0[5] = object0;
      IteratorUtils.arrayIterator(objectArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) null, 822L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Stack<EnumSet<Locale.FilteringMode>> stack0 = new Stack<EnumSet<Locale.FilteringMode>>();
      ListIterator<EnumSet<Locale.FilteringMode>> listIterator0 = stack0.listIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<EnumSet<Locale.FilteringMode>>) listIterator0, (Predicate<? super EnumSet<Locale.FilteringMode>>) uniquePredicate0);
      LinkedList<SQLTransientException> linkedList0 = new LinkedList<SQLTransientException>();
      IteratorUtils.emptyIterator();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedList0;
      objectArray0[1] = (Object) uniquePredicate0;
      objectArray0[2] = (Object) stack0;
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0);
      Object object0 = IteratorUtils.find((Iterator<Object>) resettableListIterator0, (Predicate<? super Object>) uniquePredicate0);
      objectArray0[3] = object0;
      IteratorUtils.arrayIterator(objectArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Class<StringTokenizer> class0 = StringTokenizer.class;
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[4];
      StringTokenizer stringTokenizer0 = new StringTokenizer("C[Ncj`pm^n`c");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("C[Ncj`pm^n`c");
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("C[Ncj`pm^n`c", "#'mB}dZ4STiI7>/", true);
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("");
      stringTokenizerArray0[3] = stringTokenizer3;
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.arrayIterator(stringTokenizerArray0);
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) resettableIterator0, (Iterator<? extends StringTokenizer>) resettableIterator0);
      List<StringTokenizer> list0 = IteratorUtils.toList((Iterator<? extends StringTokenizer>) zippingIterator0, 1);
      LoopingListIterator<StringTokenizer> loopingListIterator0 = new LoopingListIterator<StringTokenizer>(list0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends StringTokenizer>) loopingListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, sQLNonTransientConnectionException0);
      OrderedMapIterator<SQLRecoverableException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) orderedMapIterator0, (Predicate<? super SQLRecoverableException>) uniquePredicate0);
      int int0 = (-307);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-307));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(">0W|Qk7b");
      MapIterator<String, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      Class<StringTokenizer> class0 = StringTokenizer.class;
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "LE~d/2?93UMc68", true);
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0, true);
      IteratorUtils.toArray((Iterator<? extends StringTokenizer>) singletonIterator0, class0);
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Stack<EnumSet<Locale.FilteringMode>> stack0 = new Stack<EnumSet<Locale.FilteringMode>>();
      ListIterator<EnumSet<Locale.FilteringMode>> listIterator0 = stack0.listIterator();
      UniquePredicate.uniquePredicate();
      IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.FilteringMode>>) listIterator0);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      EnumSet<Locale.FilteringMode> enumSet1 = EnumSet.copyOf(enumSet0);
      stack0.add(enumSet1);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) listIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = ">0W|Qk7]b";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">0W|Qk7]b");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(">0W|Qk7]b");
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) orderedIterator0);
      IteratorUtils.size(orderedIterator0);
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 6);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[0] = iterator0;
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator1 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[1] = (Iterator<SQLIntegrityConstraintViolationException>) orderedIterator1;
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("prefix may not be null");
      sQLDataException0.spliterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) orderedIterator0);
      IteratorUtils.size(orderedIterator0);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0, (Transformer<? super SQLTransactionRollbackException, ? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(">0W|Qk7b");
      DataTruncation dataTruncation0 = new DataTruncation((-1), false, false, (-1), (-6));
      Integer integer0 = new Integer(91);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      IteratorUtils.toList((Iterator<? extends Integer>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("b0W|Qkb");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLFeatureNotSupportedException0);
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends StringTokenizer>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H");
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0);
      NotNullPredicate.notNullPredicate();
      IteratorUtils.isEmpty(resettableIterator0);
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<Predicate<Object>>) null, (Transformer<? super Predicate<Object>, String>) transformer0);
      OrderedIterator<SQLDataException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) orderedIterator0, 0L);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<BatchUpdateException, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends BatchUpdateException, ? extends SQLRecoverableException>) mapIterator0);
      MapIterator<String, SQLTimeoutException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLDataException>) loopingListIterator0, (Predicate<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(stack0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLDataException>) loopingListIterator0, (Predicate<? super SQLDataException>) uniquePredicate0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      ResettableIterator<StringTokenizer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<StringTokenizer> class0 = StringTokenizer.class;
      IteratorUtils.toArray((Iterator<? extends StringTokenizer>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":)qHJ&\"/ZLR(");
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      ResettableIterator<ServiceLoader<Object>> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.isEmpty(resettableIterator0);
      Vector<Properties> vector0 = new Vector<Properties>();
      IteratorUtils.loopingListIterator((List<Properties>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends String>) null, (-1L), (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttribute("4");
      iIOMetadataNode0.isSupported("4", "Xo&)qM=$4mfNA1-oDB");
      vector0.add(iIOMetadataNode0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("must call next() or previous() before a call to set()");
      vector0.add(iIOMetadataNode1);
      IteratorUtils.singletonIterator((Vector<PriorityQueue>) vector0);
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 14;
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = 1395;
      intArray0[5] = 1073741824;
      intArray0[6] = 10;
      intArray0[7] = (-3065);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("cB~{/;4%k,", intArray0);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) batchUpdateException0, (Equator<SQLException>) defaultEquator0);
      IteratorUtils.find((Iterator<SQLException>) resettableListIterator0, (Predicate<? super SQLException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionException0.printStackTrace();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[", sQLNonTransientConnectionException0);
      OrderedMapIterator<SQLRecoverableException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) orderedMapIterator0, (Predicate<? super SQLRecoverableException>) uniquePredicate0);
      MapIterator<SQLWarning, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLWarning, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLWarning, BatchUpdateException>(mapIterator0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ForClosure<SQLException> forClosure0 = new ForClosure<SQLException>(1709, closure0);
      IteratorUtils.apply((Iterator<SQLWarning>) abstractMapIteratorDecorator0, (Closure<? super SQLWarning>) forClosure0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(stack0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLDataException>) loopingListIterator0, (Predicate<? super SQLDataException>) uniquePredicate0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("18T$Af^fX4Nnf^", "18T$Af^fX4Nnf^", 410, sQLNonTransientConnectionException0);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) resettableIterator0, (Predicate<? super SQLTransientConnectionException>) uniquePredicate0);
      ListIterator<LinkedHashSet<BatchUpdateException>> listIterator1 = EmptyListIterator.emptyListIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("18T$Af^fX4Nnf^");
      IteratorUtils.toString((Iterator<LinkedHashSet<BatchUpdateException>>) listIterator1, (Transformer<? super LinkedHashSet<BatchUpdateException>, String>) transformer0, "18T$Af^fX4Nnf^", "18T$Af^fX4Nnf^", "");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H");
      IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      MapIterator<String, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      MapIterator<Integer, IIOMetadataNode> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) orderedIterator0, (Iterator<? extends Integer>) mapIterator1);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) orderedIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) priorityQueue0);
      IteratorUtils.isEmpty(resettableIterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H");
      IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("H");
      SQLWarning sQLWarning0 = new SQLWarning("", "NF,dm}", (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", sQLWarning0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLRecoverableException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", sQLNonTransientConnectionException0);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(sQLIntegrityConstraintViolationException0);
      IteratorUtils.toString((Iterator<Object>) singletonIterator0, (Transformer<? super Object, String>) constantTransformer0, "Entry does not exist: ", "", "");
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLDataException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(">0W|Qk7b");
      MapIterator<String, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<String, SQLTimeoutException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.emptyOrderedIterator();
      NotNullPredicate.notNullPredicate();
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toList((Iterator<? extends Properties>) orderedIterator0, 427);
      IteratorUtils.isEmpty(mapIterator1);
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLRecoverableException>) arrayList0);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLNonTransientConnectionException0);
      IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) resettableListIterator0, (Predicate<? super SQLRecoverableException>) identityPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) null, (Predicate<? super DataTruncation>) identityPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T9nJW^yi\"}_E7]t");
      ListIterator<SQLTimeoutException> listIterator0 = EmptyListIterator.emptyListIterator();
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) listIterator0);
      TreeSet<SQLException> treeSet0 = new TreeSet<SQLException>();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) treeSet0);
      Enumeration<SQLTimeoutException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration1);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate<SQLException> comparatorPredicate0 = new ComparatorPredicate<SQLException>(sQLNonTransientConnectionException0, comparator0, comparatorPredicate_Criterion0);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLNonTransientConnectionException0);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) identityPredicate0);
      ListIterator<SQLFeatureNotSupportedException> listIterator1 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLFeatureNotSupportedException>) listIterator1, (Predicate<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(">0W|Qk7b");
      MapIterator<String, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<Integer, IIOMetadataNode> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      MapIterator<Integer, IIOMetadataNode> mapIterator2 = IteratorUtils.unmodifiableMapIterator(mapIterator1);
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<Integer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) mapIterator2, (Iterator<? extends Integer>) orderedIterator0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) iterator0);
      Iterator<Integer> iterator1 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) priorityQueue0);
      IteratorUtils.isEmpty(iterator1);
      OrderedMapIterator<Integer, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLDataException sQLDataException0 = new SQLDataException("prefix may not be null");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "InstantiateFactory: Constructor must be public", sQLDataException0);
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      int[] intArray0 = new int[17];
      intArray0[0] = (-1121);
      intArray0[1] = (-1121);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException((String) null, "prefix may not be null", intArray0, sQLNonTransientConnectionException0);
      DataTruncation dataTruncation0 = new DataTruncation((-1121), true, true, 220, (-511));
      Transformer<SQLNonTransientException, DataTruncation> transformer0 = ConstantTransformer.constantTransformer(dataTruncation0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Transformer<? super SQLSyntaxErrorException, ? extends SQLWarning>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(stack0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLDataException>) loopingListIterator0, (Predicate<? super SQLDataException>) uniquePredicate0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      DataTruncation dataTruncation0 = new DataTruncation(475, false, true, 2046, 475);
      Transformer<SQLNonTransientException, DataTruncation> transformer0 = ConstantTransformer.constantTransformer(dataTruncation0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Transformer<? super SQLSyntaxErrorException, ? extends SQLWarning>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyListIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "yYkHl[L58_]CUEcOhQA");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLIntegrityConstraintViolationException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.emptyIterator();
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Stack<EnumSet<Locale.FilteringMode>> stack0 = new Stack<EnumSet<Locale.FilteringMode>>();
      ListIterator<EnumSet<Locale.FilteringMode>> listIterator0 = stack0.listIterator();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode1, locale_FilteringMode0);
      SingletonIterator<EnumSet<Locale.FilteringMode>> singletonIterator0 = new SingletonIterator<EnumSet<Locale.FilteringMode>>(enumSet0);
      IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.FilteringMode>>) listIterator0);
      SingletonListIterator<EnumSet<Locale.FilteringMode>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.FilteringMode>>(enumSet0);
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) singletonIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) singletonListIterator0);
      IteratorUtils.matchesAll((Iterator<EnumSet<Locale.FilteringMode>>) listIterator0, (Predicate<? super EnumSet<Locale.FilteringMode>>) predicate0);
      Properties properties0 = new Properties();
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 9);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      classArray0[2] = class2;
      Class<SQLClientInfoException> class3 = SQLClientInfoException.class;
      classArray0[3] = class3;
      Class<SQLClientInfoException> class4 = SQLClientInfoException.class;
      classArray0[4] = class4;
      Class<SQLClientInfoException> class5 = SQLClientInfoException.class;
      classArray0[5] = class5;
      Class<SQLClientInfoException> class6 = SQLClientInfoException.class;
      classArray0[6] = class6;
      Class<SQLClientInfoException> class7 = SQLClientInfoException.class;
      classArray0[7] = class7;
      Class<SQLClientInfoException> class8 = SQLClientInfoException.class;
      classArray0[8] = class8;
      InvokerTransformer<Object, Properties> invokerTransformer0 = new InvokerTransformer<Object, Properties>("", classArray0, classArray0);
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) iterator0, 427);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.util.Properties' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      int int0 = (-3856);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((LinkedList<SQLSyntaxErrorException>[]) null, 12, (-3856));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H");
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate<SQLException> comparatorPredicate0 = new ComparatorPredicate<SQLException>((SQLException) null, comparator0, comparatorPredicate_Criterion0);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) comparatorPredicate0);
      EmptyListIterator.emptyListIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("H");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "NH.bwmvb:d;", (-983), (Throwable) null);
      ConstantTransformer.constantTransformer(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) null, (Transformer<? super Object, String>) constantTransformer0, "NF,dm}", "NH.bwmvb:d;", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyListIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "yYkHl[L58_]CUEcOhQA");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLIntegrityConstraintViolationException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      DataTruncation dataTruncation0 = new DataTruncation(10, true, true, (-1), 3);
      Transformer<SQLNonTransientException, DataTruncation> transformer0 = ConstantTransformer.constantTransformer(dataTruncation0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLSyntaxErrorException>) listIterator0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLWarning>) transformer0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "g");
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) uniquePredicate0);
      EmptyListIterator.emptyListIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>((String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) null, (Transformer<? super Object, String>) constantTransformer0, ", ", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Stack<EnumSet<Locale.FilteringMode>> stack0 = new Stack<EnumSet<Locale.FilteringMode>>();
      ListIterator<EnumSet<Locale.FilteringMode>> listIterator0 = stack0.listIterator();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode1, locale_FilteringMode0);
      SingletonIterator<EnumSet<Locale.FilteringMode>> singletonIterator0 = new SingletonIterator<EnumSet<Locale.FilteringMode>>(enumSet0);
      IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.FilteringMode>>) listIterator0);
      SingletonListIterator<EnumSet<Locale.FilteringMode>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.FilteringMode>>(enumSet0);
      ZippingIterator<EnumSet<Locale.FilteringMode>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) singletonIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) singletonListIterator0);
      IteratorUtils.matchesAll((Iterator<EnumSet<Locale.FilteringMode>>) listIterator0, (Predicate<? super EnumSet<Locale.FilteringMode>>) predicate0);
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-4131));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      IteratorUtils.arrayListIterator(integerArray0);
      IteratorUtils.toArray((Iterator<?>) zippingIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) locale_FilteringMode0, (-4131), (int) integerArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Properties[] propertiesArray0 = new Properties[1];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      ResettableIterator<Properties> resettableIterator1 = IteratorUtils.arrayIterator(propertiesArray0);
      int int0 = 394;
      IteratorUtils.toList((Iterator<? extends Properties>) resettableIterator1, int0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      IteratorUtils.loopingListIterator((List<SQLRecoverableException>) arrayList0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLClientInfoException0);
      ReverseListIterator<SQLRecoverableException> reverseListIterator0 = new ReverseListIterator<SQLRecoverableException>(arrayList0);
      IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) reverseListIterator0, (Predicate<? super SQLRecoverableException>) identityPredicate0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLDataException sQLDataException0 = new SQLDataException("prefix may not be null");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "InstantiateFactory: Constructor must be public", sQLDataException0);
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.noneOf(class0);
      EnumSet<Locale.FilteringMode> enumSet1 = EnumSet.copyOf(enumSet0);
      SingletonIterator<EnumSet<Locale.FilteringMode>> singletonIterator0 = new SingletonIterator<EnumSet<Locale.FilteringMode>>(enumSet1);
      IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.FilteringMode>>) singletonIterator0);
      SingletonListIterator<EnumSet<Locale.FilteringMode>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.FilteringMode>>(enumSet0);
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) singletonIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      predicateArray0[0] = predicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) nonePredicate0;
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) predicate0);
      predicateArray0[2] = predicate1;
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, Boolean> factoryTransformer0 = new FactoryTransformer<Object, Boolean>(factory0);
      Predicate<Object> predicate2 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) factoryTransformer0);
      predicateArray0[3] = predicate2;
      Predicate<Object> predicate3 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<EnumSet<Locale.FilteringMode>>) singletonIterator0, (Predicate<? super EnumSet<Locale.FilteringMode>>) predicate3);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H");
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<SQLException> comparatorPredicate0 = new ComparatorPredicate<SQLException>((SQLException) null, comparator0, comparatorPredicate_Criterion0);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) comparatorPredicate0);
      EmptyListIterator.emptyListIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("NF,dm}");
      IteratorUtils.toString((Iterator<Object>) null, (Transformer<? super Object, String>) constantTransformer0, "H", "H", "H");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("UkmHG:#");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Stack<EnumSet<Locale.FilteringMode>> stack0 = new Stack<EnumSet<Locale.FilteringMode>>();
      ListIterator<EnumSet<Locale.FilteringMode>> listIterator0 = stack0.listIterator();
      UniquePredicate.uniquePredicate();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode1, locale_FilteringMode0);
      SingletonIterator<EnumSet<Locale.FilteringMode>> singletonIterator0 = new SingletonIterator<EnumSet<Locale.FilteringMode>>(enumSet0);
      IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.FilteringMode>>) listIterator0);
      SingletonListIterator<EnumSet<Locale.FilteringMode>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.FilteringMode>>(enumSet0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      IteratorUtils.toString((Iterator<Object>) null, (Transformer<? super Object, String>) constantTransformer0, "fR=}~Fb", "", "");
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLDataException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<BatchUpdateException, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<BatchUpdateException, SQLRecoverableException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends BatchUpdateException, ? extends SQLRecoverableException>) mapIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) mapIterator1, (Iterator<? extends BatchUpdateException>) mapIterator0);
      IteratorUtils.size(iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "g");
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(stack0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLDataException>) loopingListIterator0, (Predicate<? super SQLDataException>) uniquePredicate0);
      SQLDataException sQLDataException0 = new SQLDataException("Load factor must be greater than 0", sQLNonTransientConnectionException0);
      loopingListIterator0.add(sQLDataException0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLDataException>) loopingListIterator0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      Properties properties8 = new Properties();
      propertiesArray0[8] = properties8;
      IteratorUtils.arrayListIterator(propertiesArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Stack<EnumSet<Locale.FilteringMode>> stack0 = new Stack<EnumSet<Locale.FilteringMode>>();
      ListIterator<EnumSet<Locale.FilteringMode>> listIterator0 = stack0.listIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<EnumSet<Locale.FilteringMode>>) listIterator0, (Predicate<? super EnumSet<Locale.FilteringMode>>) uniquePredicate0);
      LinkedList<SQLTransientException> linkedList0 = new LinkedList<SQLTransientException>();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) null, (Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("2A'", sQLInvalidAuthorizationSpecExceptionArray0[0]);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException1;
      Stack<EnumSet<Locale.FilteringMode>> stack0 = new Stack<EnumSet<Locale.FilteringMode>>();
      Vector<EnumSet<Locale.FilteringMode>> vector0 = new Vector<EnumSet<Locale.FilteringMode>>();
      Stack<EnumSet<Locale.FilteringMode>> stack1 = new Stack<EnumSet<Locale.FilteringMode>>();
      ListIterator<EnumSet<Locale.FilteringMode>> listIterator0 = stack1.listIterator();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0);
      SingletonIterator<EnumSet<Locale.FilteringMode>> singletonIterator0 = new SingletonIterator<EnumSet<Locale.FilteringMode>>(enumSet0);
      Enumeration<EnumSet<Locale.FilteringMode>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.FilteringMode>>) singletonIterator0);
      stack1.add(enumSet0);
      Iterator<EnumSet<Locale.FilteringMode>> iterator0 = IteratorUtils.asIterator((Enumeration<? extends EnumSet<Locale.FilteringMode>>) enumeration0);
      ZippingIterator<EnumSet<Locale.FilteringMode>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) listIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<EnumSet<Locale.FilteringMode>>) zippingIterator0, (Predicate<? super EnumSet<Locale.FilteringMode>>) predicate0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLDataException sQLDataException0 = new SQLDataException("prefix may not be null");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "InstantiateFactory: Constructor must be public", sQLDataException0);
      Object object0 = new Object();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode1, locale_FilteringMode0);
      SingletonIterator<EnumSet<Locale.FilteringMode>> singletonIterator0 = new SingletonIterator<EnumSet<Locale.FilteringMode>>(enumSet0);
      IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.FilteringMode>>) singletonIterator0);
      SingletonListIterator<EnumSet<Locale.FilteringMode>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.FilteringMode>>(enumSet0);
      ListIterator<EnumSet<Locale.FilteringMode>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<EnumSet<Locale.FilteringMode>>) singletonListIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) listIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) singletonIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) onePredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(onePredicate0, allPredicate0);
      predicateArray0[1] = (Predicate<Object>) orPredicate0;
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<EnumSet<Locale.FilteringMode>>) listIterator0, (Predicate<? super EnumSet<Locale.FilteringMode>>) predicate0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(">0W|Qk7b");
      MapIterator<String, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.emptyIterator();
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) null);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(">0W|Qk7b");
      MapIterator<String, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<BatchUpdateException, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<BatchUpdateException, SQLRecoverableException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends BatchUpdateException, ? extends SQLRecoverableException>) mapIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) mapIterator1, (Iterator<? extends BatchUpdateException>) mapIterator0);
      IteratorUtils.size(iterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.functors.ConstantTransformer");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      MapIterator<String, SQLTimeoutException> mapIterator2 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator2);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) null);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Transformer<Object, SQLTransientConnectionException>[] transformerArray0 = (Transformer<Object, SQLTransientConnectionException>[]) Array.newInstance(Transformer.class, 1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Enumeration must not be null");
      ObjectArrayIterator<Transformer<Object, SQLTransientConnectionException>> objectArrayIterator0 = new ObjectArrayIterator<Transformer<Object, SQLTransientConnectionException>>(transformerArray0, 0, 0);
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(stack0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLDataException>) loopingListIterator0);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      Iterator<SQLTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<BatchUpdateException, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<BatchUpdateException, SQLRecoverableException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends BatchUpdateException, ? extends SQLRecoverableException>) mapIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) mapIterator1, (Iterator<? extends BatchUpdateException>) mapIterator0);
      IteratorUtils.size(iterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("C");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("C", "Closure collection must not be null");
      sQLInvalidAuthorizationSpecException0.setNextException(sQLFeatureNotSupportedException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLFeatureNotSupportedException0);
      ArrayDeque<Integer>[] arrayDequeArray0 = (ArrayDeque<Integer>[]) Array.newInstance(ArrayDeque.class, 1);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      arrayDequeArray0[0] = arrayDeque0;
      IteratorUtils.arrayIterator(arrayDequeArray0);
      MapIterator<TreeSet<IIOMetadataNode>, HashSet<SQLWarning>> mapIterator2 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<TreeSet<IIOMetadataNode>, HashSet<SQLWarning>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<TreeSet<IIOMetadataNode>, HashSet<SQLWarning>>(mapIterator2);
      IteratorUtils.unmodifiableMapIterator(mapIterator2);
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      NotNullPredicate.notNullPredicate();
      IteratorUtils.toList((Iterator<? extends Properties>) orderedIterator0, 427);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 2);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      InvokerTransformer<Object, SQLTransientConnectionException> invokerTransformer0 = new InvokerTransformer<Object, SQLTransientConnectionException>("", classArray0, arrayDequeArray0);
      SingletonIterator<Transformer<Object, SQLTransientConnectionException>> singletonIterator0 = new SingletonIterator<Transformer<Object, SQLTransientConnectionException>>(invokerTransformer0, true);
      SkippingIterator<Transformer<Object, SQLTransientConnectionException>> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Transformer<Object, SQLTransientConnectionException>>) singletonIterator0, (long) 0);
      IteratorUtils.asIterable((Iterator<? extends Transformer<Object, SQLTransientConnectionException>>) skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      IteratorUtils.loopingListIterator((List<HashSet<HashMap>>) stack0);
      IteratorUtils.emptyListIterator();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "");
      SQLException sQLException0 = new SQLException("iterator", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLException0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      ArrayDeque<Integer>[] arrayDequeArray0 = (ArrayDeque<Integer>[]) Array.newInstance(ArrayDeque.class, 8);
      arrayDequeArray0[0] = arrayDeque0;
      arrayDequeArray0[1] = arrayDeque0;
      arrayDequeArray0[2] = arrayDeque0;
      arrayDequeArray0[3] = arrayDeque0;
      arrayDequeArray0[4] = arrayDeque0;
      arrayDequeArray0[5] = arrayDeque0;
      arrayDequeArray0[6] = arrayDeque0;
      arrayDequeArray0[7] = arrayDeque0;
      IteratorUtils.arrayIterator(arrayDequeArray0);
      MapIterator<TreeSet<IIOMetadataNode>, HashSet<SQLWarning>> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<TreeSet<IIOMetadataNode>, HashSet<SQLWarning>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<TreeSet<IIOMetadataNode>, HashSet<SQLWarning>>(mapIterator0);
      OrderedMapIterator<TreeSet<IIOMetadataNode>, HashSet<SQLWarning>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<TreeSet<IIOMetadataNode>, HashSet<SQLWarning>>) orderedMapIterator0);
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      NotNullPredicate.notNullPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) orderedIterator0, (-4062));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(stack0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("C");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("C", "C");
      sQLInvalidAuthorizationSpecException0.setNextException(sQLFeatureNotSupportedException1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      ArrayDeque<Integer>[] arrayDequeArray0 = (ArrayDeque<Integer>[]) Array.newInstance(ArrayDeque.class, 1);
      arrayDequeArray0[0] = arrayDeque0;
      IteratorUtils.arrayIterator(arrayDequeArray0);
      MapIterator<TreeSet<IIOMetadataNode>, HashSet<SQLWarning>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      NotNullPredicate.notNullPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) orderedIterator0, (-3856));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(stack0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("C");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("C", "C");
      sQLInvalidAuthorizationSpecException0.setNextException(sQLFeatureNotSupportedException1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      ArrayDeque<Integer>[] arrayDequeArray0 = (ArrayDeque<Integer>[]) Array.newInstance(ArrayDeque.class, 1);
      arrayDequeArray0[0] = arrayDeque0;
      IteratorUtils.arrayIterator(arrayDequeArray0);
      MapIterator<TreeSet<IIOMetadataNode>, HashSet<SQLWarning>> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<TreeSet<IIOMetadataNode>, HashSet<SQLWarning>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      NotNullPredicate.notNullPredicate();
      IteratorUtils.toList((Iterator<? extends Properties>) orderedIterator0, 444);
      IteratorUtils.isEmpty(mapIterator1);
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      IteratorUtils.loopingListIterator((List<SQLRecoverableException>) arrayList0);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLInvalidAuthorizationSpecException0);
      MapIterator<SQLNonTransientException, SQLTimeoutException> mapIterator2 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLNonTransientException, SQLTimeoutException> mapIterator3 = IteratorUtils.unmodifiableMapIterator(mapIterator2);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLNonTransientException>) mapIterator3, 444);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 444
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(stack0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("C");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("C", "C");
      sQLInvalidAuthorizationSpecException0.setNextException(sQLFeatureNotSupportedException1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      ArrayDeque<Integer>[] arrayDequeArray0 = (ArrayDeque<Integer>[]) Array.newInstance(ArrayDeque.class, 1);
      arrayDequeArray0[0] = arrayDeque0;
      ResettableIterator<ArrayDeque<Integer>> resettableIterator0 = IteratorUtils.arrayIterator(arrayDequeArray0);
      MapIterator<TreeSet<IIOMetadataNode>, HashSet<SQLWarning>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      NotNullPredicate.notNullPredicate();
      IteratorUtils.toList((Iterator<? extends Properties>) orderedIterator0, 427);
      IteratorUtils.isEmpty(resettableIterator0);
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLRecoverableException>) arrayList0);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) resettableListIterator0, (Predicate<? super SQLRecoverableException>) identityPredicate0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<BatchUpdateException, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<BatchUpdateException, SQLRecoverableException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends BatchUpdateException, ? extends SQLRecoverableException>) mapIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) mapIterator1, (Iterator<? extends BatchUpdateException>) mapIterator0);
      IteratorUtils.size(iterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("C");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("C", "Closure collection must not be null");
      sQLInvalidAuthorizationSpecException0.setNextException(sQLFeatureNotSupportedException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLFeatureNotSupportedException0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayDeque<Integer>[] arrayDequeArray0 = (ArrayDeque<Integer>[]) Array.newInstance(ArrayDeque.class, 1);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      arrayDequeArray0[0] = arrayDeque0;
      IteratorUtils.arrayIterator(arrayDequeArray0);
      MapIterator<TreeSet<IIOMetadataNode>, HashSet<SQLWarning>> mapIterator2 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<TreeSet<IIOMetadataNode>, HashSet<SQLWarning>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<TreeSet<IIOMetadataNode>, HashSet<SQLWarning>>(mapIterator2);
      IteratorUtils.unmodifiableMapIterator(mapIterator2);
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Predicate<Properties> predicate0 = NotNullPredicate.notNullPredicate();
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) orderedIterator0, 427);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      IteratorUtils.filteredIterator((Iterator<? extends Properties>) resettableListIterator0, (Predicate<? super Properties>) predicate0);
      IteratorUtils.size(resettableListIterator0);
      IteratorUtils.isEmpty(mapIterator2);
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      ResettableListIterator<SQLRecoverableException> resettableListIterator1 = IteratorUtils.loopingListIterator((List<SQLRecoverableException>) arrayList0);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>((SQLException) null);
      IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) resettableListIterator1, (Predicate<? super SQLRecoverableException>) identityPredicate0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Transformer<Object, SQLTransientConnectionException>[] transformerArray0 = (Transformer<Object, SQLTransientConnectionException>[]) Array.newInstance(Transformer.class, 1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "g");
      MapIterator<Locale.FilteringMode, HashSet<StringTokenizer>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) mapIterator0, 0L);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("transformer may not be null", "transformer may not be null", (-1));
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Enumeration must not be null");
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) resettableIterator0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0);
      IteratorUtils.emptyOrderedIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedList<SQLTransientException> linkedList0 = new LinkedList<SQLTransientException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("$3ceJ,f:B'.gKy", "Enumeration must not be null");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.loopingListIterator((List<SQLTransientException>) linkedList0);
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      // Undeclared exception!
      try { 
        EnumSet.copyOf((Collection<Locale.FilteringMode>) hashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Collection is empty
         //
         verifyException("java.util.EnumSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      MapIterator<String, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<String, SQLTimeoutException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.toList((Iterator<? extends String>) mapIterator1);
      IteratorUtils.singletonIterator((Object) mapIterator1);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((ArrayDeque<Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H");
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0);
      LinkedList<SQLTransientException> linkedList0 = new LinkedList<SQLTransientException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("H", "H");
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "g");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("g", sQLTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLFeatureNotSupportedException0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[3];
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException0;
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<SQLNonTransientException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLNonTransientException>>) vector0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0);
      ArrayIterator<SQLClientInfoException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLClientInfoException>(sQLInvalidAuthorizationSpecException0, 0, 1947);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(">0W|Qk7b");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLFeatureNotSupportedException0);
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      MapIterator<SQLWarning, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLWarning, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLWarning, BatchUpdateException>(mapIterator0);
      LinkedList<SQLTransientException> linkedList0 = new LinkedList<SQLTransientException>();
      IteratorUtils.toArray((Iterator<?>) singletonListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) null, 91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<BatchUpdateException, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<BatchUpdateException, SQLRecoverableException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends BatchUpdateException, ? extends SQLRecoverableException>) mapIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) mapIterator1, (Iterator<? extends BatchUpdateException>) mapIterator0);
      IteratorUtils.size(iterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "Closure collection must not be null");
      sQLInvalidAuthorizationSpecException1.setNextException(sQLFeatureNotSupportedException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException(sQLFeatureNotSupportedException0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[2];
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException1;
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException2;
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) zippingIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.getIterator(iterator0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      OrderedIterator<SQLWarning> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.getIterator(orderedIterator0);
      OrderedIterator<Integer> orderedIterator1 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) orderedIterator1);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ArrayDeque<Integer>[] arrayDequeArray0 = (ArrayDeque<Integer>[]) Array.newInstance(ArrayDeque.class, 5);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<Integer> arrayDeque1 = new ArrayDeque<Integer>();
      arrayDequeArray0[1] = arrayDeque1;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      Integer integer0 = new Integer((byte)2);
      arrayDeque1.add(integer0);
      byteArray0[2] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      arrayDeque0.spliterator();
      ArrayDeque<Integer> arrayDeque2 = new ArrayDeque<Integer>((-1105));
      arrayDequeArray0[2] = arrayDeque2;
      arrayDeque0.add(integer0);
      ArrayDeque<Integer> arrayDeque3 = new ArrayDeque<Integer>();
      arrayDequeArray0[3] = arrayDeque3;
      Integer integer1 = new Integer((-1));
      arrayDeque3.push(integer1);
      ArrayDeque<Integer> arrayDeque4 = new ArrayDeque<Integer>();
      arrayDequeArray0[4] = arrayDeque4;
      IteratorUtils.arrayIterator(arrayDequeArray0);
      MapIterator<TreeSet<IIOMetadataNode>, HashSet<SQLWarning>> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<TreeSet<IIOMetadataNode>, HashSet<SQLWarning>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<TreeSet<IIOMetadataNode>, HashSet<SQLWarning>>(mapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<TreeSet<IIOMetadataNode>, HashSet<SQLWarning>>) abstractMapIteratorDecorator0);
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Predicate<Properties> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends Properties>) orderedIterator0, (Predicate<? super Properties>) predicate0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      IteratorUtils.get((Iterator<Hashtable<TreeSet, TreeSet>>) iterator0, 0);
      LinkedList<SQLTransientException> linkedList0 = new LinkedList<SQLTransientException>();
      IteratorUtils.toArray(iterator0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLDataException sQLDataException0 = new SQLDataException("prefix may not be null");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "InstantiateFactory: Constructor must be public", sQLDataException0);
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1121);
      intArray0[1] = (-1121);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException((String) null, "prefix may not be null", intArray0, sQLNonTransientConnectionException0);
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(batchUpdateException1);
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Hashtable<TreeSet, TreeSet>>) iterator0, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyListIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "yYkHl[L58_]CUEcOhQA");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLIntegrityConstraintViolationException0);
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      int int0 = 410;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Hashtable<TreeSet, TreeSet>>) singletonListIterator0, 410);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 409
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("");
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      ExceptionPredicate.exceptionPredicate();
      Comparator<SQLException> comparator1 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<SQLException> comparatorPredicate0 = new ComparatorPredicate<SQLException>(sQLFeatureNotSupportedException1, comparator1, comparatorPredicate_Criterion0);
      Predicate<SQLException> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) comparatorPredicate0);
      IteratorUtils.matchesAny((Iterator<SQLFeatureNotSupportedException>) objectArrayIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      Iterator<SQLTimeoutException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H");
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0);
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(stack0);
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) reverseListIterator0);
      int int0 = (-755);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Hashtable<TreeSet, TreeSet>>) listIterator0, (-755));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -755
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<?>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      Vector<EnumSet<Locale.FilteringMode>> vector0 = new Vector<EnumSet<Locale.FilteringMode>>();
      Stack<EnumSet<Locale.FilteringMode>> stack0 = new Stack<EnumSet<Locale.FilteringMode>>();
      ListIterator<EnumSet<Locale.FilteringMode>> listIterator0 = stack0.listIterator();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0);
      SingletonIterator<EnumSet<Locale.FilteringMode>> singletonIterator0 = new SingletonIterator<EnumSet<Locale.FilteringMode>>(enumSet0);
      Enumeration<EnumSet<Locale.FilteringMode>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.FilteringMode>>) listIterator0);
      IteratorUtils.asIterator((Enumeration<? extends EnumSet<Locale.FilteringMode>>) enumeration0);
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) singletonIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) singletonIterator0);
      IteratorUtils.matchesAll((Iterator<EnumSet<Locale.FilteringMode>>) listIterator0, (Predicate<? super EnumSet<Locale.FilteringMode>>) predicate0);
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      IteratorUtils.singletonListIterator((Object) null);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Boolean>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Transformer<Object, SQLTransientConnectionException>[] transformerArray0 = (Transformer<Object, SQLTransientConnectionException>[]) Array.newInstance(Transformer.class, 1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "g");
      int int0 = 0;
      ObjectArrayIterator<Transformer<Object, SQLTransientConnectionException>> objectArrayIterator0 = new ObjectArrayIterator<Transformer<Object, SQLTransientConnectionException>>(transformerArray0, 0, 0);
      IteratorUtils.asIterable((Iterator<? extends Transformer<Object, SQLTransientConnectionException>>) objectArrayIterator0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 6);
      int int1 = 1361;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 10, 1361);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLDataException sQLDataException0 = new SQLDataException("Collection must not be null");
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Comparator must not be null.", "IN%", sQLDataException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate<SQLException> comparatorPredicate0 = new ComparatorPredicate<SQLException>(sQLTransactionRollbackException0, comparator0, comparatorPredicate_Criterion0);
      OrderedMapIterator<Integer, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Integer, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, Integer>(orderedMapIterator0);
      MapIterator<String, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<String, SQLTimeoutException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.toList((Iterator<? extends String>) mapIterator1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) null, (Collection<? super Integer>) priorityQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Transformer<Object, SQLTransientConnectionException>[] transformerArray0 = (Transformer<Object, SQLTransientConnectionException>[]) Array.newInstance(Transformer.class, 1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "g");
      ObjectArrayIterator<Transformer<Object, SQLTransientConnectionException>> objectArrayIterator0 = new ObjectArrayIterator<Transformer<Object, SQLTransientConnectionException>>(transformerArray0, 0, 0);
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) null, (Collection<? super Integer>) priorityQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      MapIterator<String, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<String, SQLTimeoutException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.toList((Iterator<? extends String>) mapIterator1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Class<DataTruncation>>) comparator0, (Iterator<? extends Class<DataTruncation>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("");
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException1;
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      ExceptionPredicate.exceptionPredicate();
      SQLException sQLException0 = null;
      Comparator<SQLException> comparator1 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any(java.sql.SQLException.class) , any(java.sql.SQLException.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<SQLException> comparatorPredicate0 = new ComparatorPredicate<SQLException>((SQLException) null, comparator1, comparatorPredicate_Criterion0);
      Predicate<SQLException> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) comparatorPredicate0);
      IteratorUtils.matchesAny((Iterator<SQLFeatureNotSupportedException>) objectArrayIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      Iterator<SQLTimeoutException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0);
      MapIterator<String, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<String, SQLTimeoutException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.toList((Iterator<? extends String>) mapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLDataException sQLDataException0 = new SQLDataException("prefix may not be null");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "InstantiateFactory: Constructor must be public", sQLDataException0);
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1121);
      intArray0[1] = (-1121);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException((String) null, "prefix may not be null", intArray0, sQLNonTransientConnectionException0);
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(batchUpdateException1);
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray0);
      batchUpdateException3.getUpdateCounts();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Predicate must not be null", "prefix may not be null", sQLDataException0);
      batchUpdateException3.getSuppressed();
      ArrayIterator<SQLInvalidAuthorizationSpecException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLInvalidAuthorizationSpecException>(batchUpdateException3, (-1886));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("p", "", sQLNonTransientConnectionException0);
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator("");
      int[] intArray0 = new int[9];
      intArray0[0] = (-1121);
      intArray0[1] = (-1121);
      intArray0[2] = (-1121);
      intArray0[3] = 475;
      intArray0[4] = (-1121);
      intArray0[5] = (-1121);
      intArray0[6] = (-1121);
      intArray0[7] = (-1121);
      intArray0[8] = 1522;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("r>e Sf8gL>zc", "org.apache.commons.collections4.IterableUtils$5$1", intArray0, batchUpdateException0);
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(batchUpdateException0);
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Hashtable<TreeSet, TreeSet>>) iterator0, 409);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 408
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("InstantiateTransformer: Constructor threw an exception");
      SQLTransientException sQLTransientException0 = new SQLTransientException("k1nftQ)*S", "0|", 0);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLTransientException0);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLTransientException0);
      UniquePredicate.uniquePredicate();
      OrderedIterator<Predicate<Integer>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Predicate<Integer>>) orderedIterator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H");
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.emptyMapIterator();
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) linkedList0);
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLNonTransientConnectionException, ? extends Iterator<SQLInvalidAuthorizationSpecException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.emptyMapIterator();
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 1);
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) linkedList0);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) resettableIterator0;
      IteratorUtils.chainedIterator((Iterator<?>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OrderedIterator<StringTokenizer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) orderedIterator0);
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      IteratorUtils.loopingListIterator((List<HashSet<HashMap>>) stack0);
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      SQLDataException sQLDataException0 = new SQLDataException("");
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<SQLException> comparatorPredicate0 = new ComparatorPredicate<SQLException>(sQLDataException0, comparator0, comparatorPredicate_Criterion0);
      OrderedMapIterator<Integer, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Integer, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, Integer>(orderedMapIterator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode1);
      SingletonIterator<EnumSet<Locale.FilteringMode>> singletonIterator0 = new SingletonIterator<EnumSet<Locale.FilteringMode>>(enumSet0);
      Enumeration<EnumSet<Locale.FilteringMode>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.FilteringMode>>) singletonIterator0);
      Iterator<EnumSet<Locale.FilteringMode>> iterator0 = IteratorUtils.asIterator((Enumeration<? extends EnumSet<Locale.FilteringMode>>) enumeration0);
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) iterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) singletonIterator0);
      SingletonIterator<EnumSet<Locale.FilteringMode>> singletonIterator1 = new SingletonIterator<EnumSet<Locale.FilteringMode>>(enumSet0, false);
      IteratorUtils.matchesAll((Iterator<EnumSet<Locale.FilteringMode>>) singletonIterator1, (Predicate<? super EnumSet<Locale.FilteringMode>>) predicate0);
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Predicate<BatchUpdateException>[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode1);
      SingletonIterator<EnumSet<Locale.FilteringMode>> singletonIterator0 = new SingletonIterator<EnumSet<Locale.FilteringMode>>(enumSet0);
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet1 = EnumSet.of(locale_FilteringMode2, locale_FilteringMode2);
      SingletonListIterator<EnumSet<Locale.FilteringMode>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.FilteringMode>>(enumSet1);
      ZippingIterator<EnumSet<Locale.FilteringMode>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) singletonIterator0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLNonTransientConnectionException0, defaultEquator0);
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) equalPredicate0);
      IteratorUtils.matchesAll((Iterator<EnumSet<Locale.FilteringMode>>) zippingIterator0, (Predicate<? super EnumSet<Locale.FilteringMode>>) predicate0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("5TgCQj@X3:_z#L^Z", hashtable0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("IBYM5o7", map0, sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLClientInfoException1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      MapIterator<String, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<String, SQLTimeoutException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.toList((Iterator<? extends String>) mapIterator1);
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator((Object) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) resettableIterator0, (Transformer<? super Object, String>) null, "", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Transformer<Object, SQLTransientConnectionException>[] transformerArray0 = (Transformer<Object, SQLTransientConnectionException>[]) Array.newInstance(Transformer.class, 1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.getSuppressed();
      Transformer<Object, SQLTransientConnectionException> transformer0 = ConstantTransformer.constantTransformer(sQLTransientConnectionException0);
      transformerArray0[0] = transformer0;
      ObjectArrayIterator<Transformer<Object, SQLTransientConnectionException>> objectArrayIterator0 = new ObjectArrayIterator<Transformer<Object, SQLTransientConnectionException>>(transformerArray0, 0, 0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      IteratorUtils.asIterable((Iterator<? extends Transformer<Object, SQLTransientConnectionException>>) objectArrayIterator0);
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      IteratorUtils.singletonIterator(sQLDataException0);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      SingletonIterator<TreeSet<String>> singletonIterator0 = new SingletonIterator<TreeSet<String>>(treeSet0, false);
      IteratorUtils.zippingIterator((Iterator<? extends TreeSet<String>>) singletonIterator0, (Iterator<? extends TreeSet<String>>) singletonIterator0);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", (String) null, sQLDataException0);
      IteratorUtils.getIterator(sQLNonTransientConnectionException0);
      int[] intArray0 = new int[1];
      int int0 = (-1121);
      intArray0[0] = (-1121);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1121), (-1121));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 0;
      ChainedTransformer<StringTokenizer> chainedTransformer0 = new ChainedTransformer<StringTokenizer>((Transformer<? super StringTokenizer, ? extends StringTokenizer>[]) null);
      StringTokenizer stringTokenizer0 = new StringTokenizer("transformer may not be null", "L2A'");
      Iterator<StringTokenizer> iterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("2A'", sQLInvalidAuthorizationSpecExceptionArray0[0]);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("2A'", "2A'");
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException2;
      Stack<EnumSet<Locale.FilteringMode>> stack0 = new Stack<EnumSet<Locale.FilteringMode>>();
      Vector<EnumSet<Locale.FilteringMode>> vector0 = new Vector<EnumSet<Locale.FilteringMode>>();
      Stack<EnumSet<Locale.FilteringMode>> stack1 = new Stack<EnumSet<Locale.FilteringMode>>();
      ListIterator<EnumSet<Locale.FilteringMode>> listIterator0 = stack1.listIterator();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0);
      SingletonIterator<EnumSet<Locale.FilteringMode>> singletonIterator0 = new SingletonIterator<EnumSet<Locale.FilteringMode>>(enumSet0);
      Enumeration<EnumSet<Locale.FilteringMode>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.FilteringMode>>) singletonIterator0);
      Iterator<EnumSet<Locale.FilteringMode>> iterator0 = IteratorUtils.asIterator((Enumeration<? extends EnumSet<Locale.FilteringMode>>) enumeration0);
      ZippingIterator<EnumSet<Locale.FilteringMode>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) listIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) iterator0);
      IteratorUtils.matchesAll((Iterator<EnumSet<Locale.FilteringMode>>) zippingIterator0, (Predicate<? super EnumSet<Locale.FilteringMode>>) predicate0);
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Predicate<BatchUpdateException>[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<BatchUpdateException, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<BatchUpdateException, SQLRecoverableException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends BatchUpdateException, ? extends SQLRecoverableException>) mapIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) mapIterator1, (Iterator<? extends BatchUpdateException>) mapIterator0);
      IteratorUtils.size(iterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "Closure collection must not be null");
      sQLInvalidAuthorizationSpecException1.setNextException(sQLFeatureNotSupportedException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException(sQLFeatureNotSupportedException0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[2];
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException1;
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException2;
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 1599);
      dataTruncation0.getNextWarning();
      IteratorUtils.singletonListIterator((SQLWarning) dataTruncation0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("m(G:lv", "m(G:lv", 0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[0];
      IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<BatchUpdateException, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends BatchUpdateException, ? extends SQLRecoverableException>) mapIterator0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      MapIterator<String, SQLTimeoutException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      MapIterator<String, SQLTimeoutException> mapIterator2 = IteratorUtils.unmodifiableMapIterator(mapIterator1);
      IteratorUtils.toList((Iterator<? extends String>) mapIterator2);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("L2A'", "L2A'", 0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecException0.setNextException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("", "L2A'");
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      sQLInvalidAuthorizationSpecException2.setNextException(sQLInvalidAuthorizationSpecException3);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException1);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 0);
      dataTruncation0.getNextWarning();
      IteratorUtils.singletonListIterator((SQLWarning) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 1857);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[3];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, 10, (-3941));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-85);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((HashSet<SQLIntegrityConstraintViolationException>[]) null, 1128);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      MapIterator<String, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<String, SQLTimeoutException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.toList((Iterator<? extends String>) mapIterator1);
      IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[6];
      MockThrowable mockThrowable0 = new MockThrowable("");
      SQLDataException sQLDataException0 = new SQLDataException("eWpYT(d]cdp5Tf!N", "pHiTOB;(", 1, mockThrowable0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("0|", "0|", sQLDataException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("pHiTOB;(", "0|");
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("pHiTOB;(", "", (-1764));
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException(sQLDataException0);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("eWpYT(d]cdp5Tf!N", "Start index must not be greater than the array length", 0, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.map.AbstractLinkedMap$KeySetIterator", "org.apache.commons.collections4.map.AbstractLinkedMap$KeySetIterator", 1);
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, 1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", (String) null, sQLDataException0);
      IteratorUtils.getIterator(sQLNonTransientConnectionException0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1121);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("}8w7J:", (String) null, intArray0, batchUpdateException0);
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(sQLNonTransientConnectionException0);
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray0);
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("Y=nOnAJdq,K?D", "", (-1121), intArray0, batchUpdateException2);
      Stack<EnumSet<Locale.FilteringMode>> stack0 = new Stack<EnumSet<Locale.FilteringMode>>();
      Vector<EnumSet<Locale.FilteringMode>> vector0 = new Vector<EnumSet<Locale.FilteringMode>>();
      IteratorUtils.loopingListIterator((List<EnumSet<Locale.FilteringMode>>) vector0);
      Stack<EnumSet<Locale.FilteringMode>> stack1 = new Stack<EnumSet<Locale.FilteringMode>>();
      stack1.listIterator();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0);
      SingletonIterator<EnumSet<Locale.FilteringMode>> singletonIterator0 = new SingletonIterator<EnumSet<Locale.FilteringMode>>(enumSet0);
      IteratorUtils.matchesAll((Iterator<EnumSet<Locale.FilteringMode>>) singletonIterator0, (Predicate<? super EnumSet<Locale.FilteringMode>>) predicate0);
      Predicate<Integer> predicate1 = new UniquePredicate<Integer>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Predicate<BatchUpdateException>[]) null, (-1121));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("L2A'", "L2A'", 0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecException0.setNextException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      Comparator<SQLInvalidAuthorizationSpecException> comparator0 = (Comparator<SQLInvalidAuthorizationSpecException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 2);
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) orderedIterator0;
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, PriorityQueue<SQLFeatureNotSupportedException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, PriorityQueue<SQLFeatureNotSupportedException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, PriorityQueue<SQLFeatureNotSupportedException>>(orderedMapIterator0);
      iteratorArray0[1] = (Iterator<SQLInvalidAuthorizationSpecException>) abstractOrderedMapIteratorDecorator0;
      IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(vector0);
      Vector<SQLInvalidAuthorizationSpecException> vector1 = new Vector<SQLInvalidAuthorizationSpecException>();
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator1 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(vector1);
      TreeSet<SQLInvalidAuthorizationSpecException> treeSet0 = new TreeSet<SQLInvalidAuthorizationSpecException>();
      treeSet0.descendingIterator();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator1, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("L2A'", "L2A'", 0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecException0.setNextException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("Transformer must not be null", "");
      sQLInvalidAuthorizationSpecException1.setNextException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException3.getLocalizedMessage();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      IteratorUtils.contains((Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Object) "L2A'");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getParentNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "=+4vT/xiA4&u+a", false);
      String string0 = "e";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "e", 0);
      String string1 = "";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      sQLInvalidAuthorizationSpecException0.setNextException(sQLFeatureNotSupportedException0);
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException(";ri", "");
      sQLInvalidAuthorizationSpecException1.setNextException(sQLInvalidAuthorizationSpecException3);
      sQLInvalidAuthorizationSpecException1.getLocalizedMessage();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[7];
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException2;
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException1;
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException1;
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException3;
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      Predicate<Object> predicate0 = null;
      PredicateTransformer<Integer> predicateTransformer0 = new PredicateTransformer<Integer>((Predicate<? super Integer>) null);
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        predicateTransformer0.transform(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.PredicateTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("0|", sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      int int0 = 0;
      String string0 = "\") in this Map";
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("\") in this Map", "y]F>jdgy9Z+h", 0, intArray0, sQLInvalidAuthorizationSpecException2);
      Stack<EnumSet<Locale.FilteringMode>> stack0 = new Stack<EnumSet<Locale.FilteringMode>>();
      ResettableListIterator<EnumSet<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<EnumSet<Locale.FilteringMode>>) stack0);
      Stack<EnumSet<Locale.FilteringMode>> stack1 = new Stack<EnumSet<Locale.FilteringMode>>();
      stack1.listIterator();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAll((Iterator<EnumSet<Locale.FilteringMode>>) resettableListIterator0, (Predicate<? super EnumSet<Locale.FilteringMode>>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Predicate<Integer>>) null, (-704));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -704
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("0|", sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("", "", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      int int0 = 0;
      IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      ServiceLoader<SQLFeatureNotSupportedException> serviceLoader0 = ServiceLoader.load(class0);
      IteratorUtils.singletonIterator((ServiceLoader<LinkedList>) serviceLoader0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 2136);
      ArrayIterator<SQLInvalidAuthorizationSpecException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLInvalidAuthorizationSpecException>(sQLIntegrityConstraintViolationException0, 2136);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("L2A'", "L2A'", 0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecException0.setNextException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("", "L2A'");
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      sQLInvalidAuthorizationSpecException2.setNextException(sQLInvalidAuthorizationSpecException3);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0, 3, 2198);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("L2A'", "L2A'", 0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecException0.setNextException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("", "L2A'");
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      sQLInvalidAuthorizationSpecException2.setNextException(sQLInvalidAuthorizationSpecException3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0);
      IteratorUtils.contains(iterator0, (Object) sQLInvalidAuthorizationSpecException3);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getParentNode();
      IteratorUtils.arrayIterator((Object[]) sQLInvalidAuthorizationSpecExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      IteratorUtils.loopingListIterator((List<SQLDataException>) stack0);
      SQLDataException sQLDataException0 = new SQLDataException("");
      IteratorUtils.getIterator(sQLDataException0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[8];
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", "rY3Ey^@<((c", intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(batchUpdateException0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("Kp_K2zT*\"YF/", "org.apache.commons.collections4.map.Flat3Map$KeySet", 0, intArray0, batchUpdateException1);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      Stack<EnumSet<Locale.FilteringMode>> stack1 = new Stack<EnumSet<Locale.FilteringMode>>();
      ResettableListIterator<EnumSet<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<EnumSet<Locale.FilteringMode>>) stack1);
      Stack<EnumSet<Locale.FilteringMode>> stack2 = new Stack<EnumSet<Locale.FilteringMode>>();
      stack2.listIterator();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAll((Iterator<EnumSet<Locale.FilteringMode>>) resettableListIterator0, (Predicate<? super EnumSet<Locale.FilteringMode>>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Predicate<Integer>>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLNonTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", "", (-3163), sQLTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("z&SD", "@e12N$j/", (-3163), (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("jgCeR]ma%+", "");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", sQLTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("jgCeR]ma%+");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("sL[okHAiN", "@e12N$j/", sQLNonTransientConnectionException0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[9];
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException2;
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException2;
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException5;
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException2;
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[7] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[8] = sQLInvalidAuthorizationSpecException5;
      IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MapIterator<BatchUpdateException, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) mapIterator0, (-44L), 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) null, (Iterator<? extends SQLDataException>[]) iteratorArray0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientException>) iterator0);
      int int0 = 3339;
      Integer integer0 = new Integer(3339);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[5];
      int[] intArray0 = new int[7];
      intArray0[0] = 10;
      intArray0[1] = (-409);
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = (-795);
      intArray0[5] = 0;
      intArray0[6] = (-1807);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "j1>'7PVA", 2041);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0, sQLIntegrityConstraintViolationException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      int[] intArray1 = new int[8];
      intArray1[0] = (-1807);
      intArray1[1] = 2041;
      intArray1[2] = 10;
      intArray1[3] = (-1807);
      intArray1[4] = 0;
      intArray1[5] = 10;
      intArray1[6] = 10;
      intArray1[7] = (-409);
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("", "Array class must not be null", (-579), intArray1);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("57#DKUC\"p%8Q", (String) null, (-1), intArray1, batchUpdateException2);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1807);
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("7&izx,-U]MjJPcZFc?", "l[chn)^jXXzDD?*Ob", (-409), longArray0, batchUpdateException1);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(batchUpdateExceptionArray0, 2041, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 1738;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTransientConnectionException[]) null, 1738, 1738);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Iterator<Locale.FilteringMode>[] iteratorArray0 = (Iterator<Locale.FilteringMode>[]) Array.newInstance(Iterator.class, 3);
      Hashtable<Locale.FilteringMode, Locale.FilteringMode> hashtable0 = new Hashtable<Locale.FilteringMode, Locale.FilteringMode>();
      EntrySetMapIterator<Locale.FilteringMode, Locale.FilteringMode> entrySetMapIterator0 = new EntrySetMapIterator<Locale.FilteringMode, Locale.FilteringMode>(hashtable0);
      iteratorArray0[0] = (Iterator<Locale.FilteringMode>) entrySetMapIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) hashtable0, 2820, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[3];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("RKlx%", "^n|");
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("Node must not be null", (String) null, 0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLException sQLException0 = new SQLException("Node must not be null");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException((String) null, sQLException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, 0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) orderedIterator0);
      IteratorUtils.size(iterator0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Node must not be null");
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      IteratorUtils.size(nodeListIterator0);
      iIOMetadataNode0.getAttributeNodeNS("Node must not be null", "Node must not be null");
      // Undeclared exception!
      try { 
        iIOMetadataNode0.removeAttributeNode((Attr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      MapIterator<String, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      MapIterator<Integer, IIOMetadataNode> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator1);
      IteratorUtils.collatedIterator((Comparator<? super Integer>) null, (Iterator<? extends Integer>) mapIterator1, (Iterator<? extends Integer>) mapIterator1);
      Integer integer0 = new Integer((-44));
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) singletonIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<BatchUpdateException, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<BatchUpdateException, SQLRecoverableException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends BatchUpdateException, ? extends SQLRecoverableException>) mapIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) mapIterator1, (Iterator<? extends BatchUpdateException>) mapIterator0);
      IteratorUtils.size(iterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      String string0 = "";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("");
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      Predicate<SQLFeatureNotSupportedException> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLFeatureNotSupportedException>) objectArrayIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      String string0 = "L2A'";
      int int0 = 0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("L2A'", "L2A'", 0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecException0.setNextException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("", "L2A'");
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      sQLInvalidAuthorizationSpecException2.setNextException(sQLInvalidAuthorizationSpecException3);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0);
      IteratorUtils.contains(iterator0, (Object) sQLInvalidAuthorizationSpecException3);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getParentNode();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLExceptionArray0[0] = (SQLException) sQLNonTransientConnectionException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLExceptionArray0[1] = (SQLException) sQLIntegrityConstraintViolationException0;
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", (-4991));
      sQLExceptionArray0[2] = (SQLException) sQLTransientException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "60sE83I]", 0, sQLNonTransientConnectionException0);
      sQLExceptionArray0[3] = (SQLException) sQLFeatureNotSupportedException0;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-4991);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = 1560L;
      longArray0[4] = (long) 84;
      longArray0[5] = 112L;
      longArray0[6] = (long) 84;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("delimiter may not be null", "", 84, longArray0, sQLTransientException0);
      sQLExceptionArray0[4] = (SQLException) batchUpdateException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("3_0}ppTJr");
      sQLExceptionArray0[5] = (SQLException) sQLNonTransientConnectionException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.set.ListOrderedSet", "delimiter may not be null");
      sQLExceptionArray0[6] = (SQLException) sQLFeatureNotSupportedException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLExceptionArray0, (-494));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Transformer<Object, SQLTransientConnectionException>[] transformerArray0 = (Transformer<Object, SQLTransientConnectionException>[]) Array.newInstance(Transformer.class, 1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLNonTransientConnectionException0);
      Transformer<Object, SQLTransientConnectionException> transformer0 = ConstantTransformer.constantTransformer(sQLTransientConnectionException0);
      transformerArray0[0] = transformer0;
      ObjectArrayIterator<Transformer<Object, SQLTransientConnectionException>> objectArrayIterator0 = new ObjectArrayIterator<Transformer<Object, SQLTransientConnectionException>>(transformerArray0, 0, 0);
      IteratorUtils.asIterable((Iterator<? extends Transformer<Object, SQLTransientConnectionException>>) objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 3;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 3);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      MapIterator<String, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<String, SQLTimeoutException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.toList((Iterator<? extends String>) mapIterator1);
      IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      MockThrowable mockThrowable0 = new MockThrowable("");
      IteratorUtils.emptyMapIterator();
      FalsePredicate.falsePredicate();
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) null, (Predicate<? super StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = "Collection must not be null";
      stringArray0[0] = "Collection must not be null";
      String string1 = "hG.";
      stringArray0[1] = "hG.";
      stringArray0[2] = "ListIterator must not be null";
      stringArray0[3] = "]";
      stringArray0[4] = "P[J^;2GKZYMv>hFj";
      String string2 = "I)Q$@J";
      stringArray0[5] = "I)Q$@J";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      ListIterator<String> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<String>) resettableListIterator0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      IteratorUtils.filteredListIterator((ListIterator<? extends String>) listIterator0, (Predicate<? super String>) allPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Iterator<ArrayList>, Class<SQLSyntaxErrorException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Transformer<Object, SQLTransientConnectionException>[] transformerArray0 = (Transformer<Object, SQLTransientConnectionException>[]) Array.newInstance(Transformer.class, 1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLNonTransientConnectionException0);
      Transformer<Object, SQLTransientConnectionException> transformer0 = ConstantTransformer.constantTransformer(sQLTransientConnectionException0);
      transformerArray0[0] = transformer0;
      sQLTransientConnectionException0.spliterator();
      ObjectArrayIterator<Transformer<Object, SQLTransientConnectionException>> objectArrayIterator0 = new ObjectArrayIterator<Transformer<Object, SQLTransientConnectionException>>(transformerArray0, 0, 0);
      IteratorUtils.asIterable((Iterator<? extends Transformer<Object, SQLTransientConnectionException>>) objectArrayIterator0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      OrderedIterator<StringTokenizer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) orderedIterator0);
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      IteratorUtils.loopingListIterator((List<HashSet<HashMap>>) stack0);
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      OrderedMapIterator<Locale.FilteringMode, SQLRecoverableException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Locale.FilteringMode, SQLRecoverableException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Locale.FilteringMode, SQLRecoverableException>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<Locale.FilteringMode, SQLRecoverableException>) abstractMapIteratorDecorator0);
      String string0 = "";
      SQLDataException sQLDataException0 = new SQLDataException("");
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<SQLException> comparatorPredicate0 = new ComparatorPredicate<SQLException>(sQLDataException0, comparator0, comparatorPredicate_Criterion0);
      Transformer<Object, SQLDataException> transformer0 = ConstantTransformer.constantTransformer(sQLDataException0);
      IfTransformer<SQLException, SQLDataException> ifTransformer0 = new IfTransformer<SQLException, SQLDataException>(comparatorPredicate0, transformer0, transformer0);
      IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) ifTransformer0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 3);
      OrderedMapIterator<Integer, Integer> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Integer, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, Integer>(orderedMapIterator1);
      iteratorArray0[0] = (Iterator<Integer>) abstractOrderedMapIteratorDecorator0;
      int int0 = (-3359);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "t!T ", (-3359));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      String string0 = "rWEH";
      SQLDataException sQLDataException0 = new SQLDataException("rWEH", "rWEH", 0);
      linkedList0.add((SQLNonTransientException) sQLDataException0);
      IteratorUtils.loopingListIterator((List<SQLNonTransientException>) linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MapIterator<BatchUpdateException, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      long long0 = 0L;
      BoundedIterator<BatchUpdateException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) mapIterator0, 0L, 0L);
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) boundedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Estimated size must be greater than 0", "Estimated size must be greater than 0", 0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("Estimated size must be greater than 0", "J{9");
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("J{9", "B!NFe%OJax%_`Q@F", sQLFeatureNotSupportedException2);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Locale.FilteringMode[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      SQLDataException sQLDataException0 = new SQLDataException("+3YH9kCIhc#mA");
      sQLDataExceptionArray0[0] = sQLDataException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLDataExceptionArray0, 901);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[8];
      SQLException sQLException0 = new SQLException((String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("=4-BnDR+B", sQLException0);
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException((String) null, "{}");
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTimeoutException1;
      SQLTransientException sQLTransientException0 = new SQLTransientException(").", "=4-BnDR+B", sQLTransientExceptionArray0[1]);
      sQLTransientExceptionArray0[2] = sQLTransientException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("=4-BnDR+B");
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransactionRollbackException0;
      SQLTransientException sQLTransientException1 = new SQLTransientException(").", "=4-BnDR+B", 10, sQLTransientExceptionArray0[1]);
      sQLTransientExceptionArray0[4] = sQLTransientException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("", (String) null, 200);
      sQLTransientExceptionArray0[5] = (SQLTransientException) sQLTimeoutException2;
      SQLTransientException sQLTransientException2 = new SQLTransientException();
      sQLTransientExceptionArray0[6] = sQLTransientException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("=4-BnDR+B", (String) null, 200);
      sQLTransientExceptionArray0[7] = (SQLTransientException) sQLTimeoutException3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransientExceptionArray0, 200, 200);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "";
      String string1 = "=+4vT/xiA4&u+a";
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "=+4vT/xiA4&u+a", false);
      ChainedTransformer<StringTokenizer> chainedTransformer0 = new ChainedTransformer<StringTokenizer>((Transformer<? super StringTokenizer, ? extends StringTokenizer>[]) null);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) chainedTransformer0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Properties>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Iterator<SQLTransientException>[] iteratorArray0 = (Iterator<SQLTransientException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<?>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      String string0 = "7";
      int int0 = 3872;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("7", "7", 3872);
      sQLIntegrityConstraintViolationException0.setNextException((SQLException) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("EaX[% !^X|#|9i", "EaX[% !^X|#|9i");
      sQLTransientException0.spliterator();
      sQLIntegrityConstraintViolationException0.initCause(sQLTransientException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLIntegrityConstraintViolationException0, 3872);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = "%fhl";
      SQLDataException sQLDataException0 = new SQLDataException("%fhl", "%fhl", (-2909));
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) mapIterator0);
      IteratorUtils.emptyMapIterator();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      int int0 = 1043;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 1043, 1043);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      IteratorUtils.loopingListIterator((List<SQLDataException>) stack0);
      SQLDataException sQLDataException0 = new SQLDataException("");
      IteratorUtils.getIterator(sQLDataException0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[8];
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", "rY3Ey^@<((c", intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(batchUpdateException0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("Kp_K2zT*\"YF/", "org.apache.commons.collections4.map.Flat3Map$KeySet", 0, intArray0, batchUpdateException1);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("org.apache.commons.collections4.map.Flat3Map$KeySet", (String) null, intArray0);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException();
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("A'$c0[^/wtm^", (String) null, sQLDataException0);
      BatchUpdateException batchUpdateException7 = new BatchUpdateException((String) null, "rY3Ey^@<((c", 0, intArray0, sQLNonTransientException0);
      batchUpdateExceptionArray0[7] = batchUpdateException7;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Transformer<Object, SQLTransientConnectionException>[] transformerArray0 = (Transformer<Object, SQLTransientConnectionException>[]) Array.newInstance(Transformer.class, 1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.getSuppressed();
      Transformer<Object, SQLTransientConnectionException> transformer0 = ConstantTransformer.constantTransformer(sQLTransientConnectionException0);
      transformerArray0[0] = transformer0;
      ObjectArrayIterator<Transformer<Object, SQLTransientConnectionException>> objectArrayIterator0 = new ObjectArrayIterator<Transformer<Object, SQLTransientConnectionException>>(transformerArray0, 0, 0);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[3];
      StringTokenizer stringTokenizer0 = new StringTokenizer("end");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("end", "");
      stringTokenizerArray0[1] = stringTokenizer1;
      stringTokenizer0.nextElement();
      StringTokenizer stringTokenizer2 = new StringTokenizer("");
      stringTokenizerArray0[2] = stringTokenizer2;
      ObjectArrayListIterator<StringTokenizer> objectArrayListIterator0 = new ObjectArrayListIterator<StringTokenizer>(stringTokenizerArray0, 0);
      Stack<EnumSet<Locale.FilteringMode>> stack0 = new Stack<EnumSet<Locale.FilteringMode>>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<EnumSet<Locale.FilteringMode>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      java.util.function.Predicate<Object> predicate0 = java.util.function.Predicate.isEqual((Object) treeSet0);
      java.util.function.Predicate<Object> predicate1 = predicate0.and(predicate0);
      predicate0.negate();
      java.util.function.Predicate<Object> predicate2 = predicate1.negate();
      treeSet0.tailSet("kEFc<[/TC~eO=R2$uW", true);
      predicate2.test((Object) null);
      java.util.function.Predicate<Object> predicate3 = predicate0.or(predicate2);
      predicate1.negate();
      predicate0.or(predicate1);
      treeSet0.ceiling("kEFc<[/TC~eO=R2$uW");
      treeSet0.removeIf(predicate3);
      IteratorUtils.singletonListIterator(treeSet0);
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("0|", sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("", "", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      MapIterator<String, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<String, SQLTimeoutException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) mapIterator1);
      assertEquals(0, list0.size());
  }
}
