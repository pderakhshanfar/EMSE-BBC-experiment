/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 21:01:03 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      OrderedMapIterator<InstanceofPredicate, Class<SQLFeatureNotSupportedException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends InstanceofPredicate>) orderedMapIterator0, (Predicate<? super InstanceofPredicate>) predicate0);
      MapIterator<InstanceofPredicate, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      ZippingIterator<InstanceofPredicate> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>) iterator0, (Iterator<? extends InstanceofPredicate>) orderedMapIterator0, (Iterator<? extends InstanceofPredicate>) mapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(1241, true, true, (-1), 1241);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      Comparator<DataTruncation> comparator0 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HashMap<DataTruncation, Transformer<Object, String>> hashMap0 = new HashMap<DataTruncation, Transformer<Object, String>>();
      EntrySetMapIterator<DataTruncation, Transformer<Object, String>> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, Transformer<Object, String>>(hashMap0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) entrySetMapIterator0, (Iterator<? extends DataTruncation>) singletonListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.singletonIterator(instanceofPredicate0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends InstanceofPredicate>) resettableIterator0, (Iterator<? extends InstanceofPredicate>) resettableIterator0);
      Iterator<InstanceofPredicate> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends InstanceofPredicate>) iterator0, (Iterator<? extends InstanceofPredicate>) resettableIterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      ResettableIterator<String> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[0] = (Iterator<String>) resettableIterator0;
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("DXZPr4 ", "DXZPr4 ");
      ConstantTransformer<SQLException, SQLTimeoutException> constantTransformer0 = new ConstantTransformer<SQLException, SQLTimeoutException>(sQLTimeoutException0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) constantTransformer0);
      Iterator<SQLTimeoutException> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      Consumer<SQLException> consumer0 = (Consumer<SQLException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      objectArrayListIterator0.forEachRemaining(consumer0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientConnectionException>) objectArrayListIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("tIW-{>3]EUZq", sQLIntegrityConstraintViolationException0);
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      List<SQLTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) singletonListIterator0, 27);
      assertTrue(list0.contains(sQLTransientConnectionException0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(linkedList0);
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) loopingListIterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("lNR.!k");
      DataTruncation dataTruncation0 = new DataTruncation(232, false, false, 759, 232, sQLTransientException0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) resettableIterator0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(44, false, true, 125, 0);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, true);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) singletonIterator0, (Iterator<? extends DataTruncation>) singletonIterator0);
      Class<SQLException> class0 = SQLException.class;
      SQLException[] sQLExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLException>) zippingIterator0, class0);
      assertEquals(1, sQLExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.singletonIterator(instanceofPredicate0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MapIterator<EnumSet<Locale.Category>, LinkedList<SQLFeatureNotSupportedException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<EnumSet<Locale.Category>> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends EnumSet<Locale.Category>>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("Cursor closed", "transformer may not be null");
      arrayList0.add(stringTokenizer0);
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<StringTokenizer>) arrayList0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "");
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = IteratorUtils.get((Iterator<SQLTransactionRollbackException>) listIterator0, 0);
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 1);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[8];
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) objectArrayIterator0;
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(vector0);
      BoundedIterator<SQLTransientConnectionException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTransientConnectionException>) loopingListIterator0, 2275L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[2];
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 1, 1);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[3];
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(985, true, false, 985, 985);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, true);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) singletonIterator0, (Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PriorityQueue<IIOMetadataNode>[] priorityQueueArray0 = (PriorityQueue<IIOMetadataNode>[]) Array.newInstance(PriorityQueue.class, 8);
      ResettableListIterator<PriorityQueue<IIOMetadataNode>> resettableListIterator0 = IteratorUtils.arrayListIterator(priorityQueueArray0);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>((Factory<? extends String>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<PriorityQueue<IIOMetadataNode>>) resettableListIterator0, (Transformer<? super PriorityQueue<IIOMetadataNode>, String>) factoryTransformer0, "DOvHM{9wcn8", "", "89d4XHR lQs");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "ZPSV1", sQLTransientConnectionException0);
      Factory<SQLTimeoutException> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<SQLException, SQLTimeoutException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLTimeoutException>) factory0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer0);
      Transformer<SQLException, String> transformer1 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends String>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLTimeoutException, String>) transformer1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(vector0);
      int[] intArray0 = new int[4];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", (-859), intArray0);
      vector0.add(batchUpdateException0);
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) loopingIterator0, class0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      ListIterator<SQLRecoverableException> listIterator0 = arrayList0.listIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("DXZPr4 ");
      arrayList0.add(sQLRecoverableException0);
      BoundedIterator<SQLRecoverableException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) listIterator0, 0L, 1L);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLRecoverableException>) boundedIterator0, 10L);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLTransactionRollbackException>) null, (long) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.IteratorUtils");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.IteratorUtils", sQLTransientConnectionException0);
      arrayDeque0.add(sQLIntegrityConstraintViolationException0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) arrayDeque0);
      // Undeclared exception!
      IteratorUtils.size(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Vector<ArrayList<ClientInfoStatus>> vector0 = new Vector<ArrayList<ClientInfoStatus>>();
      LoopingListIterator<ArrayList<ClientInfoStatus>> loopingListIterator0 = new LoopingListIterator<ArrayList<ClientInfoStatus>>(vector0);
      ArrayList<ClientInfoStatus> arrayList0 = new ArrayList<ClientInfoStatus>();
      vector0.add(arrayList0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ArrayList<ClientInfoStatus>>) loopingListIterator0, (Predicate<? super ArrayList<ClientInfoStatus>>) predicate0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      LoopingListIterator<SQLTransactionRollbackException> loopingListIterator0 = new LoopingListIterator<SQLTransactionRollbackException>(linkedList0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("He0MX#r^34#O^LoP{TU");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("sX^q;K%N8oJLRy9x+8", "sX^q;K%N8oJLRy9x+8", 965, sQLRecoverableException0);
      linkedList0.add(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransactionRollbackException>) loopingListIterator0, 5324);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLException>) null, 533);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super ClientInfoStatus>) null, (Iterator<? extends ClientInfoStatus>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends InstanceofPredicate>) null, (Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLTimeoutException, DataTruncation> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, DataTruncation>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) abstractMapIteratorDecorator0, 4047L, (-1408L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((InstanceofPredicate[]) null, 10, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[3];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 0, (-2018));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTimeoutException[]) null, (-3109));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, (-3475));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Properties[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) properties0, (-3215), (-3215));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 0, (-303));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[3];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, (-3954), (-3954));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((HashSet<SQLSyntaxErrorException>[]) null, 27);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, (-2232));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) hashMap0, (-4415), (-4415));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 893);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Iterator<PriorityQueue<IIOMetadataNode>> iterator0 = EmptyIterator.emptyIterator();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("m");
      String string0 = IteratorUtils.toString(iterator0, (Transformer<? super PriorityQueue<IIOMetadataNode>, String>) transformer0, "org.apache.commons.collections4.list.AbstractLinkedList", "", "\"_`hr[VAC-7n");
      assertEquals("\"_`hr[VAC-7n", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("}");
      String string0 = IteratorUtils.toString((Iterator<PriorityQueue<IIOMetadataNode>>) null, (Transformer<? super PriorityQueue<IIOMetadataNode>, String>) constantTransformer0, "ExceptionTransformer invoked", "Initial capacity must be a non negative number", "1I+3-J#KG;D7(cYb");
      assertEquals("Initial capacity must be a non negative number1I+3-J#KG;D7(cYb", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) arrayList0);
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) resettableIterator0, (Iterator<? extends SQLDataException>) resettableIterator0, (Iterator<? extends SQLDataException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) zippingIterator0, (Transformer<? super SQLDataException, String>) null, (String) null, (String) null, "-^0IP8a<$+lfTb$x1 ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) zippingIterator0, 3040);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      Transformer<SQLException, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("Bm");
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLSyntaxErrorException>) singletonListIterator0, (Transformer<? super SQLSyntaxErrorException, ? extends BatchUpdateException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLException>) iterator0, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Bm' on 'class java.sql.SQLSyntaxErrorException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PriorityQueue<IIOMetadataNode> priorityQueue0 = new PriorityQueue<IIOMetadataNode>();
      ResettableIterator<PriorityQueue<IIOMetadataNode>> resettableIterator0 = IteratorUtils.singletonIterator(priorityQueue0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("}");
      String string0 = IteratorUtils.toString((Iterator<PriorityQueue<IIOMetadataNode>>) resettableIterator0, (Transformer<? super PriorityQueue<IIOMetadataNode>, String>) constantTransformer0, "Iterator must not be null", "}", "B@$ }Yp`^");
      assertEquals("}}B@$ }Yp`^", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("T4FS=Xe*)T/!7OVG");
      MapIterator<PriorityQueue<IIOMetadataNode>, ComparatorPredicate.Criterion> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<PriorityQueue<IIOMetadataNode>>) mapIterator0, (Transformer<? super PriorityQueue<IIOMetadataNode>, String>) constantTransformer0, "b12CELF<O;}Nf#}:HL", (String) null, "Iterator must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) resettableIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0, (String) null, (String) null, "AyGRs#..}Si|i{D\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Iterator<Locale.Category>>) null, (Transformer<? super Iterator<Locale.Category>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>((SQLClientInfoException) null);
      int int0 = IteratorUtils.size(singletonListIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      Transformer<SQLException, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("Bm");
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLSyntaxErrorException>) singletonListIterator0, (Transformer<? super SQLSyntaxErrorException, ? extends BatchUpdateException>) transformer0);
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Transformer<SQLException, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("Array class must not be null");
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLSyntaxErrorException>) listIterator0, (Transformer<? super SQLSyntaxErrorException, ? extends BatchUpdateException>) transformer0);
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 4);
      transformerArray0[0] = transformer0;
      ObjectArrayIterator<Transformer<Object, String>> objectArrayIterator0 = new ObjectArrayIterator<Transformer<Object, String>>(transformerArray0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Transformer<Object, String>>) objectArrayIterator0, (Predicate<? super Transformer<Object, String>>) equalPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayList<ClientInfoStatus>>) null, (Predicate<? super ArrayList<ClientInfoStatus>>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ResettableIterator<ArrayList<ClientInfoStatus>> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ArrayList<ClientInfoStatus>>) resettableIterator0, (Predicate<? super ArrayList<ClientInfoStatus>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ArrayList<ClientInfoStatus> arrayList0 = new ArrayList<ClientInfoStatus>();
      SingletonIterator<ArrayList<ClientInfoStatus>> singletonIterator0 = new SingletonIterator<ArrayList<ClientInfoStatus>>(arrayList0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayList<ClientInfoStatus>>) singletonIterator0, (Predicate<? super ArrayList<ClientInfoStatus>>) uniquePredicate0);
      assertFalse(singletonIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[2];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      ObjectArrayIterator<ClientInfoStatus> objectArrayIterator0 = new ObjectArrayIterator<ClientInfoStatus>(clientInfoStatusArray0);
      EqualPredicate<ClientInfoStatus> equalPredicate0 = new EqualPredicate<ClientInfoStatus>(clientInfoStatusArray0[0]);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<ClientInfoStatus>) objectArrayIterator0, (Predicate<? super ClientInfoStatus>) equalPredicate0);
      assertTrue(boolean0);
      assertTrue(objectArrayIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[2];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      ObjectArrayIterator<ClientInfoStatus> objectArrayIterator0 = new ObjectArrayIterator<ClientInfoStatus>(clientInfoStatusArray0);
      EqualPredicate<ClientInfoStatus> equalPredicate0 = new EqualPredicate<ClientInfoStatus>(clientInfoStatus0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<ClientInfoStatus>) objectArrayIterator0, (Predicate<? super ClientInfoStatus>) equalPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<ClientInfoStatus>) null, (Predicate<? super ClientInfoStatus>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(mockThrowable0);
      DataTruncation dataTruncation0 = new DataTruncation(2157, true, true, 0, 0, sQLTimeoutException0);
      Transformer<DataTruncation, DataTruncation> transformer0 = NOPTransformer.nopTransformer();
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
      DataTruncation dataTruncation1 = IteratorUtils.find(iterator0, (Predicate<? super DataTruncation>) predicate0);
      assertEquals("01004", dataTruncation1.getSQLState());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      String string0 = IteratorUtils.find((Iterator<String>) null, (Predicate<? super String>) predicate0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ResettableIterator<Closure<Object>> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Closure<Object>>) resettableIterator0, (Predicate<? super Closure<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("~-");
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      ArrayDeque<ArrayDeque> arrayDeque0 = IteratorUtils.find((Iterator<ArrayDeque<ArrayDeque>>) iterator0, (Predicate<? super ArrayDeque<ArrayDeque>>) predicate0);
      assertNull(arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PriorityQueue<Closure<Object>> priorityQueue0 = new PriorityQueue<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) priorityQueue0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6);
      ResettableListIterator<Class<Integer>> resettableListIterator0 = IteratorUtils.arrayListIterator(classArray0);
      IteratorUtils.apply((Iterator<Class<Integer>>) resettableListIterator0, (Closure<? super Class<Integer>>) closure0);
      assertFalse(priorityQueue0.contains(closure0));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<Class<Integer>> linkedList0 = new LinkedList<Class<Integer>>();
      ResettableListIterator<Class<Integer>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Class<Integer>>) linkedList0);
      PriorityQueue<Closure<Object>> priorityQueue0 = new PriorityQueue<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) priorityQueue0);
      IteratorUtils.apply((Iterator<Class<Integer>>) resettableListIterator0, (Closure<? super Class<Integer>>) closure0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      OrderedMapIterator<Class<Integer>, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Class<Integer>>) orderedMapIterator0, (Closure<? super Class<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PriorityQueue<Closure<Object>> priorityQueue0 = new PriorityQueue<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) priorityQueue0);
      IteratorUtils.apply((Iterator<Class<Integer>>) null, (Closure<? super Class<Integer>>) closure0);
      assertFalse(priorityQueue0.contains(closure0));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLIntegrityConstraintViolationException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PriorityQueue<IIOMetadataNode> priorityQueue0 = new PriorityQueue<IIOMetadataNode>();
      ResettableIterator<PriorityQueue<IIOMetadataNode>> resettableIterator0 = IteratorUtils.singletonIterator(priorityQueue0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      stack0.add(sQLInvalidAuthorizationSpecException0);
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(stack0);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) loopingListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      LoopingIterator<SQLInvalidAuthorizationSpecException> loopingIterator0 = new LoopingIterator<SQLInvalidAuthorizationSpecException>(linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) loopingIterator0, (-3915));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) null, (-1085));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends String>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OrderedMapIterator<SQLIntegrityConstraintViolationException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, Integer>(orderedMapIterator0);
      Class<SQLException> class0 = SQLException.class;
      SQLException[] sQLExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLException>) abstractOrderedMapIteratorDecorator0, class0);
      assertEquals(0, sQLExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MapIterator<SQLException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) mapIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientConnectionException>) objectArrayListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int[] intArray0 = new int[7];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLDataException sQLDataException0 = new SQLDataException("7vC", "-", sQLTransactionRollbackException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Ws/q*XR6X>7n,R8nm", "7vC", 1241, intArray0, sQLDataException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("-", "Ws/q*XR6X>7n,R8nm", batchUpdateException0);
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Iterable<SQLNonTransientConnectionException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLNonTransientConnectionException>) singletonIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0, (Collection<? super SQLTransactionRollbackException>) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<?>) null, (Collection<? super Object>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      OrderedMapIterator<Integer, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) orderedMapIterator0);
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("YL&q");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLTransactionRollbackException>) resettableListIterator0, (Predicate<? super SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "");
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransactionRollbackException0);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLTransactionRollbackException0);
      ListIterator<SQLTransactionRollbackException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) listIterator0, (Predicate<? super SQLTransactionRollbackException>) equalPredicate0);
      assertTrue(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) null, (Predicate<? super Properties>) uniquePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLSyntaxErrorException>) reverseListIterator0, (Predicate<? super SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Integer>) resettableIterator0, (Predicate<? super Integer>) predicateArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends String>) null, (Predicate<? super String>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Transformer<SQLException, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("9}S&");
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0, (Transformer<? super SQLSyntaxErrorException, ? extends BatchUpdateException>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Transformer<SQLException, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Transformer<? super SQLSyntaxErrorException, ? extends BatchUpdateException>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("VY+FiWRD8q~#y", "VY+FiWRD8q~#y");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("VY+FiWRD8q~#y", sQLWarning0);
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLException>) singletonListIterator0, (Transformer<? super SQLException, ? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 4);
      Comparator<SQLTransientConnectionException> comparator0 = (Comparator<SQLTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Transformer<Object, Locale.Category> transformer0 = ConstantTransformer.constantTransformer(locale_Category0);
      IfTransformer<Locale.Category, Locale.Category> ifTransformer0 = new IfTransformer<Locale.Category, Locale.Category>((Predicate<? super Locale.Category>) null, transformer0, transformer0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.objectGraphIterator(locale_Category0, (Transformer<? super Locale.Category, ? extends Locale.Category>) ifTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Locale.Category>) iterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      ListIterator<SQLRecoverableException> listIterator0 = arrayList0.listIterator();
      BoundedIterator<SQLRecoverableException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) listIterator0, 0L, 1L);
      SkippingIterator<SQLRecoverableException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLRecoverableException>) boundedIterator0, 0L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.emptyIterator();
      Hashtable<InstanceofPredicate, Transformer<Object, String>> hashtable0 = new Hashtable<InstanceofPredicate, Transformer<Object, String>>();
      Transformer<SQLInvalidAuthorizationSpecException, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super SQLInvalidAuthorizationSpecException>, ? extends Transformer<? super SQLInvalidAuthorizationSpecException, ? extends String>>) hashtable0);
      String string0 = IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 974, (-2495));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Properties>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MapIterator<ClientInfoStatus, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<ClientInfoStatus, SQLClientInfoException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<ClientInfoStatus, SQLClientInfoException>(mapIterator0);
      MapIterator<ClientInfoStatus, SQLClientInfoException> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<ClientInfoStatus, SQLClientInfoException>) abstractMapIteratorDecorator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator(iteratorArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashSet<InstanceofPredicate>[] hashSetArray0 = (HashSet<InstanceofPredicate>[]) Array.newInstance(HashSet.class, 7);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(hashSetArray0, 14, 14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLNonTransientConnectionException[]) null, 1516, (-301));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) null);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0, (Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0);
      Iterable<SQLTransactionRollbackException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransactionRollbackException>) zippingIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-197), true, true, (-197), 0, (Throwable) null);
      Class<SQLRecoverableException>[] classArray0 = (Class<SQLRecoverableException>[]) Array.newInstance(Class.class, 8);
      InvokerTransformer<Object, DataTruncation> invokerTransformer0 = new InvokerTransformer<Object, DataTruncation>((String) null, classArray0, classArray0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) invokerTransformer0);
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) iterator0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Integer>) null, (-762L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) ":Qi");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PriorityQueue<Closure<Object>> priorityQueue0 = new PriorityQueue<Closure<Object>>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) priorityQueue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends Locale.Category>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[2];
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransactionRollbackException>) resettableListIterator0, 100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 98
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0, (Collection<? super SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      OrderedMapIterator<ComparatorPredicate.Criterion, SQLRecoverableException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<Iterator> class0 = Iterator.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      boolean boolean0 = IteratorUtils.contains((Iterator<ComparatorPredicate.Criterion>) orderedMapIterator0, (Object) instanceofPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "");
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransactionRollbackException0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLTransactionRollbackException>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      OrderedMapIterator<SQLIntegrityConstraintViolationException, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) orderedMapIterator0, (Class<SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int[] intArray0 = new int[0];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0, sQLRecoverableException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException0, (-733));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[0];
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      assertFalse(resettableListIterator0.hasNext());
  }
}
