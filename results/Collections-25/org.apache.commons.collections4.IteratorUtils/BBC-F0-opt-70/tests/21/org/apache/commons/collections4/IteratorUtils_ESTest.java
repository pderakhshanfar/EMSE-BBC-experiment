/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 18:05:55 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Spliterator;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Properties>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) resettableListIterator0, class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("s/8wBHg;Hxjc8t", "s/8wBHg;Hxjc8t", hashMap0);
      DataTruncation dataTruncation0 = new DataTruncation((-1402), false, false, (-1502), (-1402), sQLClientInfoException0);
      dataTruncation0.getNextWarning();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1402));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      IteratorUtils.getIterator(class0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator(sQLClientInfoException0);
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 8);
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      classArray0[0] = class1;
      Class<SQLNonTransientException> class2 = SQLNonTransientException.class;
      classArray0[1] = class2;
      Class<SQLNonTransientException> class3 = SQLNonTransientException.class;
      classArray0[2] = class3;
      Class<SQLNonTransientException> class4 = SQLNonTransientException.class;
      classArray0[3] = class4;
      Class<SQLNonTransientException> class5 = SQLNonTransientException.class;
      classArray0[4] = class5;
      Class<SQLNonTransientException> class6 = SQLNonTransientException.class;
      classArray0[5] = class6;
      Class<SQLNonTransientException> class7 = SQLNonTransientException.class;
      classArray0[6] = class7;
      Class<SQLNonTransientException> class8 = SQLNonTransientException.class;
      classArray0[7] = class8;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("t[wTid%%'1$`E", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) listIterator0, (Transformer<? super SQLClientInfoException, String>) invokerTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 't[wTid%%'1$`E' on 'class java.sql.SQLClientInfoException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Hashtable<SQLSyntaxErrorException, SQLException> hashtable0 = new Hashtable<SQLSyntaxErrorException, SQLException>();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((BatchUpdateException[]) null, 53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, class0);
      Class<DataTruncation> class1 = DataTruncation.class;
      ServiceLoader<DataTruncation> serviceLoader0 = ServiceLoader.loadInstalled(class1);
      Class<DataTruncation> class2 = DataTruncation.class;
      ServiceLoader<DataTruncation> serviceLoader1 = ServiceLoader.loadInstalled(class2);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.getParent();
      Class<DataTruncation> class3 = DataTruncation.class;
      ServiceLoader<DataTruncation> serviceLoader2 = ServiceLoader.load(class3, (ClassLoader) null);
      Class<SQLNonTransientConnectionException> class4 = SQLNonTransientConnectionException.class;
      ServiceLoader.load(class4);
      ServiceLoader<DataTruncation>[] serviceLoaderArray0 = (ServiceLoader<DataTruncation>[]) Array.newInstance(ServiceLoader.class, 8);
      serviceLoaderArray0[0] = serviceLoader2;
      serviceLoaderArray0[1] = serviceLoader2;
      serviceLoaderArray0[2] = serviceLoader1;
      serviceLoaderArray0[3] = serviceLoader0;
      serviceLoaderArray0[4] = serviceLoader0;
      serviceLoaderArray0[5] = serviceLoader0;
      serviceLoaderArray0[7] = serviceLoader1;
      ResettableListIterator<ServiceLoader<DataTruncation>> resettableListIterator0 = IteratorUtils.arrayListIterator(serviceLoaderArray0);
      IteratorUtils.get((Iterator<ServiceLoader<DataTruncation>>) resettableListIterator0, 3);
      DataTruncation dataTruncation0 = new DataTruncation(3, true, true, 1, 61);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0, 12, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 2599;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1481, 2599);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Hashtable<SQLSyntaxErrorException, SQLException>[] hashtableArray0 = (Hashtable<SQLSyntaxErrorException, SQLException>[]) Array.newInstance(Hashtable.class, 8);
      Hashtable<SQLSyntaxErrorException, SQLException> hashtable0 = new Hashtable<SQLSyntaxErrorException, SQLException>();
      Hashtable<SQLSyntaxErrorException, SQLException> hashtable1 = new Hashtable<SQLSyntaxErrorException, SQLException>();
      Hashtable<SQLSyntaxErrorException, SQLException> hashtable2 = new Hashtable<SQLSyntaxErrorException, SQLException>();
      ResettableListIterator<Hashtable<SQLSyntaxErrorException, SQLException>> resettableListIterator0 = IteratorUtils.arrayListIterator(hashtableArray0);
      BoundedIterator<Hashtable<SQLSyntaxErrorException, SQLException>> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Hashtable<SQLSyntaxErrorException, SQLException>>) resettableListIterator0, (long) 10);
      IteratorUtils.get((Iterator<Hashtable<SQLSyntaxErrorException, SQLException>>) boundedIterator0, 5);
      SQLDataException sQLDataException0 = new SQLDataException("FcDybLO=~)^KS", "FcDybLO=~)^KS");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(object0, 59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "0:;f*LOn39";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0:;f*LOn39");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      SQLDataException sQLDataException0 = new SQLDataException("NodeList must not be null", "", (-617));
      Class<SQLRecoverableException>[] classArray0 = (Class<SQLRecoverableException>[]) Array.newInstance(Class.class, 4);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      classArray0[0] = class0;
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      classArray0[1] = class1;
      Class<SQLRecoverableException> class2 = SQLRecoverableException.class;
      classArray0[2] = class2;
      Class<SQLRecoverableException> class3 = SQLRecoverableException.class;
      classArray0[3] = class3;
      Transformer<SQLException, SQLDataException> transformer0 = InvokerTransformer.invokerTransformer(",Z@d}mPl>sL?Hv", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      Class<SQLException> class4 = SQLException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) iterator0, class4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method ',Z@d}mPl>sL?Hv' on 'class java.sql.SQLDataException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<SQLFeatureNotSupportedException, DataTruncation> hashMap0 = new HashMap<SQLFeatureNotSupportedException, DataTruncation>();
      EntrySetMapIterator<SQLFeatureNotSupportedException, DataTruncation> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, DataTruncation>(hashMap0);
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashtable0);
      ListIterator<Transformer<Object, String>> listIterator0 = new SingletonListIterator<Transformer<Object, String>>(transformer0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(transformer0);
      IteratorUtils.matchesAll((Iterator<Transformer<Object, String>>) listIterator0, (Predicate<? super Transformer<Object, String>>) equalPredicate0);
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<String>) null, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ListIterator<EnumSet<Locale.FilteringMode>> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) listIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) listIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) listIterator0);
      TreeSet<StringTokenizer> treeSet0 = new TreeSet<StringTokenizer>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("NodeList must not be null");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", "org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", (-1452), sQLIntegrityConstraintViolationException0);
      DataTruncation dataTruncation0 = new DataTruncation(100, false, false, 110, 110, sQLInvalidAuthorizationSpecException0);
      Transformer<SQLException, DataTruncation> transformer0 = ConstantTransformer.constantTransformer(dataTruncation0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
      BoundedIterator<DataTruncation> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) iterator0, (long) 110);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends DataTruncation>) boundedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>) null, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ListIterator<EnumSet<Locale.FilteringMode>> listIterator0 = EmptyListIterator.emptyListIterator();
      ZippingIterator<EnumSet<Locale.FilteringMode>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) listIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) listIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) listIterator0);
      TreeSet<StringTokenizer> treeSet0 = new TreeSet<StringTokenizer>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      predicateArray0[0] = predicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.collections4.map.Flat3Map$EntryIterator";
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) listIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) zippingIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) zippingIterator0);
      TreeSet<StringTokenizer> treeSet1 = new TreeSet<StringTokenizer>();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<SQLWarning> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) resettableIterator0, (Iterator<? extends SQLWarning>) resettableIterator0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.collections4.map.AbstractHashedMap$ValuesIterator";
      stringArray0[1] = "";
      Stack<SQLIntegrityConstraintViolationException> stack0 = new Stack<SQLIntegrityConstraintViolationException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      DataTruncation dataTruncation0 = new DataTruncation(907, true, true, (-278), (-278), sQLTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.map.AbstractHashedMap$ValuesIterator", "", (-2204), dataTruncation0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", sQLTransactionRollbackException0);
      stack0.add(sQLIntegrityConstraintViolationException0);
      IteratorUtils.singletonIterator(stack0);
      IteratorUtils.size(zippingIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) zippingIterator0);
      predicateArray0[0] = predicate0;
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      predicateArray0[1] = (Predicate<Object>) nullIsExceptionPredicate0;
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nullIsExceptionPredicate0, predicate0);
      predicateArray0[2] = (Predicate<Object>) andPredicate0;
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      predicateArray1[0] = predicate0;
      predicateArray1[1] = predicate0;
      predicateArray1[2] = predicate0;
      predicateArray1[3] = predicate0;
      predicateArray1[4] = predicate0;
      predicateArray1[5] = predicate0;
      predicateArray1[6] = (Predicate<Object>) nullIsExceptionPredicate0;
      predicateArray1[7] = (Predicate<Object>) nullIsExceptionPredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray1);
      predicateArray0[3] = (Predicate<Object>) anyPredicate0;
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(andPredicate0, predicateArray1[6]);
      predicateArray0[4] = (Predicate<Object>) orPredicate0;
      NonePredicate<StringTokenizer> nonePredicate0 = new NonePredicate<StringTokenizer>(predicateArray0);
      IteratorUtils.matchesAll((Iterator<StringTokenizer>) null, (Predicate<? super StringTokenizer>) nonePredicate0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Hashtable<SQLSyntaxErrorException, SQLException>[] hashtableArray0 = (Hashtable<SQLSyntaxErrorException, SQLException>[]) Array.newInstance(Hashtable.class, 8);
      Hashtable<SQLSyntaxErrorException, SQLException> hashtable0 = new Hashtable<SQLSyntaxErrorException, SQLException>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      hashtableArray0[0] = hashtable0;
      Hashtable<SQLSyntaxErrorException, SQLException> hashtable1 = new Hashtable<SQLSyntaxErrorException, SQLException>();
      hashtableArray0[1] = hashtable1;
      Hashtable<SQLSyntaxErrorException, SQLException> hashtable2 = new Hashtable<SQLSyntaxErrorException, SQLException>();
      hashtableArray0[3] = hashtable2;
      hashtableArray0[4] = hashtable0;
      Hashtable<SQLSyntaxErrorException, SQLException> hashtable3 = new Hashtable<SQLSyntaxErrorException, SQLException>();
      hashtableArray0[5] = hashtable3;
      Hashtable<SQLSyntaxErrorException, SQLException> hashtable4 = new Hashtable<SQLSyntaxErrorException, SQLException>();
      hashtableArray0[6] = hashtable4;
      hashtableArray0[7] = hashtable0;
      IteratorUtils.arrayListIterator(hashtableArray0);
      int int0 = 10;
      SQLDataException sQLDataException1 = new SQLDataException();
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException1, false);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLDataException>) singletonIterator0, (Predicate<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0X4Qr");
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ResettableIterator<Transformer<SQLDataException, String>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.matchesAll((Iterator<Transformer<SQLDataException, String>>) resettableIterator0, (Predicate<? super Transformer<SQLDataException, String>>) uniquePredicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>) resettableListIterator0, (Iterator<?>) resettableListIterator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) comparator1, (Iterator<? extends SQLNonTransientException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MapIterator<IIOMetadataNode, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      LoopingListIterator<Locale.FilteringMode> loopingListIterator0 = new LoopingListIterator<Locale.FilteringMode>(vector0);
      Enumeration<Locale.FilteringMode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) loopingListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) enumeration0);
      IteratorUtils.emptyListIterator();
      Comparator<IIOMetadataNode> comparator0 = (Comparator<IIOMetadataNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 5);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) mapIterator0;
      iteratorArray0[1] = (Iterator<IIOMetadataNode>) mapIterator0;
      iteratorArray0[2] = (Iterator<IIOMetadataNode>) mapIterator0;
      iteratorArray0[3] = (Iterator<IIOMetadataNode>) mapIterator0;
      iteratorArray0[2] = (Iterator<IIOMetadataNode>) mapIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) null);
      IteratorUtils.isEmpty(iterator0);
      Hashtable<SQLSyntaxErrorException, SQLException>[] hashtableArray0 = (Hashtable<SQLSyntaxErrorException, SQLException>[]) Array.newInstance(Hashtable.class, 8);
      Hashtable<SQLSyntaxErrorException, SQLException> hashtable0 = new Hashtable<SQLSyntaxErrorException, SQLException>();
      hashtableArray0[0] = hashtable0;
      Hashtable<SQLSyntaxErrorException, SQLException> hashtable1 = new Hashtable<SQLSyntaxErrorException, SQLException>();
      hashtableArray0[1] = hashtable1;
      Hashtable<SQLSyntaxErrorException, SQLException> hashtable2 = new Hashtable<SQLSyntaxErrorException, SQLException>();
      Hashtable<SQLSyntaxErrorException, SQLException> hashtable3 = new Hashtable<SQLSyntaxErrorException, SQLException>();
      hashtableArray0[3] = hashtable3;
      hashtableArray0[4] = hashtable0;
      Hashtable<SQLSyntaxErrorException, SQLException> hashtable4 = new Hashtable<SQLSyntaxErrorException, SQLException>();
      hashtableArray0[5] = hashtable4;
      hashtable3.getOrDefault(hashtable0, sQLDataException0);
      Hashtable<SQLSyntaxErrorException, SQLException> hashtable5 = new Hashtable<SQLSyntaxErrorException, SQLException>();
      hashtableArray0[6] = hashtable5;
      hashtableArray0[7] = hashtable0;
      IteratorUtils.arrayListIterator(hashtableArray0);
      int int0 = 10;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLDataException0);
      IteratorUtils.getIterator(sQLTimeoutException0);
      OrderedIterator<Transformer<Object, String>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Transformer<Object, String>>) orderedIterator0, (Predicate<? super Transformer<Object, String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = null;
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, sQLDataException0);
      sQLNonTransientConnectionException0.getStackTrace();
      ConstantFactory<SQLNonTransientConnectionException> constantFactory0 = new ConstantFactory<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLNonTransientConnectionException>) constantFactory0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<Object>) null, (Closure<? super Object>) closure0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      sQLDataExceptionArray0[0] = sQLDataException0;
      sQLDataExceptionArray0[1] = sQLDataException0;
      sQLDataExceptionArray0[2] = sQLDataException0;
      sQLDataExceptionArray0[3] = sQLDataException0;
      sQLDataExceptionArray0[4] = sQLDataException0;
      IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      ReverseListIterator<SQLNonTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLNonTransientConnectionException>(arrayList0);
      Hashtable<SQLNonTransientConnectionException, String> hashtable0 = new Hashtable<SQLNonTransientConnectionException, String>();
      Transformer<SQLNonTransientConnectionException, String> transformer1 = MapTransformer.mapTransformer((Map<? super SQLNonTransientConnectionException, ? extends String>) hashtable0);
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) reverseListIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) transformer1, "_vm", "_vm", "C)W>Y[X");
      IteratorUtils.contains((Iterator<Stack<Predicate>>) reverseListIterator0, (Object) sQLDataException0);
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>();
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) treeSet0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("/mk3O", sQLDataException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      int int0 = 102;
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0, 102, 102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, sQLDataException0);
      sQLNonTransientConnectionException0.getStackTrace();
      ConstantFactory<SQLNonTransientConnectionException> constantFactory0 = new ConstantFactory<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLNonTransientConnectionException>) constantFactory0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<Object>) null, (Closure<? super Object>) closure0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      sQLDataExceptionArray0[0] = sQLDataException0;
      sQLDataExceptionArray0[1] = sQLDataException0;
      sQLDataExceptionArray0[2] = sQLDataException0;
      sQLDataExceptionArray0[3] = sQLDataException0;
      sQLDataExceptionArray0[4] = sQLDataException0;
      IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      ReverseListIterator<SQLNonTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLNonTransientConnectionException>(arrayList0);
      Hashtable<SQLNonTransientConnectionException, String> hashtable0 = new Hashtable<SQLNonTransientConnectionException, String>();
      Transformer<SQLNonTransientConnectionException, String> transformer1 = MapTransformer.mapTransformer((Map<? super SQLNonTransientConnectionException, ? extends String>) hashtable0);
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) reverseListIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) transformer1, "_vm", "_vm", "C)W>Y[X");
      IteratorUtils.contains((Iterator<Stack<Predicate>>) reverseListIterator0, (Object) sQLDataException0);
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>();
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) treeSet0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("/mk3O", sQLDataException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0, 102, 102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      TreeSet<StringTokenizer>[] treeSetArray0 = (TreeSet<StringTokenizer>[]) Array.newInstance(TreeSet.class, 8);
      TreeSet<StringTokenizer> treeSet0 = new TreeSet<StringTokenizer>();
      treeSetArray0[0] = treeSet0;
      TreeSet<StringTokenizer> treeSet1 = new TreeSet<StringTokenizer>();
      treeSetArray0[1] = treeSet1;
      TreeSet<StringTokenizer> treeSet2 = new TreeSet<StringTokenizer>();
      treeSetArray0[1] = treeSet2;
      TreeSet<StringTokenizer> treeSet3 = new TreeSet<StringTokenizer>();
      treeSetArray0[3] = treeSet3;
      TreeSet<StringTokenizer> treeSet4 = new TreeSet<StringTokenizer>();
      treeSetArray0[4] = treeSet4;
      TreeSet<StringTokenizer> treeSet5 = new TreeSet<StringTokenizer>();
      treeSetArray0[5] = treeSet5;
      TreeSet<StringTokenizer> treeSet6 = new TreeSet<StringTokenizer>();
      treeSetArray0[6] = treeSet6;
      TreeSet<StringTokenizer> treeSet7 = new TreeSet<StringTokenizer>();
      treeSetArray0[7] = treeSet7;
      ResettableListIterator<TreeSet<StringTokenizer>> resettableListIterator0 = IteratorUtils.arrayListIterator(treeSetArray0);
      Class<SQLSyntaxErrorException>[] classArray0 = (Class<SQLSyntaxErrorException>[]) Array.newInstance(Class.class, 5);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      classArray0[0] = class0;
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      classArray0[1] = class1;
      Class<SQLSyntaxErrorException> class2 = SQLSyntaxErrorException.class;
      classArray0[2] = class2;
      Class<SQLSyntaxErrorException> class3 = SQLSyntaxErrorException.class;
      classArray0[3] = class3;
      Class<SQLSyntaxErrorException> class4 = SQLSyntaxErrorException.class;
      classArray0[3] = class4;
      InvokerTransformer<Object, SQLIntegrityConstraintViolationException> invokerTransformer0 = new InvokerTransformer<Object, SQLIntegrityConstraintViolationException>("", classArray0, classArray0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<TreeSet<StringTokenizer>>) resettableListIterator0, (Closure<? super TreeSet<StringTokenizer>>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.util.TreeSet' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashtable0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      MockThrowable mockThrowable0 = new MockThrowable(sQLInvalidAuthorizationSpecException0);
      SQLDataException sQLDataException0 = new SQLDataException(mockThrowable0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 3);
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      LoopingListIterator<SQLTransactionRollbackException> loopingListIterator0 = new LoopingListIterator<SQLTransactionRollbackException>(stack0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) loopingListIterator0;
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[4];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "Array class must not be null", 0, (Throwable) null);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("Array class must not be null", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.NOPTransformer", "", 0, (Throwable) null);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("", "4", 0, (Throwable) null);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, 0);
      iteratorArray0[1] = (Iterator<SQLTransactionRollbackException>) resettableListIterator0;
      OrderedMapIterator<SQLTransactionRollbackException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, DataTruncation>(orderedMapIterator0);
      iteratorArray0[2] = (Iterator<SQLTransactionRollbackException>) abstractOrderedMapIteratorDecorator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SingletonListIterator<HashSet<StringTokenizer>> singletonListIterator0 = new SingletonListIterator<HashSet<StringTokenizer>>((HashSet<StringTokenizer>) null);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      String string0 = "";
      ResettableListIterator<HashSet<StringTokenizer>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<HashSet<StringTokenizer>>) resettableListIterator0, (Transformer<? super HashSet<StringTokenizer>, String>) transformer0, "", "", "");
      IteratorUtils.getIterator("");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) anyPredicate0;
      Transformer<Object, String> transformer1 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      IteratorUtils.emptyListIterator();
      String string1 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<HashSet<StringTokenizer>>) resettableListIterator0, (Transformer<? super HashSet<StringTokenizer>, String>) transformer1, "", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("asQ<D$)w$>x", "asQ<D$)w$>x");
      SQLTransientException sQLTransientException0 = new SQLTransientException("asQ<D$)w$>x", "asQ<D$)w$>x", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer(";ux{bSP:a00;VE");
      ListIterator<Transformer<Object, String>> listIterator0 = new SingletonListIterator<Transformer<Object, String>>(transformer0);
      Integer integer0 = new Integer(116);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(listIterator0);
      IteratorUtils.matchesAll((Iterator<Transformer<Object, String>>) listIterator0, (Predicate<? super Transformer<Object, String>>) equalPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>((IIOMetadataNode) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) singletonListIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashtable0);
      IteratorUtils.singletonListIterator(transformer0);
      Predicate<IIOMetadataNode> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) predicate0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) arrayList0);
      IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashtable0);
      ListIterator<Transformer<Object, String>> listIterator0 = IteratorUtils.singletonListIterator(transformer0);
      Integer integer0 = new Integer(116);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null);
      DataTruncation dataTruncation0 = new DataTruncation(116, false, false, (-1592), 98, sQLIntegrityConstraintViolationException0);
      dataTruncation0.getNextWarning();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Transformer<Object, String>>) listIterator0, (Predicate<? super Transformer<Object, String>>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.EqualPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      SingletonIterator<Transformer<Object, String>> singletonIterator0 = new SingletonIterator<Transformer<Object, String>>(transformer0);
      UniquePredicate.uniquePredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      Predicate<Object> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) onePredicate0);
      IteratorUtils.matchesAny((Iterator<Transformer<Object, String>>) singletonIterator0, (Predicate<? super Transformer<Object, String>>) predicate0);
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      MapIterator<SQLTransientException, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Closure<SQLException> closure0 = TransformerClosure.transformerClosure((Transformer<? super SQLException, ?>) transformer0);
      IteratorUtils.apply((Iterator<SQLTransientException>) mapIterator0, (Closure<? super SQLTransientException>) closure0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 2);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = null;
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>((SQLIntegrityConstraintViolationException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "[foo'?^$'/__", (int[]) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", (String) null, batchUpdateException0);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      MockThrowable mockThrowable0 = new MockThrowable(sQLTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.getIterator(mockThrowable0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SingletonListIterator<HashSet<StringTokenizer>> singletonListIterator0 = new SingletonListIterator<HashSet<StringTokenizer>>((HashSet<StringTokenizer>) null);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      String string0 = "";
      IteratorUtils.toString((Iterator<HashSet<StringTokenizer>>) singletonListIterator0, (Transformer<? super HashSet<StringTokenizer>, String>) transformer0, "", "", "");
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 9);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashtable0);
      ListIterator<Transformer<Object, String>> listIterator0 = IteratorUtils.singletonListIterator(transformer0);
      Integer integer0 = new Integer(116);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(integer0);
      IteratorUtils.matchesAll((Iterator<Transformer<Object, String>>) listIterator0, (Predicate<? super Transformer<Object, String>>) equalPredicate0);
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashSet<StringTokenizer> hashSet0 = new HashSet<StringTokenizer>();
      SingletonListIterator<HashSet<StringTokenizer>> singletonListIterator0 = new SingletonListIterator<HashSet<StringTokenizer>>(hashSet0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<HashSet<StringTokenizer>>) singletonListIterator0, (Transformer<? super HashSet<StringTokenizer>, String>) transformer0, "", "", "Dtf2NHeN");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Array class must not be null");
      iIOMetadataNode0.getAttributeNodeNS("Array class must not be null", (String) null);
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      HashSet<StringTokenizer> hashSet0 = new HashSet<StringTokenizer>();
      SingletonListIterator<HashSet<StringTokenizer>> singletonListIterator0 = new SingletonListIterator<HashSet<StringTokenizer>>(hashSet0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<HashSet<StringTokenizer>>) singletonListIterator0, (Transformer<? super HashSet<StringTokenizer>, String>) transformer0, "", "", "");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.functors.DefaultEquator");
      iIOMetadataNode0.getAttributeNodeNS("org.apache.commons.collections4.functors.IfTransformer", (String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      OrderedMapIterator<TreeSet<StringTokenizer>, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<TreeSet<StringTokenizer>, SQLInvalidAuthorizationSpecException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<TreeSet<StringTokenizer>, SQLInvalidAuthorizationSpecException>(orderedMapIterator0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap1 = new HashMap<Predicate<Object>, Closure<Object>>();
      MapIterator<Properties, SQLTransactionRollbackException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<Properties> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Properties>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Properties>) iterator0, (Predicate<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      predicateArray0[0] = null;
      predicateArray0[1] = null;
      PredicateTransformer<SQLClientInfoException> predicateTransformer0 = new PredicateTransformer<SQLClientInfoException>(predicateArray0[0]);
      predicateArray0[3] = null;
      predicateArray0[5] = null;
      ExceptionPredicate.exceptionPredicate();
      AllPredicate<SQLInvalidAuthorizationSpecException> allPredicate0 = new AllPredicate<SQLInvalidAuthorizationSpecException>(predicateArray0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) allPredicate0);
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      OrderedMapIterator<DataTruncation, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("asQD$)w$C>-x", "asQD$)w$C>-x");
      SQLTransientException sQLTransientException0 = new SQLTransientException("asQD$)w$C>-x", "asQD$)w$C>-x", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      MockThrowable mockThrowable0 = new MockThrowable(sQLTransientException0);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLIntegrityConstraintViolationException0);
      SQLDataException sQLDataException0 = new SQLDataException(mockThrowable0);
      Iterator<?> iterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>((BatchUpdateException) null);
      ListIteratorWrapper<BatchUpdateException> listIteratorWrapper0 = new ListIteratorWrapper<BatchUpdateException>(singletonListIterator0);
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) listIteratorWrapper0, 10);
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(list0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) loopingListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[9];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Offset parameter must not be negative.", (Throwable) null);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(")iA", "Offset parameter must not be negative.");
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException(")iA", "Iterator must not be null");
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("Iterator must not be null", "Offset parameter must not be negative.", sQLTransactionRollbackException2);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("", sQLTransactionRollbackExceptionArray0[4]);
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("7v/Ub", "Iterator must not be null", sQLTransactionRollbackException4);
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException5;
      int int0 = (-3135);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException("Offset parameter must not be negative.", "LS9|bwkvRlSCw_Y", (-3135), sQLTransientException0);
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException6;
      SQLTransactionRollbackException sQLTransactionRollbackException7 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[8] = sQLTransactionRollbackException7;
      IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0);
      Comparator<Object> comparator0 = null;
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 7);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SingletonListIterator<HashSet<StringTokenizer>> singletonListIterator0 = new SingletonListIterator<HashSet<StringTokenizer>>((HashSet<StringTokenizer>) null);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>((Predicate<? super Object>[]) null);
      IteratorUtils.find((Iterator<String>) resettableListIterator0, (Predicate<? super String>) nonePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransientConnectionException>) null, 577);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLDataException sQLDataException0 = new SQLDataException();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Transformer<SQLException, SQLDataException> transformer0 = null;
      IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "sF^";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "sF^");
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SingletonListIterator<HashSet<StringTokenizer>> singletonListIterator0 = new SingletonListIterator<HashSet<StringTokenizer>>((HashSet<StringTokenizer>) null);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) vector0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "Estimated size must be greater than 0");
      vector0.add(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, 32);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MapIterator<IIOMetadataNode, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      LoopingListIterator<Locale.FilteringMode> loopingListIterator0 = new LoopingListIterator<Locale.FilteringMode>(vector0);
      Enumeration<Locale.FilteringMode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) loopingListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) enumeration0);
      IteratorUtils.emptyListIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransientException0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0, false);
      IteratorUtils.contains((Iterator<SQLDataException>) singletonIterator0, (Object) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SingletonListIterator<HashSet<StringTokenizer>> singletonListIterator0 = new SingletonListIterator<HashSet<StringTokenizer>>((HashSet<StringTokenizer>) null);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<HashSet<StringTokenizer>>) singletonListIterator0, (Transformer<? super HashSet<StringTokenizer>, String>) transformer0, (String) null, "<XTm/", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SingletonListIterator<HashSet<StringTokenizer>> singletonListIterator0 = new SingletonListIterator<HashSet<StringTokenizer>>((HashSet<StringTokenizer>) null);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) vector0);
      IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, 32);
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      Iterator<BatchUpdateException> iterator0 = null;
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      int[] intArray0 = new int[5];
      intArray0[0] = 246;
      intArray0[1] = 246;
      intArray0[2] = 246;
      intArray0[3] = 246;
      intArray0[4] = 246;
      DataTruncation dataTruncation0 = new DataTruncation((-1594), false, false, (-1594), 246);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("nEb+:=8kUo$", "nEb+:=8kUo$", 246, intArray0, dataTruncation0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      MockFile mockFile0 = new MockFile("jE8>fe`");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      dataTruncation0.printStackTrace(printWriter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Can extract singleton only when collection size == 1", "No previous() entry in the iteration", 246, batchUpdateException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("^4nSXz9IRB]Cvj", "Can extract singleton only when collection size == 1", (-2132), (long[]) null, sQLInvalidAuthorizationSpecException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("^4nSXz9IRB]Cvj", "nEb+:=8kUo$", 61, intArray0, sQLInvalidAuthorizationSpecException0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("", "No previous() entry in the iteration", intArray0, batchUpdateException1);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      ResettableIterator<BatchUpdateException> resettableIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) null);
      IteratorUtils.isEmpty(iterator0);
      IteratorUtils.singletonListIterator(sQLDataException0);
      OrderedMapIterator<TreeSet<StringTokenizer>, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<TreeSet<StringTokenizer>, SQLInvalidAuthorizationSpecException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<TreeSet<StringTokenizer>, SQLInvalidAuthorizationSpecException>(orderedMapIterator0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<TreeSet<StringTokenizer>>) abstractOrderedMapIteratorDecorator0, (Closure<? super TreeSet<StringTokenizer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      OrderedMapIterator<Properties, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, Integer>(orderedMapIterator0);
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getOwnerDocument();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      ResettableIterator<Transformer<SQLDataException, String>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.matchesAll((Iterator<Transformer<SQLDataException, String>>) resettableIterator0, (Predicate<? super Transformer<SQLDataException, String>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      OrderedMapIterator<Properties, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, Integer>(orderedMapIterator0);
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      IteratorUtils.emptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Transformer<Object, String>>) null, (Iterator<? extends Transformer<Object, String>>) null, (Iterator<? extends Transformer<Object, String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException();
      Factory<Predicate<Object>> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer.factoryTransformer((Factory<? extends Predicate<Object>>) factory0);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>((Predicate<? super Object>[]) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "DZw3jr<G+BXTsMJ";
      stringArray0[1] = "";
      stringArray0[2] = "DZw3jr<G+BXTsMJ";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<String>) resettableListIterator0, (Predicate<? super String>) nonePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NonePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) null);
      IteratorUtils.isEmpty(iterator0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) listIterator0);
      TreeSet<StringTokenizer> treeSet0 = new TreeSet<StringTokenizer>();
      TreeSet<StringTokenizer> treeSet1 = new TreeSet<StringTokenizer>();
      TreeSet<SQLRecoverableException> treeSet2 = new TreeSet<SQLRecoverableException>();
      Hashtable<SQLSyntaxErrorException, SQLException>[] hashtableArray0 = (Hashtable<SQLSyntaxErrorException, SQLException>[]) Array.newInstance(Hashtable.class, 8);
      Hashtable<SQLSyntaxErrorException, SQLException> hashtable0 = new Hashtable<SQLSyntaxErrorException, SQLException>();
      hashtableArray0[0] = hashtable0;
      Hashtable<SQLSyntaxErrorException, SQLException> hashtable1 = new Hashtable<SQLSyntaxErrorException, SQLException>();
      hashtableArray0[1] = hashtable1;
      Hashtable<SQLSyntaxErrorException, SQLException> hashtable2 = new Hashtable<SQLSyntaxErrorException, SQLException>();
      hashtableArray0[2] = hashtable2;
      Hashtable<SQLSyntaxErrorException, SQLException> hashtable3 = new Hashtable<SQLSyntaxErrorException, SQLException>();
      hashtableArray0[3] = hashtable3;
      int int0 = 785;
      Hashtable<SQLSyntaxErrorException, SQLException> hashtable4 = new Hashtable<SQLSyntaxErrorException, SQLException>(785, 785);
      hashtableArray0[4] = hashtable4;
      Hashtable<SQLSyntaxErrorException, SQLException> hashtable5 = new Hashtable<SQLSyntaxErrorException, SQLException>();
      hashtableArray0[5] = hashtable5;
      Hashtable<SQLSyntaxErrorException, SQLException> hashtable6 = new Hashtable<SQLSyntaxErrorException, SQLException>();
      hashtableArray0[6] = hashtable6;
      Hashtable<SQLSyntaxErrorException, SQLException> hashtable7 = new Hashtable<SQLSyntaxErrorException, SQLException>();
      hashtableArray0[7] = hashtable7;
      ResettableListIterator<Hashtable<SQLSyntaxErrorException, SQLException>> resettableListIterator0 = IteratorUtils.arrayListIterator(hashtableArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Hashtable<SQLSyntaxErrorException, SQLException>>) resettableListIterator0, 123);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 115
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ListIterator<EnumSet<Locale.FilteringMode>> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) listIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) listIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) listIterator0);
      TreeSet<StringTokenizer> treeSet0 = new TreeSet<StringTokenizer>();
      TreeSet<StringTokenizer> treeSet1 = new TreeSet<StringTokenizer>();
      TreeSet<StringTokenizer> treeSet2 = new TreeSet<StringTokenizer>();
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 9);
      MapIterator<BatchUpdateException, LinkedHashSet<SQLNonTransientConnectionException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<BatchUpdateException, LinkedHashSet<SQLNonTransientConnectionException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      ListIterator<BatchUpdateException> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) mapIterator1);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) listIterator1;
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(arrayList0);
      iteratorArray0[1] = (Iterator<BatchUpdateException>) loopingIterator0;
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) loopingIterator0, (Iterator<? extends BatchUpdateException>) listIterator1);
      iteratorArray0[2] = (Iterator<BatchUpdateException>) zippingIterator0;
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[3] = (Iterator<BatchUpdateException>) resettableIterator0;
      ArrayIterator<BatchUpdateException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<BatchUpdateException>(loopingIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      OrderedMapIterator<DataTruncation, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", sQLInvalidAuthorizationSpecException2);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("", "", sQLTimeoutException0);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DZw3jr<G+BXTsMJ");
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      Class<String> class0 = String.class;
      Class<Iterator<SQLRecoverableException>>[] classArray0 = (Class<Iterator<SQLRecoverableException>>[]) Array.newInstance(Class.class, 0);
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0, classArray0, classArray0);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(instantiateFactory0);
      Factory<Predicate<Object>> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer.factoryTransformer((Factory<? extends Predicate<Object>>) factory0);
      FactoryTransformer<SQLException, Properties> factoryTransformer1 = new FactoryTransformer<SQLException, Properties>((Factory<? extends Properties>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) null, (Transformer<? super SQLClientInfoException, ? extends Properties>) factoryTransformer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", sQLInvalidAuthorizationSpecException2);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("", "", sQLTimeoutException0);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      sQLInvalidAuthorizationSpecException1.initCause(sQLInvalidAuthorizationSpecException3);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DZw3jr<G+BXTsMJ");
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      Class<String> class0 = String.class;
      Class<Iterator<SQLRecoverableException>>[] classArray0 = (Class<Iterator<SQLRecoverableException>>[]) Array.newInstance(Class.class, 0);
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0, classArray0, classArray0);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(instantiateFactory0);
      Factory<Predicate<Object>> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer.factoryTransformer((Factory<? extends Predicate<Object>>) factory0);
      SingletonIterator<Transformer<Object, String>> singletonIterator0 = new SingletonIterator<Transformer<Object, String>>(factoryTransformer0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAny((Iterator<Transformer<Object, String>>) singletonIterator0, (Predicate<? super Transformer<Object, String>>) uniquePredicate0);
      OrderedIterator<HashSet<StringTokenizer>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<HashSet<StringTokenizer>>) orderedIterator0, (long) (-696));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) instanceofPredicate0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = TruePredicate.truePredicate();
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) predicate2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) null);
      IteratorUtils.isEmpty(iterator0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) listIterator0);
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", sQLInvalidAuthorizationSpecException2);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("", "", sQLTimeoutException0);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DZw3jr<G+BXTsMJ");
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      Class<String> class0 = String.class;
      Class<Iterator<SQLRecoverableException>>[] classArray0 = (Class<Iterator<SQLRecoverableException>>[]) Array.newInstance(Class.class, 0);
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0, classArray0, classArray0);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(instantiateFactory0);
      Factory<Predicate<Object>> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer.factoryTransformer((Factory<? extends Predicate<Object>>) factory0);
      SingletonIterator<Transformer<Object, String>> singletonIterator0 = new SingletonIterator<Transformer<Object, String>>(factoryTransformer0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAny((Iterator<Transformer<Object, String>>) singletonIterator0, (Predicate<? super Transformer<Object, String>>) uniquePredicate0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, (-696));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.emptyMapIterator();
      int int0 = 839;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 839, 839);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      IteratorUtils.singletonListIterator((DataTruncation) null);
      OrderedMapIterator<HashSet<StringTokenizer>, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<HashSet<StringTokenizer>>) orderedMapIterator0, (Transformer<? super HashSet<StringTokenizer>, String>) null, (String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      OrderedMapIterator<DataTruncation, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator((DataTruncation) null);
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(orderedMapIterator0);
      ZippingIterator<SQLWarning> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) listIterator0, (Iterator<? extends SQLWarning>) listIteratorWrapper0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) zippingIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "Predicate must not be null", (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLInvalidAuthorizationSpecException0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      int int0 = 2302;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTransientConnectionException[]) null, 2302, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>(7);
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      Iterator<String> iterator0 = arrayDeque0.iterator();
      IteratorUtils.size(iterator0);
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      LoopingListIterator<Locale.FilteringMode> loopingListIterator0 = new LoopingListIterator<Locale.FilteringMode>(vector0);
      Enumeration<Locale.FilteringMode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) loopingListIterator0);
      Iterator<Locale.FilteringMode> iterator1 = IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) enumeration0);
      IteratorUtils.toArray(iterator0);
      IteratorUtils.getIterator(iterator1);
      ListIteratorWrapper<BatchUpdateException> listIteratorWrapper0 = null;
      try {
        listIteratorWrapper0 = new ListIteratorWrapper<BatchUpdateException>((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.ListIteratorWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>(7);
      MapIterator<SQLTimeoutException, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) mapIterator0, 1);
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(list0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) loopingListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) linkedHashSet0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Iterator<? extends SQLTimeoutException>) loopingListIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) mapIterator0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("Estimated size must be greater than 0", hashtable0, sQLTransientException0);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("H`H NTt$V./R{", hashtable0);
      Properties properties0 = new Properties();
      ConstantFactory<Properties> constantFactory0 = new ConstantFactory<Properties>(properties0);
      ConstantFactory<Properties> constantFactory1 = new ConstantFactory<Properties>(properties0);
      FactoryTransformer.factoryTransformer((Factory<? extends Properties>) constantFactory1);
      IteratorUtils.emptyMapIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("i$V$rU'_|3gHp^[RQ", "i$V$rU'_|3gHp^[RQ");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLRecoverableException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      hashMap0.getOrDefault(iIOMetadataNode0, "a");
      MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      OrderedMapIterator<Properties, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<Properties, Integer> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, Integer>(orderedMapIterator1);
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      IteratorUtils.filteredIterator((Iterator<? extends Properties>) orderedMapIterator0, (Predicate<? super Properties>) predicate0);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) resettableIterator0, (-1387));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      OrderedMapIterator<DataTruncation, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      OrderedMapIterator<Locale.FilteringMode, SQLClientInfoException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Locale.FilteringMode, ? extends SQLClientInfoException>) orderedMapIterator1);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      String string0 = "";
      HashSet<StringTokenizer> hashSet0 = new HashSet<StringTokenizer>();
      SingletonIterator<HashSet<StringTokenizer>> singletonIterator0 = new SingletonIterator<HashSet<StringTokenizer>>(hashSet0);
      String string1 = "org.apache.commons.collections4.map.AbstractHashedMap$EntrySetIterator";
      IteratorUtils.toString((Iterator<HashSet<StringTokenizer>>) singletonIterator0, (Transformer<? super HashSet<StringTokenizer>, String>) transformer0, "org.apache.commons.collections4.map.AbstractHashedMap$EntrySetIterator", "", "");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>(100);
      MapIterator<SQLTimeoutException, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) mapIterator0, 7);
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(list0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) mapIterator0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) list0);
      Iterator<SQLTimeoutException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) iterator0, (Iterator<? extends SQLTimeoutException>) iterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) iterator1);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", hashtable0, sQLClientInfoException0);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("org.apache.commons.collections4.IteratorUtils", hashtable0);
      Properties properties0 = new Properties();
      ConstantFactory<Properties> constantFactory0 = new ConstantFactory<Properties>(properties0);
      FactoryTransformer.factoryTransformer((Factory<? extends Properties>) constantFactory0);
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SingletonListIterator<HashSet<StringTokenizer>> singletonListIterator0 = new SingletonListIterator<HashSet<StringTokenizer>>((HashSet<StringTokenizer>) null);
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertNotNull(singletonListIterator0);
      
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(transformer0);
      
      String string0 = IteratorUtils.toString((Iterator<HashSet<StringTokenizer>>) singletonListIterator0, (Transformer<? super HashSet<StringTokenizer>, String>) transformer0, "", "", "");
      assertTrue(singletonListIterator0.hasPrevious());
      assertEquals(1, singletonListIterator0.nextIndex());
      assertEquals(0, singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasNext());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(string0);
      assertEquals("null", string0);
      
      IteratorUtils.isEmpty((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      OrderedMapIterator<DataTruncation, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      LoopingListIterator<Locale.FilteringMode> loopingListIterator0 = new LoopingListIterator<Locale.FilteringMode>(vector0);
      Enumeration<Locale.FilteringMode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) loopingListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) enumeration0);
      ResettableListIterator<HashSet<StringTokenizer>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<HashSet<StringTokenizer>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<HashSet<StringTokenizer>>) resettableListIterator0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<HashSet<StringTokenizer>>) listIterator0, (Transformer<? super HashSet<StringTokenizer>, String>) transformer0, "a[jT85", "", "");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      DataTruncation dataTruncation0 = new DataTruncation((-1448), false, true, 1, 1, sQLTransientConnectionException0);
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.singletonIterator((SQLWarning) dataTruncation0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLTransientConnectionException0);
      IteratorUtils.find((Iterator<SQLWarning>) resettableIterator0, (Predicate<? super SQLWarning>) identityPredicate0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0);
      LinkedHashSet<StringTokenizer> linkedHashSet0 = new LinkedHashSet<StringTokenizer>();
      SingletonListIterator<HashSet<StringTokenizer>> singletonListIterator0 = new SingletonListIterator<HashSet<StringTokenizer>>(linkedHashSet0);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<HashSet<StringTokenizer>>) singletonListIterator0, (Transformer<? super HashSet<StringTokenizer>, String>) transformer0, "/FE`NH.}AUsl)PKz!j~", "/FE`NH.}AUsl)PKz!j~", "/FE`NH.}AUsl)PKz!j~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      OrderedMapIterator<DataTruncation, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("asQD$)w$C>-x", "asQD$)w$C>-x", 0);
      OrderedMapIterator<Locale.FilteringMode, SQLClientInfoException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Locale.FilteringMode, SQLClientInfoException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Locale.FilteringMode, ? extends SQLClientInfoException>) orderedMapIterator1);
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.set.AbstractSetDecorator", hashMap0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashtable0, sQLTimeoutException0);
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      ConstantFactory<Properties> constantFactory0 = new ConstantFactory<Properties>((Properties) null);
      FactoryTransformer.factoryTransformer((Factory<? extends Properties>) constantFactory0);
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLClientInfoException>) stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) resettableListIterator0, (Transformer<? super SQLClientInfoException, ? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      OrderedMapIterator<EnumSet<Locale.FilteringMode>, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<EnumSet<Locale.FilteringMode>, SQLRecoverableException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<EnumSet<Locale.FilteringMode>, SQLRecoverableException>(orderedMapIterator0);
      OrderedMapIterator<EnumSet<Locale.FilteringMode>, SQLRecoverableException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<EnumSet<Locale.FilteringMode>, ? extends SQLRecoverableException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedMapIterator1, (Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedMapIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedMapIterator1);
      IteratorUtils.boundedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedMapIterator1, 1956L);
      Stack<LinkedHashSet<SQLNonTransientException>> stack0 = new Stack<LinkedHashSet<SQLNonTransientException>>();
      // Undeclared exception!
      try { 
        stack0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      Comparator<SQLException> comparator0 = null;
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 9);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[7];
      DataTruncation dataTruncation0 = new DataTruncation(1506, false, false, 1506, 1506);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1506, false, false, 1506, 0, dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-966), true, true, (-966), 0, dataTruncation1);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(125, false, true, 4, (-966), dataTruncation2);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(0, true, true, 392, 0);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(125, false, false, 100, 125);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(100, false, true, 125, 9);
      dataTruncationArray0[6] = dataTruncation6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(dataTruncationArray0, 100, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("a%z{GlTB:hidk@\"", "a%z{GlTB:hidk@\"");
      SQLTransientException sQLTransientException0 = new SQLTransientException("V", "V", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("a%z{GlTB:hidk@\"", "a%z{GlTB:hidk@\"", 185, sQLInvalidAuthorizationSpecException0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", hashMap0);
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      ConstantFactory<Properties> constantFactory0 = new ConstantFactory<Properties>((Properties) null);
      ConstantFactory.constantFactory((Properties) null);
      Transformer<Object, Properties> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Properties>) constantFactory0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) singletonListIterator0, (Transformer<? super SQLClientInfoException, ? extends Properties>) transformer0);
      IteratorUtils.emptyMapIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("a%z{GlTB:hidk@\"", "", 185);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLIntegrityConstraintViolationException0, (Equator<Object>) defaultEquator0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(nullIsExceptionPredicate0);
      predicateArray0[0] = (Predicate<Object>) notPredicate0;
      Predicate<IIOMetadataNode> predicate1 = OnePredicate.onePredicate((Predicate<? super IIOMetadataNode>[]) predicateArray0);
      IteratorUtils.find((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) predicate1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      OrderedMapIterator<DataTruncation, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("asQD$)w$C>-x", "asQD$)w$C>-x", 0);
      OrderedMapIterator<Locale.FilteringMode, SQLClientInfoException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Locale.FilteringMode, SQLClientInfoException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Locale.FilteringMode, ? extends SQLClientInfoException>) orderedMapIterator1);
      MapIterator<Locale.FilteringMode, SQLClientInfoException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      AbstractMapIteratorDecorator<Locale.FilteringMode, SQLClientInfoException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Locale.FilteringMode, SQLClientInfoException>(mapIterator1);
      Comparator<Locale.FilteringMode> comparator0 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) comparator0, (Iterator<? extends Locale.FilteringMode>) mapIterator0, (Iterator<? extends Locale.FilteringMode>) mapIterator1);
      Vector<SQLInvalidAuthorizationSpecException> vector1 = new Vector<SQLInvalidAuthorizationSpecException>();
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("asQD$)w$C>-x", "asQD$)w$C>-x", 31);
      stack0.insertElementAt(sQLNonTransientException0, 0);
      IteratorUtils.loopingListIterator((List<SQLNonTransientException>) stack0);
      OrderedMapIterator<TreeSet<StringTokenizer>, SQLInvalidAuthorizationSpecException> orderedMapIterator2 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<TreeSet<StringTokenizer>, SQLInvalidAuthorizationSpecException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<TreeSet<StringTokenizer>, SQLInvalidAuthorizationSpecException>(orderedMapIterator2);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.apply((Iterator<TreeSet<StringTokenizer>>) abstractOrderedMapIteratorDecorator0, (Closure<? super TreeSet<StringTokenizer>>) closure0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) null);
      IteratorUtils.isEmpty(iterator0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) listIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("n55", "", sQLDataException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException(".");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("", "org.apache.commons.collections4.IteratorUtils", 0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Hashtable<Locale.FilteringMode, Integer> hashtable0 = new Hashtable<Locale.FilteringMode, Integer>();
      EntrySetMapIterator<Locale.FilteringMode, Integer> entrySetMapIterator0 = new EntrySetMapIterator<Locale.FilteringMode, Integer>(hashtable0);
      MapIterator<Locale.FilteringMode, Object> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Locale.FilteringMode, ?>) entrySetMapIterator0);
      BoundedIterator<Locale.FilteringMode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) mapIterator0, (long) 0, 0L);
      IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) comparator0, (Iterator<? extends Locale.FilteringMode>) boundedIterator0, (Iterator<? extends Locale.FilteringMode>) entrySetMapIterator0);
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) vector0);
      IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, 100);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OrderedMapIterator<DataTruncation, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("asQD$)w$C>-x", "asQD$)w$C>-x");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("asQD$)w$C>-x", "asQD$)w$C>-x", 0);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLInvalidAuthorizationSpecException0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLTimeoutException0);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLIntegrityConstraintViolationException0);
      SQLDataException sQLDataException0 = new SQLDataException(mockThrowable0);
      OrderedMapIterator<Locale.FilteringMode, SQLClientInfoException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Locale.FilteringMode, SQLClientInfoException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Locale.FilteringMode, ? extends SQLClientInfoException>) orderedMapIterator1);
      MapIterator<Locale.FilteringMode, SQLClientInfoException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      AbstractMapIteratorDecorator<Locale.FilteringMode, SQLClientInfoException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Locale.FilteringMode, SQLClientInfoException>(mapIterator1);
      Transformer<Object, SQLTimeoutException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.transformedIterator((Iterator<?>) mapIterator1, (Transformer<? super Object, ? extends SQLTimeoutException>) transformer0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SingletonListIterator<HashSet<StringTokenizer>> singletonListIterator0 = new SingletonListIterator<HashSet<StringTokenizer>>((HashSet<StringTokenizer>) null);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      singletonListIterator0.next();
      IteratorUtils.toString((Iterator<HashSet<StringTokenizer>>) singletonListIterator0, (Transformer<? super HashSet<StringTokenizer>, String>) transformer0, "", "", "");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      Properties properties8 = new Properties();
      propertiesArray0[8] = properties8;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) objectArrayListIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("' on '");
      MockThrowable mockThrowable0 = new MockThrowable("", sQLNonTransientConnectionException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", mockThrowable0);
      IteratorUtils.singletonIterator(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "");
      SQLTransientException sQLTransientException0 = new SQLTransientException("V", "V", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientException0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      HashSet<StringTokenizer>[] hashSetArray0 = (HashSet<StringTokenizer>[]) Array.newInstance(HashSet.class, 5);
      LinkedHashSet<StringTokenizer> linkedHashSet0 = new LinkedHashSet<StringTokenizer>();
      hashSetArray0[0] = (HashSet<StringTokenizer>) linkedHashSet0;
      HashSet<StringTokenizer> hashSet0 = new HashSet<StringTokenizer>();
      hashSetArray0[1] = hashSet0;
      HashSet<StringTokenizer> hashSet1 = new HashSet<StringTokenizer>();
      hashSetArray0[2] = hashSet1;
      LinkedHashSet<StringTokenizer> linkedHashSet1 = new LinkedHashSet<StringTokenizer>();
      hashSetArray0[3] = (HashSet<StringTokenizer>) linkedHashSet1;
      HashSet<StringTokenizer> hashSet2 = new HashSet<StringTokenizer>();
      hashSetArray0[4] = hashSet2;
      ObjectArrayIterator<HashSet<StringTokenizer>> objectArrayIterator0 = new ObjectArrayIterator<HashSet<StringTokenizer>>(hashSetArray0);
      IteratorUtils.toString((Iterator<HashSet<StringTokenizer>>) objectArrayIterator0, (Transformer<? super HashSet<StringTokenizer>, String>) transformer0, "V", "", "");
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) resettableListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator((DataTruncation) null);
      IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) listIterator0, (Iterator<? extends SQLWarning>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "");
      SQLTransientException sQLTransientException0 = new SQLTransientException("V", "V", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      StringTokenizer stringTokenizer0 = new StringTokenizer("iterator", "");
      IdentityPredicate.identityPredicate(stringTokenizer0);
      SQLWarning sQLWarning0 = new SQLWarning("", "", 89);
      SingletonListIterator<SQLWarning> singletonListIterator0 = new SingletonListIterator<SQLWarning>(sQLWarning0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.find((Iterator<SQLWarning>) singletonListIterator0, (Predicate<? super SQLWarning>) predicate0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0);
      IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) singletonIterator0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      ForClosure.forClosure(89, (Closure<? super Object>) closure0);
      TreeSet<StringTokenizer> treeSet0 = new TreeSet<StringTokenizer>();
      TreeSet<StringTokenizer> treeSet1 = new TreeSet<StringTokenizer>();
      TreeSet<StringTokenizer> treeSet2 = new TreeSet<StringTokenizer>();
      TreeSet<StringTokenizer> treeSet3 = new TreeSet<StringTokenizer>();
      TreeSet<StringTokenizer> treeSet4 = new TreeSet<StringTokenizer>();
      TreeSet<StringTokenizer> treeSet5 = new TreeSet<StringTokenizer>();
      TreeSet<StringTokenizer> treeSet6 = new TreeSet<StringTokenizer>();
      LinkedList<SQLTransientException>[] linkedListArray0 = (LinkedList<SQLTransientException>[]) Array.newInstance(LinkedList.class, 3);
      LinkedList<SQLTransientException> linkedList0 = new LinkedList<SQLTransientException>();
      linkedListArray0[0] = linkedList0;
      LinkedList<SQLTransientException> linkedList1 = new LinkedList<SQLTransientException>();
      linkedListArray0[1] = linkedList1;
      LinkedList<SQLTransientException> linkedList2 = new LinkedList<SQLTransientException>();
      linkedListArray0[2] = linkedList2;
      treeSet6.toArray(linkedListArray0);
      TreeSet<StringTokenizer> treeSet7 = new TreeSet<StringTokenizer>();
      TreeSet<StringTokenizer> treeSet8 = new TreeSet<StringTokenizer>();
      TreeSet<StringTokenizer>[] treeSetArray0 = (TreeSet<StringTokenizer>[]) Array.newInstance(TreeSet.class, 3);
      treeSetArray0[0] = treeSet6;
      TreeSet<StringTokenizer> treeSet9 = new TreeSet<StringTokenizer>();
      treeSetArray0[1] = treeSet9;
      treeSetArray0[2] = treeSet2;
      ResettableIterator<TreeSet<StringTokenizer>> resettableIterator0 = IteratorUtils.arrayIterator(treeSetArray0);
      Closure<Object> closure1 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.apply((Iterator<TreeSet<StringTokenizer>>) resettableIterator0, (Closure<? super TreeSet<StringTokenizer>>) closure1);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) null);
      IteratorUtils.isEmpty(iterator0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) listIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("n55", "", sQLDataException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException(".");
      SQLWarning[] sQLWarningArray0 = new SQLWarning[2];
      SQLWarning sQLWarning0 = new SQLWarning("n55", "Predicate must not be null");
      sQLWarningArray0[0] = sQLWarning0;
      SQLWarning sQLWarning1 = new SQLWarning("");
      sQLWarningArray0[1] = sQLWarning1;
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLWarningArray0);
      Predicate<SQLWarning> predicate0 = EqualPredicate.equalPredicate(sQLWarning1);
      IteratorUtils.find((Iterator<SQLWarning>) resettableListIterator0, (Predicate<? super SQLWarning>) predicate0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0);
      Enumeration<Locale.FilteringMode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) singletonIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) enumeration0);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) vector0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("getKey() can only be called after next() and before remove()", "");
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.objectGraphIterator(sQLTransactionRollbackException0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Predicate<Object> predicate1 = ComparatorPredicate.comparatorPredicate((Object) sQLTransactionRollbackException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLTransientException>) iterator1, (Predicate<? super SQLTransientException>) predicate1);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[0];
      int int0 = (-595);
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0, (-595));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLIntegrityConstraintViolationException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      TreeSet<StringTokenizer> treeSet0 = new TreeSet<StringTokenizer>();
      TreeSet<StringTokenizer> treeSet1 = new TreeSet<StringTokenizer>();
      TreeSet<StringTokenizer> treeSet2 = new TreeSet<StringTokenizer>();
      TreeSet<StringTokenizer> treeSet3 = new TreeSet<StringTokenizer>();
      TreeSet<StringTokenizer>[] treeSetArray0 = (TreeSet<StringTokenizer>[]) Array.newInstance(TreeSet.class, 1);
      treeSetArray0[0] = treeSet0;
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator((DataTruncation) null);
      IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) listIterator0, (Iterator<? extends SQLWarning>) listIterator0);
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      IteratorUtils.emptyIterator();
      OrderedMapIterator<SQLRecoverableException, HashSet<SQLSyntaxErrorException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, HashSet<SQLSyntaxErrorException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, HashSet<SQLSyntaxErrorException>>(orderedMapIterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLRecoverableException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) properties2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Enumeration<SQLTimeoutException> enumeration0 = (Enumeration<SQLTimeoutException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      MockThrowable mockThrowable0 = new MockThrowable("IU/zF");
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLRecoverableException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      OrderedMapIterator<DataTruncation, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      IteratorUtils.isEmpty(orderedMapIterator0);
      SQLDataException sQLDataException0 = new SQLDataException("Huue");
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) listIterator0);
      SQLDataException sQLDataException1 = new SQLDataException(sQLDataException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLDataException0);
      sQLDataException1.addSuppressed(sQLTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("asQD$)w$C>-x", "p+sshL]", 0, sQLDataException1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(", Size: ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.singletonIterator((SQLTransientException) sQLTransactionRollbackException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("n55", "\"p", sQLTransactionRollbackException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("\"p", "ListIterator must not be null");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("n55", "asQD$)w$C>-x", 0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) null, (Collection<? super SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) stack0);
      IteratorUtils.size(resettableIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Offset parameter must not be negative.", (Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("Offset parameter must not be negative.", (String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) null, (Collection<? super SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("ExceptionFactory invoked");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      int int0 = 0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("ExceptionFactory invoked", "ExceptionFactory invoked", 0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 0, 0);
      EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientException>) null, 138);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) null);
      IteratorUtils.isEmpty(iterator0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) listIterator0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "");
      SQLTransientException sQLTransientException0 = new SQLTransientException("V", "V", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientException0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      HashSet<StringTokenizer>[] hashSetArray0 = (HashSet<StringTokenizer>[]) Array.newInstance(HashSet.class, 5);
      LinkedHashSet<StringTokenizer> linkedHashSet0 = new LinkedHashSet<StringTokenizer>();
      hashSetArray0[0] = (HashSet<StringTokenizer>) linkedHashSet0;
      HashSet<StringTokenizer> hashSet0 = new HashSet<StringTokenizer>();
      hashSetArray0[1] = hashSet0;
      HashSet<StringTokenizer> hashSet1 = new HashSet<StringTokenizer>();
      hashSetArray0[2] = hashSet1;
      LinkedHashSet<StringTokenizer> linkedHashSet1 = new LinkedHashSet<StringTokenizer>();
      hashSetArray0[3] = (HashSet<StringTokenizer>) linkedHashSet1;
      HashSet<StringTokenizer> hashSet2 = new HashSet<StringTokenizer>();
      hashSetArray0[4] = hashSet2;
      ObjectArrayIterator<HashSet<StringTokenizer>> objectArrayIterator0 = new ObjectArrayIterator<HashSet<StringTokenizer>>(hashSetArray0);
      IteratorUtils.toString((Iterator<HashSet<StringTokenizer>>) objectArrayIterator0, (Transformer<? super HashSet<StringTokenizer>, String>) transformer0, "V", "", "");
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, Predicate<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<SQLInvalidAuthorizationSpecException> list0 = IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      IteratorUtils.loopingListIterator(list0);
      IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0, 100);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      OrderedMapIterator<DataTruncation, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("asQD$)w$C>-x", "asQD$)w$C>-x");
      SQLTransientException sQLTransientException0 = new SQLTransientException("asQD$)w$C>-x", "asQD$)w$C>-x", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLInvalidAuthorizationSpecException0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLTransientException0);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLIntegrityConstraintViolationException0);
      SQLDataException sQLDataException0 = new SQLDataException(mockThrowable0);
      OrderedMapIterator<Locale.FilteringMode, SQLClientInfoException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Locale.FilteringMode, SQLClientInfoException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Locale.FilteringMode, ? extends SQLClientInfoException>) orderedMapIterator1);
      MapIterator<Locale.FilteringMode, SQLClientInfoException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      AbstractMapIteratorDecorator<Locale.FilteringMode, SQLClientInfoException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Locale.FilteringMode, SQLClientInfoException>(mapIterator1);
      Comparator<Locale.FilteringMode> comparator0 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) comparator0, (Iterator<? extends Locale.FilteringMode>) mapIterator0, (Iterator<? extends Locale.FilteringMode>) mapIterator1);
      Vector<SQLInvalidAuthorizationSpecException> vector1 = new Vector<SQLInvalidAuthorizationSpecException>();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) vector1);
      IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, 100);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLException>) null, (Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) null);
      IteratorUtils.isEmpty(iterator0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", "org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", sQLDataException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", "");
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLDataException0);
      SQLDataException sQLDataException1 = new SQLDataException(sQLIntegrityConstraintViolationException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator");
      iIOMetadataNode0.item((-473));
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLFeatureNotSupportedException0);
      stack0.add(sQLNonTransientConnectionException0);
      LoopingIterator<SQLNonTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLNonTransientConnectionException>(stack0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientConnectionException>) loopingIterator0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) null, (Collection<? super SQLTransientException>) list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<SQLTimeoutException> enumeration0 = (Enumeration<SQLTimeoutException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>(1);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) linkedHashSet0);
      Enumeration<SQLTimeoutException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration1, (Collection<? super SQLTransientException>) linkedHashSet0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ZB", sQLFeatureNotSupportedException0);
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      stack0.add(sQLNonTransientConnectionException0);
      LoopingIterator<SQLNonTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLNonTransientConnectionException>(stack0);
      Iterator<SQLNonTransientConnectionException> iterator1 = IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientConnectionException>) loopingIterator0);
      // Undeclared exception!
      IteratorUtils.toArray(iterator1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Vector<Locale.FilteringMode> vector0 = new Stack<Locale.FilteringMode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) null);
      IteratorUtils.isEmpty(iterator0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) listIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("n55", "", 0, sQLDataException0);
      IteratorUtils.singletonIterator((SQLTransientException) sQLTimeoutException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Closure must not be null");
      iIOMetadataNode0.getElementsByTagName("");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      TreeSet<StringTokenizer> treeSet0 = new TreeSet<StringTokenizer>();
      TreeSet<StringTokenizer> treeSet1 = new TreeSet<StringTokenizer>();
      TreeSet<StringTokenizer> treeSet2 = new TreeSet<StringTokenizer>();
      TreeSet<StringTokenizer> treeSet3 = new TreeSet<StringTokenizer>();
      TreeSet<StringTokenizer> treeSet4 = new TreeSet<StringTokenizer>();
      TreeSet<StringTokenizer>[] treeSetArray0 = (TreeSet<StringTokenizer>[]) Array.newInstance(TreeSet.class, 6);
      treeSetArray0[0] = treeSet4;
      treeSetArray0[1] = treeSet4;
      treeSetArray0[2] = treeSet3;
      treeSetArray0[3] = treeSet3;
      treeSetArray0[4] = treeSet3;
      treeSetArray0[5] = treeSet2;
      ObjectArrayListIterator<TreeSet<StringTokenizer>> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<TreeSet<StringTokenizer>>(treeSetArray0, (-497), (-497));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OrderedMapIterator<DataTruncation, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("asQD$)w$C>-x", "asQD$)w$C>-x");
      SQLTransientException sQLTransientException0 = new SQLTransientException("asQD$)w$C>-x", "asQD$)w$C>-x", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLInvalidAuthorizationSpecException0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLTransientException0);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLIntegrityConstraintViolationException0);
      SQLDataException sQLDataException0 = new SQLDataException(mockThrowable0);
      IteratorUtils.getIterator(mockThrowable0);
      Comparator<Locale.FilteringMode> comparator0 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KfZ|PB");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("asQD$)w$C>-x");
      IteratorUtils.nodeListIterator(nodeList0);
      TreeSet<StringTokenizer>[] treeSetArray0 = (TreeSet<StringTokenizer>[]) Array.newInstance(TreeSet.class, 5);
      TreeSet<StringTokenizer> treeSet0 = new TreeSet<StringTokenizer>();
      treeSetArray0[0] = treeSet0;
      TreeSet<StringTokenizer> treeSet1 = new TreeSet<StringTokenizer>();
      treeSetArray0[1] = treeSet1;
      TreeSet<StringTokenizer> treeSet2 = new TreeSet<StringTokenizer>();
      treeSetArray0[2] = treeSet2;
      TreeSet<StringTokenizer> treeSet3 = new TreeSet<StringTokenizer>();
      treeSetArray0[3] = treeSet3;
      TreeSet<StringTokenizer> treeSet4 = new TreeSet<StringTokenizer>();
      treeSetArray0[4] = treeSet4;
      ObjectArrayListIterator<TreeSet<StringTokenizer>> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<TreeSet<StringTokenizer>>(treeSetArray0, (-497), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MapIterator<SQLClientInfoException, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) mapIterator0, (Transformer<? super SQLClientInfoException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      OrderedMapIterator<Properties, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, Integer>(orderedMapIterator0);
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      IteratorUtils.filteredIterator((Iterator<? extends Properties>) orderedMapIterator0, (Predicate<? super Properties>) predicate0);
      OrderedMapIterator<HashMap<SQLException, SQLNonTransientException>, Transformer<Object, String>> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<HashMap<SQLException, SQLNonTransientException>>) orderedMapIterator1, (Transformer<? super HashMap<SQLException, SQLNonTransientException>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "");
      SQLTransientException sQLTransientException0 = new SQLTransientException("V", "V", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLIntegrityConstraintViolationException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.item((-2832));
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("l%[+pD'#A:ps@)[WA", sQLInvalidAuthorizationSpecException0);
      stack0.add(sQLNonTransientConnectionException0);
      LoopingIterator<SQLNonTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLNonTransientConnectionException>(stack0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientConnectionException>) loopingIterator0);
      Enumeration<SQLTimeoutException> enumeration0 = null;
      // Undeclared exception!
      IteratorUtils.toList((Iterator<?>) iterator0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      OrderedMapIterator<DataTruncation, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("asQD$)w$C>-x", "asQD$)w$C>-x");
      SQLTransientException sQLTransientException0 = new SQLTransientException("asQD$)w$C>-x", "asQD$)w$C>-x", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLInvalidAuthorizationSpecException0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLTransientException0);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLIntegrityConstraintViolationException0);
      SQLDataException sQLDataException0 = new SQLDataException(mockThrowable0);
      IteratorUtils.getIterator(mockThrowable0);
      OrderedMapIterator<Locale.FilteringMode, SQLClientInfoException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Locale.FilteringMode, SQLClientInfoException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Locale.FilteringMode, ? extends SQLClientInfoException>) orderedMapIterator1);
      MapIterator<Locale.FilteringMode, SQLClientInfoException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Locale.FilteringMode, ? extends SQLClientInfoException>) orderedMapIterator1);
      Comparator<Locale.FilteringMode> comparator0 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) comparator0, (Iterator<? extends Locale.FilteringMode>) mapIterator0, (Iterator<? extends Locale.FilteringMode>) mapIterator1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      DataTruncation dataTruncation0 = new DataTruncation((-1448), false, true, 1, 1, sQLTransientConnectionException0);
      IteratorUtils.singletonIterator((SQLWarning) dataTruncation0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[7];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      TreeSet<SQLSyntaxErrorException>[] treeSetArray0 = (TreeSet<SQLSyntaxErrorException>[]) Array.newInstance(TreeSet.class, 3);
      TreeSet<SQLSyntaxErrorException> treeSet0 = new TreeSet<SQLSyntaxErrorException>();
      treeSetArray0[0] = treeSet0;
      TreeSet<SQLSyntaxErrorException> treeSet1 = new TreeSet<SQLSyntaxErrorException>();
      treeSetArray0[1] = treeSet1;
      TreeSet<SQLSyntaxErrorException> treeSet2 = new TreeSet<SQLSyntaxErrorException>();
      treeSetArray0[2] = treeSet2;
      ResettableListIterator<TreeSet<SQLSyntaxErrorException>> resettableListIterator0 = IteratorUtils.arrayListIterator(treeSetArray0, 1, 1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) onePredicate0;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicateArray0[0]);
      predicateArray0[1] = (Predicate<Object>) notPredicate0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) treeSet2, comparator0);
      predicateArray0[2] = predicate0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("+T");
      Predicate<Object> predicate1 = IdentityPredicate.identityPredicate((Object) sQLTimeoutException0);
      predicateArray0[3] = predicate1;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("+T", "");
      Predicate<Object> predicate2 = IdentityPredicate.identityPredicate((Object) sQLSyntaxErrorException0);
      predicateArray0[4] = predicate2;
      Predicate<Object> predicate3 = TruePredicate.truePredicate();
      predicateArray0[5] = predicate3;
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate2, predicate3);
      predicateArray0[6] = (Predicate<Object>) orPredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure0);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate3, closure1, true);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(allPredicate0, whileClosure0);
      IteratorUtils.apply((Iterator<TreeSet<SQLSyntaxErrorException>>) resettableListIterator0, (Closure<? super TreeSet<SQLSyntaxErrorException>>) ifClosure0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      DataTruncation dataTruncation0 = new DataTruncation((-1448), false, true, 1, 1, sQLTransientConnectionException0);
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.singletonIterator((SQLWarning) dataTruncation0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLTransientConnectionException0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("]", "?{)R|_t[9t3");
      IdentityPredicate.identityPredicate(stringTokenizer0);
      IteratorUtils.find((Iterator<SQLWarning>) resettableIterator0, (Predicate<? super SQLWarning>) identityPredicate0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0);
      IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) singletonIterator0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      ForClosure.forClosure((-1448), (Closure<? super Object>) closure0);
      TreeSet<StringTokenizer>[] treeSetArray0 = (TreeSet<StringTokenizer>[]) Array.newInstance(TreeSet.class, 9);
      TreeSet<StringTokenizer> treeSet0 = new TreeSet<StringTokenizer>();
      treeSetArray0[0] = treeSet0;
      TreeSet<StringTokenizer> treeSet1 = new TreeSet<StringTokenizer>();
      treeSetArray0[1] = treeSet1;
      TreeSet<StringTokenizer> treeSet2 = new TreeSet<StringTokenizer>();
      treeSetArray0[2] = treeSet2;
      TreeSet<StringTokenizer> treeSet3 = new TreeSet<StringTokenizer>();
      treeSetArray0[3] = treeSet3;
      TreeSet<StringTokenizer> treeSet4 = new TreeSet<StringTokenizer>();
      treeSetArray0[4] = treeSet4;
      TreeSet<StringTokenizer> treeSet5 = new TreeSet<StringTokenizer>();
      treeSetArray0[5] = treeSet5;
      TreeSet<StringTokenizer> treeSet6 = new TreeSet<StringTokenizer>();
      treeSetArray0[6] = treeSet6;
      TreeSet<StringTokenizer> treeSet7 = new TreeSet<StringTokenizer>();
      treeSetArray0[7] = treeSet7;
      TreeSet<StringTokenizer> treeSet8 = new TreeSet<StringTokenizer>();
      treeSetArray0[8] = treeSet8;
      ResettableIterator<TreeSet<StringTokenizer>> resettableIterator1 = IteratorUtils.arrayIterator(treeSetArray0);
      IteratorUtils.apply((Iterator<TreeSet<StringTokenizer>>) resettableIterator1, (Closure<? super TreeSet<StringTokenizer>>) closure0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashSet<StringTokenizer> hashSet0 = new HashSet<StringTokenizer>();
      SingletonListIterator<HashSet<StringTokenizer>> singletonListIterator0 = new SingletonListIterator<HashSet<StringTokenizer>>(hashSet0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<HashSet<StringTokenizer>>) singletonListIterator0, (Transformer<? super HashSet<StringTokenizer>, String>) transformer0, "setValue() is not supported", "sR", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Hashtable<SQLSyntaxErrorException, SQLException> hashtable0 = new Hashtable<SQLSyntaxErrorException, SQLException>();
      SingletonIterator<Hashtable<SQLSyntaxErrorException, SQLException>> singletonIterator0 = new SingletonIterator<Hashtable<SQLSyntaxErrorException, SQLException>>(hashtable0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apahe.commons.collections4.IteratorUtils");
      IteratorUtils.getIterator(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      OrderedMapIterator<DataTruncation, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("ANC=*=flq<l5", "");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransactionRollbackException1);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransactionRollbackException1);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "iA", false);
      IteratorUtils.getIterator(stringTokenizer0);
      OrderedMapIterator<Locale.FilteringMode, SQLClientInfoException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Locale.FilteringMode, SQLClientInfoException>) orderedMapIterator1);
      MapIterator<Locale.FilteringMode, SQLClientInfoException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Locale.FilteringMode, ? extends SQLClientInfoException>) orderedMapIterator1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) comparator0, (Iterator<? extends Locale.FilteringMode>) mapIterator0, (Iterator<? extends Locale.FilteringMode>) orderedMapIterator1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      OrderedMapIterator<DataTruncation, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("asQD$)w$C>-x", "asQD$)w$C>-x");
      SQLTransientException sQLTransientException0 = new SQLTransientException("asQD$)w$C>-x", "asQD$)w$C>-x", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLInvalidAuthorizationSpecException0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLTransientException0);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLIntegrityConstraintViolationException0);
      SQLDataException sQLDataException0 = new SQLDataException(mockThrowable0);
      IteratorUtils.getIterator(mockThrowable0);
      OrderedMapIterator<Locale.FilteringMode, SQLClientInfoException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Locale.FilteringMode, SQLClientInfoException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Locale.FilteringMode, ? extends SQLClientInfoException>) orderedMapIterator1);
      MapIterator<Locale.FilteringMode, SQLClientInfoException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Locale.FilteringMode, ? extends SQLClientInfoException>) orderedMapIterator1);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) mapIterator1);
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      LoopingIterator<SQLTransactionRollbackException> loopingIterator0 = new LoopingIterator<SQLTransactionRollbackException>(hashSet0);
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) loopingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) list0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "");
      SQLTransientException sQLTransientException0 = new SQLTransientException("V", "V", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLIntegrityConstraintViolationException0);
      IteratorUtils.getIterator(sQLDataException0);
      Comparator<Locale.FilteringMode> comparator0 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<Locale.FilteringMode, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Locale.FilteringMode, SQLClientInfoException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Locale.FilteringMode, SQLClientInfoException>) orderedMapIterator0);
      MapIterator<Locale.FilteringMode, SQLClientInfoException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Locale.FilteringMode, ? extends SQLClientInfoException>) mapIterator0);
      IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) comparator0, (Iterator<? extends Locale.FilteringMode>) mapIterator1, (Iterator<? extends Locale.FilteringMode>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)85;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@AoL43~3");
      IteratorUtils.getIterator((Object) null);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, Class<SQLNonTransientException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[9];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Offset parameter must not be negative.", (Throwable) null);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(")iA", "Offset parameter must not be negative.");
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException(")iA", "Iterator must not be null");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("Entry does not exist: ", (Map<String, ClientInfoStatus>) null, sQLTransactionRollbackException0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("6 tB.$kOFDaJdl;", hashtable0, sQLTransactionRollbackException1);
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException((String) null, hashtable0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[2];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException2;
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException4;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      ConstantFactory<Properties> constantFactory0 = new ConstantFactory<Properties>((Properties) null);
      Transformer<Object, Properties> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Properties>) constantFactory0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Transformer<? super SQLClientInfoException, ? extends Properties>) transformer0);
      IteratorUtils.emptyMapIterator();
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 2);
      Integer integer0 = new Integer(8);
      Iterator<Integer> iterator0 = IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) null);
      iteratorArray0[0] = iterator0;
      Stack<Integer> stack0 = new Stack<Integer>();
      ReverseListIterator<Integer> reverseListIterator0 = new ReverseListIterator<Integer>(stack0);
      iteratorArray0[1] = (Iterator<Integer>) reverseListIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends Integer>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>(1);
      MapIterator<SQLTimeoutException, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) mapIterator0, 1);
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(list0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) loopingListIterator0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) linkedHashSet0);
      Enumeration<SQLTimeoutException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration1, (Collection<? super SQLTransientException>) linkedHashSet0);
      MockThrowable mockThrowable0 = new MockThrowable("IU/zF");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(mockThrowable0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("]ktAiN*tf]]ml@_R", "u#|U", 10, sQLDataException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTimeoutException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("IU/zF", "", 10);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLSyntaxErrorException1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<SQLTimeoutException> enumeration0 = (Enumeration<SQLTimeoutException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>(1);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) linkedHashSet0);
      Enumeration<SQLTimeoutException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration1, (Collection<? super SQLTransientException>) linkedHashSet0);
      MockThrowable mockThrowable0 = new MockThrowable("IU/zF");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(mockThrowable0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", 138, sQLTimeoutException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("-U`erp");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("-U`erp");
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("FO%>}[AA_#?");
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[0];
      IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[9];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Offset parameter must not be negative.", (Throwable) null);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(")iA", "Offset parameter must not be negative.");
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException(")iA", "Iterator must not be null");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(")iA", (Map<String, ClientInfoStatus>) null, sQLTransactionRollbackException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLClientInfoException0);
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      stack0.add(sQLNonTransientConnectionException0);
      LoopingIterator<SQLNonTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLNonTransientConnectionException>(stack0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientConnectionException>) loopingIterator0);
      IteratorUtils.emptyListIterator();
      ResettableListIterator<EnumSet<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("org.apache.commons.collections4.functors.NOPTransformer");
      IteratorUtils.toString((Iterator<EnumSet<Locale.FilteringMode>>) resettableListIterator0, (Transformer<? super EnumSet<Locale.FilteringMode>, String>) constantTransformer0);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      OrderedMapIterator<StringTokenizer, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<StringTokenizer, ? extends BatchUpdateException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("I4qI");
      IteratorUtils.toString((Iterator<HashSet<StringTokenizer>>) null, (Transformer<? super HashSet<StringTokenizer>, String>) transformer0, "I4qI", "I4qI", "ExceptionTransformer invoked");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((TreeSet<SQLNonTransientConnectionException>[]) null, 757, 757);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("ExceptionFactory invoked");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("ExceptionFactory invoked", "ExceptionFactory invoked", 0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 0, 0);
      Iterator<SQLTimeoutException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toList((Iterator<? extends SQLTransientException>) iterator0, 138);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Properties[] propertiesArray0 = new Properties[1];
      Properties properties0 = new Properties();
      properties0.keySet();
      propertiesArray0[0] = properties0;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      IteratorUtils.filteredIterator((Iterator<? extends Properties>) resettableListIterator0, (Predicate<? super Properties>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      DataTruncation dataTruncation0 = new DataTruncation((-1448), false, true, 1, 1, sQLTransientConnectionException0);
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.singletonIterator((SQLWarning) dataTruncation0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLTransientConnectionException0);
      IteratorUtils.find((Iterator<SQLWarning>) resettableIterator0, (Predicate<? super SQLWarning>) identityPredicate0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[7];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("#eAxt8I/C,&QD]>:row");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode((String) null);
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode();
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, (-1239), 100, sQLTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "", 1, sQLTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("vZO,hF=&OcR2:9ZaB<", sQLTransactionRollbackException0);
      Stack<SQLIntegrityConstraintViolationException> stack0 = new Stack<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("@{SuK0zp:nj", "", (-278), dataTruncation0);
      sQLIntegrityConstraintViolationException1.getStackTrace();
      stack0.add(sQLIntegrityConstraintViolationException1);
      ResettableIterator<Stack<SQLIntegrityConstraintViolationException>> resettableIterator0 = IteratorUtils.singletonIterator(stack0);
      IteratorUtils.size(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("WwsK!ja#", hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("WwsK!ja#", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: WwsK!ja#", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("WwsK!ja#", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: WwsK!ja#", sQLClientInfoException0.toString());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("add() method is not supported", "WwsK!ja#", map0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("WwsK!ja#", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: WwsK!ja#", sQLClientInfoException0.toString());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("WwsK!ja#", sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: add() method is not supported", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("add() method is not supported", sQLClientInfoException1.getMessage());
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLClientInfoException1);
      
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException1.getFailedProperties();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("WwsK!ja#", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: WwsK!ja#", sQLClientInfoException0.toString());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("WwsK!ja#", sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: add() method is not supported", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("add() method is not supported", sQLClientInfoException1.getMessage());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNotNull(map1);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException1);
      assertSame(map0, map1);
      assertNotSame(sQLClientInfoException1, sQLClientInfoException0);
      assertSame(map1, map0);
      
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(map1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("WwsK!ja#", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: WwsK!ja#", sQLClientInfoException0.toString());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("WwsK!ja#", sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: add() method is not supported", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("add() method is not supported", sQLClientInfoException1.getMessage());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertNull(sQLClientInfoException2.getMessage());
      assertNull(sQLClientInfoException2.getSQLState());
      assertEquals(0, sQLClientInfoException2.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException2.toString());
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLClientInfoException2);
      
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("J)X#(PF", "add() method is not supported", 14, map0, sQLClientInfoException1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("WwsK!ja#", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: WwsK!ja#", sQLClientInfoException0.toString());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("WwsK!ja#", sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: add() method is not supported", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("add() method is not supported", sQLClientInfoException1.getMessage());
      assertEquals("java.sql.SQLClientInfoException: J)X#(PF", sQLClientInfoException3.toString());
      assertEquals("J)X#(PF", sQLClientInfoException3.getMessage());
      assertEquals(14, sQLClientInfoException3.getErrorCode());
      assertEquals("add() method is not supported", sQLClientInfoException3.getSQLState());
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException2));
      assertNotNull(sQLClientInfoException3);
      
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("add() method is not supported", "WwsK!ja#", map0, (Throwable) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("WwsK!ja#", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: WwsK!ja#", sQLClientInfoException0.toString());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, sQLClientInfoException4.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: add() method is not supported", sQLClientInfoException4.toString());
      assertEquals("add() method is not supported", sQLClientInfoException4.getMessage());
      assertEquals("WwsK!ja#", sQLClientInfoException4.getSQLState());
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException3));
      assertNotNull(sQLClientInfoException4);
      
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException(map1, (Throwable) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("WwsK!ja#", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: WwsK!ja#", sQLClientInfoException0.toString());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("WwsK!ja#", sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: add() method is not supported", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("add() method is not supported", sQLClientInfoException1.getMessage());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException5.toString());
      assertEquals(0, sQLClientInfoException5.getErrorCode());
      assertNull(sQLClientInfoException5.getMessage());
      assertNull(sQLClientInfoException5.getSQLState());
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException4));
      assertNotNull(sQLClientInfoException5);
      
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException();
      assertNull(sQLClientInfoException6.getMessage());
      assertEquals(0, sQLClientInfoException6.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException6.toString());
      assertNull(sQLClientInfoException6.getSQLState());
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException2));
      assertNotNull(sQLClientInfoException6);
      
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException("Entry does not exist: ", hashMap0, sQLClientInfoException0);
      assertEquals("Entry does not exist: ", sQLClientInfoException7.getMessage());
      assertEquals(0, sQLClientInfoException7.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: Entry does not exist: ", sQLClientInfoException7.toString());
      assertNull(sQLClientInfoException7.getSQLState());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("WwsK!ja#", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: WwsK!ja#", sQLClientInfoException0.toString());
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException2));
      assertNotNull(sQLClientInfoException7);
      
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException7;
      SQLClientInfoException sQLClientInfoException8 = new SQLClientInfoException("WwsK!ja#", "Entry does not exist: ", 128, map1, (Throwable) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException: WwsK!ja#", sQLClientInfoException8.toString());
      assertEquals("Entry does not exist: ", sQLClientInfoException8.getSQLState());
      assertEquals("WwsK!ja#", sQLClientInfoException8.getMessage());
      assertEquals(128, sQLClientInfoException8.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("WwsK!ja#", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: WwsK!ja#", sQLClientInfoException0.toString());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("WwsK!ja#", sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: add() method is not supported", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("add() method is not supported", sQLClientInfoException1.getMessage());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException7));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException7));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException7));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException4));
      assertNotNull(sQLClientInfoException8);
      
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException8;
      SQLClientInfoException sQLClientInfoException9 = new SQLClientInfoException("org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", hashMap0, sQLClientInfoException8);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException: WwsK!ja#", sQLClientInfoException8.toString());
      assertEquals("Entry does not exist: ", sQLClientInfoException8.getSQLState());
      assertEquals("WwsK!ja#", sQLClientInfoException8.getMessage());
      assertEquals(128, sQLClientInfoException8.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("WwsK!ja#", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: WwsK!ja#", sQLClientInfoException0.toString());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNull(sQLClientInfoException9.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", sQLClientInfoException9.toString());
      assertEquals(0, sQLClientInfoException9.getErrorCode());
      assertEquals("org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", sQLClientInfoException9.getMessage());
      assertEquals("WwsK!ja#", sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: add() method is not supported", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("add() method is not supported", sQLClientInfoException1.getMessage());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException7));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException7));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException8));
      assertFalse(sQLClientInfoException9.equals((Object)sQLClientInfoException8));
      assertFalse(sQLClientInfoException9.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException9.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException9.equals((Object)sQLClientInfoException7));
      assertFalse(sQLClientInfoException9.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException9.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException9.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException9.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException9.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException7));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException8));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException4));
      assertNotNull(sQLClientInfoException9);
      
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException9;
      SQLClientInfoException sQLClientInfoException10 = new SQLClientInfoException("k^2RljtFIY", hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException10.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: k^2RljtFIY", sQLClientInfoException10.toString());
      assertEquals(0, sQLClientInfoException10.getErrorCode());
      assertEquals("k^2RljtFIY", sQLClientInfoException10.getMessage());
      assertFalse(sQLClientInfoException10.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException10.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException10.equals((Object)sQLClientInfoException8));
      assertFalse(sQLClientInfoException10.equals((Object)sQLClientInfoException9));
      assertFalse(sQLClientInfoException10.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException10.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException10.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException10.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException10.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException10.equals((Object)sQLClientInfoException7));
      assertNotNull(sQLClientInfoException10);
      
      sQLClientInfoExceptionArray0[8] = sQLClientInfoException10;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      assertEquals(9, sQLClientInfoExceptionArray0.length);
      assertNotNull(resettableIterator0);
      
      ConstantFactory<Properties> constantFactory0 = new ConstantFactory<Properties>((Properties) null);
      assertNotNull(constantFactory0);
      
      Transformer<Object, Properties> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Properties>) constantFactory0);
      assertNotNull(transformer0);
      
      Iterator<Properties> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Transformer<? super SQLClientInfoException, ? extends Properties>) transformer0);
      assertEquals(9, sQLClientInfoExceptionArray0.length);
      assertNotNull(iterator0);
      
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<BatchUpdateException>) orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 4);
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) resettableListIterator0, (Iterator<? extends SQLDataException>) iteratorArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MapIterator<IIOMetadataNode, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) mapIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[2];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("hEN/W.pfV|>N8|(=", "");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLIntegrityConstraintViolationException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "hEN/W.pfV|>N8|(=", 2451, sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("hEN/W.pfV|>N8|(=", "G{_-<.]FlWi--\"Zg");
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException2;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      assertFalse(resettableListIterator0.hasPrevious());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException2, 2451, (-256));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[9];
      String string0 = "Offset parameter must not be negative.";
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "Offset parameter must not be negative.", (-42), (-42));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<?>[]) iteratorArray0);
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("-[He=.[T!", ":;T7^PJw{^a]EX;*");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLIntegrityConstraintViolationException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("^6/^<X+%gu0", "fF6qYv8", 9, sQLIntegrityConstraintViolationException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("jx:", "Enumeration must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLInvalidAuthorizationSpecException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MapIterator<IIOMetadataNode, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) mapIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("hEN/W.pfV|>N8|(=", "");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLIntegrityConstraintViolationException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "hEN/W.pfV|>N8|(=", 2451, sQLInvalidAuthorizationSpecException0);
      int[] intArray0 = new int[6];
      intArray0[0] = 2451;
      intArray0[1] = 2451;
      intArray0[2] = 2451;
      intArray0[3] = 2451;
      intArray0[4] = 2451;
      intArray0[5] = 2451;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[8];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode();
      iIOMetadataNodeArray0[7] = iIOMetadataNode7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 138);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[0];
      IteratorUtils.arrayIterator(propertiesArray0);
      OrderedMapIterator<Integer, EnumSet<Locale.FilteringMode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends EnumSet<Locale.FilteringMode>>) orderedMapIterator0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int[] intArray0 = new int[6];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 4;
      intArray0[4] = 4;
      intArray0[5] = 4;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("g.;1|$g(~", "Of[dYuQ1V@W2Y>h)", 4, intArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("u", "g.;1|$g(~", 4, hashMap0, batchUpdateException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("Of[dYuQ1V@W2Y>h)", "q3nB!\"F{Pxc", 4, map0, batchUpdateException0);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("q3nB!\"F{Pxc", hashMap0, batchUpdateException0);
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException((String) null, map0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLClientInfoException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[9];
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransientException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("yB`4X^(", "", 382);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", "", 0, sQLNonTransientConnectionException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("6;o|R*f'^Yb!W\"D", "", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("j0*8$_]iPaRo4", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException2);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException((String) null, "yB`4X^(", 0);
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException("", (String) null);
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException6;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException7 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException4);
      sQLFeatureNotSupportedExceptionArray0[7] = sQLFeatureNotSupportedException7;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException8 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException5);
      sQLFeatureNotSupportedExceptionArray0[8] = sQLFeatureNotSupportedException8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 382);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      ZippingIterator<SQLWarning> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) resettableIterator0, (Iterator<? extends SQLWarning>) resettableIterator0);
      assertNotNull(zippingIterator0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.collections4.map.AbstractHashedMap$ValuesIterator";
      String string0 = "";
      stringArray0[1] = "";
      int int0 = 907;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringArray0, 907);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      ListIterator<EnumSet<Locale.FilteringMode>> listIterator0 = EmptyListIterator.emptyListIterator();
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      ZippingIterator<EnumSet<Locale.FilteringMode>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) listIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) listIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) listIterator0);
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(zippingIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) zippingIterator0, (-3637L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      ListIterator<EnumSet<Locale.FilteringMode>> listIterator0 = EmptyListIterator.emptyListIterator();
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      ZippingIterator<EnumSet<Locale.FilteringMode>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) listIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) listIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) listIterator0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(zippingIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) zippingIterator0, (-3646L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(sQLDataException0);
      
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) null);
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(iterator0);
      
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertFalse(boolean0);
      
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      Iterable<SQLDataException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) listIterator0);
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(iterable0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("n55", "", 0, sQLDataException0);
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("n55", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: n55", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.singletonIterator((SQLTransientException) sQLTimeoutException0);
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("n55", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: n55", sQLTimeoutException0.toString());
      assertNotNull(resettableIterator0);
      
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[8];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("n55", "", sQLDataException0);
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: n55", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("n55", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "wkl9e~z61{");
      assertEquals("wkl9e~z61{", sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("");
      assertEquals(0, sQLInvalidAuthorizationSpecException2.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException2.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException2.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException2.toString());
      assertFalse(sQLInvalidAuthorizationSpecException2.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException2.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertNotNull(sQLInvalidAuthorizationSpecException2);
      
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException(".");
      assertEquals(".", sQLInvalidAuthorizationSpecException3.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException3.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException3.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: .", sQLInvalidAuthorizationSpecException3.toString());
      assertFalse(sQLInvalidAuthorizationSpecException3.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException3.equals((Object)sQLInvalidAuthorizationSpecException2));
      assertFalse(sQLInvalidAuthorizationSpecException3.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertNotNull(sQLInvalidAuthorizationSpecException3);
      
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("", "org.apache.commons.collections4.IteratorUtils", (-1));
      assertEquals((-1), sQLInvalidAuthorizationSpecException4.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException4.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException4.getMessage());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLInvalidAuthorizationSpecException4.getSQLState());
      assertFalse(sQLInvalidAuthorizationSpecException4.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException4.equals((Object)sQLInvalidAuthorizationSpecException3));
      assertFalse(sQLInvalidAuthorizationSpecException4.equals((Object)sQLInvalidAuthorizationSpecException2));
      assertFalse(sQLInvalidAuthorizationSpecException4.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertNotNull(sQLInvalidAuthorizationSpecException4);
      
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("wkl9e~z61{");
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: wkl9e~z61{", sQLInvalidAuthorizationSpecException5.toString());
      assertNull(sQLInvalidAuthorizationSpecException5.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException5.getErrorCode());
      assertEquals("wkl9e~z61{", sQLInvalidAuthorizationSpecException5.getMessage());
      assertFalse(sQLInvalidAuthorizationSpecException5.equals((Object)sQLInvalidAuthorizationSpecException4));
      assertFalse(sQLInvalidAuthorizationSpecException5.equals((Object)sQLInvalidAuthorizationSpecException3));
      assertFalse(sQLInvalidAuthorizationSpecException5.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException5.equals((Object)sQLInvalidAuthorizationSpecException2));
      assertFalse(sQLInvalidAuthorizationSpecException5.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertNotNull(sQLInvalidAuthorizationSpecException5);
      
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException("n55", "wkl9e~z61{", sQLInvalidAuthorizationSpecException0);
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("wkl9e~z61{", sQLInvalidAuthorizationSpecException6.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException6.getErrorCode());
      assertEquals("n55", sQLInvalidAuthorizationSpecException6.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: n55", sQLInvalidAuthorizationSpecException6.toString());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: n55", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("n55", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertFalse(sQLInvalidAuthorizationSpecException6.equals((Object)sQLInvalidAuthorizationSpecException4));
      assertFalse(sQLInvalidAuthorizationSpecException6.equals((Object)sQLInvalidAuthorizationSpecException5));
      assertFalse(sQLInvalidAuthorizationSpecException6.equals((Object)sQLInvalidAuthorizationSpecException3));
      assertFalse(sQLInvalidAuthorizationSpecException6.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException6.equals((Object)sQLInvalidAuthorizationSpecException2));
      assertFalse(sQLInvalidAuthorizationSpecException6.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException4));
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException5));
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException2));
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException3));
      assertNotNull(sQLInvalidAuthorizationSpecException6);
      
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException6;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException7 = new SQLInvalidAuthorizationSpecException("K4 l", sQLTimeoutException0);
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("n55", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: n55", sQLTimeoutException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException7.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: K4 l", sQLInvalidAuthorizationSpecException7.toString());
      assertEquals("K4 l", sQLInvalidAuthorizationSpecException7.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException7.getErrorCode());
      assertFalse(sQLInvalidAuthorizationSpecException7.equals((Object)sQLInvalidAuthorizationSpecException2));
      assertFalse(sQLInvalidAuthorizationSpecException7.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException7.equals((Object)sQLInvalidAuthorizationSpecException4));
      assertFalse(sQLInvalidAuthorizationSpecException7.equals((Object)sQLInvalidAuthorizationSpecException3));
      assertFalse(sQLInvalidAuthorizationSpecException7.equals((Object)sQLInvalidAuthorizationSpecException6));
      assertFalse(sQLInvalidAuthorizationSpecException7.equals((Object)sQLInvalidAuthorizationSpecException5));
      assertFalse(sQLInvalidAuthorizationSpecException7.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertNotNull(sQLInvalidAuthorizationSpecException7);
      
      sQLInvalidAuthorizationSpecExceptionArray0[7] = sQLInvalidAuthorizationSpecException7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 1698, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(0, int0);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("ExceptionFactory invoked");
      assertEquals("java.sql.SQLSyntaxErrorException: ExceptionFactory invoked", sQLSyntaxErrorException0.toString());
      assertEquals("ExceptionFactory invoked", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      int int0 = 0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("ExceptionFactory invoked", "ExceptionFactory invoked", 0);
      assertEquals("java.sql.SQLSyntaxErrorException: ExceptionFactory invoked", sQLSyntaxErrorException1.toString());
      assertEquals("ExceptionFactory invoked", sQLSyntaxErrorException1.getSQLState());
      assertEquals("ExceptionFactory invoked", sQLSyntaxErrorException1.getMessage());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertNotNull(sQLSyntaxErrorException1);
      
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(2, sQLSyntaxErrorExceptionArray0.length);
      assertNotNull(resettableListIterator0);
      
      Iterator<SQLTimeoutException> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
      
      List<SQLTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientException>) iterator0, 138);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MapIterator<DataTruncation, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<DataTruncation, Integer> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends Integer>) mapIterator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      assertNotNull(mapIterator1);
      
      Iterator<DataTruncation> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) mapIterator1);
      assertFalse(mapIterator0.equals((Object)mapIterator1));
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      assertNotNull(iterator0);
      
      ArrayListIterator<SQLInvalidAuthorizationSpecException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLInvalidAuthorizationSpecException>(mapIterator1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException((String) null, ".qq%Ds^Ez", (-2857));
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(".qq%Ds^Ez", sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals((-2857), sQLDataException0.getErrorCode());
      assertNotNull(sQLDataException0);
      
      sQLDataException0.printStackTrace();
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(".qq%Ds^Ez", sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals((-2857), sQLDataException0.getErrorCode());
      
      Spliterator<Throwable> spliterator0 = sQLDataException0.spliterator();
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(".qq%Ds^Ez", sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals((-2857), sQLDataException0.getErrorCode());
      assertNotNull(spliterator0);
      
      sQLDataException0.printStackTrace();
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(".qq%Ds^Ez", sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals((-2857), sQLDataException0.getErrorCode());
      
      Throwable[] throwableArray0 = sQLDataException0.getSuppressed();
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(".qq%Ds^Ez", sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals((-2857), sQLDataException0.getErrorCode());
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(".qq%Ds^Ez", sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals((-2857), sQLDataException0.getErrorCode());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[8];
      SQLDataException sQLDataException0 = new SQLDataException("]gR>u");
      assertEquals("java.sql.SQLDataException: ]gR>u", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("]gR>u", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("c9+5_}", "c9+5_}", 5675);
      assertEquals("c9+5_}", sQLDataException1.getMessage());
      assertEquals("java.sql.SQLDataException: c9+5_}", sQLDataException1.toString());
      assertEquals(5675, sQLDataException1.getErrorCode());
      assertEquals("c9+5_}", sQLDataException1.getSQLState());
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertNotNull(sQLDataException1);
      
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("c9+5_}");
      assertEquals("c9+5_}", sQLDataException2.getMessage());
      assertEquals(0, sQLDataException2.getErrorCode());
      assertNull(sQLDataException2.getSQLState());
      assertEquals("java.sql.SQLDataException: c9+5_}", sQLDataException2.toString());
      assertFalse(sQLDataException2.equals((Object)sQLDataException0));
      assertFalse(sQLDataException2.equals((Object)sQLDataException1));
      assertNotNull(sQLDataException2);
      
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException();
      assertEquals(0, sQLDataException3.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException3.toString());
      assertNull(sQLDataException3.getSQLState());
      assertNull(sQLDataException3.getMessage());
      assertFalse(sQLDataException3.equals((Object)sQLDataException1));
      assertFalse(sQLDataException3.equals((Object)sQLDataException0));
      assertFalse(sQLDataException3.equals((Object)sQLDataException2));
      assertNotNull(sQLDataException3);
      
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("org.apache.commons.collections4.functors.AndPredicate", sQLDataException3);
      assertEquals(0, sQLDataException3.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException3.toString());
      assertNull(sQLDataException3.getSQLState());
      assertNull(sQLDataException3.getMessage());
      assertEquals(0, sQLDataException4.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.AndPredicate", sQLDataException4.getMessage());
      assertEquals("java.sql.SQLDataException: org.apache.commons.collections4.functors.AndPredicate", sQLDataException4.toString());
      assertNull(sQLDataException4.getSQLState());
      assertFalse(sQLDataException3.equals((Object)sQLDataException1));
      assertFalse(sQLDataException3.equals((Object)sQLDataException0));
      assertFalse(sQLDataException3.equals((Object)sQLDataException2));
      assertFalse(sQLDataException4.equals((Object)sQLDataException3));
      assertFalse(sQLDataException4.equals((Object)sQLDataException1));
      assertFalse(sQLDataException4.equals((Object)sQLDataException0));
      assertFalse(sQLDataException4.equals((Object)sQLDataException2));
      assertNotNull(sQLDataException4);
      
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("org.apache.commons.collections4.functors.AndPredicate", sQLDataException4);
      assertEquals(0, sQLDataException3.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException3.toString());
      assertNull(sQLDataException3.getSQLState());
      assertNull(sQLDataException3.getMessage());
      assertEquals(0, sQLDataException4.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.AndPredicate", sQLDataException4.getMessage());
      assertEquals("java.sql.SQLDataException: org.apache.commons.collections4.functors.AndPredicate", sQLDataException4.toString());
      assertNull(sQLDataException4.getSQLState());
      assertEquals(0, sQLDataException5.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.AndPredicate", sQLDataException5.getMessage());
      assertEquals("java.sql.SQLDataException: org.apache.commons.collections4.functors.AndPredicate", sQLDataException5.toString());
      assertNull(sQLDataException5.getSQLState());
      assertFalse(sQLDataException3.equals((Object)sQLDataException1));
      assertFalse(sQLDataException3.equals((Object)sQLDataException0));
      assertFalse(sQLDataException3.equals((Object)sQLDataException4));
      assertFalse(sQLDataException3.equals((Object)sQLDataException2));
      assertFalse(sQLDataException4.equals((Object)sQLDataException3));
      assertFalse(sQLDataException4.equals((Object)sQLDataException1));
      assertFalse(sQLDataException4.equals((Object)sQLDataException0));
      assertFalse(sQLDataException4.equals((Object)sQLDataException2));
      assertFalse(sQLDataException5.equals((Object)sQLDataException1));
      assertFalse(sQLDataException5.equals((Object)sQLDataException0));
      assertFalse(sQLDataException5.equals((Object)sQLDataException3));
      assertFalse(sQLDataException5.equals((Object)sQLDataException4));
      assertFalse(sQLDataException5.equals((Object)sQLDataException2));
      assertNotNull(sQLDataException5);
      
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException("org.apache.commons.collections4.functors.AndPredicate", "]gR>u", sQLDataException5);
      assertEquals(0, sQLDataException3.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException3.toString());
      assertNull(sQLDataException3.getSQLState());
      assertNull(sQLDataException3.getMessage());
      assertEquals(0, sQLDataException4.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.AndPredicate", sQLDataException4.getMessage());
      assertEquals("java.sql.SQLDataException: org.apache.commons.collections4.functors.AndPredicate", sQLDataException4.toString());
      assertNull(sQLDataException4.getSQLState());
      assertEquals(0, sQLDataException5.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.AndPredicate", sQLDataException5.getMessage());
      assertEquals("java.sql.SQLDataException: org.apache.commons.collections4.functors.AndPredicate", sQLDataException5.toString());
      assertNull(sQLDataException5.getSQLState());
      assertEquals("java.sql.SQLDataException: org.apache.commons.collections4.functors.AndPredicate", sQLDataException6.toString());
      assertEquals("]gR>u", sQLDataException6.getSQLState());
      assertEquals(0, sQLDataException6.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.AndPredicate", sQLDataException6.getMessage());
      assertFalse(sQLDataException3.equals((Object)sQLDataException5));
      assertFalse(sQLDataException3.equals((Object)sQLDataException1));
      assertFalse(sQLDataException3.equals((Object)sQLDataException0));
      assertFalse(sQLDataException3.equals((Object)sQLDataException4));
      assertFalse(sQLDataException3.equals((Object)sQLDataException2));
      assertFalse(sQLDataException4.equals((Object)sQLDataException3));
      assertFalse(sQLDataException4.equals((Object)sQLDataException5));
      assertFalse(sQLDataException4.equals((Object)sQLDataException1));
      assertFalse(sQLDataException4.equals((Object)sQLDataException0));
      assertFalse(sQLDataException4.equals((Object)sQLDataException2));
      assertFalse(sQLDataException5.equals((Object)sQLDataException1));
      assertFalse(sQLDataException5.equals((Object)sQLDataException0));
      assertFalse(sQLDataException5.equals((Object)sQLDataException3));
      assertFalse(sQLDataException5.equals((Object)sQLDataException4));
      assertFalse(sQLDataException5.equals((Object)sQLDataException2));
      assertFalse(sQLDataException6.equals((Object)sQLDataException5));
      assertFalse(sQLDataException6.equals((Object)sQLDataException4));
      assertFalse(sQLDataException6.equals((Object)sQLDataException0));
      assertFalse(sQLDataException6.equals((Object)sQLDataException3));
      assertFalse(sQLDataException6.equals((Object)sQLDataException2));
      assertFalse(sQLDataException6.equals((Object)sQLDataException1));
      assertNotNull(sQLDataException6);
      
      sQLDataExceptionArray0[6] = sQLDataException6;
      SQLDataException sQLDataException7 = new SQLDataException("Map.Entry.setValue is not supported", "", 0, sQLDataException6);
      assertEquals(0, sQLDataException3.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException3.toString());
      assertNull(sQLDataException3.getSQLState());
      assertNull(sQLDataException3.getMessage());
      assertEquals(0, sQLDataException4.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.AndPredicate", sQLDataException4.getMessage());
      assertEquals("java.sql.SQLDataException: org.apache.commons.collections4.functors.AndPredicate", sQLDataException4.toString());
      assertNull(sQLDataException4.getSQLState());
      assertEquals(0, sQLDataException5.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.AndPredicate", sQLDataException5.getMessage());
      assertEquals("java.sql.SQLDataException: org.apache.commons.collections4.functors.AndPredicate", sQLDataException5.toString());
      assertNull(sQLDataException5.getSQLState());
      assertEquals("java.sql.SQLDataException: org.apache.commons.collections4.functors.AndPredicate", sQLDataException6.toString());
      assertEquals("]gR>u", sQLDataException6.getSQLState());
      assertEquals(0, sQLDataException6.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.AndPredicate", sQLDataException6.getMessage());
      assertEquals("", sQLDataException7.getSQLState());
      assertEquals("Map.Entry.setValue is not supported", sQLDataException7.getMessage());
      assertEquals("java.sql.SQLDataException: Map.Entry.setValue is not supported", sQLDataException7.toString());
      assertEquals(0, sQLDataException7.getErrorCode());
      assertFalse(sQLDataException3.equals((Object)sQLDataException1));
      assertFalse(sQLDataException3.equals((Object)sQLDataException5));
      assertFalse(sQLDataException3.equals((Object)sQLDataException0));
      assertFalse(sQLDataException3.equals((Object)sQLDataException6));
      assertFalse(sQLDataException3.equals((Object)sQLDataException4));
      assertFalse(sQLDataException3.equals((Object)sQLDataException2));
      assertFalse(sQLDataException4.equals((Object)sQLDataException3));
      assertFalse(sQLDataException4.equals((Object)sQLDataException6));
      assertFalse(sQLDataException4.equals((Object)sQLDataException1));
      assertFalse(sQLDataException4.equals((Object)sQLDataException5));
      assertFalse(sQLDataException4.equals((Object)sQLDataException0));
      assertFalse(sQLDataException4.equals((Object)sQLDataException2));
      assertFalse(sQLDataException5.equals((Object)sQLDataException1));
      assertFalse(sQLDataException5.equals((Object)sQLDataException0));
      assertFalse(sQLDataException5.equals((Object)sQLDataException6));
      assertFalse(sQLDataException5.equals((Object)sQLDataException3));
      assertFalse(sQLDataException5.equals((Object)sQLDataException4));
      assertFalse(sQLDataException5.equals((Object)sQLDataException2));
      assertFalse(sQLDataException6.equals((Object)sQLDataException5));
      assertFalse(sQLDataException6.equals((Object)sQLDataException4));
      assertFalse(sQLDataException6.equals((Object)sQLDataException0));
      assertFalse(sQLDataException6.equals((Object)sQLDataException3));
      assertFalse(sQLDataException6.equals((Object)sQLDataException2));
      assertFalse(sQLDataException6.equals((Object)sQLDataException1));
      assertFalse(sQLDataException7.equals((Object)sQLDataException2));
      assertFalse(sQLDataException7.equals((Object)sQLDataException4));
      assertFalse(sQLDataException7.equals((Object)sQLDataException0));
      assertFalse(sQLDataException7.equals((Object)sQLDataException1));
      assertFalse(sQLDataException7.equals((Object)sQLDataException6));
      assertFalse(sQLDataException7.equals((Object)sQLDataException5));
      assertFalse(sQLDataException7.equals((Object)sQLDataException3));
      assertNotNull(sQLDataException7);
      
      sQLDataExceptionArray0[7] = sQLDataException7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 5675, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransactionRollbackException[]) null, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = null;
      String string1 = null;
      int int0 = (-2823);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, (-2823));
      assertEquals((-2823), sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MapIterator<SQLRecoverableException, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      String string0 = "org.apache.commons.collections4.bidimap.TreeBidiMap$Node";
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.bidimap.TreeBidiMap$Node", (String) null);
      assertNotNull(stringTokenizer0);
      
      String string1 = "List must not be null";
      // Undeclared exception!
      try { 
        stringTokenizer0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      int int0 = 530;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 530, 530);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      arrayList0.clear();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasNext());
      assertFalse(loopingListIterator0.hasPrevious());
      assertNotNull(loopingListIterator0);
      
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) loopingListIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasNext());
      assertFalse(loopingListIterator0.hasPrevious());
      assertNotNull(iterator0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "_lp+";
      stringArray0[1] = "Transformer must not be null";
      stringArray0[2] = "\"3G^Z'vA1a23`6&";
      stringArray0[3] = "Entry does not exist: ";
      stringArray0[4] = "org.apache.commons.collections4.map.AbstractReferenceMap";
      stringArray0[5] = "R-d";
      stringArray0[6] = "E6Pio$/]sWjf741o[0";
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringArray0, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "");
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("V", "V", sQLInvalidAuthorizationSpecException0);
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.sql.SQLTransientException: V", sQLTransientException0.toString());
      assertEquals("V", sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("V", sQLTransientException0.getMessage());
      assertNotNull(sQLTransientException0);
      
      String string0 = sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(string0);
      assertEquals("", string0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashtable0, sQLTransientException0);
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.sql.SQLTransientException: V", sQLTransientException0.toString());
      assertEquals("V", sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("V", sQLTransientException0.getMessage());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLTransientException: V", sQLClientInfoException1.toString());
      assertEquals("java.sql.SQLTransientException: V", sQLClientInfoException1.getMessage());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNotNull(sQLClientInfoException1);
      
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException1);
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.sql.SQLTransientException: V", sQLTransientException0.toString());
      assertEquals("V", sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("V", sQLTransientException0.getMessage());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLTransientException: V", sQLClientInfoException1.toString());
      assertEquals("java.sql.SQLTransientException: V", sQLClientInfoException1.getMessage());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(singletonListIterator0.hasNext());
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNotNull(singletonListIterator0);
      
      MapIterator<SQLIntegrityConstraintViolationException, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      ResettableIterator<Predicate<Object>> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      SkippingIterator<Predicate<Object>> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Predicate<Object>>) resettableIterator0, 371L);
      assertNotNull(skippingIterator0);
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) hashMap0, 44, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Object> iterator0 = IteratorUtils.chainedIterator((Iterator<?>[]) iteratorArray0);
      assertEquals(0, iteratorArray0.length);
      assertNotNull(iterator0);
      
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("$PnWk3EA{ <*a#G", sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: $PnWk3EA{ <*a#G", sQLNonTransientConnectionException0.toString());
      assertEquals("$PnWk3EA{ <*a#G", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      boolean boolean0 = stack0.add(sQLNonTransientConnectionException0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[java.sql.SQLNonTransientConnectionException: $PnWk3EA{ <*a#G]", stack0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: $PnWk3EA{ <*a#G", sQLNonTransientConnectionException0.toString());
      assertEquals("$PnWk3EA{ <*a#G", sQLNonTransientConnectionException0.getMessage());
      assertTrue(stack0.contains(sQLNonTransientConnectionException0));
      assertTrue(boolean0);
      
      LoopingIterator<SQLNonTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLNonTransientConnectionException>(stack0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[java.sql.SQLNonTransientConnectionException: $PnWk3EA{ <*a#G]", stack0.toString());
      assertNotNull(loopingIterator0);
      assertTrue(stack0.contains(sQLNonTransientConnectionException0));
      
      Iterator<SQLNonTransientConnectionException> iterator1 = IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientConnectionException>) loopingIterator0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[java.sql.SQLNonTransientConnectionException: $PnWk3EA{ <*a#G]", stack0.toString());
      assertNotNull(iterator1);
      assertTrue(stack0.contains(sQLNonTransientConnectionException0));
      
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) null, (Collection<? super SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 4);
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      iteratorArray0[0] = (Iterator<SQLDataException>) resettableListIterator0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLDataException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) resettableListIterator0, (Iterator<? extends SQLDataException>) iteratorArray0[0]);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(4, iteratorArray0.length);
      assertNotNull(iterator0);
      
      iteratorArray0[1] = iterator0;
      SQLDataException sQLDataException0 = new SQLDataException("", "", 0);
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      iteratorArray0[2] = (Iterator<SQLDataException>) singletonIterator0;
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(sQLDataException0));
      
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(loopingIterator0);
      assertFalse(linkedHashSet0.contains(sQLDataException0));
      
      iteratorArray0[3] = (Iterator<SQLDataException>) loopingIterator0;
      Iterator<SQLDataException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      assertEquals(4, iteratorArray0.length);
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      
      SkippingIterator<SQLDataException> skippingIterator0 = IteratorUtils.skippingIterator(iterator1, (long) 0);
      assertEquals(4, iteratorArray0.length);
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 4);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("tfG)YgW+j(");
      assertEquals("java.sql.SQLSyntaxErrorException: tfG)YgW+j(", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("tfG)YgW+j(", sQLSyntaxErrorException0.getMessage());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException: tfG)YgW+j(", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("tfG)YgW+j(", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLSyntaxErrorException: tfG)YgW+j(", sQLRecoverableException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: tfG)YgW+j(", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0, true);
      assertEquals("java.sql.SQLSyntaxErrorException: tfG)YgW+j(", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("tfG)YgW+j(", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLSyntaxErrorException: tfG)YgW+j(", sQLRecoverableException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: tfG)YgW+j(", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      iteratorArray0[0] = (Iterator<SQLRecoverableException>) singletonIterator0;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator(sQLRecoverableException0);
      assertEquals("java.sql.SQLSyntaxErrorException: tfG)YgW+j(", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("tfG)YgW+j(", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLSyntaxErrorException: tfG)YgW+j(", sQLRecoverableException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: tfG)YgW+j(", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(resettableIterator0);
      
      iteratorArray0[1] = (Iterator<SQLRecoverableException>) resettableIterator0;
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[9];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[8] = sQLRecoverableException0;
      ResettableIterator<SQLRecoverableException> resettableIterator1 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 1);
      assertEquals(9, sQLRecoverableExceptionArray0.length);
      assertFalse(resettableIterator1.equals((Object)resettableIterator0));
      assertNotNull(resettableIterator1);
      
      iteratorArray0[2] = (Iterator<SQLRecoverableException>) resettableIterator1;
      ResettableIterator<SQLRecoverableException> resettableIterator2 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      assertEquals(9, sQLRecoverableExceptionArray0.length);
      assertFalse(resettableIterator2.equals((Object)resettableIterator1));
      assertFalse(resettableIterator2.equals((Object)resettableIterator0));
      assertNotNull(resettableIterator2);
      assertNotSame(resettableIterator2, resettableIterator1);
      
      iteratorArray0[3] = (Iterator<SQLRecoverableException>) resettableIterator2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(iteratorArray0, (-2207), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      assertNotNull(predicate0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Properties>) null, (Predicate<? super Properties>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Hashtable<SQLFeatureNotSupportedException, SQLIntegrityConstraintViolationException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLIntegrityConstraintViolationException>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      EntrySetMapIterator<SQLFeatureNotSupportedException, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, SQLIntegrityConstraintViolationException>(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(entrySetMapIterator0);
      
      MapIterator<SQLFeatureNotSupportedException, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLFeatureNotSupportedException, SQLIntegrityConstraintViolationException>) entrySetMapIterator0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(mapIterator0);
      
      ArrayListIterator<SQLClientInfoException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLClientInfoException>(mapIterator0, (-693), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      OrderedMapIterator<Object, HashSet<Properties>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      AbstractOrderedMapIteratorDecorator<Object, HashSet<Properties>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Object, HashSet<Properties>>(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      
      Iterator<Object> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Object>) abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(iterator0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "}~G28`Qn3G+eOavE");
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("}~G28`Qn3G+eOavE", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("}~G28`Qn3G+eOavE", "LF_<;", sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("}~G28`Qn3G+eOavE", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: }~G28`Qn3G+eOavE", sQLTransientException0.toString());
      assertEquals("}~G28`Qn3G+eOavE", sQLTransientException0.getMessage());
      assertEquals("LF_<;", sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNotNull(sQLTransientException0);
      
      String string0 = sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("}~G28`Qn3G+eOavE", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(string0);
      assertEquals("", string0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("}~G28`Qn3G+eOavE", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: }~G28`Qn3G+eOavE", sQLTransientException0.toString());
      assertEquals("}~G28`Qn3G+eOavE", sQLTransientException0.getMessage());
      assertEquals("LF_<;", sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTransientException: }~G28`Qn3G+eOavE", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLTransientException: }~G28`Qn3G+eOavE", sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransientException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("}~G28`Qn3G+eOavE", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: }~G28`Qn3G+eOavE", sQLTransientException0.toString());
      assertEquals("}~G28`Qn3G+eOavE", sQLTransientException0.getMessage());
      assertEquals("LF_<;", sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.sql.SQLTransientException: }~G28`Qn3G+eOavE", sQLDataException0.toString());
      assertEquals("java.sql.SQLTransientException: }~G28`Qn3G+eOavE", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("{Wqqf4W']90:}?< ", "", 1598, sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("}~G28`Qn3G+eOavE", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: {Wqqf4W']90:}?< ", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals(1598, sQLNonTransientException0.getErrorCode());
      assertEquals("{Wqqf4W']90:}?< ", sQLNonTransientException0.getMessage());
      assertNotNull(sQLNonTransientException0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLNonTransientException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("}~G28`Qn3G+eOavE", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: {Wqqf4W']90:}?< ", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getSQLState());
      assertEquals(1598, sQLNonTransientException0.getErrorCode());
      assertEquals("{Wqqf4W']90:}?< ", sQLNonTransientException0.getMessage());
      assertNotNull(iterator0);
      
      OrderedMapIterator<Locale.FilteringMode, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      MapIterator<Locale.FilteringMode, SQLClientInfoException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Locale.FilteringMode, SQLClientInfoException>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(mapIterator0);
      
      MapIterator<Locale.FilteringMode, SQLClientInfoException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Locale.FilteringMode, ? extends SQLClientInfoException>) mapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(mapIterator1);
      assertSame(mapIterator0, mapIterator1);
      assertSame(mapIterator1, mapIterator0);
      
      Iterator<Locale.FilteringMode> iterator1 = IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) null, (Iterator<? extends Locale.FilteringMode>) mapIterator1, (Iterator<? extends Locale.FilteringMode>) mapIterator1);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(iterator1);
      assertSame(mapIterator0, mapIterator1);
      assertSame(mapIterator1, mapIterator0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      OrderedMapIterator<DataTruncation, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      Iterator<Locale.FilteringMode>[] iteratorArray0 = (Iterator<Locale.FilteringMode>[]) Array.newInstance(Iterator.class, 5);
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      LoopingListIterator<Locale.FilteringMode> loopingListIterator0 = new LoopingListIterator<Locale.FilteringMode>(vector0);
      Enumeration<Locale.FilteringMode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) loopingListIterator0);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) enumeration0);
      iteratorArray0[0] = iterator0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyOrderedIterator();
      String string0 = "j(-#$i_OmG$";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("j(-#$i_OmG$");
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      int int0 = 2347;
      ArrayListIterator<SQLInvalidAuthorizationSpecException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLInvalidAuthorizationSpecException>(resettableIterator0, 2347);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      EmptyListIterator.emptyListIterator();
      int int0 = 1;
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>(1);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = "org.apache.commons.collections4.map.Flat3Map$EntryIterator";
      int int0 = 0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.map.Flat3Map$EntryIterator", "Lg:", 0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientConnectionException0.getStackTrace();
      sQLTransientConnectionException0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientConnectionException0.forEach(consumer1);
      IteratorUtils.singletonIterator((SQLTransientException) sQLTransientConnectionException0);
      sQLTransientConnectionException0.getSuppressed();
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, DataTruncation>(orderedMapIterator0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLTransactionRollbackException>) abstractOrderedMapIteratorDecorator0);
      DataTruncation dataTruncation0 = new DataTruncation(2771, false, false, 0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0, 2771, 1966);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ResettableIterator<Stack<Locale.FilteringMode>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Stack<Locale.FilteringMode>>) resettableIterator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      OrderedMapIterator<DataTruncation, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("f5qli?");
      sQLTransactionRollbackException0.spliterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0, 1073741824, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLRecoverableException>) resettableListIterator0);
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLWarning>) resettableIterator0, (-1L), (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int int0 = 166;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "9\\h", 166);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<StringTokenizer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }
}
