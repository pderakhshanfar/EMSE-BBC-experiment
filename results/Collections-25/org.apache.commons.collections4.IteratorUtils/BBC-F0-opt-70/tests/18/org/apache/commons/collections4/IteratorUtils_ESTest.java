/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 04:46:30 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Factory<IIOMetadataNode> factory0 = ConstantFactory.constantFactory(iIOMetadataNode0);
      FactoryTransformer<Object, IIOMetadataNode> factoryTransformer0 = new FactoryTransformer<Object, IIOMetadataNode>(factory0);
      IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) factoryTransformer0);
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends Properties>) iterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[8];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.apache.commons.collections4.iterators.TransformIterator", "Enumeration must not be null", 1);
      sQLNonTransientExceptionArray0[0] = sQLNonTransientException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ConstantTransformer", "&w{;fK1b?)", sQLNonTransientException0);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("&!~8'.o(^AHG", "n");
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("kS@|5$k", "&w{;fK1b?)", 1, sQLNonTransientExceptionArray0[3]);
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", "Enumeration must not be null");
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("&!~8'.o(^AHG", "&w{;fK1b?)", sQLNonTransientException0);
      sQLNonTransientExceptionArray0[6] = (SQLNonTransientException) sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("ConstantTransformer", "", 1, sQLNonTransientExceptionArray0[4]);
      sQLNonTransientExceptionArray0[7] = (SQLNonTransientException) sQLNonTransientConnectionException3;
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, 1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) onePredicate0;
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) onePredicate0);
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicateArray0[0], predicate1);
      predicateArray0[2] = (Predicate<Object>) andPredicate0;
      Predicate<Object> predicate2 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      // Undeclared exception!
      IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) resettableIterator0, (Predicate<? super SQLNonTransientException>) predicate2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Properties properties0 = new Properties();
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0, class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 3);
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class1;
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      classArray0[1] = class2;
      Class<SQLIntegrityConstraintViolationException> class3 = SQLIntegrityConstraintViolationException.class;
      classArray0[2] = class3;
      InvokerTransformer<SQLException, SQLFeatureNotSupportedException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLFeatureNotSupportedException>("1j~Cj{xAWuTD^ ", classArray0, sQLTransientConnectionExceptionArray0);
      InvokerTransformer.invokerTransformer("1j~Cj{xAWuTD^ ", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '1j~Cj{xAWuTD^ ' on 'class java.sql.SQLFeatureNotSupportedException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<PF]Br\".A^,");
      ArrayDeque<SQLNonTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLNonTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) arrayDeque0);
      IteratorUtils.emptyOrderedIterator();
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      LoopingListIterator<SQLRecoverableException> loopingListIterator0 = new LoopingListIterator<SQLRecoverableException>(stack0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("setValue() is not supported");
      stack0.add(sQLRecoverableException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) loopingListIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[9];
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 1);
      SkippingIterator<SQLTimeoutException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLTimeoutException>) resettableListIterator0, 0L);
      IteratorUtils.get((Iterator<SQLTimeoutException>) skippingIterator0, 1);
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>();
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator1 = IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) arrayList0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) resettableListIterator1, class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("[xgC", (Throwable) null);
      arrayList0.add(sQLTransientConnectionException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties0 = new Properties();
      properties0.entrySet();
      IteratorUtils.getIterator(properties0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyIterator();
      IteratorUtils.get((Iterator<SQLTimeoutException>) resettableListIterator0, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) resettableListIterator1, class0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[8];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTimeoutExceptionArray0[0]);
      IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 1);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(",[x26P", "+R<ji84u_t^T3", (-2126), sQLTimeoutException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("+R<ji84u_t^T3", sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, 1, (-2126));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IteratorUtils.getIterator("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 5);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 259;
      longArray0[1] = (long) 259;
      longArray0[2] = (long) 259;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 259, longArray0, (Throwable) null);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      SkippingIterator<BatchUpdateException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) singletonListIterator0, 259L);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) skippingIterator0;
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<BatchUpdateException>) singletonListIterator0);
      iteratorArray0[1] = (Iterator<BatchUpdateException>) listIterator0;
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      batchUpdateExceptionArray0[1] = batchUpdateException0;
      batchUpdateExceptionArray0[2] = batchUpdateException0;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      iteratorArray0[2] = (Iterator<BatchUpdateException>) resettableIterator0;
      ResettableIterator<BatchUpdateException> resettableIterator1 = IteratorUtils.singletonIterator(batchUpdateException0);
      iteratorArray0[3] = (Iterator<BatchUpdateException>) resettableIterator1;
      SingletonListIterator<BatchUpdateException> singletonListIterator1 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      iteratorArray0[4] = (Iterator<BatchUpdateException>) singletonListIterator1;
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[8];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTimeoutExceptionArray0[0]);
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 1);
      IteratorUtils.get((Iterator<SQLTimeoutException>) resettableListIterator0, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-462));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IteratorUtils.getIterator("[");
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[0];
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) anyPredicate0;
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicateArray0[0], predicateArray0[0]);
      predicateArray0[1] = (Predicate<Object>) andPredicate0;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) iIOMetadataNode0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      predicateArray0[2] = predicate0;
      AnyPredicate<Object> anyPredicate1 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[3] = (Predicate<Object>) anyPredicate1;
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(96);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1363);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1363);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(340);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[4]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-3628));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[4]);
      integerArray0[7] = integer7;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      ListIterator<Integer> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) resettableListIterator0, (Predicate<? super Integer>) anyPredicate0);
      // Undeclared exception!
      IteratorUtils.find((Iterator<Integer>) listIterator0, (Predicate<? super Integer>) andPredicate0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("");
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      onePredicate0.getPredicates();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Closure<Vector>>) iterator0, (Predicate<? super Closure<Vector>>) onePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[8];
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTimeoutExceptionArray0[0]);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("1Q51;");
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("The prototype must be cloneable via a public clone method", sQLTimeoutException1);
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("", sQLTimeoutException1);
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 1);
      IteratorUtils.get((Iterator<SQLTimeoutException>) resettableListIterator0, 1);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, 1);
      arrayList0.add(sQLTransientConnectionException0);
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator1 = IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) arrayList0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) resettableListIterator1, class0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[8];
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(mockThrowable0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("1Q51;");
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("The prototype must be cloneable via a public clone method", sQLTimeoutException2);
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("2!p<u");
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("The prototype must be cloneable via a public clone method", sQLNonTransientConnectionException0);
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException("", sQLTimeoutException2);
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException6;
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 1);
      IteratorUtils.get((Iterator<SQLTimeoutException>) resettableListIterator0, 1);
      IteratorUtils.emptyOrderedIterator();
      sQLTimeoutException4.fillInStackTrace();
      SQLTimeoutException sQLTimeoutException7 = new SQLTimeoutException("", "");
      sQLTimeoutException4.getLocalizedMessage();
      ExceptionClosure.exceptionClosure();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(1, 1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLTimeoutException1);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLClientInfoException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[8];
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(mockThrowable0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("1Q51;", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("1Q51;");
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("The prototype must be cloneable via a public clone method", sQLTimeoutException3);
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("2!p<u");
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException("The prototype must be cloneable via a public clone method", sQLNonTransientConnectionException0);
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      SQLTimeoutException sQLTimeoutException7 = new SQLTimeoutException("", sQLTimeoutException3);
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException7;
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 1);
      SQLTimeoutException sQLTimeoutException8 = IteratorUtils.get((Iterator<SQLTimeoutException>) resettableListIterator0, 1);
      assertSame(sQLTimeoutException8, sQLTimeoutException2);
      
      IteratorUtils.emptyOrderedIterator();
      sQLTimeoutException5.fillInStackTrace();
      SQLTimeoutException sQLTimeoutException9 = new SQLTimeoutException("", "");
      sQLTimeoutException5.getLocalizedMessage();
      ExceptionClosure.exceptionClosure();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(1, 1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLTimeoutException1);
      IteratorUtils.getIterator(sQLClientInfoException0);
      assertNotSame(sQLTimeoutException1, sQLTimeoutException8);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("v;q2AH w8r", (String) null);
      sQLTimeoutException0.getLocalizedMessage();
      ExceptionClosure.exceptionClosure();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Entry does not exist: ");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IteratorUtils.getIterator("");
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      ResettableIterator<Vector<BatchUpdateException>> resettableIterator0 = IteratorUtils.singletonIterator(vector0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Vector<BatchUpdateException>>) resettableIterator0, (Transformer<? super Vector<BatchUpdateException>, String>) transformer0, "Predicate must not be null", "Predicate must not be null", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[", "sT9tpup=jc_JD1", sQLTransientConnectionException0);
      SingletonIterator<SQLNonTransientException> singletonIterator0 = new SingletonIterator<SQLNonTransientException>(sQLInvalidAuthorizationSpecException0, false);
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap0 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      Closure<SQLException> closure0 = SwitchClosure.switchClosure((Map<Predicate<SQLException>, Closure<SQLException>>) hashMap0);
      IteratorUtils.apply((Iterator<SQLNonTransientException>) singletonIterator0, (Closure<? super SQLNonTransientException>) closure0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TreeSet<SQLDataException> treeSet0 = new TreeSet<SQLDataException>();
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) treeSet0);
      SkippingIterator<SQLNonTransientException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLNonTransientException>) resettableIterator0, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLNonTransientException>) skippingIterator0, (Closure<? super SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[9];
      IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IteratorUtils.getIterator("");
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<SQLException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLException>) orderedIterator0, (Iterator<? extends SQLException>) orderedIterator0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) iterator0, 2);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Entry does not exist: ", "t)X#K'AGN U");
      sQLTimeoutException0.getLocalizedMessage();
      ExceptionClosure.exceptionClosure();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(6481, 6481);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLTimeoutException0);
      SQLWarning sQLWarning0 = new SQLWarning("~`_JTBw2JAf%w", "Entry does not exist: ", sQLClientInfoException0);
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      ListIterator<LinkedList<SQLRecoverableException>> listIterator0 = IteratorUtils.singletonListIterator(linkedList0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(orPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<LinkedList<SQLRecoverableException>>) listIterator0, (Predicate<? super LinkedList<SQLRecoverableException>>) nullIsFalsePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.OrPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ConstantTransformer<Object, SQLRecoverableException> constantTransformer0 = new ConstantTransformer<Object, SQLRecoverableException>((SQLRecoverableException) null);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      ServiceLoader<IIOMetadataNode> serviceLoader0 = ServiceLoader.load(class0);
      ConstantTransformer.constantTransformer(serviceLoader0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Properties>) null, (Transformer<? super Properties, ? extends SQLRecoverableException>) constantTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      EmptyIterator.emptyIterator();
      ConstantFactory.constantFactory("  O~E4");
      String string0 = "";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.map.AbstractHashedMap$HashMapIterator", "");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("  O~E4", sQLTransactionRollbackException0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      Transformer<SQLTransientException, SQLTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("  O~E4", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) transformer0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) iterator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '  O~E4' on 'class java.sql.SQLTransientConnectionException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Factory<String> factory0 = ConstantFactory.constantFactory("clone");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      String string0 = IteratorUtils.toString((Iterator<TreeSet<SQLWarning>>) null, (Transformer<? super TreeSet<SQLWarning>, String>) factoryTransformer0, "Index: ", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLTransactionRollbackException, SQLWarning> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransactionRollbackException, SQLWarning>(orderedMapIterator0);
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) abstractMapIteratorDecorator0);
      TreeSet<SQLException> treeSet0 = new TreeSet<SQLException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0, (Collection<? super SQLException>) treeSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTransientConnectionException[]) null, 9, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.getIterator("");
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("org.apache.commons.collections4.iterators.FilterListIterator");
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[", "[");
      IteratorUtils.getIterator("[");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 56);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      EmptyIterator.emptyIterator();
      ConstantFactory.constantFactory("  O~E4");
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLNonTransientException[]) null, (-199));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("q4j9{5[=M[q>o>ZDg");
      ExceptionClosure.exceptionClosure();
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Iterator<TreeSet<SQLWarning>> iterator0 = EmptyIterator.emptyIterator();
      Factory<String> factory0 = ConstantFactory.constantFactory("  Ez");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super TreeSet<SQLWarning>, String>) factoryTransformer0, (String) null, "  Ez", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[", "[");
      IteratorUtils.getIterator("[");
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTimeoutException>) null, 284);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[", "[");
      IteratorUtils.getIterator("[");
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0, false);
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLDataException>) singletonIterator0, (Predicate<? super SQLDataException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Factory<String> factory0 = ConstantFactory.constantFactory("60=");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      TreeSet<SQLWarning>[] treeSetArray0 = (TreeSet<SQLWarning>[]) Array.newInstance(TreeSet.class, 0);
      ResettableListIterator<TreeSet<SQLWarning>> resettableListIterator0 = IteratorUtils.arrayListIterator(treeSetArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<TreeSet<SQLWarning>>) resettableListIterator0, (Transformer<? super TreeSet<SQLWarning>, String>) factoryTransformer0, "dx=Vb(Z8IgvB{i#-", "dx=Vb(Z8IgvB{i#-", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Factory<String> factory0 = ConstantFactory.constantFactory("]Y|;2#4)F1CRwz6Ch.");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      TreeSet<SQLWarning>[] treeSetArray0 = (TreeSet<SQLWarning>[]) Array.newInstance(TreeSet.class, 9);
      TreeSet<SQLWarning> treeSet0 = new TreeSet<SQLWarning>();
      treeSetArray0[0] = treeSet0;
      TreeSet<SQLWarning> treeSet1 = new TreeSet<SQLWarning>();
      treeSetArray0[1] = treeSet1;
      TreeSet<SQLWarning> treeSet2 = new TreeSet<SQLWarning>();
      treeSetArray0[2] = treeSet2;
      TreeSet<SQLWarning> treeSet3 = new TreeSet<SQLWarning>();
      treeSetArray0[3] = treeSet3;
      TreeSet<SQLWarning> treeSet4 = new TreeSet<SQLWarning>();
      treeSetArray0[4] = treeSet4;
      TreeSet<SQLWarning> treeSet5 = new TreeSet<SQLWarning>();
      treeSetArray0[5] = treeSet5;
      TreeSet<SQLWarning> treeSet6 = new TreeSet<SQLWarning>();
      treeSetArray0[6] = treeSet6;
      TreeSet<SQLWarning> treeSet7 = new TreeSet<SQLWarning>();
      treeSetArray0[7] = treeSet7;
      TreeSet<SQLWarning> treeSet8 = new TreeSet<SQLWarning>();
      treeSetArray0[8] = treeSet8;
      ResettableIterator<TreeSet<SQLWarning>> resettableIterator0 = IteratorUtils.arrayIterator(treeSetArray0, 1);
      String string0 = IteratorUtils.toString((Iterator<TreeSet<SQLWarning>>) resettableIterator0, (Transformer<? super TreeSet<SQLWarning>, String>) factoryTransformer0, "]Y|;2#4)F1CRwz6Ch.", "  O~E4", "");
      assertEquals("  O~E4]Y|;2#4)F1CRwz6Ch.]Y|;2#4)F1CRwz6Ch.]Y|;2#4)F1CRwz6Ch.]Y|;2#4)F1CRwz6Ch.]Y|;2#4)F1CRwz6Ch.]Y|;2#4)F1CRwz6Ch.]Y|;2#4)F1CRwz6Ch.]Y|;2#4)F1CRwz6Ch.]Y|;2#4)F1CRwz6Ch.]Y|;2#4)F1CRwz6Ch.]Y|;2#4)F1CRwz6Ch.]Y|;2#4)F1CRwz6Ch.]Y|;2#4)F1CRwz6Ch.]Y|;2#4)F1CRwz6Ch.]Y|;2#4)F1CRwz6Ch.", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-3016), 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[", "[");
      IteratorUtils.getIterator("[");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("[", "w 7N.D", 1998, sQLNonTransientConnectionException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTransientConnectionException0, defaultEquator0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(equalPredicate0, equalPredicate0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(orPredicate0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("w 7N.D");
      SQLDataException sQLDataException0 = new SQLDataException("w 7N.D", sQLNonTransientConnectionException0);
      ArrayList<SQLNonTransientException> arrayList0 = new ArrayList<SQLNonTransientException>();
      arrayList0.add((SQLNonTransientException) sQLDataException0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLNonTransientException>) resettableIterator0, (Closure<? super SQLNonTransientException>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      ConstantTransformer<Object, SQLRecoverableException> constantTransformer0 = new ConstantTransformer<Object, SQLRecoverableException>((SQLRecoverableException) null);
      Iterator<SQLRecoverableException> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends Properties>) iterator0, (Transformer<? super Properties, ? extends SQLRecoverableException>) constantTransformer0);
      BoundedIterator<SQLRecoverableException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) iterator1, 0L, 0L);
      Locale.FilteringMode.values();
      IteratorUtils.toList((Iterator<?>) boundedIterator0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "buT=Z<@'IdC(W;$.|");
      IteratorUtils.toString((Iterator<SQLNonTransientException>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "[]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>((SQLTransactionRollbackException) null, false);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) singletonIterator0);
      TreeSet<SQLException> treeSet0 = new TreeSet<SQLException>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(orPredicate0);
      predicateArray0[0] = (Predicate<Object>) notPredicate0;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = IteratorUtils.isEmpty(singletonIterator0);
      assertFalse(boolean0);
      
      HashMap<SQLTimeoutException, Stack<DataTruncation>> hashMap0 = new HashMap<SQLTimeoutException, Stack<DataTruncation>>();
      EntrySetMapIterator<SQLTimeoutException, Stack<DataTruncation>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, Stack<DataTruncation>>(hashMap0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) entrySetMapIterator0, (Iterator<? extends SQLTimeoutException>) entrySetMapIterator0);
      OrderedMapIterator<TreeSet<SQLWarning>, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      String string0 = IteratorUtils.toString((Iterator<TreeSet<SQLWarning>>) orderedMapIterator0, (Transformer<? super TreeSet<SQLWarning>, String>) transformer0, "`AAx0xAp)&OowZ", "dx=Vb(Z8IgvB{i#-", "`AAx0xAp)&OowZ");
      assertEquals("dx=Vb(Z8IgvB{i#-`AAx0xAp)&OowZ", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[", "[");
      Iterator<?> iterator0 = IteratorUtils.getIterator("[");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(" pr5{jHY,!9wAkE", (String) null, 1998, sQLNonTransientConnectionException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Integer integer0 = new Integer(3183);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(integer0, defaultEquator0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(equalPredicate0, equalPredicate0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(orPredicate0);
      Class<SQLWarning> class0 = SQLWarning.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = (Predicate<Object>) orPredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      ExceptionPredicate.exceptionPredicate();
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray1[0] = (Predicate<Object>) orPredicate0;
      NonePredicate<Object> nonePredicate1 = new NonePredicate<Object>(predicateArray1);
      IteratorUtils.isEmpty(iterator0);
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      EqualPredicate.equalPredicate((HashSet<SQLDataException>) linkedHashSet0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("[", " pr5{jHY,!9wAkE");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0, 1318, (-3457));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>(uniquePredicate0);
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(linkedList0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) loopingIterator0, (Iterator<? extends SQLDataException>) loopingIterator0);
      ReverseListIterator<SQLDataException> reverseListIterator0 = new ReverseListIterator<SQLDataException>(linkedList0);
      SQLDataException sQLDataException0 = new SQLDataException("k?Y=!n$0m.-`-`", "End index must not be greater than the array length", (-4370));
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0, true);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLDataException>) singletonIterator0, (Predicate<? super SQLDataException>) nullIsExceptionPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>((SQLTransactionRollbackException) null, false);
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) singletonIterator0);
      TreeSet<SQLException> treeSet0 = new TreeSet<SQLException>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(orPredicate0);
      predicateArray0[0] = (Predicate<Object>) notPredicate0;
      Iterator<Object> iterator0 = IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      IteratorUtils.toList((Iterator<?>) iterator0);
      Iterator<TreeSet<SQLWarning>> iterator1 = EmptyIterator.emptyIterator();
      Factory<String> factory0 = ConstantFactory.constantFactory("$XADd#J&D5``");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator1, (Transformer<? super TreeSet<SQLWarning>, String>) factoryTransformer0, " :`u/%,m%", (String) null, "dx=Vb(Z8IgvB{i#-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MapIterator<SQLTimeoutException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ListIteratorWrapper<SQLTimeoutException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTimeoutException>(mapIterator0);
      Enumeration<SQLTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientException>) listIteratorWrapper0);
      IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      IteratorUtils.toList((Iterator<?>) listIteratorWrapper0);
      EmptyIterator.emptyIterator();
      ConstantFactory.constantFactory("$XADd#J&D5``");
      StringTokenizer stringTokenizer0 = new StringTokenizer("Criterion must not be null.", "$XADd#J&D5``", false);
      IteratorUtils.getIterator(stringTokenizer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[", "[");
      Iterator<?> iterator0 = IteratorUtils.getIterator("[");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("[", "w 7N.D", 1998, sQLNonTransientConnectionException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTransientConnectionException0, defaultEquator0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(equalPredicate0, equalPredicate0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(orPredicate0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = (Predicate<Object>) orPredicate0;
      predicateArray0[2] = (Predicate<Object>) nullIsExceptionPredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      ExceptionPredicate.exceptionPredicate();
      IteratorUtils.matchesAll((Iterator<ArrayDeque<LinkedList>>) iterator0, (Predicate<? super ArrayDeque<LinkedList>>) predicate0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientException>) resettableListIterator0);
      IfClosure<SQLException> ifClosure0 = new IfClosure<SQLException>(predicateArray0[1], closure0, closure0);
      IteratorUtils.apply((Iterator<SQLNonTransientException>) resettableListIterator0, (Closure<? super SQLNonTransientException>) closure0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 745;
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MapIterator<SQLTimeoutException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ListIteratorWrapper<SQLTimeoutException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTimeoutException>(mapIterator0);
      Enumeration<SQLTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientException>) listIteratorWrapper0);
      IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      Locale.FilteringMode.values();
      IteratorUtils.toList((Iterator<?>) listIteratorWrapper0);
      Iterator<TreeSet<SQLWarning>> iterator0 = EmptyIterator.emptyIterator();
      Factory<String> factory0 = ConstantFactory.constantFactory("$XADd#J&D5``");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      String string0 = IteratorUtils.toString(iterator0, (Transformer<? super TreeSet<SQLWarning>, String>) factoryTransformer0, "$XADd#J&D5``", "dx=Vb(Z8IgvB{i#-", "dx=Vb(Z8IgvB{i#-");
      assertEquals("dx=Vb(Z8IgvB{i#-dx=Vb(Z8IgvB{i#-", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      EqualPredicate.equalPredicate((Object) "MapIterator[");
      Factory<SQLClientInfoException> factory0 = ConstantFactory.constantFactory((SQLClientInfoException) null);
      Transformer<Object, SQLClientInfoException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLClientInfoException>) factory0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 4);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      closureArray0[3] = closure0;
      ResettableListIterator<Closure<Object>> resettableListIterator0 = IteratorUtils.arrayListIterator(closureArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("b^n[=fp%JXyr7yd,", (Throwable) null);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableListIterator0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      ConstantTransformer<Object, SQLRecoverableException> constantTransformer0 = new ConstantTransformer<Object, SQLRecoverableException>((SQLRecoverableException) null);
      Iterator<SQLRecoverableException> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends Properties>) iterator0, (Transformer<? super Properties, ? extends SQLRecoverableException>) constantTransformer0);
      BoundedIterator<SQLRecoverableException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) iterator1, 0L, 0L);
      Locale.FilteringMode.values();
      IteratorUtils.toList((Iterator<?>) boundedIterator0);
      Iterator<TreeSet<SQLWarning>> iterator2 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator2, (Transformer<? super TreeSet<SQLWarning>, String>) null, "", "$XADd#J&D5``", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      ConstantTransformer<Object, SQLRecoverableException> constantTransformer0 = new ConstantTransformer<Object, SQLRecoverableException>((SQLRecoverableException) null);
      Iterator<SQLRecoverableException> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends Properties>) iterator0, (Transformer<? super Properties, ? extends SQLRecoverableException>) constantTransformer0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) iterator1;
      objectArray0[2] = (Object) constantTransformer0;
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0, 1);
      IteratorUtils.contains((Iterator<Object>) resettableListIterator0, (Object) iterator1);
      MapIterator<SQLTransientConnectionException, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MapIterator<SQLTimeoutException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ListIteratorWrapper<SQLTimeoutException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTimeoutException>(mapIterator0);
      Enumeration<SQLTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientException>) listIteratorWrapper0);
      IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      IteratorUtils.size(mapIterator0);
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0, (Collection<? super SQLException>) stack0);
      StringValueTransformer.stringValueTransformer();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Integer>) resettableIterator0, (Transformer<? super Integer, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      EmptyIterator.emptyIterator();
      ConstantTransformer<Object, SQLRecoverableException> constantTransformer0 = new ConstantTransformer<Object, SQLRecoverableException>((SQLRecoverableException) null);
      Iterator<SQLRecoverableException> iterator0 = new SingletonIterator<SQLRecoverableException>((SQLRecoverableException) null);
      BoundedIterator<SQLRecoverableException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) iterator0, 0L, 0L);
      Locale.FilteringMode.values();
      IteratorUtils.toList((Iterator<?>) boundedIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = iterator0;
      iteratorArray0[1] = (Iterator<SQLRecoverableException>) boundedIterator0;
      iteratorArray0[2] = iterator0;
      Iterator<SQLRecoverableException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) comparator0, (Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MapIterator<SQLTimeoutException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ListIteratorWrapper<SQLTimeoutException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTimeoutException>(mapIterator0);
      Enumeration<SQLTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientException>) listIteratorWrapper0);
      IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      IteratorUtils.size(mapIterator0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0, false);
      Enumeration<SQLClientInfoException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) singletonIterator0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration1, (Collection<? super SQLException>) stack0);
      SQLDataException sQLDataException0 = new SQLDataException("Tzx~F~JXf=");
      IteratorUtils.asIterable((Iterator<? extends SQLException>) singletonIterator0);
      IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLDataException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) "MapIterator[");
      Factory<SQLClientInfoException> factory0 = ConstantFactory.constantFactory((SQLClientInfoException) null);
      Transformer<Object, SQLClientInfoException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLClientInfoException>) factory0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 4);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      closureArray0[3] = closure0;
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      nullIsFalsePredicate0.evaluate((Object) null);
      Iterator<SQLTransientConnectionException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ArrayDeque<LinkedList>>) null, (Predicate<? super ArrayDeque<LinkedList>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(16);
      Integer integer1 = new Integer(16);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer1);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) listIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<Integer>) listIterator0, (Transformer<? super Integer, String>) transformer0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Transformer<Object, Locale.FilteringMode> transformer1 = ConstantTransformer.constantTransformer(locale_FilteringMode1);
      IteratorUtils.objectGraphIterator(locale_FilteringMode0, (Transformer<? super Locale.FilteringMode, ? extends Locale.FilteringMode>) transformer1);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 16, (-1390));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      int int0 = 5;
      Integer integer0 = new Integer(5);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1073741824);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1753));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(10);
      integerArray0[7] = integer7;
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0);
      HashMap<Predicate<Integer>, Closure<Integer>> hashMap0 = new HashMap<Predicate<Integer>, Closure<Integer>>();
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Integer> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Integer>>) priorityQueue0);
      hashMap0.put(predicate0, (Closure<Integer>) null);
      Closure<Integer> closure0 = SwitchClosure.switchClosure((Map<Predicate<Integer>, Closure<Integer>>) hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Integer>) objectArrayIterator0, (Closure<? super Integer>) closure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.SwitchClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) iterator0;
      objectArray0[1] = (Object) iIOMetadataNode0;
      objectArray0[2] = (Object) iterator0;
      objectArray0[3] = (Object) "Parameter types must match the arguments";
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0, 1);
      IteratorUtils.contains((Iterator<Object>) resettableListIterator0, (Object) null);
      MapIterator<SQLTransientConnectionException, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(") greater than the size of the ", ") greater than the size of the ");
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>((Predicate<? super SQLException>) null);
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator0 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) loopingListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("The predicate and closure arrays must be the same size", "]\"K[7 5s)o}}E", 0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", (String) null, 0, sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException((String) null, "1&Z", sQLNonTransientConnectionException2);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("]\"K[7 5s)o}}E", sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      ObjectArrayIterator<SQLNonTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      BoundedIterator<SQLNonTransientConnectionException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) objectArrayIterator0, (long) 0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) boundedIterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.collections4.functors.ComparatorPredicate$1");
      FileSystemHandling.shouldAllThrowIOExceptions();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Predicate<SQLException> predicate0 = FalsePredicate.falsePredicate();
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>(predicate0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) nullIsExceptionPredicate0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 0, hashtable0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((String) null, (String) null, map0, sQLNonTransientConnectionException0);
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(map1);
      sQLNonTransientConnectionException0.setNextException(sQLClientInfoException2);
      IteratorUtils.getIterator(map1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("5e~Z.$/~<OK?{Z[?E", "[tAa':1w<Iu", (Throwable) null);
      sQLNonTransientConnectionException0.printStackTrace();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("5e~Z.$/~<OK?{Z[?E", "Load factor must be greater than 0", (int[]) null);
      sQLNonTransientConnectionException0.setNextException(batchUpdateException0);
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>();
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>(linkedList0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Load factor must be greater than 0", "[tAa':1w<Iu");
      linkedList0.add(sQLTimeoutException0);
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTimeoutException>) linkedList0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, (-386));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -386
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      Iterator<SQLException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLException>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.find(iterator0, (Predicate<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = "Parameter types must match the arguments";
      long long0 = 0L;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLRecoverableException[]) null, 3264, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      Iterator<SQLTransientConnectionException> iterator0 = null;
      IteratorUtils.size((Iterator<?>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Array class must not be null");
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashtable0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0, false);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) singletonIterator0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0, (Collection<? super SQLException>) stack0);
      String string0 = "Tzx~F~JXf=";
      SQLDataException sQLDataException0 = new SQLDataException("Tzx~F~JXf=", "", 742);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Integer integer0 = new Integer(91);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) listIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      SQLDataException sQLDataException0 = new SQLDataException("Closure collection must not be null", "iterator", (-1592));
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 253;
      int int1 = 1098;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Predicate<SQLException> predicate0 = FalsePredicate.falsePredicate();
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>(predicate0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) nullIsExceptionPredicate0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(linkedList0);
      IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) loopingIterator0, (Iterator<? extends SQLDataException>) loopingIterator0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      EntrySetMapIterator<SQLTimeoutException, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, SQLDataException>(hashMap0);
      MapIterator<SQLTimeoutException, SQLNonTransientException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTimeoutException, ? extends SQLNonTransientException>) entrySetMapIterator0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Iterator<? extends SQLTimeoutException>) entrySetMapIterator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTimeoutException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator1, (Iterator<? extends SQLTimeoutException>) iterator0, (Iterator<? extends SQLTimeoutException>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[", "[");
      Iterator<?> iterator0 = IteratorUtils.getIterator("[");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(" pr5{jHY,!9wAkE", (String) null, 1998, sQLNonTransientConnectionException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Integer integer0 = new Integer(3183);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(integer0, defaultEquator0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(equalPredicate0, equalPredicate0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(orPredicate0);
      Class<SQLWarning> class0 = SQLWarning.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = (Predicate<Object>) orPredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      ExceptionPredicate.exceptionPredicate();
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray1[0] = (Predicate<Object>) orPredicate0;
      NonePredicate<Object> nonePredicate1 = new NonePredicate<Object>(predicateArray1);
      IteratorUtils.matchesAll((Iterator<ArrayDeque<LinkedList>>) iterator0, (Predicate<? super ArrayDeque<LinkedList>>) nonePredicate1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) orPredicate0, 98);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      Consumer<SQLNonTransientException> consumer0 = (Consumer<SQLNonTransientException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Stack<SQLException> stack0 = new Stack<SQLException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      EqualPredicate.equalPredicate((Object) "MapIterator[");
      SQLClientInfoException sQLClientInfoException0 = null;
      ConstantFactory.constantFactory((SQLClientInfoException) null);
      Iterator<ClientInfoStatus> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) linkedHashSet0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0);
      HashMap<Locale.FilteringMode, PriorityQueue<Object>> hashMap0 = new HashMap<Locale.FilteringMode, PriorityQueue<Object>>();
      EntrySetMapIterator<Locale.FilteringMode, PriorityQueue<Object>> entrySetMapIterator0 = new EntrySetMapIterator<Locale.FilteringMode, PriorityQueue<Object>>(hashMap0);
      IteratorUtils.toListIterator((Iterator<? extends Locale.FilteringMode>) entrySetMapIterator0);
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) listIterator0, (Iterator<? extends String>) listIterator0);
      Iterator<String> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<String>) zippingIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Iterator<SQLRecoverableException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.size(iterator0);
      OrderedMapIterator<SQLTransactionRollbackException, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) orderedMapIterator0);
      IteratorUtils.singletonIterator("");
      Properties[] propertiesArray0 = new Properties[2];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      Object object0 = new Object();
      properties0.put(properties0, object0);
      propertiesArray0[1] = properties1;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0, 0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("G;ze@e_%IQJ)!I", "G;ze@e_%IQJ)!I", (-1625));
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) singletonListIterator0, (Predicate<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Predicate<SQLRecoverableException> predicate0 = UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLRecoverableException>) null, (Predicate<? super SQLRecoverableException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("]]l\"O");
      iIOMetadataNode0.getUserObject();
      IteratorUtils.singletonIterator(iIOMetadataNode0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", "org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", (-1962), hashtable0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLClientInfoException0);
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLRecoverableException>) singletonListIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      assertFalse(listIterator0.hasPrevious());
      
      ListIterator<Iterator<SQLDataException>> listIterator1 = EmptyListIterator.emptyListIterator();
      IteratorUtils.unmodifiableListIterator(listIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLNonTransientException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate1);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate1);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MapIterator<SQLTimeoutException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ListIteratorWrapper<SQLTimeoutException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTimeoutException>(mapIterator0);
      Enumeration<SQLTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientException>) listIteratorWrapper0);
      Iterator<Object> iterator0 = IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      IteratorUtils.size(mapIterator0);
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      IteratorUtils.isEmpty(iterator0);
      Integer integer0 = new Integer((-1558));
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) integer0, 1514, 1073741824);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      EmptyIterator.emptyIterator();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<BatchUpdateException, SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransientConnectionExceptionArray0[0]);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<SQLNonTransientException> arrayList0 = new ArrayList<SQLNonTransientException>(arrayDeque0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstantiateFactory<SQLClientInfoException> instantiateFactory0 = new InstantiateFactory<SQLClientInfoException>(class0);
      FactoryTransformer.factoryTransformer((Factory<? extends SQLClientInfoException>) instantiateFactory0);
      Transformer<Object, SQLTimeoutException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Closure<Object> closure1 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 3);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>((Predicate<? super Object>) null, closure1, closure0);
      closureArray0[0] = (Closure<Object>) ifClosure0;
      closureArray0[1] = closure0;
      IfClosure<Object> ifClosure1 = new IfClosure<Object>((Predicate<? super Object>) null, closureArray0[0]);
      closureArray0[2] = (Closure<Object>) ifClosure1;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNode0.getPreviousSibling();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      IteratorUtils.getIterator((Object) null);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[6];
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransientConnectionException0;
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransientConnectionException0;
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTransientConnectionException0;
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransientConnectionException0;
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTransientConnectionException0;
      sQLTransientExceptionArray0[5] = (SQLTransientException) sQLTransientConnectionException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTransientExceptionArray0, 2503, 253);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      IteratorUtils.emptyIterator();
      SQLWarning sQLWarning0 = new SQLWarning((String) null, (String) null);
      TreeSet<SQLException> treeSet0 = new TreeSet<SQLException>();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) null, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0, 0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[8];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, (Throwable) null);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("jx!1 sly6UL[", "iterator", (-1418), sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(".shA^dGvDv", sQLInvalidAuthorizationSpecException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("Predicate must not be null", "%K3MrAYn!QxeSMon7]", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException(sQLTimeoutException1);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException((String) null, "P53@z!-vN)TH\"7Ju*5g", 0, sQLTimeoutException2);
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      sQLTimeoutException4.spliterator();
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("c3I<Hb ", ">sFL", 0, sQLInvalidAuthorizationSpecException0);
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException("jx!1 sly6UL[", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      SQLTimeoutException sQLTimeoutException7 = new SQLTimeoutException("");
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException7;
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 0, 0);
      IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>) resettableListIterator0, (Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator1, (-2374L), (long) (-1418));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNamespaceURI();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      iIOMetadataNode0.getFirstChild();
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) listIterator0, class0);
      ResettableListIterator<Properties> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toString((Iterator<Properties>) resettableListIterator0);
      IteratorUtils.toList((Iterator<? extends Properties>) resettableListIterator0);
      MapIterator<SQLSyntaxErrorException, Closure<Object>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      BoundedIterator<SQLSyntaxErrorException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLSyntaxErrorException>) mapIterator0, 0L, 0L);
      IteratorUtils.toArray((Iterator<?>) boundedIterator0);
      ObjectArrayIterator<Object> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<Object>(objectArray0, 2227, (-887));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransientConnectionExceptionArray0[0]);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("dO3Ry,OOwrC", "", (-1879));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("dO3Ry,OOwrC", "dO3Ry,OOwrC", 0, sQLTransientConnectionException0);
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLInvalidAuthorizationSpecException1);
      IdentityPredicate.identityPredicate((SQLException) sQLInvalidAuthorizationSpecException1);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray1 = new SQLTransientConnectionException[2];
      sQLTransientConnectionExceptionArray1[0] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray1[1] = sQLTransientConnectionException0;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray1, 0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientConnectionException>) resettableListIterator0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray2 = IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) listIterator0, class0);
      assertEquals(2, sQLTransientConnectionExceptionArray2.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransientConnectionExceptionArray0[0]);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<SQLNonTransientException> arrayList0 = new ArrayList<SQLNonTransientException>(arrayDeque0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstantiateFactory<SQLClientInfoException> instantiateFactory0 = new InstantiateFactory<SQLClientInfoException>(class0);
      FactoryTransformer.factoryTransformer((Factory<? extends SQLClientInfoException>) instantiateFactory0);
      Transformer<Object, SQLTimeoutException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Closure<Object> closure1 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 3);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>((Predicate<? super Object>) null, closure1, closure0);
      closureArray0[0] = (Closure<Object>) ifClosure0;
      closureArray0[1] = closure0;
      IfClosure<Object> ifClosure1 = new IfClosure<Object>((Predicate<? super Object>) null, closureArray0[0]);
      closureArray0[2] = (Closure<Object>) ifClosure1;
      IteratorUtils.arrayListIterator(closureArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, sQLTransientConnectionException0);
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTimeoutException>) singletonListIterator0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 9
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(") greater than the size of the ", ") greater than the size of the ");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("5e~Z.$/~<OK?{Z[?E", "Parameter types must match the arguments", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException1.printStackTrace();
      IteratorUtils.getIterator(") greater than the size of the ");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", ") greater than the size of the ", (-1115), sQLNonTransientConnectionException0);
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLNonTransientConnectionException0);
      Predicate<SQLException> predicate0 = IdentityPredicate.identityPredicate((SQLException) sQLInvalidAuthorizationSpecException0);
      IteratorUtils.find((Iterator<SQLException>) singletonIterator0, (Predicate<? super SQLException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "MapIterator[";
      EqualPredicate.equalPredicate((Object) "MapIterator[");
      Factory<SQLClientInfoException> factory0 = ConstantFactory.constantFactory((SQLClientInfoException) null);
      Transformer<Object, SQLClientInfoException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLClientInfoException>) factory0);
      Transformer<Object, SQLTimeoutException> transformer1 = ExceptionTransformer.exceptionTransformer();
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer1);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>((Predicate<? super Object>) null, closure0, closure0);
      IfClosure<Object> ifClosure1 = new IfClosure<Object>((Predicate<? super Object>) null, closure0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 4);
      closureArray0[0] = closure0;
      closureArray0[1] = (Closure<Object>) ifClosure0;
      closureArray0[2] = (Closure<Object>) ifClosure0;
      Closure<Object> closure1 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      closureArray0[3] = closure1;
      IteratorUtils.arrayListIterator(closureArray0);
      String string1 = null;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (Throwable) null);
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      ReverseListIterator<SQLDataException> reverseListIterator0 = new ReverseListIterator<SQLDataException>(stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLDataException>) reverseListIterator0, (Predicate<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      ArrayList<SQLNonTransientException> arrayList0 = new ArrayList<SQLNonTransientException>(linkedHashSet0);
      LoopingListIterator<SQLNonTransientException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientException>(arrayList0);
      loopingListIterator0.reset();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("q4j9{5[=M[q>o>ZDg");
      SQLDataException sQLDataException0 = new SQLDataException("", sQLRecoverableException0);
      arrayList0.add((SQLNonTransientException) sQLDataException0);
      ExceptionClosure.exceptionClosure();
      Properties properties0 = new Properties();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) properties0);
      OrPredicate<SQLException> orPredicate0 = new OrPredicate<SQLException>(predicate0, predicate0);
      Predicate<SQLNonTransientException> predicate1 = NotPredicate.notPredicate((Predicate<? super SQLNonTransientException>) orPredicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLDataException>) null, (Predicate<? super SQLDataException>) predicate1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Predicate<SQLException> predicate0 = FalsePredicate.falsePredicate();
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>(predicate0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) nullIsExceptionPredicate0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(linkedList0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) loopingIterator0, (Iterator<? extends SQLDataException>) loopingIterator0);
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) iterator0);
      ReverseListIterator<SQLDataException> reverseListIterator0 = new ReverseListIterator<SQLDataException>(list0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLDataException>) reverseListIterator0, (Predicate<? super SQLDataException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Enumeration must not be null", hashtable0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0, true);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) singletonIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0, (Collection<? super SQLException>) priorityQueue0);
      int int0 = 100;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Tzx~F~JXf=", "2fIrEWyR-)\" ~K ", 100);
      IteratorUtils.getIterator(sQLNonTransientConnectionException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("1xv)6S$'Zx4k|<T", "Enumeration must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientException0, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, Object>(orderedMapIterator0);
      MapIterator<SQLClientInfoException, Object> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, Object>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) mapIterator0, (Iterator<? extends SQLClientInfoException>) orderedMapIterator0, (Iterator<? extends SQLClientInfoException>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        FactoryTransformer.factoryTransformer((Factory<? extends String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factory must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransientConnectionExceptionArray0[0]);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException0;
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) linkedHashSet0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0);
      Iterator<SQLTimeoutException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      ConstantTransformer<Object, SQLRecoverableException> constantTransformer0 = new ConstantTransformer<Object, SQLRecoverableException>((SQLRecoverableException) null);
      Iterator<SQLRecoverableException> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends Properties>) iterator0, (Transformer<? super Properties, ? extends SQLRecoverableException>) constantTransformer0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) iterator1, 0L, 0L);
      Locale.FilteringMode.values();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNode0.getLength();
      iIOMetadataNode0.getPreviousSibling();
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("a;<<}+X1");
      iIOMetadataNode0.getElementsByTagName("a;<<}+X1");
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      IteratorUtils.toList((Iterator<? extends Properties>) singletonIterator0, 181);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "a;<<}+X1", (-1331));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("a;<<}+X1", "", 43, sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException();
      Iterator<SQLRecoverableException> iterator0 = EmptyIterator.emptyIterator();
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(") greater than the size of the ", ") greater than the size of the ");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("5e~Z.$/~<OK?{Z[?E", "Parameter types must match the arguments", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException1.printStackTrace();
      Iterator<?> iterator0 = IteratorUtils.getIterator(") greater than the size of the ");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      EmptyIterator.emptyIterator();
      IteratorUtils.size(iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(") greater than the size of the ", ") greater than the size of the ");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("5e~Z.$/~<OK?{Z[?E", "Parameter types must match the arguments", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException1.printStackTrace();
      sQLNonTransientConnectionException1.setNextException(sQLNonTransientConnectionException0);
      IteratorUtils.getIterator(") greater than the size of the ");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      IteratorUtils.getIterator(") greater than the size of the ");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("5e~Z.$/~<OK?{Z[?E");
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      OrderedMapIterator<IIOMetadataNode, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<IIOMetadataNode, SQLDataException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<IIOMetadataNode, SQLDataException>) orderedMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) anyPredicate0, (Predicate<? super Object>) predicate0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate1);
      anyPredicate0.getPredicates();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.IteratorUtils", "#!]>B'YHxBF", 91);
      nullIsFalsePredicate0.evaluate(sQLFeatureNotSupportedException0);
      Iterator<Properties> iterator0 = null;
      IteratorUtils.matchesAll((Iterator<ArrayDeque<LinkedList>>) null, (Predicate<? super ArrayDeque<LinkedList>>) predicate1);
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>();
      ArrayList<SQLNonTransientException> arrayList0 = new ArrayList<SQLNonTransientException>(arrayDeque0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstantiateFactory<SQLClientInfoException> instantiateFactory0 = new InstantiateFactory<SQLClientInfoException>(class0);
      Transformer<Object, SQLClientInfoException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLClientInfoException>) instantiateFactory0);
      Closure<Object> closure1 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 7);
      ForClosure<Object> forClosure0 = new ForClosure<Object>((-2597), closure1);
      closureArray0[0] = (Closure<Object>) forClosure0;
      closureArray0[1] = closure1;
      closureArray0[2] = closure0;
      closureArray0[3] = closure0;
      closureArray0[4] = closure1;
      closureArray0[5] = closure0;
      closureArray0[6] = closure1;
      IteratorUtils.arrayListIterator(closureArray0);
      int int0 = 44;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ArrayIterator<SQLTimeoutException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLTimeoutException>(iIOMetadataNode0, (-1331));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("]]l\"O");
      iIOMetadataNode0.getUserObject();
      IteratorUtils.singletonIterator(iIOMetadataNode0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      IteratorUtils.toList((Iterator<? extends SQLDataException>) iterator0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransientConnectionExceptionArray0[0]);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("dO3Ry,OOwrC", "", (-1879));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("dO3Ry,OOwrC", "dO3Ry,OOwrC", 0, sQLTransientConnectionException0);
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLInvalidAuthorizationSpecException1);
      Predicate<SQLException> predicate0 = IdentityPredicate.identityPredicate((SQLException) sQLInvalidAuthorizationSpecException1);
      IteratorUtils.find((Iterator<SQLException>) singletonIterator0, (Predicate<? super SQLException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      String string0 = "Enumeration must not be null";
      IteratorUtils.size(resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) linkedHashSet0);
      assertNotNull(resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      Comparator<SQLTimeoutException> comparator0 = (Comparator<SQLTimeoutException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) linkedHashSet0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>) resettableIterator1, (Iterator<? extends SQLTimeoutException>) resettableIterator1);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("a;<<}+X1");
      iIOMetadataNode0.getElementsByTagName("a;<<}+X1");
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      int int0 = (-1331);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) singletonIterator0, (-1331));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) resettableListIterator0, (Iterator<? extends SQLRecoverableException>) resettableListIterator0);
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      Properties properties0 = new Properties();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Closure must not be null");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNamespaceURI();
      iIOMetadataNode0.getFirstChild();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      InstantiateFactory<SQLClientInfoException> instantiateFactory0 = new InstantiateFactory<SQLClientInfoException>(class1);
      Transformer<Object, SQLClientInfoException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLClientInfoException>) instantiateFactory0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 2);
      closureArray0[0] = closure0;
      closureArray0[1] = closure0;
      IteratorUtils.arrayListIterator(closureArray0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(class0);
      SQLDataException sQLDataException0 = new SQLDataException("8t!gY@\"@6.=o", "a;<<}+X1", (-2287));
      Iterator<?> iterator1 = IteratorUtils.getIterator(class1);
      assertNotSame(iterator1, iterator0);
      
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 1);
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>();
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>(arrayDeque0);
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(linkedList0);
      iteratorArray0[0] = (Iterator<SQLDataException>) loopingListIterator0;
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) vector0);
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(linkedList0);
      Iterator<SQLDataException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) null, (Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) loopingIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      ConstantTransformer<Object, SQLRecoverableException> constantTransformer0 = new ConstantTransformer<Object, SQLRecoverableException>((SQLRecoverableException) null);
      Iterator<SQLRecoverableException> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends Properties>) iterator0, (Transformer<? super Properties, ? extends SQLRecoverableException>) constantTransformer0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) iterator1, 0L, 0L);
      IteratorUtils.singletonIterator((Object) iterator0);
      Integer integer0 = new Integer(0);
      int int0 = 1;
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      String string0 = "UL";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("UL");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 0, (-1761));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("a;<<}+X1");
      iIOMetadataNode0.getElementsByTagName("a;<<}+X1");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLClientInfoException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("a;<<}+X1", "", sQLIntegrityConstraintViolationException0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "transformer may not be null");
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      Predicate<SQLTransientException> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      SQLDataException sQLDataException0 = new SQLDataException("", "transformer may not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLDataException0, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      DataTruncation dataTruncation0 = new DataTruncation(127, true, false, (-1992), (-1992), batchUpdateException0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[6];
      dataTruncation0.spliterator();
      dataTruncationArray0[0] = dataTruncation0;
      dataTruncationArray0[1] = dataTruncation0;
      dataTruncationArray0[2] = dataTruncation0;
      dataTruncationArray0[3] = dataTruncation0;
      dataTruncationArray0[4] = dataTruncation0;
      dataTruncationArray0[5] = dataTruncation0;
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      dataTruncation0.printStackTrace();
      IteratorUtils.toString((Iterator<DataTruncation>) objectArrayIterator0, (Transformer<? super DataTruncation, String>) transformer0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "*Z7*/");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("S7F[vk_%n?</8`{%5", "", 1753);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, (-1182), sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException();
      IteratorUtils.size(objectArrayIterator0);
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) linkedList0);
      LinkedList<SQLException> linkedList1 = new LinkedList<SQLException>();
      LoopingListIterator<SQLException> loopingListIterator0 = new LoopingListIterator<SQLException>(linkedList1);
      ListIterator<SQLException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLException>) loopingListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>();
      ArrayList<SQLNonTransientException> arrayList0 = new ArrayList<SQLNonTransientException>(arrayDeque0);
      LoopingListIterator<SQLNonTransientException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientException>(arrayList0);
      loopingListIterator0.reset();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", (Throwable) null);
      SQLException sQLException0 = new SQLException("&+", sQLRecoverableException0);
      SQLException sQLException1 = new SQLException("= x", "", sQLException0);
      SQLDataException sQLDataException0 = new SQLDataException("&+", sQLException1);
      arrayList0.add((SQLNonTransientException) sQLDataException0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLNonTransientException>) loopingListIterator0, (Closure<? super SQLNonTransientException>) closure0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "<)F|^<PUhJ']b4f";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("<)F|^<PUhJ']b4f");
      iIOMetadataNode0.getUserObject();
      IteratorUtils.singletonIterator(iIOMetadataNode0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      int[] intArray0 = new int[1];
      intArray0[0] = (-1992);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, false, 0, (-1992), batchUpdateException0);
      dataTruncationArray0[0] = dataTruncation0;
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<DataTruncation>) objectArrayIterator0, (Transformer<? super DataTruncation, String>) transformer0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("k", "");
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "", (-1992));
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("[java.sql.DataTruncation: Data truncation]", "", 0, sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException3;
      IteratorUtils.size(objectArrayIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.iterators.ArrayListIterator", "Parameter types must match the arguments");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLNonTransientConnectionException0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator(sQLRecoverableException0);
      ListIteratorWrapper<SQLRecoverableException> listIteratorWrapper0 = new ListIteratorWrapper<SQLRecoverableException>(resettableIterator0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLRecoverableException>) listIteratorWrapper0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) iterator0, (Iterator<? extends SQLRecoverableException>) resettableIterator0);
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      Properties properties0 = new Properties();
      String string0 = "%w#%L4*;#Hxr6\\uwzY";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNamespaceURI();
      iIOMetadataNode0.getFirstChild();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("]]l\"O");
      iIOMetadataNode0.getUserObject();
      IteratorUtils.singletonIterator(iIOMetadataNode0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 5);
      ResettableIterator<SQLDataException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      BoundedIterator<SQLDataException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) resettableIterator0, 1232L);
      iteratorArray0[0] = (Iterator<SQLDataException>) boundedIterator0;
      OrderedMapIterator<SQLDataException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, DataTruncation>(orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLDataException, DataTruncation> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, DataTruncation>(abstractOrderedMapIteratorDecorator0);
      MapIterator<SQLDataException, DataTruncation> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends DataTruncation>) abstractMapIteratorDecorator0);
      iteratorArray0[1] = (Iterator<SQLDataException>) mapIterator0;
      SkippingIterator<SQLDataException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLDataException>) resettableIterator0, 1232L);
      iteratorArray0[2] = (Iterator<SQLDataException>) skippingIterator0;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[3] = (Iterator<SQLDataException>) resettableListIterator0;
      Iterator<SQLDataException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLDataException>) iteratorArray0[2]);
      iteratorArray0[4] = iterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) resettableListIterator0);
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) list0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) iteratorArray0[0]);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransientConnectionExceptionArray0[0]);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException0;
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0, 0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) objectArrayIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) objectArrayIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      iIOMetadataNode0.insertBefore(iIOMetadataNode0, iIOMetadataNode0);
      iIOMetadataNode0.getLastChild();
      IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 1, 1);
      IteratorUtils.emptyOrderedIterator();
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLException>) null, (Collection<? super SQLException>) priorityQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Entry does not exist: ");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator0, (Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLSyntaxErrorException0, comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      predicateArray0[1] = predicate0;
      Class<Boolean> class0 = Boolean.class;
      Class<SQLTransientConnectionException>[] classArray0 = (Class<SQLTransientConnectionException>[]) Array.newInstance(Class.class, 0);
      InstantiateFactory<Boolean> instantiateFactory0 = null;
      try {
        instantiateFactory0 = new InstantiateFactory<Boolean>(class0, classArray0, sQLSyntaxErrorExceptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InstantiateFactory: The constructor must exist and be public 
         //
         verifyException("org.apache.commons.collections4.functors.InstantiateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, ArrayDeque<Predicate>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) orderedMapIterator0, (Iterator<? extends BatchUpdateException>) orderedMapIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<BatchUpdateException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      ConstantTransformer<Object, SQLRecoverableException> constantTransformer0 = new ConstantTransformer<Object, SQLRecoverableException>((SQLRecoverableException) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")KJ(t9 A");
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Properties>) iterator0, (Transformer<? super Properties, ? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("a;<<}+X1");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("a;<<}+X1", "");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException((String) null, sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("", sQLTransientConnectionException1);
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("", "-MNtAue!o", sQLTransientConnectionException2);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTransientConnectionException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLNonTransientConnectionException, IIOMetadataNode> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.skippingIterator((Iterator<SQLNonTransientConnectionException>) mapIterator1, 689L);
      IteratorUtils.emptyIterator();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[4];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "Piz^cj=?YYf#]Q");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException((String) null, sQLTransientConnectionExceptionArray0[0]);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionExceptionArray0[0];
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("", (String) null, sQLTransientConnectionExceptionArray0[2]);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "i&]}", 8, sQLTransientConnectionExceptionArray0[2]);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      IteratorUtils.size(mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLClientInfoException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      int[] intArray0 = new int[1];
      intArray0[0] = (-1992);
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      StringValueTransformer.stringValueTransformer();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[22];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("k", "");
      sQLInvalidAuthorizationSpecExceptionArray0[18] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "", (-1992));
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("k", "", (-1992));
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException2;
      int int0 = IteratorUtils.size(objectArrayIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ConstantTransformer<Object, SQLRecoverableException> constantTransformer0 = new ConstantTransformer<Object, SQLRecoverableException>((SQLRecoverableException) null);
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.emptyIterator();
      String string0 = "";
      Transformer<Object, SQLRecoverableException> transformer0 = InvokerTransformer.invokerTransformer("");
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Properties>) resettableIterator0, (Transformer<? super Properties, ? extends SQLRecoverableException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) iterator0, 1448L, (-17L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      EmptyIterator.emptyIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, 4494L, 540L);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.map.AbstractHashedMap$HashEntry", (String) null, 384, sQLTransactionRollbackException0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[2];
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 10, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1, 1214);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("]]l\"O");
      iIOMetadataNode0.getUserObject();
      IteratorUtils.singletonIterator(iIOMetadataNode0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", "org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", (-1962), hashtable0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLClientInfoException0);
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLRecoverableException>) singletonListIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) iterator0);
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) list0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) resettableIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      InstantiateFactory<SQLClientInfoException> instantiateFactory0 = new InstantiateFactory<SQLClientInfoException>(class1);
      Transformer<Object, SQLClientInfoException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLClientInfoException>) instantiateFactory0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 2);
      closureArray0[0] = closure0;
      closureArray0[1] = closure0;
      IteratorUtils.arrayListIterator(closureArray0);
      IteratorUtils.getIterator(class0);
      SQLDataException sQLDataException0 = new SQLDataException("8t!gY@\"@6.=o", "a;<<}+X1", (-2287));
      IteratorUtils.getIterator(class1);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 1);
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>();
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>(arrayDeque0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.iterators.ArrayListIterator", "Parameter types must match the arguments");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("org.apache.commons.collections4.iterators.ArrayListIterator", "Parameter types must match the arguments", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException1.setNextException(sQLNonTransientConnectionException0);
      String string0 = "MapIterator[";
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) "MapIterator[");
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) notPredicate0);
      IteratorUtils.find((Iterator<SQLException>) null, (Predicate<? super SQLException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "a;<<}+X1";
      FileSystemHandling.shouldAllThrowIOExceptions();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("a;<<}+X1");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("a;<<}+X1");
      IteratorUtils.nodeListIterator(nodeList0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      iIOMetadataNode0.getNodeName();
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 6);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Integer>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Iterator must not be null");
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("a;<<}+X1");
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[7];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("VB]eIb64yt", "VB]eIb64yt", (Throwable) null);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException((Throwable) null);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("a;<<}+X1", (String) null, 1237);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException((String) null);
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException((String) null, "nKg_5Sat[F~l9:", 0, sQLFeatureNotSupportedException4);
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException6;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 9);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      classArray0[0] = class0;
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      classArray0[1] = class1;
      Class<IIOMetadataNode> class2 = IIOMetadataNode.class;
      classArray0[2] = class2;
      Class<IIOMetadataNode> class3 = IIOMetadataNode.class;
      classArray0[3] = class3;
      Class<IIOMetadataNode> class4 = IIOMetadataNode.class;
      classArray0[4] = class4;
      Class<IIOMetadataNode> class5 = IIOMetadataNode.class;
      classArray0[5] = class5;
      Class<IIOMetadataNode> class6 = IIOMetadataNode.class;
      classArray0[6] = class6;
      Class<IIOMetadataNode> class7 = IIOMetadataNode.class;
      classArray0[7] = class7;
      Class<IIOMetadataNode> class8 = IIOMetadataNode.class;
      classArray0[8] = class8;
      InvokerTransformer<SQLFeatureNotSupportedException, String> invokerTransformer0 = new InvokerTransformer<SQLFeatureNotSupportedException, String>((String) null, classArray0, sQLFeatureNotSupportedExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) invokerTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      IteratorUtils.emptyIterator();
      LinkedHashSet<SQLException>[] linkedHashSetArray0 = (LinkedHashSet<SQLException>[]) Array.newInstance(LinkedHashSet.class, 9);
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>();
      linkedHashSetArray0[0] = linkedHashSet0;
      LinkedHashSet<SQLException> linkedHashSet1 = new LinkedHashSet<SQLException>();
      linkedHashSetArray0[1] = linkedHashSet1;
      LinkedHashSet<SQLException> linkedHashSet2 = new LinkedHashSet<SQLException>();
      linkedHashSetArray0[2] = linkedHashSet2;
      LinkedHashSet<SQLException> linkedHashSet3 = new LinkedHashSet<SQLException>();
      linkedHashSetArray0[3] = linkedHashSet3;
      LinkedHashSet<SQLException> linkedHashSet4 = new LinkedHashSet<SQLException>();
      linkedHashSetArray0[4] = linkedHashSet4;
      LinkedHashSet<SQLException> linkedHashSet5 = new LinkedHashSet<SQLException>();
      linkedHashSetArray0[5] = linkedHashSet5;
      LinkedHashSet<SQLException> linkedHashSet6 = new LinkedHashSet<SQLException>();
      linkedHashSetArray0[6] = linkedHashSet6;
      LinkedHashSet<SQLException> linkedHashSet7 = new LinkedHashSet<SQLException>();
      linkedHashSetArray0[7] = linkedHashSet7;
      LinkedHashSet<SQLException> linkedHashSet8 = new LinkedHashSet<SQLException>();
      linkedHashSetArray0[8] = linkedHashSet8;
      ResettableListIterator<LinkedHashSet<SQLException>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedHashSetArray0);
      IteratorUtils.unmodifiableIterator((Iterator<LinkedHashSet<SQLException>>) resettableListIterator0);
      Comparator<SQLException> comparator0 = null;
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 7);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 4);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("a;<<}+X1");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("a;<<}+X1");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Iterator<Predicate<Object>> iterator0 = null;
      int int0 = (-1891);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Predicate<Object>>) null, (-1891));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.collections4.map.Flat3Map$FlatMapEntry");
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      ConstantTransformer<Object, SQLRecoverableException> constantTransformer0 = new ConstantTransformer<Object, SQLRecoverableException>((SQLRecoverableException) null);
      Iterator<SQLRecoverableException> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends Properties>) iterator0, (Transformer<? super Properties, ? extends SQLRecoverableException>) constantTransformer0);
      BoundedIterator<SQLRecoverableException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) iterator1, 0L, 0L);
      Locale.FilteringMode.values();
      IteratorUtils.toList((Iterator<?>) boundedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransientConnectionException[]) null, (-2230));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      ReverseListIterator<SQLClientInfoException> reverseListIterator0 = new ReverseListIterator<SQLClientInfoException>(stack0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      int[] intArray0 = new int[4];
      intArray0[0] = 2292;
      intArray0[1] = 2292;
      intArray0[2] = 2292;
      intArray0[3] = 2292;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("8w_=\"^dotQ:Q>^H", "", 2292, intArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("8w_=\"^dotQ:Q>^H", hashtable0, batchUpdateException0);
      reverseListIterator0.add(sQLClientInfoException0);
      int int0 = IteratorUtils.size(reverseListIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "org.apache.commons.collections4.iterators.ArrayListIterator";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("org.apache.commons.collections4.iterators.ArrayListIterator", "Parameter types must match the arguments", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException1.setNextException(sQLNonTransientConnectionException0);
      IteratorUtils.getIterator(sQLNonTransientConnectionException1);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[3];
      String string1 = "";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLTimeoutException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      int int0 = (-1);
      SQLTransientException sQLTransientException0 = new SQLTransientException("Parameter types must match the arguments", "Parameter types must match the arguments", (-1), sQLSyntaxErrorException0);
      sQLTransientException0.getStackTrace();
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("org.apache.commons.collections4.iterators.ArrayListIterator", sQLTransientException0);
      String string2 = "";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Iterator<SQLTimeoutException> iterator0 = EmptyIterator.emptyIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>();
      ArrayList<SQLNonTransientException> arrayList0 = new ArrayList<SQLNonTransientException>(arrayDeque0);
      LoopingListIterator<SQLNonTransientException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientException>(arrayList0);
      loopingListIterator0.reset();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLNonTransientException>) loopingListIterator0, (Closure<? super SQLNonTransientException>) closure0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 7);
      closureArray0[0] = closure0;
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstantiateFactory<SQLClientInfoException> instantiateFactory0 = new InstantiateFactory<SQLClientInfoException>(class0);
      Transformer<Object, SQLClientInfoException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLClientInfoException>) instantiateFactory0);
      Closure<Object> closure1 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      closureArray0[1] = closure1;
      closureArray0[2] = closure0;
      closureArray0[3] = closure0;
      closureArray0[4] = closure0;
      closureArray0[5] = closure0;
      closureArray0[6] = closure0;
      IteratorUtils.arrayListIterator(closureArray0);
      Iterator<?> iterator1 = IteratorUtils.getIterator(iterator0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "", (-2287));
      Iterator<?> iterator2 = IteratorUtils.getIterator(sQLDataException0);
      assertFalse(iterator2.equals((Object)iterator1));
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = "Parameter types must match the arguments";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("org.apache.commons.collections4.iterators.ArrayListIterator", "Parameter types must match the arguments", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException1.setNextException(sQLNonTransientConnectionException0);
      IteratorUtils.getIterator(sQLNonTransientConnectionException1);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[3];
      String string1 = "";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLTimeoutException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      int int0 = (-1);
      SQLTransientException sQLTransientException0 = new SQLTransientException("Parameter types must match the arguments", "Parameter types must match the arguments", (-1), sQLSyntaxErrorException0);
      sQLTransientException0.getStackTrace();
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("org.apache.commons.collections4.iterators.ArrayListIterator", sQLTransientException0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 5);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[0];
      ObjectArrayIterator<IIOMetadataNode> objectArrayIterator0 = new ObjectArrayIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) objectArrayIterator0);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) listIterator0;
      OrderedMapIterator<IIOMetadataNode, EnumSet<Locale.FilteringMode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, EnumSet<Locale.FilteringMode>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, EnumSet<Locale.FilteringMode>>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        abstractOrderedMapIteratorDecorator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 5);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[0];
      ObjectArrayIterator<IIOMetadataNode> objectArrayIterator0 = new ObjectArrayIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) objectArrayIterator0);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) listIterator0;
      OrderedMapIterator<IIOMetadataNode, EnumSet<Locale.FilteringMode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, EnumSet<Locale.FilteringMode>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, EnumSet<Locale.FilteringMode>>(orderedMapIterator0);
      iteratorArray0[1] = (Iterator<IIOMetadataNode>) abstractOrderedMapIteratorDecorator0;
      int int0 = (-1197);
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0, (-1197));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "dO3Ry,OOwrC", (-1879));
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0, 0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) objectArrayIterator0, class0);
      assertFalse(objectArrayIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = 530;
      int int1 = 0;
      DataTruncation dataTruncation0 = new DataTruncation(530, false, false, 0, 0);
      dataTruncation0.getRead();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation0, (-3716));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      ConstantTransformer<Object, SQLRecoverableException> constantTransformer0 = new ConstantTransformer<Object, SQLRecoverableException>((SQLRecoverableException) null);
      Iterator<SQLRecoverableException> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends Properties>) iterator0, (Transformer<? super Properties, ? extends SQLRecoverableException>) constantTransformer0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) iterator1, 0L, 0L);
      IteratorUtils.singletonIterator((Object) iterator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode.values();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) locale_FilteringMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) properties0, 10, 1510);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) nonePredicate0;
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      predicateArray0[1] = predicate0;
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      Predicate<Object> predicate1 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[2] = predicate1;
      Predicate<Object> predicate2 = NotNullPredicate.notNullPredicate();
      predicateArray0[3] = predicate2;
      Predicate<Object> predicate3 = EqualPredicate.equalPredicate((Object) predicate1);
      predicateArray0[4] = predicate3;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IfClosure<SQLException> ifClosure0 = new IfClosure<SQLException>(onePredicate0, closure0, closure0);
      IteratorUtils.apply((Iterator<BatchUpdateException>) null, (Closure<? super BatchUpdateException>) ifClosure0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      MapIterator<SQLNonTransientConnectionException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.skippingIterator((Iterator<SQLNonTransientConnectionException>) mapIterator0, 689L);
      IteratorUtils.emptyIterator();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[4];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "Piz^cj=?YYf#]Q");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException((String) null, sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("", sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("", (String) null, sQLTransientConnectionException2);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      Predicate<SQLTransientException> predicate0 = NotNullPredicate.notNullPredicate();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[6];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("ZAUDrJ(W*[):~");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLSyntaxErrorException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransactionRollbackException0);
      batchUpdateException0.getNextException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory", "org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory", 0, (Throwable) null);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("G!Y0uLc", "ZAUDrJ(W*[):~");
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("", "org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory", 0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("Transformers must not be null", "", 0);
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException5;
      sQLSyntaxErrorException3.spliterator();
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("B/;n>4b(h", "", (Throwable) null);
      sQLSyntaxErrorException6.getStackTrace();
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException6;
      IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getPreviousSibling();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      int[] intArray0 = new int[1];
      intArray0[0] = (-772);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Oqz2D9}F'S7@", "Oqz2D9}F'S7@", (-772), sQLIntegrityConstraintViolationException0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLRecoverableException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Oqz2D9}F'S7@", "Oqz2D9}F'S7@", (-772), intArray0, mockThrowable0);
      DataTruncation dataTruncation0 = new DataTruncation((-772), true, true, (-772), (-772), batchUpdateException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-772), true, false, 711, (-772));
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(711, true, false, 711, 0);
      dataTruncationArray0[2] = dataTruncation2;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("Oqz2D9}F'S7@", "@ab?|n", 0);
      DataTruncation dataTruncation3 = new DataTruncation(711, false, true, (-772), 44, sQLRecoverableException1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException1.forEach(consumer0);
      dataTruncationArray0[3] = dataTruncation3;
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("nBK4k%?5a6/v");
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, 0L, 4775L);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("nBK4k%?5a6/v", "nBK4k%?5a6/v", 5, sQLTransactionRollbackException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      int int0 = 100;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 100, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "Er$/!oAH=C''<y55Z";
      String string1 = "Nh>@B#";
      int[] intArray0 = new int[4];
      intArray0[0] = 488;
      intArray0[1] = 488;
      intArray0[2] = 488;
      intArray0[3] = 488;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Er$/!oAH=C''<y55Z", "Nh>@B#", 488, intArray0, sQLIntegrityConstraintViolationException0);
      batchUpdateException0.getUpdateCounts();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) batchUpdateException0, (-2331), 965);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 2);
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) orderedMapIterator0;
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[1];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("0 t`k6", "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("T<&eO%_", sQLTransientConnectionException0);
      sQLTransientConnectionException0.printStackTrace();
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      iteratorArray0[1] = (Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
      TreeSet<StringTokenizer> treeSet0 = new TreeSet<StringTokenizer>();
      IteratorUtils.singletonListIterator(treeSet0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[0];
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      assertFalse(resettableListIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[3];
      SQLDataException sQLDataException0 = new SQLDataException("y>p@Wt mJN9)cnh%", "", 0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("00zp9o&BY7dG", "x6^>4c2d@w7e*{7c", (-662), sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-662);
      intArray0[2] = (-662);
      intArray0[3] = 0;
      intArray0[4] = (-662);
      intArray0[5] = (-662);
      intArray0[6] = 0;
      intArray0[7] = (-662);
      intArray0[8] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLDataException0);
      SQLDataException sQLDataException2 = new SQLDataException((String) null, "", batchUpdateException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLDataExceptionArray0, 3772);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 9);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) comparator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableListIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 4);
      OrderedMapIterator<SQLSyntaxErrorException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, SQLSyntaxErrorException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, SQLSyntaxErrorException>(orderedMapIterator0);
      OrderedMapIterator<SQLSyntaxErrorException, SQLSyntaxErrorException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) abstractOrderedMapIteratorDecorator0);
      AbstractMapIteratorDecorator<SQLSyntaxErrorException, SQLSyntaxErrorException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLSyntaxErrorException, SQLSyntaxErrorException>(orderedMapIterator1);
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) abstractMapIteratorDecorator0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("LR^{y`YgAv|M|J", "yJbK&^jv,");
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, false);
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) singletonIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      int[] intArray0 = new int[1];
      intArray0[0] = (-1992);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, false, 0, (-1992), batchUpdateException0);
      dataTruncationArray0[0] = dataTruncation0;
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<DataTruncation>) objectArrayIterator0, (Transformer<? super DataTruncation, String>) transformer0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("k", "");
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "", (-1992));
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("[java.sql.DataTruncation: Data truncation]", "", 0, sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, (-1992), (-9));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLFeatureNotSupportedException, BatchUpdateException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLFeatureNotSupportedException, ? extends BatchUpdateException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }
}
