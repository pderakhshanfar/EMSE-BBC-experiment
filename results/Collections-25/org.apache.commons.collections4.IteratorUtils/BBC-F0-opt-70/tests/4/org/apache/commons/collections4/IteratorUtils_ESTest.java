/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:59:33 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, EnumSet<Locale.FilteringMode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, EnumSet<Locale.FilteringMode>> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends EnumSet<Locale.FilteringMode>>) orderedMapIterator0);
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) mapIterator0, (Iterator<? extends SQLClientInfoException>) mapIterator0, (Iterator<? extends SQLClientInfoException>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<Integer, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Integer, Object> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ?>) orderedMapIterator0);
      Integer integer0 = new Integer(1);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) orderedMapIterator1, (Iterator<? extends Integer>) singletonIterator0);
      Iterator<Integer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) orderedMapIterator1, (Iterator<? extends Integer>) zippingIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SQLDataException sQLDataException0 = new SQLDataException("sJ=");
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) singletonListIterator0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) linkedHashSet0);
      Iterator<SQLDataException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) singletonListIterator0, (Iterator<? extends SQLDataException>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Stack<ServiceLoader<SQLInvalidAuthorizationSpecException>> stack0 = new Stack<ServiceLoader<SQLInvalidAuthorizationSpecException>>();
      LoopingListIterator<ServiceLoader<SQLInvalidAuthorizationSpecException>> loopingListIterator0 = new LoopingListIterator<ServiceLoader<SQLInvalidAuthorizationSpecException>>(stack0);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      ServiceLoader<SQLInvalidAuthorizationSpecException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      stack0.add(serviceLoader0);
      ListIterator<ServiceLoader<SQLInvalidAuthorizationSpecException>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<ServiceLoader<SQLInvalidAuthorizationSpecException>>) loopingListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, Iterator<Stack<SQLClientInfoException>>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLRecoverableException>) orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0, class0);
      assertEquals(0, sQLSyntaxErrorExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) singletonListIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("sJ=");
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) singletonListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("X{2_");
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0);
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("QK&C|wz Va~zg!}}Kl");
      SQLException[] sQLExceptionArray0 = new SQLException[3];
      sQLExceptionArray0[0] = (SQLException) sQLTransactionRollbackException0;
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = (SQLTransactionRollbackException)IteratorUtils.get((Iterator<SQLException>) resettableIterator0, 0);
      assertEquals("QK&C|wz Va~zg!}}Kl", sQLTransactionRollbackException1.getMessage());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[7];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      ObjectArrayIterator<SQLNonTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0, 0, 3);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) objectArrayIterator0, (Predicate<? super SQLNonTransientConnectionException>) uniquePredicate0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertTrue(objectArrayIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MapIterator<ArrayList<StringTokenizer>, SQLDataException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      PredicateTransformer<StringTokenizer> predicateTransformer0 = new PredicateTransformer<StringTokenizer>(predicate0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("t{IsX!KPtdB)dHp(1");
      Boolean boolean0 = predicateTransformer0.transform(stringTokenizer0);
      boolean boolean1 = IteratorUtils.contains((Iterator<ArrayList<StringTokenizer>>) mapIterator0, (Object) boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 3);
      MapIterator<SQLTimeoutException, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) mapIterator0;
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[0];
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator0 = new ObjectArrayIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      iteratorArray0[1] = (Iterator<SQLTimeoutException>) objectArrayIterator0;
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0);
      iteratorArray0[2] = (Iterator<SQLTimeoutException>) resettableListIterator0;
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Boolean> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Boolean>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[1];
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[7];
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, 7);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<Properties>[] linkedListArray0 = (LinkedList<Properties>[]) Array.newInstance(LinkedList.class, 7);
      ResettableListIterator<LinkedList<Properties>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedListArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<?>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLFeatureNotSupportedException, Iterator<Stack<SQLClientInfoException>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Hashtable<SQLWarning, String> hashtable0 = new Hashtable<SQLWarning, String>();
      SingletonIterator<Hashtable<SQLWarning, String>> singletonIterator0 = new SingletonIterator<Hashtable<SQLWarning, String>>(hashtable0, true);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>((Predicate<? super Object>) null, transformer0, transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Hashtable<SQLWarning, String>>) singletonIterator0, (Transformer<? super Hashtable<SQLWarning, String>, String>) ifTransformer0, "]}Lv5 vk &N", "' out of bounds for size '", "' out of bounds for size '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Predicate<StringTokenizer>[] predicateArray0 = (Predicate<StringTokenizer>[]) Array.newInstance(Predicate.class, 0);
      NonePredicate<StringTokenizer> nonePredicate0 = new NonePredicate<StringTokenizer>(predicateArray0);
      PredicateTransformer<StringTokenizer> predicateTransformer0 = new PredicateTransformer<StringTokenizer>(nonePredicate0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("?", "?");
      Boolean boolean0 = predicateTransformer0.transform(stringTokenizer0);
      SingletonListIterator<Boolean> singletonListIterator0 = new SingletonListIterator<Boolean>(boolean0);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 5);
      InvokerTransformer<Object, DataTruncation> invokerTransformer0 = new InvokerTransformer<Object, DataTruncation>("?", classArray0, predicateArray0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(invokerTransformer0, predicate0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("?");
      Transformer<Boolean, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Boolean>) transformedPredicate0, (Transformer<? super Boolean, ? extends String>) transformer0, (Transformer<? super Boolean, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Boolean>) singletonListIterator0, (Transformer<? super Boolean, String>) transformer1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '?' on 'class java.lang.Boolean' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      OrderedMapIterator<ArrayList<SQLTimeoutException>, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ArrayList<SQLTimeoutException>>) orderedMapIterator0, (Transformer<? super ArrayList<SQLTimeoutException>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Stack<ServiceLoader<SQLInvalidAuthorizationSpecException>> stack0 = new Stack<ServiceLoader<SQLInvalidAuthorizationSpecException>>();
      LoopingListIterator<ServiceLoader<SQLInvalidAuthorizationSpecException>> loopingListIterator0 = new LoopingListIterator<ServiceLoader<SQLInvalidAuthorizationSpecException>>(stack0);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      ServiceLoader<SQLInvalidAuthorizationSpecException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      stack0.add(serviceLoader0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ServiceLoader<SQLInvalidAuthorizationSpecException>>) loopingListIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinkedHashSet<ClientInfoStatus> linkedHashSet0 = new LinkedHashSet<ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      linkedHashSet0.add(clientInfoStatus0);
      LoopingIterator<ClientInfoStatus> loopingIterator0 = new LoopingIterator<ClientInfoStatus>(linkedHashSet0);
      ZippingIterator<ClientInfoStatus> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends ClientInfoStatus>) loopingIterator0, (Iterator<? extends ClientInfoStatus>) loopingIterator0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends ClientInfoStatus>) zippingIterator0, 3);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("`jn<k]X5");
      Transformer<SQLSyntaxErrorException, SQLSyntaxErrorException> transformer0 = InvokerTransformer.invokerTransformer("`jn<k]X5");
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '`jn<k]X5' on 'class java.sql.SQLSyntaxErrorException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      Iterator<IIOMetadataNode> iterator0 = linkedList0.iterator();
      linkedList0.push((IIOMetadataNode) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray(iterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[8];
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLTransientConnectionException>) objectArrayIterator0, (long) (-1875));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) singletonIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int[] intArray0 = new int[4];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", intArray0, sQLSyntaxErrorException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", batchUpdateException0);
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 7);
      InvokerTransformer<Object, SQLNonTransientConnectionException> invokerTransformer0 = new InvokerTransformer<Object, SQLNonTransientConnectionException>("57NjCW;nl<R:e3A=,", classArray0, classArray0);
      Iterator<SQLException> iterator0 = IteratorUtils.objectGraphIterator((SQLException) sQLRecoverableException0, (Transformer<? super SQLException, ? extends SQLException>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '57NjCW;nl<R:e3A=,' on 'class java.sql.SQLRecoverableException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLException>) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[4];
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLTransactionRollbackExceptionArray0[0]);
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLRecoverableException0, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLTransactionRollbackException>) resettableIterator0, (Predicate<? super SQLTransactionRollbackException>) comparatorPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ComparatorPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) resettableIterator0, (-1L), 880L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Properties>) null, 4040L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLNonTransientException[]) null, 134, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(predicateArray0, 2, (-3260));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashSet<Integer>[] hashSetArray0 = (HashSet<Integer>[]) Array.newInstance(HashSet.class, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(hashSetArray0, (-2319), (-1784));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLDataException[]) null, (-1704));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(enumSetArray0, 729);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[8];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Z,1^Je*_Pv]HwDx", "org.apache.commons.collections4.functors.ChainedClosure", intArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) batchUpdateException0, 91);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Integer[]) null, 0, 1073741824);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringArray0, (-5010), (-5010));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLClientInfoException[]) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[7];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, 1561);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) properties0, 1683, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ConstantTransformer<Object, Boolean> constantTransformer0 = new ConstantTransformer<Object, Boolean>((Boolean) null);
      Predicate<Properties> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Properties, Boolean>) constantTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) predicate0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("r_Xo#Z|-hjFUrv#U8");
      SQLDataException sQLDataException0 = new SQLDataException(sQLNonTransientException0);
      SQLWarning sQLWarning0 = new SQLWarning(sQLDataException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLWarning0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<SQLTransientException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLTransientException, ? extends String>) hashtable0);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>((SQLTransactionRollbackException) null, false);
      Iterator<String> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTransactionRollbackException>) singletonIterator0, (Transformer<? super SQLTransactionRollbackException, ? extends String>) transformer0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      // Undeclared exception!
      try { 
        IteratorUtils.apply(iterator0, (Closure<? super String>) closure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Fs.zR7");
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      ZippingIterator<SQLTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) listIterator0, (Iterator<? extends SQLTransientConnectionException>) listIterator0, (Iterator<? extends SQLTransientConnectionException>) listIterator0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      AndPredicate<SQLException> andPredicate0 = new AndPredicate<SQLException>(predicate0, predicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      predicateArray1[0] = predicate0;
      predicateArray1[1] = predicate0;
      predicateArray1[2] = predicate0;
      predicateArray1[3] = predicate0;
      predicateArray1[4] = predicate0;
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray1);
      predicateArray0[2] = predicate1;
      Transformer<Object, SQLNonTransientConnectionException>[] transformerArray0 = (Transformer<Object, SQLNonTransientConnectionException>[]) Array.newInstance(Transformer.class, 1);
      Factory<SQLNonTransientConnectionException> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLNonTransientConnectionException>) factory0);
      SwitchTransformer<Object, SQLException> switchTransformer0 = new SwitchTransformer<Object, SQLException>(predicateArray0, transformerArray0, transformer0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(switchTransformer0);
      WhileClosure<SQLException> whileClosure0 = new WhileClosure<SQLException>(predicate0, transformerClosure0, false);
      IfClosure<SQLTransientConnectionException> ifClosure0 = new IfClosure<SQLTransientConnectionException>(andPredicate0, whileClosure0, transformerClosure0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLTransientConnectionException>) zippingIterator0, (Closure<? super SQLTransientConnectionException>) ifClosure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.emptyIterator();
      Transformer<SQLException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = IteratorUtils.toString((Iterator<SQLException>) resettableIterator0, (Transformer<? super SQLException, String>) transformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapIterator");
      String string0 = IteratorUtils.toString((Iterator<SQLRecoverableException>) null, (Transformer<? super SQLRecoverableException, String>) constantTransformer0, "jdG!gnVOCEOd4-:52S", "[", " is less than zero");
      assertEquals("[ is less than zero", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MapIterator<SQLTimeoutException, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ListIterator<Object> listIterator0 = IteratorUtils.singletonListIterator((Object) mapIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(uniquePredicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Object>) listIterator0, (Predicate<? super Object>) nullIsFalsePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>((SQLTransactionRollbackException) null, false);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) singletonIterator0, 10);
      assertFalse(list0.contains(10));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MapIterator<SQLDataException, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) mapIterator0, 10);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("zMbF3>x1^_0bf1N$");
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator(sQLRecoverableException0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0, false);
      BoundedIterator<StringTokenizer> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) singletonIterator0, 0L, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientConnectionException>();
      SingletonListIterator<LinkedHashSet<SQLNonTransientConnectionException>> singletonListIterator0 = new SingletonListIterator<LinkedHashSet<SQLNonTransientConnectionException>>(linkedHashSet0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<LinkedHashSet<SQLNonTransientConnectionException>>) singletonListIterator0, (Transformer<? super LinkedHashSet<SQLNonTransientConnectionException>, String>) transformer0, "transformer may not be null", "transformer may not be null", "transformer may not be null");
      assertEquals("transformer may not be nullnulltransformer may not be null", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(890, false, true, 418, 418);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<SQLWarning, String> factoryTransformer0 = new FactoryTransformer<SQLWarning, String>(factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) singletonListIterator0, (Transformer<? super DataTruncation, String>) factoryTransformer0, "", "org.apache.commons.collections4.IteratorUtils", "Q`h!\"jSrY Sh;Fn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = IteratorUtils.toString((Iterator<Predicate<Object>>) null);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Integer>) resettableListIterator0, (Transformer<? super Integer, String>) transformer0, "Estimated size must be greater than 0", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[6];
      ObjectArrayIterator<SQLRecoverableException> objectArrayIterator0 = new ObjectArrayIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0, 0);
      ListIteratorWrapper<SQLRecoverableException> listIteratorWrapper0 = new ListIteratorWrapper<SQLRecoverableException>(objectArrayIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) listIteratorWrapper0, (Transformer<? super SQLRecoverableException, String>) null, "WkKOX@bu!", "WkKOX@bu!", "H1b\u0004=(4BFn%TB");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.emptyIterator();
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[2];
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLException>) resettableIterator0, 3428);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 3426
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MapIterator<Boolean, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIterator<Boolean> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Boolean>) mapIterator0);
      boolean boolean0 = IteratorUtils.isEmpty(listIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      ResettableIterator<Boolean> resettableIterator0 = IteratorUtils.arrayIterator(booleanArray0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) singletonListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Predicate<SQLException> predicate0 = FalsePredicate.falsePredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) singletonListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) uniquePredicate0);
      assertEquals(1, singletonListIterator0.nextIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Hashtable<SQLIntegrityConstraintViolationException, SQLClientInfoException> hashtable0 = new Hashtable<SQLIntegrityConstraintViolationException, SQLClientInfoException>();
      ListIterator<Object> listIterator0 = IteratorUtils.singletonListIterator((Object) "h_");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) hashtable0, (Equator<Object>) defaultEquator0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Object>) listIterator0, (Predicate<? super Object>) predicate0);
      assertFalse(listIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(",GWvRz", "%kwO%nt", sQLInvalidAuthorizationSpecException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTimeoutException0);
      OrPredicate<SQLTransientException> orPredicate0 = new OrPredicate<SQLTransientException>(equalPredicate0, equalPredicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLTransientException>) null, (Predicate<? super SQLTransientException>) orPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<Object, TreeSet<Properties>> hashMap0 = new HashMap<Object, TreeSet<Properties>>();
      EntrySetMapIterator<Object, TreeSet<Properties>> entrySetMapIterator0 = new EntrySetMapIterator<Object, TreeSet<Properties>>(hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Object>) entrySetMapIterator0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[7];
      ObjectArrayIterator<SQLNonTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0, 0, 3);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) objectArrayIterator0, (Predicate<? super SQLNonTransientConnectionException>) uniquePredicate0);
      assertNull(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) uniquePredicate0);
      assertNull(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0, true);
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      IteratorUtils.find((Iterator<Locale.FilteringMode>) singletonIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("dv 64npu}l{y", (String) null, sQLRecoverableException0);
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) vector0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, closure0);
      IteratorUtils.apply((Iterator<SQLTransientConnectionException>) singletonListIterator0, (Closure<? super SQLTransientConnectionException>) ifClosure0);
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(1, singletonListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Object, SQLDataException> hashMap0 = new HashMap<Object, SQLDataException>();
      Transformer<Object, SQLDataException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLDataException>) hashMap0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<Stack<SQLFeatureNotSupportedException>>) null, (Closure<? super Stack<SQLFeatureNotSupportedException>>) closure0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, String>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLTransientConnectionException>) abstractOrderedMapIteratorDecorator0, (Closure<? super SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Closure<SQLTransientConnectionException> closure0 = NOPClosure.nopClosure();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Transformer<SQLTransientConnectionException, SQLTransientConnectionException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply(iterator0, (Closure<? super SQLTransientConnectionException>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Hashtable<SQLIntegrityConstraintViolationException, SQLClientInfoException> hashtable0 = new Hashtable<SQLIntegrityConstraintViolationException, SQLClientInfoException>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(hashtable0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("remove() method is not supported", "", true);
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 418);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLTimeoutException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLDataException>) null, 123);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0, (Class<SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray1 = IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, class0);
      assertEquals(2, sQLSyntaxErrorExceptionArray1.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      Iterator<IIOMetadataNode> iterator0 = linkedList0.iterator();
      Object[] objectArray0 = IteratorUtils.toArray(iterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MapIterator<SQLDataException, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterable<SQLDataException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) mapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterable<SQLIntegrityConstraintViolationException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0, (Collection<? super SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) null, (Collection<? super Locale.FilteringMode>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Hashtable<SQLTransientConnectionException, SQLTimeoutException> hashtable0 = new Hashtable<SQLTransientConnectionException, SQLTimeoutException>();
      EntrySetMapIterator<SQLTransientConnectionException, SQLTimeoutException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientConnectionException, SQLTimeoutException>(hashtable0);
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 1);
      InvokerTransformer<SQLTransientConnectionException, SQLClientInfoException> invokerTransformer0 = new InvokerTransformer<SQLTransientConnectionException, SQLClientInfoException>((String) null, classArray0, classArray0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTransientConnectionException>) entrySetMapIterator0, (Transformer<? super SQLTransientConnectionException, ? extends SQLClientInfoException>) invokerTransformer0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) iterator0);
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Stack<SQLException> stack0 = new Stack<SQLException>();
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLException>) stack0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null);
      stack0.add((SQLException) sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLException>) resettableListIterator0, 4078);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) arrayDeque0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Boolean>) resettableListIterator0, (Predicate<? super Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      UniquePredicate<Boolean> uniquePredicate0 = new UniquePredicate<Boolean>();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Boolean>) null, (Predicate<? super Boolean>) uniquePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MapIterator<Boolean, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIterator<Boolean> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Boolean>) mapIterator0);
      Predicate<Boolean> predicate0 = UniquePredicate.uniquePredicate();
      ListIterator<Boolean> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends Boolean>) listIterator0, (Predicate<? super Boolean>) predicate0);
      assertFalse(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Iterator<EnumSet<Locale.FilteringMode>>[] iteratorArray0 = (Iterator<EnumSet<Locale.FilteringMode>>[]) Array.newInstance(Iterator.class, 1);
      ResettableListIterator<EnumSet<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[0] = (Iterator<EnumSet<Locale.FilteringMode>>) resettableListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) iteratorArray0[0], (Predicate<? super EnumSet<Locale.FilteringMode>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) "Node must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Properties>) null, (Predicate<? super Properties>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(transformerPredicate0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Predicate<? super SQLSyntaxErrorException>) nullIsExceptionPredicate0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) iterator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input Object must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 7);
      Transformer<Object, SQLSyntaxErrorException> transformer0 = InvokerTransformer.invokerTransformer("p/+~e{|C/n(H '%+;.", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) null, (Transformer<? super EnumSet<Locale.FilteringMode>, ? extends SQLSyntaxErrorException>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0, (Transformer<? super SQLTransactionRollbackException, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      OrderedMapIterator<Properties, LinkedList<LinkedList>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<Properties, HashMap<Class<SQLTimeoutException>, TreeSet>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>) orderedMapIterator0, (Iterator<? extends Properties>) mapIterator0, (Iterator<? extends Properties>) mapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLException>) null, (Iterator<? extends SQLException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0, true);
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) singletonIterator0);
      LoopingListIterator<Properties> loopingListIterator0 = new LoopingListIterator<Properties>(list0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends Properties>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Transformer<Object, Iterator<Stack<SQLClientInfoException>>> transformer0 = InvokerTransformer.invokerTransformer("_$mv'7&mG*");
      Iterator<Iterator<Stack<SQLClientInfoException>>> iterator0 = IteratorUtils.objectGraphIterator((Iterator<Stack<SQLClientInfoException>>) null, (Transformer<? super Iterator<Stack<SQLClientInfoException>>, ? extends Iterator<Stack<SQLClientInfoException>>>) transformer0);
      SkippingIterator<Iterator<Stack<SQLClientInfoException>>> skippingIterator0 = IteratorUtils.skippingIterator(iterator0, 0L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MapIterator<BatchUpdateException, SQLWarning> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      String string0 = IteratorUtils.toString((Iterator<BatchUpdateException>) mapIterator0, (Transformer<? super BatchUpdateException, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 2236, 2236);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[3];
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.arrayIterator(sQLWarningArray0, 3);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MapIterator<SQLDataException, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLDataException>) mapIterator0, (-1569));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      Iterator<?> iterator0 = IteratorUtils.getIterator(class0);
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, Iterator<Stack<SQLClientInfoException>>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, Iterator<Stack<SQLClientInfoException>>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, Iterator<Stack<SQLClientInfoException>>>(orderedMapIterator0);
      MapIterator<SQLRecoverableException, Iterator<Stack<SQLClientInfoException>>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLRecoverableException, Iterator<Stack<SQLClientInfoException>>>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[3];
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0);
      SQLException sQLException0 = IteratorUtils.get((Iterator<SQLException>) resettableIterator0, 0);
      assertNull(sQLException0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[8];
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLWarningArray0, 2, 3);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[7];
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 1, 1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      Transformer<Object, Predicate<Object>> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<Predicate<Object>> iterator0 = IteratorUtils.objectGraphIterator(predicate0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) transformer0);
      ZippingIterator<Predicate<Object>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Predicate<Object>>) iterator0, (Iterator<? extends Predicate<Object>>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Predicate<Object>>) zippingIterator0, 127);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.emptyIterator();
      BoundedIterator<SQLException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLException>) resettableIterator0, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int[] intArray0 = new int[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, (Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<StringTokenizer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 814, (-582));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 1);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0, false);
      boolean boolean0 = IteratorUtils.contains((Iterator<Properties>) singletonIterator0, (Object) properties0);
      assertFalse(singletonIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 607);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      ListIterator<ClientInfoStatus> listIterator0 = IteratorUtils.singletonListIterator(clientInfoStatus0);
      ConstantTransformer<ClientInfoStatus, String> constantTransformer0 = new ConstantTransformer<ClientInfoStatus, String>((String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ClientInfoStatus>) listIterator0, (Transformer<? super ClientInfoStatus, String>) constantTransformer0, (String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      OrderedMapIterator<Closure<Object>, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Closure<Object>, SQLNonTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Closure<Object>, SQLNonTransientException>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Closure<Object>>) abstractMapIteratorDecorator0, (Predicate<? super Closure<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      OrderedIterator<Predicate<Object>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTransientException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Stack<ServiceLoader<SQLInvalidAuthorizationSpecException>> stack0 = new Stack<ServiceLoader<SQLInvalidAuthorizationSpecException>>();
      LoopingListIterator<ServiceLoader<SQLInvalidAuthorizationSpecException>> loopingListIterator0 = new LoopingListIterator<ServiceLoader<SQLInvalidAuthorizationSpecException>>(stack0);
      ListIterator<ServiceLoader<SQLInvalidAuthorizationSpecException>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<ServiceLoader<SQLInvalidAuthorizationSpecException>>) loopingListIterator0);
      assertFalse(listIterator0.hasNext());
  }
}
