/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 16:46:34 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) orderedIterator0);
      ArrayDeque<SQLException> arrayDeque0 = new ArrayDeque<SQLException>();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) arrayDeque0);
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) iterator0, (Iterator<? extends SQLTimeoutException>) orderedIterator0, (Iterator<? extends SQLTimeoutException>) iterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Comparator<SQLDataException> comparator0 = (Comparator<SQLDataException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ListIterator<SQLDataException> listIterator0 = EmptyListIterator.emptyListIterator();
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) listIterator0, (Iterator<? extends SQLDataException>) listIterator0, (Iterator<? extends SQLDataException>) listIterator0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) zippingIterator0, (Iterator<? extends SQLDataException>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<BatchUpdateException, IIOMetadataNode> hashMap0 = new HashMap<BatchUpdateException, IIOMetadataNode>();
      EntrySetMapIterator<BatchUpdateException, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<BatchUpdateException, IIOMetadataNode>(hashMap0);
      MapIterator<BatchUpdateException, IIOMetadataNode> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<BatchUpdateException, IIOMetadataNode>) entrySetMapIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>) mapIterator0, (Iterator<? extends BatchUpdateException>) entrySetMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) singletonListIterator0, (-14L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) resettableIterator0;
      iteratorArray0[1] = (Iterator<IIOMetadataNode>) resettableIterator0;
      iteratorArray0[2] = (Iterator<IIOMetadataNode>) resettableIterator0;
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[3];
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLRecoverableException>) objectArrayListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = EmptyIterator.emptyIterator();
      Iterator<SQLInvalidAuthorizationSpecException> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("zEf#F");
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      Transformer<SQLNonTransientException, String> transformer0 = ConstantTransformer.constantTransformer("zEf#F");
      String string0 = IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) transformer0);
      assertEquals("[zEf#F]", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ReverseListIterator<String> reverseListIterator0 = new ReverseListIterator<String>(arrayList0);
      ListIterator<String> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends String>) reverseListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      OrderedMapIterator<DataTruncation, ComparatorPredicate.Criterion> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<SQLWarning> list0 = IteratorUtils.toList((Iterator<? extends SQLWarning>) orderedMapIterator0, 10);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("The transformer array must not contain a null transformer, index ", "The transformer array must not contain a null transformer, index ");
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0, true);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      StringTokenizer[] stringTokenizerArray0 = IteratorUtils.toArray((Iterator<? extends StringTokenizer>) singletonIterator0, class0);
      assertEquals(1, stringTokenizerArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Class<StringTokenizer> class0 = StringTokenizer.class;
      StringTokenizer[] stringTokenizerArray0 = IteratorUtils.toArray((Iterator<? extends StringTokenizer>) resettableListIterator0, class0);
      assertEquals(0, stringTokenizerArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("The predicate to call must not be null", (String) null, (-1), hashMap0, sQLTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("The predicate to call must not be null", sQLClientInfoException0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) null);
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[3];
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ListIterator<SQLDataException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLDataException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Vector<ServiceLoader<Locale.LanguageRange>> vector0 = new Vector<ServiceLoader<Locale.LanguageRange>>();
      ResettableListIterator<ServiceLoader<Locale.LanguageRange>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<ServiceLoader<Locale.LanguageRange>>) vector0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Comparator<StringTokenizer> comparator0 = (Comparator<StringTokenizer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 6);
      iteratorArray0[0] = (Iterator<StringTokenizer>) resettableListIterator0;
      iteratorArray0[1] = (Iterator<StringTokenizer>) resettableListIterator0;
      iteratorArray0[2] = (Iterator<StringTokenizer>) resettableListIterator0;
      iteratorArray0[3] = (Iterator<StringTokenizer>) resettableListIterator0;
      iteratorArray0[4] = (Iterator<StringTokenizer>) resettableListIterator0;
      iteratorArray0[5] = (Iterator<StringTokenizer>) resettableListIterator0;
      Iterator<StringTokenizer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) comparator0, (Iterator<? extends StringTokenizer>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Locale.FilteringMode, SQLFeatureNotSupportedException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Locale.FilteringMode, SQLFeatureNotSupportedException>(orderedMapIterator0);
      ListIteratorWrapper<Locale.FilteringMode> listIteratorWrapper0 = new ListIteratorWrapper<Locale.FilteringMode>(abstractMapIteratorDecorator0);
      BoundedIterator<Locale.FilteringMode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) listIteratorWrapper0, 0L, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[0];
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.arrayListIterator(clientInfoStatusArray0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, 0, 0);
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinkedHashSet<Properties>[] linkedHashSetArray0 = (LinkedHashSet<Properties>[]) Array.newInstance(LinkedHashSet.class, 7);
      ResettableIterator<LinkedHashSet<Properties>> resettableIterator0 = IteratorUtils.arrayIterator(linkedHashSetArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Locale.LanguageRange>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("m7\"m3=~");
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Iterator<ComparatorPredicate.Criterion>, SQLClientInfoException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 4);
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("UUDu=$l/?~7@p", classArray0, classArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) singletonListIterator0, (Transformer<? super SQLTransientConnectionException, String>) invokerTransformer0, "?cW=$l]q}kUWUK1krZ", "Fi{[0W%ndNn-iYn", "UUDu=$l/?~7@p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'UUDu=$l/?~7@p' on 'class java.sql.SQLTransientConnectionException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Stack<ServiceLoader<SQLException>> stack0 = new Stack<ServiceLoader<SQLException>>();
      ReverseListIterator<ServiceLoader<SQLException>> reverseListIterator0 = new ReverseListIterator<ServiceLoader<SQLException>>(stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ServiceLoader<SQLException>>) reverseListIterator0, (Transformer<? super ServiceLoader<SQLException>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[2];
      ObjectArrayListIterator<StringTokenizer> objectArrayListIterator0 = new ObjectArrayListIterator<StringTokenizer>(stringTokenizerArray0);
      List<StringTokenizer> list0 = IteratorUtils.toList((Iterator<? extends StringTokenizer>) objectArrayListIterator0);
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends StringTokenizer>) resettableListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      LoopingListIterator<Properties> loopingListIterator0 = new LoopingListIterator<Properties>(linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Properties>) loopingListIterator0, (-2764L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[4];
      ObjectArrayIterator<SQLNonTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) objectArrayIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      Iterator<SQLException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLException>) objectArrayListIterator0, (Predicate<? super SQLException>) predicate1);
      // Undeclared exception!
      try { 
        IteratorUtils.isEmpty(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input Object must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<ArrayList<Predicate>>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) null, (Iterator<? extends SQLWarning>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLNonTransientConnectionException[]) null, 32, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLExceptionArray0, 3, (-3814));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 100, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((BatchUpdateException[]) null, 21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stringArray0, 1874);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Properties[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/^M", "Iterator must not be null", 1491);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientConnectionException0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransactionRollbackException[]) null, 10, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[3];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringTokenizerArray0, (-251), (-251));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringArray0, (-347));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Properties[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLNonTransientException0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "The predicate array must not be null", (-3302));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      Transformer<SQLException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      String string0 = IteratorUtils.toString((Iterator<SQLTransientConnectionException>) null, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransientException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "prefix may not be null", sQLNonTransientConnectionException0);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLTransientException0, (Equator<SQLException>) defaultEquator0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLTransientConnectionException>) resettableIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("C]");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransientException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("8!~yc*L{R~", "nWTi+Bi$,(|", sQLNonTransientConnectionException0);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLTransientConnectionException0, (Equator<SQLException>) defaultEquator0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLTransientConnectionException>) resettableIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      OrderedIterator<SQLNonTransientException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<SQLNonTransientException> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super SQLNonTransientException>>) linkedList0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) orderedIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) null, 0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, SQLException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<SQLException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      String string0 = IteratorUtils.toString((Iterator<SQLTransientConnectionException>) orderedMapIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "*WY(O", 1978);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 20);
      SwitchTransformer<Object, String> switchTransformer0 = new SwitchTransformer<Object, String>(predicateArray0, (Transformer<? super Object, ? extends String>[]) null, (Transformer<? super Object, ? extends String>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) singletonIterator0, (Transformer<? super SQLTransientConnectionException, String>) switchTransformer0, "", "*WY(O", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<SQLException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[6];
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) resettableListIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, SQLException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<SQLException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) orderedMapIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, (String) null, (String) null, "cBqQOS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) null, (Transformer<? super SQLTransientConnectionException, String>) null, "6<VH0e;;PU", "iJ(*}TL 6Vj", "org.apache.commons.collections4.iterators.FilterListIterator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0, false);
      singletonIterator0.next();
      boolean boolean0 = IteratorUtils.isEmpty(singletonIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("M");
      boolean boolean0 = IteratorUtils.isEmpty(singletonIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[3];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("*ohRn]BjmRyQHNg", hashtable0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      int[] intArray0 = new int[24];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLClientInfoException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(123, 2779, 0, 0).when(comparator0).compare(any(java.sql.SQLException.class) , any(java.sql.SQLException.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) batchUpdateException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Predicate<SQLClientInfoException> predicate1 = OrPredicate.orPredicate((Predicate<? super SQLClientInfoException>) predicate0, (Predicate<? super SQLClientInfoException>) predicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) resettableIterator0, (Predicate<? super SQLClientInfoException>) predicate1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<SQLClientInfoException> predicate0 = NotNullPredicate.notNullPredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) listIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<LinkedHashSet<SQLNonTransientException>, SQLWarning> hashMap0 = new HashMap<LinkedHashSet<SQLNonTransientException>, SQLWarning>(14);
      EntrySetMapIterator<LinkedHashSet<SQLNonTransientException>, SQLWarning> entrySetMapIterator0 = new EntrySetMapIterator<LinkedHashSet<SQLNonTransientException>, SQLWarning>(hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<LinkedHashSet<SQLNonTransientException>>) entrySetMapIterator0, (Predicate<? super LinkedHashSet<SQLNonTransientException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Predicate<SQLClientInfoException> predicate0 = NotNullPredicate.notNullPredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("", true);
      boolean boolean0 = IteratorUtils.contains((Iterator<String>) singletonIterator0, (Object) "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("*|", true);
      IteratorUtils.contains((Iterator<String>) singletonIterator0, (Object) singletonIterator0);
      assertFalse(singletonIterator0.hasNext());
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Hashtable<SQLInvalidAuthorizationSpecException, ComparatorPredicate.Criterion> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, ComparatorPredicate.Criterion>();
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(hashtable0, true);
      Class<SQLWarning> class0 = SQLWarning.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.find((Iterator<Object>) singletonIterator0, (Predicate<? super Object>) instanceofPredicate0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("*|", true);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) singletonIterator0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      IteratorUtils.find((Iterator<Locale.FilteringMode>) null, (Predicate<? super Locale.FilteringMode>) andPredicate0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<StringTokenizer> class0 = StringTokenizer.class;
      Iterator<?> iterator0 = IteratorUtils.getIterator(class0);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer(",.i=");
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<LinkedList<Closure>>) iterator0, (Predicate<? super LinkedList<Closure>>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method ',.i=' on 'class java.lang.Class' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ArrayDeque<Closure<SQLException>> arrayDeque0 = new ArrayDeque<Closure<SQLException>>();
      Closure<SQLNonTransientConnectionException> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super SQLNonTransientConnectionException>>) arrayDeque0);
      IteratorUtils.apply((Iterator<SQLNonTransientConnectionException>) null, (Closure<? super SQLNonTransientConnectionException>) closure0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLWarning0, false);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IfClosure<SQLException> ifClosure0 = new IfClosure<SQLException>(predicate0, (Closure<? super SQLException>) null, (Closure<? super SQLException>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLException>) singletonIterator0, (Closure<? super SQLException>) ifClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(hashtable0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", false);
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLSyntaxErrorException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MapIterator<String, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0, (-451));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) null, 2181);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<StringTokenizer> class0 = StringTokenizer.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends StringTokenizer>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<StringTokenizer> class0 = StringTokenizer.class;
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.functors.FalsePredicate");
      Transformer<Object, StringTokenizer> transformer0 = InvokerTransformer.invokerTransformer("vjP]ISL");
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends StringTokenizer>) iterator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'vjP]ISL' on 'class java.util.StringTokenizer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("*|", true);
      IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "iC`K3#n0{.$k-:Tnk+l", 667);
      SQLDataException sQLDataException0 = new SQLDataException("", "{xd,n9}MlF", 2181, sQLSyntaxErrorException0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) null);
      Iterable<SQLDataException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) iterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      Iterable<SQLDataException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLDataException>) iterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) null, (Collection<? super DataTruncation>) arrayDeque0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[7];
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.arrayIterator(clientInfoStatusArray0);
      Enumeration<ClientInfoStatus> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends ClientInfoStatus>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends ClientInfoStatus>) enumeration0, (Collection<? super ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("u", true);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) singletonIterator0);
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("*|");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLException>) arrayList0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      ListIterator<Object> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<?>) resettableListIterator0, (Predicate<? super Object>) predicate0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Predicate<SQLDataException> predicate0 = NotNullPredicate.notNullPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLDataException>) null, (Predicate<? super SQLDataException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<?>) resettableListIterator0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLException>) iterator0, (Predicate<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<BatchUpdateException, Properties> hashMap0 = new HashMap<BatchUpdateException, Properties>();
      HashMap<Object, Properties> hashMap1 = new HashMap<Object, Properties>(hashMap0);
      Transformer<Object, Properties> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Properties>) hashMap1);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<Properties> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) resettableListIterator0, (Transformer<? super SQLNonTransientException, ? extends Properties>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<SQLException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Transformer<? super SQLFeatureNotSupportedException, ? extends String>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) iterator0, (Transformer<? super SQLNonTransientException, ? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 8);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[6];
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      List<SQLRecoverableException> list0 = IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) resettableIterator0);
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      ListIterator<SQLException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLException>) resettableListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      LoopingListIterator<Properties> loopingListIterator0 = new LoopingListIterator<Properties>(linkedList0);
      SkippingIterator<Properties> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Properties>) loopingListIterator0, (long) 667);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<SQLException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[6];
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) objectArrayListIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTimeoutException[]) null, (-2291));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MapIterator<SQLClientInfoException, HashSet<String>> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) mapIterator0, (Iterator<? extends SQLClientInfoException>) mapIterator0, (Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 5);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      Transformer<SQLException, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<SQLTransientConnectionException>) resettableIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "GrXko6", "GrXko6", "Transformer must not be null");
      assertEquals("GrXko6nullTransformer must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[3];
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, 1, 1);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[7];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 1, (-1679));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = IteratorUtils.toString((Iterator<ClientInfoStatus>) null);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0, (Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 10, hashMap0);
      SQLWarning sQLWarning0 = new SQLWarning("", "%:", sQLClientInfoException0);
      SQLDataException sQLDataException0 = new SQLDataException("", sQLWarning0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0, true);
      IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) singletonIterator0, 0L);
      assertTrue(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 9);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableListIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("; .?-\\L7", "; .?-\\L7", 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1994), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0, 1);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("]wqq9E");
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("]wqq9E", (Transformer<? super String, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.contains(iterator0, (Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method ']wqq9E' on 'class java.lang.String' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.map.AbstractLinkedMap$KeySetIterator", "suffix may not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0, 4441);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Properties properties0 = new Properties();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1426);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }
}
