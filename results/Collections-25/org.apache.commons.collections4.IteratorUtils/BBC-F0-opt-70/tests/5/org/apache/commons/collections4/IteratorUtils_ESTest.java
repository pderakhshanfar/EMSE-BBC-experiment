/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 09 03:14:25 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("+&qzrJ o", "org.apache.commons.collections4.iterators.ArrayListIterator", 8, hashMap0);
      ResettableIterator<SQLClientInfoException> resettableIterator1 = IteratorUtils.singletonIterator(sQLClientInfoException0);
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator1, (Iterator<? extends SQLClientInfoException>) resettableIterator1, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      OrderedMapIterator<SQLClientInfoException, Iterator<BatchUpdateException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) orderedMapIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      OrderedMapIterator<DataTruncation, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, SQLClientInfoException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends SQLClientInfoException>) orderedMapIterator0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator1);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLInvalidAuthorizationSpecException, SQLTransientConnectionException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      SingletonListIterator<ClientInfoStatus> singletonListIterator0 = new SingletonListIterator<ClientInfoStatus>(clientInfoStatus0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonListIterator0.forEachRemaining(consumer0);
      ListIterator<ClientInfoStatus> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<ClientInfoStatus>) singletonListIterator0);
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "cUYzKnq.;VQi1fK=Y", 1032);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, sQLWarning0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>(10, 10);
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      Iterator<StringTokenizer> iterator0 = EmptyIterator.emptyIterator();
      String string0 = IteratorUtils.toString(iterator0, (Transformer<? super StringTokenizer, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      OrderedMapIterator<DataTruncation, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      List<SQLWarning> list0 = IteratorUtils.toList((Iterator<? extends SQLWarning>) orderedMapIterator0, 53);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
      List<SQLInvalidAuthorizationSpecException> list0 = IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[6];
      ObjectArrayIterator<SQLClientInfoException> objectArrayIterator0 = new ObjectArrayIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0, 0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      SQLClientInfoException[] sQLClientInfoExceptionArray1 = IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) objectArrayIterator0, class0);
      assertNotSame(sQLClientInfoExceptionArray1, sQLClientInfoExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      OrderedMapIterator<Integer, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException> iterator0 = EmptyIterator.emptyIterator();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) iterator0;
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0, 0);
      IteratorUtils.get((Iterator<Object>) objectArrayListIterator0, 0);
      assertEquals(0, objectArrayListIterator0.previousIndex());
      assertEquals(1, objectArrayListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(linkedList0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) loopingListIterator0, (Iterator<? extends BatchUpdateException>) loopingListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 1);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      LoopingIterator<SQLIntegrityConstraintViolationException> loopingIterator0 = new LoopingIterator<SQLIntegrityConstraintViolationException>(arrayList0);
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) loopingIterator0;
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[6];
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLRecoverableException>) resettableListIterator0);
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) resettableListIterator0, (Iterator<? extends SQLRecoverableException>) listIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Iterator<BatchUpdateException>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) null, (Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<HashSet<Locale.Category>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.singletonIterator(locale_Category0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("oRgUof<4oZ<Sz0{xW$s");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Locale.Category>) resettableIterator0, (Transformer<? super Locale.Category, String>) transformer0, "ka~M1", "", "ka~M1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'oRgUof<4oZ<Sz0{xW$s' on 'class java.util.Locale$Category' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[7];
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>(locale_CategoryArray0);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>((Factory<? extends String>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Locale.Category>) objectArrayIterator0, (Transformer<? super Locale.Category, String>) factoryTransformer0, "", "&8\"!Qq[ej2'/z%_w", ".x0%RRMe)D(Hf&_/bm");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      SQLException sQLException0 = new SQLException("2f01%u|,34yH", "2f01%u|,34yH");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLException0);
      vector0.add(sQLInvalidAuthorizationSpecException0);
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) vector0);
      Transformer<SQLInvalidAuthorizationSpecException, String> transformer0 = ConstantTransformer.constantTransformer("org.apache.commons.collections4.functors.EqualPredicate");
      // Undeclared exception!
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicateArray0[0];
      predicateArray0[2] = predicateArray0[0];
      predicateArray0[3] = predicateArray0[0];
      predicateArray0[4] = predicateArray0[0];
      predicateArray0[5] = predicate0;
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      predicateArray0[6] = predicate1;
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 1);
      SwitchTransformer<Object, String> switchTransformer0 = new SwitchTransformer<Object, String>(predicateArray0, transformerArray0, transformerArray0[0]);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) listIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) switchTransformer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      int[] intArray0 = new int[9];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, (Throwable) null);
      Factory<BatchUpdateException> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<BatchUpdateException, BatchUpdateException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends BatchUpdateException>) factory0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) iterator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      DataTruncation dataTruncation0 = new DataTruncation((-505), true, true, (-505), 10, sQLClientInfoException0);
      linkedList0.add(dataTruncation0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) linkedList0);
      Class<SQLWarning> class0 = SQLWarning.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLWarning>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("V&", "V&", 3789);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", (String) null, 3789, sQLTimeoutException0);
      Transformer<Object, SQLInvalidAuthorizationSpecException>[] transformerArray0 = (Transformer<Object, SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Transformer.class, 0);
      Class<SQLTransientConnectionException>[] classArray0 = (Class<SQLTransientConnectionException>[]) Array.newInstance(Class.class, 2);
      Transformer<SQLException, SQLInvalidAuthorizationSpecException> transformer0 = InvokerTransformer.invokerTransformer("jG%", (Class<?>[]) classArray0, (Object[]) classArray0);
      SwitchTransformer<SQLException, SQLInvalidAuthorizationSpecException> switchTransformer0 = new SwitchTransformer<SQLException, SQLInvalidAuthorizationSpecException>((Predicate<? super SQLException>[]) null, transformerArray0, transformer0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.objectGraphIterator((SQLNonTransientException) sQLSyntaxErrorException0, (Transformer<? super SQLNonTransientException, ? extends SQLNonTransientException>) switchTransformer0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) iterator0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.functors.ChainedClosure", "/G'>Bfm9_JZ:EgaI.Q");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      predicateArray0[0] = predicate0;
      Transformer<Object, SQLFeatureNotSupportedException>[] transformerArray0 = (Transformer<Object, SQLFeatureNotSupportedException>[]) Array.newInstance(Transformer.class, 0);
      ConstantTransformer<Object, SQLFeatureNotSupportedException> constantTransformer0 = new ConstantTransformer<Object, SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      SwitchTransformer<SQLException, SQLFeatureNotSupportedException> switchTransformer0 = new SwitchTransformer<SQLException, SQLFeatureNotSupportedException>(predicateArray0, transformerArray0, constantTransformer0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) switchTransformer0);
      iteratorArray0[0] = iterator0;
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) zippingIterator0, class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 1);
      InvokerTransformer<Object, SQLIntegrityConstraintViolationException> invokerTransformer0 = new InvokerTransformer<Object, SQLIntegrityConstraintViolationException>("", classArray0, classArray0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) listIterator0, (Transformer<? super BatchUpdateException, ? extends SQLIntegrityConstraintViolationException>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator(iterator0, 2218L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.BatchUpdateException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[] intArray0 = new int[8];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0, (Throwable) null);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      InvokerTransformer<Object, SQLIntegrityConstraintViolationException> invokerTransformer0 = new InvokerTransformer<Object, SQLIntegrityConstraintViolationException>("", (Class<?>[]) null, (Object[]) null);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) listIterator0, (Transformer<? super BatchUpdateException, ? extends SQLIntegrityConstraintViolationException>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator(iterator0, (-359L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException("Node must not be null", "{}", 468, sQLNonTransientConnectionException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Node must not be null", "Node must not be null", 468, sQLDataException0);
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 2);
      Transformer<Object, SQLSyntaxErrorException> transformer0 = InvokerTransformer.invokerTransformer("Predicate must not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformedPredicate<SQLSyntaxErrorException> transformedPredicate0 = new TransformedPredicate<SQLSyntaxErrorException>(transformer0, (Predicate<? super SQLSyntaxErrorException>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) singletonListIterator0, (Predicate<? super SQLSyntaxErrorException>) transformedPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Predicate must not be null' on 'class java.sql.SQLSyntaxErrorException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ArrayList<Boolean> arrayList0 = new ArrayList<Boolean>();
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Boolean>) arrayList0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("9Ty^[8Mm)I", "9Ty^[8Mm)I", (-1825));
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLNonTransientConnectionException0);
      PredicateTransformer<DataTruncation> predicateTransformer0 = new PredicateTransformer<DataTruncation>(predicate0);
      DataTruncation dataTruncation0 = new DataTruncation((-1825), true, true, (-1825), (-1825));
      Boolean boolean0 = predicateTransformer0.transform(dataTruncation0);
      arrayList0.add(boolean0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Boolean>) resettableListIterator0, (Predicate<? super Boolean>) predicateArray0[0]);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      NullIsTruePredicate<SQLWarning> nullIsTruePredicate0 = new NullIsTruePredicate<SQLWarning>(predicateArray0[1]);
      DataTruncation dataTruncation0 = new DataTruncation(1200, true, false, (-962), (-1460));
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<DataTruncation>) singletonListIterator0, (Predicate<? super DataTruncation>) nullIsTruePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NullIsTruePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "nUVJdr", 10, (Throwable) null);
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.singletonIterator((SQLException) sQLTransientConnectionException0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>("");
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>((Transformer<? super SQLException, ? extends SQLException>) null, identityPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLException>) resettableIterator0, (Predicate<? super SQLException>) transformedPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformedPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 8);
      InvokerTransformer<Object, SQLIntegrityConstraintViolationException> invokerTransformer0 = new InvokerTransformer<Object, SQLIntegrityConstraintViolationException>("", classArray0, classArray0);
      Iterator<Object> iterator0 = IteratorUtils.objectGraphIterator((Object) "", (Transformer<? super Object, ?>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.lang.String' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) null, 1573);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      SingletonIterator<ArrayDeque<Integer>> singletonIterator0 = new SingletonIterator<ArrayDeque<Integer>>(arrayDeque0, true);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 7);
      InvokerTransformer<Object, DataTruncation> invokerTransformer0 = new InvokerTransformer<Object, DataTruncation>("q{2IS0%R", classArray0, classArray0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(invokerTransformer0, predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<ArrayDeque<Integer>>) singletonIterator0, (Predicate<? super ArrayDeque<Integer>>) transformedPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'q{2IS0%R' on 'class java.util.ArrayDeque' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[6];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      NullIsFalsePredicate<Properties> nullIsFalsePredicate0 = new NullIsFalsePredicate<Properties>(andPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Properties>) objectArrayListIterator0, (Predicate<? super Properties>) nullIsFalsePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AndPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", (-512));
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      List<SQLSyntaxErrorException> list0 = IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) singletonListIterator0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) list0);
      // Undeclared exception!
      IteratorUtils.contains((Iterator<SQLSyntaxErrorException>) resettableIterator0, (Object) "");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("iGRD!z", (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("iGRD!z", "", sQLTransientConnectionException0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) listIterator0, 1L, (-3477L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<?>) null, 82L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((HashSet<SQLIntegrityConstraintViolationException>[]) null, 128, 279);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(objectArray0, 0, (-1111));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((BatchUpdateException[]) null, (-973), 91);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[9];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLExceptionArray0, (-1520));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-656), (-656));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(object0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("]", "]");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLRecoverableException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((LinkedHashSet<Iterator<BatchUpdateException>>[]) null, 125, 125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[5];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(dataTruncationArray0, (-700), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[9];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLDataExceptionArray0, 1275);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((DataTruncation[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Cannot add to list until next() or previous() called", sQLClientInfoException0);
      DataTruncation dataTruncation0 = new DataTruncation((-1), false, false, (-1), 0, sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0, 123);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Closure<? super SQLFeatureNotSupportedException>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[7];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      Predicate<SQLFeatureNotSupportedException> predicate0 = IdentityPredicate.identityPredicate(sQLFeatureNotSupportedException0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      ForClosure<Object> forClosure0 = new ForClosure<Object>(122, closure0);
      WhileClosure<SQLFeatureNotSupportedException> whileClosure0 = new WhileClosure<SQLFeatureNotSupportedException>(predicate0, forClosure0, true);
      // Undeclared exception!
      IteratorUtils.apply((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Closure<? super SQLFeatureNotSupportedException>) whileClosure0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      LoopingIterator<SQLFeatureNotSupportedException> loopingIterator0 = new LoopingIterator<SQLFeatureNotSupportedException>(priorityQueue0);
      int[] intArray0 = new int[5];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("4mIA", batchUpdateException0);
      priorityQueue0.add(sQLFeatureNotSupportedException0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>(1412);
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLFeatureNotSupportedException>) loopingIterator0, (Closure<? super SQLFeatureNotSupportedException>) transformerClosure0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = IteratorUtils.toString((Iterator<ArrayDeque<SQLWarning>>) null, (Transformer<? super ArrayDeque<SQLWarning>, String>) transformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MapIterator<Predicate<ClientInfoStatus>, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Predicate<ClientInfoStatus>>) mapIterator0, (Transformer<? super Predicate<ClientInfoStatus>, String>) null, "delimiter may not be null", "org.apache.commons.collections4.functors.NullIsFalsePredicate", "delimiter may not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, (-265), 0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      UniquePredicate<SQLWarning> uniquePredicate0 = new UniquePredicate<SQLWarning>();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<DataTruncation>) listIterator0, (Predicate<? super DataTruncation>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Predicate<Object>>) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      BoundedIterator<DataTruncation> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) orderedIterator0, 0L, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0, true);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>(10, 10);
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      String string0 = IteratorUtils.toString((Iterator<Locale.Category>) singletonIterator0, (Transformer<? super Locale.Category, String>) transformer0, "org.apache.commons.collections4.functors.NotPredicate", "org.apache.commons.collections4.functors.NotPredicate", "org.apache.commons.collections4.functors.NotPredicate");
      assertEquals("org.apache.commons.collections4.functors.NotPredicatenullorg.apache.commons.collections4.functors.NotPredicate", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.emptyIterator();
      String string0 = IteratorUtils.toString((Iterator<Locale.Category>) resettableIterator0, (Transformer<? super Locale.Category, String>) transformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Locale.Category>) resettableIterator0, (Transformer<? super Locale.Category, String>) transformer0, "", "clWne", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[3];
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 4);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) objectArrayListIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) invokerTransformer0, "J~6%a\"#ms{Z", (String) null, "iavK`?fEJVU");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MapIterator<String, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<String>) mapIterator0, (Transformer<? super String, String>) transformer0, (String) null, (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Transformer must not be null", "Enumeration must not be null", hashMap0);
      HashMap<Object, SQLClientInfoException> hashMap1 = new HashMap<Object, SQLClientInfoException>();
      Transformer<SQLException, SQLClientInfoException> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends SQLClientInfoException>) hashMap1);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLClientInfoException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0, true);
      int int0 = IteratorUtils.size(singletonIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException> iterator0 = EmptyIterator.emptyIterator();
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 5);
      InvokerTransformer<SQLException, SQLTransientConnectionException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLTransientConnectionException>("clone", classArray0, classArray0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'clone' on 'class java.sql.SQLTransientConnectionException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0, 0);
      IteratorUtils.get((Iterator<Object>) objectArrayListIterator0, 0);
      assertEquals(1, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) resettableListIterator0, 1573);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1572
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(uniquePredicate0);
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<StringTokenizer> class1 = StringTokenizer.class;
      ListIterator<Class<StringTokenizer>> listIterator0 = IteratorUtils.singletonListIterator(class1);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Class<StringTokenizer>>) listIterator0, (Predicate<? super Class<StringTokenizer>>) instanceofPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int[] intArray0 = new int[5];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) batchUpdateException0, comparator0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLException>) null, (Predicate<? super SQLException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLException>) null, (Predicate<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[1];
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLExceptionArray0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>((SortedSet<? extends Predicate<Object>>) treeSet0);
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLException>) resettableListIterator0, (Predicate<? super SQLException>) predicate0);
      assertFalse(resettableListIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(110, false, false, (-265), 10);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      Predicate<DataTruncation>[] predicateArray0 = (Predicate<DataTruncation>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<DataTruncation> anyPredicate0 = new AnyPredicate<DataTruncation>(predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<DataTruncation>) listIterator0, (Predicate<? super DataTruncation>) anyPredicate0);
      assertTrue(listIterator0.hasPrevious());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      UniquePredicate<SQLWarning> uniquePredicate0 = new UniquePredicate<SQLWarning>();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<DataTruncation>) null, (Predicate<? super DataTruncation>) uniquePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      SingletonIterator<ArrayDeque<Integer>> singletonIterator0 = new SingletonIterator<ArrayDeque<Integer>>(arrayDeque0, false);
      ArrayDeque<Integer> arrayDeque1 = IteratorUtils.find((Iterator<ArrayDeque<Integer>>) singletonIterator0, (Predicate<? super ArrayDeque<Integer>>) uniquePredicate0);
      assertNotNull(arrayDeque1);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      SingletonIterator<ArrayDeque<Integer>> singletonIterator0 = new SingletonIterator<ArrayDeque<Integer>>(arrayDeque0, false);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.find((Iterator<ArrayDeque<Integer>>) singletonIterator0, (Predicate<? super ArrayDeque<Integer>>) predicate0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      ArrayDeque<Integer> arrayDeque0 = IteratorUtils.find((Iterator<ArrayDeque<Integer>>) null, (Predicate<? super ArrayDeque<Integer>>) predicate0);
      assertNull(arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      OrderedMapIterator<Predicate<Object>, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Predicate<Object>>) orderedMapIterator0, (Predicate<? super Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      HashMap<Predicate<SQLFeatureNotSupportedException>, Closure<SQLFeatureNotSupportedException>> hashMap0 = new HashMap<Predicate<SQLFeatureNotSupportedException>, Closure<SQLFeatureNotSupportedException>>();
      Closure<SQLFeatureNotSupportedException> closure0 = SwitchClosure.switchClosure((Map<Predicate<SQLFeatureNotSupportedException>, Closure<SQLFeatureNotSupportedException>>) hashMap0);
      IteratorUtils.apply((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Closure<? super SQLFeatureNotSupportedException>) closure0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLFeatureNotSupportedException>) null, (Closure<? super SQLFeatureNotSupportedException>) closure0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLSyntaxErrorException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLSyntaxErrorException>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0, (Closure<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("delimiter may not be null");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>(10, 10);
      Iterator<?> iterator0 = IteratorUtils.getIterator(hashtable0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", true);
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Zg", "org.apache.commons.collections4.functors.NotPredicate");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientConnectionException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLInvalidAuthorizationSpecException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Iterator<DataTruncation> iterator0 = EmptyIterator.emptyIterator();
      Iterator<?> iterator1 = IteratorUtils.getIterator(iterator0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      ResettableListIterator<Predicate<Object>> resettableListIterator0 = IteratorUtils.arrayListIterator(predicateArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Predicate<Object>>) resettableListIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) orderedIterator0, (Class<SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator((Object[]) sQLDataExceptionArray0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("2DT(1\"UyK~2mQdj", "!/", (-2232));
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) null);
      Iterable<SQLSyntaxErrorException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MapIterator<BatchUpdateException, SQLTransactionRollbackException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<BatchUpdateException, SQLTransactionRollbackException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<BatchUpdateException, SQLTransactionRollbackException>(mapIterator0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) abstractMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) null, (Collection<? super Locale.Category>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) listIterator0);
      Iterator<SQLWarning> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("+#RT}X64<OcR.sPzM");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("The predicate collection must not be null", "", 61);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      OnePredicate<SQLException> onePredicate0 = new OnePredicate<SQLException>((Predicate<? super SQLException>[]) null);
      ListIterator<SQLTimeoutException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) listIterator0, (Predicate<? super SQLTimeoutException>) onePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) listIterator1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.OnePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 1);
      MapIterator<BatchUpdateException, ServiceLoader<SQLException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 9);
      InvokerTransformer<Object, SQLIntegrityConstraintViolationException> invokerTransformer0 = new InvokerTransformer<Object, SQLIntegrityConstraintViolationException>("!/", classArray0, iteratorArray0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) mapIterator0, (Transformer<? super BatchUpdateException, ? extends SQLIntegrityConstraintViolationException>) invokerTransformer0);
      SkippingIterator<SQLIntegrityConstraintViolationException> skippingIterator0 = IteratorUtils.skippingIterator(iterator0, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) skippingIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLWarning>) null, (Predicate<? super SQLWarning>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TreeSet<Properties> treeSet0 = new TreeSet<Properties>();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Properties>) treeSet0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      Iterator<Properties> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Properties>) resettableIterator0, (Predicate<? super Properties>) anyPredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.iterators.ListIteratorWrapper", sQLNonTransientConnectionException0);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      Transformer<SQLException, Transformer<Object, Boolean>> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<Transformer<Object, Boolean>> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, (Transformer<? super SQLTransactionRollbackException, ? extends Transformer<Object, Boolean>>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Transformer<Object, Boolean>>) iterator0, 48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLTransactionRollbackException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 9);
      InvokerTransformer<Object, SQLIntegrityConstraintViolationException> invokerTransformer0 = new InvokerTransformer<Object, SQLIntegrityConstraintViolationException>("Enumeration must not be null", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) null, (Transformer<? super BatchUpdateException, ? extends SQLIntegrityConstraintViolationException>) invokerTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      ZippingIterator<SQLIntegrityConstraintViolationException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayIterator0);
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) zippingIterator0);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0, (Collection<? super SQLIntegrityConstraintViolationException>) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("F_78IC18b@EtYwbs", "4!taGf'S8", 0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransientException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLFeatureNotSupportedException0, 1041, 292);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransactionRollbackException[]) null, 6215);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<IIOMetadataNode, Properties>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TreeSet<Properties> treeSet0 = new TreeSet<Properties>();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Properties>) treeSet0);
      Iterator<Properties> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Properties>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Locale[] localeArray0 = new Locale[3];
      ResettableIterator<Locale> resettableIterator0 = IteratorUtils.arrayIterator(localeArray0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Locale>) resettableIterator0, (Transformer<? super Locale, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[4];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0, 0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableListIterator0, class0);
      assertEquals(0, sQLNonTransientExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(batchUpdateExceptionArray0, 3, (-765));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = IteratorUtils.toString((Iterator<SQLDataException>) null);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 0);
      Transformer<Object, Transformer<Object, Boolean>> transformer1 = InvokerTransformer.invokerTransformer("Iterator[", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<Transformer<Object, Boolean>> iterator0 = IteratorUtils.objectGraphIterator(transformer0, (Transformer<? super Transformer<Object, Boolean>, ? extends Transformer<Object, Boolean>>) transformer1);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Transformer<Object, Boolean>>) iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Iterator[' on 'class org.apache.commons.collections4.functors.ExceptionTransformer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Integer integer0 = new Integer(1626);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) listIterator0, 1626);
      ReverseListIterator<Integer> reverseListIterator0 = new ReverseListIterator<Integer>(list0);
      BoundedIterator<Integer> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Integer>) reverseListIterator0, (long) 1626);
      IteratorUtils.asIterable((Iterator<? extends Integer>) boundedIterator0);
      assertTrue(listIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) properties0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      LoopingIterator<SQLFeatureNotSupportedException> loopingIterator0 = new LoopingIterator<SQLFeatureNotSupportedException>(priorityQueue0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) loopingIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>(91);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) hashtable0, (-82), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Properties[]) null, (-2816));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1336);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet0 = new LinkedHashSet<SQLTransactionRollbackException>();
      ListIterator<LinkedHashSet<SQLTransactionRollbackException>> listIterator0 = IteratorUtils.singletonListIterator(linkedHashSet0);
      boolean boolean0 = IteratorUtils.contains((Iterator<LinkedHashSet<SQLTransactionRollbackException>>) listIterator0, (Object) linkedHashSet0);
      assertTrue(listIterator0.hasPrevious());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[6];
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      Iterator<Properties> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Properties>) objectArrayListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLSyntaxErrorException, SQLClientInfoException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLSyntaxErrorException, SQLClientInfoException>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLSyntaxErrorException>) abstractMapIteratorDecorator0, (Transformer<? super SQLSyntaxErrorException, ? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-353));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(linkedList0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<BatchUpdateException>) loopingListIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) listIterator0, (Iterator<? extends BatchUpdateException>) loopingListIterator0);
      assertNotNull(iterator0);
  }
}
