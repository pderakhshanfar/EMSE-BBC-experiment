/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 05:46:38 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Set;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 2);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      objectArrayIterator0.reset();
      objectArrayIterator0.reset();
      SkippingIterator<SQLDataException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLDataException>) objectArrayIterator0, 0L);
      IteratorUtils.get((Iterator<SQLDataException>) skippingIterator0, 0);
      IteratorUtils.asMultipleUseIterable((Iterator<?>) objectArrayIterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Predicate must not be null", "Predicate must not be null", (-2623));
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("Array class must not be null", (String) null);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0, (-2623));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLDataException>) null, 1492);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MapIterator<SQLClientInfoException, SQLTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "XA]a)TLmQ>u8 FEh";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) resettableListIterator0, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.find((Iterator<IIOMetadataNode>) orderedMapIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Stack<InstanceofPredicate>[] stackArray0 = (Stack<InstanceofPredicate>[]) Array.newInstance(Stack.class, 2);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      stackArray0[0] = stack0;
      Stack<InstanceofPredicate> stack1 = new Stack<InstanceofPredicate>();
      stackArray0[1] = stack1;
      ObjectArrayListIterator<Stack<InstanceofPredicate>> objectArrayListIterator0 = new ObjectArrayListIterator<Stack<InstanceofPredicate>>(stackArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 4);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      classArray0[2] = class2;
      Class<SQLClientInfoException> class3 = SQLClientInfoException.class;
      classArray0[3] = class3;
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("/YYQAwo([$z}`5--<[%", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      predicateArray0[0] = (Predicate<Object>) transformerPredicate0;
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) stack1);
      predicateArray0[1] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) allPredicate0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[3] = (Predicate<Object>) uniquePredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[4] = (Predicate<Object>) nonePredicate0;
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) nonePredicate0, (Predicate<? super Object>) predicateArray0[0]);
      predicateArray0[5] = predicate1;
      Predicate<Object> predicate2 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Stack<InstanceofPredicate>>) objectArrayListIterator0, (Predicate<? super Stack<InstanceofPredicate>>) predicate2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '/YYQAwo([$z}`5--<[%' on 'class java.util.Stack' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("V~*AL9'd`peFRDD>..");
      Hashtable<SQLNonTransientConnectionException, BatchUpdateException> hashtable0 = new Hashtable<SQLNonTransientConnectionException, BatchUpdateException>();
      SingletonIterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>> singletonIterator0 = new SingletonIterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>(hashtable0, false);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "V~*AL9'd`peFRDD>..");
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      allPredicate0.getPredicates();
      IteratorUtils.find((Iterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) singletonIterator0, (Predicate<? super Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) allPredicate0);
      OrderedMapIterator<Iterator<StringTokenizer>, Transformer<Object, String>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.isEmpty(resettableIterator0);
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 2);
      OrderedIterator<InstanceofPredicate> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<InstanceofPredicate>) orderedIterator0;
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      Transformer<Object, InstanceofPredicate>[] transformerArray0 = (Transformer<Object, InstanceofPredicate>[]) Array.newInstance(Transformer.class, 3);
      Transformer<Object, InstanceofPredicate> transformer0 = InvokerTransformer.invokerTransformer("");
      transformerArray0[0] = transformer0;
      Transformer<Object, InstanceofPredicate> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicateArray0[1], (Transformer<? super Object, ? extends InstanceofPredicate>) transformer0, (Transformer<? super Object, ? extends InstanceofPredicate>) transformer0);
      transformerArray0[1] = transformer1;
      Transformer<Object, InstanceofPredicate> transformer2 = ConstantTransformer.constantTransformer(instanceofPredicate0);
      transformerArray0[2] = transformer2;
      SwitchTransformer<Object, InstanceofPredicate> switchTransformer0 = new SwitchTransformer<Object, InstanceofPredicate>(predicateArray0, transformerArray0, transformer2);
      IfTransformer<InstanceofPredicate, InstanceofPredicate> ifTransformer0 = new IfTransformer<InstanceofPredicate, InstanceofPredicate>(instanceofPredicate0, switchTransformer0, transformer1);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.objectGraphIterator(instanceofPredicate0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) ifTransformer0);
      iteratorArray0[1] = iterator0;
      ZippingIterator<InstanceofPredicate> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<InstanceofPredicate>) zippingIterator0, (Transformer<? super InstanceofPredicate, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLDataException>) arrayList0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLDataException>) resettableListIterator0);
      SQLDataException sQLDataException0 = new SQLDataException("", "HI$'Yug.!b:rN", 2680);
      arrayList0.add(sQLDataException0);
      ListIteratorWrapper<SQLDataException> listIteratorWrapper0 = new ListIteratorWrapper<SQLDataException>(listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLDataException>) listIteratorWrapper0, (Predicate<? super SQLDataException>) uniquePredicate0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Stack<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>> stack0 = new Stack<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>();
      LoopingListIterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>> loopingListIterator0 = new LoopingListIterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>(stack0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.find((Iterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) loopingListIterator0, (Predicate<? super Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) predicate0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) loopingListIterator0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      SingletonListIterator<ClientInfoStatus> singletonListIterator0 = new SingletonListIterator<ClientInfoStatus>(clientInfoStatus0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("suffix may not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ClientInfoStatus>) singletonListIterator0, (Transformer<? super ClientInfoStatus, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'suffix may not be null' on 'class java.sql.ClientInfoStatus' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedList<StringTokenizer> linkedList0 = new LinkedList<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("ListIteratorWrapper does not support optional operations of ListIterator.");
      linkedList0.add(stringTokenizer0);
      linkedList0.add(stringTokenizer0);
      IteratorUtils.loopingListIterator((List<StringTokenizer>) linkedList0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyListIterator();
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-3861));
      integerArray0[0] = integer0;
      int int0 = (-1);
      Integer integer1 = new Integer((-1));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(93);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1420));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[0]);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(6600);
      integerArray0[7] = integer7;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("V~*AL9'd`peFRDD>..");
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super String>>) stack0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) singletonListIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) comparator0, (Iterator<? extends Locale.Category>) null, (Iterator<? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Ho^F9E!=23)o;^");
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      boolean boolean0 = IteratorUtils.isEmpty(nodeListIterator0);
      assertTrue(boolean0);
      
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<ArrayDeque<SQLTimeoutException>>) null, (Transformer<? super ArrayDeque<SQLTimeoutException>, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<?>) orderedMapIterator0);
      IteratorUtils.emptyMapIterator();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      IteratorUtils.singletonListIterator(clientInfoStatus0);
      TreeSet<Integer>[] treeSetArray0 = (TreeSet<Integer>[]) Array.newInstance(TreeSet.class, 0);
      ResettableListIterator<TreeSet<Integer>> resettableListIterator0 = IteratorUtils.arrayListIterator(treeSetArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("V~*AL9'd`peFRDD>..");
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<String> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super String>>) stack0);
      IteratorUtils.filteredListIterator((ListIterator<? extends String>) singletonListIterator0, (Predicate<? super String>) predicate0);
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      OrderedMapIterator<SQLTransactionRollbackException, ComparatorPredicate.Criterion> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLTransactionRollbackException, ComparatorPredicate.Criterion> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransactionRollbackException, ComparatorPredicate.Criterion>(orderedMapIterator0);
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLTransientException>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("Vn*AL7'd`peCRDD>..");
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super String>>) stack0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("Vn*AL7'd`peCRDD>..", "Vn*AL7'd`peCRDD>..", false);
      stringTokenizer0.hasMoreElements();
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Closure<Object>>) null, (Transformer<? super Closure<Object>, ? extends SQLFeatureNotSupportedException>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      LoopingIterator<SQLTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLTransientConnectionException>(stack0);
      Stack<InstanceofPredicate> stack1 = new Stack<InstanceofPredicate>();
      Predicate<String> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super String>>) stack1);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) null, (Predicate<? super String>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MapIterator<SQLClientInfoException, SQLTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) resettableListIterator0;
      iteratorArray0[2] = (Iterator<SQLFeatureNotSupportedException>) resettableListIterator0;
      iteratorArray0[3] = (Iterator<SQLFeatureNotSupportedException>) resettableListIterator0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Enumeration<Properties> enumeration0 = (Enumeration<Properties>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Enumeration<Properties> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) iterator0);
      Vector<Object> vector0 = new Vector<Object>();
      String string0 = "yT!2az0WoGFVB";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("yT!2az0WoGFVB");
      vector0.parallelStream();
      Throwable throwable0 = sQLTimeoutException0.fillInStackTrace();
      vector0.add((Object) sQLTimeoutException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration1, (Collection<? super Properties>) vector0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) iterator0, class0);
      MapIterator<SQLDataException, SQLTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.isEmpty(mapIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLException>) mapIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0, string0);
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 2);
      boolean boolean0 = false;
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>((SQLTimeoutException) throwable0, boolean0);
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) singletonIterator0;
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = null;
      int int0 = (-1057);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      LoopingIterator<SQLTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLTransientConnectionException>(stack0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      IteratorUtils.size(loopingIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.map.Flat3Map$KeySetIterator", "");
      IteratorUtils.find((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      LoopingIterator<SQLTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLTransientConnectionException>(stack0);
      ExceptionPredicate.exceptionPredicate();
      IteratorUtils.asMultipleUseIterable((Iterator<?>) loopingIterator0);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("V~*AL9'd`peFRDD>..");
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<String> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super String>>) stack0);
      IteratorUtils.filteredListIterator((ListIterator<? extends String>) singletonListIterator0, (Predicate<? super String>) predicate0);
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      IteratorUtils.emptyMapIterator();
      MapIterator<SQLSyntaxErrorException, DataTruncation> mapIterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      ListIterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>> listIterator0 = EmptyListIterator.emptyListIterator();
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      IteratorUtils.find((Iterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) listIterator0, (Predicate<? super Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) predicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<SQLDataException> treeSet0 = new TreeSet<SQLDataException>();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) listIterator0, (Predicate<? super Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("V~*AL9'd`peFRDD>..");
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<String> predicate0 = new IdentityPredicate<String>("V~*AL9'd`peFRDD>..");
      ListIterator<String> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends String>) singletonListIterator0, (Predicate<? super String>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.isEmpty(listIterator0);
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Enumeration<Properties> enumeration0 = (Enumeration<Properties>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Enumeration<Properties> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) iterator0);
      Vector<Object> vector0 = new Vector<Object>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("yT!2az0WoGFVB");
      vector0.parallelStream();
      sQLTimeoutException0.fillInStackTrace();
      vector0.add((Object) sQLTimeoutException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration1, (Collection<? super Properties>) vector0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) iterator0, class0);
      MapIterator<SQLDataException, SQLTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.isEmpty(mapIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLException>) mapIterator0);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(2721);
      integerArray0[0] = integer0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(integerArray0, 2547);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.isEmpty((Iterator<?>) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.NullIsFalsePredicate", "org.apache.commons.collections4.functors.NullIsFalsePredicate");
      sQLTransactionRollbackException0.spliterator();
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) singletonListIterator0, class0);
      assertEquals(1, sQLTransactionRollbackExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[6];
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 32;
      intArray0[2] = 32;
      intArray0[3] = 32;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("^T+Wf5", "^T+Wf5", 32, intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("^T+Wf5", "^T+Wf5", intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("^T+Wf5", intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("", "^T+Wf5", intArray0, batchUpdateException2);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException();
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      SkippingIterator<BatchUpdateException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) objectArrayListIterator0, 0L);
      IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) skippingIterator0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>("^T+Wf5");
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(identityPredicate0, closure0, closure0);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(identityPredicate0, ifClosure0, true);
      IteratorUtils.apply((Iterator<BatchUpdateException>) skippingIterator0, (Closure<? super BatchUpdateException>) whileClosure0);
      assertEquals(6, objectArrayListIterator0.nextIndex());
      assertEquals(5, objectArrayListIterator0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer[] integerArray0 = new Integer[0];
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) objectArrayListIterator0, (Iterator<? extends Integer>) objectArrayListIterator0);
      EmptyListIterator.emptyListIterator();
      Comparator<SQLException> comparator1 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.asMultipleUseIterable((Iterator<?>) objectArrayListIterator0);
      IteratorUtils.emptyListIterator();
      MapIterator<SQLSyntaxErrorException, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "");
      DataTruncation dataTruncation0 = new DataTruncation(100, true, true, 303, 100, sQLNonTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 10, dataTruncation0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      LoopingIterator<SQLTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLTransientConnectionException>(stack0);
      ExceptionPredicate.exceptionPredicate();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", (Throwable) null);
      ConstantTransformer<SQLException, SQLNonTransientConnectionException> constantTransformer0 = new ConstantTransformer<SQLException, SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) constantTransformer0);
      IteratorUtils.asMultipleUseIterable((Iterator<?>) loopingIterator0);
      IteratorUtils.emptyListIterator();
      MapIterator<SQLSyntaxErrorException, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) constantTransformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("V~*AL9'd`peFRDD>..");
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<String> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super String>>) stack0);
      ListIterator<String> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends String>) singletonListIterator0, (Predicate<? super String>) predicate0);
      Integer integer0 = new Integer((-1));
      Transformer<Object, Integer> transformer0 = ConstantTransformer.constantTransformer(integer0);
      IteratorUtils.transformedIterator((Iterator<? extends String>) listIterator0, (Transformer<? super String, ? extends Integer>) transformer0);
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) instanceofPredicate0, (-1), 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) listIterator0, (Transformer<? super SQLSyntaxErrorException, String>) null, "", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "transformer may not be null");
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLException>) null, (Predicate<? super SQLException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      String string0 = "edro-,u";
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      SkippingIterator<SQLDataException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLDataException>) objectArrayIterator0, 0L);
      IteratorUtils.get((Iterator<SQLDataException>) skippingIterator0, 0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "org.apache.commons.collections4.IteratorUtils", 0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      IteratorUtils.getIterator(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MapIterator<Closure<Object>, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Closure<Object>, ? extends SQLException>) mapIterator0);
      SQLWarning sQLWarning0 = new SQLWarning("c!", "w2&2C(21_E3t>{", 1, (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "c!");
      IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) onePredicate0;
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLSyntaxErrorException0);
      predicateArray0[1] = predicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) anyPredicate0;
      Predicate<SQLException> predicate1 = NonePredicate.nonePredicate((Predicate<? super SQLException>[]) predicateArray0);
      // Undeclared exception!
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) singletonIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLDataException>) null, (Predicate<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<Integer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Integer>) orderedIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) iterator0, (Iterator<? extends Integer>) orderedIterator0);
      ListIterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>> listIterator0 = EmptyListIterator.emptyListIterator();
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      IteratorUtils.find((Iterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) listIterator0, (Predicate<? super Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) predicate0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator1 = EmptyListIterator.emptyListIterator();
      SingletonIterator<Iterator<SQLInvalidAuthorizationSpecException>> singletonIterator0 = new SingletonIterator<Iterator<SQLInvalidAuthorizationSpecException>>(listIterator1);
      Enumeration<Iterator<SQLInvalidAuthorizationSpecException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Iterator<SQLInvalidAuthorizationSpecException>>) singletonIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Iterator<SQLInvalidAuthorizationSpecException>>) enumeration0, (Collection<? super Iterator<SQLInvalidAuthorizationSpecException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, BatchUpdateException>(orderedMapIterator0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IIOMetadataNode[] iIOMetadataNodeArray0 = IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) abstractOrderedMapIteratorDecorator0, class0);
      assertEquals(0, iIOMetadataNodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLWarning sQLWarning0 = new SQLWarning("9'?'UxMkyZWY,9");
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("", "", 2721, hashMap0, sQLWarning0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException(hashMap0, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("9'?'UxMkyZWY,9", hashMap0, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("", hashMap0);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException(hashMap0);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLClientInfoException1);
      batchUpdateException0.getNextException();
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException("", "", 2721, hashMap0, (Throwable) null);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException7;
      SQLClientInfoException sQLClientInfoException8 = new SQLClientInfoException((String) null, (String) null, hashMap0);
      sQLClientInfoExceptionArray0[8] = sQLClientInfoException8;
      ObjectArrayIterator<SQLClientInfoException> objectArrayIterator0 = new ObjectArrayIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) objectArrayIterator0, 1844);
      assertTrue(list0.contains(sQLClientInfoException3));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, closure0, closure0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "_z(o}}NZb~ylov>*T-z", 100);
      StringTokenizer stringTokenizer0 = new StringTokenizer("6jkC0l", (String) null, false);
      ifClosure0.execute(stringTokenizer0);
      IfClosure.ifClosure((Predicate<? super LinkedHashSet<InstanceofPredicate>>) predicate0, (Closure<? super LinkedHashSet<InstanceofPredicate>>) closure0);
      IteratorUtils.apply((Iterator<Locale.Category>) null, (Closure<? super Locale.Category>) closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) closure0, 124);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.functors.NullIsTruePredicate", "jZgV?dzh(");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLFeatureNotSupportedException0);
      stack0.add(sQLTransientConnectionException0);
      LoopingIterator<SQLTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLTransientConnectionException>(stack0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Iterator<SQLException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLException>) loopingIterator0, (Predicate<? super SQLException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      SingletonIterator<Stack<SQLTransactionRollbackException>> singletonIterator0 = new SingletonIterator<Stack<SQLTransactionRollbackException>>(stack0, false);
      IteratorUtils.matchesAll((Iterator<Stack<SQLTransactionRollbackException>>) singletonIterator0, (Predicate<? super Stack<SQLTransactionRollbackException>>) predicate0);
      SQLWarning sQLWarning0 = new SQLWarning();
      IteratorUtils.getIterator("[3MSd");
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) resettableIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("[3MSd", sQLWarning0);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator1 = IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      assertNotNull(resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EmptyMapIterator.emptyMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(uniquePredicate0);
      nullIsFalsePredicate0.evaluate((Object) null);
      nullIsFalsePredicate0.evaluate(uniquePredicate0);
      SQLDataException sQLDataException0 = new SQLDataException("");
      SQLWarning sQLWarning0 = new SQLWarning("", "transformer may not be null", sQLDataException0);
      nullIsFalsePredicate0.evaluate(sQLWarning0);
      NOPClosure.nopClosure();
      nullIsFalsePredicate0.evaluate((Object) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLDataException0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[9];
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException0;
      SQLDataException sQLDataException1 = new SQLDataException("q\"+pQ;fQ`0R|HR%D0yu", "q\"+pQ;fQ`0R|HR%D0yu", 2414, sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("q\"+pQ;fQ`0R|HR%D0yu", "", sQLDataException1);
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException1;
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[7] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[8] = sQLNonTransientConnectionException0;
      IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("I&rgP|a5n");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("[~3,/RQ*b41b$c_i0DK");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("f$6e/", "f$6e/", 123, sQLRecoverableException0);
      ConstantTransformer.constantTransformer(sQLIntegrityConstraintViolationException0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "I&rgP|a5n");
      String string0 = IteratorUtils.toString((Iterator<TreeSet<LinkedList>>) null, (Transformer<? super TreeSet<LinkedList>, String>) constantTransformer0, "I&rgP|a5n", "", "I&rgP|a5n");
      assertEquals("I&rgP|a5n", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLDataException sQLDataException0 = new SQLDataException("edro-,u", "edro-,u");
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      sQLDataExceptionArray0[0] = sQLDataException0;
      sQLDataExceptionArray0[1] = sQLDataException0;
      sQLDataExceptionArray0[2] = sQLDataException0;
      sQLDataExceptionArray0[3] = sQLDataException0;
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      IteratorUtils.matchesAll((Iterator<Stack<SQLTransactionRollbackException>>) null, (Predicate<? super Stack<SQLTransactionRollbackException>>) nullIsExceptionPredicate0);
      SQLWarning sQLWarning0 = new SQLWarning();
      IteratorUtils.getIterator("[3MSd");
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) resettableIterator0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLNonTransientException0);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator1 = IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      assertNotNull(resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = (-3029);
      String string0 = "org.apache.commons.collections4.iterators.UnmodifiableListIterator";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", "org.apache.commons.collections4.iterators.UnmodifiableListIterator", (-3029));
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 5);
      Comparator<SQLDataException> comparator0 = (Comparator<SQLDataException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      EmptyListIterator.resettableEmptyListIterator();
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      SingletonIterator<Stack<SQLTransactionRollbackException>> singletonIterator0 = new SingletonIterator<Stack<SQLTransactionRollbackException>>(stack0, true);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      AndPredicate.andPredicate((Predicate<? super Object>) predicate1, (Predicate<? super Object>) predicate0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLWarning sQLWarning0 = new SQLWarning();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) resettableIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("[3MSd");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("[3MSd", sQLTransactionRollbackException0);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator1 = IteratorUtils.singletonIterator(sQLTransactionRollbackException1);
      assertNotNull(resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      OrderedIterator<Stack<SQLTransactionRollbackException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Stack<SQLTransactionRollbackException>>) orderedIterator0, (Predicate<? super Stack<SQLTransactionRollbackException>>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      OrderedMapIterator<String, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", (-3029));
      IteratorUtils.asIterable((Iterator<?>) orderedMapIterator0);
      OrderedMapIterator<Locale.Category, ArrayList<SQLIntegrityConstraintViolationException>> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Locale.Category, ArrayList<SQLIntegrityConstraintViolationException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Locale.Category, ArrayList<SQLIntegrityConstraintViolationException>>(orderedMapIterator1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(uniquePredicate0);
      OrderedIterator<Iterator<SQLInvalidAuthorizationSpecException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Iterator<SQLInvalidAuthorizationSpecException>>) orderedIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      OrderedMapIterator<Closure<Object>, Boolean> orderedMapIterator2 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Closure<Object>>) orderedMapIterator2, (Transformer<? super Closure<Object>, ? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", (-3029));
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(uniquePredicate0);
      NOPClosure.nopClosure();
      NullPredicate.nullPredicate();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) singletonListIterator0, (Predicate<? super SQLClientInfoException>) uniquePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) singletonListIterator0, (-3029));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLWarning sQLWarning1 = new SQLWarning("bsh'uF", (String) null, (-2440), (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("bsh'uF", "No element at index ");
      IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, false);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) singletonIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, BatchUpdateException>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((IIOMetadataNode[]) null, (-1007));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      EmptyListIterator.resettableEmptyListIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", (-3029));
      String string0 = "n8Eo(,pFTQ`5\"V9n:Z";
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", "n8Eo(,pFTQ`5\"V9n:Z", (-1675));
      OrderedMapIterator<Locale.Category, ArrayList<SQLIntegrityConstraintViolationException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Locale.Category, ArrayList<SQLIntegrityConstraintViolationException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Locale.Category, ArrayList<SQLIntegrityConstraintViolationException>>(orderedMapIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(uniquePredicate0);
      NOPClosure.nopClosure();
      DataTruncation dataTruncation0 = new DataTruncation(100, false, false, (-1193), 100);
      nullIsFalsePredicate0.evaluate(dataTruncation0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransientConnectionException1);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLFeatureNotSupportedException[]) null, 10, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      TreeSet<SQLTransientConnectionException> treeSet0 = new TreeSet<SQLTransientConnectionException>();
      LoopingIterator<SQLTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLTransientConnectionException>(treeSet0);
      ExceptionPredicate.exceptionPredicate();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "";
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", true);
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) singletonIterator0);
      OrderedMapIterator<Locale.Category, ArrayList<SQLIntegrityConstraintViolationException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Locale.Category, ArrayList<SQLIntegrityConstraintViolationException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Locale.Category, ArrayList<SQLIntegrityConstraintViolationException>>(orderedMapIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(uniquePredicate0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      nullIsFalsePredicate0.evaluate((Object) null);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(uniquePredicate0, closure0, closure0);
      ifClosure0.execute((Object) null);
      IfClosure.ifClosure((Predicate<? super LinkedHashSet<InstanceofPredicate>>) uniquePredicate0, (Closure<? super LinkedHashSet<InstanceofPredicate>>) ifClosure0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Locale.Category>) abstractOrderedMapIteratorDecorator0, (Closure<? super Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "~3e6'}o{FU|'.";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("~3e6'}o{FU|'.");
      IteratorUtils.singletonIterator((SQLTransientException) sQLTransactionRollbackException0);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends StringTokenizer>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      int int0 = 0;
      SQLDataException sQLDataException0 = new SQLDataException("p+z9*aN{D..%", "p+z9*aN{D..%");
      SQLDataException sQLDataException1 = new SQLDataException("p+z9*aN{D..%", (Throwable) null);
      SQLDataException sQLDataException2 = new SQLDataException();
      SQLDataException sQLDataException3 = new SQLDataException("p+z9*aN{D..%", "suffix may not be null");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", (String) null, sQLDataException3);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLDataException1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("W");
      Transformer<SQLException, SQLTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.IteratorUtils");
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) transformer0);
      ConstantTransformer<SQLTransientException, SQLSyntaxErrorException> constantTransformer0 = new ConstantTransformer<SQLTransientException, SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLTransientConnectionException>) iterator0, (Transformer<? super SQLTransientConnectionException, ? extends SQLSyntaxErrorException>) constantTransformer0);
      MapIterator<InstanceofPredicate, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) mapIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLDataException sQLDataException0 = new SQLDataException("p+z9*aN{D..%", "p+z9*aN{D..%");
      int int0 = 3686;
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[6];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("p+z9*aN{D..%", "z");
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("p+z9*aN{D..%", "p+z9*aN{D..%");
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("", "", sQLDataException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      String string0 = "7)pvU";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("7)pvU", "p+z9*aN{D..%", sQLIntegrityConstraintViolationException2);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0, sQLIntegrityConstraintViolationException3);
      sQLIntegrityConstraintViolationException1.setNextException(sQLIntegrityConstraintViolationException3);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("", "p+z9*aN{D..%", 3686, sQLClientInfoException0);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("", "]");
      sQLIntegrityConstraintViolationException5.getLocalizedMessage();
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, 3686, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLWarning sQLWarning1 = new SQLWarning("bsh'uF", (String) null, (-2440), (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("bsh'uF", "No element at index ");
      IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, false);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) singletonIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      assertFalse(singletonIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      SingletonIterator<Stack<SQLTransactionRollbackException>> singletonIterator0 = new SingletonIterator<Stack<SQLTransactionRollbackException>>(stack0, false);
      IteratorUtils.matchesAll((Iterator<Stack<SQLTransactionRollbackException>>) singletonIterator0, (Predicate<? super Stack<SQLTransactionRollbackException>>) predicate0);
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLWarning sQLWarning1 = new SQLWarning("bsh'uF", (String) null, (-2440), (Throwable) null);
      sQLWarning1.setNextWarning((SQLWarning) null);
      Iterator<?> iterator0 = IteratorUtils.getIterator("[3MSd");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      OrderedMapIterator<String, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      EmptyListIterator.resettableEmptyListIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", (-3029));
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      SingletonIterator<Stack<SQLTransactionRollbackException>> singletonIterator0 = new SingletonIterator<Stack<SQLTransactionRollbackException>>(stack0, false);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) "", (Equator<Object>) defaultEquator0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      IteratorUtils.matchesAll((Iterator<Stack<SQLTransactionRollbackException>>) singletonIterator0, (Predicate<? super Stack<SQLTransactionRollbackException>>) orPredicate0);
      SQLWarning sQLWarning0 = new SQLWarning();
      DataTruncation dataTruncation0 = new DataTruncation((-1), false, false, (-3029), 31);
      sQLWarning0.setNextWarning(dataTruncation0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedMapIterator<String, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      EmptyListIterator.resettableEmptyListIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", (-3029));
      IteratorUtils.asIterable((Iterator<?>) orderedMapIterator0);
      OrderedMapIterator<Locale.Category, ArrayList<SQLIntegrityConstraintViolationException>> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Locale.Category, ArrayList<SQLIntegrityConstraintViolationException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Locale.Category, ArrayList<SQLIntegrityConstraintViolationException>>(orderedMapIterator1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(uniquePredicate0);
      NOPClosure.nopClosure();
      SQLWarning sQLWarning0 = new SQLWarning("", "", 12);
      sQLWarning0.printStackTrace();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) arrayList0);
      IteratorUtils.getIterator(resettableIterator0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-421);
      intArray0[1] = (-5117);
      intArray0[2] = 225;
      intArray0[3] = 911;
      intArray0[4] = 44;
      intArray0[5] = (-1868);
      SQLException sQLException0 = new SQLException("", "");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("AR/6 !5j yg^ ", "Node must not be null", sQLException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLFeatureNotSupportedException0);
      SQLDataException sQLDataException0 = new SQLDataException("", "@", batchUpdateException0);
      arrayList0.add(sQLDataException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("The map size must be 0 or 1");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      OrderedMapIterator<DataTruncation, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("The map size must be 0 or 1");
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLException>) orderedMapIterator0, (Predicate<? super SQLException>) transformerPredicate0);
      ListIterator<SQLDataException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLDataException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) resettableIterator0, (Iterator<? extends SQLDataException>) listIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) iterator0);
      ResettableListIterator<EnumSet<ComparatorPredicate.Criterion>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      OrderedMapIterator<String, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      EmptyListIterator.resettableEmptyListIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", (-3029));
      SQLWarning sQLWarning0 = new SQLWarning(")H-(BP", "", (-2440), sQLTransientConnectionException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "?5K97%CDbJs");
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, false);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) orderedMapIterator0);
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) listIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      IteratorUtils.singletonListIterator((SQLNonTransientException) sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      LoopingIterator<SQLTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLTransientConnectionException>(stack0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("SD+jIlI", "SD+jIlI");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("k", "k", sQLIntegrityConstraintViolationException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientConnectionException0.forEach(consumer0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("Collection must not be null", "", sQLIntegrityConstraintViolationException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException(sQLIntegrityConstraintViolationException0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[8];
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException1;
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException1;
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException2;
      sQLNonTransientConnectionExceptionArray0[7] = sQLNonTransientConnectionException1;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("k", "");
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) listIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      LoopingIterator<SQLTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLTransientConnectionException>(stack0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLException>) loopingIterator0, (Predicate<? super SQLException>) predicate0);
      EmptyListIterator.emptyListIterator();
      SQLWarning sQLWarning0 = new SQLWarning();
      sQLWarning0.setNextWarning((SQLWarning) null);
      IteratorUtils.getIterator(stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((IIOMetadataNode[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) arrayList0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) resettableIterator1);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Iterator<SQLWarning>[] iteratorArray0 = (Iterator<SQLWarning>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-199), (-199));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ListIterator<Stack<SQLTransactionRollbackException>> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.matchesAll((Iterator<Stack<SQLTransactionRollbackException>>) listIterator0, (Predicate<? super Stack<SQLTransactionRollbackException>>) predicate0);
      SQLWarning sQLWarning0 = new SQLWarning();
      sQLWarning0.setNextWarning((SQLWarning) null);
      IteratorUtils.getIterator(predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("SJxfToK");
      iIOMetadataNode0.item(1);
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)100;
      byteArray0[0] = (byte)100;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ResettableIterator<Boolean> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.unmodifiableIterator((Iterator<Boolean>) resettableIterator0);
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLFeatureNotSupportedException> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends InstanceofPredicate>) iterator0, (Transformer<? super InstanceofPredicate, ? extends SQLFeatureNotSupportedException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iterator1, (int) 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "~3e6'}o{FU|'.";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("~3e6'}o{FU|'.");
      IteratorUtils.singletonIterator((SQLTransientException) sQLTransactionRollbackException0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<Integer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Integer>) orderedIterator0);
      IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) iterator0, (Iterator<? extends Integer>) orderedIterator0);
      ListIterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>> listIterator0 = EmptyListIterator.emptyListIterator();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(string0);
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      IteratorUtils.find((Iterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) listIterator0, (Predicate<? super Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) identityPredicate0);
      EmptyIterator.resettableEmptyIterator();
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[3];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category2;
      int int0 = 0;
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_CategoryArray0, int0);
      ListIterator<Locale.Category> listIterator1 = IteratorUtils.unmodifiableListIterator((ListIterator<Locale.Category>) resettableListIterator0);
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = (Iterator<Locale.Category>) listIterator1;
      iteratorArray0[1] = (Iterator<Locale.Category>) listIterator1;
      iteratorArray0[2] = (Iterator<Locale.Category>) listIterator1;
      iteratorArray0[3] = (Iterator<Locale.Category>) listIterator1;
      IteratorUtils.chainedIterator((Iterator<? extends Locale.Category>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iteratorArray0[2]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      String string0 = "";
      SQLDataException sQLDataException0 = new SQLDataException("edro-,u", "");
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      sQLDataExceptionArray0[0] = sQLDataException0;
      sQLDataExceptionArray0[1] = sQLDataException0;
      sQLDataExceptionArray0[2] = sQLDataException0;
      sQLDataExceptionArray0[3] = sQLDataException0;
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      SkippingIterator<SQLDataException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLDataException>) objectArrayIterator0, 0L);
      IteratorUtils.get((Iterator<SQLDataException>) skippingIterator0, 0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "org.apache.commons.collections4.IteratorUtils", 0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      IteratorUtils.getIterator(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      String string0 = "p+z9*aN\\{D..%";
      SQLDataException sQLDataException0 = new SQLDataException();
      String string1 = "Predicate must not be null";
      SQLDataException sQLDataException1 = new SQLDataException("Predicate must not be null", (Throwable) null);
      String string2 = null;
      SQLDataException sQLDataException2 = new SQLDataException((String) null, "Predicate must not be null");
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      sQLDataExceptionArray0[0] = sQLDataException2;
      sQLDataExceptionArray0[1] = sQLDataException0;
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      SQLDataException[] sQLDataExceptionArray1 = new SQLDataException[4];
      sQLDataExceptionArray1[0] = sQLDataException1;
      sQLDataExceptionArray1[1] = sQLDataException1;
      sQLDataExceptionArray1[2] = sQLDataException0;
      sQLDataExceptionArray1[3] = sQLDataException2;
      ObjectArrayIterator<SQLDataException> objectArrayIterator1 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray1, 0, 1);
      IteratorUtils.skippingIterator((Iterator<SQLDataException>) objectArrayIterator1, (long) 0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLDataException>) objectArrayIterator1, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) listIterator0, 2721);
      SQLWarning sQLWarning0 = new SQLWarning("x40]9d", "x40]9d");
      sQLWarning0.printStackTrace();
      sQLWarning0.setNextWarning((SQLWarning) null);
      IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      LoopingIterator<SQLTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLTransientConnectionException>(stack0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLException>) loopingIterator0, (Predicate<? super SQLException>) predicate0);
      ListIterator<SQLDataException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLDataException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) listIterator0, (Iterator<? extends SQLDataException>) listIterator0);
      Iterator<SQLDataException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) iterator0);
      IteratorUtils.getIterator(iterator1);
      Vector<SQLException>[] vectorArray0 = (Vector<SQLException>[]) Array.newInstance(Vector.class, 8);
      Vector<SQLException> vector0 = new Vector<SQLException>();
      vectorArray0[0] = vector0;
      Vector<SQLException> vector1 = new Vector<SQLException>();
      vectorArray0[1] = vector1;
      Stack<SQLException> stack1 = new Stack<SQLException>();
      vectorArray0[2] = (Vector<SQLException>) stack1;
      Vector<SQLException> vector2 = new Vector<SQLException>();
      vectorArray0[3] = vector2;
      Vector<SQLException> vector3 = new Vector<SQLException>();
      vectorArray0[4] = vector3;
      Vector<SQLException> vector4 = new Vector<SQLException>();
      vectorArray0[5] = vector4;
      Vector<SQLException> vector5 = new Vector<SQLException>(4064, (-1));
      vectorArray0[6] = vector5;
      Stack<SQLException> stack2 = new Stack<SQLException>();
      vectorArray0[7] = (Vector<SQLException>) stack2;
      ObjectArrayListIterator<Vector<SQLException>> objectArrayListIterator0 = new ObjectArrayListIterator<Vector<SQLException>>(vectorArray0);
      IteratorUtils.skippingIterator((Iterator<Vector<SQLException>>) objectArrayListIterator0, (long) 4064);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      IteratorUtils.contains((Iterator<String>) null, (Object) null);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) arrayList0);
      IteratorUtils.getIterator(resettableIterator0);
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) arrayList0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) resettableIterator0);
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ListIteratorWrapper<SQLWarning> listIteratorWrapper0 = new ListIteratorWrapper<SQLWarning>(orderedIterator0);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[1];
      SQLWarning sQLWarning0 = new SQLWarning("&U~uznb\"pm{");
      sQLWarningArray0[0] = sQLWarning0;
      ResettableIterator<SQLWarning> resettableIterator1 = IteratorUtils.arrayIterator(sQLWarningArray0, 0, 0);
      ZippingIterator<SQLWarning> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) listIteratorWrapper0, (Iterator<? extends SQLWarning>) resettableIterator1, (Iterator<? extends SQLWarning>) orderedIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException sQLDataException1 = new SQLDataException(sQLDataException0);
      SQLDataException sQLDataException2 = new SQLDataException();
      String string0 = "";
      SQLDataException sQLDataException3 = new SQLDataException("");
      SQLDataException sQLDataException4 = new SQLDataException(sQLDataException0);
      SQLDataException sQLDataException5 = new SQLDataException("rol;|6 l2qK~Vg!", "");
      SQLDataException sQLDataException6 = new SQLDataException("p+z9*aN{D..%", sQLDataException0);
      SQLDataException sQLDataException7 = new SQLDataException();
      String string1 = "Q.V2yY+";
      SQLDataException sQLDataException8 = new SQLDataException("Q.V2yY+", (String) null);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      SkippingIterator<SQLDataException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLDataException>) objectArrayIterator0, 1129L);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLDataException>) skippingIterator0, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 3
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[9];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException(sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException();
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator");
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException(sQLDataException0);
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("p+z9*aN{D..%", "p+z9*aN{D..%");
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException("bc6TVdkwJ[", sQLDataException3);
      sQLDataExceptionArray0[6] = sQLDataException6;
      SQLDataException sQLDataException7 = new SQLDataException();
      sQLDataExceptionArray0[7] = sQLDataException7;
      SQLDataException sQLDataException8 = new SQLDataException("org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator", "x40]9d");
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      SkippingIterator<SQLDataException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLDataException>) objectArrayIterator0, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLDataException>) skippingIterator0, (-1720));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -1720
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator((BatchUpdateException) null);
      IteratorUtils.skippingIterator((Iterator<BatchUpdateException>) resettableIterator0, 4169L);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[7];
      DataTruncation dataTruncation0 = new DataTruncation(123, true, false, 123, 987);
      dataTruncationArray0[0] = dataTruncation0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      DataTruncation dataTruncation1 = new DataTruncation((-2876), false, true, 123, (-2876), sQLTransientConnectionException0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(10, false, true, (-2876), 10);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation((-2876), true, false, (-625), (-1830));
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation((-1111), false, true, 10, 4, dataTruncation1);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation((-2876), false, true, (-1830), 10);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation((-2307), true, false, 4, 5);
      dataTruncationArray0[6] = dataTruncation6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, 1327);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableListIterator<HashMap<Properties, String>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Factory<String> factory0 = ConstantFactory.constantFactory("");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, transformer0, transformer0);
      IteratorUtils.toString((Iterator<HashMap<Properties, String>>) resettableListIterator0, (Transformer<? super HashMap<Properties, String>, String>) ifTransformer0, "", "", "");
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 8);
      OrderedMapIterator<Locale.Category, SQLRecoverableException> orderedMapIterator0 = null;
      // Undeclared exception!
      try { 
        UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.Category, ? extends SQLException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OrderedMapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLWarning sQLWarning0 = new SQLWarning("|p?ZQ4V'&Fo'ZRm]Z", "r2`5Yrc0", 0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("r2`5Yrc0");
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, (-42), 100, sQLWarning0);
      dataTruncation0.getNextWarning();
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 1862;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("nk6HvV4yq{y", "nk6HvV4yq{y", 1862);
      FalsePredicate.falsePredicate();
      int int1 = (-734);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1862, (-734));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("nk6HvV4yq{y", "nk6HvV4yq{y", 1862);
      int int0 = (-1038);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) linkedHashSet0, 2721, (-1038));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("nk6HvV4yq{y", "nk6HvV4yq{y", 1862);
      linkedHashSet0.iterator();
      Comparator<SQLClientInfoException> comparator0 = (Comparator<SQLClientInfoException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      Predicate<Object> predicate2 = NotPredicate.notPredicate((Predicate<? super Object>) predicate1);
      Predicate<SQLException> predicate3 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLException>) predicate2);
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) iterator0, (Predicate<? super SQLClientInfoException>) predicate3);
      IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) iterator1, (Predicate<? super SQLClientInfoException>) predicate2);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0);
      // Undeclared exception!
      try { 
        IfTransformer.ifTransformer((Predicate<? super Object>) predicate1, (Transformer<? super Object, ? extends DataTruncation>) null, (Transformer<? super Object, ? extends DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Transformers must not be null
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) arrayList0);
      IteratorUtils.getIterator(resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_CategoryArray0, 0);
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) comparator0, (Iterator<? extends Locale.Category>) resettableListIterator0, (Iterator<? extends Locale.Category>) resettableListIterator0);
      IteratorUtils.size(resettableListIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("|", "Closure must not be null");
      assertEquals(1, stringTokenizer0.countTokens());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", true);
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) singletonIterator0);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      IteratorUtils.toArray((Iterator<? extends StringTokenizer>) iterator0, class0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) predicate0);
      OrderedIterator<Iterator<SQLInvalidAuthorizationSpecException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<Iterator<SQLInvalidAuthorizationSpecException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Iterator<SQLInvalidAuthorizationSpecException>>) orderedIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      IteratorUtils.asIterator((Enumeration<? extends Iterator<SQLInvalidAuthorizationSpecException>>) enumeration0, (Collection<? super Iterator<SQLInvalidAuthorizationSpecException>>) vector0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[5];
      SQLWarning sQLWarning0 = new SQLWarning("K6jPVY1xvW", "p[.X@\"0nInd+VM", (-116));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("AlC4", "AlC4", sQLWarning0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("'-<@vg98<p0~", "The transformer to call must not be null");
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) null, 0L, (long) (-116));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("~3e6'}o{FU|'.");
      IteratorUtils.singletonIterator((SQLTransientException) sQLTransactionRollbackException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<Integer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Integer>) orderedIterator0);
      IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) iterator0, (Iterator<? extends Integer>) orderedIterator0);
      ListIterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>> listIterator0 = EmptyListIterator.emptyListIterator();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>("~3e6'}o{FU|'.");
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      IteratorUtils.find((Iterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) listIterator0, (Predicate<? super Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) identityPredicate0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-2939);
      intArray0[3] = 86;
      intArray0[2] = (-1);
      intArray0[3] = 796;
      intArray0[4] = 460;
      intArray0[5] = (-1);
      intArray0[6] = 796;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray0, batchUpdateException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransactionRollbackException0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      BoundedIterator<SQLRecoverableException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0, 1L, 702L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      LoopingIterator<SQLTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLTransientConnectionException>(stack0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLException>) loopingIterator0, (Predicate<? super SQLException>) predicate0);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) resettableListIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) iterator0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[7];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category1;
      locale_CategoryArray0[3] = locale_Category0;
      locale_CategoryArray0[4] = locale_Category0;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[5] = locale_Category2;
      locale_CategoryArray0[6] = locale_Category0;
      ResettableListIterator<Locale.Category> resettableListIterator1 = IteratorUtils.arrayListIterator(locale_CategoryArray0, 0);
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) comparator0, (Iterator<? extends Locale.Category>) resettableListIterator1, (Iterator<? extends Locale.Category>) resettableListIterator1);
      IteratorUtils.size(loopingIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("Closure must not be null", "U.Bz`?A%sSF");
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OrderedMapIterator<String, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      EmptyListIterator.resettableEmptyListIterator();
      String string0 = "";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", (-3029));
      IteratorUtils.asIterable((Iterator<?>) orderedMapIterator0);
      OrderedMapIterator<Locale.Category, ArrayList<SQLIntegrityConstraintViolationException>> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Locale.Category, ArrayList<SQLIntegrityConstraintViolationException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Locale.Category, ArrayList<SQLIntegrityConstraintViolationException>>(orderedMapIterator1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(uniquePredicate0);
      OrderedIterator<Iterator<SQLInvalidAuthorizationSpecException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Iterator<SQLInvalidAuthorizationSpecException>>) orderedIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[3];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[1] = locale_Category1;
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OrderedMapIterator<String, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      EmptyListIterator.resettableEmptyListIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", (-3029));
      IteratorUtils.asIterable((Iterator<?>) orderedMapIterator0);
      OrderedMapIterator<Locale.Category, ArrayList<SQLIntegrityConstraintViolationException>> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Locale.Category, ArrayList<SQLIntegrityConstraintViolationException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Locale.Category, ArrayList<SQLIntegrityConstraintViolationException>>(orderedMapIterator1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(uniquePredicate0);
      OrderedIterator<Iterator<SQLInvalidAuthorizationSpecException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<Iterator<SQLInvalidAuthorizationSpecException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Iterator<SQLInvalidAuthorizationSpecException>>) orderedIterator0);
      UniquePredicate.uniquePredicate();
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) nullIsFalsePredicate0);
      IteratorUtils.asIterator((Enumeration<? extends Iterator<SQLInvalidAuthorizationSpecException>>) enumeration0, (Collection<? super Iterator<SQLInvalidAuthorizationSpecException>>) vector0);
      SQLWarning sQLWarning0 = new SQLWarning("", "", (-3029));
      sQLWarning0.printStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ListIterator<Predicate<Object>> listIterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Predicate<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      LoopingIterator<SQLTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLTransientConnectionException>(stack0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLException>) loopingIterator0, (Predicate<? super SQLException>) predicate0);
      ListIterator<SQLDataException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLDataException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) listIterator0, (Iterator<? extends SQLDataException>) listIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) iterator0);
      ResettableListIterator<EnumSet<ComparatorPredicate.Criterion>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.emptyListIterator();
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ArrayList<String> arrayList0 = new ArrayList<String>(set0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) arrayList0);
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      ListIterator<String> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<String>) resettableListIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ListIterator<Stack<SQLTransactionRollbackException>> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.matchesAll((Iterator<Stack<SQLTransactionRollbackException>>) listIterator0, (Predicate<? super Stack<SQLTransactionRollbackException>>) predicate0);
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      SQLDataException sQLDataException0 = new SQLDataException("", "", (Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLDataExceptionArray0, 2721);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      Hashtable<SQLNonTransientConnectionException, BatchUpdateException> hashtable0 = new Hashtable<SQLNonTransientConnectionException, BatchUpdateException>();
      SingletonIterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>> singletonIterator0 = new SingletonIterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>(hashtable0, true);
      IteratorUtils.find((Iterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) singletonIterator0, (Predicate<? super Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) predicate0);
      IteratorUtils.emptyOrderedMapIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("~3e6'}o{FU|'.");
      IteratorUtils.singletonIterator((SQLTransientException) sQLTransactionRollbackException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<Integer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Integer>) orderedIterator0);
      IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) iterator0, (Iterator<? extends Integer>) orderedIterator0);
      ListIterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>> listIterator0 = EmptyListIterator.emptyListIterator();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>("~3e6'}o{FU|'.");
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      IteratorUtils.find((Iterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) listIterator0, (Predicate<? super Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) identityPredicate0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-2939);
      intArray0[1] = 86;
      intArray0[2] = (-1);
      intArray0[3] = 796;
      intArray0[4] = 460;
      intArray0[5] = (-1);
      intArray0[6] = 796;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray0, batchUpdateException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransactionRollbackException0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[1];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 460);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) arrayList0);
      IteratorUtils.getIterator(resettableIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("The map size must be 0 or 1");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("SWm:,z:QSk", "SWm:,z:QSk", sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("", (String) null, sQLNonTransientConnectionException2);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException3;
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      ResettableListIterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.find((Iterator<Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) resettableListIterator0, (Predicate<? super Hashtable<SQLNonTransientConnectionException, BatchUpdateException>>) predicate0);
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) linkedHashSet0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) resettableIterator1);
      ResettableIterator<SQLNonTransientException> resettableIterator2 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator2);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ListIterator<Stack<SQLTransactionRollbackException>> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.matchesAll((Iterator<Stack<SQLTransactionRollbackException>>) listIterator0, (Predicate<? super Stack<SQLTransactionRollbackException>>) predicate0);
      ArrayListIterator<SQLRecoverableException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLRecoverableException>(predicate0, (-309));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) resettableListIterator0, (Predicate<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      String string0 = "ne";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("ne", ")RD");
      Comparator<SQLFeatureNotSupportedException> comparator0 = (Comparator<SQLFeatureNotSupportedException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate(sQLFeatureNotSupportedException0, comparator0);
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 7);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      classArray0[0] = class0;
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      classArray0[1] = class1;
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      classArray0[2] = class2;
      Class<BatchUpdateException> class3 = BatchUpdateException.class;
      classArray0[3] = class3;
      Class<BatchUpdateException> class4 = BatchUpdateException.class;
      classArray0[4] = class4;
      Class<BatchUpdateException> class5 = BatchUpdateException.class;
      classArray0[5] = class5;
      Class<BatchUpdateException> class6 = BatchUpdateException.class;
      classArray0[6] = class6;
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) resettableListIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<IIOMetadataNode, String> hashMap0 = new HashMap<IIOMetadataNode, String>();
      EntrySetMapIterator<IIOMetadataNode, String> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, String>(hashMap0);
      AbstractMapIteratorDecorator<IIOMetadataNode, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, String>(entrySetMapIterator0);
      int int0 = (-421);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) abstractMapIteratorDecorator0, (-421));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 4);
      SQLDataException sQLDataException0 = new SQLDataException("", "delimiter may not be null");
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.singletonIterator(sQLDataException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Properties properties0 = new Properties();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(properties0, defaultEquator0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      predicateArray0[1] = predicate0;
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("delimiter may not be null");
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray1);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, anyPredicate0);
      predicateArray0[2] = (Predicate<Object>) transformedPredicate0;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicateArray0[2]);
      predicateArray0[3] = (Predicate<Object>) notPredicate0;
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) instanceofPredicate0);
      predicateArray0[4] = predicate1;
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      Predicate<Object> predicate2 = InstanceofPredicate.instanceOfPredicate(class1);
      predicateArray0[5] = predicate2;
      Predicate<Object> predicate3 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      predicateArray0[6] = predicate3;
      AllPredicate<SQLDataException> allPredicate0 = new AllPredicate<SQLDataException>(predicateArray0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLDataException>) resettableIterator0, (Predicate<? super SQLDataException>) allPredicate0);
      iteratorArray0[0] = iterator0;
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) iterator0);
      Iterator<SQLDataException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0);
      iteratorArray0[1] = iterator1;
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      iteratorArray0[2] = (Iterator<SQLDataException>) listIterator0;
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0, true);
      iteratorArray0[3] = (Iterator<SQLDataException>) singletonIterator0;
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<HashSet<LinkedHashSet>>) null, 3262L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<DataTruncation>) resettableIterator0, (-205L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 0;
      Hashtable<HashSet<SQLException>, SQLClientInfoException> hashtable0 = new Hashtable<HashSet<SQLException>, SQLClientInfoException>(0);
      EntrySetMapIterator<HashSet<SQLException>, SQLClientInfoException> entrySetMapIterator0 = new EntrySetMapIterator<HashSet<SQLException>, SQLClientInfoException>(hashtable0);
      IteratorUtils.asIterable((Iterator<? extends HashSet<SQLException>>) entrySetMapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) mapIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) listIterator0, 2721);
      SQLWarning sQLWarning0 = new SQLWarning("x40]9d", "x40]9d");
      sQLWarning0.printStackTrace();
      sQLWarning0.setNextWarning((SQLWarning) null);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLWarning0);
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Iterator<SQLTimeoutException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("*:2KN+U|,?mA67FcX", "*:2KN+U|,?mA67FcX");
      sQLSyntaxErrorException0.getSuppressed();
      int int0 = 3503;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLSyntaxErrorException0, 0, 3503);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = 1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "/TX=.EWD`*B@7", 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) listIterator0, 2721);
      IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) list0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[3];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode((String) null);
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = 2056;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) null, 2056);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[0];
      int int0 = 3686;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, 3686, 3686);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, 3686, 3686);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MapIterator<Locale.Category, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 4);
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      enumSetArray0[0] = enumSet0;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[7];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      locale_CategoryArray0[2] = locale_Category0;
      locale_CategoryArray0[3] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[4] = locale_Category1;
      locale_CategoryArray0[5] = locale_Category0;
      locale_CategoryArray0[6] = locale_Category0;
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category0, locale_CategoryArray0);
      enumSetArray0[1] = enumSet1;
      EnumSet<Locale.Category> enumSet2 = EnumSet.noneOf(class0);
      enumSetArray0[2] = enumSet2;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet3 = EnumSet.of(locale_Category2);
      enumSetArray0[3] = enumSet3;
      IteratorUtils.arrayIterator(enumSetArray0);
      Iterator<Closure<Object>> iterator0 = null;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      // Undeclared exception!
      try { 
        AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not contain a null predicate, index 0 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[7];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException(sQLRecoverableException0);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("", "tV{ps5wLFjH)l", sQLRecoverableException0);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("Enumeration must not be null", sQLRecoverableException1);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException(sQLRecoverableException1);
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException("8\"JJlrzfxxH1Apr$3t", "", 0);
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      OrderedMapIterator<String, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      int int0 = (-3029);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", (-3029));
      IteratorUtils.contains((Iterator<String>) resettableListIterator0, (Object) sQLTransientConnectionException0);
      IteratorUtils.asIterable((Iterator<?>) orderedMapIterator0);
      OrderedMapIterator<Locale.Category, ArrayList<SQLIntegrityConstraintViolationException>> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Locale.Category, ArrayList<SQLIntegrityConstraintViolationException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Locale.Category, ArrayList<SQLIntegrityConstraintViolationException>>(orderedMapIterator1);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(nullIsFalsePredicate0, closure0, closure0);
      ifClosure0.execute(closure0);
      IfClosure.ifClosure((Predicate<? super LinkedHashSet<InstanceofPredicate>>) nullIsFalsePredicate0, (Closure<? super LinkedHashSet<InstanceofPredicate>>) ifClosure0);
      IteratorUtils.apply((Iterator<Locale.Category>) abstractOrderedMapIteratorDecorator0, (Closure<? super Locale.Category>) ifClosure0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) closure0, (-788));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[8];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Tv.VbihtCkYlh", "org.apache.commons.collections4.bidimap.DualTreeBidiMap", (-1342));
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("Tv.VbihtCkYlh", (String) null, (-1342));
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException((String) null, sQLNonTransientException0);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("N3pEt/}yK3", sQLInvalidAuthorizationSpecException3);
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException("Wx Z", "!_L[uVl{}V-qh");
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException6;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException7 = new SQLInvalidAuthorizationSpecException("Tv.VbihtCkYlh", sQLInvalidAuthorizationSpecException3);
      sQLInvalidAuthorizationSpecExceptionArray0[7] = sQLInvalidAuthorizationSpecException7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, (-701), 2329);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object[]) null, 1498);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IteratorUtils.size((Iterator<?>) null);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      arrayList0.trimToSize();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super String>>) arrayList0);
      ArrayListIterator<String> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<String>(arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLDataException sQLDataException0 = new SQLDataException("p+z9*aN{D..%", "p+z9*aN{D..%");
      SQLDataException sQLDataException1 = new SQLDataException("p+z9*aN{D..%", (Throwable) null);
      SQLDataException sQLDataException2 = new SQLDataException();
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[5];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.DISPLAY;
      locale_CategoryArray0[4] = locale_Category4;
      IteratorUtils.arrayListIterator(locale_CategoryArray0, 0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[4];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", (Throwable) null);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", "p+z9*aN{D..%", sQLDataException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("");
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      IteratorUtils.size(objectArrayListIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("'kYg-N8Er6}\u0017ALt", "NodeList must not be null");
      assertEquals(2, stringTokenizer0.countTokens());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MapIterator<SQLClientInfoException, SQLTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) arrayList0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) resettableIterator0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mapIterator0;
      objectArray0[1] = (Object) arrayList0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(objectArray0, (-669));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.emptyIterator();
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      LoopingIterator<SQLTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLTransientConnectionException>(stack0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLException>) loopingIterator0, (Predicate<? super SQLException>) predicate0);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) resettableListIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0);
      IteratorUtils.size(resettableIterator0);
      DataTruncation dataTruncation0 = new DataTruncation((-1847), false, false, 0, 12, (Throwable) null);
      // Undeclared exception!
      try { 
        IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends DataTruncation>) null, (Transformer<? super Object, ? extends DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Transformers must not be null
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, BatchUpdateException>(orderedMapIterator0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = EmptyIterator.emptyIterator();
      Iterator<SQLFeatureNotSupportedException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) iterator0, (Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      Iterator<SQLFeatureNotSupportedException> iterator2 = IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator1);
      Predicate<SQLException> predicate0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLException>) iterator2, (Predicate<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[3];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category2;
      int int0 = 0;
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_CategoryArray0, 0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) comparator0, (Iterator<? extends Locale.Category>) resettableListIterator0, (Iterator<? extends Locale.Category>) resettableListIterator0);
      IteratorUtils.size(iterator0);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[2];
      String string0 = "Closure must not be null";
      StringTokenizer stringTokenizer0 = new StringTokenizer("Closure must not be null", "Closure must not be null");
      stringTokenizerArray0[0] = stringTokenizer0;
      // Undeclared exception!
      try { 
        stringTokenizer0.nextToken();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Iterator<EnumSet<Locale.Category>>[] iteratorArray0 = (Iterator<EnumSet<Locale.Category>>[]) Array.newInstance(Iterator.class, 5);
      MapIterator<EnumSet<Locale.Category>, SQLTransactionRollbackException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[0] = (Iterator<EnumSet<Locale.Category>>) mapIterator0;
      Iterator<EnumSet<Locale.Category>> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<EnumSet<Locale.Category>>) mapIterator0);
      iteratorArray0[1] = iterator0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) onePredicate0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", true);
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) singletonIterator0);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      IteratorUtils.toArray((Iterator<? extends StringTokenizer>) iterator0, class0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) predicate0);
      OrderedIterator<Iterator<SQLInvalidAuthorizationSpecException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<Iterator<SQLInvalidAuthorizationSpecException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Iterator<SQLInvalidAuthorizationSpecException>>) orderedIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      IteratorUtils.asIterator((Enumeration<? extends Iterator<SQLInvalidAuthorizationSpecException>>) enumeration0, (Collection<? super Iterator<SQLInvalidAuthorizationSpecException>>) vector0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[5];
      SQLWarning sQLWarning0 = new SQLWarning("K6jPVY1xvW", "p[.X@\"0nInd+VM", (-116));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("AlC4", "AlC4", sQLWarning0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("'-<@vg98<p0~", "The transformer to call must not be null");
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("SWm:,z:QSk");
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("The transformer to call must not be null", "p[.X@\"0nInd+VM", sQLNonTransientConnectionException3);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      SkippingIterator<SQLDataException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLDataException>) objectArrayIterator0, 0L);
      IteratorUtils.get((Iterator<SQLDataException>) skippingIterator0, 0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.IteratorUtils");
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) objectArrayIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) null, (Collection<? super SQLTransientConnectionException>) list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) arrayList0);
      SQLWarning sQLWarning0 = new SQLWarning("BnJG6c}?", "BnJG6c}?");
      sQLWarning0.printStackTrace();
      sQLWarning0.setNextWarning((SQLWarning) null);
      Iterator<?> iterator0 = IteratorUtils.getIterator("BnJG6c}?");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("~3e6'}o{FU|'.");
      IteratorUtils.singletonIterator((SQLTransientException) sQLTransactionRollbackException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      predicateArray0[0] = predicate0;
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      predicateArray0[1] = (Predicate<Object>) nullIsExceptionPredicate0;
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      predicateArray0[2] = predicate1;
      Predicate<Object> predicate2 = NullPredicate.nullPredicate();
      predicateArray0[3] = predicate2;
      Predicate<Object> predicate3 = TruePredicate.truePredicate();
      predicateArray0[4] = predicate3;
      AnyPredicate<SQLException> anyPredicate0 = new AnyPredicate<SQLException>(predicateArray0);
      Predicate<SQLException> predicate4 = OrPredicate.orPredicate((Predicate<? super SQLException>) anyPredicate0, (Predicate<? super SQLException>) predicate2);
      SQLWarning sQLWarning0 = IteratorUtils.find((Iterator<SQLWarning>) null, (Predicate<? super SQLWarning>) predicate4);
      assertNull(sQLWarning0);
  }
}
