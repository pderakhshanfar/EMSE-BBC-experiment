/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 19 03:12:49 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.SortedSet;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[1];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0);
      AllPredicate<SQLTransactionRollbackException> allPredicate0 = new AllPredicate<SQLTransactionRollbackException>((Predicate<? super SQLTransactionRollbackException>[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLTransactionRollbackException>) resettableIterator0, (Predicate<? super SQLTransactionRollbackException>) allPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AllPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Object> class0 = Object.class;
      IteratorUtils.getIterator(class0);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException sQLDataException1 = new SQLDataException("Ni<f,^z", "", sQLDataException0);
      SingletonIterator<SQLNonTransientException> singletonIterator0 = new SingletonIterator<SQLNonTransientException>(sQLDataException1, false);
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 7);
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      classArray0[0] = class1;
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      classArray0[1] = class2;
      Class<BatchUpdateException> class3 = BatchUpdateException.class;
      classArray0[2] = class3;
      Class<BatchUpdateException> class4 = BatchUpdateException.class;
      classArray0[3] = class4;
      Class<BatchUpdateException> class5 = BatchUpdateException.class;
      classArray0[4] = class5;
      Class<BatchUpdateException> class6 = BatchUpdateException.class;
      classArray0[5] = class6;
      Class<BatchUpdateException> class7 = BatchUpdateException.class;
      classArray0[6] = class7;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("Ni<f,^z", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientException>) singletonIterator0, (Transformer<? super SQLNonTransientException, String>) invokerTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Ni<f,^z' on 'class java.sql.SQLDataException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      LinkedHashSet<Properties> linkedHashSet1 = new LinkedHashSet<Properties>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedHashSet<Properties>[] linkedHashSetArray0 = (LinkedHashSet<Properties>[]) Array.newInstance(LinkedHashSet.class, 9);
      int int0 = 4;
      ResettableIterator<LinkedHashSet<Properties>> resettableIterator0 = IteratorUtils.arrayIterator(linkedHashSetArray0, 4);
      LinkedHashSet<Properties> linkedHashSet2 = new LinkedHashSet<Properties>();
      IteratorUtils.getIterator(fileSystemHandling0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) resettableIterator0, (Class<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[6];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[1] = clientInfoStatus1;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[2] = clientInfoStatus2;
      ClientInfoStatus clientInfoStatus3 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[3] = clientInfoStatus3;
      ClientInfoStatus clientInfoStatus4 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[4] = clientInfoStatus4;
      ClientInfoStatus clientInfoStatus5 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[5] = clientInfoStatus5;
      ObjectArrayListIterator<ClientInfoStatus> objectArrayListIterator0 = new ObjectArrayListIterator<ClientInfoStatus>(clientInfoStatusArray0);
      ListIterator<ClientInfoStatus> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<ClientInfoStatus>) objectArrayListIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Transformer<Object, SQLRecoverableException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      predicateArray0[0] = (Predicate<Object>) transformedPredicate0;
      Class<Properties> class0 = Properties.class;
      Predicate<Object> predicate1 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ClientInfoStatus>) listIterator0, (Predicate<? super ClientInfoStatus>) predicate2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<BatchUpdateException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, Properties>(orderedMapIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<String> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super String>>) linkedHashSet0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2169, 0).when(comparator0).compare(anyString() , anyString());
      ComparatorPredicate<String> comparatorPredicate0 = new ComparatorPredicate<String>("P#)f[<:b!E|&\u0004JX", comparator0, comparatorPredicate_Criterion0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      WhileClosure<String> whileClosure0 = new WhileClosure<String>(predicate0, closure0, false);
      IfClosure.ifClosure((Predicate<? super String>) comparatorPredicate0, (Closure<? super String>) closure0, (Closure<? super String>) whileClosure0);
      Closure<String> closure1 = WhileClosure.whileClosure((Predicate<? super String>) comparatorPredicate0, (Closure<? super String>) whileClosure0, false);
      SwitchClosure<String> switchClosure0 = new SwitchClosure<String>(predicateArray0, (Closure<? super String>[]) null, closure1);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("Offset parameter must not be negative.");
      IteratorUtils.apply((Iterator<String>) resettableIterator0, (Closure<? super String>) switchClosure0);
      IteratorUtils.emptyListIterator();
      String string0 = "";
      String string1 = "sRVF@ayjz6%D;v-GY";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(string0, string1);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator1 = IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableIterator1, class0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[9];
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 11;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray0, batchUpdateException0);
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.functors.UniquePredicate", batchUpdateException1);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("Enumeration must not be null", "org.apache.commons.collections4.IteratorUtils");
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("Enumeration must not be null");
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("(uyN ");
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("NodeList must not be null", sQLDataException3);
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("_-SoW<#V%b:5zYm[", (String) null, 11);
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException("?fsg4]#:Fw>n4LF", "(uyN ", sQLDataException3);
      sQLDataExceptionArray0[6] = sQLDataException6;
      SQLDataException sQLDataException7 = new SQLDataException("?fsg4]#:Fw>n4LF", "org.apache.commons.collections4.iterators.BoundedIterator");
      sQLDataExceptionArray0[7] = sQLDataException7;
      SQLDataException sQLDataException8 = new SQLDataException("org.apache.commons.collections4.iterators.BoundedIterator", "_-SoW<#V%b:5zYm[", batchUpdateException0);
      sQLDataExceptionArray0[8] = sQLDataException8;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      TransformerPredicate<SQLException> transformerPredicate0 = new TransformerPredicate<SQLException>((Transformer<? super SQLException, Boolean>) null);
      Iterator<SQLDataException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLDataException>) resettableIterator0, (Predicate<? super SQLDataException>) transformerPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(iterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      String string0 = "";
      SQLException sQLException0 = new SQLException("", "", (-1741));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLException0);
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      Class<SQLTransactionRollbackException>[] classArray0 = (Class<SQLTransactionRollbackException>[]) Array.newInstance(Class.class, 1);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      classArray0[0] = class0;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      Transformer<Object, String> transformer0 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends String>) invokerTransformer0, (Transformer<? super Object, ? extends String>) invokerTransformer0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate1, transformer0, transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) singletonIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) ifTransformer0, "", "Closure must not be null", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLIntegrityConstraintViolationException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("O");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNodeValue();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) iterator0;
      objectArray0[1] = (Object) iIOMetadataNode0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "O";
      objectArray0[4] = (Object) iterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(objectArray0, 2, (-801));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      IteratorUtils.arrayListIterator(objectArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) anyPredicate0;
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicateArray0[0]);
      predicateArray0[1] = (Predicate<Object>) nullIsTruePredicate0;
      Transformer<Object, Boolean>[] transformerArray0 = (Transformer<Object, Boolean>[]) Array.newInstance(Transformer.class, 1);
      Transformer<Object, Boolean>[] transformerArray1 = (Transformer<Object, Boolean>[]) Array.newInstance(Transformer.class, 0);
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 4);
      Class<SQLDataException> class0 = SQLDataException.class;
      classArray0[0] = class0;
      Class<SQLDataException> class1 = SQLDataException.class;
      classArray0[1] = class1;
      Class<SQLDataException> class2 = SQLDataException.class;
      classArray0[2] = class2;
      Class<SQLDataException> class3 = SQLDataException.class;
      classArray0[3] = class3;
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) predicateArray0[0];
      // Undeclared exception!
      try { 
        InvokerTransformer.invokerTransformer("\"VD", (Class<?>[]) classArray0, objectArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter types must match the arguments
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      DataTruncation dataTruncation0 = new DataTruncation(1626, false, false, 1813, (-1784));
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(dataTruncation0);
      IteratorUtils.contains((Iterator<SQLException>) singletonListIterator0, (Object) dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      LinkedHashSet<Properties> linkedHashSet1 = new LinkedHashSet<Properties>();
      LinkedHashSet<Properties> linkedHashSet2 = new LinkedHashSet<Properties>();
      LinkedHashSet<Properties>[] linkedHashSetArray0 = (LinkedHashSet<Properties>[]) Array.newInstance(LinkedHashSet.class, 9);
      ResettableIterator<LinkedHashSet<Properties>> resettableIterator0 = IteratorUtils.arrayIterator(linkedHashSetArray0, 4);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      IteratorUtils.get((Iterator<LinkedHashSet<Properties>>) resettableIterator0, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Locale.LanguageRange[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Properties properties0 = new Properties();
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      ListIterator<SQLDataException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.matchesAll((Iterator<SQLDataException>) listIterator0, (Predicate<? super SQLDataException>) predicate0);
      Properties properties1 = new Properties();
      OrderedMapIterator<BatchUpdateException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, Properties>(orderedMapIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) onePredicate0;
      predicateArray0[5] = predicate0;
      predicateArray0[6] = predicate0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.getIterator(predicate0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[9];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("@ }+p=9_^\"NP*&U", "transformer may not be null", 10);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("@ }+p=9_^\"NP*&U", "transformer may not be null", 10, sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException(sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("", "@ }+p=9_^\"NP*&U", sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException(sQLTransactionRollbackException4);
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException("The predicate collection must not be null", "transformer may not be null", (-1616));
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      SQLTransactionRollbackException sQLTransactionRollbackException7 = new SQLTransactionRollbackException("@ }+p=9_^\"NP*&U", "The predicate collection must not be null", 10, sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException7;
      SQLTransactionRollbackException sQLTransactionRollbackException8 = new SQLTransactionRollbackException("The predicate collection must not be null", "transformer may not be null", 10);
      sQLTransactionRollbackExceptionArray0[8] = sQLTransactionRollbackException8;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0);
      EqualPredicate<SQLTransactionRollbackException> equalPredicate0 = new EqualPredicate<SQLTransactionRollbackException>(sQLTransactionRollbackException2);
      IteratorUtils.matchesAll((Iterator<SQLTransactionRollbackException>) resettableIterator0, (Predicate<? super SQLTransactionRollbackException>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{C`rOy");
      OrderedMapIterator<SQLRecoverableException, Properties> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLRecoverableException, ? extends Properties>) orderedMapIterator0);
      MapIterator<SQLRecoverableException, Properties> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLRecoverableException, Properties>) orderedMapIterator1);
      IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) mapIterator0, 1329);
      IteratorUtils.emptyOrderedMapIterator();
      OrderedIterator<SQLTimeoutException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTimeoutException>) orderedIterator0);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[3];
      SQLWarning sQLWarning0 = new SQLWarning();
      sQLWarningArray0[0] = sQLWarning0;
      DataTruncation dataTruncation0 = new DataTruncation((-1125), false, true, 1329, (-622));
      sQLWarningArray0[1] = (SQLWarning) dataTruncation0;
      SQLWarning sQLWarning1 = new SQLWarning((String) null, "Enumeration must not be null", (-622), sQLWarning0);
      sQLWarningArray0[2] = sQLWarning1;
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLWarningArray0);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLWarningArray0[1], (Equator<SQLException>) defaultEquator0);
      IteratorUtils.matchesAll((Iterator<SQLWarning>) resettableListIterator0, (Predicate<? super SQLWarning>) predicate0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      ListIterator<SQLDataException> listIterator0 = EmptyListIterator.emptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLDataException sQLDataException0 = new SQLDataException("", "", 4304);
      ListIterator<SQLDataException> listIterator1 = IteratorUtils.singletonListIterator(sQLDataException0);
      IteratorUtils.matchesAll((Iterator<SQLDataException>) listIterator1, (Predicate<? super SQLDataException>) uniquePredicate0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      SQLWarning sQLWarning0 = new SQLWarning("SG~$@RrujI:l'Erf", "");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("SG~$@RrujI:l'Erf", "SG~$@RrujI:l'Erf", 3551, sQLWarning0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("SG~$@RrujI:l'Erf", "SG~$@RrujI:l'Erf", sQLTransientConnectionException0);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      ConstantTransformer<SQLTransactionRollbackException, String> constantTransformer0 = new ConstantTransformer<SQLTransactionRollbackException, String>("NodeList must not be null");
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) resettableIterator0, (Transformer<? super SQLTransactionRollbackException, String>) constantTransformer0, "SG~$@RrujI:l'Erf", "u1.d%.fFDD7?bB", "NodeList must not be null");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) iterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((String[]) null, (-599));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Iterator<DataTruncation> iterator0 = EmptyIterator.emptyIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) iterator0, (Iterator<? extends DataTruncation>) iterator0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      Predicate<DataTruncation> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super DataTruncation>) predicate0);
      IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) zippingIterator0, (Predicate<? super DataTruncation>) predicate1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("!js`d(65hU1\")M<", "!js`d(65hU1\")M<");
      IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte)99;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Closure<Object>>) null, (Iterator<? extends Closure<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.getIterator(uniquePredicate0);
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Object object0 = new Object();
      Comparator<DataTruncation> comparator0 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      OrderedMapIterator<SQLSyntaxErrorException, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, SQLTransactionRollbackException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, SQLTransactionRollbackException>(orderedMapIterator0);
      IteratorUtils.size(abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Locale.FilteringMode.values();
      iIOMetadataNode0.getUserObject();
      IteratorUtils.getIterator(locale_FilteringMode0);
      OrderedMapIterator<SQLClientInfoException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLClientInfoException, DataTruncation> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLClientInfoException, DataTruncation>(orderedMapIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) abstractMapIteratorDecorator0);
      Iterator<Locale.FilteringMode>[] iteratorArray0 = (Iterator<Locale.FilteringMode>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyIterator();
      NotNullPredicate.notNullPredicate();
      MapIterator<InstanceofPredicate, SQLInvalidAuthorizationSpecException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends InstanceofPredicate>) mapIterator0, (Predicate<? super InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      EmptyIterator.emptyIterator();
      OrderedMapIterator<BatchUpdateException, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<BatchUpdateException, ? extends Properties>) orderedMapIterator0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Stack<String> stack0 = new Stack<String>();
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) stack0);
      IteratorUtils.apply((Iterator<String>) resettableListIterator0, (Closure<? super String>) closure0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("]^[y>*~(qR)4E/GCHLV", "]^[y>*~(qR)4E/GCHLV");
      IteratorUtils.getIterator(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      EmptyIterator.emptyIterator();
      IteratorUtils.emptyIterator();
      Stack<String> stack0 = new Stack<String>();
      IteratorUtils.loopingListIterator((List<String>) stack0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "9\"B8!cLvE[QnF't08o";
      stringArray0[1] = "org.apache.commons.collections4.FunctorException";
      String string0 = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "Q!t]_};oL";
      stringArray0[5] = "";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) "9\"B8!cLvE[QnF't08o");
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, (Closure<? super Object>) null, true);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<String>) resettableListIterator0, (Closure<? super String>) whileClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.WhileClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      OrderedMapIterator<Properties, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      ExceptionFactory.exceptionFactory();
      IteratorUtils.emptyListIterator();
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 7);
      iteratorArray0[0] = (Iterator<Properties>) orderedMapIterator0;
      iteratorArray0[1] = (Iterator<Properties>) orderedMapIterator0;
      iteratorArray0[2] = (Iterator<Properties>) orderedMapIterator0;
      iteratorArray0[3] = (Iterator<Properties>) orderedMapIterator0;
      iteratorArray0[4] = (Iterator<Properties>) orderedMapIterator0;
      iteratorArray0[5] = (Iterator<Properties>) orderedMapIterator0;
      iteratorArray0[6] = (Iterator<Properties>) orderedMapIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends Properties>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) orderedIterator0, (Iterator<? extends SQLTransactionRollbackException>) orderedIterator0, (Iterator<? extends SQLTransactionRollbackException>) orderedIterator0);
      Transformer<SQLTransactionRollbackException, String> transformer0 = InvokerTransformer.invokerTransformer("");
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) zippingIterator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "", "", "");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<BatchUpdateException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<BatchUpdateException, Properties> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<BatchUpdateException, ? extends Properties>) orderedMapIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) orderedMapIterator1, (Predicate<? super BatchUpdateException>) allPredicate0);
      IteratorUtils.size(orderedMapIterator1);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) allPredicate0);
      IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) allPredicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(listIterator0, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) orderedMapIterator0, (Predicate<? super BatchUpdateException>) allPredicate0);
      IteratorUtils.arrayListIterator((Object[]) predicateArray0, 0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<BatchUpdateException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<BatchUpdateException, ? extends Properties>) orderedMapIterator0);
      ExceptionClosure.exceptionClosure();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Transformer<SQLTransientException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) resettableListIterator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "A=}[G\"gCN=nRDYj*?", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      Properties properties0 = new Properties();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<SQLTransactionRollbackException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) null, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "{l6E2nSe|0x@$(z$x", "{l6E2nSe|0x@$(z$x", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      Properties properties0 = new Properties();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      Transformer<SQLException, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) null, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, (String) null, ";>tr~|Lr", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      stack0.push(iIOMetadataNode0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) stack0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(locale_FilteringMode0, (Equator<Object>) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("/");
      EqualPredicate.equalPredicate(sQLRecoverableException0);
      // Undeclared exception!
      IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<BatchUpdateException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, Properties>(orderedMapIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<String> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super String>>) linkedHashSet0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      ComparatorPredicate<String> comparatorPredicate0 = new ComparatorPredicate<String>("P#)f[<:b!E|&\u0004JX", comparator0, comparatorPredicate_Criterion0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      WhileClosure<String> whileClosure0 = new WhileClosure<String>(predicate0, closure0, false);
      IfClosure.ifClosure((Predicate<? super String>) comparatorPredicate0, (Closure<? super String>) closure0, (Closure<? super String>) whileClosure0);
      Closure<String> closure1 = WhileClosure.whileClosure((Predicate<? super String>) comparatorPredicate0, (Closure<? super String>) whileClosure0, false);
      SwitchClosure<String> switchClosure0 = new SwitchClosure<String>(predicateArray0, (Closure<? super String>[]) null, closure1);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("Offset parameter must not be negative.");
      IteratorUtils.apply((Iterator<String>) resettableIterator0, (Closure<? super String>) switchClosure0);
      IteratorUtils.emptyListIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "sRVF@ayjz6%D;v-GY");
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator1 = IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableIterator1, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "sRVF@ayjz6%D;v-GY", (-1053), (-1053));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<BatchUpdateException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<BatchUpdateException, ? extends Properties>) orderedMapIterator0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Stack<String> stack0 = new Stack<String>();
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) stack0);
      IteratorUtils.apply((Iterator<String>) resettableListIterator0, (Closure<? super String>) closure0);
      IteratorUtils.getIterator(closure0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0);
      SingletonListIterator<EnumSet<Locale.FilteringMode>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.FilteringMode>>(enumSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<EnumSet<Locale.FilteringMode>>) singletonListIterator0, (Closure<? super EnumSet<Locale.FilteringMode>>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<BatchUpdateException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, Properties>(orderedMapIterator0);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<SQLTransactionRollbackException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) resettableListIterator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "{l6E2nSe|0x@$(z$x", "A=}[G\"gCN=nRDYj*?", "Akju<Mpwu1*wb");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      Properties properties0 = new Properties();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      String string0 = "{l6\\E2nSe|0x@$(z$x";
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 9);
      iteratorArray0[0] = null;
      iteratorArray0[1] = null;
      iteratorArray0[2] = null;
      iteratorArray0[3] = null;
      iteratorArray0[4] = null;
      iteratorArray0[5] = null;
      iteratorArray0[6] = null;
      iteratorArray0[7] = null;
      iteratorArray0[8] = null;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      LinkedHashSet<Properties> linkedHashSet1 = new LinkedHashSet<Properties>();
      LinkedHashSet<Properties> linkedHashSet2 = new LinkedHashSet<Properties>();
      LinkedHashSet<Properties> linkedHashSet3 = new LinkedHashSet<Properties>();
      LinkedHashSet<Properties> linkedHashSet4 = new LinkedHashSet<Properties>();
      LinkedHashSet<Properties>[] linkedHashSetArray0 = (LinkedHashSet<Properties>[]) Array.newInstance(LinkedHashSet.class, 9);
      linkedHashSetArray0[0] = linkedHashSet1;
      linkedHashSetArray0[1] = linkedHashSet3;
      linkedHashSetArray0[3] = linkedHashSet0;
      linkedHashSetArray0[4] = linkedHashSet4;
      ResettableIterator<LinkedHashSet<Properties>> resettableIterator0 = IteratorUtils.arrayIterator(linkedHashSetArray0, 4);
      IteratorUtils.get((Iterator<LinkedHashSet<Properties>>) resettableIterator0, 4);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) linkedList0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Properties properties0 = new Properties();
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      linkedList0.add((SQLIntegrityConstraintViolationException) null);
      ListIterator<SQLDataException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.matchesAll((Iterator<SQLDataException>) listIterator0, (Predicate<? super SQLDataException>) predicate0);
      IteratorUtils.singletonIterator(properties0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) resettableListIterator0, class0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      Properties properties0 = new Properties();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("LL>c3F=R3]&", defaultEquator0);
      IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) equalPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(properties0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Properties properties0 = new Properties();
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      ListIterator<SQLDataException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.matchesAll((Iterator<SQLDataException>) listIterator0, (Predicate<? super SQLDataException>) predicate0);
      Properties properties1 = new Properties();
      IteratorUtils.singletonIterator(properties1);
      OrderedMapIterator<SQLFeatureNotSupportedException, Locale.FilteringMode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0, class0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ReverseListIterator<String> reverseListIterator0 = new ReverseListIterator<String>(arrayList0);
      Predicate<String>[] predicateArray0 = (Predicate<String>[]) Array.newInstance(Predicate.class, 6);
      DefaultEquator<String> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<String> equalPredicate0 = new EqualPredicate<String>("", defaultEquator0);
      predicateArray0[0] = (Predicate<String>) equalPredicate0;
      int int0 = 4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((LinkedHashSet<Properties>[]) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      Properties properties0 = new Properties();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<SQLTransactionRollbackException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) null, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "[x*:o<vIJ)FWCiMZ|-1", "{l6E2nSe|0x@$(z$x", "{l6E2nSe|0x@$(z$x");
      MapIterator<SQLInvalidAuthorizationSpecException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration1, (Collection<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Closure<SQLNonTransientException> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLIntegrityConstraintViolationException>) null, (Closure<? super SQLIntegrityConstraintViolationException>) closure0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<BatchUpdateException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<BatchUpdateException, ? extends Properties>) orderedMapIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Stack<String> stack0 = new Stack<String>();
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<String>) resettableListIterator0, (Closure<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Properties properties0 = new Properties();
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      ListIterator<SQLDataException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.matchesAll((Iterator<SQLDataException>) listIterator0, (Predicate<? super SQLDataException>) predicate0);
      Properties properties1 = new Properties();
      IteratorUtils.singletonIterator(properties1);
      OrderedMapIterator<SQLFeatureNotSupportedException, Locale.FilteringMode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0, class0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ReverseListIterator<String> reverseListIterator0 = new ReverseListIterator<String>(arrayList0);
      Predicate<String>[] predicateArray0 = (Predicate<String>[]) Array.newInstance(Predicate.class, 6);
      DefaultEquator<String> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<String> equalPredicate0 = new EqualPredicate<String>("", defaultEquator0);
      predicateArray0[0] = (Predicate<String>) equalPredicate0;
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray1[0] = predicate0;
      predicateArray1[1] = predicate0;
      Predicate<String> predicate1 = NonePredicate.nonePredicate((Predicate<? super String>[]) predicateArray1);
      predicateArray0[1] = predicate1;
      Predicate<String> predicate2 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super String>) predicate1);
      predicateArray0[2] = predicate2;
      OnePredicate<String> onePredicate0 = new OnePredicate<String>(predicateArray0);
      predicateArray0[3] = (Predicate<String>) onePredicate0;
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<String> predicate3 = OnePredicate.onePredicate((Collection<? extends Predicate<? super String>>) linkedHashSet0);
      predicateArray0[4] = predicate3;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<String> comparatorPredicate0 = new ComparatorPredicate<String>("", comparator0, comparatorPredicate_Criterion0);
      predicateArray0[5] = (Predicate<String>) comparatorPredicate0;
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Closure<String> closure1 = IfClosure.ifClosure((Predicate<? super String>) predicateArray0[3], (Closure<? super String>) closure0, (Closure<? super String>) closure0);
      Closure<String> closure2 = WhileClosure.whileClosure((Predicate<? super String>) predicate0, (Closure<? super String>) closure1, true);
      SwitchClosure<String> switchClosure0 = new SwitchClosure<String>(predicateArray0, (Closure<? super String>[]) null, closure2);
      IteratorUtils.apply((Iterator<String>) reverseListIterator0, (Closure<? super String>) switchClosure0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      Properties properties0 = new Properties();
      NonePredicate<String> nonePredicate0 = new NonePredicate<String>((Predicate<? super String>[]) null);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) linkedList0);
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) andPredicate0, (Closure<? super Object>) closure0, false);
      IfClosure.ifClosure((Predicate<? super String>) nonePredicate0, (Closure<? super String>) closure1, (Closure<? super String>) closure0);
      Closure<String> closure2 = WhileClosure.whileClosure((Predicate<? super String>) andPredicate0, (Closure<? super String>) closure0, false);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      closureArray0[0] = closure0;
      SwitchClosure<String> switchClosure0 = new SwitchClosure<String>((Predicate<? super String>[]) null, closureArray0, closure2);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "The map size must be 1";
      stringArray0[1] = "13blV";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "N8_$M,OL##M*W@2";
      stringArray0[5] = "B]S]";
      stringArray0[6] = "N8_$M,OL##M*W@2";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0, 1, 1);
      IteratorUtils.apply((Iterator<String>) resettableIterator0, (Closure<? super String>) closure2);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LinkedHashSet<Properties>[] linkedHashSetArray0 = (LinkedHashSet<Properties>[]) Array.newInstance(LinkedHashSet.class, 9);
      int int0 = 4;
      ResettableIterator<LinkedHashSet<Properties>> resettableIterator0 = IteratorUtils.arrayIterator(linkedHashSetArray0, 4);
      IteratorUtils.get((Iterator<LinkedHashSet<Properties>>) resettableIterator0, 4);
      Iterator<ClientInfoStatus>[] iteratorArray0 = (Iterator<ClientInfoStatus>[]) Array.newInstance(Iterator.class, 9);
      Comparator<ClientInfoStatus> comparator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super ClientInfoStatus>) null, (Iterator<? extends ClientInfoStatus>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      IteratorUtils.loopingListIterator((List<IIOMetadataNode>) stack0);
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      LinkedHashSet<Properties> linkedHashSet1 = new LinkedHashSet<Properties>();
      LinkedHashSet<Properties> linkedHashSet2 = new LinkedHashSet<Properties>();
      LinkedHashSet<Properties> linkedHashSet3 = new LinkedHashSet<Properties>();
      LinkedHashSet<Properties> linkedHashSet4 = new LinkedHashSet<Properties>();
      LinkedHashSet<Properties>[] linkedHashSetArray0 = (LinkedHashSet<Properties>[]) Array.newInstance(LinkedHashSet.class, 8);
      LinkedHashSet<Properties> linkedHashSet5 = new LinkedHashSet<Properties>();
      linkedHashSetArray0[0] = linkedHashSet5;
      linkedHashSetArray0[1] = linkedHashSet4;
      linkedHashSetArray0[2] = linkedHashSet1;
      linkedHashSetArray0[3] = linkedHashSet1;
      linkedHashSetArray0[4] = linkedHashSet2;
      linkedHashSetArray0[5] = linkedHashSet2;
      linkedHashSetArray0[6] = linkedHashSet3;
      linkedHashSetArray0[7] = linkedHashSet4;
      IteratorUtils.arrayIterator(linkedHashSetArray0, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<LinkedHashSet<Properties>>) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      Equator<Object> equator0 = null;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "l~:kXHCC36V_b+B?", 2);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("Can't do that after next or hasNext has been called.", "NodeList must not be null", sQLRecoverableException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("}`1ed", "org.apache.commons.collections4.functors.IfClosure", 2, sQLRecoverableException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, (Equator<Object>) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.EqualPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 4);
      int int0 = 12;
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[1] = (Iterator<SQLTimeoutException>) orderedIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) iteratorArray0[0], 859);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) stack0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("End index must not be greater than the array length", ",v?|5=G7Xla:nt%?h", 16);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("p|S0XZV4F", "5$UuZbIw7 5iKR&Ch=Q", sQLRecoverableException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("5$UuZbIw7 5iKR&Ch=Q", "\"a^ms~", 2, sQLRecoverableException1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("@3#v52");
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iIOMetadataNode0, (Equator<Object>) null);
      IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) equalPredicate0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Integer integer0 = new Integer(2);
      IteratorUtils.getIterator(integer0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      OrderedMapIterator<Properties, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<BatchUpdateException, Properties> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<BatchUpdateException, ? extends Properties>) orderedMapIterator1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("!xS'/{me*(");
      IteratorUtils.getIterator(orderedMapIterator0);
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(82);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(7);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(61);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(61);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(125);
      integerArray0[4] = integer4;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      IteratorUtils.loopingListIterator((List<IIOMetadataNode>) stack0);
      IteratorUtils.getIterator((Object) null);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<SQLTransactionRollbackException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) null, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "[x*:o<vIJ)FWCiMZ|-1", "{l6E2nSe|0x@$(z$x", "{l6E2nSe|0x@$(z$x");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<BatchUpdateException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<BatchUpdateException, ? extends Properties>) orderedMapIterator0);
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      LinkedHashSet<Properties> linkedHashSet1 = new LinkedHashSet<Properties>();
      LinkedHashSet<Properties> linkedHashSet2 = new LinkedHashSet<Properties>();
      LinkedHashSet<Properties> linkedHashSet3 = new LinkedHashSet<Properties>();
      LinkedHashSet<Properties> linkedHashSet4 = new LinkedHashSet<Properties>();
      LinkedHashSet<Properties> linkedHashSet5 = new LinkedHashSet<Properties>();
      LinkedHashSet<Properties> linkedHashSet6 = new LinkedHashSet<Properties>();
      LinkedHashSet<Properties> linkedHashSet7 = new LinkedHashSet<Properties>();
      LinkedHashSet<Properties>[] linkedHashSetArray0 = (LinkedHashSet<Properties>[]) Array.newInstance(LinkedHashSet.class, 9);
      linkedHashSetArray0[0] = linkedHashSet3;
      linkedHashSetArray0[1] = linkedHashSet5;
      linkedHashSetArray0[2] = linkedHashSet5;
      linkedHashSetArray0[3] = linkedHashSet6;
      linkedHashSetArray0[4] = linkedHashSet7;
      linkedHashSetArray0[5] = linkedHashSet0;
      linkedHashSetArray0[6] = linkedHashSet7;
      linkedHashSetArray0[7] = linkedHashSet6;
      linkedHashSetArray0[8] = linkedHashSet7;
      ResettableIterator<LinkedHashSet<Properties>> resettableIterator0 = IteratorUtils.arrayIterator(linkedHashSetArray0, 4);
      IteratorUtils.get((Iterator<LinkedHashSet<Properties>>) resettableIterator0, 4);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      OrderedIterator<Properties> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Properties>) orderedIterator0, (Transformer<? super Properties, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) null, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<BatchUpdateException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<BatchUpdateException, ? extends Properties>) orderedMapIterator0);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) resettableListIterator0, (Transformer<? super SQLTransactionRollbackException, String>) null, "{l6E2nSe|0x@$(z$x", "{l6E2nSe|0x@$(z$x", "{l6E2nSe|0x@$(z$x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) stack0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(stack0, (Equator<Object>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) stack0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "x?H@8?ME9s:)ca;sV", 2);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("p|S0XZV4F", "}`1ed", sQLRecoverableException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "org.apache.commons.collections4.functors.IfClosure", 2, sQLRecoverableException1);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTransactionRollbackException0, (Equator<Object>) null);
      IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) equalPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.singletonIterator(enumSet0);
      IteratorUtils.boundedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0, 0L);
      IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      IteratorUtils.toList((Iterator<?>) resettableIterator0);
      IteratorUtils.emptyMapIterator();
      LinkedHashSet<Properties>[] linkedHashSetArray0 = (LinkedHashSet<Properties>[]) Array.newInstance(LinkedHashSet.class, 9);
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      linkedHashSetArray0[0] = linkedHashSet0;
      LinkedHashSet<Properties> linkedHashSet1 = new LinkedHashSet<Properties>();
      linkedHashSetArray0[1] = linkedHashSet1;
      LinkedHashSet<Properties> linkedHashSet2 = new LinkedHashSet<Properties>();
      linkedHashSetArray0[2] = linkedHashSet2;
      LinkedHashSet<Properties> linkedHashSet3 = new LinkedHashSet<Properties>();
      linkedHashSetArray0[3] = linkedHashSet3;
      LinkedHashSet<Properties> linkedHashSet4 = new LinkedHashSet<Properties>();
      linkedHashSetArray0[4] = linkedHashSet4;
      LinkedHashSet<Properties> linkedHashSet5 = new LinkedHashSet<Properties>();
      linkedHashSetArray0[5] = linkedHashSet5;
      LinkedHashSet<Properties> linkedHashSet6 = new LinkedHashSet<Properties>();
      linkedHashSetArray0[6] = linkedHashSet6;
      LinkedHashSet<Properties> linkedHashSet7 = new LinkedHashSet<Properties>();
      linkedHashSetArray0[7] = linkedHashSet7;
      LinkedHashSet<Properties> linkedHashSet8 = new LinkedHashSet<Properties>();
      linkedHashSetArray0[8] = linkedHashSet8;
      ResettableIterator<LinkedHashSet<Properties>> resettableIterator1 = IteratorUtils.arrayIterator(linkedHashSetArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<LinkedHashSet<Properties>>) resettableIterator1, 100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 91
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) linkedList0);
      UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>((SortedSet<? extends InstanceofPredicate>) treeSet0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform(treeSet0);
      IteratorUtils.objectGraphIterator(boolean0, (Transformer<? super Boolean, ? extends Boolean>) predicateTransformer0);
      Properties properties0 = new Properties();
      OrderedMapIterator<SQLTimeoutException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, SQLNonTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLNonTransientConnectionException>(orderedMapIterator1);
      MapIterator<SQLTimeoutException, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLTimeoutException, SQLNonTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, SQLNonTransientConnectionException>(mapIterator0);
      ListIteratorWrapper<SQLTimeoutException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTimeoutException>(abstractOrderedMapIteratorDecorator0);
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>(orderedMapIterator1);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      SkippingIterator<Object> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Object>) singletonListIterator0, 0L);
      IteratorUtils.find((Iterator<Object>) skippingIterator0, (Predicate<? super Object>) predicate0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLNonTransientException[]) null, 8, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) linkedHashSet0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) linkedHashSet0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      predicateArray0[0] = predicate0;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      predicateArray0[1] = (Predicate<Object>) notPredicate0;
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Predicate<Object> predicate1 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      predicateArray0[2] = predicate1;
      AllPredicate<Boolean> allPredicate0 = new AllPredicate<Boolean>(predicateArray0);
      AndPredicate<Boolean> andPredicate0 = new AndPredicate<Boolean>(allPredicate0, predicate0);
      IteratorUtils.matchesAll((Iterator<Boolean>) null, (Predicate<? super Boolean>) andPredicate0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fW^");
      Transformer<SQLTransactionRollbackException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) resettableListIterator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "", "%eD.H\"0XLo[ZHy<i", "");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("%eD.H\"0XLo[ZHy<i", "", (-2776));
      IteratorUtils.singletonListIterator(sQLNonTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("7'o[op-+EAB", sQLNonTransientConnectionException0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLTimeoutException0);
      IteratorUtils.matchesAll((Iterator<BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientConnectionException>();
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.singletonIterator((EnumSet<Locale.FilteringMode>) null);
      Enumeration<EnumSet<Locale.FilteringMode>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends EnumSet<Locale.FilteringMode>>) enumeration0, (Collection<? super EnumSet<Locale.FilteringMode>>) list0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 7, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.singletonIterator(sQLClientInfoException0);
      IteratorUtils.isEmpty(resettableIterator0);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet.allOf(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) linkedList0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      ListIterator<SQLDataException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.matchesAll((Iterator<SQLDataException>) listIterator0, (Predicate<? super SQLDataException>) predicate0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) listIterator0;
      OrderedIterator<Object> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.find((Iterator<Object>) orderedIterator0, (Predicate<? super Object>) predicate0);
      objectArray0[3] = null;
      objectArray0[4] = (Object) resettableListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(objectArray0, 2, (-592));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      Iterator<SQLNonTransientException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      Properties properties0 = new Properties();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(",", "org.apache.commons.collections4.functors.CatchAndRethrowClosure");
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      IteratorUtils.size(iterator1);
      IteratorUtils.toArray((Iterator<?>) singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0, 2363L, 2363L);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      Properties properties0 = new Properties();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, (Equator<Object>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-1718), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      Properties properties0 = new Properties();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.item(1);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      Iterator<String> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends String>) singletonListIterator0, (Iterator<? extends String>) singletonListIterator0);
      IteratorUtils.isEmpty(iterator1);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      AndPredicate<SQLException> andPredicate0 = new AndPredicate<SQLException>(predicate0, predicate0);
      Predicate<SQLClientInfoException> predicate1 = AndPredicate.andPredicate((Predicate<? super SQLClientInfoException>) andPredicate0, (Predicate<? super SQLClientInfoException>) andPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) predicate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 4);
      Object object0 = null;
      int int0 = 12;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ArrayDeque<InstanceofPredicate>[] arrayDequeArray0 = (ArrayDeque<InstanceofPredicate>[]) Array.newInstance(ArrayDeque.class, 1);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      arrayDeque0.clone();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      arrayDeque0.removeFirstOccurrence(sQLTimeoutException0);
      arrayDequeArray0[0] = arrayDeque0;
      IteratorUtils.arrayListIterator(arrayDequeArray0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("l<}(", sQLTimeoutException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("l<}(", "l<}(");
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("l<}(");
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("*!", "{\"");
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("", "Wi(:9kA`@0S7z2");
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException("Wi(:9kA`@0S7z2");
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException("Wi(:9kA`@0S7z2", "NMTW2", sQLRecoverableException0);
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      SQLRecoverableException sQLRecoverableException7 = new SQLRecoverableException("2*Mc'Byi", "Wi(:9kA`@0S7z2");
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException7;
      ObjectArrayIterator<SQLRecoverableException> objectArrayIterator0 = new ObjectArrayIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLRecoverableException>) objectArrayIterator0);
      OrderedMapIterator<InstanceofPredicate, SQLRecoverableException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<InstanceofPredicate, SQLRecoverableException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends InstanceofPredicate, ? extends SQLRecoverableException>) orderedMapIterator0);
      AbstractMapIteratorDecorator<InstanceofPredicate, SQLRecoverableException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<InstanceofPredicate, SQLRecoverableException>(mapIterator0);
      ZippingIterator<InstanceofPredicate> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>) abstractMapIteratorDecorator0, (Iterator<? extends InstanceofPredicate>) mapIterator0, (Iterator<? extends InstanceofPredicate>) abstractMapIteratorDecorator0);
      IteratorUtils.toListIterator((Iterator<? extends InstanceofPredicate>) zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MapIterator<String, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IteratorUtils.singletonIterator(sQLClientInfoException0);
      Iterator<String> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends String>) mapIterator0, (Iterator<? extends String>) mapIterator0);
      IteratorUtils.isEmpty(iterator0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLClientInfoException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLClientInfoException0);
      Object object0 = new Object();
      IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 1);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.emptyIterator();
      iteratorArray0[0] = (Iterator<InstanceofPredicate>) resettableIterator0;
      Iterator<InstanceofPredicate> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) iterator1);
      LoopingListIterator<InstanceofPredicate> loopingListIterator0 = new LoopingListIterator<InstanceofPredicate>(list0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      IteratorUtils.filteredListIterator((ListIterator<? extends Predicate<Object>>) loopingListIterator0, (Predicate<? super Predicate<Object>>) equalPredicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      Properties properties0 = new Properties();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.item(1);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      UnaryOperator<IIOMetadataNode> unaryOperator0 = UnaryOperator.identity();
      stack0.replaceAll(unaryOperator0);
      OrderedMapIterator<SQLTimeoutException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLNonTransientConnectionException>(orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLTimeoutException, SQLNonTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, SQLNonTransientConnectionException>(orderedMapIterator0);
      ListIteratorWrapper<SQLTimeoutException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTimeoutException>(abstractMapIteratorDecorator0);
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>(stack0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 646);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLRecoverableException0, comparator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Properties>) null, (Predicate<? super Properties>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) linkedList0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      Properties properties0 = new Properties();
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Hashtable<InstanceofPredicate, Transformer<Object, SQLFeatureNotSupportedException>> hashtable0 = new Hashtable<InstanceofPredicate, Transformer<Object, SQLFeatureNotSupportedException>>();
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends SQLFeatureNotSupportedException>>) hashtable0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IfTransformer<Object, SQLFeatureNotSupportedException> ifTransformer0 = new IfTransformer<Object, SQLFeatureNotSupportedException>(instanceofPredicate0, transformer0, transformer0);
      IteratorUtils.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) ifTransformer0;
      objectArray0[1] = (Object) instanceofPredicate0;
      objectArray0[2] = (Object) hashtable0;
      objectArray0[3] = (Object) "";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", (-333));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("33Z", "");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(objectArray0[3], defaultEquator0);
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      BoundedIterator<IIOMetadataNode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) iterator0, 5958L);
      IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) boundedIterator0, (Predicate<? super IIOMetadataNode>) instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      EmptyIterator.emptyIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIteratorWrapper<String> listIteratorWrapper0 = new ListIteratorWrapper<String>(listIterator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Iterator<String> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<String>) listIteratorWrapper0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String> iterator1 = IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) listIterator0, (Iterator<? extends String>) iterator0);
      ListIteratorWrapper<String> listIteratorWrapper1 = new ListIteratorWrapper<String>(iterator1);
      try { 
        listIteratorWrapper1.set((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ListIteratorWrapper does not support optional operations of ListIterator.
         //
         verifyException("org.apache.commons.collections4.iterators.ListIteratorWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<BatchUpdateException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<BatchUpdateException, ? extends Properties>) orderedMapIterator0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      SQLTransientException sQLTransientException0 = new SQLTransientException("rxMp1xnb@@Fgq;l");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("oS?Burjk]T", (String) null, sQLTransientException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 1, 1);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) resettableListIterator0);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(vector0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      DataTruncation dataTruncation0 = new DataTruncation(1, false, true, 429, 1);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1, true, false, 100, 429, sQLNonTransientConnectionException0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(128, false, false, 3468, 100, dataTruncation0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(887, true, true, (-1), 128, sQLNonTransientConnectionException0);
      dataTruncationArray0[3] = dataTruncation3;
      ResettableListIterator<DataTruncation> resettableListIterator1 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) resettableListIterator1);
      IteratorUtils.toList((Iterator<? extends DataTruncation>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<BatchUpdateException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<BatchUpdateException, ? extends Properties>) orderedMapIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Transformer<Object, EnumSet<Locale.FilteringMode>> transformer0 = InvokerTransformer.invokerTransformer("Collection must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLWarning>) null, (Transformer<? super SQLWarning, ? extends EnumSet<Locale.FilteringMode>>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Transformer<SQLTransactionRollbackException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) null, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "", "", "");
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", (Map<String, ClientInfoStatus>) null, batchUpdateException0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("]", hashMap0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLDataException sQLDataException0 = new SQLDataException("iiV'GwhXY8x", sQLClientInfoException2);
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("", "", 7, hashMap0, sQLDataException0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException(hashtable0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("iiV'GwhXY8x", "]", hashtable0);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("", "iiV'GwhXY8x", (-433), hashMap0, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException7;
      IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      Transformer<SQLException, SQLIntegrityConstraintViolationException> transformer1 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTransactionRollbackException>) null, (Transformer<? super SQLTransactionRollbackException, ? extends SQLIntegrityConstraintViolationException>) transformer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientConnectionException>();
      int int0 = 13;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Uh)I(c%Z", "Can extract singleton only when collection size == 1", 13);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Uh)I(c%Z", sQLTransactionRollbackException0);
      linkedHashSet0.add(sQLNonTransientConnectionException0);
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) linkedHashSet0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientConnectionException>();
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>((Predicate<? super Object>[]) null);
      NullIsExceptionPredicate<IIOMetadataNode> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<IIOMetadataNode>(nonePredicate0);
      IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) nullIsExceptionPredicate0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Transformer<Object, SQLTimeoutException> transformer0 = ConstantTransformer.nullTransformer();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer0);
      Hashtable<InstanceofPredicate, Transformer<Object, SQLFeatureNotSupportedException>> hashtable0 = new Hashtable<InstanceofPredicate, Transformer<Object, SQLFeatureNotSupportedException>>();
      Transformer<Object, SQLFeatureNotSupportedException> transformer1 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends SQLFeatureNotSupportedException>>) hashtable0);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IfTransformer<Object, SQLFeatureNotSupportedException> ifTransformer0 = new IfTransformer<Object, SQLFeatureNotSupportedException>(instanceofPredicate0, transformer1, transformer1);
      IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) iterator0, (Transformer<? super SQLTimeoutException, ? extends SQLFeatureNotSupportedException>) ifTransformer0);
      IteratorUtils.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.unmodifiableListIterator(listIterator0);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(vector0);
      IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) loopingListIterator0);
      IteratorUtils.toList((Iterator<? extends DataTruncation>) loopingListIterator0);
      ListIterator<TreeSet<SQLRecoverableException>> listIterator1 = IteratorUtils.singletonListIterator((TreeSet<SQLRecoverableException>) null);
      IteratorUtils.contains((Iterator<TreeSet<SQLRecoverableException>>) listIterator1, (Object) class0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.item(1600);
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 7);
      Class<SQLException> class0 = SQLException.class;
      classArray0[0] = class0;
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>("~_d2`O6(p!;r", classArray0, predicateArray0);
      Predicate<Object> predicate1 = FalsePredicate.falsePredicate();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(invokerTransformer0, predicate1);
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>((SQLWarning) null, true);
      IteratorUtils.matchesAny((Iterator<SQLWarning>) singletonIterator0, (Predicate<? super SQLWarning>) predicate0);
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) linkedList0);
      IteratorUtils.find((Iterator<SQLTimeoutException>) resettableIterator0, (Predicate<? super SQLTimeoutException>) predicate1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("2OlJ c\u0001P");
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("2OlJ c\u0001P", (String) null, 1600, (Throwable) null);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException((String) null, sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException2;
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 1600, 2608);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MapIterator<String, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IteratorUtils.singletonIterator(sQLClientInfoException0);
      Iterator<String> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends String>) mapIterator0, (Iterator<? extends String>) mapIterator0);
      IteratorUtils.isEmpty(iterator0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLClientInfoException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLClientInfoException0);
      Object object0 = new Object();
      Class<InstanceofPredicate>[] classArray0 = (Class<InstanceofPredicate>[]) Array.newInstance(Class.class, 4);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      classArray0[0] = class0;
      Class<InstanceofPredicate> class1 = InstanceofPredicate.class;
      classArray0[1] = class1;
      Class<InstanceofPredicate> class2 = InstanceofPredicate.class;
      classArray0[2] = class2;
      Class<InstanceofPredicate> class3 = InstanceofPredicate.class;
      classArray0[3] = class3;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = object0;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      predicateArray0[0] = predicate1;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      Predicate<Object> predicate2 = AndPredicate.andPredicate((Predicate<? super Object>) anyPredicate0, (Predicate<? super Object>) predicate1);
      IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) predicate2);
      objectArray0[2] = null;
      objectArray0[3] = (Object) class3;
      objectArray0[4] = (Object) sQLTransientException0;
      // Undeclared exception!
      try { 
        InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter types must match the arguments
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OrderedMapIterator<Properties, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<BatchUpdateException, Properties> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<BatchUpdateException, Properties> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<BatchUpdateException, ? extends Properties>) orderedMapIterator1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) orderedMapIterator2, (Predicate<? super BatchUpdateException>) allPredicate0);
      IteratorUtils.toString((Iterator<Properties>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.item(1600);
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 7);
      Class<SQLException> class0 = SQLException.class;
      classArray0[0] = class0;
      Class<SQLException> class1 = SQLException.class;
      classArray0[1] = class1;
      Class<SQLException> class2 = SQLException.class;
      classArray0[2] = class2;
      classArray0[3] = class2;
      Class<SQLException> class3 = SQLException.class;
      classArray0[4] = class3;
      Class<SQLException> class4 = SQLException.class;
      classArray0[5] = class4;
      Class<SQLException> class5 = SQLException.class;
      classArray0[6] = class5;
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>("2OlJ c\u0001P", classArray0, predicateArray0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(invokerTransformer0, predicate0);
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>((SQLWarning) null, true);
      IteratorUtils.matchesAny((Iterator<SQLWarning>) singletonIterator0, (Predicate<? super SQLWarning>) transformedPredicate0);
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) linkedList0);
      IteratorUtils.find((Iterator<SQLTimeoutException>) resettableIterator0, (Predicate<? super SQLTimeoutException>) transformedPredicate0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException((String) null, "@", 1600, sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 2608, 1600);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      EmptyIterator.emptyIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      sQLNonTransientConnectionException0.setNextException(sQLClientInfoException0);
      DataTruncation dataTruncation0 = new DataTruncation(1, false, false, 1297, 3876, sQLNonTransientConnectionException0);
      arrayList0.add(dataTruncation0);
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(arrayList0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) loopingListIterator0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends DataTruncation>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      IteratorUtils.objectGraphIterator((Boolean) null, (Transformer<? super Boolean, ? extends Boolean>) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      Transformer<Object, SQLException> transformer0 = InvokerTransformer.invokerTransformer("Enumeration must not be null");
      IteratorUtils.objectGraphIterator((Object) sQLInvalidAuthorizationSpecException0, (Transformer<? super Object, ?>) transformer0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLInvalidAuthorizationSpecException0);
      Locale.forLanguageTag("|pT%(3p>A( X*+");
      Object object0 = new Object();
      IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      Properties properties0 = new Properties();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(arrayList0);
      IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) loopingListIterator0);
      IteratorUtils.toList((Iterator<? extends DataTruncation>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      IteratorUtils.objectGraphIterator((Boolean) null, (Transformer<? super Boolean, ? extends Boolean>) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Transformer<Object, SQLException> transformer0 = InvokerTransformer.invokerTransformer("Enumeration must not be null");
      IteratorUtils.objectGraphIterator((Object) sQLInvalidAuthorizationSpecException0, (Transformer<? super Object, ?>) transformer0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLInvalidAuthorizationSpecException0);
      Locale.forLanguageTag("|pT%(3p>A( X*+");
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIteratorWrapper<String> listIteratorWrapper0 = new ListIteratorWrapper<String>(listIterator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Iterator<String> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<String>) listIteratorWrapper0);
      IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) iterator0, (Iterator<? extends String>) iterator0);
      // Undeclared exception!
      try { 
        listIteratorWrapper0.set((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) orderedIterator0, (Iterator<? extends SQLTransactionRollbackException>) orderedIterator0, (Iterator<? extends SQLTransactionRollbackException>) orderedIterator0);
      ConstantTransformer<SQLTransactionRollbackException, String> constantTransformer0 = new ConstantTransformer<SQLTransactionRollbackException, String>("");
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 9);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      classArray0[2] = class2;
      Class<SQLClientInfoException> class3 = SQLClientInfoException.class;
      classArray0[3] = class3;
      Class<SQLClientInfoException> class4 = SQLClientInfoException.class;
      classArray0[4] = class4;
      Class<SQLClientInfoException> class5 = SQLClientInfoException.class;
      classArray0[5] = class5;
      Class<SQLClientInfoException> class6 = SQLClientInfoException.class;
      classArray0[6] = class6;
      Class<SQLClientInfoException> class7 = SQLClientInfoException.class;
      classArray0[7] = class7;
      Class<SQLClientInfoException> class8 = SQLClientInfoException.class;
      classArray0[8] = class8;
      InvokerTransformer<SQLTransientException, String> invokerTransformer0 = new InvokerTransformer<SQLTransientException, String>(" is less than zero", classArray0, classArray0);
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) zippingIterator0, (Transformer<? super SQLTransactionRollbackException, String>) invokerTransformer0, "", "", " is less than zero");
      MapIterator<ClientInfoStatus, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.collatedIterator((Comparator<? super ClientInfoStatus>) null, (Iterator<? extends ClientInfoStatus>) mapIterator0, (Iterator<? extends ClientInfoStatus>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-51);
      byteArray0[7] = (byte)93;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      treeSet0.contains("2ZNZ0?");
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) null, (Collection<? super StringTokenizer>) treeSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      IteratorUtils.objectGraphIterator((Boolean) null, (Transformer<? super Boolean, ? extends Boolean>) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties0);
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) resettableIterator0, class0);
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) listIterator0, (Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Class to instantiate must not be null", "`$EK q]rS5hE66Yr<8");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      IteratorUtils.objectGraphIterator((Boolean) null, (Transformer<? super Boolean, ? extends Boolean>) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Transformer<Object, SQLException> transformer0 = InvokerTransformer.invokerTransformer("Enumeration must not be null");
      IteratorUtils.objectGraphIterator((Object) sQLInvalidAuthorizationSpecException0, (Transformer<? super Object, ?>) transformer0);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.singletonIterator(enumSet0);
      IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Hashtable<InstanceofPredicate, Transformer<Object, SQLFeatureNotSupportedException>> hashtable0 = new Hashtable<InstanceofPredicate, Transformer<Object, SQLFeatureNotSupportedException>>();
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends SQLFeatureNotSupportedException>>) hashtable0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IfTransformer<Object, SQLFeatureNotSupportedException> ifTransformer0 = new IfTransformer<Object, SQLFeatureNotSupportedException>(instanceofPredicate0, transformer0, transformer0);
      OrderedMapIterator<ArrayDeque<SQLIntegrityConstraintViolationException>, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      String string0 = "";
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) ifTransformer0;
      objectArray0[1] = (Object) instanceofPredicate0;
      objectArray0[2] = (Object) hashtable0;
      objectArray0[3] = (Object) "";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", (-333));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("33Z", "");
      OrderedMapIterator<SQLTimeoutException, SQLNonTransientConnectionException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLNonTransientConnectionException>(orderedMapIterator1);
      AbstractMapIteratorDecorator<SQLTimeoutException, SQLNonTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, SQLNonTransientConnectionException>(abstractOrderedMapIteratorDecorator0);
      ListIteratorWrapper<SQLTimeoutException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTimeoutException>(abstractMapIteratorDecorator0);
      properties0.replace((Object) sQLTimeoutException0, (Object) sQLInvalidAuthorizationSpecException0, (Object) listIteratorWrapper0);
      objectArray0[4] = (Object) properties0;
      objectArray0[5] = (Object) orderedMapIterator0;
      ResettableIterator<Object> resettableIterator0 = new SingletonListIterator<Object>(class0);
      IteratorUtils.find((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) instanceofPredicate0);
      objectArray0[6] = null;
      // Undeclared exception!
      try { 
        InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter types must match the arguments
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      IteratorUtils.objectGraphIterator((Boolean) null, (Transformer<? super Boolean, ? extends Boolean>) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Transformer<Object, SQLException> transformer0 = InvokerTransformer.invokerTransformer("Enumeration must not be null");
      IteratorUtils.objectGraphIterator((Object) sQLInvalidAuthorizationSpecException0, (Transformer<? super Object, ?>) transformer0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLInvalidAuthorizationSpecException0);
      Locale.forLanguageTag("|pT%(3p>A( X*+");
      Object object0 = new Object();
      IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      MapIterator<DataTruncation, EnumSet<Locale.FilteringMode>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      BoundedIterator<SQLWarning> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLWarning>) mapIterator0, 0L);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      IteratorUtils.matchesAny((Iterator<SQLWarning>) boundedIterator0, (Predicate<? super SQLWarning>) transformedPredicate0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MapIterator<String, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IteratorUtils.singletonIterator(sQLClientInfoException0);
      IteratorUtils.isEmpty(mapIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties1);
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) mapIterator0, class0);
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) listIterator0, (Iterator<? extends Properties>) resettableIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(":TV\"CnX`", ":TV\"CnX`");
      IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Properties properties0 = new Properties();
      Properties[] propertiesArray0 = new Properties[8];
      propertiesArray0[0] = properties0;
      propertiesArray0[2] = properties0;
      propertiesArray0[3] = properties0;
      propertiesArray0[4] = properties0;
      Hashtable<SQLTimeoutException, Locale.FilteringMode> hashtable0 = new Hashtable<SQLTimeoutException, Locale.FilteringMode>();
      EntrySetMapIterator<SQLTimeoutException, Locale.FilteringMode> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, Locale.FilteringMode>(hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) entrySetMapIterator0, (Transformer<? super SQLTimeoutException, ? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Hashtable<InstanceofPredicate, Transformer<Object, SQLFeatureNotSupportedException>> hashtable0 = new Hashtable<InstanceofPredicate, Transformer<Object, SQLFeatureNotSupportedException>>();
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends SQLFeatureNotSupportedException>>) hashtable0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IfTransformer<Object, SQLFeatureNotSupportedException> ifTransformer0 = new IfTransformer<Object, SQLFeatureNotSupportedException>(instanceofPredicate0, transformer0, transformer0);
      OrderedMapIterator<ArrayDeque<SQLIntegrityConstraintViolationException>, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) instanceofPredicate0;
      objectArray0[2] = (Object) hashtable0;
      objectArray0[3] = (Object) "";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", (-333));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("33Z", "");
      OrderedMapIterator<SQLTimeoutException, SQLNonTransientConnectionException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLNonTransientConnectionException>(orderedMapIterator1);
      AbstractMapIteratorDecorator<SQLTimeoutException, SQLNonTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, SQLNonTransientConnectionException>(abstractOrderedMapIteratorDecorator0);
      ListIteratorWrapper<SQLTimeoutException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTimeoutException>(abstractMapIteratorDecorator0);
      objectArray0[4] = (Object) properties0;
      objectArray0[5] = (Object) orderedMapIterator0;
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>(class0);
      IteratorUtils.find((Iterator<Object>) singletonListIterator0, (Predicate<? super Object>) instanceofPredicate0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Stack<Iterator<SQLTimeoutException>> stack0 = new Stack<Iterator<SQLTimeoutException>>();
      LoopingListIterator<Iterator<SQLTimeoutException>> loopingListIterator0 = new LoopingListIterator<Iterator<SQLTimeoutException>>(stack0);
      ZippingIterator<Iterator<SQLTimeoutException>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Iterator<SQLTimeoutException>>) loopingListIterator0, (Iterator<? extends Iterator<SQLTimeoutException>>) loopingListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLTimeoutException>>) zippingIterator0, (Transformer<? super Iterator<SQLTimeoutException>, ? extends Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Vector<Properties> vector0 = new Vector<Properties>();
      vector0.trimToSize();
      Vector<Properties> vector1 = new Vector<Properties>();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Properties>) vector1);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Properties>) resettableIterator0);
      SQLException sQLException0 = new SQLException();
      sQLException0.spliterator();
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 390;
      longArray0[1] = (long) 390;
      longArray0[2] = (long) 390;
      longArray0[3] = (long) 390;
      longArray0[4] = (long) 7;
      longArray0[5] = (long) 390;
      longArray0[6] = (long) 390;
      longArray0[7] = (long) 390;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Enumeration must not be null", (String) null, 7, longArray0, sQLException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Transformer<Object, SQLTimeoutException> transformer0 = ConstantTransformer.nullTransformer();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer0);
      Hashtable<InstanceofPredicate, Transformer<Object, SQLFeatureNotSupportedException>> hashtable0 = new Hashtable<InstanceofPredicate, Transformer<Object, SQLFeatureNotSupportedException>>();
      Transformer<Object, SQLFeatureNotSupportedException> transformer1 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends SQLFeatureNotSupportedException>>) hashtable0);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 2);
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      classArray0[0] = class1;
      Class<SQLNonTransientException> class2 = SQLNonTransientException.class;
      classArray0[1] = class2;
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>("", classArray0, classArray0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer1, predicate0);
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>((SQLWarning) null, true);
      IteratorUtils.matchesAny((Iterator<SQLWarning>) singletonIterator0, (Predicate<? super SQLWarning>) predicate0);
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) linkedList0);
      IteratorUtils.find((Iterator<SQLTimeoutException>) resettableIterator0, (Predicate<? super SQLTimeoutException>) transformedPredicate0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("iterator");
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", (String) null, 0, sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLSyntaxErrorException[]) null, 0, 2608);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      IteratorUtils.objectGraphIterator((Boolean) null, (Transformer<? super Boolean, ? extends Boolean>) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Transformer<Object, SQLException> transformer0 = InvokerTransformer.invokerTransformer("Enumeration must not be null");
      Iterator<Object> iterator0 = IteratorUtils.objectGraphIterator((Object) sQLInvalidAuthorizationSpecException0, (Transformer<? super Object, ?>) transformer0);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet.allOf(class0);
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.singletonIterator((EnumSet<Locale.FilteringMode>) null);
      Enumeration<EnumSet<Locale.FilteringMode>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      IteratorUtils.asIterator((Enumeration<? extends EnumSet<Locale.FilteringMode>>) enumeration0, (Collection<? super EnumSet<Locale.FilteringMode>>) arrayList0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = null;
      String string0 = "(J~wU k";
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 5);
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class1;
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      classArray0[1] = class2;
      Class<SQLIntegrityConstraintViolationException> class3 = SQLIntegrityConstraintViolationException.class;
      classArray0[2] = class3;
      Class<SQLIntegrityConstraintViolationException> class4 = SQLIntegrityConstraintViolationException.class;
      classArray0[3] = class4;
      Class<SQLIntegrityConstraintViolationException> class5 = SQLIntegrityConstraintViolationException.class;
      classArray0[4] = class5;
      Object[] objectArray0 = new Object[2];
      int int0 = 10;
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Enumeration must not be null' on 'class java.sql.SQLInvalidAuthorizationSpecException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) linkedList0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
      Properties properties0 = new Properties();
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      ListIterator<SQLDataException> listIterator1 = EmptyListIterator.emptyListIterator();
      IteratorUtils.matchesAll((Iterator<SQLDataException>) listIterator1, (Predicate<? super SQLDataException>) predicate0);
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.map.ListOrderedMap", "");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0, 3664, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      Hashtable<InstanceofPredicate, Transformer<Object, SQLFeatureNotSupportedException>> hashtable0 = new Hashtable<InstanceofPredicate, Transformer<Object, SQLFeatureNotSupportedException>>();
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends SQLFeatureNotSupportedException>>) hashtable0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IfTransformer<Object, SQLFeatureNotSupportedException> ifTransformer0 = new IfTransformer<Object, SQLFeatureNotSupportedException>((Predicate<? super Object>) null, transformer0, transformer0);
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties0);
      IteratorUtils.asIterable((Iterator<? extends Properties>) resettableIterator0);
      IteratorUtils.emptyOrderedIterator();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Locale.forLanguageTag("3COw@-rH)U_CL5*");
      Object object0 = new Object();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("3COw@-rH)U_CL5*", "/z86;XJpvW", 100, sQLTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(" xE9}.+;;^", "O6EUIMw", sQLInvalidAuthorizationSpecException0);
      IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLRecoverableException>) arrayList0);
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 9);
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      classArray0[0] = class1;
      Class<SQLTimeoutException> class2 = SQLTimeoutException.class;
      classArray0[1] = class2;
      Class<SQLTimeoutException> class3 = SQLTimeoutException.class;
      classArray0[2] = class3;
      Class<SQLTimeoutException> class4 = SQLTimeoutException.class;
      classArray0[3] = class4;
      Class<SQLTimeoutException> class5 = SQLTimeoutException.class;
      classArray0[4] = class5;
      Class<SQLTimeoutException> class6 = SQLTimeoutException.class;
      classArray0[5] = class6;
      Class<SQLTimeoutException> class7 = SQLTimeoutException.class;
      classArray0[6] = class7;
      Class<SQLTimeoutException> class8 = SQLTimeoutException.class;
      classArray0[7] = class8;
      Class<SQLTimeoutException> class9 = SQLTimeoutException.class;
      classArray0[8] = class9;
      Transformer<Object, String> transformer1 = InvokerTransformer.invokerTransformer("O6EUIMw", (Class<?>[]) classArray0, (Object[]) classArray0);
      IfTransformer<Object, String> ifTransformer1 = new IfTransformer<Object, String>((Predicate<? super Object>) null, transformer1, transformer1);
      IteratorUtils.toString((Iterator<SQLRecoverableException>) resettableListIterator0, (Transformer<? super SQLRecoverableException, String>) ifTransformer1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MapIterator<String, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IteratorUtils.singletonIterator(sQLClientInfoException0);
      Iterator<String> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends String>) mapIterator0, (Iterator<? extends String>) mapIterator0);
      IteratorUtils.isEmpty(iterator0);
      OrderedMapIterator<SQLIntegrityConstraintViolationException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0, (Collection<? super SQLIntegrityConstraintViolationException>) arrayList0);
      IteratorUtils.chainedIterator((Iterator<? extends String>) iterator0, (Iterator<? extends String>) mapIterator0);
      LinkedHashSet<Boolean> linkedHashSet0 = new LinkedHashSet<Boolean>(0);
      ResettableIterator<Boolean> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Boolean>) linkedHashSet0);
      IteratorUtils.chainedIterator((Iterator<? extends Boolean>) resettableIterator0, (Iterator<? extends Boolean>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Hashtable<InstanceofPredicate, Transformer<Object, SQLFeatureNotSupportedException>> hashtable0 = new Hashtable<InstanceofPredicate, Transformer<Object, SQLFeatureNotSupportedException>>();
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends SQLFeatureNotSupportedException>>) hashtable0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IfTransformer<Object, SQLFeatureNotSupportedException> ifTransformer0 = new IfTransformer<Object, SQLFeatureNotSupportedException>(instanceofPredicate0, transformer0, transformer0);
      OrderedMapIterator<ArrayDeque<SQLIntegrityConstraintViolationException>, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      String string0 = "";
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) ifTransformer0;
      objectArray0[1] = (Object) instanceofPredicate0;
      objectArray0[2] = (Object) hashtable0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) properties0;
      objectArray0[5] = (Object) orderedMapIterator0;
      ResettableIterator<Object> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.find((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) instanceofPredicate0);
      objectArray0[6] = null;
      // Undeclared exception!
      try { 
        InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter types must match the arguments
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("*sq%K_lX]qpI[bT");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      IteratorUtils.singletonIterator(linkedHashSet0);
      Iterator<String> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PriorityQueue<SQLWarning>[] priorityQueueArray0 = (PriorityQueue<SQLWarning>[]) Array.newInstance(PriorityQueue.class, 0);
      IteratorUtils.arrayIterator(priorityQueueArray0);
      String string0 = "";
      String string1 = "";
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "");
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0, 0, 0);
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) objectArrayListIterator0, (Iterator<? extends Properties>) objectArrayListIterator0, (Iterator<? extends Properties>) listIterator0);
      ListIterator<Properties> listIterator1 = EmptyListIterator.emptyListIterator();
      ListIteratorWrapper<Properties> listIteratorWrapper0 = new ListIteratorWrapper<Properties>(objectArrayListIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) listIterator1, (Iterator<? extends Properties>) listIteratorWrapper0, (Iterator<? extends Properties>) listIteratorWrapper0);
      IteratorUtils.skippingIterator((Iterator<Properties>) objectArrayListIterator0, 2359L);
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      String[] stringArray0 = new String[8];
      String string0 = "oyI4oEwf,#JL6N_(<we";
      stringArray0[0] = "oyI4oEwf,#JL6N_(<we";
      stringArray0[1] = "IX|K\nsxz`";
      stringArray0[2] = "Couldn't get the node: index (";
      stringArray0[3] = "\"A2*{(]W";
      stringArray0[4] = ", size=";
      stringArray0[5] = "Collection must not be null";
      String string1 = "\"a1s?";
      stringArray0[6] = "\"a1s?";
      stringArray0[7] = "";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      IteratorUtils.isEmpty(objectArrayListIterator0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransientException0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0, 0, 0);
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>) objectArrayListIterator0, (Iterator<? extends Properties>) objectArrayListIterator0, (Iterator<? extends Properties>) listIterator0);
      SkippingIterator<Properties> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Properties>) zippingIterator0, 0L);
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) skippingIterator0, (Iterator<? extends Properties>) skippingIterator0);
      ListIterator<SQLDataException> listIterator1 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLDataException>) listIterator1, (Predicate<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MapIterator<String, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IteratorUtils.singletonIterator(sQLClientInfoException0);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties[] propertiesArray0 = new Properties[5];
      propertiesArray0[0] = properties1;
      propertiesArray0[1] = properties0;
      propertiesArray0[2] = properties0;
      propertiesArray0[3] = properties0;
      propertiesArray0[4] = properties1;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0, 0, 2);
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) objectArrayListIterator0, (Iterator<? extends Properties>) objectArrayListIterator0, (Iterator<? extends Properties>) listIterator0);
      Iterator<Properties> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Properties>) listIterator0);
      SkippingIterator<Properties> skippingIterator0 = IteratorUtils.skippingIterator(iterator0, 0L);
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) skippingIterator0, (Iterator<? extends Properties>) objectArrayListIterator0);
      SQLDataException sQLDataException0 = new SQLDataException("Closure must not be null", "b*FWd?\"-(jKo=BYG");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLDataException0, 1166);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties[] propertiesArray0 = new Properties[6];
      propertiesArray0[0] = properties2;
      propertiesArray0[1] = properties0;
      propertiesArray0[2] = properties1;
      propertiesArray0[3] = properties2;
      propertiesArray0[4] = properties1;
      propertiesArray0[5] = properties2;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0, 0, 0);
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) objectArrayListIterator0, (Iterator<? extends Properties>) listIterator0, (Iterator<? extends Properties>) objectArrayListIterator0);
      IteratorUtils.skippingIterator((Iterator<Properties>) objectArrayListIterator0, 0L);
      OrderedMapIterator<Properties, InstanceofPredicate> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, InstanceofPredicate> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, InstanceofPredicate>(orderedMapIterator0);
      OrderedMapIterator<Properties, InstanceofPredicate> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Properties, ? extends InstanceofPredicate>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) orderedMapIterator1, (Iterator<? extends Properties>) objectArrayListIterator0);
      DataTruncation dataTruncation0 = new DataTruncation(2641, true, false, 3148, 1811);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1811;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("'H^U-' c!~\"", "'H^U-' c!~\"", 2641, longArray0, dataTruncation0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0, false);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<BatchUpdateException, String> transformer0 = MapTransformer.mapTransformer((Map<? super BatchUpdateException, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<BatchUpdateException>) singletonIterator0, (Transformer<? super BatchUpdateException, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MapIterator<String, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.singletonIterator(sQLClientInfoException0);
      SkippingIterator<SQLClientInfoException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLClientInfoException>) resettableIterator0, 0L);
      sQLClientInfoException0.getStackTrace();
      IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) skippingIterator0, 16);
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyMapIterator();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLClientInfoException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0, 0, 0);
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>) objectArrayListIterator0, (Iterator<? extends Properties>) objectArrayListIterator0, (Iterator<? extends Properties>) listIterator0);
      SkippingIterator<Properties> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Properties>) zippingIterator0, 0L);
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) skippingIterator0, (Iterator<? extends Properties>) skippingIterator0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 2641;
      longArray0[2] = (long) 2641;
      longArray0[3] = 1970L;
      longArray0[4] = 0L;
      longArray0[5] = (long) 2641;
      longArray0[6] = 0L;
      DataTruncation dataTruncation0 = new DataTruncation(2641, true, true, 2641, 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("HZl$sF.&6", "'H^U-' c!~\"", 2641, longArray0, dataTruncation0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0, false);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<BatchUpdateException, String> transformer0 = MapTransformer.mapTransformer((Map<? super BatchUpdateException, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<BatchUpdateException>) singletonIterator0, (Transformer<? super BatchUpdateException, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Vector<Properties> vector0 = new Vector<Properties>();
      vector0.trimToSize();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Properties>) vector0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Properties>) resettableIterator0);
      int int0 = 411;
      long[] longArray0 = new long[0];
      SQLException sQLException0 = new SQLException();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      UniquePredicate.uniquePredicate();
      OrderedMapIterator<HashSet<Predicate<Object>>, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<HashSet<Predicate<Object>>>) orderedMapIterator0, 411);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 411
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 1);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      classArray0[0] = class0;
      InvokerTransformer.invokerTransformer("Enumeration must not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.isEmpty((Iterator<?>) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      sQLFeatureNotSupportedException0.printStackTrace();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 3536);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Vector<Properties> vector0 = new Vector<Properties>();
      vector0.trimToSize();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Properties>) vector0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Properties>) resettableIterator0);
      int int0 = 411;
      long[] longArray0 = new long[0];
      SQLException sQLException0 = new SQLException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("0w,3\"-MA", "0w,3\"-MA", 411, longArray0, sQLException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      linkedHashSet0.add(sQLIntegrityConstraintViolationException0);
      IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0, (Collection<? super SQLIntegrityConstraintViolationException>) linkedHashSet0);
      IteratorUtils.isEmpty(orderedIterator0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransientException0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate.uniquePredicate();
      IteratorUtils.getIterator(uniquePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLException>) comparator0, (Iterator<? extends SQLException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>) listIterator0, (Iterator<? extends Properties>) listIterator0, (Iterator<? extends Properties>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Properties>) zippingIterator0, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[3];
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) linkedList0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0, (Collection<? super SQLIntegrityConstraintViolationException>) linkedList0);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      IteratorUtils.singletonIterator(linkedHashSet1);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>) null, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("List must not be null");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.functors.NOPClosure", "org.apache.commons.collections4.functors.NOPClosure", 1, sQLTimeoutException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("QUXF$", "8A_d", "org.apache.commons.collections4.functors.NOPClosure", 2495);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("Node must not be null", "List must not be null", "", 1417);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("", "G |Y-fYy0U", "QUXF$", 1417);
      stackTraceElementArray0[2] = stackTraceElement2;
      sQLInvalidAuthorizationSpecException0.setStackTrace(stackTraceElementArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.functors.NOPClosure", hashMap0, sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLClientInfoException0, 1, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      OrderedMapIterator<DataTruncation, Stack<DataTruncation>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, Stack<DataTruncation>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, Stack<DataTruncation>>(orderedMapIterator0);
      AbstractMapIteratorDecorator<DataTruncation, Stack<DataTruncation>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, Stack<DataTruncation>>(abstractOrderedMapIteratorDecorator0);
      IteratorUtils.toList((Iterator<? extends DataTruncation>) abstractMapIteratorDecorator0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 1);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      classArray0[0] = class0;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("Enumeration must not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.toString((Iterator<SQLClientInfoException>) null, (Transformer<? super SQLClientInfoException, String>) transformer0);
      EmptyOrderedIterator.emptyOrderedIterator();
      Class<Locale.FilteringMode> class1 = Locale.FilteringMode.class;
      InstantiateFactory<Locale.FilteringMode> instantiateFactory0 = null;
      try {
        instantiateFactory0 = new InstantiateFactory<Locale.FilteringMode>(class1, classArray0, classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InstantiateFactory: The constructor must exist and be public 
         //
         verifyException("org.apache.commons.collections4.functors.InstantiateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ArrayList<Properties> arrayList0 = new ArrayList<Properties>();
      Properties properties0 = new Properties();
      arrayList0.add(properties0);
      IteratorUtils.loopingListIterator((List<Properties>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ConstantTransformer.nullTransformer();
      Hashtable<InstanceofPredicate, Transformer<Object, SQLFeatureNotSupportedException>> hashtable0 = new Hashtable<InstanceofPredicate, Transformer<Object, SQLFeatureNotSupportedException>>();
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends SQLFeatureNotSupportedException>>) hashtable0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IfTransformer<Object, SQLFeatureNotSupportedException> ifTransformer0 = new IfTransformer<Object, SQLFeatureNotSupportedException>((Predicate<? super Object>) null, transformer0, transformer0);
      IteratorUtils.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties0);
      IteratorUtils.asIterable((Iterator<? extends Properties>) resettableIterator0);
      IteratorUtils.emptyOrderedIterator();
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) null, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Transformer<Object, SQLTimeoutException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.objectGraphIterator((SQLTimeoutException) null, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer0);
      Hashtable<InstanceofPredicate, Transformer<Object, SQLFeatureNotSupportedException>> hashtable0 = new Hashtable<InstanceofPredicate, Transformer<Object, SQLFeatureNotSupportedException>>();
      Transformer<Object, SQLFeatureNotSupportedException> transformer1 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends SQLFeatureNotSupportedException>>) hashtable0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IfTransformer<Object, SQLFeatureNotSupportedException> ifTransformer0 = new IfTransformer<Object, SQLFeatureNotSupportedException>((Predicate<? super Object>) null, transformer1, transformer1);
      IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) iterator0, (Transformer<? super SQLTimeoutException, ? extends SQLFeatureNotSupportedException>) ifTransformer0);
      IteratorUtils.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties0);
      IteratorUtils.asIterable((Iterator<? extends Properties>) resettableIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[8];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException0;
      sQLTransientConnectionException0.setNextException((SQLException) null);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[7] = sQLTransientConnectionException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, 1611, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      IteratorUtils.objectGraphIterator((String) null, (Transformer<? super String, ? extends String>) null);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MapIterator<Locale.FilteringMode, Object> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Transformer<Object, SQLTimeoutException> transformer0 = ConstantTransformer.nullTransformer();
      assertNotNull(transformer0);
      
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.objectGraphIterator((SQLTimeoutException) null, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer0);
      assertNotNull(iterator0);
      
      Hashtable<InstanceofPredicate, Transformer<Object, SQLFeatureNotSupportedException>> hashtable0 = new Hashtable<InstanceofPredicate, Transformer<Object, SQLFeatureNotSupportedException>>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      Transformer<Object, SQLFeatureNotSupportedException> transformer1 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends SQLFeatureNotSupportedException>>) hashtable0);
      assertNotNull(transformer1);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      Class<SQLTransientException> class0 = SQLTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      hashtable0.put(instanceofPredicate0, transformer1);
      IfTransformer<Object, SQLFeatureNotSupportedException> ifTransformer0 = new IfTransformer<Object, SQLFeatureNotSupportedException>((Predicate<? super Object>) null, transformer1, transformer1);
      IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) iterator0, (Transformer<? super SQLTimeoutException, ? extends SQLFeatureNotSupportedException>) ifTransformer0);
      IteratorUtils.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties0);
      IteratorUtils.asIterable((Iterator<? extends Properties>) resettableIterator0);
      OrderedIterator<PriorityQueue<SQLNonTransientException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) orderedIterator0, 0, 1269);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Hashtable<SQLRecoverableException, DataTruncation> hashtable0 = new Hashtable<SQLRecoverableException, DataTruncation>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      EntrySetMapIterator<SQLRecoverableException, DataTruncation> entrySetMapIterator0 = new EntrySetMapIterator<SQLRecoverableException, DataTruncation>(hashtable0);
      assertNotNull(entrySetMapIterator0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) entrySetMapIterator0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      DataTruncation[] dataTruncationArray0 = new DataTruncation[9];
      DataTruncation dataTruncation0 = new DataTruncation(1377, false, true, 1377, 3156);
      assertNotNull(dataTruncation0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(927, false, false, 1377, 3156);
      assertNotNull(dataTruncation1);
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("22001", dataTruncation1.getSQLState());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(1377, false, true, 1377, 1377, dataTruncation0);
      assertNotNull(dataTruncation2);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation2.getSQLState());
      assertEquals(0, dataTruncation2.getErrorCode());
      assertEquals("Data truncation", dataTruncation2.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation2.toString());
      assertFalse(dataTruncation0.equals((Object)dataTruncation1));
      assertFalse(dataTruncation2.equals((Object)dataTruncation0));
      assertFalse(dataTruncation2.equals((Object)dataTruncation1));
      
      dataTruncationArray0[2] = dataTruncation2;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("]Z ", ")Fq%@F@ASA{kzn");
      assertNotNull(sQLTimeoutException0);
      assertEquals("]Z ", sQLTimeoutException0.getMessage());
      assertEquals(")Fq%@F@ASA{kzn", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ]Z ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      DataTruncation dataTruncation3 = new DataTruncation(3156, false, false, 0, 1377, sQLTimeoutException0);
      assertNotNull(dataTruncation3);
      assertEquals("]Z ", sQLTimeoutException0.getMessage());
      assertEquals(")Fq%@F@ASA{kzn", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ]Z ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("22001", dataTruncation3.getSQLState());
      assertEquals(0, dataTruncation3.getErrorCode());
      assertEquals("Data truncation", dataTruncation3.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation3.toString());
      assertFalse(dataTruncation3.equals((Object)dataTruncation2));
      assertFalse(dataTruncation3.equals((Object)dataTruncation1));
      assertFalse(dataTruncation3.equals((Object)dataTruncation0));
      
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(1377, false, false, 0, 3156, dataTruncation1);
      assertNotNull(dataTruncation4);
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("22001", dataTruncation1.getSQLState());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals(0, dataTruncation4.getErrorCode());
      assertEquals("Data truncation", dataTruncation4.getMessage());
      assertEquals("22001", dataTruncation4.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation4.toString());
      assertFalse(dataTruncation1.equals((Object)dataTruncation2));
      assertFalse(dataTruncation1.equals((Object)dataTruncation3));
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      assertFalse(dataTruncation4.equals((Object)dataTruncation2));
      assertFalse(dataTruncation4.equals((Object)dataTruncation1));
      assertFalse(dataTruncation4.equals((Object)dataTruncation0));
      assertFalse(dataTruncation4.equals((Object)dataTruncation3));
      
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(0, false, false, 2458, 1377);
      assertNotNull(dataTruncation5);
      assertEquals(0, dataTruncation5.getErrorCode());
      assertEquals("Data truncation", dataTruncation5.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation5.toString());
      assertEquals("22001", dataTruncation5.getSQLState());
      assertFalse(dataTruncation5.equals((Object)dataTruncation1));
      assertFalse(dataTruncation5.equals((Object)dataTruncation4));
      assertFalse(dataTruncation5.equals((Object)dataTruncation0));
      assertFalse(dataTruncation5.equals((Object)dataTruncation3));
      assertFalse(dataTruncation5.equals((Object)dataTruncation2));
      
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(3156, false, false, 0, 3156, dataTruncation5);
      assertNotNull(dataTruncation6);
      assertEquals(0, dataTruncation6.getErrorCode());
      assertEquals("Data truncation", dataTruncation6.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation6.toString());
      assertEquals("22001", dataTruncation6.getSQLState());
      assertEquals(0, dataTruncation5.getErrorCode());
      assertEquals("Data truncation", dataTruncation5.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation5.toString());
      assertEquals("22001", dataTruncation5.getSQLState());
      assertFalse(dataTruncation6.equals((Object)dataTruncation0));
      assertFalse(dataTruncation6.equals((Object)dataTruncation5));
      assertFalse(dataTruncation6.equals((Object)dataTruncation4));
      assertFalse(dataTruncation6.equals((Object)dataTruncation1));
      assertFalse(dataTruncation6.equals((Object)dataTruncation3));
      assertFalse(dataTruncation6.equals((Object)dataTruncation2));
      assertFalse(dataTruncation5.equals((Object)dataTruncation1));
      assertFalse(dataTruncation5.equals((Object)dataTruncation4));
      assertFalse(dataTruncation5.equals((Object)dataTruncation0));
      assertFalse(dataTruncation5.equals((Object)dataTruncation3));
      assertFalse(dataTruncation5.equals((Object)dataTruncation2));
      
      dataTruncationArray0[6] = dataTruncation6;
      DataTruncation dataTruncation7 = new DataTruncation(1377, false, false, 927, 0, dataTruncation5);
      assertNotNull(dataTruncation7);
      assertEquals("22001", dataTruncation7.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation7.toString());
      assertEquals(0, dataTruncation7.getErrorCode());
      assertEquals("Data truncation", dataTruncation7.getMessage());
      assertEquals(0, dataTruncation5.getErrorCode());
      assertEquals("Data truncation", dataTruncation5.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation5.toString());
      assertEquals("22001", dataTruncation5.getSQLState());
      assertFalse(dataTruncation7.equals((Object)dataTruncation5));
      assertFalse(dataTruncation7.equals((Object)dataTruncation0));
      assertFalse(dataTruncation7.equals((Object)dataTruncation6));
      assertFalse(dataTruncation7.equals((Object)dataTruncation1));
      assertFalse(dataTruncation7.equals((Object)dataTruncation2));
      assertFalse(dataTruncation7.equals((Object)dataTruncation3));
      assertFalse(dataTruncation7.equals((Object)dataTruncation4));
      assertFalse(dataTruncation5.equals((Object)dataTruncation1));
      assertFalse(dataTruncation5.equals((Object)dataTruncation4));
      assertFalse(dataTruncation5.equals((Object)dataTruncation6));
      assertFalse(dataTruncation5.equals((Object)dataTruncation0));
      assertFalse(dataTruncation5.equals((Object)dataTruncation3));
      assertFalse(dataTruncation5.equals((Object)dataTruncation2));
      
      dataTruncationArray0[7] = dataTruncation7;
      DataTruncation dataTruncation8 = new DataTruncation(3156, false, false, 10, 385);
      assertNotNull(dataTruncation8);
      assertEquals("Data truncation", dataTruncation8.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation8.toString());
      assertEquals("22001", dataTruncation8.getSQLState());
      assertEquals(0, dataTruncation8.getErrorCode());
      assertFalse(dataTruncation8.equals((Object)dataTruncation6));
      assertFalse(dataTruncation8.equals((Object)dataTruncation3));
      assertFalse(dataTruncation8.equals((Object)dataTruncation0));
      assertFalse(dataTruncation8.equals((Object)dataTruncation4));
      assertFalse(dataTruncation8.equals((Object)dataTruncation2));
      assertFalse(dataTruncation8.equals((Object)dataTruncation1));
      assertFalse(dataTruncation8.equals((Object)dataTruncation7));
      assertFalse(dataTruncation8.equals((Object)dataTruncation5));
      
      dataTruncationArray0[8] = dataTruncation8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, 927);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int int0 = 0;
      ResettableIterator<Integer> resettableIterator1 = IteratorUtils.arrayIterator(integerArray0, 0, 1);
      assertEquals(1, integerArray0.length);
      assertNotNull(resettableIterator1);
      assertFalse(resettableIterator1.equals((Object)resettableIterator0));
      
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 2);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.noneOf(class0);
      assertNotNull(enumSet0);
      assertEquals(0, enumSet0.size());
      
      EnumSet<Locale.FilteringMode> enumSet1 = EnumSet.copyOf(enumSet0);
      assertNotNull(enumSet1);
      assertEquals(0, enumSet0.size());
      assertEquals(0, enumSet1.size());
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertTrue(enumSet1.equals((Object)enumSet0));
      
      enumSetArray0[0] = enumSet1;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet2 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode1);
      assertNotNull(enumSet2);
      assertEquals(2, enumSet2.size());
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertTrue(enumSet2.contains(locale_FilteringMode1));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertFalse(enumSet2.equals((Object)enumSet1));
      assertFalse(enumSet2.equals((Object)enumSet0));
      
      enumSetArray0[1] = enumSet2;
      boolean boolean0 = enumSet2.containsAll(enumSet0);
      assertTrue(boolean0);
      assertEquals(0, enumSet0.size());
      assertEquals(2, enumSet2.size());
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertFalse(enumSet0.contains(locale_FilteringMode1));
      assertTrue(enumSet2.contains(locale_FilteringMode1));
      assertFalse(enumSet0.equals((Object)enumSet2));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertFalse(enumSet2.equals((Object)enumSet1));
      assertFalse(enumSet2.equals((Object)enumSet0));
      
      ObjectArrayListIterator<EnumSet<Locale.FilteringMode>> objectArrayListIterator0 = new ObjectArrayListIterator<EnumSet<Locale.FilteringMode>>(enumSetArray0, 0);
      assertEquals(2, enumSetArray0.length);
      assertNotNull(objectArrayListIterator0);
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(2, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      
      boolean boolean1 = enumSet2.add(locale_FilteringMode0);
      assertFalse(boolean1);
      assertEquals(2, enumSet2.size());
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertTrue(enumSet2.contains(locale_FilteringMode1));
      assertFalse(boolean1 == boolean0);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertFalse(enumSet2.equals((Object)enumSet1));
      assertFalse(enumSet2.equals((Object)enumSet0));
      
      ListIterator<EnumSet<Locale.FilteringMode>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<EnumSet<Locale.FilteringMode>>) objectArrayListIterator0);
      assertEquals(2, enumSetArray0.length);
      assertNotNull(listIterator0);
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(2, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      ArrayIterator<SQLTransientConnectionException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLTransientConnectionException>(enumSet1, 0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = "8=xWtn\"";
      StringTokenizer stringTokenizer0 = new StringTokenizer("8=xWtn\"", "8=xWtn\"");
      assertNotNull(stringTokenizer0);
      assertEquals(0, stringTokenizer0.countTokens());
      
      boolean boolean0 = stringTokenizer0.hasMoreTokens();
      assertFalse(boolean0);
      assertEquals(0, stringTokenizer0.countTokens());
      
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.singletonListIterator(stringTokenizer0);
      assertNotNull(listIterator0);
      assertEquals(0, stringTokenizer0.countTokens());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      List<StringTokenizer> list0 = IteratorUtils.toList((Iterator<? extends StringTokenizer>) listIterator0);
      assertNotNull(list0);
      assertEquals(0, stringTokenizer0.countTokens());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(list0.contains(stringTokenizer0));
      
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) null, 5066L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LinkedList<Locale.FilteringMode>[] linkedListArray0 = (LinkedList<Locale.FilteringMode>[]) Array.newInstance(LinkedList.class, 5);
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      linkedListArray0[0] = linkedList0;
      LinkedList<Locale.FilteringMode> linkedList1 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      linkedListArray0[1] = linkedList1;
      LinkedList<Locale.FilteringMode> linkedList2 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertTrue(linkedList2.equals((Object)linkedList0));
      
      linkedListArray0[2] = linkedList2;
      LinkedList<Locale.FilteringMode> linkedList3 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList3);
      assertEquals(0, linkedList3.size());
      assertTrue(linkedList3.equals((Object)linkedList1));
      assertTrue(linkedList3.equals((Object)linkedList2));
      assertTrue(linkedList3.equals((Object)linkedList0));
      
      linkedListArray0[3] = linkedList3;
      LinkedList<Locale.FilteringMode> linkedList4 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList4);
      assertEquals(0, linkedList4.size());
      assertTrue(linkedList4.equals((Object)linkedList1));
      assertTrue(linkedList4.equals((Object)linkedList0));
      assertTrue(linkedList4.equals((Object)linkedList3));
      assertTrue(linkedList4.equals((Object)linkedList2));
      
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[3];
      StringTokenizer stringTokenizer0 = new StringTokenizer("s#^Q_}#", "setValue() is not supported", true);
      assertNotNull(stringTokenizer0);
      assertEquals(2, stringTokenizer0.countTokens());
      
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("setValue() is not supported");
      assertNotNull(stringTokenizer1);
      assertEquals(4, stringTokenizer1.countTokens());
      assertFalse(stringTokenizer1.equals((Object)stringTokenizer0));
      
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("setValue() is not supported");
      assertNotNull(stringTokenizer2);
      assertEquals(4, stringTokenizer2.countTokens());
      assertFalse(stringTokenizer2.equals((Object)stringTokenizer0));
      assertFalse(stringTokenizer2.equals((Object)stringTokenizer1));
      
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer[] stringTokenizerArray1 = linkedList4.toArray(stringTokenizerArray0);
      assertEquals(3, stringTokenizerArray1.length);
      assertEquals(3, stringTokenizerArray0.length);
      assertNotNull(stringTokenizerArray1);
      assertEquals(0, linkedList4.size());
      assertSame(stringTokenizerArray1, stringTokenizerArray0);
      assertNotSame(linkedList4, linkedList2);
      assertNotSame(linkedList4, linkedList0);
      assertNotSame(linkedList4, linkedList1);
      assertNotSame(linkedList4, linkedList3);
      assertSame(stringTokenizerArray0, stringTokenizerArray1);
      assertTrue(linkedList4.equals((Object)linkedList1));
      assertTrue(linkedList4.equals((Object)linkedList0));
      assertTrue(linkedList4.equals((Object)linkedList3));
      assertTrue(linkedList4.equals((Object)linkedList2));
      
      linkedListArray0[4] = linkedList4;
      ResettableListIterator<LinkedList<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedListArray0);
      assertEquals(5, linkedListArray0.length);
      assertNotNull(resettableListIterator0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 6);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[8];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("4rR@[I]8I", "PCt6ej,");
      assertNotNull(sQLTransientConnectionException1);
      assertEquals("4rR@[I]8I", sQLTransientConnectionException1.getMessage());
      assertEquals("PCt6ej,", sQLTransientConnectionException1.getSQLState());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: 4rR@[I]8I", sQLTransientConnectionException1.toString());
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("PCt6ej,", "[", (-1));
      assertNotNull(sQLTransientConnectionException2);
      assertEquals("[", sQLTransientConnectionException2.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: PCt6ej,", sQLTransientConnectionException2.toString());
      assertEquals((-1), sQLTransientConnectionException2.getErrorCode());
      assertEquals("PCt6ej,", sQLTransientConnectionException2.getMessage());
      assertFalse(sQLTransientConnectionException2.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException2.equals((Object)sQLTransientConnectionException0));
      
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException((String) null, (String) null, (-1), sQLTransientConnectionException1);
      assertNotNull(sQLTransientConnectionException3);
      assertEquals("4rR@[I]8I", sQLTransientConnectionException1.getMessage());
      assertEquals("PCt6ej,", sQLTransientConnectionException1.getSQLState());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: 4rR@[I]8I", sQLTransientConnectionException1.toString());
      assertNull(sQLTransientConnectionException3.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException3.toString());
      assertEquals((-1), sQLTransientConnectionException3.getErrorCode());
      assertNull(sQLTransientConnectionException3.getMessage());
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException2));
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLTransientConnectionException3.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException3.equals((Object)sQLTransientConnectionException2));
      assertFalse(sQLTransientConnectionException3.equals((Object)sQLTransientConnectionException0));
      
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException();
      assertNotNull(sQLTransientConnectionException4);
      assertNull(sQLTransientConnectionException4.getMessage());
      assertEquals(0, sQLTransientConnectionException4.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException4.toString());
      assertNull(sQLTransientConnectionException4.getSQLState());
      assertFalse(sQLTransientConnectionException4.equals((Object)sQLTransientConnectionException2));
      assertFalse(sQLTransientConnectionException4.equals((Object)sQLTransientConnectionException3));
      assertFalse(sQLTransientConnectionException4.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException4.equals((Object)sQLTransientConnectionException0));
      
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException((String) null, (String) null, sQLTransientConnectionException4);
      assertNotNull(sQLTransientConnectionException5);
      assertNull(sQLTransientConnectionException4.getMessage());
      assertEquals(0, sQLTransientConnectionException4.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException4.toString());
      assertNull(sQLTransientConnectionException4.getSQLState());
      assertEquals(0, sQLTransientConnectionException5.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException5.toString());
      assertNull(sQLTransientConnectionException5.getMessage());
      assertNull(sQLTransientConnectionException5.getSQLState());
      assertFalse(sQLTransientConnectionException4.equals((Object)sQLTransientConnectionException2));
      assertFalse(sQLTransientConnectionException4.equals((Object)sQLTransientConnectionException3));
      assertFalse(sQLTransientConnectionException4.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException4.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLTransientConnectionException5.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException5.equals((Object)sQLTransientConnectionException3));
      assertFalse(sQLTransientConnectionException5.equals((Object)sQLTransientConnectionException4));
      assertFalse(sQLTransientConnectionException5.equals((Object)sQLTransientConnectionException2));
      assertFalse(sQLTransientConnectionException5.equals((Object)sQLTransientConnectionException0));
      
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      SQLTransientConnectionException sQLTransientConnectionException6 = new SQLTransientConnectionException("", "S0e#Jz6vWoEK", (-1), sQLTransientConnectionException4);
      assertNotNull(sQLTransientConnectionException6);
      assertNull(sQLTransientConnectionException4.getMessage());
      assertEquals(0, sQLTransientConnectionException4.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException4.toString());
      assertNull(sQLTransientConnectionException4.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException6.toString());
      assertEquals("", sQLTransientConnectionException6.getMessage());
      assertEquals("S0e#Jz6vWoEK", sQLTransientConnectionException6.getSQLState());
      assertEquals((-1), sQLTransientConnectionException6.getErrorCode());
      assertFalse(sQLTransientConnectionException4.equals((Object)sQLTransientConnectionException2));
      assertFalse(sQLTransientConnectionException4.equals((Object)sQLTransientConnectionException3));
      assertFalse(sQLTransientConnectionException4.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException4.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLTransientConnectionException4.equals((Object)sQLTransientConnectionException5));
      assertFalse(sQLTransientConnectionException6.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException6.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLTransientConnectionException6.equals((Object)sQLTransientConnectionException5));
      assertFalse(sQLTransientConnectionException6.equals((Object)sQLTransientConnectionException2));
      assertFalse(sQLTransientConnectionException6.equals((Object)sQLTransientConnectionException4));
      assertFalse(sQLTransientConnectionException6.equals((Object)sQLTransientConnectionException3));
      
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException6;
      SQLTransientConnectionException sQLTransientConnectionException7 = new SQLTransientConnectionException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator", "", 192);
      assertNotNull(sQLTransientConnectionException7);
      assertEquals("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator", sQLTransientConnectionException7.getMessage());
      assertEquals(192, sQLTransientConnectionException7.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator", sQLTransientConnectionException7.toString());
      assertEquals("", sQLTransientConnectionException7.getSQLState());
      assertFalse(sQLTransientConnectionException7.equals((Object)sQLTransientConnectionException5));
      assertFalse(sQLTransientConnectionException7.equals((Object)sQLTransientConnectionException2));
      assertFalse(sQLTransientConnectionException7.equals((Object)sQLTransientConnectionException6));
      assertFalse(sQLTransientConnectionException7.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLTransientConnectionException7.equals((Object)sQLTransientConnectionException3));
      assertFalse(sQLTransientConnectionException7.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException7.equals((Object)sQLTransientConnectionException4));
      
      sQLTransientConnectionExceptionArray0[7] = sQLTransientConnectionException7;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, 0);
      assertEquals(8, sQLTransientConnectionExceptionArray0.length);
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) resettableListIterator0;
      MapIterator<SQLTransientConnectionException, SQLDataException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<SQLTransientConnectionException, SQLNonTransientException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTransientConnectionException, ? extends SQLNonTransientException>) mapIterator0);
      assertNotNull(mapIterator1);
      
      iteratorArray0[1] = (Iterator<SQLTransientConnectionException>) mapIterator1;
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.unmodifiableIterator(iteratorArray0[1]);
      assertEquals(6, iteratorArray0.length);
      assertNotNull(iterator0);
      
      iteratorArray0[2] = iterator0;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator1);
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.equals((Object)resettableListIterator0));
      
      iteratorArray0[3] = (Iterator<SQLTransientConnectionException>) resettableListIterator1;
      MapIterator<SQLTransientConnectionException, Locale.FilteringMode> mapIterator2 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator2);
      
      MapIterator<SQLTransientConnectionException, Locale.FilteringMode> mapIterator3 = IteratorUtils.unmodifiableMapIterator(mapIterator2);
      assertNotNull(mapIterator3);
      assertFalse(mapIterator3.equals((Object)mapIterator2));
      
      MapIterator<SQLTransientConnectionException, Locale.FilteringMode> mapIterator4 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTransientConnectionException, ? extends Locale.FilteringMode>) mapIterator3);
      assertNotNull(mapIterator4);
      assertSame(mapIterator3, mapIterator4);
      assertSame(mapIterator4, mapIterator3);
      assertFalse(mapIterator2.equals((Object)mapIterator3));
      assertFalse(mapIterator3.equals((Object)mapIterator2));
      assertFalse(mapIterator4.equals((Object)mapIterator2));
      
      iteratorArray0[4] = (Iterator<SQLTransientConnectionException>) mapIterator4;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) mapIterator0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 4);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      classArray0[0] = class0;
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties0);
      assertNotNull(resettableIterator0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      DataTruncation dataTruncation0 = new DataTruncation(10, true, true, 16, 808);
      assertNotNull(dataTruncation0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 16;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Enumeration must not be null", "Enumeration must not be null", (-17), longArray0, dataTruncation0);
      assertEquals(1, longArray0.length);
      assertNotNull(batchUpdateException0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Enumeration must not be null", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: Enumeration must not be null", batchUpdateException0.toString());
      assertEquals("Enumeration must not be null", batchUpdateException0.getSQLState());
      assertEquals((-17), batchUpdateException0.getErrorCode());
      assertArrayEquals(new long[] {16L}, longArray0);
      
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0, false);
      assertEquals(1, longArray0.length);
      assertNotNull(singletonIterator0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Enumeration must not be null", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: Enumeration must not be null", batchUpdateException0.toString());
      assertEquals("Enumeration must not be null", batchUpdateException0.getSQLState());
      assertEquals((-17), batchUpdateException0.getErrorCode());
      assertTrue(singletonIterator0.hasNext());
      assertArrayEquals(new long[] {16L}, longArray0);
      
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      Transformer<BatchUpdateException, String> transformer0 = MapTransformer.mapTransformer((Map<? super BatchUpdateException, ? extends String>) hashMap1);
      assertNotNull(transformer0);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(hashMap1, hashMap0);
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      ListIteratorWrapper<BatchUpdateException> listIteratorWrapper0 = new ListIteratorWrapper<BatchUpdateException>(singletonIterator0);
      assertEquals(1, longArray0.length);
      assertNotNull(listIteratorWrapper0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Enumeration must not be null", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: Enumeration must not be null", batchUpdateException0.toString());
      assertEquals("Enumeration must not be null", batchUpdateException0.getSQLState());
      assertEquals((-17), batchUpdateException0.getErrorCode());
      assertTrue(singletonIterator0.hasNext());
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertArrayEquals(new long[] {16L}, longArray0);
      
      String string0 = IteratorUtils.toString((Iterator<BatchUpdateException>) listIteratorWrapper0, (Transformer<? super BatchUpdateException, String>) transformer0);
      assertEquals("[null]", string0);
      assertEquals(1, longArray0.length);
      assertNotNull(string0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Enumeration must not be null", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: Enumeration must not be null", batchUpdateException0.toString());
      assertEquals("Enumeration must not be null", batchUpdateException0.getSQLState());
      assertEquals((-17), batchUpdateException0.getErrorCode());
      assertFalse(singletonIterator0.hasNext());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(listIteratorWrapper0.hasPrevious());
      assertArrayEquals(new long[] {16L}, longArray0);
      assertNotSame(hashMap1, hashMap0);
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Hashtable<BatchUpdateException, SQLIntegrityConstraintViolationException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) linkedList0);
      assertNotNull(resettableListIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) linkedList0);
      assertNotNull(resettableListIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ArrayDeque<InstanceofPredicate>[] arrayDequeArray0 = (ArrayDeque<InstanceofPredicate>[]) Array.newInstance(ArrayDeque.class, 1);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      ArrayDeque<InstanceofPredicate> arrayDeque1 = arrayDeque0.clone();
      assertNotNull(arrayDeque1);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      
      boolean boolean0 = arrayDeque0.removeFirstOccurrence(sQLTimeoutException0);
      assertFalse(boolean0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      
      arrayDequeArray0[0] = arrayDeque0;
      ResettableListIterator<ArrayDeque<InstanceofPredicate>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayDequeArray0);
      assertEquals(1, arrayDequeArray0.length);
      assertNotNull(resettableListIterator0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("l<}(", sQLTimeoutException0);
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: l<}(", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("l<}(", sQLRecoverableException0.getMessage());
      
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableException0);
      assertNotNull(sQLRecoverableException1);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: l<}(", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("l<}(", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: l<}(", sQLRecoverableException1.getMessage());
      assertNull(sQLRecoverableException1.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLRecoverableException: l<}(", sQLRecoverableException1.toString());
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("l<}(");
      assertNotNull(sQLRecoverableException2);
      assertNull(sQLRecoverableException2.getSQLState());
      assertEquals("l<}(", sQLRecoverableException2.getMessage());
      assertEquals(0, sQLRecoverableException2.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: l<}(", sQLRecoverableException2.toString());
      assertFalse(sQLRecoverableException2.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException2.equals((Object)sQLRecoverableException1));
      
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("*!", "{\"");
      assertNotNull(sQLRecoverableException3);
      assertEquals("java.sql.SQLRecoverableException: *!", sQLRecoverableException3.toString());
      assertEquals("*!", sQLRecoverableException3.getMessage());
      assertEquals("{\"", sQLRecoverableException3.getSQLState());
      assertEquals(0, sQLRecoverableException3.getErrorCode());
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException2));
      
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("", "Wi(:9kA`@0S7z2");
      assertNotNull(sQLRecoverableException4);
      assertEquals("", sQLRecoverableException4.getMessage());
      assertEquals("Wi(:9kA`@0S7z2", sQLRecoverableException4.getSQLState());
      assertEquals(0, sQLRecoverableException4.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException4.toString());
      assertFalse(sQLRecoverableException4.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException4.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException4.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException4.equals((Object)sQLRecoverableException3));
      
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException("Wi(:9kA`@0S7z2");
      assertNotNull(sQLRecoverableException5);
      assertNull(sQLRecoverableException5.getSQLState());
      assertEquals("Wi(:9kA`@0S7z2", sQLRecoverableException5.getMessage());
      assertEquals("java.sql.SQLRecoverableException: Wi(:9kA`@0S7z2", sQLRecoverableException5.toString());
      assertEquals(0, sQLRecoverableException5.getErrorCode());
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException3));
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException5.equals((Object)sQLRecoverableException4));
      
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException("Wi(:9kA`@0S7z2", "NMTW2", sQLRecoverableException0);
      assertNotNull(sQLRecoverableException6);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: Wi(:9kA`@0S7z2", sQLRecoverableException6.toString());
      assertEquals("NMTW2", sQLRecoverableException6.getSQLState());
      assertEquals(0, sQLRecoverableException6.getErrorCode());
      assertEquals("Wi(:9kA`@0S7z2", sQLRecoverableException6.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: l<}(", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("l<}(", sQLRecoverableException0.getMessage());
      assertFalse(sQLRecoverableException6.equals((Object)sQLRecoverableException4));
      assertFalse(sQLRecoverableException6.equals((Object)sQLRecoverableException5));
      assertFalse(sQLRecoverableException6.equals((Object)sQLRecoverableException3));
      assertFalse(sQLRecoverableException6.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException6.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException6.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException4));
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException5));
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException3));
      
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      SQLRecoverableException sQLRecoverableException7 = new SQLRecoverableException("n*Mc'By{", "Wi(:9kA`@0S7z2");
      assertNotNull(sQLRecoverableException7);
      assertEquals("Wi(:9kA`@0S7z2", sQLRecoverableException7.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: n*Mc'By{", sQLRecoverableException7.toString());
      assertEquals("n*Mc'By{", sQLRecoverableException7.getMessage());
      assertEquals(0, sQLRecoverableException7.getErrorCode());
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException3));
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException6));
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException5));
      assertFalse(sQLRecoverableException7.equals((Object)sQLRecoverableException4));
      
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException7;
      ObjectArrayIterator<SQLRecoverableException> objectArrayIterator0 = new ObjectArrayIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      assertEquals(8, sQLRecoverableExceptionArray0.length);
      assertNotNull(objectArrayIterator0);
      assertEquals(8, objectArrayIterator0.getEndIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLRecoverableException>) objectArrayIterator0);
      assertEquals(8, sQLRecoverableExceptionArray0.length);
      assertNotNull(iterator0);
      assertEquals(8, objectArrayIterator0.getEndIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("3M2GMd?DE:[2kN~s");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: 3M2GMd?DE:[2kN~s", sQLFeatureNotSupportedException0.toString());
      assertEquals("3M2GMd?DE:[2kN~s", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("2;'+d ", "2;'+d ", 0, sQLFeatureNotSupportedException0);
      assertNotNull(sQLFeatureNotSupportedException1);
      assertEquals("java.sql.SQLFeatureNotSupportedException: 3M2GMd?DE:[2kN~s", sQLFeatureNotSupportedException0.toString());
      assertEquals("3M2GMd?DE:[2kN~s", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: 2;'+d ", sQLFeatureNotSupportedException1.toString());
      assertEquals("2;'+d ", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("2;'+d ", sQLFeatureNotSupportedException1.getMessage());
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException2);
      assertNull(sQLFeatureNotSupportedException2.getMessage());
      assertNull(sQLFeatureNotSupportedException2.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException2.toString());
      assertEquals(0, sQLFeatureNotSupportedException2.getErrorCode());
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException1));
      
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException((String) null);
      assertNotNull(sQLFeatureNotSupportedException3);
      assertNull(sQLFeatureNotSupportedException3.getMessage());
      assertNull(sQLFeatureNotSupportedException3.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException3.toString());
      assertEquals(0, sQLFeatureNotSupportedException3.getErrorCode());
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException2));
      
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException4);
      assertNull(sQLFeatureNotSupportedException4.getMessage());
      assertNull(sQLFeatureNotSupportedException4.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException4.toString());
      assertEquals(0, sQLFeatureNotSupportedException4.getErrorCode());
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException3));
      
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("", sQLFeatureNotSupportedException1);
      assertNotNull(sQLFeatureNotSupportedException5);
      assertEquals("java.sql.SQLFeatureNotSupportedException: 3M2GMd?DE:[2kN~s", sQLFeatureNotSupportedException0.toString());
      assertEquals("3M2GMd?DE:[2kN~s", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: 2;'+d ", sQLFeatureNotSupportedException1.toString());
      assertEquals("2;'+d ", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("2;'+d ", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException5.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException5.getMessage());
      assertNull(sQLFeatureNotSupportedException5.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException5.toString());
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException4));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException4));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException4));
      
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException5);
      assertNotNull(sQLFeatureNotSupportedException6);
      assertEquals("java.sql.SQLFeatureNotSupportedException: 3M2GMd?DE:[2kN~s", sQLFeatureNotSupportedException0.toString());
      assertEquals("3M2GMd?DE:[2kN~s", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: 2;'+d ", sQLFeatureNotSupportedException1.toString());
      assertEquals("2;'+d ", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("2;'+d ", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException5.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException5.getMessage());
      assertNull(sQLFeatureNotSupportedException5.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException5.toString());
      assertNull(sQLFeatureNotSupportedException6.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException6.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException6.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException6.getMessage());
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException4));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException5));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException5));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException4));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException5.equals((Object)sQLFeatureNotSupportedException4));
      assertFalse(sQLFeatureNotSupportedException6.equals((Object)sQLFeatureNotSupportedException5));
      assertFalse(sQLFeatureNotSupportedException6.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException6.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException6.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException6.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException6.equals((Object)sQLFeatureNotSupportedException4));
      
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException6;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, 0);
      assertEquals(6, sQLFeatureNotSupportedExceptionArray0.length);
      assertNotNull(resettableIterator0);
      
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      assertEquals(6, sQLFeatureNotSupportedExceptionArray0.length);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      OrderedIterator<PriorityQueue<BatchUpdateException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) resettableListIterator0, 3468);
      assertNotNull(list0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(3468);
      assertEquals(3468, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3468);
      assertEquals(3468, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, 3468, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator((SQLRecoverableException) null);
      assertNotNull(listIterator0);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[8];
      StringTokenizer stringTokenizer0 = new StringTokenizer("y;gD|U!", "y;gD|U!");
      assertNotNull(stringTokenizer0);
      assertEquals(0, stringTokenizer0.countTokens());
      
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("y;gD|U!");
      assertNotNull(stringTokenizer1);
      assertEquals(1, stringTokenizer1.countTokens());
      assertFalse(stringTokenizer1.equals((Object)stringTokenizer0));
      
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("y;gD|U!", "", true);
      assertNotNull(stringTokenizer2);
      assertEquals(1, stringTokenizer2.countTokens());
      assertFalse(stringTokenizer2.equals((Object)stringTokenizer0));
      assertFalse(stringTokenizer2.equals((Object)stringTokenizer1));
      
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("y;gD|U!", "", true);
      assertNotNull(stringTokenizer3);
      assertEquals(1, stringTokenizer3.countTokens());
      assertFalse(stringTokenizer3.equals((Object)stringTokenizer0));
      assertFalse(stringTokenizer3.equals((Object)stringTokenizer1));
      assertFalse(stringTokenizer3.equals((Object)stringTokenizer2));
      
      stringTokenizerArray0[3] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = new StringTokenizer("9.v_U'L4pC\"4fT", "9.v_U'L4pC\"4fT");
      assertNotNull(stringTokenizer4);
      assertEquals(0, stringTokenizer4.countTokens());
      assertFalse(stringTokenizer4.equals((Object)stringTokenizer3));
      assertFalse(stringTokenizer4.equals((Object)stringTokenizer0));
      assertFalse(stringTokenizer4.equals((Object)stringTokenizer2));
      assertFalse(stringTokenizer4.equals((Object)stringTokenizer1));
      
      stringTokenizerArray0[4] = stringTokenizer4;
      StringTokenizer stringTokenizer5 = new StringTokenizer("c ");
      assertNotNull(stringTokenizer5);
      assertEquals(1, stringTokenizer5.countTokens());
      assertFalse(stringTokenizer5.equals((Object)stringTokenizer1));
      assertFalse(stringTokenizer5.equals((Object)stringTokenizer0));
      assertFalse(stringTokenizer5.equals((Object)stringTokenizer4));
      assertFalse(stringTokenizer5.equals((Object)stringTokenizer3));
      assertFalse(stringTokenizer5.equals((Object)stringTokenizer2));
      
      stringTokenizerArray0[5] = stringTokenizer5;
      StringTokenizer stringTokenizer6 = new StringTokenizer("jY?[=xhZe?#*&\"", "MapIterator must not be null", true);
      assertNotNull(stringTokenizer6);
      assertEquals(3, stringTokenizer6.countTokens());
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer3));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer0));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer4));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer1));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer5));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer2));
      
      stringTokenizerArray0[6] = stringTokenizer6;
      StringTokenizer stringTokenizer7 = new StringTokenizer("MapIterator must not be null", "c ", true);
      assertNotNull(stringTokenizer7);
      assertEquals(9, stringTokenizer7.countTokens());
      assertFalse(stringTokenizer7.equals((Object)stringTokenizer3));
      assertFalse(stringTokenizer7.equals((Object)stringTokenizer6));
      assertFalse(stringTokenizer7.equals((Object)stringTokenizer0));
      assertFalse(stringTokenizer7.equals((Object)stringTokenizer5));
      assertFalse(stringTokenizer7.equals((Object)stringTokenizer2));
      assertFalse(stringTokenizer7.equals((Object)stringTokenizer1));
      assertFalse(stringTokenizer7.equals((Object)stringTokenizer4));
      
      stringTokenizerArray0[7] = stringTokenizer7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringTokenizerArray0, (-2770));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
      
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      assertNotNull(enumeration0);
      
      Iterator<SQLNonTransientException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      assertNotNull(iterator1);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      int int0 = 10;
      StackTraceElement stackTraceElement0 = new StackTraceElement("Closure must not be null", "Closure must not be null", "Closure must not be null", 10);
      assertNotNull(stackTraceElement0);
      assertEquals("Closure must not be null", stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals(10, stackTraceElement0.getLineNumber());
      assertEquals("Closure must not be null.Closure must not be null(Closure must not be null:10)", stackTraceElement0.toString());
      assertEquals("Closure must not be null", stackTraceElement0.getClassName());
      assertEquals("Closure must not be null", stackTraceElement0.getMethodName());
      
      stackTraceElementArray0[0] = stackTraceElement0;
      String string0 = null;
      String string1 = "NodeList must not be null";
      int int1 = 2142;
      StackTraceElement stackTraceElement1 = null;
      try {
        stackTraceElement1 = new StackTraceElement((String) null, "NodeList must not be null", "q ", 2142);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("W^");
      assertNotNull(singletonListIterator0);
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(singletonListIterator0.hasNext());
      
      ListIterator<String> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<String>) singletonListIterator0);
      assertNotNull(listIterator0);
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(singletonListIterator0.hasNext());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string0 = singletonListIterator0.next();
      assertEquals("W^", string0);
      assertNotNull(string0);
      assertTrue(singletonListIterator0.hasPrevious());
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.previousIndex());
      assertEquals(1, singletonListIterator0.nextIndex());
      
      String string1 = singletonListIterator0.previous();
      assertEquals("W^", string1);
      assertNotNull(string1);
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(singletonListIterator0.hasNext());
      
      String string2 = "org.apache.commons.collections4.collection.AbstractCollectionDecorator";
      // Undeclared exception!
      try { 
        singletonListIterator0.add("W^");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported by this iterator
         //
         verifyException("org.apache.commons.collections4.iterators.SingletonListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      OrderedMapIterator<TreeSet<SQLDataException>, Stack<SQLDataException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLRecoverableException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[7];
      int[] intArray0 = new int[6];
      intArray0[0] = (-1362);
      intArray0[1] = 2006;
      intArray0[2] = 0;
      intArray0[3] = (-1362);
      intArray0[4] = 0;
      intArray0[5] = 0;
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "Collection must not be null", (-1362), intArray0, sQLWarning0);
      assertEquals(6, intArray0.length);
      assertNotNull(batchUpdateException0);
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals((-1362), batchUpdateException0.getErrorCode());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("Collection must not be null", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertArrayEquals(new int[] {(-1362), 2006, 0, (-1362), 0, 0}, intArray0);
      
      DataTruncation dataTruncation0 = new DataTruncation((-1362), true, true, 2006, 0, batchUpdateException0);
      assertEquals(6, intArray0.length);
      assertNotNull(dataTruncation0);
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals((-1362), batchUpdateException0.getErrorCode());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("Collection must not be null", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertArrayEquals(new int[] {(-1362), 2006, 0, (-1362), 0, 0}, intArray0);
      
      sQLWarningArray0[0] = (SQLWarning) dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-1362), true, true, 0, 0, batchUpdateException0);
      assertEquals(6, intArray0.length);
      assertNotNull(dataTruncation1);
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals((-1362), batchUpdateException0.getErrorCode());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("Collection must not be null", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertArrayEquals(new int[] {(-1362), 2006, 0, (-1362), 0, 0}, intArray0);
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      
      sQLWarningArray0[1] = (SQLWarning) dataTruncation1;
      SQLWarning sQLWarning1 = new SQLWarning("org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator", dataTruncation0);
      assertEquals(6, intArray0.length);
      assertNotNull(sQLWarning1);
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals((-1362), batchUpdateException0.getErrorCode());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("Collection must not be null", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertNull(sQLWarning1.getSQLState());
      assertEquals("org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator", sQLWarning1.getMessage());
      assertEquals("java.sql.SQLWarning: org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator", sQLWarning1.toString());
      assertArrayEquals(new int[] {(-1362), 2006, 0, (-1362), 0, 0}, intArray0);
      assertFalse(dataTruncation0.equals((Object)dataTruncation1));
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      
      sQLWarningArray0[2] = sQLWarning1;
      SQLWarning sQLWarning2 = new SQLWarning("Collection must not be null");
      assertNotNull(sQLWarning2);
      assertNull(sQLWarning2.getSQLState());
      assertEquals("Collection must not be null", sQLWarning2.getMessage());
      assertEquals(0, sQLWarning2.getErrorCode());
      assertEquals("java.sql.SQLWarning: Collection must not be null", sQLWarning2.toString());
      assertFalse(sQLWarning2.equals((Object)sQLWarning1));
      assertFalse(sQLWarning2.equals((Object)sQLWarning0));
      
      sQLWarningArray0[3] = sQLWarning2;
      DataTruncation dataTruncation2 = new DataTruncation(0, true, true, 0, 0, sQLWarningArray0[0]);
      assertEquals(7, sQLWarningArray0.length);
      assertNotNull(dataTruncation2);
      assertEquals("Data truncation", dataTruncation2.getMessage());
      assertEquals("01004", dataTruncation2.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation2.toString());
      assertEquals(0, dataTruncation2.getErrorCode());
      assertFalse(dataTruncation2.equals((Object)dataTruncation1));
      assertFalse(dataTruncation2.equals((Object)dataTruncation0));
      
      sQLWarningArray0[4] = (SQLWarning) dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(1336, true, true, 0, 0, sQLWarningArray0[1]);
      assertEquals(7, sQLWarningArray0.length);
      assertNotNull(dataTruncation3);
      assertEquals(0, dataTruncation3.getErrorCode());
      assertEquals("Data truncation", dataTruncation3.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation3.toString());
      assertEquals("01004", dataTruncation3.getSQLState());
      assertFalse(dataTruncation3.equals((Object)dataTruncation2));
      assertFalse(dataTruncation3.equals((Object)dataTruncation0));
      assertFalse(dataTruncation3.equals((Object)dataTruncation1));
      
      sQLWarningArray0[5] = (SQLWarning) dataTruncation3;
      SQLWarning sQLWarning3 = new SQLWarning("", "*0YQ", (-3614), sQLWarningArray0[4]);
      assertEquals(7, sQLWarningArray0.length);
      assertNotNull(sQLWarning3);
      assertEquals((-3614), sQLWarning3.getErrorCode());
      assertEquals("", sQLWarning3.getMessage());
      assertEquals("java.sql.SQLWarning: ", sQLWarning3.toString());
      assertEquals("*0YQ", sQLWarning3.getSQLState());
      assertFalse(sQLWarning3.equals((Object)sQLWarning1));
      assertFalse(sQLWarning3.equals((Object)sQLWarning2));
      assertFalse(sQLWarning3.equals((Object)sQLWarning0));
      
      sQLWarningArray0[6] = sQLWarning3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLWarningArray0, (-1362), (-1146));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MapIterator<Locale.FilteringMode, Object> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Transformer<Object, SQLTimeoutException> transformer0 = ConstantTransformer.nullTransformer();
      assertNotNull(transformer0);
      
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.objectGraphIterator((SQLTimeoutException) null, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer0);
      assertNotNull(iterator0);
      
      Hashtable<InstanceofPredicate, Transformer<Object, SQLFeatureNotSupportedException>> hashtable0 = new Hashtable<InstanceofPredicate, Transformer<Object, SQLFeatureNotSupportedException>>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      Transformer<Object, SQLFeatureNotSupportedException> transformer1 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends SQLFeatureNotSupportedException>>) hashtable0);
      assertNotNull(transformer1);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      Class<SQLTransientException> class0 = SQLTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      IfTransformer<Object, SQLFeatureNotSupportedException> ifTransformer0 = new IfTransformer<Object, SQLFeatureNotSupportedException>((Predicate<? super Object>) null, transformer1, transformer1);
      assertNotNull(ifTransformer0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      Iterator<SQLFeatureNotSupportedException> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) iterator0, (Transformer<? super SQLTimeoutException, ? extends SQLFeatureNotSupportedException>) ifTransformer0);
      assertNotNull(iterator1);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      OrderedMapIterator<ArrayDeque<SQLIntegrityConstraintViolationException>, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties0);
      assertNotNull(resettableIterator0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      Iterable<Properties> iterable0 = IteratorUtils.asIterable((Iterator<? extends Properties>) resettableIterator0);
      assertNotNull(iterable0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      OrderedIterator<PriorityQueue<SQLNonTransientException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) properties0, 1269, 1238);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(2453, true, true, 2697, 2843, (Throwable) null);
      assertNotNull(dataTruncation0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      dataTruncation0.forEach(consumer0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation0, 0, (-1179));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
      
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      assertNotNull(enumeration0);
      
      Iterator<SQLNonTransientException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      assertNotNull(iterator1);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      Properties[] propertiesArray0 = new Properties[8];
      propertiesArray0[4] = properties0;
      propertiesArray0[6] = properties0;
      Properties properties1 = new Properties();
      assertNotNull(properties1);
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertTrue(properties1.equals((Object)properties0));
      
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = 0;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("tTC)]T/R/", "tTC)]T/R/", 0, hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Zdh=`r~~8~SJpo8U");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tTC)]T/R/");
      String string0 = "";
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) hashMap0;
      objectArray0[2] = (Object) "Zdh=`r~~8~SJpo8U";
      objectArray0[3] = (Object) "tTC)]T/R/";
      mockPrintStream0.format("", objectArray0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.put("WoUhyVS;Poj587m", clientInfoStatus0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      sQLClientInfoException1.printStackTrace((PrintStream) mockPrintStream1);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLClientInfoException1);
      IteratorUtils.size(iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) mockPrintStream1, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("*sq%K_lX]qpI[bT");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.size(resettableIterator0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[3];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("!qGIeZ79@A", "!qGIeZ79@A");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("!qGIeZ79@A", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException1;
      EmptyIterator.resettableEmptyIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
      try { 
        IfTransformer.ifTransformer((Predicate<? super SQLClientInfoException>) null, (Transformer<? super SQLClientInfoException, ? extends String>) transformer0, (Transformer<? super SQLClientInfoException, ? extends String>) transformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      IteratorUtils.emptyIterator();
      String string0 = null;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) instanceofPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("*sq%K_lX]qpI[bT");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.size(resettableIterator0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[3];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("!qGIeZ79@A", "!qGIeZ79@A");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("!qGIeZ79@A", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("*sq%K_lX]qpI[bT", "Iterator must not be null", 0, sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException2;
      String string0 = "44Uq0#h>k6K\\q";
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("Iterator must not be null", "44Uq0#h>k6Kq", 0);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException3;
      int int0 = 0;
      IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, 0);
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      IteratorUtils.emptyOrderedMapIterator();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 3);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("44Uq0#h>k6Kq", sQLTransactionRollbackException2);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<ArrayList<Integer>, SQLSyntaxErrorException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Iterator<LinkedHashSet<DataTruncation>>[] iteratorArray0 = (Iterator<LinkedHashSet<DataTruncation>>[]) Array.newInstance(Iterator.class, 4);
      MapIterator<LinkedHashSet<DataTruncation>, SQLDataException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[0] = (Iterator<LinkedHashSet<DataTruncation>>) mapIterator0;
      MapIterator<LinkedHashSet<DataTruncation>, LinkedList<Object>> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[1] = (Iterator<LinkedHashSet<DataTruncation>>) mapIterator1;
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends LinkedHashSet<DataTruncation>>) mapIterator0, (-1030L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MapIterator<String, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.singletonIterator(sQLClientInfoException0);
      SkippingIterator<SQLClientInfoException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLClientInfoException>) resettableIterator0, 0L);
      sQLClientInfoException0.getStackTrace();
      IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) skippingIterator0, 16);
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyMapIterator();
      SQLDataException sQLDataException0 = new SQLDataException("", (String) null);
      ArrayListIterator<SQLIntegrityConstraintViolationException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLIntegrityConstraintViolationException>(sQLDataException0, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Entry does not exist: ");
      Node node0 = iIOMetadataNode0.cloneNode(false);
      IteratorUtils.nodeListIterator(node0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTransientException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0, (Collection<? super SQLIntegrityConstraintViolationException>) linkedHashSet0);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      IteratorUtils.singletonIterator(linkedHashSet1);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>) null, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("a`2", "suffix may not be null", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLClientInfoException1);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("Collection must not be null", (Map<String, ClientInfoStatus>) null, sQLRecoverableException0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException(hashMap0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("Collection must not be null", "", 0, (Map<String, ClientInfoStatus>) null, sQLRecoverableException0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) orderedMapIterator0, (Iterator<? extends IIOMetadataNode>) orderedMapIterator0);
      IteratorUtils.unmodifiableIterator(iterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedException0.setNextException(sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("?D");
      sQLFeatureNotSupportedException1.fillInStackTrace();
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) objectArrayListIterator0, (-1676L), (-1676L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) properties0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.iterators.LoopingListIterator");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
