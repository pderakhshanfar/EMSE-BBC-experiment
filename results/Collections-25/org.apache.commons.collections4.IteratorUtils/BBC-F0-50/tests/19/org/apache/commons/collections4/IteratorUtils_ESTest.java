/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:48:22 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.TreeSet;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      BoundedIterator<SQLIntegrityConstraintViolationException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0, 1L);
      ZippingIterator<SQLIntegrityConstraintViolationException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) boundedIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) boundedIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OrderedMapIterator<DataTruncation, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<DataTruncation, SQLClientInfoException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, SQLClientInfoException>) orderedMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<Properties> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(listIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Hashtable<Locale.LanguageRange, Locale.Category> hashtable0 = new Hashtable<Locale.LanguageRange, Locale.Category>();
      EntrySetMapIterator<Locale.LanguageRange, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<Locale.LanguageRange, Locale.Category>(hashtable0);
      ListIterator<Locale.LanguageRange> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Locale.LanguageRange>) entrySetMapIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(linkedList0);
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) reverseListIterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 12);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, class0);
      assertEquals(1, sQLFeatureNotSupportedExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      OrderedMapIterator<DataTruncation, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) zippingIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MapIterator<SQLDataException, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      SkippingIterator<SQLDataException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLDataException>) mapIterator0, 1885L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(linkedList0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) reverseListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) batchUpdateException0, comparator0);
      BatchUpdateException batchUpdateException1 = IteratorUtils.find((Iterator<BatchUpdateException>) resettableIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.toString());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 1);
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<DataTruncation>) orderedIterator0;
      Iterator<DataTruncation> iterator0 = IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ListIterator<SQLRecoverableException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) listIterator0, (Iterator<? extends SQLRecoverableException>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      ResettableListIterator<Predicate<Object>> resettableListIterator0 = IteratorUtils.arrayListIterator(predicateArray0, 1);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Closure<SQLNonTransientConnectionException>[] closureArray0 = (Closure<SQLNonTransientConnectionException>[]) Array.newInstance(Closure.class, 5);
      ResettableListIterator<Closure<SQLNonTransientConnectionException>> resettableListIterator0 = IteratorUtils.arrayListIterator(closureArray0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[0];
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Iterator<Iterator<SQLFeatureNotSupportedException>>[] iteratorArray0 = (Iterator<Iterator<SQLFeatureNotSupportedException>>[]) Array.newInstance(Iterator.class, 7);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Iterator<SQLFeatureNotSupportedException>>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) orderedMapIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<SQLTransactionRollbackException>[] linkedListArray0 = (LinkedList<SQLTransactionRollbackException>[]) Array.newInstance(LinkedList.class, 4);
      ObjectArrayListIterator<LinkedList<SQLTransactionRollbackException>> objectArrayListIterator0 = new ObjectArrayListIterator<LinkedList<SQLTransactionRollbackException>>(linkedListArray0);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("");
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<LinkedList<SQLTransactionRollbackException>>) objectArrayListIterator0, (Predicate<? super LinkedList<SQLTransactionRollbackException>>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      DataTruncation dataTruncation0 = new DataTruncation((-1868), true, true, 10, 1);
      Iterator<Object> iterator0 = IteratorUtils.objectGraphIterator((Object) dataTruncation0, (Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll(iterator0, (Predicate<? super Object>) equalPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLClientInfoException>) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransientConnectionException>) null, (-1819L), (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Locale.Category>) null, (long) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTransientConnectionException[]) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Hashtable<IIOMetadataNode, SQLClientInfoException>[] hashtableArray0 = (Hashtable<IIOMetadataNode, SQLClientInfoException>[]) Array.newInstance(Hashtable.class, 5);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(hashtableArray0, (-561));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 805);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) enumSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[9];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 2, (-2803));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[5];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 235, (-2103));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 8);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(enumSetArray0, 35);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Locale.LanguageRange[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1, (-595));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Closure<SQLClientInfoException> closure0 = NOPClosure.nopClosure();
      Properties[] propertiesArray0 = new Properties[4];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      ObjectArrayIterator<Properties> objectArrayIterator0 = new ObjectArrayIterator<Properties>(propertiesArray0);
      Transformer<Object, SQLClientInfoException> transformer0 = InvokerTransformer.invokerTransformer("?'");
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.transformedIterator((Iterator<?>) objectArrayIterator0, (Transformer<? super Object, ? extends SQLClientInfoException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply(iterator0, (Closure<? super SQLClientInfoException>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '?'' on 'class java.util.Properties' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Closure<SQLClientInfoException> closure0 = NOPClosure.nopClosure();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("The collection must not be null", hashMap0, sQLTimeoutException0);
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) singletonListIterator0);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      ListIteratorWrapper<SQLClientInfoException> listIteratorWrapper0 = new ListIteratorWrapper<SQLClientInfoException>(resettableListIterator0);
      // Undeclared exception!
      IteratorUtils.apply((Iterator<SQLClientInfoException>) listIteratorWrapper0, (Closure<? super SQLClientInfoException>) closure0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      ResettableIterator<Boolean> resettableIterator0 = IteratorUtils.arrayIterator(booleanArray0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<Boolean>) resettableIterator0, (Transformer<? super Boolean, String>) transformer0, "a|", "a|", "a|");
      assertEquals("a|a|", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(4060).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) batchUpdateException0, comparator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(batchUpdateException0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) listIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      BoundedIterator<SQLIntegrityConstraintViolationException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0, 1203L, 1203L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ListIterator<Boolean> listIterator0 = IteratorUtils.singletonListIterator((Boolean) null);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("[");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      String string0 = IteratorUtils.toString((Iterator<Boolean>) listIterator0, (Transformer<? super Boolean, String>) factoryTransformer0, "9+tFZj_,HE;0*-$.b!", "Zk@w", "");
      assertTrue(listIterator0.hasPrevious());
      assertEquals("Zk@w[", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      OrderedMapIterator<Boolean, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Boolean, SQLNonTransientException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Boolean, ? extends SQLNonTransientException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Boolean>) mapIterator0, (Transformer<? super Boolean, String>) null, "r", (String) null, "[/n<c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      int int0 = IteratorUtils.size(singletonListIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ListIterator<SQLRecoverableException> listIterator0 = EmptyListIterator.emptyListIterator();
      int int0 = IteratorUtils.size(listIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[KUIe@", "[KUIe@", 1045);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = IteratorUtils.get((Iterator<SQLFeatureNotSupportedException>) listIterator0, 0);
      assertEquals("[KUIe@", sQLFeatureNotSupportedException1.getSQLState());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 1877);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLFeatureNotSupportedException>) listIterator0, 696);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 695
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ListIterator<LinkedHashSet<TreeSet>> listIterator0 = IteratorUtils.singletonListIterator((LinkedHashSet<TreeSet>) null);
      boolean boolean0 = IteratorUtils.isEmpty(listIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ResettableIterator<ArrayList<Locale.LanguageRange>> resettableIterator0 = IteratorUtils.emptyIterator();
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[9];
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) objectArrayListIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[3];
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) objectArrayListIterator0, (Predicate<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) objectArrayListIterator0, (Predicate<? super IIOMetadataNode>) andPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AndPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLInvalidAuthorizationSpecException0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) listIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[0];
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      List<SQLTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientException>) resettableIterator0, 1118);
      LoopingListIterator<SQLTransientException> loopingListIterator0 = new LoopingListIterator<SQLTransientException>(list0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("`fVC:Hr;\";I~U");
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLTransientException>) loopingListIterator0, (Object) iIOMetadataNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<StringTokenizer>) null, (Predicate<? super StringTokenizer>) instanceofPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicateArray0[0];
      Predicate<Integer> predicate1 = AnyPredicate.anyPredicate((Predicate<? super Integer>[]) predicateArray0);
      PredicateTransformer<Integer> predicateTransformer0 = new PredicateTransformer<Integer>(predicate1);
      Integer integer0 = new Integer((-1040));
      Boolean boolean0 = predicateTransformer0.transform(integer0);
      ResettableIterator<Boolean> resettableIterator0 = IteratorUtils.singletonIterator(boolean0);
      Boolean boolean1 = IteratorUtils.find((Iterator<Boolean>) resettableIterator0, (Predicate<? super Boolean>) predicate0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      PredicateTransformer<Integer> predicateTransformer0 = new PredicateTransformer<Integer>(instanceofPredicate0);
      Integer integer0 = new Integer(2439);
      Boolean boolean0 = predicateTransformer0.transform(integer0);
      ListIterator<Boolean> listIterator0 = IteratorUtils.singletonListIterator(boolean0);
      MapIterator<SQLDataException, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) mapIterator0, (Iterator<?>) listIterator0, (Iterator<?>) mapIterator0);
      IteratorUtils.find((Iterator<Object>) zippingIterator0, (Predicate<? super Object>) instanceofPredicate0);
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ResettableIterator<Boolean> resettableIterator0 = IteratorUtils.singletonIterator((Boolean) null);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Boolean>) resettableIterator0, (Predicate<? super Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Object object0 = IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) predicate0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicateArray0[1], closure0, true);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(nonePredicate0, closure0, whileClosure0);
      IteratorUtils.apply((Iterator<SQLClientInfoException>) null, (Closure<? super SQLClientInfoException>) ifClosure0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLClientInfoException>) null, (Closure<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Closure<SQLClientInfoException> closure0 = NOPClosure.nopClosure();
      Properties[] propertiesArray0 = new Properties[4];
      ObjectArrayIterator<Properties> objectArrayIterator0 = new ObjectArrayIterator<Properties>(propertiesArray0);
      Transformer<Object, SQLClientInfoException> transformer0 = InvokerTransformer.invokerTransformer("?'");
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.transformedIterator((Iterator<?>) objectArrayIterator0, (Transformer<? super Object, ? extends SQLClientInfoException>) transformer0);
      IteratorUtils.apply(iterator0, (Closure<? super SQLClientInfoException>) closure0);
      assertFalse(objectArrayIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLNonTransientConnectionException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(singletonListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      OrderedIterator<Locale.Category> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Locale.Category>) orderedIterator0, (-85));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Predicate<Object>>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLDataException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MapIterator<SQLDataException, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      SQLDataException[] sQLDataExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLDataException>) mapIterator0, class0);
      assertEquals(0, sQLDataExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[19];
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      List<SQLTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientException>) resettableIterator0, 1118);
      LoopingListIterator<SQLTransientException> loopingListIterator0 = new LoopingListIterator<SQLTransientException>(list0);
      ListIterator<Object> listIterator0 = IteratorUtils.toListIterator((Iterator<?>) loopingListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(instanceofPredicate0);
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(notPredicate0);
      Iterable<Predicate<Object>> iterable0 = IteratorUtils.asIterable((Iterator<? extends Predicate<Object>>) singletonIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, Locale.Category> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0, (Collection<? super SQLTransactionRollbackException>) linkedList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PriorityQueue<SQLTransientException> priorityQueue0 = new PriorityQueue<SQLTransientException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) null, (Collection<? super SQLTransactionRollbackException>) priorityQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0, (Collection<? super SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) resettableIterator0);
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("{}");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) listIterator0, 117);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      ArrayDeque<IIOMetadataNode> arrayDeque0 = new ArrayDeque<IIOMetadataNode>(linkedList0);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) arrayDeque0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      Properties properties0 = new Properties();
      Predicate<Properties> predicate0 = IdentityPredicate.identityPredicate(properties0);
      ListIterator<Properties> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) listIterator0, (Predicate<? super Properties>) predicate0);
      assertFalse(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Properties properties0 = new Properties();
      Predicate<Properties> predicate0 = IdentityPredicate.identityPredicate(properties0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) null, (Predicate<? super Properties>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) listIterator0, (Predicate<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[0];
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      List<SQLTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientException>) resettableIterator0, 1118);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) list0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Iterator<SQLFeatureNotSupportedException>>) null, (Predicate<? super Iterator<SQLFeatureNotSupportedException>>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Iterator<Iterator<SQLFeatureNotSupportedException>>[] iteratorArray0 = (Iterator<Iterator<SQLFeatureNotSupportedException>>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Iterator<SQLFeatureNotSupportedException>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Iterator<SQLFeatureNotSupportedException>>[]) iteratorArray0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(zippingIterator0);
      Iterator<Iterator<SQLFeatureNotSupportedException>> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Iterator<SQLFeatureNotSupportedException>>) zippingIterator0, (Predicate<? super Iterator<SQLFeatureNotSupportedException>>) identityPredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<?>) resettableIterator0, (Transformer<? super Object, ? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 7);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Boolean>) null, 1957L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIteratorWrapper<SQLTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransientConnectionException>(resettableIterator0);
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 1);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("&SA3$sFrOvz#[I");
      SwitchTransformer<Object, String> switchTransformer0 = new SwitchTransformer<Object, String>((Predicate<? super Object>[]) null, transformerArray0, transformer0);
      String string0 = IteratorUtils.toString((Iterator<SQLTransientConnectionException>) listIteratorWrapper0, (Transformer<? super SQLTransientConnectionException, String>) switchTransformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "Av\"x^m>lR", 61, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 8);
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator0 = IteratorUtils.arrayIterator(enumSetArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ListIterator<SQLRecoverableException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) listIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("r");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Iterator<SQLFeatureNotSupportedException>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<String> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<String> iterator0 = IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 0, 4252);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLException[]) null, 3414, (-1088));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MapIterator<Hashtable<DataTruncation, SQLIntegrityConstraintViolationException>, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      String string0 = IteratorUtils.toString((Iterator<Hashtable<DataTruncation, SQLIntegrityConstraintViolationException>>) mapIterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      OrderedMapIterator<DataTruncation, Closure<Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation> iterator0 = IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) zippingIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("HBA");
      Transformer<SQLException, SQLSyntaxErrorException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) transformer0);
      Object[] objectArray0 = IteratorUtils.toArray(iterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      BoundedIterator<DataTruncation> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) iterator0, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 5);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicateArray0[1], closure0, true);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(nonePredicate0, whileClosure0, whileClosure0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) ifClosure0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 584, (-3188));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLIntegrityConstraintViolationException[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[2];
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      List<SQLTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientException>) resettableIterator0, 2);
      LoopingListIterator<SQLTransientException> loopingListIterator0 = new LoopingListIterator<SQLTransientException>(list0);
      // Undeclared exception!
      IteratorUtils.contains((Iterator<SQLTransientException>) loopingListIterator0, (Object) "`fVC:Hr;\";I~U");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "", 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[KUIe@", "[KUIe@", 1045);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLFeatureNotSupportedException>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      OrderedMapIterator<Boolean, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Boolean, SQLException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Boolean, SQLException>(orderedMapIterator0);
      Transformer<Boolean, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = IteratorUtils.toString((Iterator<Boolean>) abstractOrderedMapIteratorDecorator0, (Transformer<? super Boolean, String>) transformer0, "DN61B", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ListIterator<SQLNonTransientException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) listIterator0, (-225));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLDataException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet0);
      ListIterator<EnumSet<Locale.Category>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<EnumSet<Locale.Category>>) singletonListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }
}
