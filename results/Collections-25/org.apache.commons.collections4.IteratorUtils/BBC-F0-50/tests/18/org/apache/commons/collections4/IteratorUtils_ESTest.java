/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:49:29 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Predicate<Object>[]) null, 3417);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      int[] intArray0 = new int[1];
      intArray0[0] = 2820;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(intArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException();
      batchUpdateException3.getLargeUpdateCounts();
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<BatchUpdateException>) objectArrayListIterator0, (Object) batchUpdateException0);
      assertEquals(1, objectArrayListIterator0.nextIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.contains((Iterator<BatchUpdateException>) resettableListIterator0, (Object) resettableListIterator0);
      ResettableListIterator<BatchUpdateException> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.contains((Iterator<BatchUpdateException>) null, (Object) resettableListIterator1);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      Iterator<DataTruncation> iterator0 = linkedList0.descendingIterator();
      IteratorUtils.toString(iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(1);
      linkedHashSet0.add(integer0);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) linkedHashSet0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<Integer>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Vector<ComparatorPredicate.Criterion> vector0 = new Vector<ComparatorPredicate.Criterion>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jn-NJ$n;h");
      String[] stringArray0 = new String[10];
      stringArray0[0] = "f,B";
      stringArray0[1] = "f,B";
      stringArray0[2] = "b7jod}Fc*V=u";
      stringArray0[3] = "";
      stringArray0[4] = "";
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      objectArrayIterator0.reset();
      int int0 = 10;
      IteratorUtils.get((Iterator<String>) objectArrayIterator0, 8);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Vector<ComparatorPredicate.Criterion> vector0 = new Vector<ComparatorPredicate.Criterion>();
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("prefix may not be null");
      IteratorUtils.transformedIterator((Iterator<? extends IIOMetadataNode>) orderedIterator0, (Transformer<? super IIOMetadataNode, ? extends String>) constantTransformer0);
      EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLDataException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Stack<ComparatorPredicate.Criterion> stack0 = new Stack<ComparatorPredicate.Criterion>();
      IteratorUtils.loopingListIterator((List<ComparatorPredicate.Criterion>) stack0);
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("prefix may not be null");
      IteratorUtils.transformedIterator((Iterator<? extends IIOMetadataNode>) orderedIterator0, (Transformer<? super IIOMetadataNode, ? extends String>) constantTransformer0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      String string0 = IteratorUtils.toString((Iterator<ArrayDeque<ArrayDeque>>) null, (Transformer<? super ArrayDeque<ArrayDeque>, String>) transformer0, "&n=Wtw8oomiC$\"6sS'", "]X^-MWU})B+Ik1", "Jfb l&JIj\"W*}");
      assertEquals("]X^-MWU})B+Ik1Jfb l&JIj\"W*}", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Vector<ComparatorPredicate.Criterion> vector0 = new Vector<ComparatorPredicate.Criterion>();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "f,B";
      stringArray0[1] = "f,B";
      stringArray0[2] = "b7jod}Fc*V=u";
      stringArray0[3] = "";
      stringArray0[4] = "";
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      objectArrayIterator0.reset();
      int int0 = 10;
      IteratorUtils.get((Iterator<String>) objectArrayIterator0, 2);
      Iterator<Boolean> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Boolean[] booleanArray0 = new Boolean[0];
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.arrayListIterator(booleanArray0, 0);
      ListIteratorWrapper<Boolean> listIteratorWrapper0 = new ListIteratorWrapper<Boolean>(resettableListIterator0);
      Class<Boolean> class0 = Boolean.class;
      Boolean[] booleanArray1 = IteratorUtils.toArray((Iterator<? extends Boolean>) listIteratorWrapper0, class0);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLException>) resettableListIterator0, (Predicate<? super SQLException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Predicate must not be null", "Predicate must not be null", 25);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.IteratorUtils", "`,0i)] j[KV\"KR<", sQLTimeoutException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("LKdhQ{zZRBeTi", sQLTimeoutException0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator(sQLRecoverableException0);
      IteratorUtils.find((Iterator<SQLRecoverableException>) resettableIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      PredicateTransformer<Hashtable<String, IIOMetadataNode>> predicateTransformer0 = new PredicateTransformer<Hashtable<String, IIOMetadataNode>>(predicate0);
      Hashtable<String, IIOMetadataNode> hashtable0 = new Hashtable<String, IIOMetadataNode>();
      Boolean boolean0 = predicateTransformer0.transform(hashtable0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(boolean0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Vector<ComparatorPredicate.Criterion> vector0 = new Vector<ComparatorPredicate.Criterion>();
      IteratorUtils.loopingListIterator((List<ComparatorPredicate.Criterion>) vector0);
      EmptyOrderedIterator.emptyOrderedIterator();
      int int0 = (-67);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", (-67), sQLFeatureNotSupportedException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLRecoverableException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", sQLNonTransientException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException((String) null, sQLTimeoutException0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator(sQLRecoverableException1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      predicateArray0[0] = predicate0;
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      predicateArray0[2] = predicate2;
      Class<Integer> class0 = Integer.class;
      Predicate<Object> predicate3 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[3] = predicate3;
      Predicate<Object> predicate4 = FalsePredicate.falsePredicate();
      predicateArray0[4] = predicate4;
      Predicate<Object> predicate5 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate5, predicate1);
      IteratorUtils.find((Iterator<SQLRecoverableException>) resettableIterator0, (Predicate<? super SQLRecoverableException>) andPredicate0);
      PredicateTransformer<Hashtable<String, IIOMetadataNode>> predicateTransformer0 = new PredicateTransformer<Hashtable<String, IIOMetadataNode>>((Predicate<? super Hashtable<String, IIOMetadataNode>>) null);
      Hashtable<String, IIOMetadataNode> hashtable0 = new Hashtable<String, IIOMetadataNode>();
      // Undeclared exception!
      try { 
        predicateTransformer0.transform(hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.PredicateTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<ClientInfoStatus, SQLClientInfoException> hashMap0 = new HashMap<ClientInfoStatus, SQLClientInfoException>();
      EntrySetMapIterator<ClientInfoStatus, SQLClientInfoException> entrySetMapIterator0 = new EntrySetMapIterator<ClientInfoStatus, SQLClientInfoException>(hashMap0);
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends ClientInfoStatus>) entrySetMapIterator0, (Iterator<? extends ClientInfoStatus>) entrySetMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends ClientInfoStatus>) iterator0, (Iterator<? extends ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Boolean[] booleanArray0 = new Boolean[1];
      ObjectArrayIterator<Boolean> objectArrayIterator0 = new ObjectArrayIterator<Boolean>(booleanArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      NotNullPredicate.notNullPredicate();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "LKdhQ{zZRBeTi";
      stringArray0[1] = "";
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      objectArrayIterator0.reset();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<String>) objectArrayIterator0, 25);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 23
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Hashtable<SQLClientInfoException, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLClientInfoException, SQLTransactionRollbackException>();
      IteratorUtils.emptyOrderedIterator();
      int int0 = 2877;
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>(2877);
      String string0 = "";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLNonTransientConnectionException0);
      arrayDeque0.add(sQLFeatureNotSupportedException0);
      SingletonIterator<ArrayDeque<SQLFeatureNotSupportedException>> singletonIterator0 = new SingletonIterator<ArrayDeque<SQLFeatureNotSupportedException>>(arrayDeque0, false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0);
      IteratorUtils.matchesAll((Iterator<ArrayDeque<SQLFeatureNotSupportedException>>) singletonIterator0, (Predicate<? super ArrayDeque<SQLFeatureNotSupportedException>>) predicate0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[9];
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      String string1 = "X\\f<";
      SQLDataException sQLDataException0 = new SQLDataException("", "X\f<", sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLDataException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      String string2 = "Collection must not be null";
      String string3 = "";
      StackTraceElement stackTraceElement0 = new StackTraceElement("Collection must not be null", "", "A#Y8K^}jB", 2877);
      stackTraceElementArray0[0] = stackTraceElement0;
      String string4 = null;
      String string5 = "Ws(>1 fqu~GH( Bet";
      int int1 = (-1177);
      StackTraceElement stackTraceElement1 = null;
      try {
        stackTraceElement1 = new StackTraceElement((String) null, "X\f<", "Ws(>1 fqu~GH( Bet", (-1177));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      NotNullPredicate.notNullPredicate();
      IteratorUtils.isEmpty((Iterator<?>) null);
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      assertEquals(0, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      EmptyIterator.resettableEmptyIterator();
      IteratorUtils.getIterator(predicate0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) iIOMetadataNode0);
      PredicateTransformer<Hashtable<String, IIOMetadataNode>> predicateTransformer0 = new PredicateTransformer<Hashtable<String, IIOMetadataNode>>(predicate0);
      Hashtable<String, IIOMetadataNode> hashtable0 = new Hashtable<String, IIOMetadataNode>();
      Boolean boolean0 = predicateTransformer0.transform(hashtable0);
      ConstantTransformer<Object, Boolean> constantTransformer0 = new ConstantTransformer<Object, Boolean>(boolean0);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>((BatchUpdateException) null);
      IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) singletonListIterator0);
      OrderedMapIterator<SQLTimeoutException, SQLTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTransientException>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.contains((Iterator<BatchUpdateException>) resettableListIterator0, (Object) resettableListIterator0);
      IteratorUtils.emptyOrderedIterator();
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableIterator0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("KWTXk");
      IteratorUtils.getIterator(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      IteratorUtils.loopingIterator((Collection<? extends Integer>) priorityQueue0);
      Iterator<SQLTimeoutException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      OrderedMapIterator<Object, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<?>) orderedMapIterator0, (Iterator<?>) orderedMapIterator0);
      int int0 = 93;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLNonTransientConnectionException[]) null, 93, 93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      int int0 = 3;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Predicate must not be null", "", (-1387));
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", sQLRecoverableException0);
      sQLTransientException0.addSuppressed(sQLRecoverableException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("oWk^!)K:*=Z$EZ<ofx9", "Predicate must not be null", sQLTransientException0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", hashMap0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException((String) null, sQLClientInfoException0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator(sQLRecoverableException0);
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>((Transformer<? super SQLException, ? extends SQLException>) null, predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLRecoverableException>) resettableIterator0, (Predicate<? super SQLRecoverableException>) transformedPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformedPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.contains((Iterator<BatchUpdateException>) resettableListIterator0, (Object) resettableListIterator0);
      OrderedIterator<EnumSet<Locale.FilteringMode>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ZippingIterator<EnumSet<Locale.FilteringMode>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedIterator0);
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      ResettableListIterator<SQLTimeoutException> resettableListIterator1 = IteratorUtils.loopingListIterator((List<SQLTimeoutException>) vector0);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      IteratorUtils.isEmpty(zippingIterator0);
      Iterator<SQLTransientException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTransientException>) resettableListIterator1, (Predicate<? super SQLTransientException>) uniquePredicate0);
      IteratorUtils.toString(iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      vector0.spliterator();
      EmptyIterator.resettableEmptyIterator();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "_wUP8#UpI'}3i+Ft");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("_wUP8#UpI'}3i+Ft", "suffix may not be null", 1073741824, sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) resettableIterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayDeque<SQLRecoverableException> arrayDeque0 = new ArrayDeque<SQLRecoverableException>();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) arrayDeque0);
      IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) null, 4009);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) iIOMetadataNode0);
      PredicateTransformer<Hashtable<String, IIOMetadataNode>> predicateTransformer0 = new PredicateTransformer<Hashtable<String, IIOMetadataNode>>(predicate0);
      Hashtable<String, IIOMetadataNode> hashtable0 = new Hashtable<String, IIOMetadataNode>();
      Boolean boolean0 = predicateTransformer0.transform(hashtable0);
      ConstantTransformer<Object, Boolean> constantTransformer0 = new ConstantTransformer<Object, Boolean>(boolean0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(constantTransformer0);
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>(1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLNonTransientConnectionException0);
      arrayDeque0.add(sQLFeatureNotSupportedException0);
      SingletonIterator<ArrayDeque<SQLFeatureNotSupportedException>> singletonIterator0 = new SingletonIterator<ArrayDeque<SQLFeatureNotSupportedException>>(arrayDeque0, false);
      boolean boolean1 = IteratorUtils.matchesAll((Iterator<ArrayDeque<SQLFeatureNotSupportedException>>) singletonIterator0, (Predicate<? super ArrayDeque<SQLFeatureNotSupportedException>>) predicate0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableIterator0);
      Collection<Object> collection0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Boolean[] booleanArray0 = new Boolean[1];
      ObjectArrayIterator<Boolean> objectArrayIterator0 = new ObjectArrayIterator<Boolean>(booleanArray0);
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<String>) resettableListIterator0);
      ListIteratorWrapper<SQLIntegrityConstraintViolationException> listIteratorWrapper0 = null;
      try {
        listIteratorWrapper0 = new ListIteratorWrapper<SQLIntegrityConstraintViolationException>((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.ListIteratorWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) comparator0;
      objectArray0[2] = (Object) comparator0;
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0);
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(3, int0);
      
      OrderedIterator<SQLTransientException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      String string0 = IteratorUtils.toString((Iterator<SQLTransientException>) orderedIterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLDataException sQLDataException0 = new SQLDataException("", "L", 35);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, sQLDataException0);
      SQLWarning sQLWarning0 = new SQLWarning("", "", 360, sQLClientInfoException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLWarning0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("transformer may not be null", "", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("L", "", sQLWarning0);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("", "", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) orderedIterator0);
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, Boolean> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Boolean>) factory0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      IteratorUtils.find((Iterator<SQLRecoverableException>) null, (Predicate<? super SQLRecoverableException>) predicate0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 1);
      sQLSyntaxErrorException0.spliterator();
      IteratorUtils.contains((Iterator<DataTruncation>) null, (Object) sQLSyntaxErrorException0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale_FilteringMode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      ArrayDeque<SQLRecoverableException> arrayDeque0 = new ArrayDeque<SQLRecoverableException>();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) arrayDeque0);
      IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0);
      HashSet<SQLRecoverableException> hashSet0 = new HashSet<SQLRecoverableException>();
      LoopingIterator<SQLRecoverableException> loopingIterator0 = new LoopingIterator<SQLRecoverableException>(hashSet0);
      IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) loopingIterator0, 4009);
      Properties properties0 = new Properties();
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      IteratorUtils.loopingIterator((Collection<? extends Boolean>) priorityQueue0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<SQLWarning> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) orderedIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0);
      String string0 = "b{";
      int int0 = 2671;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("b{", "b{", 2671);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLRecoverableException>) resettableIterator0, (Predicate<? super SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<SQLClientInfoException, SQLTransactionRollbackException> hashMap0 = new HashMap<SQLClientInfoException, SQLTransactionRollbackException>();
      Vector<Object> vector0 = new Vector<Object>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ConstantTransformer.nullTransformer();
      Integer integer0 = new Integer(3270);
      Integer integer1 = new Integer((-1691));
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer1);
      Hashtable<SQLTimeoutException, SQLTimeoutException> hashtable0 = new Hashtable<SQLTimeoutException, SQLTimeoutException>();
      HashMap<SQLNonTransientException, SQLTimeoutException> hashMap1 = new HashMap<SQLNonTransientException, SQLTimeoutException>();
      HashMap<Object, SQLTimeoutException> hashMap2 = new HashMap<Object, SQLTimeoutException>(hashMap1);
      Transformer<Integer, SQLTimeoutException> transformer0 = MapTransformer.mapTransformer((Map<? super Integer, ? extends SQLTimeoutException>) hashMap2);
      IteratorUtils.transformedIterator((Iterator<? extends Integer>) resettableIterator0, (Transformer<? super Integer, ? extends SQLTransientException>) transformer0);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[0];
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientExceptionArray0);
      String string0 = IteratorUtils.toString((Iterator<SQLTransientException>) resettableListIterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashSet<SQLRecoverableException> hashSet0 = new HashSet<SQLRecoverableException>();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) hashSet0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLRecoverableException>) listIterator0);
      ConstantTransformer<Object, Boolean> constantTransformer0 = new ConstantTransformer<Object, Boolean>((Boolean) null);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(constantTransformer0);
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>((-3430));
      SingletonIterator<ArrayDeque<SQLFeatureNotSupportedException>> singletonIterator0 = new SingletonIterator<ArrayDeque<SQLFeatureNotSupportedException>>(arrayDeque0, false);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ArrayDeque<SQLFeatureNotSupportedException>>) singletonIterator0, (Predicate<? super ArrayDeque<SQLFeatureNotSupportedException>>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      HashMap<SQLClientInfoException, SQLTransactionRollbackException> hashMap0 = new HashMap<SQLClientInfoException, SQLTransactionRollbackException>();
      Hashtable<SQLClientInfoException, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLClientInfoException, SQLTransactionRollbackException>();
      hashtable0.putAll(hashMap0);
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      EmptyListIterator.resettableEmptyListIterator();
      int[] intArray0 = new int[4];
      intArray0[0] = 1928;
      intArray0[1] = 100;
      intArray0[2] = 10;
      intArray0[3] = 5135;
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("IteratorChain cannot be changed after the first use of a method from the Iterator interface", "Estimated size must be greater than 0", hashMap1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "IteratorChain cannot be changed after the first use of a method from the Iterator interface", intArray0, sQLClientInfoException0);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) singletonListIterator0);
      OrderedMapIterator<SQLTimeoutException, SQLTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTransientException>(orderedMapIterator0);
      Object[] objectArray0 = IteratorUtils.toArray(iterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<SQLWarning> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) orderedIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0);
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Closure<Object> closure1 = ForClosure.forClosure(10, (Closure<? super Object>) closure0);
      IteratorUtils.apply((Iterator<IIOMetadataNode>) null, (Closure<? super IIOMetadataNode>) closure1);
      ArrayListIterator<SQLFeatureNotSupportedException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLFeatureNotSupportedException>(enumeration0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Predicate must not be null", "{#", 3);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Node must not be null", "O", sQLTimeoutException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Node must not be null", sQLTransientConnectionException0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLRecoverableException>) resettableIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<ArrayDeque<SQLFeatureNotSupportedException>, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<ArrayDeque<SQLFeatureNotSupportedException>, ? extends SQLSyntaxErrorException>) orderedMapIterator0);
      TreeSet<SQLRecoverableException> treeSet0 = new TreeSet<SQLRecoverableException>();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) treeSet0);
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, Boolean> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Boolean>) factory0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      IteratorUtils.find((Iterator<SQLRecoverableException>) resettableIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      DataTruncation dataTruncation0 = new DataTruncation(554, true, false, 554, 2630);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) singletonListIterator0, (Predicate<? super DataTruncation>) predicate0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) listIterator0, (Iterator<? extends DataTruncation>) singletonListIterator0, (Iterator<? extends DataTruncation>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.contains((Iterator<DataTruncation>) zippingIterator0, (Object) dataTruncation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Boolean[] booleanArray0 = new Boolean[1];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ObjectArrayIterator<Boolean> objectArrayIterator0 = new ObjectArrayIterator<Boolean>(booleanArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Hashtable<SQLClientInfoException, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLClientInfoException, SQLTransactionRollbackException>();
      IteratorUtils.emptyOrderedIterator();
      MapIterator<BatchUpdateException, ServiceLoader<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) mapIterator0);
      OrderedMapIterator<SQLTimeoutException, SQLTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTransientException>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<SQLClientInfoException, SQLTransactionRollbackException> hashMap0 = new HashMap<SQLClientInfoException, SQLTransactionRollbackException>();
      Vector<Object> vector0 = new Vector<Object>();
      SQLException sQLException0 = new SQLException("AYSxsb?", "HR1.15eV");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("c[8!lD-FUv+<8$");
      sQLException0.setNextException(sQLRecoverableException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", sQLException0);
      IteratorUtils.getIterator(hashMap0);
      EmptyIterator.emptyIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("HR1.15eV", "HR1.15eV");
      Transformer<Object, SQLTimeoutException> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Integer>) null, (Transformer<? super Integer, ? extends SQLTransientException>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Hashtable<SQLClientInfoException, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLClientInfoException, SQLTransactionRollbackException>();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLException>) null, (Predicate<? super SQLException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) hashMap0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Integer>) null, (Predicate<? super Integer>) notPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      OrderedMapIterator<DataTruncation, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<DataTruncation, SQLFeatureNotSupportedException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      TreeSet<SQLRecoverableException> treeSet0 = new TreeSet<SQLRecoverableException>();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) treeSet0);
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, Boolean> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Boolean>) factory0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      IteratorUtils.find((Iterator<SQLRecoverableException>) resettableIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      IteratorUtils.contains((Iterator<DataTruncation>) mapIterator0, (Object) null);
      Iterator<?> iterator0 = IteratorUtils.getIterator(treeSet0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLException>) resettableListIterator0, (Predicate<? super SQLException>) predicate0);
      EmptyIterator.emptyIterator();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) singletonListIterator0, (Iterator<? extends StringTokenizer>) singletonListIterator0);
      IteratorUtils.skippingIterator((Iterator<StringTokenizer>) singletonListIterator0, 0L);
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Object> predicate1 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      IteratorUtils.matchesAny((Iterator<StringTokenizer>) zippingIterator0, (Predicate<? super StringTokenizer>) predicate1);
      ResettableListIterator<BatchUpdateException> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) resettableListIterator1);
      IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) iterator0);
      OrderedMapIterator<SQLTimeoutException, SQLTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTransientException>(orderedMapIterator0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) abstractOrderedMapIteratorDecorator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLException>) resettableListIterator0, (Predicate<? super SQLException>) predicate0);
      EmptyIterator.emptyIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("List must otb=e null", "List must otb=e null");
      StringTokenizer stringTokenizer0 = new StringTokenizer("List must otb=e null");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[8];
      stringTokenizerArray0[0] = stringTokenizer0;
      stringTokenizerArray0[1] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("", "FQL.zFh'ekn{A px", true);
      stringTokenizerArray0[2] = stringTokenizer1;
      stringTokenizerArray0[3] = stringTokenizer0;
      stringTokenizerArray0[4] = stringTokenizer0;
      stringTokenizerArray0[5] = stringTokenizer0;
      stringTokenizerArray0[7] = stringTokenizer0;
      ResettableListIterator<StringTokenizer> resettableListIterator1 = IteratorUtils.arrayListIterator(stringTokenizerArray0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) resettableListIterator1, (Iterator<? extends StringTokenizer>) singletonListIterator0);
      OrderedIterator<StringTokenizer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.skippingIterator((Iterator<StringTokenizer>) orderedIterator0, 1L);
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      IteratorUtils.matchesAny((Iterator<StringTokenizer>) singletonListIterator0, (Predicate<? super StringTokenizer>) predicate0);
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator2 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) linkedList0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator2, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator2);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLException>) resettableListIterator0, (Predicate<? super SQLException>) predicate0);
      EmptyIterator.emptyIterator();
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      Closure<SQLException> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply(iterator0, (Closure<? super SQLNonTransientConnectionException>) closure0);
      Iterator<SQLTransactionRollbackException> iterator1 = EmptyIterator.emptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) iterator1);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.spliterator();
      EmptyIterator.resettableEmptyIterator();
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Boolean>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Transformer<Object, SQLClientInfoException>[] transformerArray0 = (Transformer<Object, SQLClientInfoException>[]) Array.newInstance(Transformer.class, 1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      ConstantFactory<SQLClientInfoException> constantFactory0 = new ConstantFactory<SQLClientInfoException>(sQLClientInfoException0);
      FactoryTransformer<Object, SQLClientInfoException> factoryTransformer0 = new FactoryTransformer<Object, SQLClientInfoException>(constantFactory0);
      transformerArray0[0] = (Transformer<Object, SQLClientInfoException>) factoryTransformer0;
      IteratorUtils.arrayListIterator(transformerArray0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) listIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Iterator<? extends SQLClientInfoException>) iterator0, (Iterator<? extends SQLClientInfoException>) iterator0);
      Comparator<DataTruncation> comparator1 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator1, (Iterator<? extends DataTruncation>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<TreeSet<Predicate>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      OrderedMapIterator<DataTruncation, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<DataTruncation, SQLFeatureNotSupportedException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      TreeSet<SQLRecoverableException> treeSet0 = new TreeSet<SQLRecoverableException>();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) treeSet0);
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, Boolean> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Boolean>) factory0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      IteratorUtils.find((Iterator<SQLRecoverableException>) resettableIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      IteratorUtils.contains((Iterator<DataTruncation>) mapIterator0, (Object) orderedIterator0);
      IteratorUtils.getIterator(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Hashtable<SQLClientInfoException, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLClientInfoException, SQLTransactionRollbackException>();
      ArrayDeque<SQLRecoverableException> arrayDeque0 = new ArrayDeque<SQLRecoverableException>();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) arrayDeque0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLRecoverableException>) listIterator0);
      IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) iterator0, 4009);
      Properties properties0 = new Properties();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      IteratorUtils.loopingIterator((Collection<? extends Boolean>) priorityQueue0);
      IteratorUtils.getIterator("");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 4009, 4009);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      EmptyIterator.emptyIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ConstantTransformer.nullTransformer();
      Integer integer0 = new Integer((-1691));
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      Hashtable<SQLTimeoutException, SQLTimeoutException> hashtable0 = new Hashtable<SQLTimeoutException, SQLTimeoutException>();
      HashMap<Object, SQLTimeoutException> hashMap0 = new HashMap<Object, SQLTimeoutException>(hashtable0);
      Transformer<Integer, SQLTimeoutException> transformer0 = MapTransformer.mapTransformer((Map<? super Integer, ? extends SQLTimeoutException>) hashMap0);
      Iterator<SQLTransientException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Integer>) resettableIterator0, (Transformer<? super Integer, ? extends SQLTransientException>) transformer0);
      String string0 = IteratorUtils.toString(iterator0);
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) orderedIterator0);
      SQLException sQLException0 = new SQLException("F|(x7Yt%", "F|(x7Yt%");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("F|(x7Yt%", "F|(x7Yt%", sQLException0);
      IteratorUtils.getIterator(sQLTimeoutException0);
      EmptyIterator.emptyIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("F|(x7Yt%", "");
      Transformer<Object, SQLTimeoutException> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Integer>) null, (Transformer<? super Integer, ? extends SQLTransientException>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) listIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Iterator<? extends SQLClientInfoException>) iterator0, (Iterator<? extends SQLClientInfoException>) iterator0);
      SQLException sQLException0 = new SQLException("08/GqIw679/p'm", "");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("08/GqIw679/p'm", "", sQLException0);
      IteratorUtils.getIterator("");
      EmptyIterator.emptyIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("En2kg{t7rGm", "08/GqIw679/p'm");
      Transformer<Object, SQLTimeoutException> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Integer>) null, (Transformer<? super Integer, ? extends SQLTransientException>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLException>) resettableListIterator0, (Predicate<? super SQLException>) predicate0);
      EmptyIterator.emptyIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("List must otb=e null");
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Enumeration must not be null");
      iIOMetadataNode0.getAttributeNS("iterator", (String) null);
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      OrderedMapIterator<ArrayDeque<SQLFeatureNotSupportedException>, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<ArrayDeque<SQLFeatureNotSupportedException>, SQLSyntaxErrorException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<ArrayDeque<SQLFeatureNotSupportedException>, SQLSyntaxErrorException>(orderedMapIterator0);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<ArrayDeque<SQLFeatureNotSupportedException>, ? extends SQLSyntaxErrorException>) abstractOrderedMapIteratorDecorator0);
      ConstantTransformer<Object, Boolean> constantTransformer0 = new ConstantTransformer<Object, Boolean>((Boolean) null);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(constantTransformer0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayDeque<SQLFeatureNotSupportedException>>) orderedMapIterator0, (Predicate<? super ArrayDeque<SQLFeatureNotSupportedException>>) transformerPredicate0);
      assertTrue(boolean0);
      
      OrderedMapIterator<SQLClientInfoException, SQLException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLWarning>[] classArray0 = (Class<SQLWarning>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("iterator", classArray0, classArray0);
      String string0 = IteratorUtils.toString((Iterator<SQLClientInfoException>) orderedMapIterator1, (Transformer<? super SQLClientInfoException, String>) invokerTransformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getAttributeNS("Predicate must not be null", (String) null);
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      OrderedMapIterator<ArrayDeque<SQLFeatureNotSupportedException>, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<ArrayDeque<SQLFeatureNotSupportedException>, SQLSyntaxErrorException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<ArrayDeque<SQLFeatureNotSupportedException>, SQLSyntaxErrorException>(orderedMapIterator0);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<ArrayDeque<SQLFeatureNotSupportedException>, ? extends SQLSyntaxErrorException>) orderedMapIterator0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) resettableListIterator0);
      PredicateTransformer<Hashtable<String, IIOMetadataNode>> predicateTransformer0 = new PredicateTransformer<Hashtable<String, IIOMetadataNode>>(predicate0);
      Hashtable<String, IIOMetadataNode> hashtable0 = new Hashtable<String, IIOMetadataNode>();
      Boolean boolean0 = predicateTransformer0.transform(hashtable0);
      ConstantTransformer<Object, Boolean> constantTransformer0 = new ConstantTransformer<Object, Boolean>(boolean0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(constantTransformer0);
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>();
      SingletonIterator<ArrayDeque<SQLFeatureNotSupportedException>> singletonIterator0 = new SingletonIterator<ArrayDeque<SQLFeatureNotSupportedException>>(arrayDeque0, true);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ArrayDeque<SQLFeatureNotSupportedException>>) singletonIterator0, (Predicate<? super ArrayDeque<SQLFeatureNotSupportedException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(", ", "+{|0|3j 7(ikwMm", 1);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[8];
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("jCL1^0bPVo");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException1;
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException((String) null);
      sQLNonTransientConnectionExceptionArray0[7] = sQLNonTransientConnectionException2;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>((Predicate<? super Object>[]) null);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(nonePredicate0, nonePredicate0);
      AndPredicate.andPredicate((Predicate<? super Object>) orPredicate0, (Predicate<? super Object>) orPredicate0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      AndPredicate<SQLException> andPredicate0 = new AndPredicate<SQLException>(nonePredicate0, instanceofPredicate0);
      WhileClosure<SQLException> whileClosure0 = new WhileClosure<SQLException>(instanceofPredicate0, (Closure<? super SQLException>) null, false);
      IteratorUtils.apply((Iterator<SQLNonTransientConnectionException>) resettableIterator0, (Closure<? super SQLNonTransientConnectionException>) whileClosure0);
      Iterator<SQLTransactionRollbackException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) iterator0);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.spliterator();
      ResettableIterator<Integer> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Predicate<Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Stack<LinkedHashSet<SQLNonTransientException>> stack0 = new Stack<LinkedHashSet<SQLNonTransientException>>();
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[3];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("3x Cky%X-~vjg[6N", "The type to check instanceof must not be null", sQLTransientConnectionException0);
      sQLTransientExceptionArray0[0] = sQLTransientException0;
      SQLTransientException sQLTransientException1 = new SQLTransientException("Collection must not be null", "3x Cky%X-~vjg[6N", (-665), sQLTransientException0);
      sQLTransientExceptionArray0[1] = sQLTransientException1;
      SQLTransientException sQLTransientException2 = new SQLTransientException("yL<A_/!QNXCUU%mQ");
      sQLTransientExceptionArray0[2] = sQLTransientException2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransientExceptionArray0, (-665));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Stack<LinkedHashSet<SQLNonTransientException>> stack0 = new Stack<LinkedHashSet<SQLNonTransientException>>();
      stack0.add((LinkedHashSet<SQLNonTransientException>) null);
      stack0.push((LinkedHashSet<SQLNonTransientException>) null);
      IteratorUtils.loopingListIterator((List<LinkedHashSet<SQLNonTransientException>>) stack0);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[3];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_FilteringModeArray0);
      List<Locale.FilteringMode> list0 = IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) resettableListIterator0);
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>(list0);
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) hashSet0);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Locale.FilteringMode>) resettableIterator0);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends Locale.FilteringMode>) iterator0, class0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNextSibling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      iIOMetadataNode0.getAttributeNS("org.apache.commons.collections4.map.AbstractHashedMap", "org.apache.commons.collections4.map.AbstractHashedMap");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      OrderedMapIterator<ArrayDeque<SQLFeatureNotSupportedException>, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<ArrayDeque<SQLFeatureNotSupportedException>, SQLSyntaxErrorException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<ArrayDeque<SQLFeatureNotSupportedException>, SQLSyntaxErrorException>(orderedMapIterator0);
      OrderedMapIterator<ArrayDeque<SQLFeatureNotSupportedException>, SQLSyntaxErrorException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<ArrayDeque<SQLFeatureNotSupportedException>, ? extends SQLSyntaxErrorException>) abstractOrderedMapIteratorDecorator0);
      ConstantTransformer<Object, Boolean> constantTransformer0 = new ConstantTransformer<Object, Boolean>((Boolean) null);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(constantTransformer0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayDeque<SQLFeatureNotSupportedException>>) orderedMapIterator1, (Predicate<? super ArrayDeque<SQLFeatureNotSupportedException>>) transformerPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLException>) resettableListIterator0, (Predicate<? super SQLException>) predicate0);
      EmptyIterator.emptyIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("List must otb=e null", "List must otb=e null");
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      Closure<SQLException> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply(iterator0, (Closure<? super SQLNonTransientConnectionException>) closure0);
      Iterator<SQLTransactionRollbackException> iterator1 = EmptyIterator.emptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) iterator1);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.listIterator();
      stack0.spliterator();
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) vector0);
      IteratorUtils.emptyIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("List must otb=e null", "K", true);
      Iterator<?> iterator2 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator2);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      vector0.spliterator();
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableIterator0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Boolean[] booleanArray0 = new Boolean[1];
      SQLTransientException sQLTransientException0 = new SQLTransientException("^d?|s?!|]Cm7KGpRo", (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ObjectArrayIterator<Boolean> objectArrayIterator0 = new ObjectArrayIterator<Boolean>(booleanArray0);
      Iterator<SQLTransientConnectionException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LoopingIterator<String> loopingIterator0 = new LoopingIterator<String>(stack0);
      Iterator<String> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends String>) loopingIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends String>) iterator0, (Iterator<? extends String>) loopingIterator0);
      Enumeration<SQLTransientConnectionException> enumeration0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNextSibling();
      Hashtable<StringTokenizer, Hashtable<SQLClientInfoException, SQLInvalidAuthorizationSpecException>> hashtable0 = new Hashtable<StringTokenizer, Hashtable<SQLClientInfoException, SQLInvalidAuthorizationSpecException>>();
      EntrySetMapIterator<StringTokenizer, Hashtable<SQLClientInfoException, SQLInvalidAuthorizationSpecException>> entrySetMapIterator0 = new EntrySetMapIterator<StringTokenizer, Hashtable<SQLClientInfoException, SQLInvalidAuthorizationSpecException>>(hashtable0);
      MapIterator<StringTokenizer, Hashtable<SQLClientInfoException, SQLInvalidAuthorizationSpecException>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, Hashtable<SQLClientInfoException, SQLInvalidAuthorizationSpecException>>) entrySetMapIterator0);
      BoundedIterator<StringTokenizer> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) mapIterator0, 2678L);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) boundedIterator0);
      Predicate<StringTokenizer> predicate0 = UniquePredicate.uniquePredicate();
      boolean boolean0 = IteratorUtils.matchesAny(iterator0, (Predicate<? super StringTokenizer>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 1);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) priorityQueue0);
      IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) resettableIterator0, 1);
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator1 = IteratorUtils.singletonIterator(properties0);
      Hashtable<Properties, Vector<SQLRecoverableException>> hashtable0 = new Hashtable<Properties, Vector<SQLRecoverableException>>();
      EntrySetMapIterator<Properties, Vector<SQLRecoverableException>> entrySetMapIterator0 = new EntrySetMapIterator<Properties, Vector<SQLRecoverableException>>(hashtable0);
      IteratorUtils.chainedIterator((Iterator<? extends Properties>) entrySetMapIterator0, (Iterator<? extends Properties>) resettableIterator1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        iIOMetadataNode0.getElementsByTagName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) listIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Iterator<? extends SQLClientInfoException>) iterator0, (Iterator<? extends SQLClientInfoException>) iterator0);
      SQLException sQLException0 = new SQLException("08/GqIw679/p'm", "");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("08/GqIw679/p'm", "", sQLException0);
      IteratorUtils.getIterator("");
      EmptyIterator.emptyIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("En2kg{t7rGm", "08/GqIw679/p'm");
      Integer integer0 = new Integer(100);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("V");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Properties properties0 = new Properties();
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.iterators.SkippingIterator", (Throwable) null);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0, false);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLTransientConnectionException>) singletonIterator0, (Object) iIOMetadataNode1);
      assertFalse(singletonIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashSet<SQLRecoverableException> hashSet0 = new HashSet<SQLRecoverableException>();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) hashSet0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLRecoverableException>) listIterator0);
      IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) iterator0, 1);
      Properties properties0 = new Properties();
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      IteratorUtils.loopingIterator((Collection<? extends Boolean>) priorityQueue0);
      Iterator<?> iterator1 = IteratorUtils.getIterator(listIterator0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<SQLWarning> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) orderedIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0);
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      IteratorUtils.loopingIterator((Collection<? extends Boolean>) priorityQueue0);
      int int0 = 146;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTransientConnectionException[]) null, 146);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Transformer must not be null", "p`$s V7aVLpHL`q0", 1);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>((Predicate<? super Object>[]) null);
      Predicate<Object> predicate0 = AndPredicate.andPredicate((Predicate<? super Object>) nonePredicate0, (Predicate<? super Object>) nonePredicate0);
      WhileClosure<SQLException> whileClosure0 = new WhileClosure<SQLException>(predicate0, (Closure<? super SQLException>) null, true);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLNonTransientConnectionException>) resettableIterator0, (Closure<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashSet<SQLRecoverableException> hashSet0 = new HashSet<SQLRecoverableException>();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) hashSet0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLRecoverableException>) listIterator0);
      IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) iterator0, 1);
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator1 = IteratorUtils.singletonIterator(properties0);
      Iterator<Properties> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Properties>) resettableIterator1, (Iterator<? extends Properties>) resettableIterator1);
      IteratorUtils.boundedIterator((Iterator<? extends Properties>) iterator1, (long) 1, (long) 1);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.spliterator();
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      ArrayDeque<Integer> arrayDeque1 = arrayDeque0.clone();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>(arrayDeque1);
      ResettableIterator<Integer> resettableIterator2 = IteratorUtils.loopingIterator((Collection<? extends Integer>) linkedList0);
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableIterator2);
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      LoopingListIterator<StringTokenizer> loopingListIterator0 = new LoopingListIterator<StringTokenizer>(vector0);
      Predicate<StringTokenizer> predicate0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) loopingListIterator0, (Predicate<? super StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      OrderedIterator<SQLTransientException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<SQLTransientException>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      int int0 = IteratorUtils.size(orderedIterator0);
      assertEquals(0, int0);
      
      OrderedIterator<SQLTransientException> orderedIterator1 = EmptyOrderedIterator.emptyOrderedIterator();
      String string0 = IteratorUtils.toString((Iterator<SQLTransientException>) orderedIterator1);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Hashtable<SQLClientInfoException, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLClientInfoException, SQLTransactionRollbackException>();
      IteratorUtils.emptyOrderedIterator();
      int int0 = 25;
      Comparator<Object> comparator0 = null;
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 22);
      Iterator<BatchUpdateException> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[0] = iterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Hashtable<SQLClientInfoException, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLClientInfoException, SQLTransactionRollbackException>();
      Vector<Object> vector0 = new Vector<Object>();
      Hashtable<Integer, ArrayDeque<SQLIntegrityConstraintViolationException>> hashtable1 = new Hashtable<Integer, ArrayDeque<SQLIntegrityConstraintViolationException>>();
      EntrySetMapIterator<Integer, ArrayDeque<SQLIntegrityConstraintViolationException>> entrySetMapIterator0 = new EntrySetMapIterator<Integer, ArrayDeque<SQLIntegrityConstraintViolationException>>(hashtable1);
      AbstractMapIteratorDecorator<Integer, ArrayDeque<SQLIntegrityConstraintViolationException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Integer, ArrayDeque<SQLIntegrityConstraintViolationException>>(entrySetMapIterator0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      Closure<SQLException> closure1 = IfClosure.ifClosure((Predicate<? super SQLException>) andPredicate0, (Closure<? super SQLException>) closure0);
      IteratorUtils.apply((Iterator<SQLNonTransientConnectionException>) resettableIterator0, (Closure<? super SQLNonTransientConnectionException>) closure1);
      Iterator<SQLTransactionRollbackException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) iterator0);
      PriorityQueue<Properties> priorityQueue0 = new PriorityQueue<Properties>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getAttributeNode(">.fCz637W");
      // Undeclared exception!
      try { 
        iIOMetadataNode0.setAttributeNode((Attr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashSet<SQLRecoverableException> hashSet0 = new HashSet<SQLRecoverableException>();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) hashSet0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLRecoverableException>) listIterator0);
      IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) iterator0, 1);
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator1 = IteratorUtils.singletonIterator(properties0);
      Iterator<Properties> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Properties>) resettableIterator1, (Iterator<? extends Properties>) resettableIterator1);
      IteratorUtils.boundedIterator((Iterator<? extends Properties>) iterator1, (long) 1, (long) 1);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.spliterator();
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      ArrayDeque<Integer> arrayDeque1 = arrayDeque0.clone();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>(arrayDeque1);
      IteratorUtils.loopingIterator((Collection<? extends Integer>) linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, Hashtable<EnumSet, EnumSet>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLException>) orderedMapIterator0, (Predicate<? super SQLException>) predicate0);
      EmptyIterator.emptyIterator();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      OrderedMapIterator<StringTokenizer, Locale.FilteringMode> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<StringTokenizer, Locale.FilteringMode> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<StringTokenizer, ? extends Locale.FilteringMode>) orderedMapIterator1);
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) singletonListIterator0, (Iterator<? extends StringTokenizer>) orderedMapIterator2);
      IteratorUtils.skippingIterator((Iterator<StringTokenizer>) zippingIterator0, 1809L);
      assertEquals(1, singletonListIterator0.nextIndex());
      
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<StringTokenizer>) singletonListIterator0, (Predicate<? super StringTokenizer>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      Iterator<SQLTransactionRollbackException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) iterator0);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.spliterator();
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) stack0);
      MapIterator<Stack<Class<SQLNonTransientConnectionException>>, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLTransientException sQLTransientException0 = new SQLTransientException("^d?|s?!|]Cm7KGpRo", (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Boolean[] booleanArray0 = new Boolean[2];
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      PredicateTransformer<Hashtable<String, IIOMetadataNode>> predicateTransformer0 = new PredicateTransformer<Hashtable<String, IIOMetadataNode>>(instanceofPredicate0);
      Hashtable<String, IIOMetadataNode> hashtable0 = new Hashtable<String, IIOMetadataNode>();
      Boolean boolean0 = predicateTransformer0.transform(hashtable0);
      booleanArray0[0] = boolean0;
      PredicateTransformer<Hashtable<String, IIOMetadataNode>> predicateTransformer1 = new PredicateTransformer<Hashtable<String, IIOMetadataNode>>(instanceofPredicate0);
      Boolean boolean1 = predicateTransformer1.transform(hashtable0);
      booleanArray0[1] = boolean1;
      ObjectArrayIterator<Boolean> objectArrayIterator0 = new ObjectArrayIterator<Boolean>(booleanArray0);
      Consumer<Boolean> consumer0 = (Consumer<Boolean>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      objectArrayIterator0.forEachRemaining(consumer0);
      Class<Boolean> class1 = Boolean.class;
      IteratorUtils.toArray((Iterator<? extends Boolean>) objectArrayIterator0, class1);
      MapIterator<ArrayList<ArrayList>, Predicate<SQLIntegrityConstraintViolationException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      EmptyOrderedIterator.emptyOrderedIterator();
      MapIterator<SQLClientInfoException, HashSet<SQLFeatureNotSupportedException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) mapIterator0, (Iterator<? extends SQLClientInfoException>) mapIterator0, (Iterator<? extends SQLClientInfoException>) mapIterator0);
      HashMap<SQLClientInfoException, SQLTransactionRollbackException> hashMap0 = new HashMap<SQLClientInfoException, SQLTransactionRollbackException>();
      EntrySetMapIterator<SQLClientInfoException, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<SQLClientInfoException, SQLTransactionRollbackException>(hashMap0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(83);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashSet<Locale.FilteringMode>[] hashSetArray0 = (HashSet<Locale.FilteringMode>[]) Array.newInstance(HashSet.class, 3);
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      hashSetArray0[0] = hashSet0;
      HashSet<Locale.FilteringMode> hashSet1 = new HashSet<Locale.FilteringMode>();
      hashSetArray0[1] = hashSet1;
      HashSet<Locale.FilteringMode> hashSet2 = new HashSet<Locale.FilteringMode>();
      hashSetArray0[2] = hashSet2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(hashSetArray0, 2679);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Hashtable<SQLClientInfoException, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLClientInfoException, SQLTransactionRollbackException>();
      Vector<Object> vector0 = new Vector<Object>();
      Hashtable<Integer, ArrayDeque<SQLIntegrityConstraintViolationException>> hashtable1 = new Hashtable<Integer, ArrayDeque<SQLIntegrityConstraintViolationException>>();
      EntrySetMapIterator<Integer, ArrayDeque<SQLIntegrityConstraintViolationException>> entrySetMapIterator0 = new EntrySetMapIterator<Integer, ArrayDeque<SQLIntegrityConstraintViolationException>>(hashtable1);
      AbstractMapIteratorDecorator<Integer, ArrayDeque<SQLIntegrityConstraintViolationException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Integer, ArrayDeque<SQLIntegrityConstraintViolationException>>(entrySetMapIterator0);
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      int int0 = 31;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<String>) orderedIterator0, 31);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 31
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashSet<SQLRecoverableException> hashSet0 = new HashSet<SQLRecoverableException>();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) hashSet0);
      IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0);
      IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) resettableIterator0, 1);
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator1 = IteratorUtils.singletonIterator(properties0);
      Iterator<Properties> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Properties>) resettableIterator1, (Iterator<? extends Properties>) resettableIterator1);
      IteratorUtils.boundedIterator((Iterator<? extends Properties>) iterator0, (long) 1, (long) 1);
      int int0 = 100;
      EmptyMapIterator.emptyMapIterator();
      int int1 = 869;
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLDataException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((DataTruncation[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashSet<SQLRecoverableException> hashSet0 = new HashSet<SQLRecoverableException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("1a-QEVH-;", "1a-QEVH-;");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransientConnectionException0);
      hashSet0.add(sQLRecoverableException0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) hashSet0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLRecoverableException>) listIterator0);
      int int0 = 1;
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) iterator0, 1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("", (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("g ", "*VxR+VLD8j", (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "-ZN0_c2zt%-", sQLRecoverableException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTransientConnectionException0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLIntegrityConstraintViolationException>) equalPredicate0);
      PredicateTransformer<SQLIntegrityConstraintViolationException> predicateTransformer0 = new PredicateTransformer<SQLIntegrityConstraintViolationException>(equalPredicate0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Boolean boolean0 = predicateTransformer0.transform(sQLIntegrityConstraintViolationException0);
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      ObjectArrayIterator<Boolean> objectArrayIterator0 = new ObjectArrayIterator<Boolean>(booleanArray0);
      Comparator<Boolean> comparator0 = (Comparator<Boolean>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ObjectArrayIterator<Boolean> objectArrayIterator1 = new ObjectArrayIterator<Boolean>(booleanArray0, 1);
      IteratorUtils.collatedIterator((Comparator<? super Boolean>) comparator0, (Iterator<? extends Boolean>) objectArrayIterator0, (Iterator<? extends Boolean>) objectArrayIterator1);
      Class<Boolean> class0 = Boolean.class;
      Boolean[] booleanArray1 = IteratorUtils.toArray((Iterator<? extends Boolean>) objectArrayIterator1, class0);
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      IteratorUtils.contains((Iterator<DataTruncation>) orderedIterator0, (Object) sQLInvalidAuthorizationSpecException0);
      IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) predicate0);
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 8);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("O");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("Node must not be null", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("{#");
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("?$5?HE");
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) resettableListIterator0;
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) resettableListIterator0);
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) listIterator0;
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>) listIterator0, (Iterator<? extends SQLNonTransientConnectionException>) iteratorArray0[0]);
      iteratorArray0[2] = iterator0;
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) iterator0, (Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      iteratorArray0[3] = (Iterator<SQLNonTransientConnectionException>) zippingIterator0;
      Iterator<SQLNonTransientConnectionException> iterator1 = IteratorUtils.unmodifiableIterator(iteratorArray0[3]);
      iteratorArray0[4] = iterator1;
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator1 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[5] = (Iterator<SQLNonTransientConnectionException>) orderedIterator1;
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator2 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[6] = (Iterator<SQLNonTransientConnectionException>) orderedIterator2;
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) iterator1);
      Iterator<SQLNonTransientConnectionException> iterator2 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0);
      iteratorArray0[7] = iterator2;
      Iterator<SQLNonTransientConnectionException> iterator3 = IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      assertFalse(iterator3.equals((Object)iterator1));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.contains((Iterator<BatchUpdateException>) resettableListIterator0, (Object) resettableListIterator0);
      OrderedIterator<EnumSet<Locale.FilteringMode>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedIterator0);
      int int0 = 0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.contains((Iterator<BatchUpdateException>) resettableListIterator0, (Object) resettableListIterator0);
      OrderedIterator<EnumSet<Locale.FilteringMode>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedIterator0);
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      IteratorUtils.loopingListIterator((List<SQLTimeoutException>) vector0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 5);
      Predicate<SQLException> predicate0 = new UniquePredicate<SQLException>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) singletonListIterator0, (Iterator<? extends StringTokenizer>) singletonListIterator0);
      SkippingIterator<StringTokenizer> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<StringTokenizer>) zippingIterator0, 0L);
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Object> predicate1 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<StringTokenizer>) skippingIterator0, (Predicate<? super StringTokenizer>) predicate1);
      assertEquals(1, singletonListIterator0.nextIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.contains((Iterator<BatchUpdateException>) resettableListIterator0, (Object) resettableListIterator0);
      OrderedIterator<EnumSet<Locale.FilteringMode>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNextSibling();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientException>) null, (Iterator<? extends SQLTransientException>[]) iteratorArray0);
      OrderedIterator<Integer> orderedIterator1 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterable<Integer> iterable0 = IteratorUtils.asIterable((Iterator<? extends Integer>) orderedIterator1);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<Properties> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Properties>) listIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) listIterator0, (Iterator<? extends Properties>) listIterator0, (Iterator<? extends Properties>) iterator0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = null;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      String string1 = "RT";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RT");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("m]", "m]", sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLIntegrityConstraintViolationException0, 100, 128);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 8);
      int int0 = 44;
      Integer integer0 = new Integer(44);
      int int1 = 479;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) integer0, 479, 479);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 1);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>((Predicate<? super Object>[]) null);
      Predicate<Object> predicate0 = AndPredicate.andPredicate((Predicate<? super Object>) nonePredicate0, (Predicate<? super Object>) nonePredicate0);
      AndPredicate<SQLException> andPredicate0 = new AndPredicate<SQLException>(predicate0, nonePredicate0);
      WhileClosure<SQLException> whileClosure0 = new WhileClosure<SQLException>(andPredicate0, (Closure<? super SQLException>) null, false);
      Iterator<SQLTransactionRollbackException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) iterator0);
      PriorityQueue<Properties>[] priorityQueueArray0 = (PriorityQueue<Properties>[]) Array.newInstance(PriorityQueue.class, 5);
      PriorityQueue<Properties> priorityQueue0 = new PriorityQueue<Properties>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<Properties> priorityQueue1 = new PriorityQueue<Properties>();
      PriorityQueue<Properties> priorityQueue2 = new PriorityQueue<Properties>(1);
      PriorityQueue<Properties> priorityQueue3 = new PriorityQueue<Properties>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(priorityQueueArray0, 1, (-2111));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Hashtable<SQLClientInfoException, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLClientInfoException, SQLTransactionRollbackException>();
      Vector<Object> vector0 = new Vector<Object>();
      Hashtable<Integer, ArrayDeque<SQLIntegrityConstraintViolationException>> hashtable1 = new Hashtable<Integer, ArrayDeque<SQLIntegrityConstraintViolationException>>();
      EntrySetMapIterator<Integer, ArrayDeque<SQLIntegrityConstraintViolationException>> entrySetMapIterator0 = new EntrySetMapIterator<Integer, ArrayDeque<SQLIntegrityConstraintViolationException>>(hashtable1);
      MapIterator<Integer, ArrayDeque<SQLIntegrityConstraintViolationException>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, ArrayDeque<SQLIntegrityConstraintViolationException>>) entrySetMapIterator0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      AbstractMapIteratorDecorator<Integer, ArrayDeque<SQLIntegrityConstraintViolationException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Integer, ArrayDeque<SQLIntegrityConstraintViolationException>>(mapIterator0);
      vector0.spliterator();
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) abstractMapIteratorDecorator0);
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) hashtable0, 8, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<SQLClientInfoException, SQLTransactionRollbackException> hashMap0 = new HashMap<SQLClientInfoException, SQLTransactionRollbackException>();
      Hashtable<SQLClientInfoException, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLClientInfoException, SQLTransactionRollbackException>();
      HashMap<SQLClientInfoException, SQLTransactionRollbackException> hashMap1 = new HashMap<SQLClientInfoException, SQLTransactionRollbackException>();
      EntrySetMapIterator<SQLClientInfoException, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<SQLClientInfoException, SQLTransactionRollbackException>(hashMap1);
      IteratorUtils.isEmpty(entrySetMapIterator0);
      Integer integer0 = new Integer(93);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashSet<SQLRecoverableException> hashSet0 = new HashSet<SQLRecoverableException>();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) hashSet0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLRecoverableException>) listIterator0);
      IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) iterator0, 1);
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator1 = IteratorUtils.singletonIterator(properties0);
      Iterator<Properties> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Properties>) resettableIterator1, (Iterator<? extends Properties>) resettableIterator1);
      IteratorUtils.boundedIterator((Iterator<? extends Properties>) iterator1, (long) 1, (long) 1);
      int int0 = 100;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<String>) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      String string0 = "";
      int int0 = 1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 1);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>((Predicate<? super Object>[]) null);
      IteratorUtils.isEmpty(resettableIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Hashtable<SQLClientInfoException, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLClientInfoException, SQLTransactionRollbackException>();
      HashMap<SQLClientInfoException, SQLTransactionRollbackException> hashMap0 = new HashMap<SQLClientInfoException, SQLTransactionRollbackException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("b#wb\"R:p6ku%/", "b#wb\"R:p6ku%/", 100, sQLClientInfoException0);
      sQLTransactionRollbackException0.printStackTrace();
      hashtable0.put(sQLClientInfoException0, sQLTransactionRollbackException0);
      hashtable0.putAll(hashMap0);
      EntrySetMapIterator<SQLClientInfoException, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<SQLClientInfoException, SQLTransactionRollbackException>(hashtable0);
      IteratorUtils.isEmpty(entrySetMapIterator0);
      Integer integer0 = new Integer(93);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) integer0, 93);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 8);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      Class<Integer> class6 = Integer.class;
      classArray0[6] = class6;
      Class<Integer> class7 = Integer.class;
      classArray0[7] = class7;
      ResettableListIterator<Class<Integer>> resettableListIterator0 = IteratorUtils.arrayListIterator(classArray0, 1);
      ListIterator<Class<Integer>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Class<Integer>>) resettableListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 1);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>((Predicate<? super Object>[]) null);
      Predicate<Object> predicate0 = AndPredicate.andPredicate((Predicate<? super Object>) nonePredicate0, (Predicate<? super Object>) nonePredicate0);
      AndPredicate<SQLException> andPredicate0 = new AndPredicate<SQLException>(predicate0, nonePredicate0);
      WhileClosure<SQLException> whileClosure0 = new WhileClosure<SQLException>(andPredicate0, (Closure<? super SQLException>) null, false);
      Iterator<SQLTransactionRollbackException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) iterator0);
      PriorityQueue<Properties>[] priorityQueueArray0 = (PriorityQueue<Properties>[]) Array.newInstance(PriorityQueue.class, 5);
      PriorityQueue<Properties> priorityQueue0 = new PriorityQueue<Properties>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<Properties> priorityQueue1 = new PriorityQueue<Properties>();
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<Properties> priorityQueue2 = new PriorityQueue<Properties>();
      priorityQueueArray0[2] = priorityQueue2;
      PriorityQueue<Properties> priorityQueue3 = null;
      try {
        priorityQueue3 = new PriorityQueue<Properties>((-1491));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) listIterator0);
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) iterator0, (Iterator<? extends SQLClientInfoException>) iterator0, (Iterator<? extends SQLClientInfoException>) iterator0);
      SQLException sQLException0 = new SQLException("V", ":*@i8i9p?'Y&Ck!9");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("&=CC[2=:d7\"b0d", (String) null, sQLException0);
      IteratorUtils.getIterator(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) zippingIterator0, (Transformer<? super SQLClientInfoException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      int[] intArray0 = new int[3];
      intArray0[0] = 3127;
      intArray0[1] = 3127;
      intArray0[2] = 3127;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "ut$tQ%v^'qx", 3127, intArray0);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) batchUpdateException0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) singletonListIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      assertFalse(listIterator0.hasPrevious());
      
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashSet<SQLRecoverableException> hashSet0 = new HashSet<SQLRecoverableException>();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) hashSet0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLRecoverableException>) listIterator0);
      List<SQLRecoverableException> list0 = IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) iterator0, 1);
      OrderedMapIterator<SQLTransientConnectionException, ServiceLoader<SQLTransientException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SkippingIterator<SQLTransientConnectionException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLTransientConnectionException>) orderedMapIterator0, (long) 1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) list0;
      objectArray0[1] = (Object) skippingIterator0;
      objectArray0[2] = (Object) orderedMapIterator0;
      objectArray0[3] = (Object) listIterator0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) list0;
      objectArray0[6] = (Object) orderedMapIterator0;
      objectArray0[7] = (Object) list0;
      ResettableIterator<Object> resettableIterator1 = IteratorUtils.arrayIterator(objectArray0, 1, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableIterator1, (-1956), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashSet<SQLRecoverableException> hashSet0 = new HashSet<SQLRecoverableException>();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) hashSet0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLRecoverableException>) listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNextSibling();
      iIOMetadataNode0.getAttributeNS("QtPh5E7g", "QtPh5E7g");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[2];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", "org.apache.commons.collections4.bidimap.TreeBidiMap", 512);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 0, 681);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      String string0 = "";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      int int0 = 285;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0, 285, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashSet<SQLRecoverableException> hashSet0 = new HashSet<SQLRecoverableException>();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) hashSet0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLRecoverableException>) listIterator0);
      IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) iterator0, 1);
      OrderedMapIterator<SQLTransientConnectionException, ServiceLoader<SQLTransientException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.skippingIterator((Iterator<SQLTransientConnectionException>) orderedMapIterator0, (long) 1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("List must not be null", "List must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
      SQLException sQLException0 = new SQLException("Lah>Nu");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLException0);
      ArrayListIterator<Iterator<Integer>> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<Iterator<Integer>>(sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Stack<LinkedHashSet<SQLNonTransientException>> stack0 = new Stack<LinkedHashSet<SQLNonTransientException>>();
      stack0.push((LinkedHashSet<SQLNonTransientException>) null);
      IteratorUtils.loopingListIterator((List<LinkedHashSet<SQLNonTransientException>>) stack0);
      int int0 = 399;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((IIOMetadataNode[]) null, 399, 399);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Integer>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long long0 = (-219L);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLTimeoutException>) null, (-219L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Hashtable<SQLClientInfoException, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLClientInfoException, SQLTransactionRollbackException>();
      HashMap<SQLClientInfoException, SQLTransactionRollbackException> hashMap0 = new HashMap<SQLClientInfoException, SQLTransactionRollbackException>();
      hashtable0.putAll(hashMap0);
      EntrySetMapIterator<SQLClientInfoException, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<SQLClientInfoException, SQLTransactionRollbackException>(hashtable0);
      IteratorUtils.isEmpty(entrySetMapIterator0);
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      Boolean[] booleanArray0 = new Boolean[3];
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicateTransformer<Hashtable<String, IIOMetadataNode>> predicateTransformer0 = new PredicateTransformer<Hashtable<String, IIOMetadataNode>>(uniquePredicate0);
      Hashtable<String, IIOMetadataNode> hashtable1 = new Hashtable<String, IIOMetadataNode>();
      Boolean boolean0 = predicateTransformer0.transform(hashtable1);
      booleanArray0[0] = boolean0;
      Boolean boolean1 = predicateTransformer0.transform(hashtable1);
      booleanArray0[1] = boolean1;
      Boolean boolean2 = predicateTransformer0.transform(hashtable1);
      booleanArray0[2] = boolean2;
      ObjectArrayListIterator<Boolean> objectArrayListIterator0 = new ObjectArrayListIterator<Boolean>(booleanArray0, 1, 1);
      Class<Boolean> class0 = Boolean.class;
      Boolean[] booleanArray1 = IteratorUtils.toArray((Iterator<? extends Boolean>) objectArrayListIterator0, class0);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Boolean[] booleanArray0 = new Boolean[1];
      SQLTransientException sQLTransientException0 = new SQLTransientException("^d?|s?!|]Cm7KGpRo", (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "*VxR+VLD8j", sQLTransientException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLRecoverableException0);
      Predicate<SQLIntegrityConstraintViolationException> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLIntegrityConstraintViolationException>) equalPredicate0);
      PredicateTransformer<SQLIntegrityConstraintViolationException> predicateTransformer0 = new PredicateTransformer<SQLIntegrityConstraintViolationException>(predicate0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Boolean boolean0 = predicateTransformer0.transform(sQLIntegrityConstraintViolationException0);
      booleanArray0[0] = boolean0;
      ObjectArrayIterator<Boolean> objectArrayIterator0 = new ObjectArrayIterator<Boolean>(booleanArray0);
      Iterator<Boolean> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Boolean>) comparator0, (Iterator<? extends Boolean>) objectArrayIterator0, (Iterator<? extends Boolean>) objectArrayIterator0);
      Class<Boolean> class0 = Boolean.class;
      IteratorUtils.toArray((Iterator<? extends Boolean>) iterator0, class0);
      assertFalse(objectArrayIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Locale.FilteringMode[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<SQLWarning> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) orderedIterator0);
      Iterator<SQLWarning> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      OrderedIterator<SQLTransientException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<SQLTransientException>) orderedIterator0);
      int int0 = 100;
      Integer integer0 = new Integer(100);
      Transformer<Object, Integer> transformer0 = ConstantTransformer.constantTransformer(integer0);
      IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      String string0 = "W}";
      SQLException sQLException0 = new SQLException("[]", "W}");
      SQLDataException sQLDataException0 = new SQLDataException("[]", "[]", 534, sQLException0);
      linkedList0.add(sQLDataException0);
      // Undeclared exception!
      try { 
        sQLDataException0.initCause(sQLException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLException: []
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) null, (Collection<? super Integer>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) listIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) iterator0, (Iterator<? extends SQLClientInfoException>) iterator0, (Iterator<? extends SQLClientInfoException>) iterator0);
      SQLException sQLException0 = new SQLException("V", ":*@i8i9p?'Y&Ck!9");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("&=CC[2=:d7\"b0d", (String) null, sQLException0);
      IteratorUtils.getIterator(sQLTimeoutException0);
      Iterator<IIOMetadataNode> iterator1 = EmptyIterator.emptyIterator();
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) iterator1);
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(list0);
      loopingListIterator0.reset();
      // Undeclared exception!
      try { 
        loopingListIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // There are no elements for this iterator to loop on
         //
         verifyException("org.apache.commons.collections4.iterators.LoopingListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashSet<Iterator<Integer>> hashSet0 = new HashSet<Iterator<Integer>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = (-1292);
      Integer integer0 = new Integer((-1292));
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0, false);
      Iterator<Integer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) singletonIterator0, (Iterator<? extends Integer>) singletonIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Integer>) iterator0, (long) (-1292), 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Hashtable<Integer, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<Integer, SQLInvalidAuthorizationSpecException>();
      Integer integer0 = new Integer((-1089));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", sQLSyntaxErrorException0);
      hashtable0.put(integer0, sQLInvalidAuthorizationSpecException0);
      EntrySetMapIterator<Integer, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<Integer, SQLInvalidAuthorizationSpecException>(hashtable0);
      IteratorUtils.unmodifiableIterator((Iterator<Integer>) entrySetMapIterator0);
      OrderedMapIterator<ArrayDeque<Transformer<Integer, SQLClientInfoException>>, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<ArrayDeque<Transformer<Integer, SQLClientInfoException>>, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<ArrayDeque<Transformer<Integer, SQLClientInfoException>>, ? extends SQLException>) orderedMapIterator0);
      IteratorUtils.toString((Iterator<ArrayDeque<Transformer<Integer, SQLClientInfoException>>>) orderedMapIterator1);
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<DataTruncation> iterator0 = IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) null, (Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0);
      String string0 = IteratorUtils.toString(iterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.contains((Iterator<BatchUpdateException>) resettableListIterator0, (Object) resettableListIterator0);
      OrderedIterator<EnumSet<Locale.FilteringMode>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedIterator0);
      String string0 = "a<%NzMr]Fvih^Z";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "a<%NzMr]Fvih^Z", 0);
      sQLTransientConnectionException0.spliterator();
      IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      IteratorUtils.loopingListIterator((List<SQLTimeoutException>) vector0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 5);
      // Undeclared exception!
      try { 
        AnyPredicate.anyPredicate((Predicate<? super SQLException>[]) predicateArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not contain a null predicate, index 0 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      int int0 = 1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 1);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>((Predicate<? super Object>[]) null);
      Predicate<Object> predicate0 = AndPredicate.andPredicate((Predicate<? super Object>) nonePredicate0, (Predicate<? super Object>) nonePredicate0);
      AndPredicate<SQLException> andPredicate0 = new AndPredicate<SQLException>(predicate0, nonePredicate0);
      WhileClosure<SQLException> whileClosure0 = new WhileClosure<SQLException>(andPredicate0, (Closure<? super SQLException>) null, false);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLNonTransientConnectionException>) resettableIterator0, (Closure<? super SQLNonTransientConnectionException>) whileClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NonePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNextSibling();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      Boolean[] booleanArray0 = new Boolean[6];
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      PredicateTransformer<Hashtable<String, IIOMetadataNode>> predicateTransformer0 = new PredicateTransformer<Hashtable<String, IIOMetadataNode>>(predicate0);
      Hashtable<String, IIOMetadataNode> hashtable0 = new Hashtable<String, IIOMetadataNode>();
      Boolean boolean0 = predicateTransformer0.transform(hashtable0);
      booleanArray0[0] = boolean0;
      hashtable0.put("m[,^Q", iIOMetadataNode0);
      Boolean boolean1 = predicateTransformer0.transform(hashtable0);
      booleanArray0[1] = boolean1;
      Boolean boolean2 = predicateTransformer0.transform(hashtable0);
      booleanArray0[2] = boolean2;
      Boolean boolean3 = predicateTransformer0.transform(hashtable0);
      booleanArray0[3] = boolean3;
      Boolean boolean4 = predicateTransformer0.transform(hashtable0);
      booleanArray0[4] = boolean4;
      Boolean boolean5 = predicateTransformer0.transform(hashtable0);
      booleanArray0[5] = boolean5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(booleanArray0, (-767), 740);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("eXN\"`P$Z8h,7B", "");
      SQLDataException sQLDataException0 = new SQLDataException("6k", sQLTimeoutException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("b[{1Y-x_", sQLTimeoutException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      IteratorUtils.matchesAny((Iterator<Stack<SQLTransactionRollbackException>>) null, (Predicate<? super Stack<SQLTransactionRollbackException>>) equalPredicate0);
      Properties[] propertiesArray0 = new Properties[8];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      intArray0[8] = 284;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, (Throwable) null);
      properties5.put(properties2, batchUpdateException0);
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) resettableIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = 1101;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1101);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 99, 99);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("6");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Iterator must not be null", "Iterator must not be null", sQLNonTransientException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "Iterator must not be null", sQLFeatureNotSupportedException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      StackTraceElement stackTraceElement0 = new StackTraceElement("[[6Ot`Gm/d<>d1Q", "Iterator must not be null", "", 31);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("Iterator must not be null", "'Ah%)&D'd`KiqP11d", "end", 3106);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("end", "", "end", 16);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("org.apache.commons.collections4.functors.InstantiateFactory", "org.apache.commons.collections4.functors.InstantiateFactory", "'Ah%)&D'd`KiqP11d", (-28));
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("Iterator must not be null", "org.apache.commons.collections4.functors.InstantiateFactory", (String) null, 0);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("~J(", "end", "dIP|nx,", 3106);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("N=3S9VQV5YKE.*_m", "xDL", "", 0);
      stackTraceElementArray0[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement("nP=JqZ#", "6", "N=3S9VQV5YKE.*_m", 0);
      stackTraceElementArray0[7] = stackTraceElement7;
      sQLFeatureNotSupportedException0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0, (-3897));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Hashtable<SQLClientInfoException, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLClientInfoException, SQLTransactionRollbackException>();
      HashMap<SQLClientInfoException, SQLTransactionRollbackException> hashMap0 = new HashMap<SQLClientInfoException, SQLTransactionRollbackException>();
      hashtable0.putAll(hashMap0);
      EntrySetMapIterator<SQLClientInfoException, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<SQLClientInfoException, SQLTransactionRollbackException>(hashtable0);
      IteratorUtils.isEmpty(entrySetMapIterator0);
      Integer integer0 = new Integer(93);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) integer0, 93);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      int int0 = 10;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLDataExceptionArray0, (-2801), 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      IteratorUtils.emptyIterator();
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      // Undeclared exception!
      try { 
        linkedList0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      LinkedHashSet<StringTokenizer> linkedHashSet0 = new LinkedHashSet<StringTokenizer>();
      String string0 = "";
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", true);
      linkedHashSet0.add(stringTokenizer0);
      linkedHashSet0.add(stringTokenizer0);
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) linkedHashSet0);
      IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) resettableIterator0);
      ResettableIterator<SQLDataException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) resettableIterator1, (Iterator<? extends SQLDataException>) resettableIterator1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      int int0 = (-733);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0, (-733), (-733));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) orderedIterator0, (-3777), (-3777));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      IteratorUtils.singletonIterator((Object) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null);
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0, false);
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) singletonIterator0);
      OrderedMapIterator<IIOMetadataNode, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<IIOMetadataNode, Object> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ?>) orderedMapIterator0);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) mapIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Hashtable<SQLNonTransientConnectionException, SQLTransactionRollbackException>[] hashtableArray0 = (Hashtable<SQLNonTransientConnectionException, SQLTransactionRollbackException>[]) Array.newInstance(Hashtable.class, 0);
      ResettableIterator<Hashtable<SQLNonTransientConnectionException, SQLTransactionRollbackException>> resettableIterator0 = IteratorUtils.arrayIterator(hashtableArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLException>) resettableListIterator0, (Predicate<? super SQLException>) predicate0);
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Properties>) iterator0, 0L, (-3362L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNextSibling();
      iIOMetadataNode0.getAttributeNS("org.apache.commons.collections4.map.AbstractHashedMap", "org.apache.commons.collections4.map.AbstractHashedMap");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }
}
