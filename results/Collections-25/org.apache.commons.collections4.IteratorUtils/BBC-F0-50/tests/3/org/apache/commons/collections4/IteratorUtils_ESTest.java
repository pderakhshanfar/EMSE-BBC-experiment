/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 20:27:35 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.FileDescriptor;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.stream.Stream;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IteratorUtils.getIterator("-!J}Oz;!");
      sQLClientInfoException0.getSuppressed();
      SQLException[] sQLExceptionArray0 = new SQLException[1];
      sQLExceptionArray0[0] = (SQLException) sQLClientInfoException0;
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLExceptionArray0);
      IteratorUtils.toString((Iterator<SQLException>) resettableListIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", ",~%\u0006+Alufe5hX", 61);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(sQLTransientConnectionException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Locale.Category>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("!w2t;]");
      SingletonIterator<SQLNonTransientException> singletonIterator0 = new SingletonIterator<SQLNonTransientException>(sQLDataException0);
      IteratorUtils.get((Iterator<SQLNonTransientException>) singletonIterator0, 0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLException[] sQLExceptionArray0 = new SQLException[0];
      IteratorUtils.arrayListIterator(sQLExceptionArray0, 0, 0);
      ArrayList<Locale.LanguageRange>[] arrayListArray0 = (ArrayList<Locale.LanguageRange>[]) Array.newInstance(ArrayList.class, 9);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      arrayListArray0[0] = arrayList0;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      arrayListArray0[1] = arrayList1;
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      arrayListArray0[2] = arrayList2;
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      arrayListArray0[3] = arrayList3;
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      arrayListArray0[4] = arrayList4;
      ArrayList<Locale.LanguageRange> arrayList5 = new ArrayList<Locale.LanguageRange>();
      arrayListArray0[5] = arrayList5;
      ArrayList<Locale.LanguageRange> arrayList6 = new ArrayList<Locale.LanguageRange>();
      arrayListArray0[6] = arrayList6;
      ArrayList<Locale.LanguageRange> arrayList7 = new ArrayList<Locale.LanguageRange>();
      arrayListArray0[7] = arrayList7;
      ArrayList<Locale.LanguageRange> arrayList8 = new ArrayList<Locale.LanguageRange>();
      arrayListArray0[8] = arrayList8;
      ObjectArrayIterator<ArrayList<Locale.LanguageRange>> objectArrayIterator0 = new ObjectArrayIterator<ArrayList<Locale.LanguageRange>>(arrayListArray0, 0);
      IteratorUtils.contains((Iterator<ArrayList<Locale.LanguageRange>>) objectArrayIterator0, (Object) arrayList6);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("!w2t;]", "M7JL]+h\"", sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0, 0, 44);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      String string0 = null;
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", mockThrowable0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLTransientException sQLTransientException0 = new SQLTransientException(" 8hlK*7;w");
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("{,Vy`m", sQLTransientException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      String string1 = "org.apache.commons.collections4.IteratorUtils";
      int int0 = (-1190);
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("org.apache.commons.collections4.IteratorUtils", "{,Vy`m", (-1190));
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      String string2 = "PzNT<&3F=]J^j{%Pol";
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("PzNT<&3F=]J^j{%Pol", sQLRecoverableException1);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      sQLRecoverableException3.spliterator();
      int int1 = 1;
      ObjectArrayIterator<SQLRecoverableException> objectArrayIterator0 = new ObjectArrayIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0, 1);
      List<SQLRecoverableException> list0 = IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) objectArrayIterator0);
      LoopingListIterator<SQLRecoverableException> loopingListIterator0 = new LoopingListIterator<SQLRecoverableException>(list0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransientException0);
      // Undeclared exception!
      IteratorUtils.contains((Iterator<SQLRecoverableException>) loopingListIterator0, (Object) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonListIterator<Locale.Category> singletonListIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Locale.Category>) singletonListIterator0, (Predicate<? super Locale.Category>) predicate1);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractHashedMap$EntrySet");
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractHashedMap$EntrySet", "org.apache.commons.collections4.map.AbstractHashedMap$EntrySet");
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("", sQLTimeoutException1);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) objectArrayListIterator0);
      IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) iterator0, 1385);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLTimeoutException>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      String string0 = "5";
      String string1 = "]Dpxm:D98fi.>ro_";
      int int0 = 100;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(string0, string1, int0);
      arrayDeque0.offer(sQLTransactionRollbackException0);
      LoopingIterator<SQLTransactionRollbackException> loopingIterator0 = new LoopingIterator<SQLTransactionRollbackException>(arrayDeque0);
      // Undeclared exception!
      IteratorUtils.size(loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("The method to invoke must not be null", "The method to invoke must not be null");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("?g&VQK]88O\t48tB", ",<o-5,0BMlJ", sQLTransientException0);
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 2);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      classArray0[0] = class0;
      sQLTransientException0.setNextException(sQLNonTransientException0);
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      classArray0[1] = class1;
      InvokerTransformer<Object, SQLDataException> invokerTransformer0 = new InvokerTransformer<Object, SQLDataException>("`uG$'5zI_U2qtm?v", classArray0, classArray0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.objectGraphIterator(sQLNonTransientException0, (Transformer<? super SQLNonTransientException, ? extends SQLNonTransientException>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 128);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '`uG$'5zI_U2qtm?v' on 'class java.sql.SQLNonTransientException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MapIterator<String, SQLTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends String>) mapIterator0, (Class<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SingletonIterator<SQLNonTransientException> singletonIterator0 = new SingletonIterator<SQLNonTransientException>(sQLDataException0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "[";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "S)T";
      stringArray0[5] = "%`~j";
      stringArray0[6] = "Ilnb=";
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringArray0, 0, (-967));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLNonTransientException[]) null, 0, 710);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("e&6>k", "e&6>k", sQLDataException0);
      sQLTimeoutException0.printStackTrace();
      Transformer<Object, SQLTimeoutException> transformer0 = InvokerTransformer.invokerTransformer("e&6>k");
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer0);
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) iterator0, (Iterator<? extends SQLTransientException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientException>) zippingIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'e&6>k' on 'class java.sql.SQLTimeoutException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      LoopingIterator<SQLTransientException> loopingIterator0 = new LoopingIterator<SQLTransientException>(arrayDeque0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, sQLClientInfoException0);
      arrayDeque0.add(sQLTimeoutException0);
      loopingIterator0.hasNext();
      IteratorUtils.toString((Iterator<SQLTransientException>) loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("I##(]1xDa", "I##(]1xDa", true);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(stringTokenizer0);
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.singletonListIterator(stringTokenizer0);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("I##(]1xDa");
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(transformerPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<StringTokenizer>) listIterator0, (Predicate<? super StringTokenizer>) notPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'I##(]1xDa' on 'class java.util.StringTokenizer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      IteratorUtils.getIterator("-!0NhYz;");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 800, 119);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      IteratorUtils.getIterator("-!0Oz;");
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>(0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) resettableListIterator0, class0);
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0, 1);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>((Predicate<? super Object>[]) null);
      Predicate<Integer> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Integer>) nonePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Integer>) objectArrayIterator0, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NonePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLDataException sQLDataException0 = new SQLDataException("underlying nodeList has no mor~ elements");
      SingletonIterator<SQLNonTransientException> singletonIterator0 = new SingletonIterator<SQLNonTransientException>((SQLNonTransientException) null);
      IteratorUtils.get((Iterator<SQLNonTransientException>) singletonIterator0, 0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.getIterator(locale_Category0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 8);
      OrderedMapIterator<Integer, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<Integer>) orderedMapIterator0;
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-2227));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1373));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[1]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-2294));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(31);
      integerArray0[6] = integer6;
      int int0 = 12;
      Integer integer7 = new Integer(12);
      integerArray0[7] = integer7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, 6, (int) integerArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ResettableIterator<StringTokenizer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Transformer<StringTokenizer, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<StringTokenizer>) resettableIterator0, (Transformer<? super StringTokenizer, String>) transformer0, "", "", "");
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 4);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[9];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("org.apache.commons.collections4.functors.PrototypeFactory", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException3;
      String string0 = "c/K-_";
      int int0 = 10;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("Start index must not be greater than the array length", "c/K-_", 10);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("Vcvn8F.WQ/%;");
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory", sQLNonTransientConnectionException2);
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException6;
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException7;
      SQLNonTransientConnectionException sQLNonTransientConnectionException8 = new SQLNonTransientConnectionException("", "Start index must not be greater than the array length", sQLNonTransientConnectionException5);
      sQLNonTransientConnectionExceptionArray0[7] = sQLNonTransientConnectionException8;
      SQLNonTransientConnectionException sQLNonTransientConnectionException9 = new SQLNonTransientConnectionException((String) null, "Start index must not be greater than the array length");
      sQLNonTransientConnectionExceptionArray0[8] = sQLNonTransientConnectionException9;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      IteratorUtils.loopingListIterator((List<SQLDataException>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((String[]) null, 10, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) resettableListIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      IteratorUtils.loopingListIterator((List<SQLDataException>) arrayList0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Closure<Object> closure1 = SwitchClosure.switchClosure((Predicate<? super Object>[]) predicateArray0, (Closure<? super Object>[]) closureArray0, (Closure<? super Object>) closure0);
      Closure<Object> closure2 = WhileClosure.whileClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure1, true);
      Closure<SQLClientInfoException> closure3 = ForClosure.forClosure(39, (Closure<? super SQLClientInfoException>) closure2);
      IteratorUtils.apply((Iterator<SQLClientInfoException>) null, (Closure<? super SQLClientInfoException>) closure3);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLDataException>) arrayList0);
      SQLDataException sQLDataException0 = new SQLDataException();
      arrayList0.add(sQLDataException0);
      UniquePredicate<SQLNonTransientException> uniquePredicate0 = new UniquePredicate<SQLNonTransientException>();
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLDataException>) resettableListIterator0, (Predicate<? super SQLDataException>) uniquePredicate0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<ArrayDeque<LinkedHashSet>>) listIterator0, (Closure<? super ArrayDeque<LinkedHashSet>>) closure0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<String> class0 = String.class;
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toArray((Iterator<? extends String>) resettableListIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      IteratorUtils.loopingListIterator((List<SQLDataException>) arrayList0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      int[] intArray0 = new int[5];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateExceptionArray0[1] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("transformer may not be null", "transformer may not be null", 0, intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException1;
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0, 0);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) objectArrayIterator0, (Iterator<? extends BatchUpdateException>) objectArrayIterator0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>((Predicate<? super Object>) null, (Transformer<? super Object, ? extends String>) null, (Transformer<? super Object, ? extends String>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) zippingIterator0, (Transformer<? super BatchUpdateException, String>) ifTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap0 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      SQLDataException sQLDataException0 = new SQLDataException("v");
      SingletonIterator<SQLNonTransientException> singletonIterator0 = new SingletonIterator<SQLNonTransientException>(sQLDataException0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>(predicate0);
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 6);
      Class<DataTruncation> class0 = DataTruncation.class;
      classArray0[0] = class0;
      Class<DataTruncation> class1 = DataTruncation.class;
      classArray0[1] = class1;
      Class<DataTruncation> class2 = DataTruncation.class;
      classArray0[2] = class2;
      Class<DataTruncation> class3 = DataTruncation.class;
      classArray0[3] = class3;
      Class<DataTruncation> class4 = DataTruncation.class;
      classArray0[4] = class4;
      Class<DataTruncation> class5 = DataTruncation.class;
      classArray0[5] = class5;
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>("", classArray0, classArray0);
      TransformerClosure<SQLException> transformerClosure0 = new TransformerClosure<SQLException>(invokerTransformer0);
      hashMap0.put(nullIsExceptionPredicate0, transformerClosure0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "v");
      IteratorUtils.get((Iterator<SQLNonTransientException>) singletonIterator0, 0);
      IteratorUtils.getIterator(hashMap0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap0 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      SQLDataException sQLDataException0 = new SQLDataException("v");
      SingletonIterator<SQLNonTransientException> singletonIterator0 = new SingletonIterator<SQLNonTransientException>(sQLDataException0);
      SQLDataException sQLDataException1 = (SQLDataException)IteratorUtils.get((Iterator<SQLNonTransientException>) singletonIterator0, 0);
      ExceptionFactory.exceptionFactory();
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, (-359), sQLDataException1);
      IteratorUtils.getIterator(dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLClientInfoException>) orderedIterator0, (Closure<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap0 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      Closure<SQLException> closure0 = SwitchClosure.switchClosure((Map<Predicate<SQLException>, Closure<SQLException>>) hashMap0);
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      OrPredicate<SQLException> orPredicate0 = new OrPredicate<SQLException>(predicate0, predicate0);
      hashMap0.put(orPredicate0, (Closure<SQLException>) null);
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.apply((Iterator<SQLClientInfoException>) orderedIterator0, (Closure<? super SQLClientInfoException>) closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Locale.Category>) listIterator0);
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      LoopingListIterator<SQLException> loopingListIterator0 = new LoopingListIterator<SQLException>(linkedList0);
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("&1?m|97:&E0L)C");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) loopingListIterator0, (Transformer<? super SQLException, String>) transformer0, (String) null, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      IteratorUtils.nodeListIterator(nodeList0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toString((Iterator<BatchUpdateException>) listIterator0, (Transformer<? super BatchUpdateException, String>) transformer0);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[0];
      IteratorUtils.arrayListIterator(sQLWarningArray0, 0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap0 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      Closure<SQLException> closure0 = SwitchClosure.switchClosure((Map<Predicate<SQLException>, Closure<SQLException>>) hashMap0);
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.apply((Iterator<SQLClientInfoException>) orderedIterator0, (Closure<? super SQLClientInfoException>) closure0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) null, (Collection<? super StringTokenizer>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      IteratorUtils.getIterator("-!J}Oz;!");
      ExceptionFactory.exceptionFactory();
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      SkippingIterator<SQLFeatureNotSupportedException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) orderedIterator0, 0L);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) skippingIterator0);
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 3);
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      // Undeclared exception!
      try { 
        EnumSet.copyOf((Collection<Locale.Category>) stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Collection is empty
         //
         verifyException("java.util.EnumSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap0 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      SwitchClosure.switchClosure((Map<Predicate<SQLException>, Closure<SQLException>>) hashMap0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) singletonListIterator0, class0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[1];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.arrayIterator(locale_CategoryArray0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Locale.Category>) resettableIterator0);
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      ServiceLoader<SQLSyntaxErrorException> serviceLoader0 = ServiceLoader.loadInstalled(class1);
      SingletonListIterator<ServiceLoader<SQLSyntaxErrorException>> singletonListIterator1 = new SingletonListIterator<ServiceLoader<SQLSyntaxErrorException>>(serviceLoader0);
      IteratorUtils.unmodifiableListIterator((ListIterator<ServiceLoader<SQLSyntaxErrorException>>) singletonListIterator1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap0 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      uniquePredicate0.evaluate((SQLException) null);
      IfClosure<SQLException> ifClosure0 = new IfClosure<SQLException>(uniquePredicate0, (Closure<? super SQLException>) null, (Closure<? super SQLException>) null);
      Closure<SQLException> closure0 = ForClosure.forClosure((-2512), (Closure<? super SQLException>) ifClosure0);
      IfClosure<SQLInvalidAuthorizationSpecException> ifClosure1 = new IfClosure<SQLInvalidAuthorizationSpecException>(uniquePredicate0, (Closure<? super SQLInvalidAuthorizationSpecException>) null);
      IfClosure.ifClosure((Predicate<? super SQLInvalidAuthorizationSpecException>) uniquePredicate0, (Closure<? super SQLInvalidAuthorizationSpecException>) closure0, (Closure<? super SQLInvalidAuthorizationSpecException>) ifClosure1);
      hashMap0.put(uniquePredicate0, ifClosure0);
      SwitchClosure.switchClosure((Map<Predicate<SQLException>, Closure<SQLException>>) hashMap0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("-1!J}Oz;!");
      int int0 = 12;
      SQLException sQLException0 = new SQLException("o5OUSjH-A");
      SQLDataException sQLDataException0 = new SQLDataException("o5OUSjH-A", sQLException0);
      SingletonIterator<SQLNonTransientException> singletonIterator0 = new SingletonIterator<SQLNonTransientException>(sQLDataException0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[0];
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLNonTransientException>) resettableListIterator0, 12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 12
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      IteratorUtils.loopingListIterator((List<SQLDataException>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends StringTokenizer>) null, (Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      IteratorUtils.singletonListIterator("-!J}Oz;!");
      LinkedList<StringTokenizer> linkedList0 = new LinkedList<StringTokenizer>();
      IteratorUtils.getIterator("-!J}Oz;!");
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<?>) null, (Transformer<? super Object, ? extends String>) factoryTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLTimeoutException, SQLWarning> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTimeoutException, ? extends SQLWarning>) orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLTimeoutException, SQLWarning> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, SQLWarning>(mapIterator0);
      IteratorUtils.toString((Iterator<SQLTimeoutException>) abstractMapIteratorDecorator0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("[]", "[]", (-1), hashtable0);
      ArrayListIterator<SQLIntegrityConstraintViolationException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLIntegrityConstraintViolationException>(sQLClientInfoException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap0 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      Closure<SQLException> closure0 = SwitchClosure.switchClosure((Map<Predicate<SQLException>, Closure<SQLException>>) hashMap0);
      IteratorUtils.apply((Iterator<SQLClientInfoException>) resettableListIterator0, (Closure<? super SQLClientInfoException>) closure0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "?nCj_S7i!9, <lgr}ZK");
      SQLDataException sQLDataException0 = new SQLDataException("?nCj_S7i!9, <lgr}ZK", sQLTransactionRollbackException0);
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.unmodifiableListIterator((ListIterator<Iterator<Predicate>>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("-!J}Oz;!");
      IteratorUtils.asIterable((Iterator<?>) singletonListIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "bf0RGpFyzBeOM>xM`z,", true);
      IteratorUtils.getIterator(stringTokenizer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("bf0RGpFyzBeOM>xM`z,");
      IteratorUtils.nodeListIterator(nodeList0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("-!J}Oz;!");
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLClientInfoException1);
      sQLClientInfoException1.getSuppressed();
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException(hashMap0, sQLClientInfoException2);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException("^Siy_!]z9d1,[}#Cc]", hashMap0);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException7;
      SQLClientInfoException sQLClientInfoException8 = new SQLClientInfoException("G-Eo{\"E", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[8] = sQLClientInfoException8;
      sQLClientInfoException4.initCause(sQLClientInfoException7);
      ObjectArrayIterator<SQLClientInfoException> objectArrayIterator0 = new ObjectArrayIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0, 1);
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLClientInfoException>) objectArrayIterator0, (Closure<? super SQLClientInfoException>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", sQLSyntaxErrorException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLNonTransientConnectionException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("35^", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.bidimap.TreeBidiMap$Inverse");
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("35^");
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("9$qJatOinJXE^/}", "", 10);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("-!J}Oz;!");
      IteratorUtils.size(singletonListIterator0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[3];
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.iterators.AbstractIteratorDecorator", intArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(",4wC;OxlRNF", "org.apache.commons.collections4.iterators.AbstractIteratorDecorator", 1, batchUpdateException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("iterator", "|1LJp", 96);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0, 1);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) objectArrayIterator0, (Iterator<? extends SQLTransientConnectionException>) objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("-!J}Oz;!");
      Object object0 = new Object();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(object0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      SingletonIterator<EnumSet<Locale.Category>> singletonIterator0 = new SingletonIterator<EnumSet<Locale.Category>>(enumSet0, false);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate0 = OrPredicate.orPredicate((Predicate<? super Object>) predicateArray0[1], (Predicate<? super Object>) predicateArray0[0]);
      predicateArray0[2] = predicate0;
      predicateArray0[3] = (Predicate<Object>) equalPredicate0;
      predicateArray0[4] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.matchesAll((Iterator<EnumSet<Locale.Category>>) singletonIterator0, (Predicate<? super EnumSet<Locale.Category>>) predicate1);
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) resettableIterator0, (Iterator<? extends SQLDataException>) resettableIterator0);
      ObjectArrayIterator<String> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<String>((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Iterator<?> iterator0 = IteratorUtils.getIterator("-!J}Oz;!");
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      IteratorUtils.transformedIterator(iterator0, (Transformer<? super Object, ? extends String>) factoryTransformer0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "e0|/";
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("e0|/");
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) listIterator0, class0);
      StringTokenizer[] stringTokenizerArray0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((StringTokenizer[]) null, (-2708));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Enumeration must not be null", (String) null, hashMap0);
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap1 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      SwitchClosure.switchClosure((Map<Predicate<SQLException>, Closure<SQLException>>) hashMap1);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, Object> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLFeatureNotSupportedException, ?>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) orderedMapIterator1, (Transformer<? super SQLNonTransientException, ? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("-!J}Oz;!");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ArrayList<ServiceLoader>>) listIterator0, (Transformer<? super ArrayList<ServiceLoader>, String>) null, "-!J}Oz;!", "-!J}Oz;!", "Estimated size must be greater than 0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "-!J}Oz;!";
      IteratorUtils.singletonListIterator("-!J}Oz;!");
      LinkedList<StringTokenizer> linkedList0 = new LinkedList<StringTokenizer>();
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(linkedList0);
      SQLDataException sQLDataException0 = new SQLDataException("-!J}Oz;!", "Ei>1)?%/x>gX%UY>i$R");
      MockThrowable mockThrowable0 = new MockThrowable((String) null, sQLDataException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(mockThrowable0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(locale_Category0);
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      SingletonIterator<EnumSet<Locale.Category>> singletonIterator0 = new SingletonIterator<EnumSet<Locale.Category>>(enumSet0, false);
      Class<SQLWarning>[] classArray0 = (Class<SQLWarning>[]) Array.newInstance(Class.class, 5);
      Class<SQLWarning> class0 = SQLWarning.class;
      classArray0[0] = class0;
      Class<SQLWarning> class1 = SQLWarning.class;
      classArray0[1] = class1;
      Class<SQLWarning> class2 = SQLWarning.class;
      classArray0[2] = class2;
      Class<SQLWarning> class3 = SQLWarning.class;
      classArray0[3] = class3;
      Class<SQLWarning> class4 = SQLWarning.class;
      classArray0[4] = class4;
      Transformer<Object, SQLSyntaxErrorException> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, equalPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<EnumSet<Locale.Category>>) singletonIterator0, (Predicate<? super EnumSet<Locale.Category>>) transformedPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.util.RegularEnumSet' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("-!J}Oz;!");
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MapIterator<BatchUpdateException, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableIterator((Iterator<BatchUpdateException>) mapIterator0);
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      SQLDataException sQLDataException0 = new SQLDataException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      IteratorUtils.singletonListIterator("-!J}Oz;!");
      LinkedList<StringTokenizer> linkedList0 = new LinkedList<StringTokenizer>();
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(linkedList0);
      SQLDataException sQLDataException0 = new SQLDataException("-!J}Oz;!", "Ei>1)?%/x>gX%UY>i$R");
      MockThrowable mockThrowable0 = new MockThrowable((String) null, sQLDataException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(mockThrowable0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(locale_Category0);
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      SingletonIterator<EnumSet<Locale.Category>> singletonIterator0 = new SingletonIterator<EnumSet<Locale.Category>>(enumSet0, false);
      IteratorUtils.matchesAll((Iterator<EnumSet<Locale.Category>>) singletonIterator0, (Predicate<? super EnumSet<Locale.Category>>) equalPredicate0);
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) resettableIterator0, (Iterator<? extends SQLDataException>) resettableIterator0);
      ObjectArrayIterator<String> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<String>((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLDataException>) linkedList0);
      Hashtable<SQLDataException, Integer> hashtable0 = new Hashtable<SQLDataException, Integer>();
      EntrySetMapIterator<SQLDataException, Integer> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, Integer>(hashtable0);
      IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) null, (Iterator<? extends SQLDataException>) entrySetMapIterator0, (Iterator<? extends SQLDataException>) resettableListIterator0);
      LinkedList<SQLDataException> linkedList1 = new LinkedList<SQLDataException>();
      ResettableListIterator<SQLDataException> resettableListIterator1 = IteratorUtils.loopingListIterator((List<SQLDataException>) linkedList0);
      Predicate<SQLNonTransientException> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLDataException>) resettableListIterator1, (Predicate<? super SQLDataException>) predicate0);
      ResettableListIterator<SQLNonTransientException> resettableListIterator2 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLNonTransientException>) resettableListIterator2, (-5114));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -5114
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MapIterator<TreeSet<SQLException>, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.skippingIterator((Iterator<TreeSet<SQLException>>) mapIterator0, 0L);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 4);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) resettableListIterator0);
      DataTruncation dataTruncation0 = new DataTruncation((-1), false, true, (-1), (-1));
      Transformer<SQLWarning, DataTruncation> transformer0 = InvokerTransformer.invokerTransformer("");
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
      iteratorArray0[1] = iterator0;
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      dataTruncation0.getSuppressed();
      iteratorArray0[2] = (Iterator<DataTruncation>) listIterator0;
      OrderedMapIterator<DataTruncation, Vector<Predicate>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[3] = (Iterator<DataTruncation>) orderedMapIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "n* ");
      MapIterator<BatchUpdateException, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<BatchUpdateException>) mapIterator0);
      IteratorUtils.toArray(iterator0);
      EmptyListIterator.resettableEmptyListIterator();
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap0 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      SwitchClosure.switchClosure((Map<Predicate<SQLException>, Closure<SQLException>>) hashMap0);
      MapIterator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException> mapIterator1 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) mapIterator1, (Predicate<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[5];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "org.apache.commons.collections4.IteratorUtils", 0, (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.IteratorUtils", sQLInvalidAuthorizationSpecException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", "org.apache.commons.collections4.IteratorUtils");
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("org.apache.commons.collections4.IteratorUtils", "", sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException(sQLSyntaxErrorException2);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("16[3", "org.apache.commons.collections4.functors.CatchAndRethrowClosure", 0, sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      ObjectArrayIterator<SQLSyntaxErrorException> objectArrayIterator0 = new ObjectArrayIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0, 0);
      IteratorUtils.toArray((Iterator<?>) objectArrayIterator0);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap0 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      Closure<SQLException> closure0 = SwitchClosure.switchClosure((Map<Predicate<SQLException>, Closure<SQLException>>) hashMap0);
      IteratorUtils.apply((Iterator<SQLClientInfoException>) resettableListIterator0, (Closure<? super SQLClientInfoException>) closure0);
      MapIterator<HashSet<DataTruncation>, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      IteratorUtils.transformedIterator((Iterator<?>) mapIterator0, (Transformer<? super Object, ? extends String>) factoryTransformer0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.IteratorUtils");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1323);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      HashMap<StringTokenizer, SQLException> hashMap0 = new HashMap<StringTokenizer, SQLException>();
      EntrySetMapIterator<StringTokenizer, SQLException> entrySetMapIterator0 = new EntrySetMapIterator<StringTokenizer, SQLException>(hashMap0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends StringTokenizer, ? extends SQLException>) entrySetMapIterator0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap1);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "fromIndex = ", sQLClientInfoException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fromIndex = ", "4Zcm'7ky", 1582, sQLNonTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLSyntaxErrorException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException((String) null, sQLClientInfoException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("/\"W U[OxF4>>b@<bu\"_", (String) null, sQLNonTransientConnectionException1);
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate(object0, comparator0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.getIterator((Object) null);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      IteratorUtils.size(iterator0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("Iterator[");
      IteratorUtils.asMultipleUseIterable((Iterator<? extends String>) singletonIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLNonTransientException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Enumeration must not be null", (String) null, hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0);
      IteratorUtils.getIterator(sQLClientInfoException1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLClientInfoException1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.getIterator(resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(stack0);
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(arrayList0);
      IteratorUtils.chainedIterator((Iterator<? extends StringTokenizer>) reverseListIterator0, (Iterator<? extends StringTokenizer>) reverseListIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<SQLFeatureNotSupportedException> predicate0 = OrPredicate.orPredicate((Predicate<? super SQLFeatureNotSupportedException>) uniquePredicate0, (Predicate<? super SQLFeatureNotSupportedException>) uniquePredicate0);
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) loopingListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Hashtable<SQLException, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<SQLException, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<SQLException, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<SQLException, SQLFeatureNotSupportedException>(hashtable0);
      int int0 = 69;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLFeatureNotSupportedException[]) null, 69);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Y~bj:-OA]!m8oB[-7");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("]u", "]u", "]u", (-299));
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "]", "]", 428);
      stackTraceElementArray0[2] = stackTraceElement1;
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("Array class must not be null", (Class<?>[]) null, (Object[]) null);
      IteratorUtils.toString((Iterator<SQLException>) null, (Transformer<? super SQLException, String>) invokerTransformer0, "GLya|", "u_", "u_");
      IteratorUtils.emptyMapIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Transformer<Object, Object> transformer0 = ClosureTransformer.closureTransformer((Closure<? super Object>) closure0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("]", sQLIntegrityConstraintViolationException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLInvalidAuthorizationSpecException0, comparator0, comparatorPredicate_Criterion0);
      Predicate<Object> predicate0 = OrPredicate.orPredicate((Predicate<? super Object>) comparatorPredicate0, (Predicate<? super Object>) comparatorPredicate0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      IteratorUtils.matchesAll((Iterator<String>) null, (Predicate<? super String>) transformedPredicate0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "GREATER_OR_EQUAL");
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) null);
      IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Transformer<SQLTransientException, SQLTransactionRollbackException> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.objectGraphIterator(sQLTransactionRollbackException0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) transformer0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLWarning sQLWarning0 = new SQLWarning(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLWarning0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>(",");
      ConstantTransformer.constantTransformer((DataTruncation) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int[] intArray0 = new int[9];
      intArray0[0] = (-3313);
      intArray0[1] = 845;
      intArray0[2] = (-3313);
      intArray0[3] = (-3313);
      intArray0[4] = (-3313);
      intArray0[5] = (-3313);
      intArray0[6] = (-3313);
      intArray0[7] = (-3313);
      intArray0[8] = (-3313);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.IteratorUtils", "\"<N?`h1}Qx6;{[u", intArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("75B{E: vml", "org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator", hashMap0, batchUpdateException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, sQLClientInfoException0);
      DataTruncation dataTruncation0 = new DataTruncation((-3313), true, true, (-3313), (-3313), sQLTimeoutException0);
      ConstantTransformer.constantTransformer(dataTruncation0);
      IteratorUtils.toString((Iterator<ArrayList<ServiceLoader>>) null, (Transformer<? super ArrayList<ServiceLoader>, String>) constantTransformer0, "No previous() entry in the iteration", "", "<$m=XE1");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ListIterator<StringTokenizer> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap0 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      Closure<SQLException> closure0 = SwitchClosure.switchClosure((Map<Predicate<SQLException>, Closure<SQLException>>) hashMap0);
      IteratorUtils.apply((Iterator<SQLClientInfoException>) resettableListIterator0, (Closure<? super SQLClientInfoException>) closure0);
      MapIterator<HashSet<DataTruncation>, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      IteratorUtils.transformedIterator((Iterator<?>) mapIterator0, (Transformer<? super Object, ? extends String>) factoryTransformer0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("Closure must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) stringTokenizer0, (-2825));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PriorityQueue<SQLRecoverableException>[] priorityQueueArray0 = (PriorityQueue<SQLRecoverableException>[]) Array.newInstance(PriorityQueue.class, 4);
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<SQLRecoverableException> priorityQueue1 = new PriorityQueue<SQLRecoverableException>(257);
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<SQLRecoverableException> priorityQueue2 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[2] = priorityQueue2;
      PriorityQueue<SQLRecoverableException> priorityQueue3 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[3] = priorityQueue3;
      ResettableListIterator<PriorityQueue<SQLRecoverableException>> resettableListIterator0 = IteratorUtils.arrayListIterator(priorityQueueArray0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<PriorityQueue<SQLRecoverableException>>) resettableListIterator0, (Transformer<? super PriorityQueue<SQLRecoverableException>, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(stack0);
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(arrayList0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "*lnVEHkj@Zj{:C0nPB<", 911, hashtable0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((String) null, hashtable0, sQLClientInfoException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLClientInfoException1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, sQLFeatureNotSupportedException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "Estimated size must be greater than 0", sQLFeatureNotSupportedException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate((Object) sQLFeatureNotSupportedException0, comparator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, Properties>(orderedMapIterator0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("RL3uV/X");
      Iterator<StringTokenizer> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      OrderedMapIterator<Object, Stack<SQLTransactionRollbackException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Object, Stack<SQLTransactionRollbackException>>) orderedMapIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) resettableIterator0);
      IteratorUtils.singletonListIterator("^n");
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("^n");
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      DataTruncation dataTruncation0 = new DataTruncation(2037, false, false, 2037, 32);
      SQLDataException sQLDataException0 = new SQLDataException("^n", dataTruncation0);
      linkedList0.addFirst(sQLDataException0);
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLDataException>) linkedList0);
      UniquePredicate<SQLNonTransientException> uniquePredicate0 = new UniquePredicate<SQLNonTransientException>();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLDataException>) resettableListIterator0, (Predicate<? super SQLDataException>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MapIterator<HashSet<String>, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      String string0 = "]";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("]", (String) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("]", sQLNonTransientConnectionException0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 4);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      classArray0[0] = class0;
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      classArray0[1] = class1;
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      classArray0[2] = class2;
      Class<BatchUpdateException> class3 = BatchUpdateException.class;
      classArray0[3] = class3;
      InvokerTransformer<Object, SQLSyntaxErrorException> invokerTransformer0 = new InvokerTransformer<Object, SQLSyntaxErrorException>("]", classArray0, classArray0);
      IfTransformer<Object, SQLSyntaxErrorException> ifTransformer0 = new IfTransformer<Object, SQLSyntaxErrorException>(uniquePredicate0, invokerTransformer0, invokerTransformer0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) ifTransformer0);
      Class<SQLSyntaxErrorException> class4 = SQLSyntaxErrorException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) iterator0, class4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method ']' on 'class java.sql.SQLSyntaxErrorException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(stack0);
      IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) loopingListIterator0, 987);
      ArrayList<SQLFeatureNotSupportedException> arrayList1 = new ArrayList<SQLFeatureNotSupportedException>();
      Locale.getISOCountries();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrPredicate.orPredicate((Predicate<? super SQLFeatureNotSupportedException>) uniquePredicate0, (Predicate<? super SQLFeatureNotSupportedException>) uniquePredicate0);
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) loopingListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) uniquePredicate0);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap0 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      Closure<SQLException> closure0 = SwitchClosure.switchClosure((Map<Predicate<SQLException>, Closure<SQLException>>) hashMap0);
      IteratorUtils.apply((Iterator<SQLClientInfoException>) resettableListIterator0, (Closure<? super SQLClientInfoException>) closure0);
      IteratorUtils.size(loopingListIterator0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[9];
      DataTruncation dataTruncation0 = new DataTruncation(70, true, true, 70, 0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(40, false, true, 40, 0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-134), true, false, (-1843), 512, dataTruncation1);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(987, true, false, 40, 5);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation((-1486), false, false, (-134), (-642));
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation((-642), false, false, 70, 70);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(70, true, true, (-1486), (-681));
      dataTruncationArray0[6] = dataTruncation6;
      DataTruncation dataTruncation7 = new DataTruncation((-693), false, true, 1411, 1);
      dataTruncationArray0[7] = dataTruncation7;
      DataTruncation dataTruncation8 = new DataTruncation((-1486), false, true, 69, (-1486));
      dataTruncationArray0[8] = dataTruncation8;
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) iterator0, (long) (-1486), (long) 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      HashMap<StringTokenizer, SQLException> hashMap0 = new HashMap<StringTokenizer, SQLException>();
      EntrySetMapIterator<StringTokenizer, SQLException> entrySetMapIterator0 = new EntrySetMapIterator<StringTokenizer, SQLException>(hashMap0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends StringTokenizer, ? extends SQLException>) entrySetMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(stack0);
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(arrayList0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends StringTokenizer>) reverseListIterator0, (Iterator<? extends StringTokenizer>) reverseListIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) reverseListIterator0);
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0, (Collection<? super StringTokenizer>) arrayList0);
      IteratorUtils.isEmpty(iterator0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) arrayList0);
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0);
      int[] intArray0 = new int[2];
      intArray0[0] = 100;
      intArray0[1] = 0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLFeatureNotSupportedException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0, sQLNonTransientException0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<BatchUpdateException> comparatorPredicate0 = new ComparatorPredicate<BatchUpdateException>(batchUpdateException0, (Comparator<BatchUpdateException>) null, comparatorPredicate_Criterion0);
      IteratorUtils.matchesAny((Iterator<BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) comparatorPredicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(batchUpdateException0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.size(singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      HashMap<StringTokenizer, SQLException> hashMap0 = new HashMap<StringTokenizer, SQLException>();
      String string0 = "org.apache.commons.collectons4.functors.PredicateTransformer";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collectons4.functors.PredicateTransformer", "org.apache.commons.collectons4.functors.PredicateTransformer", (-3321));
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLFeatureNotSupportedException0);
      MapIterator<StringTokenizer, SQLDataException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0);
      String string1 = null;
      IteratorUtils.singletonListIterator((String) null);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends String>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(stack0);
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(arrayList0);
      IteratorUtils.chainedIterator((Iterator<? extends StringTokenizer>) reverseListIterator0, (Iterator<? extends StringTokenizer>) reverseListIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      uniquePredicate0.evaluate(stack0);
      OrPredicate.orPredicate((Predicate<? super SQLFeatureNotSupportedException>) uniquePredicate0, (Predicate<? super SQLFeatureNotSupportedException>) uniquePredicate0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends String>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", sQLNonTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", sQLNonTransientConnectionException1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLInvalidAuthorizationSpecException0, comparator0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OrderedMapIterator<Boolean, EnumSet<Locale.Category>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends Boolean>) orderedMapIterator0, 4023L);
      String string0 = "]";
      int int0 = 2924;
      ArrayIterator<SQLDataException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLDataException>("]", 2924, 2924);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(stack0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      stack0.add(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) loopingListIterator0, 987);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(stack0);
      IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) loopingListIterator0, 987);
      ArrayList<SQLFeatureNotSupportedException> arrayList1 = new ArrayList<SQLFeatureNotSupportedException>();
      Locale.getISOLanguages();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      int int0 = 100;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "=2DI S`P>GSv8n8", (Throwable) null);
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.singletonIterator((SQLNonTransientException) sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLNonTransientException>) resettableIterator0, 100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 99
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~^a");
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString(iterator0, (Transformer<? super IIOMetadataNode, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Y~bj:-OA]!m8oB[-7");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("U", "U", "U", (-299));
      stackTraceElementArray0[0] = stackTraceElement0;
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>((SQLFeatureNotSupportedException) null);
      IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) singletonIterator0, 100);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      Locale.getISOCountries();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      SQLException sQLException0 = new SQLException("KOsgF~ddc&a");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Y~bj:-OA]!m8oB[-7", "KOsgF~ddc&a", sQLException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, Properties>(orderedMapIterator0);
      Transformer<Object, String> transformer0 = new ConstantTransformer<Object, String>("RL3uV/X");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ArrayList<ServiceLoader>>) abstractOrderedMapIteratorDecorator0, (Transformer<? super ArrayList<ServiceLoader>, String>) transformer0, "]", (String) null, "No previous() entry in the iteration");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NodeList must not be null");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Y~bj:-OA]!m8oB[-7");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("U", "U", "U", (-299));
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "]", "]", 428);
      stackTraceElementArray0[2] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("org.apache.commons.collections4.list.AbstractLinkedList", "]", "L%nYk", 428);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLNonTransientException>) null, 2781);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayDeque<BatchUpdateException> arrayDeque0 = new ArrayDeque<BatchUpdateException>();
      Iterator<BatchUpdateException> iterator0 = arrayDeque0.iterator();
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) iterator0, (Iterator<? extends BatchUpdateException>) iterator0);
      Integer integer0 = new Integer(9);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2279);
      integerArray0[1] = integer1;
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("j", "j", 100);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLFeatureNotSupportedException0);
      Transformer<Object, BatchUpdateException> transformer0 = ConstantTransformer.constantTransformer(batchUpdateException0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer0);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(batchUpdateException0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super BatchUpdateException>) equalPredicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLFeatureNotSupportedException0);
      IteratorUtils.emptyMapIterator();
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 6);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("j", "j", 512, sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException1, 637);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(stack0);
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(arrayList0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends StringTokenizer>) reverseListIterator0, (Iterator<? extends StringTokenizer>) reverseListIterator0);
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0, (Collection<? super StringTokenizer>) arrayList0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      OrderedMapIterator<String, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends String, ? extends Properties>) orderedMapIterator0);
      SQLException sQLException0 = new SQLException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.functors.ComparatorPredicate$Criterion", "", 390, sQLException0);
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0, true);
      ArrayList<Closure<Object>> arrayList1 = new ArrayList<Closure<Object>>();
      Closure<SQLException> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super SQLException>>) arrayList1);
      IteratorUtils.apply((Iterator<SQLTimeoutException>) singletonIterator0, (Closure<? super SQLTimeoutException>) closure0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[4];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 10);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", "", (-2180));
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLFeatureNotSupportedException1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("The map size must be 0 or 1", "R(n$@7u", 0, sQLInvalidAuthorizationSpecException0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("", "");
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException1;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      Predicate<SQLFeatureNotSupportedException> predicate1 = OrPredicate.orPredicate((Predicate<? super SQLFeatureNotSupportedException>) predicate0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate1);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap0 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      Closure<SQLException> closure0 = SwitchClosure.switchClosure((Map<Predicate<SQLException>, Closure<SQLException>>) hashMap0);
      IteratorUtils.apply((Iterator<SQLClientInfoException>) resettableListIterator0, (Closure<? super SQLClientInfoException>) closure0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(stack0);
      IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) loopingListIterator0, 987);
      ArrayList<SQLFeatureNotSupportedException> arrayList1 = new ArrayList<SQLFeatureNotSupportedException>();
      Locale.getISOCountries();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrPredicate.orPredicate((Predicate<? super SQLFeatureNotSupportedException>) uniquePredicate0, (Predicate<? super SQLFeatureNotSupportedException>) uniquePredicate0);
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) loopingListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) uniquePredicate0);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap0 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      Closure<SQLException> closure0 = SwitchClosure.switchClosure((Map<Predicate<SQLException>, Closure<SQLException>>) hashMap0);
      IteratorUtils.apply((Iterator<SQLClientInfoException>) resettableListIterator0, (Closure<? super SQLClientInfoException>) closure0);
      IteratorUtils.size(loopingListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[4];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 10);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", "", (-2180));
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLFeatureNotSupportedException1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("The map size must be 0 or 1", "R(n$@7u", 0, sQLInvalidAuthorizationSpecException0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("", "");
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLDataException[]) null, (-2180), (-365));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Y~bj:-OA]!m8oB[-7");
      String string0 = "U";
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      int int0 = (-299);
      StackTraceElement stackTraceElement0 = new StackTraceElement("U", "U", "U", (-299));
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      String string1 = "]";
      int int1 = 428;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "]", "]", 428);
      stackTraceElementArray0[2] = stackTraceElement1;
      String string2 = "L%nYk";
      StackTraceElement stackTraceElement2 = new StackTraceElement("org.apache.commons.collections4.list.AbstractLinkedList", "]", "L%nYk", 428);
      EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.emptyMapIterator();
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringArray0, (-1241), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      ListIterator<StringTokenizer> listIterator0 = EmptyListIterator.emptyListIterator();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 3061);
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      SkippingIterator<SQLDataException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLDataException>) resettableListIterator0, (long) 3061);
      Iterator<SQLDataException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) skippingIterator0, (Iterator<? extends SQLDataException>) resettableListIterator0);
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) iterator0, 10);
      ResettableListIterator<SQLDataException> resettableListIterator1 = IteratorUtils.loopingListIterator(list0);
      Predicate<SQLNonTransientException> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLDataException>) resettableListIterator1, (Predicate<? super SQLDataException>) predicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("0", "NodeList must not be null", (-532));
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0, 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      ListIterator<StringTokenizer> listIterator0 = EmptyListIterator.emptyListIterator();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 3061);
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 4);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "NodeList must not be null");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MapIterator<TreeSet<SQLException>, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.skippingIterator((Iterator<TreeSet<SQLException>>) mapIterator0, 0L);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 4);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) resettableListIterator0);
      iteratorArray0[0] = (Iterator<DataTruncation>) listIterator0;
      DataTruncation dataTruncation0 = new DataTruncation((-1), false, true, (-1), (-1));
      Transformer<SQLWarning, DataTruncation> transformer0 = InvokerTransformer.invokerTransformer("");
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
      iteratorArray0[1] = iterator0;
      ListIterator<DataTruncation> listIterator1 = EmptyListIterator.emptyListIterator();
      iteratorArray0[2] = (Iterator<DataTruncation>) listIterator1;
      OrderedMapIterator<DataTruncation, Vector<Predicate>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[3] = (Iterator<DataTruncation>) orderedMapIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Y~bj:-OA]!m8oB[-7");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("U", "U", "U", (-299));
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "]", "]", 428);
      stackTraceElementArray0[2] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("org.apache.commons.collections4.list.AbstractLinkedList", "]", "L%nYk", 428);
      stackTraceElementArray0[3] = stackTraceElement2;
      Iterator<EnumSet<Locale.Category>> iterator0 = EmptyIterator.emptyIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLIntegrityConstraintViolationException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLSyntaxErrorException0);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super EnumSet<Locale.Category>>) equalPredicate0);
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) resettableIterator0, (Iterator<? extends SQLDataException>) resettableIterator0);
      OrderedMapIterator<IIOMetadataNode, Locale.Category> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, Locale.Category> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, Locale.Category>(orderedMapIterator0);
      OrderedMapIterator<IIOMetadataNode, Locale.Category> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<IIOMetadataNode, ? extends Locale.Category>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<IIOMetadataNode, Locale.Category>) orderedMapIterator1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "U";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0, false);
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("-!J}Oz;!");
      MapIterator<SQLDataException, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      predicateArray0[0] = (Predicate<Object>) notPredicate0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) mapIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      predicateArray0[1] = predicate0;
      predicateArray0[2] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[3] = (Predicate<Object>) notPredicate0;
      predicateArray0[4] = (Predicate<Object>) notPredicate0;
      OrderedMapIterator<EnumSet<Locale.Category>, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<EnumSet<Locale.Category>, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<EnumSet<Locale.Category>, SQLNonTransientConnectionException>(orderedMapIterator0);
      IteratorUtils.matchesAll((Iterator<EnumSet<Locale.Category>>) abstractOrderedMapIteratorDecorator0, (Predicate<? super EnumSet<Locale.Category>>) predicateArray0[4]);
      SQLDataException sQLDataException0 = new SQLDataException("-!J}Oz;!", "BPl!-v_Len1]L:@");
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      EmptyListIterator.resettableEmptyListIterator();
      MapIterator<String, SQLException> mapIterator1 = IteratorUtils.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends String>) listIterator0, (Iterator<? extends String>) listIterator0, (Iterator<? extends String>) mapIterator1);
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) listIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 2518;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Entry does not exist: ", "Entry does not exist: ", 2518);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLFeatureNotSupportedException0);
      Transformer<Object, BatchUpdateException> transformer0 = ConstantTransformer.constantTransformer(batchUpdateException0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer0);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLFeatureNotSupportedException0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super BatchUpdateException>) equalPredicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLFeatureNotSupportedException0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~^a");
      sQLInvalidAuthorizationSpecException0.printStackTrace((PrintWriter) mockPrintWriter0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientException>) singletonListIterator0);
      OrderedMapIterator<SQLNonTransientException, EnumSet<Locale.Category>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientException, EnumSet<Locale.Category>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientException, EnumSet<Locale.Category>>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLNonTransientException>) abstractOrderedMapIteratorDecorator0, 100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 100
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = 9;
      Integer integer0 = new Integer(9);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2279);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2279);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1420);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2815);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      IteratorUtils.arrayListIterator(integerArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, Properties>(orderedMapIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientException>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1380);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ConstantTransformer<Object, Locale.Category> constantTransformer0 = new ConstantTransformer<Object, Locale.Category>(locale_Category0);
      IteratorUtils.objectGraphIterator(locale_Category0, (Transformer<? super Locale.Category, ? extends Locale.Category>) constantTransformer0);
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 3);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties(properties0);
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties1);
      iteratorArray0[0] = (Iterator<Properties>) resettableIterator0;
      int int0 = 1357;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("lb<@l^NNZ", "", 1357, hashtable0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("iUWQ|", "iUWQ|", sQLClientInfoException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0, 1357, (-168));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      OrderedMapIterator<Object, Stack<SQLTransactionRollbackException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Object, Stack<SQLTransactionRollbackException>>) orderedMapIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) resettableIterator0);
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("s^nl");
      Iterator<String> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends String>) listIterator0);
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      IteratorUtils.size(iterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("s^nl", sQLClientInfoException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("s^nl", "s^nl", sQLFeatureNotSupportedException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("s^nl", sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientConnectionException1, (-359), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = null;
      Transformer<SQLException, String> transformer0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) null, (Transformer<? super SQLDataException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, Properties>(orderedMapIterator0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientException>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, (-52));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -52
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("-!J}Oz;!");
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      Class<String> class0 = String.class;
      String[] stringArray0 = IteratorUtils.toArray((Iterator<? extends String>) listIterator0, class0);
      assertNotNull(stringArray0);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertEquals(1, stringArray0.length);
      
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = (Iterator<DataTruncation>) resettableListIterator0;
      iteratorArray0[1] = (Iterator<DataTruncation>) resettableListIterator0;
      iteratorArray0[2] = (Iterator<DataTruncation>) resettableListIterator0;
      iteratorArray0[3] = (Iterator<DataTruncation>) resettableListIterator0;
      Iterator<DataTruncation> iterator0 = IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>[]) iteratorArray0);
      IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) iterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) iterator0);
      OrderedMapIterator<DataTruncation, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends IIOMetadataNode>) orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("-!J}Oz;!");
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<ArrayList<ServiceLoader>>) listIterator0, (Transformer<? super ArrayList<ServiceLoader>, String>) transformer0, "transformer may not be null", "", "[");
      IteratorUtils.size(listIterator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(arrayList0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "CWs", 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Y~bj:-OA]!m8oB[-7");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("U", "U", "U", (-299));
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement(", ", "]", "]", 428);
      stackTraceElementArray0[2] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("org.apache.commons.collections4.list.AbstractLinkedList", "]", "%nYk", 428);
      stackTraceElementArray0[3] = stackTraceElement2;
      stackTraceElementArray0[4] = stackTraceElement1;
      IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      String string0 = "j";
      StringTokenizer stringTokenizer0 = new StringTokenizer("j");
      arrayList0.add(stringTokenizer0);
      OrderedMapIterator<EnumSet<Locale.Category>, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<EnumSet<Locale.Category>, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<EnumSet<Locale.Category>, SQLNonTransientConnectionException>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<EnumSet<Locale.Category>>) abstractOrderedMapIteratorDecorator0, (Predicate<? super EnumSet<Locale.Category>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = "-!J}Oz;!";
      IteratorUtils.singletonListIterator("-!J}Oz;!");
      MapIterator<SQLDataException, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      predicateArray0[0] = (Predicate<Object>) notPredicate0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) mapIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      predicateArray0[1] = predicate0;
      predicateArray0[2] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[3] = (Predicate<Object>) notPredicate0;
      predicateArray0[4] = (Predicate<Object>) notPredicate0;
      OrderedMapIterator<EnumSet<Locale.Category>, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<EnumSet<Locale.Category>, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<EnumSet<Locale.Category>, SQLNonTransientConnectionException>(orderedMapIterator0);
      IteratorUtils.matchesAll((Iterator<EnumSet<Locale.Category>>) abstractOrderedMapIteratorDecorator0, (Predicate<? super EnumSet<Locale.Category>>) predicateArray0[4]);
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) mapIterator0, (Iterator<? extends SQLDataException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<IIOMetadataNode, Locale.Category>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 10);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      String string1 = null;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, sQLFeatureNotSupportedException0);
      SQLDataException sQLDataException0 = new SQLDataException("", sQLFeatureNotSupportedException0);
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      String string2 = "Z)y5i7$%WX,XstuS4";
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) resettableIterator0, (Iterator<? extends SQLDataException>) singletonListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<IIOMetadataNode, Locale.Category>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Entry does not exist: ", "Entry does not exist: ", 2518);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLFeatureNotSupportedException0);
      Transformer<Object, BatchUpdateException> transformer0 = ConstantTransformer.constantTransformer(batchUpdateException0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer0);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLFeatureNotSupportedException0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super BatchUpdateException>) equalPredicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLFeatureNotSupportedException0);
      MapIterator<String, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 0);
      Iterator<String> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
      IteratorUtils.zippingIterator((Iterator<? extends String>) iterator1, (Iterator<? extends String>) mapIterator0, (Iterator<? extends String>) mapIterator0);
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) iterator1, class0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 10);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, sQLFeatureNotSupportedException0);
      SQLDataException sQLDataException0 = new SQLDataException("", sQLFeatureNotSupportedException0);
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      Comparator<SQLDataException> comparator0 = (Comparator<SQLDataException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLDataException> iterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      EmptyListIterator.resettableEmptyListIterator();
      MapIterator<String, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends String>) mapIterator0, (Iterator<? extends String>) mapIterator0, (Iterator<? extends String>) mapIterator0);
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) mapIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Comparator<Locale.Category> comparator0 = null;
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) null, (Iterator<? extends Locale.Category>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Y~bj:-OA]!m8oB[-7");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("U", "U", "U", (-299));
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "]", "]", 428);
      stackTraceElementArray0[2] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("org.apache.commons.collections4.list.AbstractLinkedList", "]", "L%nYk", 428);
      stackTraceElementArray0[3] = stackTraceElement2;
      Iterator<EnumSet<Locale.Category>> iterator0 = EmptyIterator.emptyIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLIntegrityConstraintViolationException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLSyntaxErrorException0);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super EnumSet<Locale.Category>>) equalPredicate0);
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) resettableIterator0, (Iterator<? extends SQLDataException>) resettableIterator0);
      OrderedMapIterator<IIOMetadataNode, Locale.Category> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, Locale.Category> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, Locale.Category>(orderedMapIterator0);
      OrderedMapIterator<IIOMetadataNode, Locale.Category> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<IIOMetadataNode, ? extends Locale.Category>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<IIOMetadataNode, Locale.Category>) orderedMapIterator1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "U";
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      IteratorUtils.asIterable((Iterator<? extends String>) objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      Collection<StringTokenizer> collection0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(stack0);
      int int0 = (-1154);
      int int1 = 987;
      IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) loopingListIterator0, 987);
      ArrayList<SQLFeatureNotSupportedException> arrayList1 = new ArrayList<SQLFeatureNotSupportedException>();
      int int2 = 100;
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>();
      // Undeclared exception!
      try { 
        arrayList1.addAll(100, (Collection<? extends SQLFeatureNotSupportedException>) hashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[4];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 10);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Node node0 = iIOMetadataNode0.cloneNode(false);
      IteratorUtils.nodeListIterator(node0);
      DataTruncation dataTruncation0 = new DataTruncation(761, false, true, 10, (-780));
      dataTruncation0.printStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0, (-780));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("-!J}Oz;!");
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(arrayList0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0, false);
      IteratorUtils.chainedIterator((Iterator<? extends StringTokenizer>) reverseListIterator0, (Iterator<? extends StringTokenizer>) singletonIterator0);
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) reverseListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0, (Collection<? super StringTokenizer>) arrayList0);
      IteratorUtils.isEmpty(listIterator0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(arrayList0);
      BoundedIterator<SQLNonTransientException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientException>) loopingListIterator0, 0L, 0L);
      IteratorUtils.isEmpty(boundedIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getAttributeNode("BKRbThN^G?b:qEI");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      IteratorUtils.singletonListIterator("-!J}Oz;!");
      MapIterator<SQLDataException, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      OrderedMapIterator<SQLDataException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      predicateArray0[0] = (Predicate<Object>) notPredicate0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) mapIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      predicateArray0[1] = predicate0;
      predicateArray0[2] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[3] = (Predicate<Object>) notPredicate0;
      predicateArray0[4] = (Predicate<Object>) notPredicate0;
      predicateArray0[5] = (Predicate<Object>) notPredicate0;
      predicateArray0[6] = (Predicate<Object>) uniquePredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicateArray0[0]);
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLDataException>) stack0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLDataException>) resettableListIterator0, (Predicate<? super SQLDataException>) predicate1);
      Comparator<SQLException> comparator1 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 7);
      iteratorArray0[0] = (Iterator<SQLDataException>) resettableListIterator0;
      iteratorArray0[1] = (Iterator<SQLDataException>) mapIterator0;
      iteratorArray0[2] = (Iterator<SQLDataException>) listIterator0;
      iteratorArray0[3] = (Iterator<SQLDataException>) listIterator0;
      iteratorArray0[4] = (Iterator<SQLDataException>) listIterator0;
      iteratorArray0[5] = (Iterator<SQLDataException>) orderedMapIterator0;
      iteratorArray0[6] = (Iterator<SQLDataException>) resettableListIterator0;
      IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator1, (Iterator<? extends SQLDataException>[]) iteratorArray0);
      IteratorUtils.isEmpty(orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("?>Nh");
      IteratorUtils.isEmpty((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 2);
      OrderedMapIterator<Properties, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<Properties, Integer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Properties, ? extends Integer>) orderedMapIterator0);
      Iterator<Properties> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Properties>) orderedMapIterator1, (Iterator<? extends Properties>) orderedMapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Properties>) iterator0, (-2089L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      IteratorUtils.emptyIterator();
      OrderedMapIterator<Object, Stack<SQLTransactionRollbackException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Object, Stack<SQLTransactionRollbackException>>) orderedMapIterator0);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      Locale.getISOCountries();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrPredicate.orPredicate((Predicate<? super SQLFeatureNotSupportedException>) uniquePredicate0, (Predicate<? super SQLFeatureNotSupportedException>) uniquePredicate0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("delimiter may not be null");
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Predicate<? super SQLFeatureNotSupportedException>) uniquePredicate0);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap1 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      Closure<SQLException> closure0 = SwitchClosure.switchClosure((Map<Predicate<SQLException>, Closure<SQLException>>) hashMap1);
      IteratorUtils.apply((Iterator<SQLClientInfoException>) resettableListIterator0, (Closure<? super SQLClientInfoException>) closure0);
      IteratorUtils.size(resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[4];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 10);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", "", (-2180));
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLFeatureNotSupportedException1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("The map size must be 0 or 1", "R(n$@7u", 0, sQLInvalidAuthorizationSpecException0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("", "");
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1, 0, (-2180)).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLFeatureNotSupportedException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Predicate<SQLFeatureNotSupportedException> predicate1 = OrPredicate.orPredicate((Predicate<? super SQLFeatureNotSupportedException>) predicate0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IteratorUtils.getIterator("-!J}Oz;!");
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[8];
      StringTokenizer stringTokenizer0 = new StringTokenizer("-!J}Oz;!");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("MapIterator[]", "org.apache.commons.collections4.IteratorUtils", false);
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("#FZk#]*k", "org.apache.commons.collections4.IteratorUtils", false);
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("#FZk#]*k", "MapIterator[]");
      stringTokenizerArray0[3] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = new StringTokenizer("");
      stringTokenizerArray0[4] = stringTokenizer4;
      StringTokenizer stringTokenizer5 = new StringTokenizer("S^5Efyl`g5zmIqUY&", "", false);
      stringTokenizerArray0[5] = stringTokenizer5;
      StringTokenizer stringTokenizer6 = new StringTokenizer("", "-!J}Oz;!", false);
      stringTokenizerArray0[6] = stringTokenizer6;
      StringTokenizer stringTokenizer7 = new StringTokenizer("#FZk#]*k");
      stringTokenizerArray0[7] = stringTokenizer7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringTokenizerArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("-!J}Oz;!");
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) listIterator0, class0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<ArrayList<ServiceLoader>>) listIterator0, (Transformer<? super ArrayList<ServiceLoader>, String>) transformer0, "transformer may not be null", "", "[");
      IteratorUtils.size(listIterator0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      HashMap<StringTokenizer, SQLException> hashMap0 = new HashMap<StringTokenizer, SQLException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("InstantiateFactory: Constructor threw an exception", (String) null, (Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, sQLInvalidAuthorizationSpecException0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "X~nr4vy!6v|=h,eMMs", (-2490), sQLFeatureNotSupportedException0);
      hashMap0.put((StringTokenizer) null, sQLWarning0);
      EntrySetMapIterator<StringTokenizer, SQLException> entrySetMapIterator0 = new EntrySetMapIterator<StringTokenizer, SQLException>(hashMap0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends StringTokenizer, ? extends SQLException>) entrySetMapIterator0);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      Locale.getISOLanguages();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      UniquePredicate<SQLNonTransientException> uniquePredicate0 = new UniquePredicate<SQLNonTransientException>();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLDataException>) null, (Predicate<? super SQLDataException>) uniquePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) resettableIterator0);
      IteratorUtils.singletonListIterator("s^nl");
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      OrderedMapIterator<Object, Stack<SQLTransactionRollbackException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Object, Stack<SQLTransactionRollbackException>>) orderedMapIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) resettableIterator0);
      IteratorUtils.singletonListIterator("s^nl");
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("s^nl");
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLDataException>) linkedList0);
      Predicate<SQLNonTransientException> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLDataException>) resettableListIterator0, (Predicate<? super SQLDataException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) linkedList0, 987);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      ConstantTransformer.nullTransformer();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<BatchUpdateException>) listIterator0, (Transformer<? super BatchUpdateException, String>) transformer0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Transformer<Object, String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      IteratorUtils.singletonListIterator("-!J}Oz;!");
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.find(iterator0, (Predicate<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Enumeration must not be null", (String) null, hashMap0);
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(vector0);
      IteratorUtils.chainedIterator((Iterator<? extends StringTokenizer>) reverseListIterator0, (Iterator<? extends StringTokenizer>) reverseListIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<SQLFeatureNotSupportedException> predicate0 = OrPredicate.orPredicate((Predicate<? super SQLFeatureNotSupportedException>) uniquePredicate0, (Predicate<? super SQLFeatureNotSupportedException>) uniquePredicate0);
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      Vector<Boolean> vector1 = new Vector<Boolean>();
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Boolean>) vector1);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Boolean>) resettableListIterator0, 1765);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1765
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[4];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 10);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      int int0 = (-2180);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", "", (-2180));
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLFeatureNotSupportedException1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("The map size must be 0 or 1", "R(n$@7u", 0, sQLInvalidAuthorizationSpecException0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("", "");
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLFeatureNotSupportedException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Predicate<SQLFeatureNotSupportedException> predicate1 = OrPredicate.orPredicate((Predicate<? super SQLFeatureNotSupportedException>) predicate0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(arrayList0);
      BoundedIterator<SQLNonTransientException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientException>) loopingListIterator0, 0L, 0L);
      IteratorUtils.isEmpty(boundedIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category0, locale_Category0);
      ListIterator<EnumSet<Locale.Category>> listIterator0 = IteratorUtils.singletonListIterator(enumSet0);
      Iterator<EnumSet<Locale.Category>> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends EnumSet<Locale.Category>>) listIterator0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", (-563));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLTransientException0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLInvalidAuthorizationSpecException0);
      IteratorUtils.find(iterator0, (Predicate<? super EnumSet<Locale.Category>>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Factory<String> factory0 = ConstantFactory.constantFactory("");
      assertNotNull(factory0);
      
      Transformer<String, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      assertNotNull(transformer0);
      
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("", (Transformer<? super String, ? extends String>) transformer0);
      assertNotNull(iterator0);
      
      SkippingIterator<TreeSet<Predicate>> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<TreeSet<Predicate>>) iterator0, 1L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[6];
      int[] intArray0 = new int[5];
      intArray0[0] = (-2459);
      intArray0[1] = 0;
      intArray0[2] = 1001;
      intArray0[3] = 3170;
      intArray0[4] = 32;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Ths4K", intArray0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {(-2459), 0, 1001, 3170, 32}, intArray0);
      assertEquals("java.sql.BatchUpdateException: Ths4K", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("Ths4K", batchUpdateException0.getMessage());
      assertEquals(5, intArray0.length);
      
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("5j7KLm", (String) null, intArray0, batchUpdateException0);
      assertNotNull(batchUpdateException1);
      assertArrayEquals(new int[] {(-2459), 0, 1001, 3170, 32}, intArray0);
      assertEquals("java.sql.BatchUpdateException: Ths4K", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("Ths4K", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: 5j7KLm", batchUpdateException1.toString());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("5j7KLm", batchUpdateException1.getMessage());
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertEquals(5, intArray0.length);
      
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException((String) null, "5j7KLm", intArray0, batchUpdateException1);
      assertNotNull(batchUpdateException2);
      assertArrayEquals(new int[] {(-2459), 0, 1001, 3170, 32}, intArray0);
      assertEquals("java.sql.BatchUpdateException: Ths4K", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("Ths4K", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: 5j7KLm", batchUpdateException1.toString());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("5j7KLm", batchUpdateException1.getMessage());
      assertNull(batchUpdateException2.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException2.toString());
      assertEquals("5j7KLm", batchUpdateException2.getSQLState());
      assertEquals(0, batchUpdateException2.getErrorCode());
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException0));
      assertEquals(5, intArray0.length);
      
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("nX:]1Xy8", (String) null, intArray0);
      assertNotNull(batchUpdateException3);
      assertArrayEquals(new int[] {(-2459), 0, 1001, 3170, 32}, intArray0);
      assertEquals("java.sql.BatchUpdateException: nX:]1Xy8", batchUpdateException3.toString());
      assertEquals(0, batchUpdateException3.getErrorCode());
      assertEquals("nX:]1Xy8", batchUpdateException3.getMessage());
      assertNull(batchUpdateException3.getSQLState());
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException0));
      assertEquals(5, intArray0.length);
      
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException(intArray0);
      assertNotNull(batchUpdateException4);
      assertArrayEquals(new int[] {(-2459), 0, 1001, 3170, 32}, intArray0);
      assertEquals(0, batchUpdateException4.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException4.toString());
      assertNull(batchUpdateException4.getSQLState());
      assertNull(batchUpdateException4.getMessage());
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException0));
      assertEquals(5, intArray0.length);
      
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException(batchUpdateException0);
      assertNotNull(batchUpdateException5);
      assertArrayEquals(new int[] {(-2459), 0, 1001, 3170, 32}, intArray0);
      assertEquals("java.sql.BatchUpdateException: java.sql.BatchUpdateException: Ths4K", batchUpdateException5.toString());
      assertEquals(0, batchUpdateException5.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: Ths4K", batchUpdateException5.getMessage());
      assertNull(batchUpdateException5.getSQLState());
      assertEquals("java.sql.BatchUpdateException: Ths4K", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("Ths4K", batchUpdateException0.getMessage());
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertEquals(5, intArray0.length);
      
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 32, (-1394));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) arrayList0);
      assertNotNull(resettableIterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string0 = "j";
      StringTokenizer stringTokenizer0 = new StringTokenizer("j");
      assertNotNull(stringTokenizer0);
      assertEquals(1, stringTokenizer0.countTokens());
      
      boolean boolean0 = arrayList0.add(stringTokenizer0);
      assertTrue(arrayList0.contains(stringTokenizer0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, stringTokenizer0.countTokens());
      
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) resettableIterator0);
      assertNotNull(enumeration0);
      assertTrue(arrayList0.contains(stringTokenizer0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Iterator<StringTokenizer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0);
      assertNotNull(iterator0);
      assertTrue(arrayList0.contains(stringTokenizer0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 4);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      String string0 = "s.40|_z*.hU_H3CC?Ob";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("s.40|_z*.hU_H3CC?Ob");
      assertNotNull(sQLNonTransientException0);
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: s.40|_z*.hU_H3CC?Ob", sQLNonTransientException0.toString());
      assertEquals("s.40|_z*.hU_H3CC?Ob", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      
      MockThrowable mockThrowable0 = new MockThrowable((String) null, sQLNonTransientException0);
      assertNotNull(mockThrowable0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("_oF8 *c", "s.40|_z*.hU_H3CC?Ob", (-1), mockThrowable0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: s.40|_z*.hU_H3CC?Ob", sQLNonTransientException0.toString());
      assertEquals("s.40|_z*.hU_H3CC?Ob", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: _oF8 *c", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("s.40|_z*.hU_H3CC?Ob", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals((-1), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("_oF8 *c", sQLInvalidAuthorizationSpecException0.getMessage());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: s.40|_z*.hU_H3CC?Ob", sQLNonTransientException0.toString());
      assertEquals("s.40|_z*.hU_H3CC?Ob", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: _oF8 *c", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("s.40|_z*.hU_H3CC?Ob", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals((-1), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("_oF8 *c", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: _oF8 *c", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLInvalidAuthorizationSpecException: _oF8 *c", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("_oF8 *c", "_oF8 *c", 0, sQLNonTransientException0);
      assertNotNull(sQLSyntaxErrorException1);
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: s.40|_z*.hU_H3CC?Ob", sQLNonTransientException0.toString());
      assertEquals("s.40|_z*.hU_H3CC?Ob", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("_oF8 *c", sQLSyntaxErrorException1.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: _oF8 *c", sQLSyntaxErrorException1.toString());
      assertEquals("_oF8 *c", sQLSyntaxErrorException1.getSQLState());
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, (-779));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Transformer<Object, String>>) null, 2312L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Y~bj:-OA]!m8oB[-7");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Y~bj:-OA]!m8oB[-7", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("Y~bj:-OA]!m8oB[-7", sQLIntegrityConstraintViolationException0.getMessage());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("U", sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Y~bj:-OA]!m8oB[-7", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("Y~bj:-OA]!m8oB[-7", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: U", sQLSyntaxErrorException0.toString());
      assertEquals("U", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("U", "U", "U", (-299));
      assertNotNull(stackTraceElement0);
      assertEquals("U", stackTraceElement0.getClassName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("U", stackTraceElement0.getFileName());
      assertEquals((-299), stackTraceElement0.getLineNumber());
      assertEquals("U.U(U)", stackTraceElement0.toString());
      assertEquals("U", stackTraceElement0.getMethodName());
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("Y~bj:-OA]!m8oB[-7", "", "U", (-299));
      assertNotNull(stackTraceElement1);
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals((-299), stackTraceElement1.getLineNumber());
      assertEquals("Y~bj:-OA]!m8oB[-7", stackTraceElement1.getClassName());
      assertEquals("Y~bj:-OA]!m8oB[-7.(U)", stackTraceElement1.toString());
      assertEquals("U", stackTraceElement1.getFileName());
      assertEquals("", stackTraceElement1.getMethodName());
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("", "]", "]", 428);
      assertNotNull(stackTraceElement2);
      assertEquals("]", stackTraceElement2.getMethodName());
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals(".](]:428)", stackTraceElement2.toString());
      assertEquals("]", stackTraceElement2.getFileName());
      assertEquals("", stackTraceElement2.getClassName());
      assertEquals(428, stackTraceElement2.getLineNumber());
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("org.apache.commons.collections4.list.AbstractLinkedList", "]", "L%nYk", 428);
      assertNotNull(stackTraceElement3);
      assertEquals("]", stackTraceElement3.getMethodName());
      assertFalse(stackTraceElement3.isNativeMethod());
      assertEquals("org.apache.commons.collections4.list.AbstractLinkedList.](L%nYk:428)", stackTraceElement3.toString());
      assertEquals(428, stackTraceElement3.getLineNumber());
      assertEquals("org.apache.commons.collections4.list.AbstractLinkedList", stackTraceElement3.getClassName());
      assertEquals("L%nYk", stackTraceElement3.getFileName());
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement0));
      
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("(PgN", "org.apache.commons.collections4.list.AbstractLinkedList", "]", 0);
      assertNotNull(stackTraceElement4);
      assertEquals("org.apache.commons.collections4.list.AbstractLinkedList", stackTraceElement4.getMethodName());
      assertEquals(0, stackTraceElement4.getLineNumber());
      assertEquals("]", stackTraceElement4.getFileName());
      assertEquals("(PgN.org.apache.commons.collections4.list.AbstractLinkedList(]:0)", stackTraceElement4.toString());
      assertEquals("(PgN", stackTraceElement4.getClassName());
      assertFalse(stackTraceElement4.isNativeMethod());
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement0));
      
      stackTraceElementArray0[4] = stackTraceElement4;
      sQLSyntaxErrorException0.setStackTrace(stackTraceElementArray0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Y~bj:-OA]!m8oB[-7", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("Y~bj:-OA]!m8oB[-7", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: U", sQLSyntaxErrorException0.toString());
      assertEquals("U", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(5, stackTraceElementArray0.length);
      
      sQLIntegrityConstraintViolationException0.setNextException(sQLSyntaxErrorException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Y~bj:-OA]!m8oB[-7", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("Y~bj:-OA]!m8oB[-7", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: U", sQLSyntaxErrorException0.toString());
      assertEquals("U", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("org.apache.commons.collections4.list.AbstractLinkedList", sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLSyntaxErrorException1);
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertEquals("org.apache.commons.collections4.list.AbstractLinkedList", sQLSyntaxErrorException1.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.list.AbstractLinkedList", sQLSyntaxErrorException1.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Y~bj:-OA]!m8oB[-7", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("Y~bj:-OA]!m8oB[-7", sQLIntegrityConstraintViolationException0.getMessage());
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.list.AbstractLinkedList", "org.apache.commons.collections4.list.AbstractLinkedList", 0, sQLSyntaxErrorException1);
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertEquals("org.apache.commons.collections4.list.AbstractLinkedList", sQLSyntaxErrorException1.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.list.AbstractLinkedList", sQLSyntaxErrorException1.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.list.AbstractLinkedList", sQLDataException0.getSQLState());
      assertEquals("org.apache.commons.collections4.list.AbstractLinkedList", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: org.apache.commons.collections4.list.AbstractLinkedList", sQLDataException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Y~bj:-OA]!m8oB[-7", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("Y~bj:-OA]!m8oB[-7", sQLIntegrityConstraintViolationException0.getMessage());
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      
      sQLDataExceptionArray0[0] = sQLDataException0;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 0);
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertEquals(1, sQLDataExceptionArray0.length);
      
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) resettableListIterator0);
      assertNotNull(listIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertEquals(1, sQLDataExceptionArray0.length);
      
      int int0 = IteratorUtils.size(listIterator0);
      assertEquals(1, int0);
      assertFalse(resettableListIterator0.hasNext());
      assertTrue(resettableListIterator0.hasPrevious());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertEquals(1, sQLDataExceptionArray0.length);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) integer0, (-1671), (-648));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = null;
      SQLException sQLException0 = new SQLException("", (String) null, 0);
      assertNotNull(sQLException0);
      assertEquals("", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" PC@4xw_K&>~]icy$H2", (String) null, 0, sQLException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0, 348);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MapIterator<BatchUpdateException, Stack<SQLNonTransientConnectionException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("");
      assertNotNull(nodeList0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      assertNotNull(nodeListIterator0);
      
      int int0 = (-1400);
      String string0 = iIOMetadataNode0.getAttributeNS("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) nodeListIterator0, (-1400));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ListIterator<LinkedHashSet<Predicate<Object>>> listIterator0 = EmptyListIterator.emptyListIterator();
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("v&cSM");
      assertNotNull(constantTransformer0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("NodeList must not be null", "v&cSM", (Throwable) null);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: NodeList must not be null", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("NodeList must not be null", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("v&cSM", sQLIntegrityConstraintViolationException0.getSQLState());
      
      Transformer<BatchUpdateException, SQLIntegrityConstraintViolationException> transformer0 = ConstantTransformer.constantTransformer(sQLIntegrityConstraintViolationException0);
      assertNotNull(transformer0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: NodeList must not be null", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("NodeList must not be null", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("v&cSM", sQLIntegrityConstraintViolationException0.getSQLState());
      
      String string0 = IteratorUtils.toString((Iterator<LinkedHashSet<Predicate<Object>>>) listIterator0, (Transformer<? super LinkedHashSet<Predicate<Object>>, String>) constantTransformer0, "Iterator must not be null.", "v&cSM", "Iterator must not be null.");
      assertNotNull(string0);
      assertEquals("v&cSMIterator must not be null.", string0);
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      ListIterator<StringTokenizer> listIterator1 = EmptyListIterator.emptyListIterator();
      assertNotNull(listIterator1);
      assertFalse(listIterator1.hasPrevious());
      assertFalse(listIterator1.hasNext());
      
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) listIterator1);
      assertNotNull(enumeration0);
      assertFalse(listIterator1.hasPrevious());
      assertFalse(listIterator1.hasNext());
      
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0, (Collection<? super StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ListIterator<StringTokenizer> listIterator0 = EmptyListIterator.emptyListIterator();
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) listIterator0);
      assertNotNull(objectArray0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals(0, objectArray0.length);
      
      StringTokenizer stringTokenizer0 = new StringTokenizer("", (String) null);
      assertNotNull(stringTokenizer0);
      assertEquals(0, stringTokenizer0.countTokens());
      
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 1);
      ListIterator<SQLTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) listIterator0;
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      assertNotNull(iterator0);
      assertEquals(1, iteratorArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLIntegrityConstraintViolationException>) null, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      int int0 = iIOMetadataNode0.getLength();
      assertEquals(0, int0);
      
      Node node0 = iIOMetadataNode0.getNextSibling();
      assertNull(node0);
      
      boolean boolean0 = linkedList0.add(iIOMetadataNode0);
      assertTrue(linkedList0.contains(iIOMetadataNode0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Stream<IIOMetadataNode> stream0 = linkedList0.stream();
      assertNotNull(stream0);
      assertTrue(linkedList0.contains(iIOMetadataNode0));
      assertEquals(1, linkedList0.size());
      
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) linkedList0);
      assertNotNull(resettableIterator0);
      assertTrue(linkedList0.contains(iIOMetadataNode0));
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      SQLException sQLException0 = new SQLException("transformer may not be null", "transformer may not be null", (-1099));
      assertNotNull(sQLException0);
      assertEquals("java.sql.SQLException: transformer may not be null", sQLException0.toString());
      assertEquals((-1099), sQLException0.getErrorCode());
      assertEquals("transformer may not be null", sQLException0.getMessage());
      assertEquals("transformer may not be null", sQLException0.getSQLState());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLException: transformer may not be null", sQLException0.toString());
      assertEquals((-1099), sQLException0.getErrorCode());
      assertEquals("transformer may not be null", sQLException0.getMessage());
      assertEquals("transformer may not be null", sQLException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLException: transformer may not be null", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.sql.SQLException: transformer may not be null", sQLInvalidAuthorizationSpecException0.getMessage());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLException: transformer may not be null", sQLException0.toString());
      assertEquals((-1099), sQLException0.getErrorCode());
      assertEquals("transformer may not be null", sQLException0.getMessage());
      assertEquals("transformer may not be null", sQLException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLException: transformer may not be null", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.sql.SQLException: transformer may not be null", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLException: transformer may not be null", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLException: transformer may not be null", sQLFeatureNotSupportedException0.toString());
      
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.functors.IfClosure", "org.apache.commons.collections4.functors.IfClosure", 0);
      assertNotNull(sQLFeatureNotSupportedException1);
      assertEquals("java.sql.SQLFeatureNotSupportedException: org.apache.commons.collections4.functors.IfClosure", sQLFeatureNotSupportedException1.toString());
      assertEquals("org.apache.commons.collections4.functors.IfClosure", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.IfClosure", sQLFeatureNotSupportedException1.getMessage());
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException(sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLFeatureNotSupportedException2);
      assertEquals("java.sql.SQLException: transformer may not be null", sQLException0.toString());
      assertEquals((-1099), sQLException0.getErrorCode());
      assertEquals("transformer may not be null", sQLException0.getMessage());
      assertEquals("transformer may not be null", sQLException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLException: transformer may not be null", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.sql.SQLException: transformer may not be null", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLException: transformer may not be null", sQLFeatureNotSupportedException2.toString());
      assertNull(sQLFeatureNotSupportedException2.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException2.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLException: transformer may not be null", sQLFeatureNotSupportedException2.getMessage());
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException1));
      
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, 0);
      assertNotNull(resettableIterator0);
      assertEquals(3, sQLFeatureNotSupportedExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("j", "j");
      assertNotNull(stringTokenizer0);
      assertEquals(0, stringTokenizer0.countTokens());
      
      OrderedMapIterator<Closure<Object>, EnumSet<Locale.Category>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      OrderedMapIterator<EnumSet<Locale.Category>, SQLNonTransientConnectionException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) null, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(arrayList0);
      assertNotNull(loopingListIterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasNext());
      assertFalse(loopingListIterator0.hasPrevious());
      
      int int0 = (-1154);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) loopingListIterator0, (-1154));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(arrayList0);
      assertNotNull(loopingListIterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(loopingListIterator0.hasNext());
      assertFalse(loopingListIterator0.hasPrevious());
      assertEquals(0, loopingListIterator0.size());
      
      int int0 = (-1154);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) loopingListIterator0, (-1154));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLSyntaxErrorException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<BatchUpdateException>) resettableListIterator0);
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      vector0.spliterator();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("p<NvH8U![", (Class<?>[]) null, (Object[]) null);
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      IteratorUtils.toString((Iterator<ArrayDeque<HashMap>>) iterator0, (Transformer<? super ArrayDeque<HashMap>, String>) transformer1, "p<NvH8U![", "p<NvH8U![", "p<NvH8U![");
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("p<NvH8U![p<NvH8U![", "5K:#0akh0");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("p<NvH8U![", "prefix may not be null", sQLIntegrityConstraintViolationException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("J<:s", sQLNonTransientException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTimeoutException0);
      sQLExceptionArray0[0] = (SQLException) sQLTransactionRollbackException0;
      SQLWarning sQLWarning0 = new SQLWarning("p<NvH8U![", sQLTimeoutException0);
      sQLExceptionArray0[1] = (SQLException) sQLWarning0;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLWarning0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("J<:s", "", hashtable0, sQLTransactionRollbackException1);
      sQLExceptionArray0[2] = (SQLException) sQLClientInfoException0;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("5K:#0akh0", "prefix may not be null", (-1561), sQLClientInfoException0);
      sQLExceptionArray0[3] = (SQLException) sQLTransactionRollbackException2;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      sQLExceptionArray0[4] = (SQLException) sQLRecoverableException0;
      SQLWarning sQLWarning1 = new SQLWarning(sQLExceptionArray0[2]);
      sQLExceptionArray0[5] = (SQLException) sQLWarning1;
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException();
      sQLExceptionArray0[6] = (SQLException) sQLNonTransientException1;
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableIterator0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      OrderedMapIterator<EnumSet<Locale.Category>, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<EnumSet<Locale.Category>, Integer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<EnumSet<Locale.Category>, ? extends Integer>) orderedMapIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, comparator0, comparatorPredicate_Criterion0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(comparatorPredicate0);
      IteratorUtils.matchesAny((Iterator<EnumSet<Locale.Category>>) orderedMapIterator1, (Predicate<? super EnumSet<Locale.Category>>) nullIsTruePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      IteratorUtils.singletonIterator((IIOMetadataNode) null);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      String string0 = "";
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "yS~XX");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("yS~XX", sQLWarning0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      sQLFeatureNotSupportedException0.printStackTrace();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException((String) null, "", sQLFeatureNotSupportedException0);
      priorityQueue0.add(sQLFeatureNotSupportedException1);
      IteratorUtils.singletonIterator(priorityQueue0);
      OrderedMapIterator<Properties, SQLTransactionRollbackException> orderedMapIterator0 = null;
      AbstractOrderedMapIteratorDecorator<Properties, SQLTransactionRollbackException> abstractOrderedMapIteratorDecorator0 = null;
      try {
        abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, SQLTransactionRollbackException>((OrderedMapIterator<Properties, SQLTransactionRollbackException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OrderedMapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Comparator<SQLDataException> comparator0 = (Comparator<SQLDataException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 7);
      MapIterator<SQLDataException, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[0] = (Iterator<SQLDataException>) mapIterator0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLFeatureNotSupportedException0);
      SQLDataException sQLDataException0 = new SQLDataException("", sQLNonTransientConnectionException0);
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      iteratorArray0[1] = (Iterator<SQLDataException>) singletonListIterator0;
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      sQLDataExceptionArray0[0] = sQLDataException0;
      sQLDataExceptionArray0[1] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("[", "", sQLFeatureNotSupportedException0);
      sQLDataExceptionArray0[2] = sQLDataException1;
      sQLDataExceptionArray0[3] = sQLDataException0;
      sQLDataExceptionArray0[4] = sQLDataException0;
      sQLDataExceptionArray0[5] = sQLDataException0;
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      iteratorArray0[2] = (Iterator<SQLDataException>) objectArrayIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("j", "j");
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) null, (Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "Entry does not exist: ";
      int int0 = 2518;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Entry does not exist: ", "Entry does not exist: ", 2518);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLFeatureNotSupportedException0);
      Transformer<Object, BatchUpdateException> transformer0 = ConstantTransformer.constantTransformer(batchUpdateException0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer0);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLFeatureNotSupportedException0);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super BatchUpdateException>) equalPredicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLFeatureNotSupportedException0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      String string1 = "Index ";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Entry does not exist: ", "Index ", hashMap0);
      IteratorUtils.contains((Iterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0, (Object) sQLClientInfoException0);
      Iterator<EnumSet<Locale.Category>>[] iteratorArray0 = (Iterator<EnumSet<Locale.Category>>[]) Array.newInstance(Iterator.class, 8);
      ListIterator<EnumSet<Locale.Category>> listIterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<EnumSet<Locale.Category>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      OrderedMapIterator<Object, Stack<SQLTransactionRollbackException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Object, Stack<SQLTransactionRollbackException>>) orderedMapIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) resettableIterator0);
      String string0 = "s^nl";
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("s^nl");
      IteratorUtils.pushbackIterator((Iterator<? extends String>) listIterator0);
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) null, (Predicate<? super DataTruncation>) transformerPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Hashtable<SQLTimeoutException, SQLWarning> hashtable0 = new Hashtable<SQLTimeoutException, SQLWarning>();
      EntrySetMapIterator<SQLTimeoutException, SQLWarning> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, SQLWarning>(hashtable0);
      MapIterator<SQLTimeoutException, SQLWarning> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTimeoutException, SQLWarning>) entrySetMapIterator0);
      AbstractMapIteratorDecorator<SQLTimeoutException, SQLWarning> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, SQLWarning>(mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLTimeoutException>) abstractMapIteratorDecorator0, (Predicate<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Entry does not exist: ", "Entry does not exist: ", 2518);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLFeatureNotSupportedException0);
      Transformer<Object, BatchUpdateException> transformer0 = ConstantTransformer.constantTransformer(batchUpdateException0);
      IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer0);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLFeatureNotSupportedException0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
