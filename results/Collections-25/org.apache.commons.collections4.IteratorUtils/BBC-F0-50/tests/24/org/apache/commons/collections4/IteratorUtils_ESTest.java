/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:34:39 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = new Object();
      ConstantTransformer<SQLTransientException, String> constantTransformer0 = new ConstantTransformer<SQLTransientException, String>("0rs;He\"aj^C");
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[3];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.NullIsFalsePredicate", "*CsB{{BAAq~3mwu[", (-1085));
      SQLTransientException sQLTransientException0 = new SQLTransientException("Unsupported object type: ", sQLIntegrityConstraintViolationException0);
      sQLTransientExceptionArray0[0] = sQLTransientException0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("org.apache.commons.collections4.functors.NullIsFalsePredicate", "&@HwM!");
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTransientConnectionException1;
      ObjectArrayIterator<SQLTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientException>(sQLTransientExceptionArray0);
      String string0 = IteratorUtils.toString((Iterator<SQLTransientException>) objectArrayIterator0, (Transformer<? super SQLTransientException, String>) constantTransformer0, "`X @_", "0rs;He\"aj^C", "5/\"p~B\"Hvybv0");
      assertEquals("0rs;He\"aj^C0rs;He\"aj^C`X @_0rs;He\"aj^C`X @_0rs;He\"aj^C5/\"p~B\"Hvybv0", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      LoopingIterator<SQLTransientException> loopingIterator0 = new LoopingIterator<SQLTransientException>(arrayDeque0);
      loopingIterator0.size();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("u@h", "u@h");
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLTransactionRollbackException0, true);
      IteratorUtils.get((Iterator<SQLException>) singletonIterator0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      LoopingIterator<SQLTransientException> loopingIterator0 = new LoopingIterator<SQLTransientException>(arrayDeque0);
      loopingIterator0.size();
      SQLTransientException sQLTransientException0 = new SQLTransientException("u@h", "c6&OD-Z]9I[aM39..y", 0);
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLTransientException0, true);
      SQLTransientException sQLTransientException1 = (SQLTransientException)IteratorUtils.get((Iterator<SQLException>) singletonIterator0, 0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, 123, sQLTransientException1);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1, false, false, 1, 123);
      dataTruncationArray0[1] = dataTruncation1;
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0, 0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) objectArrayListIterator0);
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(list0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLWarning>) loopingListIterator0, 12);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      LoopingIterator<SQLTransientException> loopingIterator0 = new LoopingIterator<SQLTransientException>(arrayDeque0);
      loopingIterator0.size();
      ForClosure<Object> forClosure0 = new ForClosure<Object>(4, (Closure<? super Object>) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) null);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>((Transformer<? super Object, ?>) null, predicate0);
      predicateArray0[0] = (Predicate<Object>) transformedPredicate0;
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) loopingIterator0);
      predicateArray0[1] = predicate1;
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<Object> predicate2 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      predicateArray0[2] = predicate2;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(loopingIterator0, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[3] = (Predicate<Object>) comparatorPredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      Closure<Object> closure0 = IfClosure.ifClosure((Predicate<? super Object>) anyPredicate0, (Closure<? super Object>) forClosure0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate1, closure0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("u@h", "u@h");
      SQLDataException sQLDataException0 = new SQLDataException("u@h", "u@h", 1169, sQLIntegrityConstraintViolationException0);
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      IteratorUtils.apply((Iterator<SQLDataException>) singletonListIterator0, (Closure<? super SQLDataException>) ifClosure0);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      Closure<Object> closure0 = ForClosure.forClosure(2, (Closure<? super Object>) null);
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, closure1);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      SQLDataException sQLDataException0 = new SQLDataException("mW", "S/h@)v'/`HX?MW$$p;-", 2, batchUpdateException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("S/h@)v'/`HX?MW$$p;-", "", 2);
      sQLDataExceptionArray0[1] = sQLDataException1;
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      IteratorUtils.apply((Iterator<SQLDataException>) objectArrayIterator0, (Closure<? super SQLDataException>) ifClosure0);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, Transformer<Object, Iterator<SQLIntegrityConstraintViolationException>>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, Transformer<Object, Iterator<SQLIntegrityConstraintViolationException>>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, Transformer<Object, Iterator<SQLIntegrityConstraintViolationException>>>(orderedMapIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray0[0] = null;
      predicateArray0[1] = null;
      predicateArray0[2] = null;
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      predicateArray0[3] = predicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(5, (Closure<? super Object>) null);
      Closure<Object> closure0 = IfClosure.ifClosure((Predicate<? super Object>) nonePredicate0, (Closure<? super Object>) forClosure0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicateArray0[2], closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLDataException>) orderedMapIterator0, (Closure<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, Transformer<Object, Iterator<SQLIntegrityConstraintViolationException>>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, Transformer<Object, Iterator<SQLIntegrityConstraintViolationException>>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, Transformer<Object, Iterator<SQLIntegrityConstraintViolationException>>>(orderedMapIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = null;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      Class<Properties> class0 = Properties.class;
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 2);
      Class<Properties> class1 = Properties.class;
      classArray0[0] = class1;
      classArray0[1] = class0;
      ResettableIterator<Class<Properties>> resettableIterator0 = IteratorUtils.arrayIterator(classArray0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      TreeSet<Predicate<Object>> treeSet1 = new TreeSet<Predicate<Object>>((SortedSet<Predicate<Object>>) treeSet0);
      AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) treeSet1);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>((Predicate<? super Object>) null);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Class<Properties>>) resettableIterator0, (Predicate<? super Class<Properties>>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      LoopingIterator<SQLTransientException> loopingIterator0 = new LoopingIterator<SQLTransientException>(arrayDeque0);
      loopingIterator0.size();
      ConstantTransformer<SQLTransientException, String> constantTransformer0 = new ConstantTransformer<SQLTransientException, String>("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientException>) loopingIterator0, (Transformer<? super SQLTransientException, String>) constantTransformer0, "Node must not be null", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, Transformer<Object, Iterator<SQLIntegrityConstraintViolationException>>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, Transformer<Object, Iterator<SQLIntegrityConstraintViolationException>>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, Transformer<Object, Iterator<SQLIntegrityConstraintViolationException>>>(orderedMapIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = null;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>((-724), (Closure<? super Object>) null);
      Closure<Object> closure0 = IfClosure.ifClosure((Predicate<? super Object>) nonePredicate0, (Closure<? super Object>) forClosure0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>((Predicate<? super Object>) null, closure0);
      IteratorUtils.apply((Iterator<SQLDataException>) abstractOrderedMapIteratorDecorator0, (Closure<? super SQLDataException>) ifClosure0);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      LoopingIterator<SQLTransientException> loopingIterator0 = new LoopingIterator<SQLTransientException>(arrayDeque0);
      loopingIterator0.size();
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null, 0);
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 7);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      Class<Properties> class1 = Properties.class;
      classArray0[1] = class1;
      Class<Properties> class2 = Properties.class;
      classArray0[2] = class2;
      Class<Properties> class3 = Properties.class;
      classArray0[3] = class3;
      Class<Properties> class4 = Properties.class;
      classArray0[4] = class4;
      Class<Properties> class5 = Properties.class;
      classArray0[5] = class5;
      Class<Properties> class6 = Properties.class;
      classArray0[6] = class6;
      ResettableIterator<Class<Properties>> resettableIterator0 = IteratorUtils.arrayIterator(classArray0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      TreeSet<Predicate<Object>> treeSet1 = new TreeSet<Predicate<Object>>((SortedSet<Predicate<Object>>) treeSet0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) treeSet1);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Class<Properties>>) resettableIterator0, (Predicate<? super Class<Properties>>) notPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      LoopingIterator<SQLTransientException> loopingIterator0 = new LoopingIterator<SQLTransientException>(arrayDeque0);
      IteratorUtils.zippingIterator((Iterator<?>) loopingIterator0, (Iterator<?>) loopingIterator0, (Iterator<?>) loopingIterator0);
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) listIterator0);
      MapIterator<Transformer<SQLClientInfoException, Object>, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<Transformer<SQLClientInfoException, Object>, Integer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Transformer<SQLClientInfoException, Object>, Integer>(mapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<Transformer<SQLClientInfoException, Object>, Integer>) abstractMapIteratorDecorator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAny((Iterator<Transformer<SQLClientInfoException, Object>>) abstractMapIteratorDecorator0, (Predicate<? super Transformer<SQLClientInfoException, Object>>) uniquePredicate0);
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) list0);
      Properties properties0 = new Properties();
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<Properties> iterator1 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator1, 14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      LoopingIterator<SQLTransientException> loopingIterator0 = new LoopingIterator<SQLTransientException>(arrayDeque0);
      OrderedMapIterator<IIOMetadataNode, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<IIOMetadataNode, StringTokenizer> orderedMapIterator1 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, StringTokenizer>(orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, StringTokenizer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, StringTokenizer>(orderedMapIterator1);
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, StringTokenizer> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, StringTokenizer>(abstractOrderedMapIteratorDecorator0);
      OrderedMapIterator<IIOMetadataNode, SQLSyntaxErrorException> orderedMapIterator2 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<IIOMetadataNode, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<IIOMetadataNode, SQLSyntaxErrorException>) orderedMapIterator2);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) mapIterator0, (Class<IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Integer[]) null, 2826, (-141));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      LoopingIterator<SQLTransientException> loopingIterator0 = new LoopingIterator<SQLTransientException>(arrayDeque0);
      loopingIterator0.size();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.ConstantFactory", "org.apache.commons.collections4.functors.NotPredicate");
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.ConstantFactory");
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.NotPredicate", "UH(:TA: N&^`");
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("EN!DGBHb8$L/8{{IGhw", "lC8G$u/b#iJI|:q7", 0);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.NotPredicate", "", 0);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0, 0);
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayListIterator0);
      IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) list0);
      Stack<ServiceLoader<StringTokenizer>> stack0 = new Stack<ServiceLoader<StringTokenizer>>();
      LoopingListIterator<ServiceLoader<StringTokenizer>> loopingListIterator0 = new LoopingListIterator<ServiceLoader<StringTokenizer>>(stack0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      IteratorUtils.toString((Iterator<ServiceLoader<StringTokenizer>>) loopingListIterator0, (Transformer<? super ServiceLoader<StringTokenizer>, String>) transformer0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "kTy3S`.|X8", intArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ResettableIterator<Boolean> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.skippingIterator((Iterator<Boolean>) resettableIterator0, 1337L);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      Throwable throwable0 = null;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, (Throwable) null);
      IteratorUtils.getIterator(sQLClientInfoException0);
      OrderedIterator<Locale.Category> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      int int0 = 1073741824;
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends Locale.Category>) orderedIterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      LoopingIterator<SQLTransientException> loopingIterator0 = new LoopingIterator<SQLTransientException>(arrayDeque0);
      loopingIterator0.size();
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.apache.commons.collections4.functors.NotPredicate", "org.apache.commons.collections4.functors.NotPredicate", 0);
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLTransientException0, false);
      IteratorUtils.get((Iterator<SQLException>) singletonIterator0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Properties properties0 = new Properties();
      ArrayDeque<SQLTransientException> arrayDeque0 = new ArrayDeque<SQLTransientException>();
      LoopingIterator<SQLTransientException> loopingIterator0 = new LoopingIterator<SQLTransientException>(arrayDeque0);
      loopingIterator0.size();
      ConstantTransformer<SQLTransientException, String> constantTransformer0 = new ConstantTransformer<SQLTransientException, String>("j>z2f[2<");
      IteratorUtils.toString((Iterator<SQLTransientException>) loopingIterator0, (Transformer<? super SQLTransientException, String>) constantTransformer0, "", "", "");
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      LoopingIterator<SQLTransientException> loopingIterator0 = new LoopingIterator<SQLTransientException>(arrayDeque0);
      loopingIterator0.size();
      ConstantTransformer<SQLTransientException, String> constantTransformer0 = new ConstantTransformer<SQLTransientException, String>("org.apache.commons.collections4.functors.NotPredicate");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      arrayDeque0.add(sQLTimeoutException0);
      ConstantTransformer.constantTransformer((SQLInvalidAuthorizationSpecException) null);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<SQLTransientException>) loopingIterator0, (Transformer<? super SQLTransientException, String>) constantTransformer0, "org.apache.commons.collections4.functors.NotPredicate", "org.apache.commons.collections4.functors.NotPredicate", "org.apache.commons.collections4.functors.NotPredicate");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Properties properties0 = new Properties();
      MapIterator<Properties, SQLIntegrityConstraintViolationException> mapIterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Properties, SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("CDY=:+uYO3", "CDY=:+uYO3");
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1);
      InvokerTransformer<SQLDataException, String> invokerTransformer0 = new InvokerTransformer<SQLDataException, String>("y|VWAG!D8>)", classArray0, classArray0);
      SQLDataException sQLDataException0 = new SQLDataException("y|VWAG!D8>)", "?3p^", sQLWarning0);
      InvokerTransformer.invokerTransformer("y|VWAG!D8>)", (Class<?>[]) classArray0, (Object[]) classArray0);
      sQLDataException0.getSuppressed();
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) singletonListIterator0, (Transformer<? super SQLDataException, String>) invokerTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'y|VWAG!D8>)' on 'class java.sql.SQLDataException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      LoopingIterator<SQLTransientException> loopingIterator0 = new LoopingIterator<SQLTransientException>(arrayDeque0);
      loopingIterator0.size();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer.invokerTransformer("org.apache.commons.collections4.functors.NotPredicate", (Class<?>[]) classArray0, (Object[]) classArray0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.apache.commons.collections4.functors.ConstantFactory", "org.apache.commons.collections4.functors.NotPredicate", 0);
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>((SQLException) null, false);
      IteratorUtils.get((Iterator<SQLException>) singletonIterator0, 0);
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("CLlY=:Y");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator("CLlY=:Y");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("CLlY=:Y", "CLlY=:Y", 10, sQLWarning0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLFeatureNotSupportedException0, (Equator<Object>) defaultEquator0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      IteratorUtils.matchesAll((Iterator<String>) null, (Predicate<? super String>) nullIsTruePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) nullIsTruePredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 0);
      Predicate<SQLTimeoutException> predicate0 = new UniquePredicate<SQLTimeoutException>();
      IteratorUtils.matchesAll((Iterator<SQLTimeoutException>) orderedIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      IteratorUtils.zippingIterator((Iterator<?>) orderedIterator0, (Iterator<?>) orderedIterator0, (Iterator<?>) orderedIterator0);
      EmptyListIterator.emptyListIterator();
      EmptyListIterator.emptyListIterator();
      MapIterator<Transformer<SQLClientInfoException, Object>, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<Transformer<SQLClientInfoException, Object>, Integer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Transformer<SQLClientInfoException, Object>, Integer>(mapIterator0);
      MapIterator<Transformer<SQLClientInfoException, Object>, Integer> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<Transformer<SQLClientInfoException, Object>, Integer>) abstractMapIteratorDecorator0);
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray1);
      IteratorUtils.matchesAny((Iterator<Transformer<SQLClientInfoException, Object>>) mapIterator1, (Predicate<? super Transformer<SQLClientInfoException, Object>>) predicate1);
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) vector0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 2);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[9];
      SQLDataException sQLDataException0 = new SQLDataException("t", (String) null, (-1));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("t", "t", 42, sQLDataException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", "", (-1643), sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("!");
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("remove() method is not supported for an ObjectArrayIterator", "t", sQLNonTransientConnectionException3);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("t");
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException2);
      sQLNonTransientConnectionExceptionArray0[7] = sQLNonTransientConnectionException7;
      SQLNonTransientConnectionException sQLNonTransientConnectionException8 = new SQLNonTransientConnectionException("|KL7KI", sQLNonTransientConnectionException4);
      sQLNonTransientConnectionExceptionArray0[8] = sQLNonTransientConnectionException8;
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      OrderedMapIterator<SQLNonTransientConnectionException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      iteratorArray0[0] = iterator0;
      OrderedMapIterator<SQLNonTransientConnectionException, Boolean> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLNonTransientConnectionException, Boolean> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientConnectionException, ? extends Boolean>) orderedMapIterator1);
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) orderedMapIterator2;
      Iterator<SQLNonTransientConnectionException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator1, (Transformer<? super SQLNonTransientConnectionException, String>) transformer0, (String) null, "remove() method is not supported for an ObjectArrayIterator", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      LoopingIterator<SQLTransientException> loopingIterator0 = new LoopingIterator<SQLTransientException>(arrayDeque0);
      loopingIterator0.size();
      Class<SQLTransientException>[] classArray0 = (Class<SQLTransientException>[]) Array.newInstance(Class.class, 0);
      Transformer<SQLTransientException, String> transformer0 = InvokerTransformer.invokerTransformer("|qZNwca~:", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientException>) loopingIterator0, (Transformer<? super SQLTransientException, String>) transformer0, (String) null, "org.apache.commons.collections4.functors.NotPredicate", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      LoopingIterator<SQLTransientException> loopingIterator0 = new LoopingIterator<SQLTransientException>(arrayDeque0);
      loopingIterator0.size();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer.invokerTransformer("org.apache.commons.collections4.functors.NotPredicate", (Class<?>[]) classArray0, (Object[]) classArray0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("==E", "3kYySt~aKh`[Q7", 0);
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLTransientException0, false);
      SQLException sQLException0 = IteratorUtils.get((Iterator<SQLException>) singletonIterator0, 0);
      assertEquals("java.sql.SQLTransientException: ==E", sQLException0.toString());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 0);
      Predicate<SQLTimeoutException> predicate0 = OnePredicate.onePredicate((Predicate<? super SQLTimeoutException>[]) predicateArray0);
      MapIterator<SQLTimeoutException, Iterator<SQLTransientConnectionException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.matchesAll((Iterator<SQLTimeoutException>) mapIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      IteratorUtils.zippingIterator((Iterator<?>) mapIterator0, (Iterator<?>) mapIterator0, (Iterator<?>) mapIterator0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<?>) orderedIterator0, (Iterator<?>) orderedIterator0, (Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[7];
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "", mockThrowable0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLInvalidAuthorizationSpecException0);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", 1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLTransientException0);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLIntegrityConstraintViolationException1;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "8GYMC}BL;NyS`");
      sQLNonTransientExceptionArray0[2] = sQLNonTransientException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", (String) null, sQLTransientException0);
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("6U4gY<%JI\"2m", "V]YAAHdTh,G}Dm({.", sQLNonTransientExceptionArray0[3]);
      sQLTransientException0.getSuppressed();
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLIntegrityConstraintViolationException2;
      SQLDataException sQLDataException0 = new SQLDataException("");
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLDataException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "V]YAAHdTh,G}Dm({.");
      sQLNonTransientExceptionArray0[6] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      int int0 = (-1479);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, 1, (-1479));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "dH*)oOFMt,kn9-AS)q";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("dH*)oOFMt,kn9-AS)q");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Index ";
      stringArray0[4] = "(Og#~Q\"";
      stringArray0[5] = "Uq0`";
      stringArray0[6] = "J^:oKA:;ANX>eT";
      IteratorUtils.arrayListIterator(stringArray0, 4);
      Integer integer0 = new Integer(5638);
      int int0 = 61;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) integer0, 4, 61);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 0);
      Predicate<SQLTimeoutException> predicate0 = OnePredicate.onePredicate((Predicate<? super SQLTimeoutException>[]) predicateArray0);
      IteratorUtils.matchesAll((Iterator<SQLTimeoutException>) orderedIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      IteratorUtils.zippingIterator((Iterator<?>) orderedIterator0, (Iterator<?>) orderedIterator0, (Iterator<?>) orderedIterator0);
      EmptyListIterator.emptyListIterator();
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) listIterator0);
      MapIterator<Transformer<SQLClientInfoException, Object>, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<Transformer<SQLClientInfoException, Object>, Integer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Transformer<SQLClientInfoException, Object>, Integer>(mapIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLException sQLException0 = IteratorUtils.find((Iterator<SQLException>) null, (Predicate<? super SQLException>) uniquePredicate0);
      assertNull(sQLException0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("dH*)oOFMt,kn9-AS)q");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 6);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category2, locale_Category3, locale_Category2);
      enumSetArray0[0] = enumSet0;
      EnumSet<Locale.Category> enumSet1 = EnumSet.copyOf((Collection<Locale.Category>) enumSet0);
      enumSetArray0[1] = enumSet1;
      Locale.Category locale_Category4 = Locale.Category.DISPLAY;
      Locale.Category locale_Category5 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet2 = EnumSet.of(locale_Category4, locale_Category5);
      enumSetArray0[2] = enumSet2;
      EnumSet<Locale.Category> enumSet3 = EnumSet.copyOf(enumSet2);
      enumSetArray0[3] = enumSet3;
      EnumSet<Locale.Category> enumSet4 = EnumSet.complementOf(enumSet2);
      enumSetArray0[4] = enumSet4;
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet5 = EnumSet.allOf(class0);
      enumSetArray0[5] = enumSet5;
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator0 = IteratorUtils.arrayIterator(enumSetArray0);
      String string0 = IteratorUtils.toString((Iterator<EnumSet<Locale.Category>>) resettableIterator0);
      assertEquals("[[DISPLAY, FORMAT], [DISPLAY, FORMAT], [DISPLAY], [DISPLAY], [FORMAT], [DISPLAY, FORMAT]]", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("dH*)oOFMt,kn9-AS)q");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.getIterator(iIOMetadataNode1);
      IteratorUtils.emptyIterator();
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      Properties properties0 = new Properties();
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Properties> predicate0 = ComparatorPredicate.comparatorPredicate(properties0, comparator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Properties>) null, (Predicate<? super Properties>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      LoopingIterator<SQLTransientException> loopingIterator0 = new LoopingIterator<SQLTransientException>(arrayDeque0);
      loopingIterator0.size();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Transformer<SQLTransientException, String> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.functors.NotPredicate", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.toString((Iterator<SQLTransientException>) loopingIterator0, (Transformer<? super SQLTransientException, String>) transformer0, "org.apache.commons.collections4.functors.NotPredicate", ", ", "org.apache.commons.collections4.functors.NotPredicate");
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 6);
      MapIterator<SQLTransientConnectionException, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLTransientConnectionException, SQLSyntaxErrorException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTransientConnectionException, ? extends SQLSyntaxErrorException>) mapIterator0);
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) mapIterator1;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(", ", "Reh?+");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("d6K@]iH\"6Y", "Reh?+", sQLTransientConnectionException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.toString((Iterator<EnumSet<Locale.Category>>) null);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLRecoverableException>) null, (Predicate<? super SQLRecoverableException>) notPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      OrderedMapIterator<Object, Iterator<SQLIntegrityConstraintViolationException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<IIOMetadataNode, StringTokenizer> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<IIOMetadataNode, StringTokenizer> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ? extends StringTokenizer>) orderedMapIterator1);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) mapIterator0, class0);
      EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.size(orderedMapIterator0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      SQLDataException sQLDataException0 = new SQLDataException("b-T8\"9/^a", "b-T8\"9/^a", 0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) loopingListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Iterator<EnumSet<Locale.Category>> iterator0 = EmptyIterator.emptyIterator();
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>((SQLTransientConnectionException) null);
      IteratorUtils.contains((Iterator<SQLTransientConnectionException>) singletonIterator0, (Object) null);
      IteratorUtils.size(iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MapIterator<Properties, LinkedHashSet<SQLFeatureNotSupportedException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      OrderedMapIterator<IIOMetadataNode, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<IIOMetadataNode, StringTokenizer> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ? extends StringTokenizer>) orderedMapIterator0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) mapIterator1, class0);
      EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.size(mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((ArrayDeque<SQLInvalidAuthorizationSpecException>[]) null, 100, (-1591));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 6);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Integer[]) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("dH*)oOFMt,kn9-AS)q");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashMap<Predicate<Object>, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<Predicate<Object>, SQLIntegrityConstraintViolationException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("<TvaS)n#_y^", "|]");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("|]", "|]", sQLTimeoutException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("dH*)oOFMt,kn9-AS)q", "dH*)oOFMt,kn9-AS)q", (-100), sQLNonTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("dH*)oOFMt,kn9-AS)q", "dH*)oOFMt,kn9-AS)q", (int[]) null, sQLNonTransientConnectionException0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(batchUpdateException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      hashMap0.put(identityPredicate0, sQLIntegrityConstraintViolationException0);
      EntrySetMapIterator<Predicate<Object>, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = new EntrySetMapIterator<Predicate<Object>, SQLIntegrityConstraintViolationException>(hashMap0);
      List<Predicate<Object>> list0 = IteratorUtils.toList((Iterator<? extends Predicate<Object>>) entrySetMapIterator0, 1315);
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) list0);
      IteratorUtils.size(entrySetMapIterator0);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<IIOMetadataNode, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<IIOMetadataNode, StringTokenizer> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ? extends StringTokenizer>) orderedMapIterator0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IIOMetadataNode[] iIOMetadataNodeArray0 = IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) mapIterator0, class0);
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 6);
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class1;
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      classArray0[1] = class2;
      Class<SQLIntegrityConstraintViolationException> class3 = SQLIntegrityConstraintViolationException.class;
      classArray0[2] = class3;
      Class<SQLIntegrityConstraintViolationException> class4 = SQLIntegrityConstraintViolationException.class;
      classArray0[3] = class4;
      Class<SQLIntegrityConstraintViolationException> class5 = SQLIntegrityConstraintViolationException.class;
      classArray0[4] = class5;
      Class<SQLIntegrityConstraintViolationException> class6 = SQLIntegrityConstraintViolationException.class;
      classArray0[5] = class6;
      InvokerTransformer<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> invokerTransformer0 = new InvokerTransformer<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException>("p*O/YFA", classArray0, iIOMetadataNodeArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLTransientException>) invokerTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 6);
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[0] = iterator0;
      Properties properties0 = new Properties();
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 6);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      classArray0[0] = class0;
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      classArray0[1] = class1;
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      classArray0[2] = class2;
      Class<SQLFeatureNotSupportedException> class3 = SQLFeatureNotSupportedException.class;
      classArray0[3] = class3;
      Class<SQLFeatureNotSupportedException> class4 = SQLFeatureNotSupportedException.class;
      classArray0[4] = class4;
      Class<SQLFeatureNotSupportedException> class5 = SQLFeatureNotSupportedException.class;
      classArray0[5] = class5;
      InvokerTransformer<Object, Properties> invokerTransformer0 = new InvokerTransformer<Object, Properties>("org.apache.commons.collections4.map.AbstractHashedMap$HashMapIterator", classArray0, iteratorArray0);
      Iterator<Properties> iterator1 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) invokerTransformer0);
      iteratorArray0[1] = iterator1;
      MapIterator<Properties, PriorityQueue<SQLWarning>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<Properties, PriorityQueue<SQLWarning>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      iteratorArray0[2] = (Iterator<Properties>) mapIterator1;
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0, true);
      iteratorArray0[3] = (Iterator<Properties>) singletonIterator0;
      OrderedMapIterator<Properties, LinkedHashSet<ClientInfoStatus>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[4] = (Iterator<Properties>) orderedMapIterator0;
      Vector<Properties> vector0 = new Vector<Properties>();
      LoopingListIterator<Properties> loopingListIterator0 = new LoopingListIterator<Properties>(vector0);
      iteratorArray0[5] = (Iterator<Properties>) loopingListIterator0;
      Iterator<Properties> iterator2 = IteratorUtils.chainedIterator((Iterator<? extends Properties>[]) iteratorArray0);
      assertFalse(iterator2.equals((Object)iterator1));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MapIterator<Properties, LinkedHashSet<SQLFeatureNotSupportedException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Properties properties0 = new Properties();
      Predicate<Properties> predicate0 = IdentityPredicate.identityPredicate(properties0);
      IteratorUtils.filteredIterator((Iterator<? extends Properties>) mapIterator0, (Predicate<? super Properties>) predicate0);
      EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLException[]) null, (-2031));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 0);
      Predicate<SQLTimeoutException> predicate0 = OnePredicate.onePredicate((Predicate<? super SQLTimeoutException>[]) predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLTimeoutException>) orderedIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      IteratorUtils.zippingIterator((Iterator<?>) orderedIterator0, (Iterator<?>) orderedIterator0, (Iterator<?>) orderedIterator0);
      EmptyListIterator.emptyListIterator();
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) listIterator0);
      MapIterator<Transformer<SQLClientInfoException, Object>, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<Transformer<SQLClientInfoException, Object>, Integer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Transformer<SQLClientInfoException, Object>, Integer>(mapIterator0);
      MapIterator<Transformer<SQLClientInfoException, Object>, Integer> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<Transformer<SQLClientInfoException, Object>, Integer>) abstractMapIteratorDecorator0);
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray1);
      boolean boolean1 = IteratorUtils.matchesAny((Iterator<Transformer<SQLClientInfoException, Object>>) mapIterator1, (Predicate<? super Transformer<SQLClientInfoException, Object>>) predicate1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<IIOMetadataNode, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<IIOMetadataNode, StringTokenizer> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ? extends StringTokenizer>) orderedMapIterator0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) mapIterator0, class0);
      HashMap<Predicate<Object>, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<Predicate<Object>, SQLIntegrityConstraintViolationException>();
      EmptyListIterator.resettableEmptyListIterator();
      Enumeration<Properties> enumeration0 = (Enumeration<Properties>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("dH*)oOFMt,kn9-AS)q");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.getIterator("dH*)oOFMt,kn9-AS)q");
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<Integer> class0 = Integer.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.filteredIterator((Iterator<? extends Properties>) resettableIterator0, (Predicate<? super Properties>) predicate0);
      EmptyListIterator.resettableEmptyListIterator();
      SQLWarning sQLWarning0 = new SQLWarning("");
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLWarning0, true);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLException>) singletonIterator0, 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 3
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MapIterator<Properties, LinkedHashSet<SQLFeatureNotSupportedException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Properties properties0 = new Properties();
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      IteratorUtils.size(mapIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      IteratorUtils.singletonListIterator(sQLRecoverableException0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      Class<SQLRecoverableException>[] classArray0 = (Class<SQLRecoverableException>[]) Array.newInstance(Class.class, 2);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      classArray0[0] = class0;
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      classArray0[1] = class1;
      InvokerTransformer<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> invokerTransformer0 = new InvokerTransformer<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException>("", classArray0, classArray0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLTransientException>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Properties>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      HashMap<Predicate<Object>, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<Predicate<Object>, SQLIntegrityConstraintViolationException>();
      EntrySetMapIterator<Predicate<Object>, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = new EntrySetMapIterator<Predicate<Object>, SQLIntegrityConstraintViolationException>(hashMap0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.functors.NullIsFalsePredicate", "z-y0FHL/JP", 98);
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0, false);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(";4L2MsL.5!oV+");
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      singletonIterator0.reset();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLTimeoutException0, defaultEquator0);
      IteratorUtils.matchesAll((Iterator<SQLTimeoutException>) singletonIterator0, (Predicate<? super SQLTimeoutException>) equalPredicate0);
      Iterator<SQLException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLException>) singletonIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "Collection must not be null";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Collection must not be null");
      EmptyIterator.emptyIterator();
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 4);
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      iteratorArray0[0] = (Iterator<BatchUpdateException>) listIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      HashMap<Predicate<Object>, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<Predicate<Object>, SQLIntegrityConstraintViolationException>();
      EntrySetMapIterator<Predicate<Object>, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = new EntrySetMapIterator<Predicate<Object>, SQLIntegrityConstraintViolationException>(hashMap0);
      List<Predicate<Object>> list0 = IteratorUtils.toList((Iterator<? extends Predicate<Object>>) entrySetMapIterator0, 2827);
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) list0);
      IteratorUtils.size(entrySetMapIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      IteratorUtils.singletonListIterator(sQLRecoverableException0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      ZippingIterator<SQLIntegrityConstraintViolationException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 6);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      classArray0[0] = class0;
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      classArray0[1] = class1;
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      classArray0[2] = class2;
      Class<SQLFeatureNotSupportedException> class3 = SQLFeatureNotSupportedException.class;
      classArray0[3] = class3;
      Class<SQLFeatureNotSupportedException> class4 = SQLFeatureNotSupportedException.class;
      classArray0[4] = class4;
      Class<SQLFeatureNotSupportedException> class5 = SQLFeatureNotSupportedException.class;
      classArray0[5] = class5;
      InvokerTransformer<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> invokerTransformer0 = new InvokerTransformer<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException>("", classArray0, classArray0);
      Iterator<SQLTransientException> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) zippingIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLTransientException>) invokerTransformer0);
      assertNotNull(iterator1);
      
      MapIterator<DataTruncation, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) mapIterator0, (long) 2827);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("f*.dxtU9di,RC");
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      BoundedIterator<SQLClientInfoException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) iterator0, 1L);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("f*.dxtU9di,RC");
      IteratorUtils.toString((Iterator<SQLClientInfoException>) boundedIterator0, (Transformer<? super SQLClientInfoException, String>) constantTransformer0);
      iIOMetadataNode0.getAttributeNode("U16(]u4!\u0001`h5");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      IteratorUtils.emptyOrderedMapIterator();
      Integer integer0 = new Integer(93);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      String string0 = "h~T]['.PGp";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("h~T]['.PGp", "h~T]['.PGp");
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      String string1 = "";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("", "", 1472, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      sQLIntegrityConstraintViolationException2.printStackTrace();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("NodeList must not be null", sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      sQLIntegrityConstraintViolationException2.addSuppressed(sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("", "h~T]['.PGp", (-1669), sQLIntegrityConstraintViolationException3);
      sQLIntegrityConstraintViolationException4.getSuppressed();
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTransactionRollbackException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      Properties properties0 = new Properties();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("dH*)oOFMt,kn9-AS)q");
      EmptyIterator.emptyIterator();
      Iterator<IIOMetadataNode> iterator0 = null;
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MapIterator<Properties, LinkedHashSet<SQLFeatureNotSupportedException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Properties properties0 = new Properties();
      Predicate<Properties> predicate0 = IdentityPredicate.identityPredicate(properties0);
      IteratorUtils.filteredIterator((Iterator<? extends Properties>) mapIterator0, (Predicate<? super Properties>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Transformer<SQLClientInfoException, Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("YC'");
      EmptyIterator.emptyIterator();
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 3);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) resettableListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("dH*)oOFMt,kn9-AS)q");
      Iterator<?> iterator0 = IteratorUtils.getIterator("dH*)oOFMt,kn9-AS)q");
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 0);
      Predicate<SQLTimeoutException> predicate0 = OnePredicate.onePredicate((Predicate<? super SQLTimeoutException>[]) predicateArray0);
      IteratorUtils.matchesAll((Iterator<SQLTimeoutException>) orderedIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      IteratorUtils.zippingIterator((Iterator<?>) orderedIterator0, (Iterator<?>) orderedIterator0, (Iterator<?>) orderedIterator0);
      HashSet<SQLDataException> hashSet0 = new HashSet<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLException>) hashSet0);
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) listIterator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) listIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 3851);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      SQLWarning sQLWarning0 = new SQLWarning("CDY=:uYO3");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("CDY=:uYO3", "CDY=:uYO3", 44, sQLWarning0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      IteratorUtils.contains((Iterator<SQLTransientConnectionException>) singletonIterator0, (Object) sQLWarning0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      OrderedIterator<ServiceLoader<TreeSet>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 2);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("_ycI[jpghQ'q", intArray0);
      DataTruncation dataTruncation0 = new DataTruncation((-1669), false, false, 100, 100, batchUpdateException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(dataTruncation0, defaultEquator0);
      Predicate<Object> predicate0 = AndPredicate.andPredicate((Predicate<? super Object>) equalPredicate0, (Predicate<? super Object>) equalPredicate0);
      AndPredicate<SQLException> andPredicate0 = new AndPredicate<SQLException>(predicate0, predicate0);
      predicateArray0[0] = (Predicate<SQLException>) andPredicate0;
      DefaultEquator<SQLException> defaultEquator1 = DefaultEquator.defaultEquator();
      Predicate<SQLException> predicate1 = EqualPredicate.equalPredicate((SQLException) dataTruncation0, (Equator<SQLException>) defaultEquator1);
      predicateArray0[1] = predicate1;
      OnePredicate.onePredicate((Predicate<? super SQLTimeoutException>[]) predicateArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("_ycI[jpghQ'q", " ?2SJxmDp`@,rYJI-9|", batchUpdateException0);
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0, true);
      IteratorUtils.matchesAll((Iterator<SQLTimeoutException>) singletonIterator0, (Predicate<? super SQLTimeoutException>) predicate1);
      IteratorUtils.zippingIterator((Iterator<?>) orderedIterator0, (Iterator<?>) orderedIterator0, (Iterator<?>) singletonIterator0);
      HashSet<SQLDataException> hashSet0 = new HashSet<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLException>) hashSet0);
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) listIterator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) listIterator0);
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLTimeoutException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MapIterator<Properties, LinkedHashSet<SQLFeatureNotSupportedException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Properties properties0 = new Properties();
      Predicate<Properties> predicate0 = new IdentityPredicate<Properties>(properties0);
      IteratorUtils.filteredIterator((Iterator<? extends Properties>) mapIterator0, (Predicate<? super Properties>) predicate0);
      int int0 = 32;
      Hashtable<BatchUpdateException, Properties> hashtable0 = new Hashtable<BatchUpdateException, Properties>(32);
      Iterator<SQLTransientConnectionException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      IteratorUtils.zippingIterator((Iterator<?>) zippingIterator0, (Iterator<?>) zippingIterator0, (Iterator<?>) zippingIterator0);
      NullPredicate.nullPredicate();
      ResettableListIterator<Integer> resettableListIterator1 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) resettableListIterator1, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 10, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLClientInfoException>) orderedIterator0);
      IteratorUtils.asIterable((Iterator<?>) iterator0);
      Properties properties0 = new Properties();
      IdentityPredicate.identityPredicate(properties0);
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLException>) stack0);
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) listIterator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Iterator<Properties> iterator1 = new SingletonListIterator<Properties>(properties0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLException>) resettableIterator0, (Predicate<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      IteratorUtils.zippingIterator((Iterator<?>) zippingIterator0, (Iterator<?>) zippingIterator0, (Iterator<?>) zippingIterator0);
      HashSet<SQLDataException> hashSet0 = new HashSet<SQLDataException>();
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      ListIteratorWrapper<SQLException> listIteratorWrapper0 = new ListIteratorWrapper<SQLException>(resettableListIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-31);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLException>) listIteratorWrapper0, (Predicate<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 0);
      Predicate<SQLTimeoutException> predicate0 = OnePredicate.onePredicate((Predicate<? super SQLTimeoutException>[]) predicateArray0);
      IteratorUtils.matchesAll((Iterator<SQLTimeoutException>) orderedIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("T", "T");
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      HashMap<String, SQLRecoverableException> hashMap0 = new HashMap<String, SQLRecoverableException>();
      IteratorUtils.asIterable((Iterator<?>) listIterator0);
      EmptyListIterator.resettableEmptyListIterator();
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      IteratorUtils.isEmpty(listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLClientInfoException>) iterator0);
      IteratorUtils.asIterable((Iterator<?>) iterator1);
      Properties properties0 = new Properties();
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      ListIteratorWrapper<SQLException> listIteratorWrapper0 = new ListIteratorWrapper<SQLException>(iterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.find((Iterator<SQLException>) listIteratorWrapper0, (Predicate<? super SQLException>) uniquePredicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Transformer<SQLClientInfoException, Object>>) null, (Predicate<? super Transformer<SQLClientInfoException, Object>>) uniquePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 0);
      Predicate<SQLTimeoutException> predicate0 = OnePredicate.onePredicate((Predicate<? super SQLTimeoutException>[]) predicateArray0);
      IteratorUtils.matchesAll((Iterator<SQLTimeoutException>) orderedIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("T", "T");
      IteratorUtils.singletonListIterator(sQLTimeoutException0);
      HashMap<String, SQLRecoverableException>[] hashMapArray0 = (HashMap<String, SQLRecoverableException>[]) Array.newInstance(HashMap.class, 9);
      HashMap<String, SQLRecoverableException> hashMap0 = new HashMap<String, SQLRecoverableException>();
      hashMapArray0[0] = hashMap0;
      HashMap<String, SQLRecoverableException> hashMap1 = new HashMap<String, SQLRecoverableException>();
      hashMapArray0[1] = hashMap1;
      HashMap<String, SQLRecoverableException> hashMap2 = new HashMap<String, SQLRecoverableException>();
      hashMapArray0[2] = hashMap2;
      HashMap<String, SQLRecoverableException> hashMap3 = new HashMap<String, SQLRecoverableException>();
      hashMapArray0[3] = hashMap3;
      HashMap<String, SQLRecoverableException> hashMap4 = new HashMap<String, SQLRecoverableException>();
      hashMapArray0[4] = hashMap4;
      HashMap<String, SQLRecoverableException> hashMap5 = new HashMap<String, SQLRecoverableException>();
      hashMapArray0[5] = hashMap5;
      HashMap<String, SQLRecoverableException> hashMap6 = new HashMap<String, SQLRecoverableException>();
      hashMapArray0[6] = hashMap6;
      HashMap<String, SQLRecoverableException> hashMap7 = new HashMap<String, SQLRecoverableException>();
      hashMapArray0[7] = hashMap7;
      HashMap<String, SQLRecoverableException> hashMap8 = new HashMap<String, SQLRecoverableException>();
      hashMapArray0[8] = hashMap8;
      ResettableIterator<HashMap<String, SQLRecoverableException>> resettableIterator0 = IteratorUtils.arrayIterator(hashMapArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      OrderedIterator<ServiceLoader<TreeSet>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.contains((Iterator<SQLTransientConnectionException>) null, (Object) orderedIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      IteratorUtils.isEmpty((Iterator<?>) null);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) priorityQueue0;
      objectArray0[1] = (Object) iIOMetadataNode0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) priorityQueue0;
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLClientInfoException>) orderedIterator0);
      IteratorUtils.asIterable((Iterator<?>) iterator0);
      Properties properties0 = new Properties();
      IdentityPredicate.identityPredicate(properties0);
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator1 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator1);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      ListIteratorWrapper<SQLException> listIteratorWrapper0 = new ListIteratorWrapper<SQLException>(iterator0);
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(128);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(651);
      integerArray0[1] = integer1;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) resettableListIterator0);
      Predicate<Object> predicate0 = null;
      PredicateTransformer<SQLInvalidAuthorizationSpecException> predicateTransformer0 = new PredicateTransformer<SQLInvalidAuthorizationSpecException>((Predicate<? super SQLInvalidAuthorizationSpecException>) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("]3=_w;ru1<%Ef:;1_", "]3=_w;ru1<%Ef:;1_");
      // Undeclared exception!
      try { 
        predicateTransformer0.transform(sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.PredicateTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      Properties properties0 = new Properties();
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLClientInfoException>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<IIOMetadataNode, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<IIOMetadataNode, StringTokenizer> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ? extends StringTokenizer>) orderedMapIterator0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) mapIterator0, class0);
      HashMap<Predicate<Object>, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<Predicate<Object>, SQLIntegrityConstraintViolationException>();
      HashMap<Predicate<Object>, SQLIntegrityConstraintViolationException> hashMap1 = new HashMap<Predicate<Object>, SQLIntegrityConstraintViolationException>();
      EntrySetMapIterator<Predicate<Object>, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = new EntrySetMapIterator<Predicate<Object>, SQLIntegrityConstraintViolationException>(hashMap1);
      List<Predicate<Object>> list0 = new ArrayList<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) list0);
      IteratorUtils.singletonListIterator(predicate0);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      IteratorUtils.size(orderedMapIterator0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, 0L, 1604L);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Collection must not be null");
      iIOMetadataNode0.getParentNode();
      // Undeclared exception!
      try { 
        iIOMetadataNode0.replaceChild((Node) null, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newChild == null!
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<EnumSet<Locale.Category>> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toString(iterator0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("[]", "^^YIQ,\"X", (-3797));
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("dH*)oOFMt,kn9-AS)q", sQLTransactionRollbackException0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "dH*)oOFMt,kn9-AS)q", 44, sQLNonTransientException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("Jjs!.|(RVj", "`'g vCM<}S|tZ3P");
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException(sQLDataException1);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException(sQLDataException2);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("`'g vCM<}S|tZ3P", (String) null, (-581), sQLDataException3);
      sQLDataExceptionArray0[4] = sQLDataException4;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("^^YIQ,\"X");
      Transformer<SQLNonTransientException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      SwitchTransformer<SQLDataException, String> switchTransformer0 = new SwitchTransformer<SQLDataException, String>(predicateArray0, (Transformer<? super SQLDataException, ? extends String>[]) null, transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) objectArrayListIterator0, (Transformer<? super SQLDataException, String>) switchTransformer0, "dH*)oOFMt,kn9-AS)q", "`'g vCM<}S|tZ3P", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      EmptyListIterator.resettableEmptyListIterator();
      Hashtable<Object, Integer> hashtable0 = new Hashtable<Object, Integer>();
      Properties properties0 = new Properties();
      properties0.putAll(hashtable0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getChildNodes();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("dH*)oOFMt,kn9-AS)q");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator("dH*)oOFMt,kn9-AS)q");
      assertNotNull(iterator0);
      
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<Integer> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) resettableListIterator0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) iIOMetadataNode1, (Equator<Object>) defaultEquator0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) listIterator0, (Predicate<? super Integer>) andPredicate0);
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode1);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      Collection<Iterator<SQLIntegrityConstraintViolationException>> collection0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends Iterator<SQLIntegrityConstraintViolationException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLClientInfoException>) orderedIterator0);
      IteratorUtils.asIterable((Iterator<?>) iterator0);
      Properties properties0 = new Properties();
      IdentityPredicate.identityPredicate(properties0);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("~[zY0hhaB1X");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      Iterator<EnumSet<Locale.Category>> iterator0 = EmptyIterator.emptyIterator();
      String string0 = IteratorUtils.toString(iterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<IIOMetadataNode, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<IIOMetadataNode, StringTokenizer> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ? extends StringTokenizer>) orderedMapIterator0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) mapIterator0, class0);
      HashMap<Predicate<Object>, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<Predicate<Object>, SQLIntegrityConstraintViolationException>();
      HashMap<Predicate<Object>, SQLIntegrityConstraintViolationException> hashMap1 = new HashMap<Predicate<Object>, SQLIntegrityConstraintViolationException>();
      EntrySetMapIterator<Predicate<Object>, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = new EntrySetMapIterator<Predicate<Object>, SQLIntegrityConstraintViolationException>(hashMap1);
      List<Predicate<Object>> list0 = IteratorUtils.toList((Iterator<? extends Predicate<Object>>) entrySetMapIterator0, 2827);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) list0);
      IteratorUtils.singletonListIterator(predicate0);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("x432%@", "!.l/E&WyMvBe2{", 2827);
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLIntegrityConstraintViolationException0);
      IteratorUtils.find((Iterator<SQLException>) singletonIterator0, (Predicate<? super SQLException>) predicate0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[9];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("x432%@", "akGW");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("=", (Map<String, ClientInfoStatus>) null, sQLRecoverableException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("akGW", "=", 595, sQLClientInfoException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("x432%@", "akGW");
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException(sQLRecoverableException1);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("=", sQLRecoverableException3);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException("List must not be null", "List must not be null", 595);
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException(" is invalid for size ", "]", 1316, sQLRecoverableException0);
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      SQLRecoverableException sQLRecoverableException7 = new SQLRecoverableException("", "", sQLRecoverableException5);
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException7;
      SQLRecoverableException sQLRecoverableException8 = new SQLRecoverableException("Iterator must not be null", "Can extract singleton only when collection size == 1", sQLRecoverableException0);
      sQLRecoverableExceptionArray0[8] = sQLRecoverableException8;
      ResettableListIterator<SQLRecoverableException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLRecoverableException>) resettableListIterator1);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<IIOMetadataNode, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<IIOMetadataNode, StringTokenizer> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ? extends StringTokenizer>) orderedMapIterator0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) mapIterator0, class0);
      HashMap<Predicate<Object>, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<Predicate<Object>, SQLIntegrityConstraintViolationException>();
      HashMap<Predicate<Object>, SQLIntegrityConstraintViolationException> hashMap1 = new HashMap<Predicate<Object>, SQLIntegrityConstraintViolationException>();
      EntrySetMapIterator<Predicate<Object>, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = new EntrySetMapIterator<Predicate<Object>, SQLIntegrityConstraintViolationException>(hashMap1);
      List<Predicate<Object>> list0 = IteratorUtils.toList((Iterator<? extends Predicate<Object>>) entrySetMapIterator0, 2827);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) list0);
      ListIterator<Predicate<Object>> listIterator0 = IteratorUtils.singletonListIterator(predicate0);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) listIterator0);
      assertEquals(1, objectArray0.length);
      
      int int0 = IteratorUtils.size(entrySetMapIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Su/2q$\"y6.xq9o+dFWa", "");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("&(", "Su/2q$\"y6.xq9o+dFWa", sQLRecoverableException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Su/2q$\"y6.xq9o+dFWa", "Su/2q$\"y6.xq9o+dFWa", (-5328), sQLSyntaxErrorException0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTimeoutException0);
      IteratorUtils.getIterator(sQLTransientConnectionException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<SQLDataException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIteratorWrapper<SQLDataException> listIteratorWrapper0 = new ListIteratorWrapper<SQLDataException>(resettableIterator0);
      IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) listIteratorWrapper0, (Iterator<? extends SQLDataException>) resettableIterator0);
      ServiceLoader<DataTruncation>[] serviceLoaderArray0 = (ServiceLoader<DataTruncation>[]) Array.newInstance(ServiceLoader.class, 7);
      Class<DataTruncation> class0 = DataTruncation.class;
      ServiceLoader<DataTruncation> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      serviceLoaderArray0[0] = serviceLoader0;
      Class<DataTruncation> class1 = DataTruncation.class;
      ServiceLoader<DataTruncation> serviceLoader1 = ServiceLoader.loadInstalled(class1);
      serviceLoaderArray0[1] = serviceLoader1;
      ServiceLoader<DataTruncation> serviceLoader2 = ServiceLoader.loadInstalled(class1);
      serviceLoaderArray0[2] = serviceLoader2;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<DataTruncation> serviceLoader3 = ServiceLoader.load(class0, classLoader0);
      serviceLoaderArray0[3] = serviceLoader3;
      Class<DataTruncation> class2 = DataTruncation.class;
      ServiceLoader<DataTruncation> serviceLoader4 = ServiceLoader.loadInstalled(class2);
      serviceLoaderArray0[4] = serviceLoader4;
      Class<DataTruncation> class3 = DataTruncation.class;
      ServiceLoader<DataTruncation> serviceLoader5 = ServiceLoader.load(class3, classLoader0);
      serviceLoaderArray0[5] = serviceLoader5;
      ServiceLoader<DataTruncation> serviceLoader6 = ServiceLoader.loadInstalled(class0);
      serviceLoaderArray0[6] = serviceLoader6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(serviceLoaderArray0, (-5328), (-5328));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MapIterator<Vector<SQLException>, EnumSet<Locale.Category>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(instantiateFactory0);
      IteratorUtils.toString((Iterator<Vector<SQLException>>) mapIterator0, (Transformer<? super Vector<SQLException>, String>) factoryTransformer0);
      ResettableListIterator<Properties> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      OrderedMapIterator<Properties, SQLRecoverableException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Properties, SQLRecoverableException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Properties, ? extends SQLRecoverableException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<Properties, SQLRecoverableException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, SQLRecoverableException>(orderedMapIterator1);
      Iterator<Properties> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Properties>) resettableListIterator0, (Iterator<? extends Properties>) abstractOrderedMapIteratorDecorator0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends Properties>) iterator0, (Predicate<? super Properties>) predicate0);
      ResettableListIterator<BatchUpdateException> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      Iterable<BatchUpdateException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends BatchUpdateException>) resettableListIterator1);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0);
      Properties properties0 = new Properties();
      Predicate<Properties> predicate0 = IdentityPredicate.identityPredicate(properties0);
      MapIterator<Properties, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<Properties> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Properties>) mapIterator0, (Iterator<? extends Properties>) mapIterator0);
      IteratorUtils.filteredIterator((Iterator<? extends Properties>) iterator0, (Predicate<? super Properties>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) null, (Collection<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0);
      OrderedMapIterator<IIOMetadataNode, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ? extends StringTokenizer>) orderedMapIterator0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) orderedMapIterator0, class0);
      HashMap<Predicate<Object>, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<Predicate<Object>, SQLIntegrityConstraintViolationException>();
      EntrySetMapIterator<Predicate<Object>, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = new EntrySetMapIterator<Predicate<Object>, SQLIntegrityConstraintViolationException>(hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Predicate<Object>>) entrySetMapIterator0, (-2917));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("R\"ae c74", "org.apache.commons.collections4.functors.ComparatorPredicate$Criterion", 1, sQLDataException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", "q+'/WXN*O]:K", sQLTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("transformer may not be null", sQLDataException0);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) singletonIterator0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      ListIteratorWrapper<SQLException> listIteratorWrapper0 = new ListIteratorWrapper<SQLException>(iterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.find((Iterator<SQLException>) listIteratorWrapper0, (Predicate<? super SQLException>) uniquePredicate0);
      assertTrue(listIteratorWrapper0.hasPrevious());
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) listIterator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0);
      IteratorUtils.asIterable((Iterator<?>) resettableListIterator0);
      MapIterator<SQLTransientConnectionException, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLTransientConnectionException, SQLSyntaxErrorException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTransientConnectionException, ? extends SQLSyntaxErrorException>) mapIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "<rBH|7!3g7dI");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", "]", sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("", "", 0, sQLTransientConnectionException1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("<rBH|7!3g7dI");
      Iterator<SQLException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLException>) mapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet0 = new LinkedHashSet<SQLTransactionRollbackException>();
      LoopingIterator<SQLTransientException> loopingIterator0 = new LoopingIterator<SQLTransientException>(linkedHashSet0);
      loopingIterator0.size();
      Transformer<SQLTransientException, String> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.functors.NotPredicate", (Class<?>[]) null, (Object[]) null);
      IteratorUtils.toString((Iterator<SQLTransientException>) null, (Transformer<? super SQLTransientException, String>) transformer0, ", ", "Estimated size must be greater than 0", "8XU*o+f0Jf')A'L~'");
      MapIterator<SQLTransientConnectionException, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTransientConnectionException, ? extends SQLSyntaxErrorException>) mapIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(", ", ", ", sQLTransientConnectionException0);
      int int0 = 0;
      String string0 = "";
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("Comparator must not be null.", "", 0, sQLTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ArrayIterator<SQLInvalidAuthorizationSpecException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLInvalidAuthorizationSpecException>("org.apache.commons.collections4.functors.NotPredicate", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) zippingIterator0);
      IteratorUtils.getIterator(resettableListIterator0);
      Properties[] propertiesArray0 = new Properties[0];
      ResettableListIterator<Properties> resettableListIterator1 = IteratorUtils.arrayListIterator(propertiesArray0);
      ListIteratorWrapper<Properties> listIteratorWrapper0 = new ListIteratorWrapper<Properties>(resettableListIterator1);
      IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) listIteratorWrapper0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) null, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      Class<String> class0 = String.class;
      InstantiateFactory.instantiateFactory(class0, (Class<?>[]) null, (Object[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Integer>) null, 1166);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OrderedIterator<ServiceLoader<TreeSet>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.contains((Iterator<SQLTransientConnectionException>) null, (Object) orderedIterator0);
      int int0 = 3479;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Enumeration must not be null", (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("delimiter may not be null", (String) null, 3479, sQLIntegrityConstraintViolationException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, 3479, sQLIntegrityConstraintViolationException1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLIntegrityConstraintViolationException0.spliterator();
      sQLIntegrityConstraintViolationException0.forEach(consumer0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      sQLIntegrityConstraintViolationException1.getStackTrace();
      bufferedOutputStream0.flush();
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      bufferedOutputStream0.flush();
      mockPrintStream0.print(true);
      sQLIntegrityConstraintViolationException0.printStackTrace((PrintStream) mockPrintStream0);
      sQLSyntaxErrorException0.getSuppressed();
      IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer(2413);
      treeSet0.add(integer0);
      IteratorUtils.singletonListIterator(treeSet0);
      SingletonIterator<TreeSet<Integer>> singletonIterator0 = new SingletonIterator<TreeSet<Integer>>(treeSet0);
      IteratorUtils.emptyMapIterator();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) zippingIterator0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      assertNotNull(iterator0);
      
      Iterator<?> iterator1 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) arrayList0);
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) zippingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      IteratorUtils.emptyOrderedMapIterator();
      ArrayList<SQLTransientException> arrayList1 = new ArrayList<SQLTransientException>();
      Iterator<SQLTransientException> iterator0 = arrayList1.iterator();
      Iterator<SQLTransientException> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MapIterator<Vector<SQLException>, EnumSet<Locale.Category>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<String> class0 = String.class;
      Class<Object>[] classArray0 = null;
      Factory<String> factory0 = InstantiateFactory.instantiateFactory(class0, (Class<?>[]) null, (Object[]) null);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      IteratorUtils.toString((Iterator<Vector<SQLException>>) mapIterator0, (Transformer<? super Vector<SQLException>, String>) factoryTransformer0);
      int int0 = (-2844);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Integer>) null, (-2844));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -2844
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.singletonIterator((SQLException) null);
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("");
      IteratorUtils.toString((Iterator<SQLWarning>) null, (Transformer<? super SQLWarning, String>) transformer0);
      OrderedMapIterator<Boolean, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Boolean, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Boolean, Integer>(orderedMapIterator0);
      OrderedMapIterator<Boolean, Integer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Boolean, ? extends Integer>) abstractOrderedMapIteratorDecorator0);
      MapIterator<Boolean, Integer> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Boolean, Integer>) orderedMapIterator1);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) zippingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      OrderedIterator<ServiceLoader<TreeSet>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.contains((Iterator<SQLTransientConnectionException>) null, (Object) orderedIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 6);
      Iterator<BatchUpdateException> iterator0 = null;
      long long0 = (-775L);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) null, (-775L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      String string0 = "f*.dxtU9di,RC";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("f*.dxtU9di,RC");
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) iterator0, (-292L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) zippingIterator0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Index: ", "#iQ;j|>q:Q1o");
      int[] intArray0 = new int[8];
      int int0 = 42;
      intArray0[0] = 42;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Predicate<Object>>) null, 42);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MapIterator<Properties, LinkedHashSet<SQLFeatureNotSupportedException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Properties properties0 = new Properties();
      Predicate<Properties> predicate0 = IdentityPredicate.identityPredicate(properties0);
      Iterator<Properties> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Properties>) mapIterator0, (Predicate<? super Properties>) predicate0);
      EmptyListIterator.resettableEmptyListIterator();
      Iterator<?> iterator1 = IteratorUtils.getIterator(iterator0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("dH*)oOFMt,kn9-AS)q");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.map.AbstractHashedMap$ValuesIterator");
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      BoundedIterator<SQLClientInfoException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) iterator0, (long) 0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("0");
      IteratorUtils.toString((Iterator<SQLClientInfoException>) boundedIterator0, (Transformer<? super SQLClientInfoException, String>) constantTransformer0);
      iIOMetadataNode0.getAttributeNode("org.apache.commons.collections4.map.AbstractHashedMap$ValuesIterator");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      stack0.clear();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("FSP?(GyA", sQLNonTransientException0);
      stack0.add(sQLTransientException0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) allPredicate0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("FSP?(GyA");
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      Stack<Integer> stack1 = new Stack<Integer>();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(stack1);
      NullPredicate.nullPredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) loopingListIterator0, (Predicate<? super Integer>) equalPredicate0);
      DataTruncation dataTruncation0 = new DataTruncation((-1035), true, true, (-1035), (-3056));
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) resettableIterator0);
      OrderedMapIterator<Transformer<Object, Iterator<SQLIntegrityConstraintViolationException>>, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Transformer<Object, Iterator<SQLIntegrityConstraintViolationException>>>) orderedMapIterator0, (long) (-3056));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 4);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[2];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLSyntaxErrorException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", "", 10, sQLSyntaxErrorException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      ListIteratorWrapper<SQLTransactionRollbackException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransactionRollbackException>(objectArrayListIterator0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) listIteratorWrapper0;
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransactionRollbackException1);
      iteratorArray0[1] = (Iterator<SQLTransactionRollbackException>) listIterator0;
      SkippingIterator<SQLTransactionRollbackException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLTransactionRollbackException>) listIteratorWrapper0, 0L);
      iteratorArray0[2] = (Iterator<SQLTransactionRollbackException>) skippingIterator0;
      MapIterator<SQLTransactionRollbackException, HashMap<EnumSet, SQLTransientException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[3] = (Iterator<SQLTransactionRollbackException>) mapIterator0;
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MapIterator<Properties, LinkedHashSet<SQLFeatureNotSupportedException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Properties properties0 = new Properties();
      Predicate<Properties> predicate0 = IdentityPredicate.identityPredicate(properties0);
      IteratorUtils.filteredIterator((Iterator<? extends Properties>) mapIterator0, (Predicate<? super Properties>) predicate0);
      IteratorUtils.emptyIterator();
      HashMap<BatchUpdateException, Predicate<Object>> hashMap0 = new HashMap<BatchUpdateException, Predicate<Object>>();
      HashMap<BatchUpdateException, Predicate<Object>> hashMap1 = new HashMap<BatchUpdateException, Predicate<Object>>();
      HashMap<BatchUpdateException, Predicate<Object>> hashMap2 = new HashMap<BatchUpdateException, Predicate<Object>>();
      HashMap<BatchUpdateException, Predicate<Object>> hashMap3 = new HashMap<BatchUpdateException, Predicate<Object>>();
      HashMap<BatchUpdateException, Predicate<Object>>[] hashMapArray0 = (HashMap<BatchUpdateException, Predicate<Object>>[]) Array.newInstance(HashMap.class, 4);
      HashMap<BatchUpdateException, Predicate<Object>> hashMap4 = new HashMap<BatchUpdateException, Predicate<Object>>();
      hashMapArray0[0] = hashMap4;
      hashMapArray0[1] = hashMap1;
      HashMap<BatchUpdateException, Predicate<Object>> hashMap5 = new HashMap<BatchUpdateException, Predicate<Object>>(0);
      hashMapArray0[2] = hashMap5;
      hashMapArray0[3] = hashMap1;
      ResettableIterator<HashMap<BatchUpdateException, Predicate<Object>>> resettableIterator0 = IteratorUtils.arrayIterator(hashMapArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      LoopingIterator<SQLTransientException> loopingIterator0 = new LoopingIterator<SQLTransientException>(arrayDeque0);
      loopingIterator0.size();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Transformer<SQLTransientException, String> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.functors.NotPredicate", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.toString((Iterator<SQLTransientException>) loopingIterator0, (Transformer<? super SQLTransientException, String>) transformer0, "org.apache.commons.collections4.functors.NotPredicate", ", ", "org.apache.commons.collections4.functors.NotPredicate");
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 7);
      MapIterator<SQLTransientConnectionException, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLTransientConnectionException, SQLSyntaxErrorException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTransientConnectionException, ? extends SQLSyntaxErrorException>) mapIterator0);
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) mapIterator1;
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[9];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("v-x@VM0", "");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", "", sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException(", ", "org.apache.commons.collections4.functors.NotPredicate", 0, sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException(sQLTransientConnectionException2);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException("", (String) null, 0, sQLTransientConnectionException3);
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      SQLTransientConnectionException sQLTransientConnectionException6 = new SQLTransientConnectionException(", org.apache.commons.collections4.functors.NotPredicate", ", ", 0, sQLTransientConnectionException3);
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException6;
      SQLTransientConnectionException sQLTransientConnectionException7 = new SQLTransientConnectionException("YPZl7g", "Node must not be null");
      sQLTransientConnectionExceptionArray0[7] = sQLTransientConnectionException7;
      SQLTransientConnectionException sQLTransientConnectionException8 = new SQLTransientConnectionException("Node must not be null", "suffix may not be null");
      sQLTransientConnectionExceptionArray0[8] = sQLTransientConnectionException8;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      iteratorArray0[1] = (Iterator<SQLTransientConnectionException>) resettableListIterator0;
      Hashtable<SQLTransientConnectionException, SQLSyntaxErrorException> hashtable0 = new Hashtable<SQLTransientConnectionException, SQLSyntaxErrorException>();
      EntrySetMapIterator<SQLTransientConnectionException, SQLSyntaxErrorException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientConnectionException, SQLSyntaxErrorException>(hashtable0);
      iteratorArray0[2] = (Iterator<SQLTransientConnectionException>) entrySetMapIterator0;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      iteratorArray0[3] = (Iterator<SQLTransientConnectionException>) resettableListIterator1;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator2 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[4] = (Iterator<SQLTransientConnectionException>) resettableListIterator2;
      ArrayDeque<SQLTransientConnectionException> arrayDeque1 = new ArrayDeque<SQLTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) arrayDeque1);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLTransientConnectionException>) iteratorArray0[5]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) zippingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) locale_Category0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0);
      IteratorUtils.asIterable((Iterator<?>) resettableListIterator0);
      Properties properties0 = new Properties();
      Predicate<Properties> predicate0 = IdentityPredicate.identityPredicate(properties0);
      MapIterator<Properties, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<Properties> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Properties>) mapIterator0, (Predicate<? super Properties>) predicate0);
      Iterator<Properties> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Properties>) iterator0, (Iterator<? extends Properties>) iterator0);
      IteratorUtils.filteredIterator((Iterator<? extends Properties>) iterator1, (Predicate<? super Properties>) predicate0);
      ResettableListIterator<BatchUpdateException> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      Iterable<BatchUpdateException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends BatchUpdateException>) resettableListIterator1);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) zippingIterator0);
      Comparator<IIOMetadataNode> comparator0 = (Comparator<IIOMetadataNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<IIOMetadataNode>[] iteratorArray0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 6);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      int int0 = 1073741824;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLNonTransientException0, 100, 1073741824);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.map.AbstractHashedMap$ValuesIterator");
      iIOMetadataNode0.getAttributeNode("org.apache.commons.collections4.map.AbstractHashedMap$ValuesIterator");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.map.AbstractHashedMap$ValuesIterator");
      iIOMetadataNode0.getAttributeNode("7C-x'():V");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("dH*)oOFMt,kn9-AS)q");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IteratorUtils.getIterator("dH*)oOFMt,kn9-AS)q");
      Iterator<EnumSet<Locale.Category>> iterator0 = EmptyIterator.emptyIterator();
      String string0 = IteratorUtils.toString(iterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) orderedIterator0);
      SQLException sQLException0 = new SQLException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("[]", sQLException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("[]", "[]", "[]", 747);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("[]", "", "", (-121));
      stackTraceElementArray0[1] = stackTraceElement1;
      String string0 = "Entry does not exist: ";
      StackTraceElement stackTraceElement2 = new StackTraceElement("", "Entry does not exist: ", "", 44);
      stackTraceElementArray0[2] = stackTraceElement2;
      sQLTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      sQLException0.fillInStackTrace();
      sQLException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0, 747, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      SQLDataException sQLDataException0 = new SQLDataException("hD.pcqJc{tQM", "Estimated size must be greater than 0");
      SQLDataException sQLDataException1 = new SQLDataException("fromIndex(", "", sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLDataException1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("dH*)oOFMt,kn9-AS)q");
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      IteratorUtils.zippingIterator((Iterator<?>) zippingIterator0, (Iterator<?>) zippingIterator0, (Iterator<?>) zippingIterator0);
      HashSet<SQLDataException> hashSet0 = new HashSet<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLException>) hashSet0);
      SQLWarning sQLWarning0 = new SQLWarning("", "Enumeration must not be null");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Enumeration must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("FSP?(GyA", sQLNonTransientException0);
      stack0.add(sQLTransientException0);
      int int0 = 919;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) zippingIterator0, 919);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<IIOMetadataNode, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<IIOMetadataNode, StringTokenizer> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ? extends StringTokenizer>) orderedMapIterator0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) mapIterator0, class0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) iterator0, (Iterator<? extends SQLNonTransientException>) orderedIterator0);
      int int0 = 44;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iterator0, 44);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("E^|{}Y[<", "E^|{}Y[<", 0);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[2];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null);
      sQLExceptionArray0[0] = (SQLException) sQLIntegrityConstraintViolationException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, sQLExceptionArray0[0]);
      sQLExceptionArray0[1] = (SQLException) sQLSyntaxErrorException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLExceptionArray0, 0, (-2011));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = InvokerTransformer.invokerTransformer("L(3}t%\"}#+Y0b{gy}");
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) transformer0);
      ListIteratorWrapper<SQLFeatureNotSupportedException> listIteratorWrapper0 = new ListIteratorWrapper<SQLFeatureNotSupportedException>(iterator0);
      // Undeclared exception!
      try { 
        listIteratorWrapper0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot remove element at index -1.
         //
         verifyException("org.apache.commons.collections4.iterators.ListIteratorWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableListIterator0, (Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 4);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category0, locale_Category0);
      enumSetArray0[0] = enumSet0;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category2);
      enumSetArray0[1] = enumSet1;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
      EnumSet<Locale.Category> enumSet2 = EnumSet.of(locale_Category3, locale_CategoryArray0);
      enumSetArray0[2] = enumSet2;
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet3 = EnumSet.noneOf(class0);
      enumSetArray0[3] = enumSet3;
      DataTruncation dataTruncation0 = new DataTruncation(1663, true, false, (-3074), (-3074));
      enumSet1.remove(dataTruncation0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(enumSetArray0, (-3074), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0);
      Iterable<Object> iterable0 = IteratorUtils.asIterable((Iterator<?>) resettableListIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      int int0 = (-3809);
      ArrayListIterator<SQLTimeoutException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLTimeoutException>(iterable0, (-3809), (-3809));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TreeSet<Iterator<SQLIntegrityConstraintViolationException>> treeSet0 = new TreeSet<Iterator<SQLIntegrityConstraintViolationException>>();
      ResettableIterator<Iterator<SQLIntegrityConstraintViolationException>> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Iterator<SQLIntegrityConstraintViolationException>>) treeSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Iterator<SQLIntegrityConstraintViolationException>>) resettableIterator0, (Predicate<? super Iterator<SQLIntegrityConstraintViolationException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.item(125);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 4);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[6];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Enumeration must not be null", "Enumeration must not be null");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLIntegrityConstraintViolationException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Enumeration must not be null", sQLRecoverableException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("Enumeration must not be null", "", sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("", ">t\"Fc#}dp`", 32, sQLSyntaxErrorException2);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException(">t\"Fc#}dp`", "Enumeration must not be null");
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException(sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      ObjectArrayListIterator<SQLSyntaxErrorException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0, 0, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ArrayDeque<SQLTimeoutException> arrayDeque0 = new ArrayDeque<SQLTimeoutException>();
      LoopingIterator<SQLTransientException> loopingIterator0 = new LoopingIterator<SQLTransientException>(arrayDeque0);
      loopingIterator0.size();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Transformer<SQLTransientException, String> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.functors.NotPredicate", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.toString((Iterator<SQLTransientException>) loopingIterator0, (Transformer<? super SQLTransientException, String>) transformer0, "org.apache.commons.collections4.functors.NotPredicate", ", ", "org.apache.commons.collections4.functors.NotPredicate");
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 7);
      MapIterator<SQLTransientConnectionException, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLTransientConnectionException, SQLSyntaxErrorException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTransientConnectionException, ? extends SQLSyntaxErrorException>) mapIterator0);
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) mapIterator1;
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[9];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("v-x@VM0", "");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", "", sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException(", ", "org.apache.commons.collections4.functors.NotPredicate", 0, sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException(sQLTransientConnectionException2);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException("", (String) null, 0, sQLTransientConnectionException3);
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      SQLTransientConnectionException sQLTransientConnectionException6 = new SQLTransientConnectionException(", org.apache.commons.collections4.functors.NotPredicate", ", ", 0, sQLTransientConnectionException3);
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException6;
      SQLTransientConnectionException sQLTransientConnectionException7 = new SQLTransientConnectionException("YPZl7g", "Node must not be null");
      sQLTransientConnectionExceptionArray0[7] = sQLTransientConnectionException7;
      SQLTransientConnectionException sQLTransientConnectionException8 = new SQLTransientConnectionException("Node must not be null", "suffix may not be null");
      sQLTransientConnectionExceptionArray0[8] = sQLTransientConnectionException8;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      iteratorArray0[1] = (Iterator<SQLTransientConnectionException>) resettableListIterator0;
      Hashtable<SQLTransientConnectionException, SQLSyntaxErrorException> hashtable0 = new Hashtable<SQLTransientConnectionException, SQLSyntaxErrorException>();
      EntrySetMapIterator<SQLTransientConnectionException, SQLSyntaxErrorException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientConnectionException, SQLSyntaxErrorException>(hashtable0);
      iteratorArray0[2] = (Iterator<SQLTransientConnectionException>) entrySetMapIterator0;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      iteratorArray0[3] = (Iterator<SQLTransientConnectionException>) resettableListIterator1;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator2 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[4] = (Iterator<SQLTransientConnectionException>) resettableListIterator2;
      ArrayDeque<SQLTransientConnectionException> arrayDeque1 = new ArrayDeque<SQLTransientConnectionException>();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) arrayDeque1);
      iteratorArray0[5] = (Iterator<SQLTransientConnectionException>) resettableIterator0;
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransientConnectionException>) iteratorArray0[5]);
      iteratorArray0[6] = (Iterator<SQLTransientConnectionException>) listIterator0;
      ZippingIterator<SQLTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      Class<SQLException> class0 = SQLException.class;
      SQLException[] sQLExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLException>) zippingIterator0, class0);
      assertEquals(9, sQLExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[0];
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      ArrayListIterator<EnumSet<Locale.Category>> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<EnumSet<Locale.Category>>(resettableIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "VaWHT&f1)MoVO82)";
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "VaWHT&f1)MoVO82)", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("dH*)oOFMt,kn9-AS)q");
      EmptyIterator.emptyIterator();
      OrderedMapIterator<SQLTransientConnectionException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLTransientConnectionException, BatchUpdateException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientConnectionException, BatchUpdateException>) orderedMapIterator0);
      Integer integer0 = new Integer(2);
      IteratorUtils.contains((Iterator<SQLTransientConnectionException>) mapIterator0, (Object) integer0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      Enumeration<SQLTransientConnectionException> enumeration0 = stack0.elements();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Node must not be null", "Node must not be null");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("^QqYEM3/[Y<d4BuQ", sQLNonTransientConnectionException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("^QqYEM3/[Y<d4BuQ", "w'*|v|M933FJ71gP|", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("w'*|v|M933FJ71gP|", sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("Node must not be null", sQLFeatureNotSupportedException2);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("A^HFqe^");
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("", "w'*|v|M933FJ71gP|", 10);
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLFeatureNotSupportedException>) objectArrayListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Su/2q$\"y6.xq9o+dFWa", "");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("&(", "Su/2q$\"y6.xq9o+dFWa", sQLRecoverableException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Su/2q$\"y6.xq9o+dFWa", "Su/2q$\"y6.xq9o+dFWa", (-5328), sQLSyntaxErrorException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTimeoutException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLTransientConnectionException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = (-2674);
      Integer integer0 = new Integer((-2674));
      integerArray0[0] = integer0;
      int int1 = 3682;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(integerArray0, 3682);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      int int0 = (-204);
      int int1 = 1095;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "QUP4Zk,E-tCa)c67", sQLIntegrityConstraintViolationException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.list.AbstractLinkedList$Node", "", sQLTransientConnectionException0);
      SQLException sQLException0 = new SQLException("org.apache.commons.collections4.list.AbstractLinkedList$Node", "", 1095, sQLTransactionRollbackException0);
      DataTruncation dataTruncation0 = new DataTruncation((-786), true, true, 1419, (-204), sQLException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-204), true, false, 100, (-1498));
      dataTruncationArray0[1] = dataTruncation1;
      int int2 = (-172);
      DataTruncation dataTruncation2 = new DataTruncation(1419, true, true, (-204), (-172));
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(917, true, true, 93, (-775));
      dataTruncationArray0[3] = dataTruncation3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, (-1498));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<IIOMetadataNode, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<IIOMetadataNode, StringTokenizer> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ? extends StringTokenizer>) orderedMapIterator0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) mapIterator0, class0);
      HashMap<Predicate<Object>, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<Predicate<Object>, SQLIntegrityConstraintViolationException>();
      EntrySetMapIterator<Predicate<Object>, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = new EntrySetMapIterator<Predicate<Object>, SQLIntegrityConstraintViolationException>(hashMap0);
      List<Predicate<Object>> list0 = IteratorUtils.toList((Iterator<? extends Predicate<Object>>) entrySetMapIterator0, 44);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) list0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      IteratorUtils.singletonListIterator(predicate0);
      DataTruncation dataTruncation0 = new DataTruncation(44, false, true, 100, 44);
      assertEquals("01004", dataTruncation0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 5);
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableIterator0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      OrderedIterator<ServiceLoader<TreeSet>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.contains((Iterator<SQLTransientConnectionException>) null, (Object) orderedIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Enumeration must not be null", (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("delimiter may not be null", (String) null, 3479, sQLIntegrityConstraintViolationException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, 3479, sQLIntegrityConstraintViolationException1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLIntegrityConstraintViolationException0.spliterator();
      sQLIntegrityConstraintViolationException0.forEach(consumer0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      sQLIntegrityConstraintViolationException1.getStackTrace();
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      bufferedOutputStream0.flush();
      mockPrintStream0.print(true);
      sQLIntegrityConstraintViolationException0.printStackTrace((PrintStream) mockPrintStream0);
      sQLSyntaxErrorException0.getSuppressed();
      IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer(2413);
      treeSet0.add(integer0);
      ListIterator<TreeSet<Integer>> listIterator0 = IteratorUtils.singletonListIterator(treeSet0);
      IteratorUtils.unmodifiableIterator((Iterator<TreeSet<Integer>>) listIterator0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyIterator();
      HashMap<BatchUpdateException, Predicate<Object>>[] hashMapArray0 = (HashMap<BatchUpdateException, Predicate<Object>>[]) Array.newInstance(HashMap.class, 4);
      HashMap<BatchUpdateException, Predicate<Object>> hashMap0 = new HashMap<BatchUpdateException, Predicate<Object>>();
      hashMapArray0[0] = hashMap0;
      HashMap<BatchUpdateException, Predicate<Object>> hashMap1 = new HashMap<BatchUpdateException, Predicate<Object>>();
      hashMapArray0[1] = hashMap1;
      HashMap<BatchUpdateException, Predicate<Object>> hashMap2 = new HashMap<BatchUpdateException, Predicate<Object>>();
      hashMapArray0[2] = hashMap2;
      HashMap<BatchUpdateException, Predicate<Object>> hashMap3 = new HashMap<BatchUpdateException, Predicate<Object>>();
      hashMapArray0[3] = hashMap3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(hashMapArray0, 2413);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      OrderedIterator<ServiceLoader<TreeSet>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.contains((Iterator<SQLTransientConnectionException>) null, (Object) orderedIterator0);
      LoopingIterator<SQLInvalidAuthorizationSpecException> loopingIterator0 = null;
      try {
        loopingIterator0 = new LoopingIterator<SQLInvalidAuthorizationSpecException>((Collection<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The collection must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.LoopingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MapIterator<Properties, LinkedHashSet<SQLFeatureNotSupportedException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Properties properties0 = new Properties();
      Predicate<Properties> predicate0 = IdentityPredicate.identityPredicate(properties0);
      IteratorUtils.filteredIterator((Iterator<? extends Properties>) mapIterator0, (Predicate<? super Properties>) predicate0);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterable<BatchUpdateException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, SQLException>) orderedMapIterator0);
      Properties[] propertiesArray0 = new Properties[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(propertiesArray0, (-5625), 4140);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Enumeration<IIOMetadataNode> enumeration0 = null;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLFeatureNotSupportedException0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[6];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      iIOMetadataNode1.getNodeType();
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("d6t[yF|;Dt^9.rYV");
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      iIOMetadataNode0.getAttribute("org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator");
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode((String) null);
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      iIOMetadataNode3.isSupported("", "S1^(2qteYoRBa*'");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(iIOMetadataNodeArray0, (-106), (-106));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }
}
