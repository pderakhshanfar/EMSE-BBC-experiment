/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 19:30:33 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Spliterator;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("5vN},xKmA_G)G");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("5vN},xKmA_G)G", "6O3;qx");
      IteratorUtils.nodeListIterator(nodeList0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-2061);
      intArray0[1] = (-293);
      intArray0[2] = (-1);
      intArray0[3] = 1904;
      intArray0[4] = (-2061);
      intArray0[5] = (-931);
      intArray0[6] = 61;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("5vN},xKmA_G)G", "org.apache.commons.collections4.iterators.ObjectGraphIterator", (-1916));
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("0J@|,Q789s", "0J@|,Q789s", intArray0, sQLSyntaxErrorException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("5vN},xKmA_G)G", defaultEquator0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) nonePredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) allPredicate0;
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicateArray0[0], nonePredicate0);
      predicateArray0[3] = (Predicate<Object>) orPredicate0;
      Transformer<Object, BatchUpdateException>[] transformerArray0 = (Transformer<Object, BatchUpdateException>[]) Array.newInstance(Transformer.class, 0);
      ConstantTransformer<Object, BatchUpdateException> constantTransformer0 = new ConstantTransformer<Object, BatchUpdateException>(batchUpdateException0);
      SwitchTransformer<Object, BatchUpdateException> switchTransformer0 = new SwitchTransformer<Object, BatchUpdateException>(predicateArray0, transformerArray0, constantTransformer0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) switchTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends BatchUpdateException>) iterator0, 40);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Integer integer0 = new Integer(1085);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("6+[@0%9^", (String) null);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLSyntaxErrorException0);
      predicateArray0[0] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) allPredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) anyPredicate0;
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[3] = (Predicate<Object>) allPredicate1;
      Predicate<Object> predicate1 = FalsePredicate.falsePredicate();
      predicateArray0[4] = predicate1;
      Predicate<Object> predicate2 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate1);
      predicateArray0[5] = predicate2;
      predicateArray0[6] = (Predicate<Object>) allPredicate0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("6+[@0%9^", "itC{,", 1085, sQLSyntaxErrorException0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLIntegrityConstraintViolationException0);
      predicateArray0[7] = (Predicate<Object>) identityPredicate0;
      Predicate<Object> predicate3 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      // Undeclared exception!
      IteratorUtils.find((Iterator<Integer>) singletonListIterator0, (Predicate<? super Integer>) predicate3);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      ArrayList<SQLWarning> arrayList0 = new ArrayList<SQLWarning>();
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(linkedList0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>((String) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "w", 40, sQLNonTransientException0);
      ConstantTransformer.constantTransformer(sQLNonTransientConnectionException0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "d:P}XXqq");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) loopingListIterator0, (Transformer<? super IIOMetadataNode, String>) constantTransformer0, "wh1{Z<V;Q*Ur4h^I>N=", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<PriorityQueue<EnumSet>>) orderedIterator0, (Transformer<? super PriorityQueue<EnumSet>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("5vN},xKmA_G)G");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("5vN},xKmA_G)G", "6O3;qx");
      IteratorUtils.nodeListIterator(nodeList0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-2061);
      intArray0[2] = (-1);
      intArray0[3] = 1904;
      intArray0[4] = (-1);
      intArray0[5] = (-931);
      intArray0[6] = 61;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("5vN},xKmA_G)G", "org.apache.commons.collections4.iterators.ObjectGraphIterator", (-1916));
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("0J@|,Q789s", "0J@|,Q789s", intArray0, sQLSyntaxErrorException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) nonePredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) allPredicate0;
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicateArray0[0], nonePredicate0);
      predicateArray0[3] = (Predicate<Object>) orPredicate0;
      Transformer<Object, BatchUpdateException>[] transformerArray0 = (Transformer<Object, BatchUpdateException>[]) Array.newInstance(Transformer.class, 0);
      ConstantTransformer<Object, BatchUpdateException> constantTransformer0 = new ConstantTransformer<Object, BatchUpdateException>(batchUpdateException0);
      SwitchTransformer<Object, BatchUpdateException> switchTransformer0 = new SwitchTransformer<Object, BatchUpdateException>(predicateArray0, transformerArray0, constantTransformer0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) switchTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends BatchUpdateException>) iterator0, 40);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Iterator<SQLWarning> iterator0 = null;
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<String> iterator1 = IteratorUtils.objectGraphIterator("]N?p", (Transformer<? super String, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator1, 3157);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("P]Ci!(@!0VK6}", "P]Ci!(@!0VK6}", (Throwable) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLIntegrityConstraintViolationException0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator(sQLClientInfoException0);
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) listIterator0, 137);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("Entry does not exist: ", "#jc_n]@ydtj+i", 3333, sQLInvalidAuthorizationSpecException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      ConstantTransformer<Object, InputStream> constantTransformer0 = new ConstantTransformer<Object, InputStream>(sequenceInputStream0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(constantTransformer0, (Predicate<? super Object>) null);
      predicateArray0[0] = (Predicate<Object>) transformedPredicate0;
      Transformer<Object, SQLInvalidAuthorizationSpecException>[] transformerArray0 = (Transformer<Object, SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Transformer.class, 1);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 0);
      InstantiateFactory<SQLInvalidAuthorizationSpecException> instantiateFactory0 = new InstantiateFactory<SQLInvalidAuthorizationSpecException>(class0, classArray0, predicateArray0);
      FactoryTransformer<Object, SQLInvalidAuthorizationSpecException> factoryTransformer0 = new FactoryTransformer<Object, SQLInvalidAuthorizationSpecException>(instantiateFactory0);
      transformerArray0[0] = (Transformer<Object, SQLInvalidAuthorizationSpecException>) factoryTransformer0;
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = SwitchTransformer.switchTransformer((Predicate<? super Object>[]) predicateArray0, (Transformer<? super Object, ? extends SQLInvalidAuthorizationSpecException>[]) transformerArray0, (Transformer<? super Object, ? extends SQLInvalidAuthorizationSpecException>) transformerArray0[0]);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException1, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0, 1L, (long) 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformedPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) null);
      IteratorUtils.emptyListIterator();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[9];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Iterator setValue() can only be called after next() and before remove()", sQLFeatureNotSupportedException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("ovSQvor%-3_\"GEJ ", "mbVBZ-si]-(_XA&", 538, sQLFeatureNotSupportedException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("ovSQvor%-3_\"GEJ ", "%Q%i?JwcPvu5;2Q", 538, sQLNonTransientException0);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("%Q%i?JwcPvu5;2Q", sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException("Iterator setValue() can only be called after next() and before remove()", "b*&E.");
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException7 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[7] = sQLIntegrityConstraintViolationException7;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException8 = new SQLIntegrityConstraintViolationException(")", "", 1077, sQLIntegrityConstraintViolationException4);
      sQLIntegrityConstraintViolationExceptionArray0[8] = sQLIntegrityConstraintViolationException8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, 1, (-1384));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.singletonIterator(sQLWarning0);
      IteratorUtils.get((Iterator<SQLWarning>) resettableIterator0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((IIOMetadataNode[]) null, 0, 93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("");
      IteratorUtils.toString((Iterator<ArrayList<ServiceLoader>>) orderedIterator0, (Transformer<? super ArrayList<ServiceLoader>, String>) transformer0, "", "", "");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getLastChild();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning(" KI|VV&N<s*,]/z H", " KI|VV&N<s*,]/z H");
      SingletonListIterator<SQLWarning> singletonListIterator0 = new SingletonListIterator<SQLWarning>(sQLWarning0);
      IteratorUtils.get((Iterator<SQLWarning>) singletonListIterator0, 0);
      IteratorUtils.toString((Iterator<Vector<Hashtable>>) singletonListIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Vector<DataTruncation>>) null, (Closure<? super Vector<DataTruncation>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableIterator0, (Class<SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Array class must not be null", (Throwable) null);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonIterator0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      Transformer<Object, Properties> transformer0 = InvokerTransformer.invokerTransformer("Array class must not be null");
      Iterator<Properties> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends Properties>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Array class must not be null' on 'class java.sql.SQLInvalidAuthorizationSpecException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer(", ", ", ");
      IteratorUtils.getIterator(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("*>n`3gSU", "*>n`3gSU");
      SingletonListIterator<SQLWarning> singletonListIterator0 = new SingletonListIterator<SQLWarning>(sQLWarning0);
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>(priorityQueue0);
      ResettableIterator<Vector<DataTruncation>> resettableIterator0 = IteratorUtils.singletonIterator(vector0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Vector<DataTruncation>>) resettableIterator0, (Closure<? super Vector<DataTruncation>>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      SQLWarning sQLWarning0 = new SQLWarning("X+C/TR3q R]A", (String) null);
      MapIterator<Properties, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toString((Iterator<Properties>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      HashMap<Predicate<SQLNonTransientException>, Closure<SQLNonTransientException>> hashMap0 = new HashMap<Predicate<SQLNonTransientException>, Closure<SQLNonTransientException>>();
      Closure<SQLNonTransientException> closure0 = SwitchClosure.switchClosure((Map<Predicate<SQLNonTransientException>, Closure<SQLNonTransientException>>) hashMap0);
      Iterator<SQLNonTransientException> iterator0 = null;
      IteratorUtils.apply((Iterator<SQLNonTransientException>) null, (Closure<? super SQLNonTransientException>) closure0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ArrayDeque<Properties> arrayDeque0 = new ArrayDeque<Properties>((-944));
      Properties properties0 = new Properties();
      arrayDeque0.add(properties0);
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Properties>) arrayDeque0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<Properties>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<HashSet<Locale.FilteringMode>>) null, (Predicate<? super HashSet<Locale.FilteringMode>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      SQLWarning[] sQLWarningArray0 = new SQLWarning[2];
      SQLWarning sQLWarning0 = new SQLWarning("X+C/TR3q R]A", (String) null);
      sQLWarningArray0[1] = sQLWarning0;
      ObjectArrayListIterator<SQLWarning> objectArrayListIterator0 = new ObjectArrayListIterator<SQLWarning>(sQLWarningArray0);
      PriorityQueue<SQLNonTransientException> priorityQueue0 = new PriorityQueue<SQLNonTransientException>();
      SingletonIterator<PriorityQueue<SQLNonTransientException>> singletonIterator0 = new SingletonIterator<PriorityQueue<SQLNonTransientException>>(priorityQueue0, true);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAll((Iterator<PriorityQueue<SQLNonTransientException>>) singletonIterator0, (Predicate<? super PriorityQueue<SQLNonTransientException>>) predicate1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) stack0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLDataException>) resettableIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) resettableIterator0);
      SQLDataException sQLDataException0 = new SQLDataException("Pg(?Dxqi*D3", "Pg(?Dxqi*D3");
      stack0.add(sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientException>) iterator0, 1711L, 1711L);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      ExceptionTransformer.exceptionTransformer();
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 8);
      iteratorArray0[0] = iterator0;
      iteratorArray0[1] = iterator0;
      iteratorArray0[2] = (Iterator<Integer>) orderedIterator0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      iteratorArray0[3] = (Iterator<Integer>) orderedIterator0;
      iteratorArray0[4] = (Iterator<Integer>) orderedIterator0;
      iteratorArray0[5] = iterator0;
      iteratorArray0[6] = (Iterator<Integer>) orderedIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Integer>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      DataTruncation dataTruncation0 = new DataTruncation(1, false, false, 1, 1);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLInvalidAuthorizationSpecException0, comparator0);
      OrPredicate<DataTruncation> orPredicate0 = new OrPredicate<DataTruncation>(predicate0, predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<DataTruncation>) resettableIterator0, (Predicate<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("InstantiateTransformer: InstantiationException", hashtable0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("InstantiateTransformer: InstantiationException", hashtable0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(hashtable0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("InstantiateTransformer: InstantiationException", hashtable0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException(hashtable0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("InstantiateTransformer: InstantiationException", hashtable0);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("InstantiateTransformer: InstantiationException", hashtable0, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException((String) null, (String) null, 2756, hashtable0);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException7;
      IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 8);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) comparator0, (Iterator<? extends SQLRecoverableException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends StringTokenizer>) null, (Predicate<? super StringTokenizer>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Properties>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MapIterator<HashSet<Locale.FilteringMode>, Object> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<HashSet<Locale.FilteringMode>, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<HashSet<Locale.FilteringMode>, Object>(mapIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAll((Iterator<PriorityQueue<SQLNonTransientException>>) null, (Predicate<? super PriorityQueue<SQLNonTransientException>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[5];
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLSyntaxErrorException0;
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLSyntaxErrorException0;
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(979, (Closure<? super Object>) null);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(instanceofPredicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(instanceofPredicate0, instanceofPredicate0);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(nullIsFalsePredicate0, forClosure0, false);
      ExceptionClosure.exceptionClosure();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Transformer<Object, SQLTimeoutException> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      ForClosure.forClosure(969, (Closure<? super Object>) forClosure0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(uniquePredicate0, (Closure<? super Object>) null, closure0);
      WhileClosure.whileClosure((Predicate<? super Object>) instanceofPredicate0, (Closure<? super Object>) ifClosure0, true);
      ForClosure.forClosure(1359, (Closure<? super Object>) transformerClosure0);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>((Closure<? super Object>[]) null);
      IteratorUtils.apply((Iterator<SQLNonTransientException>) objectArrayListIterator0, (Closure<? super SQLNonTransientException>) closure0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      SQLWarning sQLWarning0 = new SQLWarning("X+C/TR3q R]A", (String) null);
      SingletonListIterator<SQLWarning> singletonListIterator0 = new SingletonListIterator<SQLWarning>(sQLWarning0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-488), (-488));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLException sQLException0 = new SQLException("\"P59P1<:*Q(qA}0");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("^C/x", "P?E=", 10, sQLException0);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) singletonIterator0, 5);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      OrderedMapIterator<TreeSet<Predicate<Object>>, StringTokenizer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      IteratorUtils.toString((Iterator<TreeSet<Predicate<Object>>>) orderedMapIterator0, (Transformer<? super TreeSet<Predicate<Object>>, String>) factoryTransformer0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[5];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.AbstractLinkedMap$KeySetIterator", "org.apache.commons.collections4.map.AbstractLinkedMap$KeySetIterator");
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "[]", sQLNonTransientConnectionException0);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("[]");
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException();
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLIntegrityConstraintViolationException1;
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(979, (Closure<? super Object>) null);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(instanceofPredicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(instanceofPredicate0, nullIsFalsePredicate0);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(andPredicate0, (Closure<? super Object>) null, false);
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) objectArrayListIterator0, class1);
      IteratorUtils.toArray((Iterator<?>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.skippingIterator((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PriorityQueue<SQLNonTransientException> priorityQueue0 = new PriorityQueue<SQLNonTransientException>();
      SingletonListIterator<PriorityQueue<SQLNonTransientException>> singletonListIterator0 = new SingletonListIterator<PriorityQueue<SQLNonTransientException>>(priorityQueue0);
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Properties, SQLException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.IterableUtils$5$1", "org.apache.commons.collections4.IterableUtils$5$1");
      arrayList0.add(sQLIntegrityConstraintViolationException0);
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) arrayList0);
      arrayList0.spliterator();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      Stack<SQLWarning> stack0 = new Stack<SQLWarning>();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator1, 1528L, 1528L);
      Comparator<SQLFeatureNotSupportedException> comparator0 = (Comparator<SQLFeatureNotSupportedException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) listIterator0;
      iteratorArray0[1] = (Iterator<SQLFeatureNotSupportedException>) listIterator0;
      IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("@/-g<,]em7~n");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("@/-g<,]em7~n", sQLTransactionRollbackException0);
      DataTruncation dataTruncation0 = new DataTruncation(20, false, true, 20, 100, sQLRecoverableException0);
      dataTruncation0.getIndex();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) iteratorArray0[1], class0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) linkedList0);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      arrayList0.spliterator();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableListIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      OrderedMapIterator<HashSet<Locale.FilteringMode>, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<HashSet<Locale.FilteringMode>, Object> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<HashSet<Locale.FilteringMode>, ?>) orderedMapIterator0);
      AbstractMapIteratorDecorator<HashSet<Locale.FilteringMode>, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<HashSet<Locale.FilteringMode>, Object>(orderedMapIterator1);
      AbstractMapIteratorDecorator<HashSet<Locale.FilteringMode>, Object> abstractMapIteratorDecorator1 = new AbstractMapIteratorDecorator<HashSet<Locale.FilteringMode>, Object>(abstractMapIteratorDecorator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(uniquePredicate0);
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[1] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[2] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[3] = (Predicate<Object>) nullIsExceptionPredicate0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Closure<Object> closure0 = ForClosure.forClosure(970, (Closure<? super Object>) null);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>((Predicate<? super Object>) null);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(nullIsFalsePredicate0);
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) notPredicate0, (Closure<? super Object>) closure0, false);
      Closure<Object> closure2 = ForClosure.forClosure(8, (Closure<? super Object>) closure0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 4);
      closureArray0[0] = closure2;
      closureArray0[1] = closure1;
      closureArray0[2] = closure1;
      closureArray0[3] = closure0;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) stack0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLDataException>) resettableIterator0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) iterator0);
      BoundedIterator<SQLNonTransientException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientException>) listIterator0, (long) 970, 0L);
      IteratorUtils.apply((Iterator<SQLNonTransientException>) boundedIterator0, (Closure<? super SQLNonTransientException>) closure1);
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MapIterator<HashSet<Locale.FilteringMode>, Object> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<HashSet<Locale.FilteringMode>, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<HashSet<Locale.FilteringMode>, Object>(mapIterator0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableListIterator0, class0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      HashSet<SQLNonTransientConnectionException> hashSet0 = new HashSet<SQLNonTransientConnectionException>();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLTimeoutException, SQLDataException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, SQLDataException>(orderedMapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLException>) orderedMapIterator0);
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientException>) linkedList0);
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientException>) resettableListIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      linkedList0.push(sQLSyntaxErrorException0);
      String string0 = "mc\\*";
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "mc*");
      // Undeclared exception!
      try { 
        IteratorUtils.contains((Iterator<SQLNonTransientException>) listIterator0, (Object) stringTokenizer0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) arrayList0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(", ", "", 75);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 3, sQLTransactionRollbackException0);
      arrayList0.add(sQLIntegrityConstraintViolationException0);
      arrayList0.spliterator();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableListIterator0, class0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>();
      LoopingListIterator<SQLRecoverableException> loopingListIterator0 = new LoopingListIterator<SQLRecoverableException>(vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<?>) loopingListIterator0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("5vN},xKmA_G)G");
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 3;
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>((Transformer<? super Object, Boolean>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) transformerPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("5vN},xKmA_G)G");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("5vN},xKmA_G)G", "6O3;qx");
      IteratorUtils.nodeListIterator(nodeList0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-2061);
      intArray0[1] = (-293);
      intArray0[2] = (-1);
      intArray0[3] = 1904;
      intArray0[4] = (-1);
      intArray0[5] = (-931);
      intArray0[6] = 61;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("5vN},xKmA_G)G", "org.apache.commons.collections4.iterators.ObjectGraphIterator", (-1916));
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("0J@|,Q789s", "0J@|,Q789s", intArray0, sQLSyntaxErrorException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("5vN},xKmA_G)G", defaultEquator0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) nonePredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) allPredicate0;
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicateArray0[0], nonePredicate0);
      predicateArray0[3] = (Predicate<Object>) orPredicate0;
      Transformer<Object, BatchUpdateException>[] transformerArray0 = (Transformer<Object, BatchUpdateException>[]) Array.newInstance(Transformer.class, 0);
      ConstantTransformer<Object, BatchUpdateException> constantTransformer0 = new ConstantTransformer<Object, BatchUpdateException>(batchUpdateException0);
      SwitchTransformer<Object, BatchUpdateException> switchTransformer0 = new SwitchTransformer<Object, BatchUpdateException>(predicateArray0, transformerArray0, constantTransformer0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) switchTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends BatchUpdateException>) iterator0, 40);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) arrayList0);
      assertNotNull(resettableListIterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      Spliterator<SQLIntegrityConstraintViolationException> spliterator0 = arrayList0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0);
      assertNotNull(iterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      Iterable<SQLIntegrityConstraintViolationException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0);
      assertNotNull(iterable0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      PriorityQueue<SQLNonTransientException> priorityQueue0 = new PriorityQueue<SQLNonTransientException>();
      priorityQueue0.addAll(arrayList0);
      ListIterator<PriorityQueue<SQLNonTransientException>> listIterator0 = IteratorUtils.singletonListIterator(priorityQueue0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAll((Iterator<PriorityQueue<SQLNonTransientException>>) listIterator0, (Predicate<? super PriorityQueue<SQLNonTransientException>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[6];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      stringArray0[0] = "0MU28%7qWB";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0MU28%7qWB");
      Iterator<?> iterator0 = IteratorUtils.getIterator("0MU28%7qWB");
      IteratorUtils.toArray(iterator0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLFeatureNotSupportedException>) listIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator0, 1530L, 1530L);
      IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Boolean>) null, (long) 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      EmptyListIterator.emptyListIterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLFeatureNotSupportedException>) resettableIterator0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableIterator0, class0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      HashSet<SQLNonTransientConnectionException> hashSet0 = new HashSet<SQLNonTransientConnectionException>();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0);
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>((SQLRecoverableException) null);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) comparator0, (Iterator<? extends SQLRecoverableException>) singletonListIterator0, (Iterator<? extends SQLRecoverableException>) singletonListIterator0);
      Iterator<SQLRecoverableException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "");
      SQLDataException sQLDataException0 = new SQLDataException(sQLNonTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", sQLDataException0);
      arrayList0.add(sQLIntegrityConstraintViolationException0);
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) arrayList0);
      arrayList0.spliterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0);
      HashSet<SQLNonTransientConnectionException> hashSet0 = new HashSet<SQLNonTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) hashSet0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      Stack<SQLWarning> stack0 = new Stack<SQLWarning>();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLFeatureNotSupportedException>) resettableIterator1);
      IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator1, 1528L, 1528L);
      Comparator<SQLFeatureNotSupportedException> comparator0 = (Comparator<SQLFeatureNotSupportedException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray0[0] = iterator0;
      iteratorArray0[1] = (Iterator<SQLFeatureNotSupportedException>) listIterator0;
      IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[1];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("@/-g<,]em7~n");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("@/-g<,]em7~n", sQLTransactionRollbackException0);
      DataTruncation dataTruncation0 = new DataTruncation(20, false, true, 1891, 100, sQLRecoverableException0);
      dataTruncation0.getIndex();
      sQLWarningArray0[0] = (SQLWarning) dataTruncation0;
      ObjectArrayListIterator<SQLWarning> objectArrayListIterator0 = new ObjectArrayListIterator<SQLWarning>(sQLWarningArray0);
      IteratorUtils.get((Iterator<SQLWarning>) objectArrayListIterator0, 0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[3];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("D~fHZ", "D~fHZ", hashMap0, dataTruncation0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("D~fHZ", "Transformer must not be null", hashMap0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      ObjectArrayIterator<SQLClientInfoException> objectArrayIterator0 = new ObjectArrayIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) objectArrayIterator0, (Predicate<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MapIterator<HashSet<Locale.FilteringMode>, Object> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<HashSet<Locale.FilteringMode>, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<HashSet<Locale.FilteringMode>, Object>(mapIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Integer integer0 = new Integer((-2290));
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) integer0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      ResettableIterator<HashSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.singletonIterator(hashSet0);
      IteratorUtils.find((Iterator<HashSet<Locale.FilteringMode>>) resettableIterator0, (Predicate<? super HashSet<Locale.FilteringMode>>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      SingletonListIterator<Stack<SQLNonTransientConnectionException>> singletonListIterator0 = new SingletonListIterator<Stack<SQLNonTransientConnectionException>>(stack0);
      IteratorUtils.unmodifiableListIterator((ListIterator<Stack<SQLNonTransientConnectionException>>) singletonListIterator0);
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      HashSet<Locale.FilteringMode> hashSet1 = new HashSet<Locale.FilteringMode>();
      HashSet<Locale.FilteringMode> hashSet2 = new HashSet<Locale.FilteringMode>();
      LinkedHashSet<Locale.FilteringMode> linkedHashSet1 = new LinkedHashSet<Locale.FilteringMode>();
      HashSet<Locale.FilteringMode>[] hashSetArray0 = (HashSet<Locale.FilteringMode>[]) Array.newInstance(HashSet.class, 2);
      hashSetArray0[0] = (HashSet<Locale.FilteringMode>) linkedHashSet0;
      hashSetArray0[1] = hashSet1;
      ObjectArrayIterator<HashSet<Locale.FilteringMode>> objectArrayIterator0 = new ObjectArrayIterator<HashSet<Locale.FilteringMode>>(hashSetArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) hashSet1, comparator0);
      IteratorUtils.find((Iterator<HashSet<Locale.FilteringMode>>) objectArrayIterator0, (Predicate<? super HashSet<Locale.FilteringMode>>) predicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("K11Zh' %e (&K", (Throwable) null);
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator1 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) singletonListIterator1);
      IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>) singletonListIterator1, (Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Enumeration must not be null");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("5vN},xKmA_G)G");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("5vN},xKmA_G)G", "6O3;qx");
      IteratorUtils.nodeListIterator(nodeList0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLInvalidAuthorizationSpecException>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<Properties>) orderedIterator0);
      Integer[] integerArray0 = new Integer[3];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(428);
      integerArray0[2] = integer2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, 1, (-581));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      HashSet<Locale.FilteringMode>[] hashSetArray0 = (HashSet<Locale.FilteringMode>[]) Array.newInstance(HashSet.class, 7);
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      hashSetArray0[0] = hashSet0;
      HashSet<Locale.FilteringMode> hashSet1 = new HashSet<Locale.FilteringMode>();
      hashSetArray0[1] = hashSet1;
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      hashSetArray0[2] = (HashSet<Locale.FilteringMode>) linkedHashSet0;
      HashSet<Locale.FilteringMode> hashSet2 = new HashSet<Locale.FilteringMode>();
      hashSetArray0[3] = hashSet2;
      HashSet<Locale.FilteringMode> hashSet3 = new HashSet<Locale.FilteringMode>();
      hashSetArray0[4] = hashSet3;
      HashSet<Locale.FilteringMode> hashSet4 = new HashSet<Locale.FilteringMode>();
      hashSetArray0[5] = hashSet4;
      LinkedHashSet<Locale.FilteringMode> linkedHashSet1 = new LinkedHashSet<Locale.FilteringMode>();
      hashSetArray0[6] = (HashSet<Locale.FilteringMode>) linkedHashSet1;
      ObjectArrayIterator<HashSet<Locale.FilteringMode>> objectArrayIterator0 = new ObjectArrayIterator<HashSet<Locale.FilteringMode>>(hashSetArray0);
      IteratorUtils.find((Iterator<HashSet<Locale.FilteringMode>>) objectArrayIterator0, (Predicate<? super HashSet<Locale.FilteringMode>>) instanceofPredicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("K11Zh' %e (&K", (Throwable) null);
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>) iterator0, (Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "5vN},xKmA\\_G)G";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("5vN},xKmA_G)G");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("5vN},xKmA_G)G");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLTransactionRollbackException0);
      int int0 = 2759;
      DataTruncation dataTruncation0 = new DataTruncation(2759, false, false, 100, 100, sQLRecoverableException0);
      dataTruncation0.getIndex();
      sQLRecoverableException0.printStackTrace();
      dataTruncation0.getNextWarning();
      SQLWarning[] sQLWarningArray0 = new SQLWarning[5];
      sQLWarningArray0[0] = (SQLWarning) dataTruncation0;
      sQLWarningArray0[1] = (SQLWarning) dataTruncation0;
      SQLDataException sQLDataException0 = new SQLDataException("5vN},xKmA_G)G");
      SQLWarning sQLWarning0 = new SQLWarning("5vN},xKmA_G)G", "N@j/w6U", 100, sQLDataException0);
      sQLWarningArray0[2] = sQLWarning0;
      sQLWarningArray0[3] = (SQLWarning) dataTruncation0;
      sQLWarningArray0[4] = null;
      ObjectArrayListIterator<SQLWarning> objectArrayListIterator0 = new ObjectArrayListIterator<SQLWarning>(sQLWarningArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLWarning>) objectArrayListIterator0, 2759);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2754
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "0MU28%7qWB";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0MU28%7qWB");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("2</JZ", "", (Map<String, ClientInfoStatus>) null);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException0;
      ObjectArrayIterator<SQLClientInfoException> objectArrayIterator0 = new ObjectArrayIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) objectArrayIterator0, (Predicate<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) arrayList0);
      arrayList0.spliterator();
      SQLWarning[] sQLWarningArray0 = new SQLWarning[4];
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "Array class must not be null", sQLWarningArray0[0]);
      sQLWarningArray0[1] = sQLWarning0;
      SQLWarning sQLWarning1 = new SQLWarning("Array class must not be null", sQLWarning0);
      sQLWarningArray0[2] = sQLWarning0;
      ObjectArrayListIterator<SQLWarning> objectArrayListIterator0 = new ObjectArrayListIterator<SQLWarning>(sQLWarningArray0);
      IteratorUtils.get((Iterator<SQLWarning>) objectArrayListIterator0, 3);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      ObjectArrayIterator<SQLClientInfoException> objectArrayIterator0 = new ObjectArrayIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      Stack<SQLWarning> stack0 = new Stack<SQLWarning>();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLFeatureNotSupportedException>) resettableIterator1);
      IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator1, 1528L, 1528L);
      Comparator<SQLFeatureNotSupportedException> comparator0 = (Comparator<SQLFeatureNotSupportedException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray0[0] = iterator0;
      iteratorArray0[1] = (Iterator<SQLFeatureNotSupportedException>) listIterator0;
      IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[1];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("@/-g<,]em7~n");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("@/-g<,]em7~n", sQLTransactionRollbackException0);
      DataTruncation dataTruncation0 = new DataTruncation(20, false, true, 1891, 100, sQLRecoverableException0);
      dataTruncation0.getIndex();
      dataTruncation0.getNextWarning();
      sQLWarningArray0[0] = null;
      ObjectArrayListIterator<SQLWarning> objectArrayListIterator0 = new ObjectArrayListIterator<SQLWarning>(sQLWarningArray0);
      IteratorUtils.get((Iterator<SQLWarning>) objectArrayListIterator0, 0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[3];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("D~fHZ", "D~fHZ", hashMap0, dataTruncation0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("D~fHZ", "Transformer must not be null", hashMap0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      ObjectArrayIterator<SQLClientInfoException> objectArrayIterator0 = new ObjectArrayIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) objectArrayIterator0, (Predicate<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MapIterator<StringTokenizer, Predicate<Object>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) mapIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0, (Collection<? super StringTokenizer>) linkedHashSet0);
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) linkedList0);
      int int0 = 282;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("5,9`tlx*!,HE\\!$F.9", "5,9`tlx*!,HE\\!$F.9", 282);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      arrayList0.add(sQLIntegrityConstraintViolationException0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0MU28%7qWB");
      IteratorUtils.getIterator((Object) null);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("5vN},xKmA_G)G");
      iIOMetadataNode0.getElementsByTagNameNS("5vN},xKmA_G)G", "6O3;qx");
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<Integer> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Integer>) orderedIterator0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.size(listIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("6O3;qx", "transformer may not be null", 0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      IteratorUtils.asIterable((Iterator<? extends SQLTransientException>) singletonIterator0);
      IteratorUtils.isEmpty(iterator0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ResettableIterator<HashSet<Locale.FilteringMode>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.find((Iterator<HashSet<Locale.FilteringMode>>) resettableIterator0, (Predicate<? super HashSet<Locale.FilteringMode>>) instanceofPredicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("K11Zh' %e (&K", (Throwable) null);
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) singletonListIterator0);
      Iterator<SQLNonTransientConnectionException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>) iterator0, (Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) iterator1);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      IteratorUtils.singletonIterator(treeSet0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      OrderedMapIterator<TreeSet<Predicate<Object>>, StringTokenizer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      IteratorUtils.toString((Iterator<TreeSet<Predicate<Object>>>) orderedMapIterator0, (Transformer<? super TreeSet<Predicate<Object>>, String>) factoryTransformer0);
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) vector0);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      arrayList0.spliterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 5616);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 0, (Throwable) null);
      dataTruncation0.getSuppressed();
      dataTruncation0.printStackTrace();
      dataTruncation0.getDataSize();
      IteratorUtils.singletonListIterator(dataTruncation0);
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator");
      BoundedIterator<String> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends String>) listIterator0, 0L, (long) 0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator");
      dataTruncation0.getIndex();
      IteratorUtils.getIterator((Object) null);
      IteratorUtils.isEmpty(boundedIterator0);
      EmptyListIterator.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getOwnerDocument();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Locale.FilteringMode[]) null, 3013);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) iterator0);
      Stack<SQLWarning> stack0 = new Stack<SQLWarning>();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLFeatureNotSupportedException> iterator1 = IteratorUtils.unmodifiableIterator((Iterator<SQLFeatureNotSupportedException>) resettableIterator1);
      IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator1, 1528L, 1528L);
      Comparator<SQLFeatureNotSupportedException> comparator0 = (Comparator<SQLFeatureNotSupportedException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray0[0] = iterator1;
      iteratorArray0[1] = (Iterator<SQLFeatureNotSupportedException>) listIterator0;
      IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) iteratorArray0[1], 3);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTimeoutException>[] iteratorArray1 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 1);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[2];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.iterators.AbstractEmptyMapIterator", "!~(s.4=8Hy<Q7Vfw");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(">|4", "g_KXE=L", sQLFeatureNotSupportedException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0);
      Enumeration<SQLTimeoutException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      Iterator<SQLTimeoutException> iterator2 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration1);
      iteratorArray1[0] = iterator2;
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>[]) iteratorArray1);
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientException>) comparator1, (Iterator<? extends SQLTransientException>) zippingIterator0, (Iterator<? extends SQLTransientException>) iterator2);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MapIterator<StringTokenizer, Predicate<Object>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) mapIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0, (Collection<? super StringTokenizer>) linkedHashSet0);
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) linkedList0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableListIterator0, class0);
      OrderedMapIterator<String, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Integer integer0 = new Integer(40);
      Integer integer1 = new Integer(1200);
      IteratorUtils.singletonIterator(integer0);
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.unmodifiableIterator((Iterator<Integer>) orderedIterator0);
      EmptyListIterator.emptyListIterator();
      IteratorUtils.size(orderedMapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      IteratorUtils.getIterator(iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MapIterator<StringTokenizer, Predicate<Object>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) mapIterator0);
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 4);
      HashMap<SQLNonTransientConnectionException, Integer> hashMap0 = new HashMap<SQLNonTransientConnectionException, Integer>();
      EntrySetMapIterator<SQLNonTransientConnectionException, Integer> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, Integer>(hashMap0);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) entrySetMapIterator0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ntO(k)Z", "org.apache.commons.collections4.map.AbstractLinkedMap", (-432));
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) singletonIterator0;
      Comparator<SQLNonTransientConnectionException> comparator0 = (Comparator<SQLNonTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>) iteratorArray0[0], (Iterator<? extends SQLNonTransientConnectionException>) iteratorArray0[0]);
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) iteratorArray0[1], (Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      iteratorArray0[2] = (Iterator<SQLNonTransientConnectionException>) zippingIterator0;
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0, (-432), (-432));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[4];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("WX;)]xlzA", "aB53b?}5wRV", 0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("Transformer must not be null");
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException2;
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransientConnectionException0);
      Object object0 = new Object();
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) priorityQueue0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, (Predicate<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[4];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("WX;)]xlzA", "aB53b?}5wRV", 0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("Transformer must not be null");
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException2;
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransientConnectionException0);
      Object object0 = new Object();
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) priorityQueue0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, (Predicate<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) arrayList0);
      arrayList0.spliterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("delimiter may not be null", "delimiter may not be null", (-137));
      arrayList0.add(sQLIntegrityConstraintViolationException0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0);
      IteratorUtils.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      IteratorUtils.arrayIterator(dataTruncationArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The predicate and closure arrays must be the same size");
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Boolean>) null, 1177);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("5vN},xKmA_G)G");
      iIOMetadataNode0.setAttribute("#Of<Te, >A*3=nVc-,[", "5vN},xKmA_G)G");
      iIOMetadataNode0.getElementsByTagNameNS("5vN},xKmA_G)G", "6O3;qx");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "5vN},xKmA_G)G");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", (String) null, 1306, sQLTransactionRollbackException0);
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0, false);
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) singletonIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) singletonIterator0);
      ConstantTransformer.nullTransformer();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(uniquePredicate0, uniquePredicate0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      IteratorUtils.singletonIterator(treeSet0);
      ResettableListIterator<PriorityQueue<Locale.FilteringMode>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.skippingIterator((Iterator<PriorityQueue<Locale.FilteringMode>>) resettableListIterator0, (long) 1306);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("t/!Ou4_G");
      SingletonIterator<SQLNonTransientException> singletonIterator0 = new SingletonIterator<SQLNonTransientException>(sQLNonTransientException0, true);
      IteratorUtils.skippingIterator((Iterator<SQLNonTransientException>) singletonIterator0, 0L);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 0, (Throwable) null);
      dataTruncation0.getSuppressed();
      dataTruncation0.getDataSize();
      IteratorUtils.singletonListIterator(dataTruncation0);
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator");
      dataTruncation0.getLocalizedMessage();
      BoundedIterator<String> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends String>) listIterator0, 0L, (long) 0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator");
      dataTruncation0.getIndex();
      IteratorUtils.getIterator((Object) null);
      IteratorUtils.isEmpty(boundedIterator0);
      EmptyListIterator.emptyListIterator();
      IteratorUtils.size(listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) linkedList0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      int int0 = (-1215);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1215));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) arrayList0);
      arrayList0.spliterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLIntegrityConstraintViolationException0.forEach(consumer0);
      arrayList0.add(sQLIntegrityConstraintViolationException0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      Comparator<SQLFeatureNotSupportedException> comparator0 = (Comparator<SQLFeatureNotSupportedException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 4);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) resettableIterator0;
      EmptyListIterator.emptyListIterator();
      ResettableListIterator<Stack<SQLNonTransientConnectionException>> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      String string0 = "$`h`!taE=zif*8+";
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Stack<SQLNonTransientConnectionException>>) resettableListIterator1, (Transformer<? super Stack<SQLNonTransientConnectionException>, String>) null, "$`h`!taE=zif*8+", "' threw an exception", "org.apache.commons.collections4.iterators.ArrayIterator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableIterator0, class0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator((SQLDataException) null, (Transformer<? super SQLDataException, ? extends SQLDataException>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLDataException, String>) null, "", "", "Entry does not exist: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DataTruncation dataTruncation0 = new DataTruncation(128, true, true, 12, 20);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(20).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) fileSystemHandling0, comparator0);
      IteratorUtils.matchesAny((Iterator<DataTruncation>) resettableIterator0, (Predicate<? super DataTruncation>) predicate0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Integer integer0 = new Integer(40);
      Integer integer1 = new Integer((-1124));
      Integer integer2 = new Integer((-1124));
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer2);
      BoundedIterator<Integer> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Integer>) resettableIterator0, 0L);
      IteratorUtils.unmodifiableIterator((Iterator<Integer>) boundedIterator0);
      EmptyListIterator.emptyListIterator();
      IteratorUtils.size(listIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLIntegrityConstraintViolationException, LinkedHashSet<Boolean>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      Vector<SQLException> vector0 = new Vector<SQLException>();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0, (Collection<? super SQLIntegrityConstraintViolationException>) vector0);
      IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Hashtable<SQLRecoverableException, SQLRecoverableException> hashtable0 = new Hashtable<SQLRecoverableException, SQLRecoverableException>();
      EntrySetMapIterator<SQLRecoverableException, SQLRecoverableException> entrySetMapIterator0 = new EntrySetMapIterator<SQLRecoverableException, SQLRecoverableException>(hashtable0);
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) entrySetMapIterator0, (Iterator<? extends SQLRecoverableException>) entrySetMapIterator0, (Iterator<? extends SQLRecoverableException>) entrySetMapIterator0);
      Enumeration<SQLRecoverableException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) zippingIterator0);
      Stack<Object> stack0 = new Stack<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) enumeration0, (Collection<? super SQLRecoverableException>) stack0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("add() not supported for empty Iterator", hashMap0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException(hashMap0, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("add() not supported for empty Iterator", "EQUAL", hashMap0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 5, 5);
      BoundedIterator<SQLClientInfoException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (long) 5);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLClientInfoException>) boundedIterator0, 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 5
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 3);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[4];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(":i-", ":i-");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("WX;)]xlzA", "aB53b?}5wR\"V", 0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException1;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0, 0);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLFeatureNotSupportedException1);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) objectArrayListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) equalPredicate0);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) listIterator0;
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException2);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      DefaultEquator<ClientInfoStatus> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate(clientInfoStatus0, (Equator<ClientInfoStatus>) defaultEquator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>) orderedIterator0, (Iterator<? extends SQLTransactionRollbackException>) orderedIterator0);
      iteratorArray0[1] = (Iterator<SQLFeatureNotSupportedException>) singletonIterator0;
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      IteratorUtils.contains((Iterator<String>) null, (Object) null);
      IteratorUtils.size((Iterator<?>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 405, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(":i-", ":i-");
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) null, (Collection<? super StringTokenizer>) priorityQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 6);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(159, true, false, 128, 4244);
      DataTruncation dataTruncation1 = new DataTruncation(12, false, true, 4244, 128);
      IteratorUtils.singletonIterator(dataTruncation1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) dataTruncation0, comparator0);
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.matchesAny((Iterator<DataTruncation>) orderedIterator0, (Predicate<? super DataTruncation>) predicate0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      SingletonListIterator<Stack<SQLNonTransientConnectionException>> singletonListIterator0 = new SingletonListIterator<Stack<SQLNonTransientConnectionException>>(stack0);
      IteratorUtils.unmodifiableListIterator((ListIterator<Stack<SQLNonTransientConnectionException>>) singletonListIterator0);
      Class<String> class0 = String.class;
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 0);
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0, classArray0, classArray0);
      FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      int int0 = 10;
      SQLWarning[] sQLWarningArray0 = new SQLWarning[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLWarningArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) iterator0);
      Stack<SQLWarning> stack0 = new Stack<SQLWarning>();
      LoopingListIterator<SQLWarning> loopingListIterator0 = new LoopingListIterator<SQLWarning>(stack0);
      Stack<SQLNonTransientConnectionException>[] stackArray0 = (Stack<SQLNonTransientConnectionException>[]) Array.newInstance(Stack.class, 7);
      Stack<SQLNonTransientConnectionException> stack1 = new Stack<SQLNonTransientConnectionException>();
      stackArray0[0] = stack1;
      Stack<SQLNonTransientConnectionException> stack2 = new Stack<SQLNonTransientConnectionException>();
      stackArray0[1] = stack2;
      Stack<SQLNonTransientConnectionException> stack3 = new Stack<SQLNonTransientConnectionException>();
      stackArray0[2] = stack3;
      Stack<SQLNonTransientConnectionException> stack4 = new Stack<SQLNonTransientConnectionException>();
      stackArray0[3] = stack4;
      Stack<SQLNonTransientConnectionException> stack5 = new Stack<SQLNonTransientConnectionException>();
      stackArray0[4] = stack5;
      Stack<SQLNonTransientConnectionException> stack6 = new Stack<SQLNonTransientConnectionException>();
      stackArray0[5] = stack6;
      Stack<SQLNonTransientConnectionException> stack7 = new Stack<SQLNonTransientConnectionException>();
      stackArray0[6] = stack7;
      ResettableListIterator<Stack<SQLNonTransientConnectionException>> resettableListIterator0 = IteratorUtils.arrayListIterator(stackArray0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = "1R5ILV#s\"iK5";
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Stack<SQLNonTransientConnectionException>>) resettableListIterator0, (Transformer<? super Stack<SQLNonTransientConnectionException>, String>) transformer0, "org.apache.commons.collections4.iterators.ArrayIterator", "1R5ILV#s\"iK5", "org.apache.commons.collections4.iterators.ArrayIterator");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      SingletonListIterator<Stack<SQLNonTransientConnectionException>> singletonListIterator0 = new SingletonListIterator<Stack<SQLNonTransientConnectionException>>(stack0);
      singletonListIterator0.next();
      ListIterator<Stack<SQLNonTransientConnectionException>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Stack<SQLNonTransientConnectionException>>) singletonListIterator0);
      Class<String> class0 = String.class;
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 0);
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0, classArray0, classArray0);
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      IteratorUtils.toString((Iterator<Stack<SQLNonTransientConnectionException>>) listIterator0, (Transformer<? super Stack<SQLNonTransientConnectionException>, String>) transformer0, "' threw an exception", "' threw an exception", "org.apache.commons.collections4.iterators.ArrayIterator");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("' threw an exception");
      iIOMetadataNode0.getOwnerDocument();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0);
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      int int0 = 100;
      IteratorUtils.getIterator(orderedIterator0);
      Properties properties0 = new Properties();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      MockFile mockFile0 = new MockFile("");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "9;zT;y4vc8RbBWE");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      properties2.put(predicate0, properties1);
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      Object object0 = new Object();
      properties2.put(properties2, class0);
      Properties properties5 = new Properties();
      Properties properties6 = new Properties();
      Properties properties7 = new Properties();
      Properties properties8 = new Properties();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransientConnectionException0);
      Properties properties9 = new Properties();
      properties9.put(properties2, properties2);
      Properties properties10 = new Properties();
      properties10.propertyNames();
      IteratorUtils.arrayIterator(propertiesArray0);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[1];
      SQLWarning sQLWarning0 = new SQLWarning("org.apache.commons.collections4.functors.ChainedClosure");
      sQLWarningArray0[0] = sQLWarning0;
      ObjectArrayIterator<SQLWarning> objectArrayIterator0 = new ObjectArrayIterator<SQLWarning>(sQLWarningArray0);
      Iterator<SQLWarning> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLWarning>) objectArrayIterator0);
      Iterator<SQLWarning> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLWarning>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator1, (-1124));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -1124
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OrderedMapIterator<TreeSet<Predicate<Object>>, StringTokenizer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      IteratorUtils.toString((Iterator<TreeSet<Predicate<Object>>>) orderedMapIterator0, (Transformer<? super TreeSet<Predicate<Object>>, String>) factoryTransformer0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[5];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.AbstractLinkedMap$KeySetIterator", "org.apache.commons.collections4.map.AbstractLinkedMap$KeySetIterator");
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "[]", sQLNonTransientConnectionException0);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("[]");
      sQLNonTransientExceptionArray0[2] = sQLNonTransientException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null);
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("[]", "n,TqSE", (-3263));
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLIntegrityConstraintViolationException1;
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 7);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(0, (Closure<? super Object>) null);
      closureArray0[0] = (Closure<Object>) forClosure0;
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(instanceofPredicate0);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(nullIsFalsePredicate0, (Closure<? super Object>) null, false);
      closureArray0[1] = (Closure<Object>) whileClosure0;
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      closureArray0[2] = closure0;
      Closure<Object> closure1 = NOPClosure.nopClosure();
      closureArray0[3] = closure1;
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(factoryTransformer0);
      closureArray0[4] = (Closure<Object>) transformerClosure0;
      Closure<Object> closure2 = ForClosure.forClosure((-3263), (Closure<? super Object>) transformerClosure0);
      Closure<Object> closure3 = WhileClosure.whileClosure((Predicate<? super Object>) instanceofPredicate0, (Closure<? super Object>) closure2, true);
      closureArray0[0] = closure3;
      Closure<Object> closure4 = ForClosure.forClosure((-3263), (Closure<? super Object>) closure2);
      closureArray0[6] = closure4;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      // Undeclared exception!
      IteratorUtils.apply((Iterator<SQLNonTransientException>) objectArrayListIterator0, (Closure<? super SQLNonTransientException>) chainedClosure0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<Properties>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends Locale.LanguageRange>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[3];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLNonTransientException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientException0.forEach(consumer0);
      sQLTimeoutException0.fillInStackTrace();
      sQLNonTransientException0.printStackTrace();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", "", 1, sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException(sQLTimeoutException1);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 1, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DataTruncation dataTruncation0 = new DataTruncation(128, true, true, 12, 20);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) fileSystemHandling0, comparator0);
      IteratorUtils.matchesAny((Iterator<DataTruncation>) resettableIterator0, (Predicate<? super DataTruncation>) predicate0);
      OrderedMapIterator<DataTruncation, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<LinkedList<EnumSet>, Class<SQLSyntaxErrorException>>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) iterator0);
      Stack<SQLWarning> stack0 = new Stack<SQLWarning>();
      LoopingListIterator<SQLWarning> loopingListIterator0 = new LoopingListIterator<SQLWarning>(stack0);
      IteratorUtils.emptyIterator();
      HashMap<String, SQLNonTransientException> hashMap0 = new HashMap<String, SQLNonTransientException>();
      EntrySetMapIterator<String, SQLNonTransientException> entrySetMapIterator0 = new EntrySetMapIterator<String, SQLNonTransientException>(hashMap0);
      MapIterator<String, SQLNonTransientException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<String, SQLNonTransientException>) entrySetMapIterator0);
      AbstractMapIteratorDecorator<String, SQLNonTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, SQLNonTransientException>(mapIterator0);
      IteratorUtils.contains((Iterator<String>) mapIterator0, (Object) iterator1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("transformer may not be null", "");
      TruePredicate.truePredicate();
      Class<SQLWarning>[] classArray0 = (Class<SQLWarning>[]) Array.newInstance(Class.class, 1);
      Class<SQLWarning> class0 = SQLWarning.class;
      classArray0[0] = class0;
      InvokerTransformer<Object, ServiceLoader<SQLNonTransientException>> invokerTransformer0 = new InvokerTransformer<Object, ServiceLoader<SQLNonTransientException>>("Iq'o]3l1@K~G;p", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) null, (Transformer<? super EnumSet<Locale.FilteringMode>, ? extends ServiceLoader<SQLNonTransientException>>) invokerTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) arrayList0);
      arrayList0.spliterator();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 4);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[2] = (Iterator<SQLFeatureNotSupportedException>) resettableIterator0;
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      iteratorArray0[1] = (Iterator<SQLFeatureNotSupportedException>) listIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator(iteratorArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 0, (Throwable) null);
      dataTruncation0.getSuppressed();
      dataTruncation0.getDataSize();
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      ListIterator<String> listIterator1 = IteratorUtils.singletonListIterator("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator");
      BoundedIterator<String> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends String>) listIterator1, 0L, (long) 0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator");
      dataTruncation0.getIndex();
      IteratorUtils.getIterator((Object) null);
      IteratorUtils.isEmpty(boundedIterator0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<DataTruncation>) listIterator0, (Predicate<? super DataTruncation>) predicate0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DataTruncation dataTruncation0 = new DataTruncation(128, true, true, 12, 20);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) fileSystemHandling0, comparator0);
      IteratorUtils.matchesAny((Iterator<DataTruncation>) resettableIterator0, (Predicate<? super DataTruncation>) predicate0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Hashtable<DataTruncation, StringTokenizer> hashtable0 = new Hashtable<DataTruncation, StringTokenizer>();
      EntrySetMapIterator<DataTruncation, StringTokenizer> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, StringTokenizer>(hashtable0);
      IteratorUtils.contains((Iterator<DataTruncation>) entrySetMapIterator0, (Object) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "0MU28%7qWB";
      stringArray0[1] = "";
      Stack<SQLWarning> stack0 = new Stack<SQLWarning>();
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 1);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class0;
      InvokerTransformer<Object, ServiceLoader<SQLNonTransientException>> invokerTransformer0 = new InvokerTransformer<Object, ServiceLoader<SQLNonTransientException>>("0MU28%7qWB", classArray0, stringArray0);
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 3);
      Class<Locale.FilteringMode> class1 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class1);
      enumSetArray0[0] = enumSet0;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet1 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode1);
      enumSetArray0[1] = enumSet1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet2 = EnumSet.of(locale_FilteringMode2, locale_FilteringMode0);
      Consumer<Locale.FilteringMode> consumer0 = (Consumer<Locale.FilteringMode>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet2.forEach(consumer0);
      enumSetArray0[2] = enumSet2;
      ObjectArrayListIterator<EnumSet<Locale.FilteringMode>> objectArrayListIterator0 = new ObjectArrayListIterator<EnumSet<Locale.FilteringMode>>(enumSetArray0);
      IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) objectArrayListIterator0, (Transformer<? super EnumSet<Locale.FilteringMode>, ? extends ServiceLoader<SQLNonTransientException>>) invokerTransformer0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      stack0.clear();
      SingletonListIterator<Stack<SQLNonTransientConnectionException>> singletonListIterator0 = new SingletonListIterator<Stack<SQLNonTransientConnectionException>>(stack0);
      IteratorUtils.unmodifiableListIterator((ListIterator<Stack<SQLNonTransientConnectionException>>) singletonListIterator0);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, ServiceLoader<SQLNonTransientException>> invokerTransformer0 = new InvokerTransformer<Object, ServiceLoader<SQLNonTransientException>>("w2h9C?aF7 +uy", classArray0, classArray0);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet.of(locale_FilteringMode0, locale_FilteringMode0);
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 8);
      enumSetArray0[0] = enumSet0;
      enumSetArray0[1] = enumSet0;
      enumSetArray0[2] = enumSet0;
      enumSetArray0[3] = enumSet0;
      enumSetArray0[1] = enumSet0;
      enumSetArray0[5] = enumSet0;
      enumSetArray0[6] = enumSet0;
      enumSetArray0[6] = enumSet0;
      ObjectArrayListIterator<EnumSet<Locale.FilteringMode>> objectArrayListIterator0 = new ObjectArrayListIterator<EnumSet<Locale.FilteringMode>>(enumSetArray0);
      IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) objectArrayListIterator0, (Transformer<? super EnumSet<Locale.FilteringMode>, ? extends ServiceLoader<SQLNonTransientException>>) invokerTransformer0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MapIterator<StringTokenizer, Predicate<Object>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) mapIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Iterator<StringTokenizer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0, (Collection<? super StringTokenizer>) linkedHashSet0);
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) linkedList0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableListIterator0, class0);
      OrderedMapIterator<String, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<String, SQLNonTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, SQLNonTransientException>(orderedMapIterator0);
      IteratorUtils.contains((Iterator<String>) abstractMapIteratorDecorator0, (Object) iterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("transformer may not be null", "transformer may not be null");
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 14);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      predicateArray0[0] = predicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(anyPredicate0);
      InvokerTransformer<Object, SQLTransactionRollbackException> invokerTransformer0 = new InvokerTransformer<Object, SQLTransactionRollbackException>("", classArray0, classArray0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(invokerTransformer0, predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Stack<SQLWarning> stack0 = new Stack<SQLWarning>();
      SQLWarning sQLWarning0 = new SQLWarning("");
      SingletonListIterator<SQLWarning> singletonListIterator0 = new SingletonListIterator<SQLWarning>(sQLWarning0);
      List<SQLWarning> list0 = IteratorUtils.toList((Iterator<? extends SQLWarning>) singletonListIterator0);
      LoopingListIterator<SQLWarning> loopingListIterator0 = new LoopingListIterator<SQLWarning>(list0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((HashSet<IIOMetadataNode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      ExceptionTransformer.exceptionTransformer();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(linkedList0);
      SQLWarning sQLWarning0 = new SQLWarning("Dp1 :ppiP7]Z0)S\"");
      DataTruncation dataTruncation0 = new DataTruncation((-1), false, true, (-1), (-1), sQLWarning0);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      ListIterator<Stack<SQLNonTransientConnectionException>> listIterator0 = EmptyListIterator.emptyListIterator();
      ConstantTransformer.constantTransformer("Dp1 :ppiP7]Z0)S\"");
      IteratorUtils.toString((Iterator<Stack<SQLNonTransientConnectionException>>) listIterator0, (Transformer<? super Stack<SQLNonTransientConnectionException>, String>) transformer0, "47\"U~_", "AvyPb$", "AvyPb$");
      BoundedIterator<Object> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<?>) iterator0, 0L, 505L);
      IteratorUtils.toString((Iterator<Object>) boundedIterator0, (Transformer<? super Object, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) arrayList0);
      arrayList0.spliterator();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      Comparator<SQLFeatureNotSupportedException> comparator0 = (Comparator<SQLFeatureNotSupportedException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 4);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) resettableIterator0;
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      iteratorArray0[1] = (Iterator<SQLFeatureNotSupportedException>) listIterator0;
      Iterator<SQLFeatureNotSupportedException> iterator1 = IteratorUtils.unmodifiableIterator(iteratorArray0[0]);
      iteratorArray0[2] = iterator1;
      BoundedIterator<SQLFeatureNotSupportedException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator1, 1528L, 1528L);
      iteratorArray0[3] = (Iterator<SQLFeatureNotSupportedException>) boundedIterator0;
      Iterator<SQLFeatureNotSupportedException> iterator2 = IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
      IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) iterator2, 3);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      int[] intArray0 = new int[1];
      intArray0[0] = 1466;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("y6vIU^R,@", intArray0, (Throwable) null);
      batchUpdateException0.getNextException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("y6vIU^R,@", "y6vIU^R,@", batchUpdateException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(batchUpdateException0);
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException1, false);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      Object object0 = new Object();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Object object1 = new Object();
      properties2.put(properties1, object1);
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransientConnectionException0);
      properties4.put(properties1, sQLDataException0);
      propertiesArray0[7] = properties7;
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      DefaultEquator<ClientInfoStatus> defaultEquator0 = DefaultEquator.defaultEquator();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      EqualPredicate.equalPredicate(clientInfoStatus0, (Equator<ClientInfoStatus>) defaultEquator0);
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) orderedIterator0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0);
      IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>) iterator0, (Iterator<? extends SQLTransactionRollbackException>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) properties4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Hashtable<DataTruncation, StringTokenizer> hashtable0 = new Hashtable<DataTruncation, StringTokenizer>();
      EntrySetMapIterator<DataTruncation, StringTokenizer> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, StringTokenizer>(hashtable0);
      IteratorUtils.contains((Iterator<DataTruncation>) entrySetMapIterator0, (Object) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "0MU28%7qWB";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0MU28%7qWB");
      IteratorUtils.getIterator("0MU28%7qWB");
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) properties0, 100, 1689);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MapIterator<StringTokenizer, Predicate<Object>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) mapIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Iterator<StringTokenizer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0, (Collection<? super StringTokenizer>) linkedHashSet0);
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) linkedList0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableListIterator0, class0);
      OrderedMapIterator<String, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<String, SQLNonTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, SQLNonTransientException>(orderedMapIterator0);
      IteratorUtils.contains((Iterator<String>) abstractMapIteratorDecorator0, (Object) iterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("transformer may not be null", "transformer may not be null");
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 1);
      Class<Boolean> class1 = Boolean.class;
      classArray0[0] = class1;
      InvokerTransformer<Object, SQLRecoverableException> invokerTransformer0 = new InvokerTransformer<Object, SQLRecoverableException>("transformer may not be null", classArray0, sQLNonTransientExceptionArray0);
      IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) invokerTransformer0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("transformer may not be null", "transformer may not be null", sQLRecoverableException0);
      int int0 = 26;
      ArrayIterator<SQLDataException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLDataException>(sQLNonTransientConnectionException0, 26);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      OrderedMapIterator<Properties, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      String string0 = IteratorUtils.toString((Iterator<Properties>) orderedMapIterator0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("5vN},xKmA_G)G");
      assertNotNull(iIOMetadataNode0);
      
      Factory<String> factory0 = ConstantFactory.constantFactory("5vN},xKmA_G)G");
      assertNotNull(factory0);
      
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      assertNotNull(transformer0);
      
      String string0 = IteratorUtils.toString((Iterator<Stack<SQLNonTransientConnectionException>>) null, (Transformer<? super Stack<SQLNonTransientConnectionException>, String>) transformer0, "5vN},xKmA_G)G", "cz}?y-['A_B/F/L", ".T)=@iCU P 139=K'");
      assertNotNull(string0);
      assertEquals("cz}?y-['A_B/F/L.T)=@iCU P 139=K'", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Closure<SQLTransactionRollbackException>[] closureArray0 = (Closure<SQLTransactionRollbackException>[]) Array.newInstance(Closure.class, 2);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      assertNotNull(uniquePredicate0);
      
      Predicate<SQLException> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) uniquePredicate0);
      assertNotNull(predicate0);
      
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      assertNotNull(closure0);
      
      WhileClosure<SQLTransactionRollbackException> whileClosure0 = new WhileClosure<SQLTransactionRollbackException>(predicate0, closure0, false);
      assertNotNull(whileClosure0);
      assertFalse(whileClosure0.isDoLoop());
      
      closureArray0[0] = (Closure<SQLTransactionRollbackException>) whileClosure0;
      HashMap<Predicate<SQLTransactionRollbackException>, Closure<SQLTransactionRollbackException>> hashMap0 = new HashMap<Predicate<SQLTransactionRollbackException>, Closure<SQLTransactionRollbackException>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Closure<SQLTransactionRollbackException> closure1 = SwitchClosure.switchClosure((Map<Predicate<SQLTransactionRollbackException>, Closure<SQLTransactionRollbackException>>) hashMap0);
      assertNotNull(closure1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      closureArray0[1] = closure1;
      ResettableListIterator<Closure<SQLTransactionRollbackException>> resettableListIterator0 = IteratorUtils.arrayListIterator(closureArray0, 0);
      assertNotNull(resettableListIterator0);
      assertEquals(2, closureArray0.length);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      
      String string0 = IteratorUtils.toString((Iterator<HashSet<SQLFeatureNotSupportedException>>) null);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 0);
      ResettableIterator<Transformer<Object, String>> resettableIterator0 = IteratorUtils.arrayIterator(transformerArray0);
      assertNotNull(resettableIterator0);
      assertEquals(0, transformerArray0.length);
      
      boolean boolean0 = IteratorUtils.contains((Iterator<Transformer<Object, String>>) resettableIterator0, (Object) closure0);
      assertEquals(0, transformerArray0.length);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-1), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(0, (int)integer3);
      
      integerArray0[3] = integer3;
      ResettableIterator<Integer> resettableIterator1 = IteratorUtils.arrayIterator(integerArray0);
      assertNotNull(resettableIterator1);
      assertEquals(4, integerArray0.length);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayIterator<DataTruncation> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<DataTruncation>(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      assertNotNull(enumeration0);
      
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      assertNotNull(iterator0);
      
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) iterator0);
      assertNotNull(iterator1);
      assertFalse(iterator1.equals((Object)iterator0));
      
      Stack<SQLWarning> stack0 = new Stack<SQLWarning>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      LoopingListIterator<SQLWarning> loopingListIterator0 = new LoopingListIterator<SQLWarning>(stack0);
      assertNotNull(loopingListIterator0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(loopingListIterator0.hasNext());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasPrevious());
      
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLWarning>) loopingListIterator0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 10
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      SingletonListIterator<Stack<SQLNonTransientConnectionException>> singletonListIterator0 = new SingletonListIterator<Stack<SQLNonTransientConnectionException>>(stack0);
      assertNotNull(singletonListIterator0);
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals((-1), singletonListIterator0.previousIndex());
      
      ListIterator<Stack<SQLNonTransientConnectionException>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Stack<SQLNonTransientConnectionException>>) singletonListIterator0);
      assertNotNull(listIterator0);
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      Class<String> class0 = String.class;
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 0);
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0, classArray0, classArray0);
      assertNotNull(instantiateFactory0);
      assertEquals(0, classArray0.length);
      
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      assertNotNull(transformer0);
      assertEquals(0, classArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Stack<SQLNonTransientConnectionException>>) listIterator0, (Transformer<? super Stack<SQLNonTransientConnectionException>, String>) transformer0, (String) null, "LESS", "LESS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) arrayList0);
      assertNotNull(resettableListIterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      Spliterator<SQLIntegrityConstraintViolationException> spliterator0 = arrayList0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableListIterator0, class0);
      assertNotNull(sQLNonTransientExceptionArray0);
      assertEquals(0, sQLNonTransientExceptionArray0.length);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      OrderedMapIterator<String, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer integer1 = new Integer(40);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(40, (int)integer1);
      
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator((Integer) null);
      assertNotNull(resettableIterator0);
      
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Iterator<Integer> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Integer>) resettableIterator0);
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      Properties properties1 = new Properties();
      assertNotNull(properties1);
      assertTrue(properties1.equals((Object)properties0));
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      assertNotNull(properties2);
      assertTrue(properties2.equals((Object)properties0));
      assertTrue(properties2.equals((Object)properties1));
      assertTrue(properties2.isEmpty());
      assertEquals(0, properties2.size());
      
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      assertNotNull(predicate0);
      
      Object object0 = properties2.put(predicate0, properties1);
      assertNull(object0);
      assertFalse(properties1.equals((Object)properties2));
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(properties2.equals((Object)properties0));
      assertFalse(properties2.equals((Object)properties1));
      assertNotSame(properties1, properties2);
      assertNotSame(properties1, properties0);
      assertNotSame(properties2, properties0);
      assertNotSame(properties2, properties1);
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertEquals(1, properties2.size());
      assertFalse(properties2.isEmpty());
      
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      assertNotNull(properties3);
      assertTrue(properties3.equals((Object)properties0));
      assertTrue(properties3.equals((Object)properties1));
      assertFalse(properties3.equals((Object)properties2));
      assertTrue(properties3.isEmpty());
      assertEquals(0, properties3.size());
      
      propertiesArray0[3] = properties3;
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = properties2.put(properties1, object1);
      assertNull(object2);
      assertFalse(properties1.equals((Object)properties2));
      assertTrue(properties1.equals((Object)properties3));
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(properties2.equals((Object)properties0));
      assertFalse(properties2.equals((Object)properties3));
      assertFalse(properties2.equals((Object)properties1));
      assertNotSame(properties1, properties2);
      assertNotSame(properties1, properties0);
      assertNotSame(properties1, properties3);
      assertNotSame(properties2, properties0);
      assertNotSame(properties2, properties3);
      assertNotSame(properties2, properties1);
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertEquals(2, properties2.size());
      assertFalse(properties2.isEmpty());
      
      Properties properties4 = new Properties();
      assertNotNull(properties4);
      assertTrue(properties4.equals((Object)properties1));
      assertFalse(properties4.equals((Object)properties2));
      assertTrue(properties4.equals((Object)properties0));
      assertTrue(properties4.equals((Object)properties3));
      assertEquals(0, properties4.size());
      assertTrue(properties4.isEmpty());
      
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      assertNotNull(properties5);
      assertTrue(properties5.equals((Object)properties1));
      assertFalse(properties5.equals((Object)properties2));
      assertTrue(properties5.equals((Object)properties4));
      assertTrue(properties5.equals((Object)properties3));
      assertTrue(properties5.equals((Object)properties0));
      assertTrue(properties5.isEmpty());
      assertEquals(0, properties5.size());
      
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      assertNotNull(properties6);
      assertTrue(properties6.equals((Object)properties4));
      assertTrue(properties6.equals((Object)properties0));
      assertTrue(properties6.equals((Object)properties3));
      assertTrue(properties6.equals((Object)properties1));
      assertFalse(properties6.equals((Object)properties2));
      assertTrue(properties6.equals((Object)properties5));
      assertTrue(properties6.isEmpty());
      assertEquals(0, properties6.size());
      
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      assertNotNull(properties7);
      assertTrue(properties7.equals((Object)properties3));
      assertTrue(properties7.equals((Object)properties5));
      assertTrue(properties7.equals((Object)properties4));
      assertTrue(properties7.equals((Object)properties6));
      assertTrue(properties7.equals((Object)properties1));
      assertFalse(properties7.equals((Object)properties2));
      assertTrue(properties7.equals((Object)properties0));
      assertEquals(0, properties7.size());
      assertTrue(properties7.isEmpty());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransientConnectionException0);
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.sql.SQLTransientConnectionException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLDataException0.getMessage());
      
      Object object3 = properties4.put(properties1, sQLDataException0);
      assertNull(object3);
      assertFalse(properties1.equals((Object)properties2));
      assertTrue(properties1.equals((Object)properties5));
      assertTrue(properties1.equals((Object)properties3));
      assertTrue(properties1.equals((Object)properties0));
      assertTrue(properties1.equals((Object)properties6));
      assertTrue(properties1.equals((Object)properties7));
      assertFalse(properties1.equals((Object)properties4));
      assertFalse(properties4.equals((Object)properties7));
      assertFalse(properties4.equals((Object)properties2));
      assertFalse(properties4.equals((Object)properties6));
      assertFalse(properties4.equals((Object)properties0));
      assertFalse(properties4.equals((Object)properties5));
      assertFalse(properties4.equals((Object)properties1));
      assertFalse(properties4.equals((Object)properties3));
      assertNotSame(properties1, properties7);
      assertNotSame(properties1, properties2);
      assertNotSame(properties1, properties0);
      assertNotSame(properties1, properties5);
      assertNotSame(properties1, properties3);
      assertNotSame(properties1, properties4);
      assertNotSame(properties1, properties6);
      assertNotSame(properties4, properties7);
      assertNotSame(properties4, properties2);
      assertNotSame(properties4, properties6);
      assertNotSame(properties4, properties0);
      assertNotSame(properties4, properties5);
      assertNotSame(properties4, properties1);
      assertNotSame(properties4, properties3);
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.sql.SQLTransientConnectionException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLDataException0.getMessage());
      assertEquals(1, properties4.size());
      assertFalse(properties4.isEmpty());
      
      propertiesArray0[7] = properties7;
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) priorityQueue0);
      assertNotNull(resettableIterator0);
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean0 = priorityQueue0.remove((Object) properties4);
      assertFalse(properties4.equals((Object)properties7));
      assertFalse(properties4.equals((Object)properties2));
      assertFalse(properties4.equals((Object)properties6));
      assertFalse(properties4.equals((Object)properties0));
      assertFalse(properties4.equals((Object)properties5));
      assertFalse(properties4.equals((Object)properties1));
      assertFalse(properties4.equals((Object)properties3));
      assertNotSame(properties4, properties7);
      assertNotSame(properties4, properties2);
      assertNotSame(properties4, properties6);
      assertNotSame(properties4, properties0);
      assertNotSame(properties4, properties5);
      assertNotSame(properties4, properties1);
      assertNotSame(properties4, properties3);
      assertFalse(boolean0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(1, properties4.size());
      assertFalse(properties4.isEmpty());
      
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      assertNotNull(iterator0);
      assertEquals(0, priorityQueue0.size());
      
      DefaultEquator<ClientInfoStatus> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      Predicate<ClientInfoStatus> predicate1 = EqualPredicate.equalPredicate(clientInfoStatus0, (Equator<ClientInfoStatus>) defaultEquator0);
      assertNotNull(predicate1);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      assertNotNull(enumeration0);
      assertEquals(0, priorityQueue0.size());
      
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) iterator0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      Properties properties1 = new Properties();
      assertNotNull(properties1);
      assertTrue(properties1.equals((Object)properties0));
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      assertNotNull(properties2);
      assertTrue(properties2.equals((Object)properties1));
      assertTrue(properties2.equals((Object)properties0));
      assertTrue(properties2.isEmpty());
      assertEquals(0, properties2.size());
      
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      assertNotNull(predicate0);
      
      Object object0 = properties2.put(predicate0, properties1);
      assertNull(object0);
      assertFalse(properties1.equals((Object)properties2));
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(properties2.equals((Object)properties0));
      assertFalse(properties2.equals((Object)properties1));
      assertNotSame(properties1, properties2);
      assertNotSame(properties1, properties0);
      assertNotSame(properties2, properties0);
      assertNotSame(properties2, properties1);
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertFalse(properties2.isEmpty());
      assertEquals(1, properties2.size());
      
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      assertNotNull(properties3);
      assertTrue(properties3.equals((Object)properties0));
      assertTrue(properties3.equals((Object)properties1));
      assertFalse(properties3.equals((Object)properties2));
      assertEquals(0, properties3.size());
      assertTrue(properties3.isEmpty());
      
      propertiesArray0[3] = properties3;
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = properties2.put(properties1, object1);
      assertNull(object2);
      assertFalse(properties1.equals((Object)properties2));
      assertTrue(properties1.equals((Object)properties0));
      assertTrue(properties1.equals((Object)properties3));
      assertFalse(properties2.equals((Object)properties3));
      assertFalse(properties2.equals((Object)properties0));
      assertFalse(properties2.equals((Object)properties1));
      assertNotSame(properties1, properties2);
      assertNotSame(properties1, properties0);
      assertNotSame(properties1, properties3);
      assertNotSame(properties2, properties3);
      assertNotSame(properties2, properties0);
      assertNotSame(properties2, properties1);
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertFalse(properties2.isEmpty());
      assertEquals(2, properties2.size());
      
      Properties properties4 = new Properties();
      assertNotNull(properties4);
      assertTrue(properties4.equals((Object)properties1));
      assertTrue(properties4.equals((Object)properties0));
      assertFalse(properties4.equals((Object)properties2));
      assertTrue(properties4.equals((Object)properties3));
      assertEquals(0, properties4.size());
      assertTrue(properties4.isEmpty());
      
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      assertNotNull(properties5);
      assertTrue(properties5.equals((Object)properties4));
      assertTrue(properties5.equals((Object)properties0));
      assertTrue(properties5.equals((Object)properties1));
      assertFalse(properties5.equals((Object)properties2));
      assertTrue(properties5.equals((Object)properties3));
      assertTrue(properties5.isEmpty());
      assertEquals(0, properties5.size());
      
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      assertNotNull(properties6);
      assertTrue(properties6.equals((Object)properties1));
      assertFalse(properties6.equals((Object)properties2));
      assertTrue(properties6.equals((Object)properties3));
      assertTrue(properties6.equals((Object)properties5));
      assertTrue(properties6.equals((Object)properties0));
      assertTrue(properties6.equals((Object)properties4));
      assertEquals(0, properties6.size());
      assertTrue(properties6.isEmpty());
      
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      assertNotNull(properties7);
      assertFalse(properties7.equals((Object)properties2));
      assertTrue(properties7.equals((Object)properties6));
      assertTrue(properties7.equals((Object)properties1));
      assertTrue(properties7.equals((Object)properties0));
      assertTrue(properties7.equals((Object)properties4));
      assertTrue(properties7.equals((Object)properties3));
      assertTrue(properties7.equals((Object)properties5));
      assertEquals(0, properties7.size());
      assertTrue(properties7.isEmpty());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNotNull(sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransientConnectionException0);
      assertNotNull(sQLDataException0);
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.sql.SQLTransientConnectionException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      
      Object object3 = properties4.put(properties1, sQLDataException0);
      assertNull(object3);
      assertFalse(properties1.equals((Object)properties2));
      assertTrue(properties1.equals((Object)properties6));
      assertTrue(properties1.equals((Object)properties0));
      assertTrue(properties1.equals((Object)properties3));
      assertFalse(properties1.equals((Object)properties4));
      assertTrue(properties1.equals((Object)properties7));
      assertTrue(properties1.equals((Object)properties5));
      assertFalse(properties4.equals((Object)properties0));
      assertFalse(properties4.equals((Object)properties6));
      assertFalse(properties4.equals((Object)properties3));
      assertFalse(properties4.equals((Object)properties1));
      assertFalse(properties4.equals((Object)properties7));
      assertFalse(properties4.equals((Object)properties5));
      assertFalse(properties4.equals((Object)properties2));
      assertNotSame(properties1, properties2);
      assertNotSame(properties1, properties5);
      assertNotSame(properties1, properties0);
      assertNotSame(properties1, properties4);
      assertNotSame(properties1, properties7);
      assertNotSame(properties1, properties6);
      assertNotSame(properties1, properties3);
      assertNotSame(properties4, properties0);
      assertNotSame(properties4, properties6);
      assertNotSame(properties4, properties3);
      assertNotSame(properties4, properties1);
      assertNotSame(properties4, properties7);
      assertNotSame(properties4, properties5);
      assertNotSame(properties4, properties2);
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.sql.SQLTransientConnectionException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(1, properties4.size());
      assertFalse(properties4.isEmpty());
      
      propertiesArray0[7] = properties7;
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) priorityQueue0);
      assertNotNull(resettableIterator0);
      assertEquals(0, priorityQueue0.size());
      
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      assertNotNull(iterator0);
      assertEquals(0, priorityQueue0.size());
      
      DefaultEquator<ClientInfoStatus> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      Predicate<ClientInfoStatus> predicate1 = EqualPredicate.equalPredicate(clientInfoStatus0, (Equator<ClientInfoStatus>) defaultEquator0);
      assertNotNull(predicate1);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>) orderedIterator0, (Iterator<? extends SQLTransactionRollbackException>) orderedIterator0);
      assertNotNull(iterator1);
      
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      assertNotNull(enumeration0);
      assertEquals(0, priorityQueue0.size());
      
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) iterator0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[4];
      String string0 = ":i-";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(":i-", ":i-");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(":i-", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: :i-", sQLFeatureNotSupportedException0.toString());
      assertEquals(":i-", sQLFeatureNotSupportedException0.getSQLState());
      
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      String string1 = "WX;)]xlzA";
      String string2 = "aB53b?}5wR\"V";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("WX;)]xlzA", "aB53b?}5wR\"V", 0);
      assertNotNull(sQLFeatureNotSupportedException1);
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertEquals("WX;)]xlzA", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: WX;)]xlzA", sQLFeatureNotSupportedException1.toString());
      assertEquals("aB53b?}5wR\"V", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException1);
      assertNotNull(sQLFeatureNotSupportedException2);
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException0));
      assertEquals("WX;)]xlzA", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: WX;)]xlzA", sQLFeatureNotSupportedException1.toString());
      assertEquals("aB53b?}5wR\"V", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: WX;)]xlzA", sQLFeatureNotSupportedException2.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException2.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLFeatureNotSupportedException: WX;)]xlzA", sQLFeatureNotSupportedException2.toString());
      assertNull(sQLFeatureNotSupportedException2.getSQLState());
      
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      String string3 = "Transformer must not be null";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("Transformer must not be null");
      assertNotNull(sQLFeatureNotSupportedException3);
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException2));
      assertNull(sQLFeatureNotSupportedException3.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Transformer must not be null", sQLFeatureNotSupportedException3.toString());
      assertEquals("Transformer must not be null", sQLFeatureNotSupportedException3.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException3.getErrorCode());
      
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0, 0);
      assertNotNull(objectArrayListIterator0);
      assertEquals(4, sQLFeatureNotSupportedExceptionArray0.length);
      assertEquals(4, objectArrayListIterator0.getEndIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLFeatureNotSupportedException3);
      assertNotNull(equalPredicate0);
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException2));
      assertNull(sQLFeatureNotSupportedException3.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Transformer must not be null", sQLFeatureNotSupportedException3.toString());
      assertEquals("Transformer must not be null", sQLFeatureNotSupportedException3.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException3.getErrorCode());
      
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) objectArrayListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) equalPredicate0);
      assertNotNull(listIterator0);
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException2));
      assertEquals(4, sQLFeatureNotSupportedExceptionArray0.length);
      assertNotSame(sQLFeatureNotSupportedException3, sQLFeatureNotSupportedException0);
      assertNotSame(sQLFeatureNotSupportedException3, sQLFeatureNotSupportedException1);
      assertNotSame(sQLFeatureNotSupportedException3, sQLFeatureNotSupportedException2);
      assertNull(sQLFeatureNotSupportedException3.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Transformer must not be null", sQLFeatureNotSupportedException3.toString());
      assertEquals("Transformer must not be null", sQLFeatureNotSupportedException3.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException3.getErrorCode());
      assertEquals(4, objectArrayListIterator0.getEndIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      Enumeration<?> enumeration0 = properties0.propertyNames();
      assertNotNull(enumeration0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      Properties properties1 = new Properties();
      assertNotNull(properties1);
      assertTrue(properties1.equals((Object)properties0));
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      
      Properties[] propertiesArray0 = new Properties[0];
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      assertNotNull(resettableIterator0);
      assertEquals(0, propertiesArray0.length);
      
      ResettableIterator<ArrayDeque<Predicate<SQLException>>> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
      
      Integer integer0 = new Integer(1200);
      assertNotNull(integer0);
      assertEquals(1200, (int)integer0);
      
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1), (int)integer1);
      
      ResettableIterator<Integer> resettableIterator2 = IteratorUtils.singletonIterator(integer1);
      assertNotNull(resettableIterator2);
      assertFalse(integer1.equals((Object)integer0));
      
      Iterator<Integer> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Integer>) resettableIterator2);
      assertNotNull(iterator0);
      assertFalse(integer1.equals((Object)integer0));
      
      ListIterator<SQLNonTransientConnectionException> listIterator1 = EmptyListIterator.emptyListIterator();
      assertNotNull(listIterator1);
      assertFalse(listIterator1.hasNext());
      assertFalse(listIterator1.hasPrevious());
      
      int int0 = IteratorUtils.size(iterator0);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, int0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(":i-");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: :i-", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(":i-", sQLInvalidAuthorizationSpecException0.getMessage());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      Transformer<Object, String> transformer1 = new ConstantTransformer<Object, String>("");
      assertNotNull(transformer1);
      
      Class<SQLException> class0 = SQLException.class;
      ResettableIterator<Class<SQLException>> resettableIterator0 = IteratorUtils.singletonIterator(class0);
      assertNotNull(resettableIterator0);
      
      String string0 = IteratorUtils.toString((Iterator<Class<SQLException>>) resettableIterator0, (Transformer<? super Class<SQLException>, String>) transformer1);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 0, sQLNonTransientConnectionException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      
      sQLNonTransientConnectionException0.setNextException(sQLSyntaxErrorException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      
      DataTruncation dataTruncation0 = new DataTruncation((-3028), true, true, 0, 0, sQLInvalidAuthorizationSpecException0);
      assertNotNull(dataTruncation0);
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      int int0 = dataTruncation0.getDataSize();
      assertEquals(0, int0);
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      assertNotNull(listIterator0);
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      ListIterator<String> listIterator1 = IteratorUtils.singletonListIterator("iterator");
      assertNotNull(listIterator1);
      assertTrue(listIterator1.hasNext());
      assertFalse(listIterator1.hasPrevious());
      
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends String>) listIterator1, (-1L), (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      assertNotNull(enumeration0);
      
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      assertNotNull(iterator0);
      
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) iterator0);
      assertNotNull(iterator1);
      assertFalse(iterator1.equals((Object)iterator0));
      
      Stack<SQLWarning> stack0 = new Stack<SQLWarning>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      LoopingListIterator<SQLWarning> loopingListIterator0 = new LoopingListIterator<SQLWarning>(stack0);
      assertNotNull(loopingListIterator0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(loopingListIterator0.hasNext());
      assertFalse(loopingListIterator0.hasPrevious());
      assertEquals(0, loopingListIterator0.size());
      
      ResettableIterator<ArrayDeque<Predicate<SQLException>>> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
      
      Integer integer0 = new Integer(40);
      assertNotNull(integer0);
      assertEquals(40, (int)integer0);
      
      Integer integer1 = new Integer(1200);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1200, (int)integer1);
      
      ResettableIterator<Integer> resettableIterator2 = IteratorUtils.singletonIterator(integer1);
      assertNotNull(resettableIterator2);
      assertFalse(integer1.equals((Object)integer0));
      
      Iterator<Integer> iterator2 = IteratorUtils.unmodifiableIterator((Iterator<Integer>) resettableIterator2);
      assertNotNull(iterator2);
      assertFalse(integer1.equals((Object)integer0));
      
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      OrderedMapIterator<SQLFeatureNotSupportedException, Boolean> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Enumeration<SQLFeatureNotSupportedException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      assertNotNull(enumeration1);
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 5);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLDataException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLInvalidAuthorizationSpecException, ? extends SQLDataException>) orderedMapIterator0);
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLDataException>(orderedMapIterator1);
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      ListIteratorWrapper<SQLInvalidAuthorizationSpecException> listIteratorWrapper0 = new ListIteratorWrapper<SQLInvalidAuthorizationSpecException>(abstractOrderedMapIteratorDecorator0);
      assertNotNull(listIteratorWrapper0);
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertFalse(listIteratorWrapper0.hasPrevious());
      
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIteratorWrapper0, 137L, (-1681L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      String string0 = IteratorUtils.toString((Iterator<Properties>) orderedIterator0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.IGNORE_EXTENDED_RANGES, locale_FilteringMode0);
      
      Comparator<Object> comparator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Closure<Object>>) null, (Iterator<? extends Closure<Object>>) null, (Iterator<? extends Closure<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "0MU28%7qWB";
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("0MU28%7qWB", "0MU28%7qWB");
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: 0MU28%7qWB", sQLTimeoutException0.toString());
      assertEquals("0MU28%7qWB", sQLTimeoutException0.getMessage());
      assertEquals("0MU28%7qWB", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLTimeoutException0);
      assertNotNull(predicate0);
      assertEquals("java.sql.SQLTimeoutException: 0MU28%7qWB", sQLTimeoutException0.toString());
      assertEquals("0MU28%7qWB", sQLTimeoutException0.getMessage());
      assertEquals("0MU28%7qWB", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      predicateArray0[0] = predicate0;
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      assertNotNull(nullIsExceptionPredicate0);
      assertEquals("java.sql.SQLTimeoutException: 0MU28%7qWB", sQLTimeoutException0.toString());
      assertEquals("0MU28%7qWB", sQLTimeoutException0.getMessage());
      assertEquals("0MU28%7qWB", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      predicateArray0[1] = (Predicate<Object>) nullIsExceptionPredicate0;
      NonePredicate<SQLException> nonePredicate0 = new NonePredicate<SQLException>(predicateArray0);
      assertNotNull(nonePredicate0);
      assertEquals(2, predicateArray0.length);
      
      AndPredicate<SQLException> andPredicate0 = new AndPredicate<SQLException>(nonePredicate0, predicate0);
      assertNotNull(andPredicate0);
      assertEquals(2, predicateArray0.length);
      assertEquals("java.sql.SQLTimeoutException: 0MU28%7qWB", sQLTimeoutException0.toString());
      assertEquals("0MU28%7qWB", sQLTimeoutException0.getMessage());
      assertEquals("0MU28%7qWB", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      NotPredicate<SQLException> notPredicate0 = new NotPredicate<SQLException>(andPredicate0);
      assertNotNull(notPredicate0);
      assertEquals(2, predicateArray0.length);
      assertEquals("java.sql.SQLTimeoutException: 0MU28%7qWB", sQLTimeoutException0.toString());
      assertEquals("0MU28%7qWB", sQLTimeoutException0.getMessage());
      assertEquals("0MU28%7qWB", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) notPredicate0);
      assertEquals(2, predicateArray0.length);
      assertFalse(boolean0);
      assertEquals("java.sql.SQLTimeoutException: 0MU28%7qWB", sQLTimeoutException0.toString());
      assertEquals("0MU28%7qWB", sQLTimeoutException0.getMessage());
      assertEquals("0MU28%7qWB", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      SQLWarning sQLWarning0 = new SQLWarning("0MU28%7qWB", "", sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLWarning: 0MU28%7qWB", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals("0MU28%7qWB", sQLWarning0.getMessage());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLWarning0, 976, 1122);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      assertNotNull(enumeration0);
      
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      assertNotNull(iterator0);
      
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) iterator0);
      assertNotNull(iterator1);
      assertFalse(iterator1.equals((Object)iterator0));
      
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) null, (Object[]) null);
      assertNotNull(transformer0);
      
      MapIterator<Class<SQLException>, SQLWarning> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      assertNotNull(factory0);
      
      String string0 = IteratorUtils.toString((Iterator<Class<SQLException>>) mapIterator0, (Transformer<? super Class<SQLException>, String>) transformer0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[]", "[]", 0, sQLNonTransientConnectionException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("[]", sQLSyntaxErrorException0.getMessage());
      assertEquals("[]", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: []", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      sQLNonTransientConnectionException0.setNextException(sQLSyntaxErrorException0);
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("[]", sQLSyntaxErrorException0.getMessage());
      assertEquals("[]", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: []", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}n+-cw6dZYp0e");
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.print("");
      mockPrintWriter0.println(false);
      sQLNonTransientConnectionException0.addSuppressed(sQLSyntaxErrorException0);
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("[]", sQLSyntaxErrorException0.getMessage());
      assertEquals("[]", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: []", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      sQLNonTransientConnectionException0.printStackTrace((PrintWriter) mockPrintWriter0);
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      
      boolean boolean0 = IteratorUtils.contains((Iterator<StringTokenizer>) null, (Object) "");
      assertFalse(boolean0);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) null, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Hashtable<DataTruncation, StringTokenizer> hashtable0 = new Hashtable<DataTruncation, StringTokenizer>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      EntrySetMapIterator<DataTruncation, StringTokenizer> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, StringTokenizer>(hashtable0);
      assertNotNull(entrySetMapIterator0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      boolean boolean0 = IteratorUtils.contains((Iterator<DataTruncation>) entrySetMapIterator0, (Object) null);
      assertFalse(boolean0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "0MU28%7qWB";
      stringArray0[1] = "";
      stringArray0[2] = "^G`{ ],";
      stringArray0[3] = "wdF9u";
      stringArray0[4] = "";
      stringArray0[5] = "c1TFVFt\n]E=7[d)#W";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0, 0, 0);
      assertNotNull(resettableIterator0);
      assertEquals(6, stringArray0.length);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      Transformer<Object, Properties> transformer0 = ConstantTransformer.constantTransformer(properties0);
      assertNotNull(transformer0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("^G`{ ],");
      assertNotNull(iIOMetadataNode0);
      
      Attr attr0 = iIOMetadataNode0.getAttributeNode("ListIterator must not be null");
      assertNull(attr0);
      
      // Undeclared exception!
      try { 
        iIOMetadataNode0.removeAttributeNode((Attr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      ResettableIterator<Class<SQLException>> resettableIterator0 = IteratorUtils.singletonIterator(class0);
      assertNotNull(resettableIterator0);
      
      Class<StringTokenizer>[] classArray0 = (Class<StringTokenizer>[]) Array.newInstance(Class.class, 3);
      Class<StringTokenizer> class1 = StringTokenizer.class;
      classArray0[0] = class1;
      Class<StringTokenizer> class2 = StringTokenizer.class;
      classArray0[1] = class2;
      int[] intArray0 = new int[8];
      intArray0[0] = 31;
      intArray0[1] = (-1044);
      intArray0[2] = (-4790);
      intArray0[3] = (-869);
      intArray0[4] = 3526;
      intArray0[5] = 1;
      intArray0[6] = 438;
      intArray0[7] = 2395;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[", (String) null);
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("[", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: [", sQLNonTransientConnectionException0.toString());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0, sQLNonTransientConnectionException0);
      assertNotNull(batchUpdateException0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {31, (-1044), (-4790), (-869), 3526, 1, 438, 2395}, intArray0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("[", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: [", sQLNonTransientConnectionException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(batchUpdateException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {31, (-1044), (-4790), (-869), 3526, 1, 438, 2395}, intArray0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("[", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: [", sQLNonTransientConnectionException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", sQLNonTransientConnectionException1.getMessage());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.BatchUpdateException", sQLNonTransientConnectionException1.toString());
      
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLNonTransientConnectionException1);
      assertNotNull(identityPredicate0);
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {31, (-1044), (-4790), (-869), 3526, 1, 438, 2395}, intArray0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("[", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: [", sQLNonTransientConnectionException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", sQLNonTransientConnectionException1.getMessage());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.BatchUpdateException", sQLNonTransientConnectionException1.toString());
      
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(identityPredicate0);
      assertNotNull(notPredicate0);
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {31, (-1044), (-4790), (-869), 3526, 1, 438, 2395}, intArray0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("[", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: [", sQLNonTransientConnectionException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", sQLNonTransientConnectionException1.getMessage());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.BatchUpdateException", sQLNonTransientConnectionException1.toString());
      
      Transformer<Object, SQLSyntaxErrorException> transformer0 = InvokerTransformer.invokerTransformer("");
      assertNotNull(transformer0);
      
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, identityPredicate0);
      assertNotNull(transformedPredicate0);
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {31, (-1044), (-4790), (-869), 3526, 1, 438, 2395}, intArray0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("[", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: [", sQLNonTransientConnectionException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", sQLNonTransientConnectionException1.getMessage());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.BatchUpdateException", sQLNonTransientConnectionException1.toString());
      
      Integer integer0 = IteratorUtils.find((Iterator<Integer>) null, (Predicate<? super Integer>) transformedPredicate0);
      assertNull(integer0);
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertEquals(8, intArray0.length);
      assertNotSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertNotSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertArrayEquals(new int[] {31, (-1044), (-4790), (-869), 3526, 1, 438, 2395}, intArray0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("[", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: [", sQLNonTransientConnectionException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", sQLNonTransientConnectionException1.getMessage());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.BatchUpdateException", sQLNonTransientConnectionException1.toString());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("", sQLNonTransientConnectionException0);
      assertNotNull(sQLTransientException0);
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("[", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: [", sQLNonTransientConnectionException0.toString());
      assertEquals("java.sql.SQLTransientException: ", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Spliterator<SQLIntegrityConstraintViolationException> spliterator0 = arrayList0.spliterator();
      assertNotNull(spliterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableIterator0, class0);
      assertNotNull(sQLNonTransientExceptionArray0);
      assertEquals(0, sQLNonTransientExceptionArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) arrayList0);
      assertNotNull(resettableListIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Tbzz6rU~iQ7jjd\"9E+", "Tbzz6rU~iQ7jjd\"9E+");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Tbzz6rU~iQ7jjd\"9E+", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("Tbzz6rU~iQ7jjd\"9E+", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("Tbzz6rU~iQ7jjd\"9E+", sQLIntegrityConstraintViolationException0.getMessage());
      
      boolean boolean0 = arrayList0.add(sQLIntegrityConstraintViolationException0);
      assertTrue(arrayList0.contains(sQLIntegrityConstraintViolationException0));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Tbzz6rU~iQ7jjd\"9E+", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("Tbzz6rU~iQ7jjd\"9E+", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("Tbzz6rU~iQ7jjd\"9E+", sQLIntegrityConstraintViolationException0.getMessage());
      
      Spliterator<SQLIntegrityConstraintViolationException> spliterator0 = arrayList0.spliterator();
      assertNotNull(spliterator0);
      assertTrue(arrayList0.contains(sQLIntegrityConstraintViolationException0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0);
      assertNotNull(iterator0);
      assertTrue(arrayList0.contains(sQLIntegrityConstraintViolationException0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(resettableListIterator0.hasNext());
      assertTrue(resettableListIterator0.hasPrevious());
      
      Iterable<SQLIntegrityConstraintViolationException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      assertNotNull(iterable0);
      assertTrue(arrayList0.contains(sQLIntegrityConstraintViolationException0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(resettableListIterator0.hasNext());
      assertTrue(resettableListIterator0.hasPrevious());
      
      Comparator<SQLFeatureNotSupportedException> comparator0 = (Comparator<SQLFeatureNotSupportedException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLSyntaxErrorException[]) null, 100, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<BatchUpdateException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = 985;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) null, 985);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "org.apache.commons.collections4.iterators.SkippingIterator", 1677);
      assertNotNull(sQLNonTransientException0);
      assertEquals(1677, sQLNonTransientException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.iterators.SkippingIterator", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals("", sQLNonTransientException0.getMessage());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientException0, 85);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Estimated size must be greater than 0", "0%V_", hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("Estimated size must be greater than 0", sQLClientInfoException0.getMessage());
      assertEquals("0%V_", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: Estimated size must be greater than 0", sQLClientInfoException0.toString());
      
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap0);
      assertNotNull(sQLClientInfoException1);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException1.getMessage());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException1.toString());
      
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("Estimated size must be greater than 0", hashMap0);
      assertNotNull(sQLClientInfoException2);
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("Estimated size must be greater than 0", sQLClientInfoException2.getMessage());
      assertEquals("java.sql.SQLClientInfoException: Estimated size must be greater than 0", sQLClientInfoException2.toString());
      assertEquals(0, sQLClientInfoException2.getErrorCode());
      assertNull(sQLClientInfoException2.getSQLState());
      
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("0%V_", hashMap0);
      assertNotNull(sQLClientInfoException3);
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException2));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException3.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: 0%V_", sQLClientInfoException3.toString());
      assertEquals(0, sQLClientInfoException3.getErrorCode());
      assertEquals("0%V_", sQLClientInfoException3.getMessage());
      
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("Estimated size must be greater than 0", "Estimated size must be greater than 0", hashMap0);
      assertNotNull(sQLClientInfoException4);
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException: Estimated size must be greater than 0", sQLClientInfoException4.toString());
      assertEquals(0, sQLClientInfoException4.getErrorCode());
      assertEquals("Estimated size must be greater than 0", sQLClientInfoException4.getMessage());
      assertEquals("Estimated size must be greater than 0", sQLClientInfoException4.getSQLState());
      
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("0%V_", hashMap0);
      assertNotNull(sQLClientInfoException5);
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException3));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException: 0%V_", sQLClientInfoException5.toString());
      assertNull(sQLClientInfoException5.getSQLState());
      assertEquals(0, sQLClientInfoException5.getErrorCode());
      assertEquals("0%V_", sQLClientInfoException5.getMessage());
      
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("Estimated size must be greater than 0", "hmE", hashMap1, sQLClientInfoException0);
      assertNotNull(sQLClientInfoException6);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException3));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException2));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("Estimated size must be greater than 0", sQLClientInfoException0.getMessage());
      assertEquals("0%V_", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: Estimated size must be greater than 0", sQLClientInfoException0.toString());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, sQLClientInfoException6.getErrorCode());
      assertEquals("Estimated size must be greater than 0", sQLClientInfoException6.getMessage());
      assertEquals("hmE", sQLClientInfoException6.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: Estimated size must be greater than 0", sQLClientInfoException6.toString());
      
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException("Estimated size must be greater than 0", "Estimated size must be greater than 0", hashMap0, sQLClientInfoException5);
      assertNotNull(sQLClientInfoException7);
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException3));
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException3));
      assertEquals("java.sql.SQLClientInfoException: Estimated size must be greater than 0", sQLClientInfoException7.toString());
      assertEquals("Estimated size must be greater than 0", sQLClientInfoException7.getSQLState());
      assertEquals("Estimated size must be greater than 0", sQLClientInfoException7.getMessage());
      assertEquals(0, sQLClientInfoException7.getErrorCode());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException: 0%V_", sQLClientInfoException5.toString());
      assertNull(sQLClientInfoException5.getSQLState());
      assertEquals(0, sQLClientInfoException5.getErrorCode());
      assertEquals("0%V_", sQLClientInfoException5.getMessage());
      
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 257, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 3);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[4];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(":i-", ":i-");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(":i-", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: :i-", sQLFeatureNotSupportedException0.toString());
      assertEquals(":i-", sQLFeatureNotSupportedException0.getSQLState());
      
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      int int0 = 0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("WX;)]xlzA", "aB53b?}5wR\"V", 0);
      assertNotNull(sQLFeatureNotSupportedException1);
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertEquals("WX;)]xlzA", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: WX;)]xlzA", sQLFeatureNotSupportedException1.toString());
      assertEquals("aB53b?}5wR\"V", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException1);
      assertNotNull(sQLFeatureNotSupportedException2);
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException1));
      assertEquals("WX;)]xlzA", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: WX;)]xlzA", sQLFeatureNotSupportedException1.toString());
      assertEquals("aB53b?}5wR\"V", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertNull(sQLFeatureNotSupportedException2.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: WX;)]xlzA", sQLFeatureNotSupportedException2.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException2.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLFeatureNotSupportedException: WX;)]xlzA", sQLFeatureNotSupportedException2.toString());
      
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("Transformer must not be null");
      assertNotNull(sQLFeatureNotSupportedException3);
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException1));
      assertEquals("java.sql.SQLFeatureNotSupportedException: Transformer must not be null", sQLFeatureNotSupportedException3.toString());
      assertEquals(0, sQLFeatureNotSupportedException3.getErrorCode());
      assertEquals("Transformer must not be null", sQLFeatureNotSupportedException3.getMessage());
      assertNull(sQLFeatureNotSupportedException3.getSQLState());
      
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0, 0);
      assertNotNull(objectArrayListIterator0);
      assertEquals(4, sQLFeatureNotSupportedExceptionArray0.length);
      assertEquals(4, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLFeatureNotSupportedException3);
      assertNotNull(equalPredicate0);
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException1));
      assertEquals("java.sql.SQLFeatureNotSupportedException: Transformer must not be null", sQLFeatureNotSupportedException3.toString());
      assertEquals(0, sQLFeatureNotSupportedException3.getErrorCode());
      assertEquals("Transformer must not be null", sQLFeatureNotSupportedException3.getMessage());
      assertNull(sQLFeatureNotSupportedException3.getSQLState());
      
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) objectArrayListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) equalPredicate0);
      assertNotNull(listIterator0);
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException1));
      assertEquals(4, sQLFeatureNotSupportedExceptionArray0.length);
      assertNotSame(sQLFeatureNotSupportedException3, sQLFeatureNotSupportedException0);
      assertNotSame(sQLFeatureNotSupportedException3, sQLFeatureNotSupportedException2);
      assertNotSame(sQLFeatureNotSupportedException3, sQLFeatureNotSupportedException1);
      assertEquals("java.sql.SQLFeatureNotSupportedException: Transformer must not be null", sQLFeatureNotSupportedException3.toString());
      assertEquals(0, sQLFeatureNotSupportedException3.getErrorCode());
      assertEquals("Transformer must not be null", sQLFeatureNotSupportedException3.getMessage());
      assertNull(sQLFeatureNotSupportedException3.getSQLState());
      assertEquals(4, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) listIterator0;
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Predicate<? super SQLFeatureNotSupportedException>) equalPredicate0);
      assertNotNull(iterator0);
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException1));
      assertEquals(4, sQLFeatureNotSupportedExceptionArray0.length);
      assertNotSame(sQLFeatureNotSupportedException3, sQLFeatureNotSupportedException0);
      assertNotSame(sQLFeatureNotSupportedException3, sQLFeatureNotSupportedException2);
      assertNotSame(sQLFeatureNotSupportedException3, sQLFeatureNotSupportedException1);
      assertEquals("java.sql.SQLFeatureNotSupportedException: Transformer must not be null", sQLFeatureNotSupportedException3.toString());
      assertEquals(0, sQLFeatureNotSupportedException3.getErrorCode());
      assertEquals("Transformer must not be null", sQLFeatureNotSupportedException3.getMessage());
      assertNull(sQLFeatureNotSupportedException3.getSQLState());
      assertEquals(4, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      iteratorArray0[1] = iterator0;
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      assertNotNull(enumeration0);
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException1));
      assertEquals(4, sQLFeatureNotSupportedExceptionArray0.length);
      assertNotSame(sQLFeatureNotSupportedException3, sQLFeatureNotSupportedException0);
      assertNotSame(sQLFeatureNotSupportedException3, sQLFeatureNotSupportedException2);
      assertNotSame(sQLFeatureNotSupportedException3, sQLFeatureNotSupportedException1);
      assertEquals("java.sql.SQLFeatureNotSupportedException: Transformer must not be null", sQLFeatureNotSupportedException3.toString());
      assertEquals(0, sQLFeatureNotSupportedException3.getErrorCode());
      assertEquals("Transformer must not be null", sQLFeatureNotSupportedException3.getMessage());
      assertNull(sQLFeatureNotSupportedException3.getSQLState());
      assertEquals(4, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) iterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = "org.apache.commons.collections4.iterators.ArrayIterator";
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "org.apache.commons.collections4.iterators.ArrayIterator", 512);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "_m1^kU8Ls|z2ODe";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("_m1^kU8Ls|z2ODe");
      assertNotNull(sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("_m1^kU8Ls|z2ODe", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: _m1^kU8Ls|z2ODe", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLSyntaxErrorException0.forEach(consumer0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("_m1^kU8Ls|z2ODe", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: _m1^kU8Ls|z2ODe", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLSyntaxErrorException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("_m1^kU8Ls|z2ODe", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: _m1^kU8Ls|z2ODe", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: _m1^kU8Ls|z2ODe", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLSyntaxErrorException: _m1^kU8Ls|z2ODe", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      SQLDataException sQLDataException0 = new SQLDataException("_m1^kU8Ls|z2ODe", "_m1^kU8Ls|z2ODe", 5, sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLDataException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("_m1^kU8Ls|z2ODe", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: _m1^kU8Ls|z2ODe", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: _m1^kU8Ls|z2ODe", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLSyntaxErrorException: _m1^kU8Ls|z2ODe", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: _m1^kU8Ls|z2ODe", sQLDataException0.toString());
      assertEquals("_m1^kU8Ls|z2ODe", sQLDataException0.getSQLState());
      assertEquals("_m1^kU8Ls|z2ODe", sQLDataException0.getMessage());
      assertEquals(5, sQLDataException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLDataException0, (-912));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
      
      String string0 = "org.apache.commons.collections4.IterableUtils$5$1";
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("org.apache.commons.collections4.IterableUtils$5$1");
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.IterableUtils$5$1");
      assertNotNull(transformer0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ArrayList<ServiceLoader>>) listIterator0, (Transformer<? super ArrayList<ServiceLoader>, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'org.apache.commons.collections4.IterableUtils$5$1' on 'class java.lang.String' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      SingletonListIterator<Stack<SQLNonTransientConnectionException>> singletonListIterator0 = new SingletonListIterator<Stack<SQLNonTransientConnectionException>>(stack0);
      assertNotNull(singletonListIterator0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(singletonListIterator0.hasNext());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals((-1), singletonListIterator0.previousIndex());
      
      ListIterator<Stack<SQLNonTransientConnectionException>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Stack<SQLNonTransientConnectionException>>) singletonListIterator0);
      assertNotNull(listIterator0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(singletonListIterator0.hasNext());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      Class<String> class0 = String.class;
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 0);
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0, classArray0, classArray0);
      assertNotNull(instantiateFactory0);
      assertEquals(0, classArray0.length);
      
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      assertNotNull(transformer0);
      assertEquals(0, classArray0.length);
      
      String string0 = IteratorUtils.toString((Iterator<Stack<SQLNonTransientConnectionException>>) listIterator0, (Transformer<? super Stack<SQLNonTransientConnectionException>, String>) transformer0, "' threw an exception", "' threw an exception", "org.apache.commons.collections4.iterators.ArrayIterator");
      assertNotNull(string0);
      assertEquals(0, classArray0.length);
      assertEquals("' threw an exceptionorg.apache.commons.collections4.iterators.ArrayIterator", string0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(1, singletonListIterator0.nextIndex());
      assertEquals(0, singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasPrevious());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      OrderedMapIterator<TreeSet<Predicate<Object>>, StringTokenizer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      assertNotNull(factory0);
      
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      assertNotNull(factoryTransformer0);
      
      String string0 = IteratorUtils.toString((Iterator<TreeSet<Predicate<Object>>>) orderedMapIterator0, (Transformer<? super TreeSet<Predicate<Object>>, String>) factoryTransformer0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[5];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.AbstractLinkedMap$KeySetIterator", "org.apache.commons.collections4.map.AbstractLinkedMap$KeySetIterator");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("org.apache.commons.collections4.map.AbstractLinkedMap$KeySetIterator", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: org.apache.commons.collections4.map.AbstractLinkedMap$KeySetIterator", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.map.AbstractLinkedMap$KeySetIterator", sQLNonTransientConnectionException0.getSQLState());
      
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "[]", sQLNonTransientConnectionException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("org.apache.commons.collections4.map.AbstractLinkedMap$KeySetIterator", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: org.apache.commons.collections4.map.AbstractLinkedMap$KeySetIterator", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.map.AbstractLinkedMap$KeySetIterator", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("[]", sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      assertNotNull(sQLNonTransientException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      
      sQLNonTransientExceptionArray0[2] = sQLNonTransientException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null);
      assertNotNull(sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("[]", "n,TqSE", (-3263));
      assertNotNull(sQLIntegrityConstraintViolationException1);
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: []", sQLIntegrityConstraintViolationException1.toString());
      assertEquals("n,TqSE", sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals("[]", sQLIntegrityConstraintViolationException1.getMessage());
      assertEquals((-3263), sQLIntegrityConstraintViolationException1.getErrorCode());
      
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLIntegrityConstraintViolationException1;
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      assertNotNull(objectArrayListIterator0);
      assertEquals(5, sQLNonTransientExceptionArray0.length);
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(5, objectArrayListIterator0.getEndIndex());
      
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 7);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(0, (Closure<? super Object>) null);
      assertNotNull(forClosure0);
      assertEquals(0, forClosure0.getCount());
      
      closureArray0[0] = (Closure<Object>) forClosure0;
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(instanceofPredicate0);
      assertNotNull(nullIsFalsePredicate0);
      
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(nullIsFalsePredicate0, (Closure<? super Object>) null, false);
      assertNotNull(whileClosure0);
      assertFalse(whileClosure0.isDoLoop());
      
      closureArray0[1] = (Closure<Object>) whileClosure0;
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      assertNotNull(closure0);
      
      closureArray0[2] = closure0;
      Closure<Object> closure1 = NOPClosure.nopClosure();
      assertNotNull(closure1);
      assertFalse(closure1.equals((Object)closure0));
      
      closureArray0[3] = closure1;
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(factoryTransformer0);
      assertNotNull(transformerClosure0);
      
      closureArray0[4] = (Closure<Object>) transformerClosure0;
      Closure<Object> closure2 = ForClosure.forClosure((-3263), (Closure<? super Object>) transformerClosure0);
      assertNotNull(closure2);
      assertFalse(closure2.equals((Object)closure0));
      assertSame(closure2, closure1);
      
      Closure<Object> closure3 = WhileClosure.whileClosure((Predicate<? super Object>) instanceofPredicate0, (Closure<? super Object>) closure2, true);
      assertNotNull(closure3);
      assertFalse(closure2.equals((Object)closure0));
      assertFalse(closure3.equals((Object)closure1));
      assertFalse(closure3.equals((Object)closure2));
      assertFalse(closure3.equals((Object)closure0));
      assertSame(closure2, closure1);
      
      closureArray0[5] = closure3;
      Closure<Object> closure4 = ForClosure.forClosure((-3263), (Closure<? super Object>) closure2);
      assertNotNull(closure4);
      assertFalse(closure4.equals((Object)closure0));
      assertFalse(closure4.equals((Object)closure3));
      assertFalse(closure2.equals((Object)closure3));
      assertFalse(closure2.equals((Object)closure0));
      assertSame(closure4, closure1);
      assertSame(closure4, closure2);
      assertSame(closure2, closure4);
      assertSame(closure2, closure1);
      
      closureArray0[6] = closure4;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      assertNotNull(chainedClosure0);
      assertEquals(7, closureArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLNonTransientException>) objectArrayListIterator0, (Closure<? super SQLNonTransientException>) chainedClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.WhileClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      ResettableIterator<Class<SQLException>> resettableIterator0 = IteratorUtils.singletonIterator(class0);
      assertNotNull(resettableIterator0);
      
      String string0 = "";
      Class<StringTokenizer>[] classArray0 = (Class<StringTokenizer>[]) Array.newInstance(Class.class, 3);
      Class<StringTokenizer> class1 = StringTokenizer.class;
      classArray0[0] = class1;
      Class<StringTokenizer> class2 = StringTokenizer.class;
      classArray0[1] = class2;
      Class<StringTokenizer> class3 = StringTokenizer.class;
      classArray0[2] = class3;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      assertNotNull(transformer0);
      assertEquals(3, classArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Class<SQLException>>) resettableIterator0, (Transformer<? super Class<SQLException>, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.lang.Class' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MapIterator<StringTokenizer, Predicate<Object>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) mapIterator0);
      assertNotNull(enumeration0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Iterator<StringTokenizer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0, (Collection<? super StringTokenizer>) linkedHashSet0);
      assertNotNull(iterator0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) linkedList0);
      assertNotNull(resettableListIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableListIterator0, class0);
      assertNotNull(sQLNonTransientExceptionArray0);
      assertEquals(0, sQLNonTransientExceptionArray0.length);
      assertEquals(0, linkedList0.size());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      OrderedMapIterator<String, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      AbstractMapIteratorDecorator<String, SQLNonTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, SQLNonTransientException>(orderedMapIterator0);
      assertNotNull(abstractMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      boolean boolean0 = IteratorUtils.contains((Iterator<String>) abstractMapIteratorDecorator0, (Object) iterator0);
      assertFalse(boolean0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(orderedMapIterator0.hasPrevious());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("transformer may not be null", "transformer may not be null");
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: transformer may not be null", sQLRecoverableException0.toString());
      assertEquals("transformer may not be null", sQLRecoverableException0.getSQLState());
      assertEquals("transformer may not be null", sQLRecoverableException0.getMessage());
      
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 1);
      Class<Boolean> class1 = Boolean.class;
      classArray0[0] = class1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      
      boolean boolean1 = linkedList0.add(sQLNonTransientConnectionException0);
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedList0.contains(sQLNonTransientConnectionException0));
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      
      InvokerTransformer<Object, SQLRecoverableException> invokerTransformer0 = new InvokerTransformer<Object, SQLRecoverableException>("transformer may not be null", classArray0, sQLNonTransientExceptionArray0);
      assertNotNull(invokerTransformer0);
      assertEquals(0, sQLNonTransientExceptionArray0.length);
      assertEquals(1, classArray0.length);
      assertTrue(linkedList0.contains(sQLNonTransientConnectionException0));
      assertEquals(1, linkedList0.size());
      assertTrue(resettableListIterator0.hasNext());
      assertTrue(resettableListIterator0.hasPrevious());
      
      Iterator<SQLRecoverableException> iterator1 = IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) invokerTransformer0);
      assertNotNull(iterator1);
      assertEquals(0, sQLNonTransientExceptionArray0.length);
      assertEquals(1, classArray0.length);
      assertTrue(linkedList0.contains(sQLNonTransientConnectionException0));
      assertEquals(1, linkedList0.size());
      assertTrue(resettableListIterator0.hasNext());
      assertTrue(resettableListIterator0.hasPrevious());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: transformer may not be null", sQLRecoverableException0.toString());
      assertEquals("transformer may not be null", sQLRecoverableException0.getSQLState());
      assertEquals("transformer may not be null", sQLRecoverableException0.getMessage());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("transformer may not be null", "transformer may not be null", sQLRecoverableException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("transformer may not be null", sQLNonTransientConnectionException1.getMessage());
      assertEquals("transformer may not be null", sQLNonTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: transformer may not be null", sQLNonTransientConnectionException1.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: transformer may not be null", sQLRecoverableException0.toString());
      assertEquals("transformer may not be null", sQLRecoverableException0.getSQLState());
      assertEquals("transformer may not be null", sQLRecoverableException0.getMessage());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("transformer may not be null", "transformer may not be null", 5802);
      assertNotNull(sQLTimeoutException0);
      assertEquals(5802, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: transformer may not be null", sQLTimeoutException0.toString());
      assertEquals("transformer may not be null", sQLTimeoutException0.getSQLState());
      assertEquals("transformer may not be null", sQLTimeoutException0.getMessage());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0, 3, (-1238));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      assertNotNull(iterator0);
      assertEquals(0, iteratorArray0.length);
      
      Iterator<SQLException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLException>) comparator0, (Iterator<? extends SQLException>) iterator0, (Iterator<? extends SQLException>) iterator0);
      assertNotNull(iterator1);
      assertEquals(0, iteratorArray0.length);
      
      int int0 = 0;
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 0, 1291);
      assertNotNull(dataTruncation0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0, 1291, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(linkedList0);
      assertNotNull(identityPredicate0);
      assertEquals(0, linkedList0.size());
      
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(identityPredicate0);
      assertNotNull(notPredicate0);
      assertEquals(0, linkedList0.size());
      
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, notPredicate0);
      assertNotNull(transformedPredicate0);
      assertEquals(0, linkedList0.size());
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      DefaultEquator<ClientInfoStatus> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      Predicate<ClientInfoStatus> predicate0 = EqualPredicate.equalPredicate(clientInfoStatus0, (Equator<ClientInfoStatus>) defaultEquator0);
      assertNotNull(predicate0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) orderedIterator0, (Iterator<? extends SQLTransactionRollbackException>) orderedIterator0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[7];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[4] = locale_FilteringMode4;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[5] = locale_FilteringMode5;
      Locale.FilteringMode locale_FilteringMode6 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[6] = locale_FilteringMode6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(locale_FilteringModeArray0, 1046);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      assertNotNull(enumeration0);
      
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      assertNotNull(iterator0);
      assertEquals(0, iteratorArray0.length);
      
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) iterator0);
      assertNotNull(listIterator0);
      assertEquals(0, iteratorArray0.length);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      LinkedList<SQLInvalidAuthorizationSpecException>[] linkedListArray0 = (LinkedList<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(LinkedList.class, 1);
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      
      boolean boolean0 = linkedList0.retainAll(treeSet0);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      
      linkedListArray0[0] = linkedList0;
      int int0 = 104;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(linkedListArray0, 104);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(244);
      assertNotNull(integer0);
      assertEquals(244, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(244);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(244, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(5, integerArray0.length);
      assertEquals(244, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(0, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(244);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertEquals(244, (int)integer4);
      
      integerArray0[4] = integer4;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      assertNotNull(resettableIterator0);
      assertEquals(5, integerArray0.length);
      
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("]Ym1aiDFsl[U", "W'P", 244, (Throwable) null);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException: ]Ym1aiDFsl[U", sQLSyntaxErrorException0.toString());
      assertEquals(244, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("]Ym1aiDFsl[U", sQLSyntaxErrorException0.getMessage());
      assertEquals("W'P", sQLSyntaxErrorException0.getSQLState());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLSyntaxErrorException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLSyntaxErrorException: ]Ym1aiDFsl[U", sQLSyntaxErrorException0.toString());
      assertEquals(244, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("]Ym1aiDFsl[U", sQLSyntaxErrorException0.getMessage());
      assertEquals("W'P", sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ]Ym1aiDFsl[U", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLSyntaxErrorException: ]Ym1aiDFsl[U", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "W'P", (-1), sQLTimeoutException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals((-1), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("W'P", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ]Ym1aiDFsl[U", sQLSyntaxErrorException0.toString());
      assertEquals(244, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("]Ym1aiDFsl[U", sQLSyntaxErrorException0.getMessage());
      assertEquals("W'P", sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ]Ym1aiDFsl[U", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLSyntaxErrorException: ]Ym1aiDFsl[U", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLFeatureNotSupportedException0, comparator0);
      assertNotNull(predicate0);
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals((-1), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("W'P", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ]Ym1aiDFsl[U", sQLSyntaxErrorException0.toString());
      assertEquals(244, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("]Ym1aiDFsl[U", sQLSyntaxErrorException0.getMessage());
      assertEquals("W'P", sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ]Ym1aiDFsl[U", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLSyntaxErrorException: ]Ym1aiDFsl[U", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals((-1), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("W'P", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ]Ym1aiDFsl[U", sQLSyntaxErrorException0.toString());
      assertEquals(244, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("]Ym1aiDFsl[U", sQLSyntaxErrorException0.getMessage());
      assertEquals("W'P", sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ]Ym1aiDFsl[U", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLSyntaxErrorException: ]Ym1aiDFsl[U", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      predicateArray0[1] = predicate1;
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      assertNotNull(nullIsFalsePredicate0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals((-1), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("W'P", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ]Ym1aiDFsl[U", sQLSyntaxErrorException0.toString());
      assertEquals(244, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("]Ym1aiDFsl[U", sQLSyntaxErrorException0.getMessage());
      assertEquals("W'P", sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ]Ym1aiDFsl[U", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLSyntaxErrorException: ]Ym1aiDFsl[U", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      predicateArray0[2] = (Predicate<Object>) nullIsFalsePredicate0;
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      assertNotNull(treeSet0);
      
      Predicate<Object> predicate2 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      assertNotNull(predicate2);
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      
      predicateArray0[3] = predicate2;
      NullIsFalsePredicate<Object> nullIsFalsePredicate1 = new NullIsFalsePredicate<Object>(predicate0);
      assertNotNull(nullIsFalsePredicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(nullIsFalsePredicate1.equals((Object)nullIsFalsePredicate0));
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals((-1), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("W'P", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ]Ym1aiDFsl[U", sQLSyntaxErrorException0.toString());
      assertEquals(244, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("]Ym1aiDFsl[U", sQLSyntaxErrorException0.getMessage());
      assertEquals("W'P", sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ]Ym1aiDFsl[U", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLSyntaxErrorException: ]Ym1aiDFsl[U", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      Predicate<Object> predicate3 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) nullIsFalsePredicate1);
      assertNotNull(predicate3);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(nullIsFalsePredicate1.equals((Object)nullIsFalsePredicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertNotSame(nullIsFalsePredicate1, nullIsFalsePredicate0);
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals((-1), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("W'P", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ]Ym1aiDFsl[U", sQLSyntaxErrorException0.toString());
      assertEquals(244, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("]Ym1aiDFsl[U", sQLSyntaxErrorException0.getMessage());
      assertEquals("W'P", sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ]Ym1aiDFsl[U", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLSyntaxErrorException: ]Ym1aiDFsl[U", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      predicateArray0[4] = predicate3;
      // Undeclared exception!
      try { 
        AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not contain a null predicate, index 5 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 6);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[1];
      int int0 = 1568;
      int int1 = (-2477);
      int int2 = (-1549);
      DataTruncation dataTruncation0 = new DataTruncation(1568, true, true, (-2477), (-1549));
      assertNotNull(dataTruncation0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      
      String string0 = "delimiter may not be null";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("delimiter may not be null", "delimiter may not be null", hashMap0, dataTruncation0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("delimiter may not be null", sQLClientInfoException0.getMessage());
      assertEquals("delimiter may not be null", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: delimiter may not be null", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNotNull(map0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("delimiter may not be null", sQLClientInfoException0.getMessage());
      assertEquals("delimiter may not be null", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: delimiter may not be null", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      int int3 = dataTruncation0.getIndex();
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(1568, int3);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("delimiter may not be null", map0, sQLClientInfoException0);
      assertNotNull(sQLClientInfoException1);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("delimiter may not be null", sQLClientInfoException0.getMessage());
      assertEquals("delimiter may not be null", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: delimiter may not be null", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: delimiter may not be null", sQLClientInfoException1.toString());
      assertEquals("delimiter may not be null", sQLClientInfoException1.getMessage());
      
      DataTruncation dataTruncation1 = (DataTruncation)dataTruncation0.initCause(sQLClientInfoException1);
      assertNotNull(dataTruncation1);
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertSame(dataTruncation0, dataTruncation1);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException1, sQLClientInfoException0);
      assertSame(dataTruncation1, dataTruncation0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("delimiter may not be null", sQLClientInfoException0.getMessage());
      assertEquals("delimiter may not be null", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: delimiter may not be null", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: delimiter may not be null", sQLClientInfoException1.toString());
      assertEquals("delimiter may not be null", sQLClientInfoException1.getMessage());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      
      sQLWarningArray0[0] = (SQLWarning) dataTruncation0;
      int int4 = 151;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLWarningArray0, (-2477), 151);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      assertNotNull(sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLSyntaxErrorException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLSyntaxErrorException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "y6vIU^R,@", sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLSyntaxErrorException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("y6vIU^R,@", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLFeatureNotSupportedException>) orderedIterator0);
      assertNotNull(iterator0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BoundedIterator<SQLFeatureNotSupportedException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0, 1528L, 0L);
      assertNotNull(boundedIterator0);
      
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) boundedIterator0, 859);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 7);
      iteratorArray0[0] = iterator0;
      iteratorArray0[1] = iterator0;
      iteratorArray0[2] = (Iterator<Integer>) orderedIterator0;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      iteratorArray0[3] = (Iterator<Integer>) orderedIterator0;
      iteratorArray0[4] = (Iterator<Integer>) orderedIterator0;
      iteratorArray0[5] = iterator0;
      iteratorArray0[6] = (Iterator<Integer>) orderedIterator0;
      Iterator<Integer> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      assertNotNull(iterator1);
      assertFalse(iterator1.equals((Object)iterator0));
      assertEquals(7, iteratorArray0.length);
      
      Iterator<Integer> iterator2 = IteratorUtils.unmodifiableIterator(iterator1);
      assertNotNull(iterator2);
      assertFalse(iterator1.equals((Object)iterator0));
      assertFalse(iterator2.equals((Object)iterator0));
      assertFalse(iterator2.equals((Object)iterator1));
      assertEquals(7, iteratorArray0.length);
      
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      int int0 = IteratorUtils.size(iterator2);
      assertFalse(iterator1.equals((Object)iterator0));
      assertFalse(iterator1.equals((Object)iterator2));
      assertFalse(iterator2.equals((Object)iterator0));
      assertFalse(iterator2.equals((Object)iterator1));
      assertEquals(7, iteratorArray0.length);
      assertEquals(0, int0);
      
      boolean boolean1 = IteratorUtils.isEmpty(listIterator0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      assertNotNull(enumeration0);
      
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      assertNotNull(iterator0);
      
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) iterator0);
      assertNotNull(iterator1);
      assertFalse(iterator1.equals((Object)iterator0));
      
      Stack<SQLWarning> stack0 = new Stack<SQLWarning>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      LoopingListIterator<SQLWarning> loopingListIterator0 = new LoopingListIterator<SQLWarning>(stack0);
      assertNotNull(loopingListIterator0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(loopingListIterator0.hasNext());
      assertFalse(loopingListIterator0.hasPrevious());
      assertEquals(0, loopingListIterator0.size());
      
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLWarning>) loopingListIterator0, (-721));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -721
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 0, (Throwable) null);
      assertNotNull(dataTruncation0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      Throwable[] throwableArray0 = dataTruncation0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals(0, throwableArray0.length);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("iterator", "Transformer must not be null", 0, dataTruncation0);
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: iterator", sQLTimeoutException0.toString());
      assertEquals("iterator", sQLTimeoutException0.getMessage());
      assertEquals("Transformer must not be null", sQLTimeoutException0.getSQLState());
      
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLTimeoutException0);
      assertNotNull(identityPredicate0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: iterator", sQLTimeoutException0.toString());
      assertEquals("iterator", sQLTimeoutException0.getMessage());
      assertEquals("Transformer must not be null", sQLTimeoutException0.getSQLState());
      
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(identityPredicate0);
      assertNotNull(notPredicate0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: iterator", sQLTimeoutException0.toString());
      assertEquals("iterator", sQLTimeoutException0.getMessage());
      assertEquals("Transformer must not be null", sQLTimeoutException0.getSQLState());
      
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, identityPredicate0);
      assertNotNull(transformedPredicate0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: iterator", sQLTimeoutException0.toString());
      assertEquals("iterator", sQLTimeoutException0.getMessage());
      assertEquals("Transformer must not be null", sQLTimeoutException0.getSQLState());
      
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      Integer integer0 = IteratorUtils.find((Iterator<Integer>) resettableListIterator0, (Predicate<? super Integer>) identityPredicate0);
      assertNull(integer0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: iterator", sQLTimeoutException0.toString());
      assertEquals("iterator", sQLTimeoutException0.getMessage());
      assertEquals("Transformer must not be null", sQLTimeoutException0.getSQLState());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      StringTokenizer stringTokenizer0 = new StringTokenizer("3k7Cp6j)dg[!#E");
      assertNotNull(stringTokenizer0);
      assertEquals(1, stringTokenizer0.countTokens());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) stringTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Enumeration<BatchUpdateException> enumeration0 = (Enumeration<BatchUpdateException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      assertNotNull(iterator0);
      
      Enumeration<BatchUpdateException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) iterator0);
      assertNotNull(enumeration1);
      assertFalse(enumeration1.equals((Object)enumeration0));
      
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration1);
      assertNotNull(iterator1);
      assertFalse(enumeration1.equals((Object)enumeration0));
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotSame(iterator0, iterator1);
      assertNotSame(iterator1, iterator0);
      
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 1);
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "G{Bo*.-4D=eqrF/V|X", (Throwable) null);
      assertNotNull(sQLRecoverableException0);
      assertEquals("G{Bo*.-4D=eqrF/V|X", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getMessage());
      
      boolean boolean0 = vector0.add(sQLRecoverableException0);
      assertTrue(vector0.contains(sQLRecoverableException0));
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals("[java.sql.SQLRecoverableException: ]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("G{Bo*.-4D=eqrF/V|X", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getMessage());
      
      ReverseListIterator<SQLRecoverableException> reverseListIterator0 = new ReverseListIterator<SQLRecoverableException>(vector0);
      assertNotNull(reverseListIterator0);
      assertTrue(vector0.contains(sQLRecoverableException0));
      assertEquals(10, vector0.capacity());
      assertEquals("[java.sql.SQLRecoverableException: ]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertFalse(reverseListIterator0.hasPrevious());
      assertTrue(reverseListIterator0.hasNext());
      
      iteratorArray0[0] = (Iterator<SQLRecoverableException>) reverseListIterator0;
      Iterator<SQLRecoverableException> iterator2 = IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
      assertNotNull(iterator2);
      assertEquals(1, iteratorArray0.length);
      
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      SQLDataException sQLDataException0 = new SQLDataException(sQLRecoverableException0);
      assertNotNull(sQLDataException0);
      assertEquals("G{Bo*.-4D=eqrF/V|X", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLDataException: java.sql.SQLRecoverableException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLDataException0.getMessage());
      
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      assertNotNull(listIterator0);
      assertEquals("G{Bo*.-4D=eqrF/V|X", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLDataException: java.sql.SQLRecoverableException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLDataException0.getMessage());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 9);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Class<Object> class4 = Object.class;
      classArray0[4] = class4;
      Class<Object> class5 = Object.class;
      classArray0[5] = class5;
      Class<Object> class6 = Object.class;
      classArray0[6] = class6;
      Class<Object> class7 = Object.class;
      classArray0[7] = class7;
      Class<Object> class8 = Object.class;
      classArray0[8] = class8;
      // Undeclared exception!
      try { 
        InvokerTransformer.invokerTransformer("G{Bo*.-4D=eqrF/V|X", (Class<?>[]) classArray0, (Object[]) iteratorArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter types must match the arguments
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      assertNotNull(properties1);
      assertTrue(properties1.equals((Object)properties0));
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      assertNotNull(properties2);
      assertTrue(properties2.equals((Object)properties0));
      assertTrue(properties2.equals((Object)properties1));
      assertTrue(properties2.isEmpty());
      assertEquals(0, properties2.size());
      
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      assertNotNull(predicate0);
      
      Object object0 = properties2.put(predicate0, properties1);
      assertNull(object0);
      assertFalse(properties1.equals((Object)properties2));
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(properties2.equals((Object)properties1));
      assertFalse(properties2.equals((Object)properties0));
      assertNotSame(properties1, properties0);
      assertNotSame(properties1, properties2);
      assertNotSame(properties2, properties1);
      assertNotSame(properties2, properties0);
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertFalse(properties2.isEmpty());
      assertEquals(1, properties2.size());
      
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      assertNotNull(properties3);
      assertFalse(properties3.equals((Object)properties2));
      assertTrue(properties3.equals((Object)properties1));
      assertTrue(properties3.equals((Object)properties0));
      assertTrue(properties3.isEmpty());
      assertEquals(0, properties3.size());
      
      propertiesArray0[3] = properties3;
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = properties2.put(properties1, object1);
      assertNull(object2);
      assertTrue(properties1.equals((Object)properties3));
      assertFalse(properties1.equals((Object)properties2));
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(properties2.equals((Object)properties1));
      assertFalse(properties2.equals((Object)properties3));
      assertFalse(properties2.equals((Object)properties0));
      assertNotSame(properties1, properties0);
      assertNotSame(properties1, properties2);
      assertNotSame(properties1, properties3);
      assertNotSame(properties2, properties1);
      assertNotSame(properties2, properties3);
      assertNotSame(properties2, properties0);
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertFalse(properties2.isEmpty());
      assertEquals(2, properties2.size());
      
      Properties properties4 = new Properties();
      assertNotNull(properties4);
      assertFalse(properties4.equals((Object)properties2));
      assertTrue(properties4.equals((Object)properties1));
      assertTrue(properties4.equals((Object)properties3));
      assertTrue(properties4.equals((Object)properties0));
      assertEquals(0, properties4.size());
      assertTrue(properties4.isEmpty());
      
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      assertNotNull(properties5);
      assertTrue(properties5.equals((Object)properties4));
      assertTrue(properties5.equals((Object)properties0));
      assertTrue(properties5.equals((Object)properties3));
      assertFalse(properties5.equals((Object)properties2));
      assertTrue(properties5.equals((Object)properties1));
      assertEquals(0, properties5.size());
      assertTrue(properties5.isEmpty());
      
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      assertNotNull(properties6);
      assertTrue(properties6.equals((Object)properties3));
      assertTrue(properties6.equals((Object)properties1));
      assertFalse(properties6.equals((Object)properties2));
      assertTrue(properties6.equals((Object)properties4));
      assertTrue(properties6.equals((Object)properties0));
      assertTrue(properties6.equals((Object)properties5));
      assertEquals(0, properties6.size());
      assertTrue(properties6.isEmpty());
      
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      assertNotNull(properties7);
      assertTrue(properties7.equals((Object)properties3));
      assertTrue(properties7.equals((Object)properties1));
      assertFalse(properties7.equals((Object)properties2));
      assertTrue(properties7.equals((Object)properties5));
      assertTrue(properties7.equals((Object)properties6));
      assertTrue(properties7.equals((Object)properties0));
      assertTrue(properties7.equals((Object)properties4));
      assertTrue(properties7.isEmpty());
      assertEquals(0, properties7.size());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNotNull(sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransientConnectionException0);
      assertNotNull(sQLDataException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: java.sql.SQLTransientConnectionException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      
      Object object3 = properties4.put(properties1, sQLDataException0);
      assertNull(object3);
      assertTrue(properties1.equals((Object)properties6));
      assertTrue(properties1.equals((Object)properties3));
      assertFalse(properties1.equals((Object)properties4));
      assertTrue(properties1.equals((Object)properties7));
      assertFalse(properties1.equals((Object)properties2));
      assertTrue(properties1.equals((Object)properties5));
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(properties4.equals((Object)properties2));
      assertFalse(properties4.equals((Object)properties3));
      assertFalse(properties4.equals((Object)properties6));
      assertFalse(properties4.equals((Object)properties0));
      assertFalse(properties4.equals((Object)properties5));
      assertFalse(properties4.equals((Object)properties1));
      assertFalse(properties4.equals((Object)properties7));
      assertNotSame(properties1, properties4);
      assertNotSame(properties1, properties0);
      assertNotSame(properties1, properties5);
      assertNotSame(properties1, properties2);
      assertNotSame(properties1, properties3);
      assertNotSame(properties1, properties7);
      assertNotSame(properties1, properties6);
      assertNotSame(properties4, properties2);
      assertNotSame(properties4, properties3);
      assertNotSame(properties4, properties6);
      assertNotSame(properties4, properties0);
      assertNotSame(properties4, properties5);
      assertNotSame(properties4, properties1);
      assertNotSame(properties4, properties7);
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: java.sql.SQLTransientConnectionException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertFalse(properties4.isEmpty());
      assertEquals(1, properties4.size());
      
      propertiesArray0[7] = properties7;
      Enumeration<?> enumeration0 = properties0.propertyNames();
      assertNotNull(enumeration0);
      assertTrue(properties0.equals((Object)properties3));
      assertFalse(properties0.equals((Object)properties4));
      assertTrue(properties0.equals((Object)properties6));
      assertTrue(properties0.equals((Object)properties7));
      assertTrue(properties0.equals((Object)properties1));
      assertFalse(properties0.equals((Object)properties2));
      assertTrue(properties0.equals((Object)properties5));
      assertNotSame(properties0, properties4);
      assertNotSame(properties0, properties5);
      assertNotSame(properties0, properties2);
      assertNotSame(properties0, properties3);
      assertNotSame(properties0, properties6);
      assertNotSame(properties0, properties7);
      assertNotSame(properties0, properties1);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      Properties properties8 = new Properties();
      assertNotNull(properties8);
      assertTrue(properties8.equals((Object)properties5));
      assertTrue(properties8.equals((Object)properties0));
      assertFalse(properties8.equals((Object)properties4));
      assertTrue(properties8.equals((Object)properties3));
      assertTrue(properties8.equals((Object)properties1));
      assertTrue(properties8.equals((Object)properties7));
      assertFalse(properties8.equals((Object)properties2));
      assertTrue(properties8.equals((Object)properties6));
      assertEquals(0, properties8.size());
      assertTrue(properties8.isEmpty());
      
      propertiesArray0[8] = properties8;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      assertNotNull(resettableIterator0);
      assertEquals(9, propertiesArray0.length);
      
      ResettableIterator<ArrayDeque<Predicate<SQLException>>> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
      
      Integer integer0 = new Integer(1200);
      assertNotNull(integer0);
      assertEquals(1200, (int)integer0);
      
      ResettableIterator<Integer> resettableIterator2 = IteratorUtils.singletonIterator(integer0);
      assertNotNull(resettableIterator2);
      
      Iterator<Integer> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Integer>) resettableIterator2);
      assertNotNull(iterator0);
      
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      int int0 = IteratorUtils.size(listIterator0);
      assertEquals(0, int0);
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) properties1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Throwable throwable0 = null;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", (Throwable) null);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(linkedList0);
      assertNotNull(identityPredicate0);
      assertEquals(0, linkedList0.size());
      
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(identityPredicate0);
      assertNotNull(notPredicate0);
      assertEquals(0, linkedList0.size());
      
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, notPredicate0);
      assertNotNull(transformedPredicate0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = IteratorUtils.find(iterator0, (Predicate<? super Integer>) transformedPredicate0);
      assertNull(integer0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLClientInfoException>) vector0);
      assertNotNull(resettableListIterator0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      assertNotNull(enumeration0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) vector0);
      assertNotNull(iterator0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      // Undeclared exception!
      try { 
        NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not contain a null predicate, index 0 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      IteratorUtils.loopingListIterator((List<BatchUpdateException>) vector0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashtable0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((String) null, hashtable0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(hashtable0, sQLInvalidAuthorizationSpecException0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("", hashtable0, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("", hashtable0, sQLClientInfoException2);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException(hashtable0, sQLClientInfoException2);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException(hashtable0);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException("*~m?Gv%v0/|]x", "org.apache.commons.collections4.bidimap.TreeBidiMap$Inverse", hashMap0);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException7;
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException8 = new SQLClientInfoException("*~m?Gv%v0/|]x", "", hashMap1, sQLClientInfoException6);
      sQLClientInfoExceptionArray0[8] = sQLClientInfoException8;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) listIterator0);
      Collection<String> collection0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("T']>\"m[{G");
      iIOMetadataNode0.getTagName();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      iIOMetadataNode0.getElementsByTagNameNS("T']>\"m[{G", "T']>\"m[{G");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) null, (Iterator<? extends Locale.FilteringMode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int int0 = 2648;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((String[]) null, 2648);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 6);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[9];
      String string0 = "=vrUr+&9#";
      int[] intArray0 = new int[9];
      intArray0[0] = (-955);
      intArray0[1] = (-1182);
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = 3216;
      intArray0[5] = 0;
      intArray0[6] = (-1160);
      intArray0[7] = (-1);
      intArray0[8] = 31;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("r+Ch_vG?PRbuspW_4ZU", "r+Ch_vG?PRbuspW_4ZU");
      SQLException sQLException0 = new SQLException("r+Ch_vG?PRbuspW_4ZU", "X-yV Q$-#ZE&O", sQLIntegrityConstraintViolationException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("=vrUr+&9#", intArray0, sQLException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException();
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("r+Ch_vG?PRbuspW_4ZU", "vpsn4I>^\"[N(*zND,", intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("X-yV Q$-#ZE&O", "4FH", 0, intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException(",,0Y", intArray0, batchUpdateException3);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("_e$@+oxtqg", "4FH", intArray0);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1182);
      longArray0[1] = 1L;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException("=vrUr+&9#", "j'JQ^W9dZV/o$xN", 435, longArray0, batchUpdateException0);
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      BatchUpdateException batchUpdateException7 = new BatchUpdateException("r+Ch_vG?PRbuspW_4ZU", "", 0, intArray0);
      batchUpdateExceptionArray0[7] = batchUpdateException7;
      BatchUpdateException batchUpdateException8 = new BatchUpdateException((String) null, "9SnRQcPWQst#q", (-1), intArray0);
      batchUpdateExceptionArray0[8] = batchUpdateException8;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0, 0);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) resettableIterator0;
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      HashSet<SQLNonTransientConnectionException> hashSet0 = new HashSet<SQLNonTransientConnectionException>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0);
      Stack<StringTokenizer> stack0 = new Stack<StringTokenizer>();
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) stack0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends StringTokenizer>) resettableIterator0, (Predicate<? super StringTokenizer>) uniquePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends StringTokenizer>) iterator0, (Transformer<? super StringTokenizer, ? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashtable0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("n", hashtable0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("c2^]vgDS", hashtable0, sQLClientInfoException2);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("n", hashtable0);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException("c2^]vgDS", hashtable0, sQLClientInfoException3);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException7;
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", sQLClientInfoException1);
      SQLClientInfoException sQLClientInfoException8 = new SQLClientInfoException("n", "", (-1), hashtable0, sQLTransientException0);
      sQLClientInfoExceptionArray0[8] = sQLClientInfoException8;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLClientInfoException>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 5);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", sQLNonTransientConnectionException0);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException1, true);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) singletonIterator0;
      OrderedMapIterator<SQLFeatureNotSupportedException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[1] = (Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0;
      iteratorArray0[2] = (Iterator<SQLFeatureNotSupportedException>) singletonIterator0;
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException0;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0, 0, 0);
      iteratorArray0[3] = (Iterator<SQLFeatureNotSupportedException>) objectArrayListIterator0;
      Transformer<SQLIntegrityConstraintViolationException, Integer> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends Integer>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 5);
      String string0 = "";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", sQLNonTransientConnectionException0);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException1, true);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) singletonIterator0;
      OrderedMapIterator<SQLFeatureNotSupportedException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[1] = (Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0;
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.unmodifiableIterator(iteratorArray0[1]);
      iteratorArray0[2] = iterator0;
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException0;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0, 0, 0);
      iteratorArray0[3] = (Iterator<SQLFeatureNotSupportedException>) objectArrayListIterator0;
      Transformer<SQLIntegrityConstraintViolationException, Integer> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends Integer>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.descendingIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      DataTruncation dataTruncation0 = new DataTruncation(100, false, false, (-2553), 1, sQLInvalidAuthorizationSpecException0);
      dataTruncation0.getDataSize();
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      ListIterator<String> listIterator1 = IteratorUtils.singletonListIterator("80~WkJmTN,gc%");
      IteratorUtils.boundedIterator((Iterator<? extends String>) listIterator1, (long) 100, (long) 100);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator");
      dataTruncation0.getIndex();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      IteratorUtils.getIterator(sQLTimeoutException0);
      IteratorUtils.isEmpty(listIterator0);
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ListIterator<Properties> listIterator2 = IteratorUtils.toListIterator((Iterator<? extends Properties>) orderedIterator0);
      assertFalse(listIterator2.hasNext());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 0, (Throwable) null);
      dataTruncation0.getSuppressed();
      dataTruncation0.getDataSize();
      IteratorUtils.singletonListIterator(dataTruncation0);
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator");
      BoundedIterator<String> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends String>) listIterator0, 0L, (long) 0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator");
      dataTruncation0.getIndex();
      IteratorUtils.getIterator((Object) null);
      IteratorUtils.isEmpty(boundedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-2165), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = "org.apache.commons.collections4.bidimap.AbstractDualBidiMap";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.bidimap.AbstractDualBidiMap");
      int int0 = 0;
      int int1 = (-313);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0, 0, (-313));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      properties2.put(predicate0, properties1);
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Object object0 = new Object();
      properties2.put(properties1, object0);
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransientConnectionException0);
      properties4.put(properties1, sQLDataException0);
      propertiesArray0[7] = properties7;
      properties0.propertyNames();
      Properties properties8 = new Properties();
      Integer integer0 = new Integer((-656));
      properties7.put(integer0, predicate0);
      propertiesArray0[8] = properties8;
      IteratorUtils.arrayIterator(propertiesArray0);
      IteratorUtils.emptyIterator();
      Integer integer1 = new Integer(1200);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer1);
      IteratorUtils.unmodifiableIterator((Iterator<Integer>) resettableIterator0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.size(listIterator0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties5);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      IteratorUtils.singletonListIterator(predicate0);
      IteratorUtils.singletonIterator((SQLException) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLException[]) null, 4748);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 0, (Throwable) null);
      dataTruncation0.getSuppressed();
      dataTruncation0.getDataSize();
      IteratorUtils.singletonListIterator(dataTruncation0);
      String string0 = "org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator";
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator");
      BoundedIterator<String> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends String>) listIterator0, 0L, (long) 0);
      dataTruncation0.getIndex();
      IteratorUtils.getIterator((Object) null);
      IteratorUtils.isEmpty(boundedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-2165), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 0, (Throwable) null);
      dataTruncation0.getSuppressed();
      dataTruncation0.getDataSize();
      IteratorUtils.singletonListIterator((DataTruncation) null);
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator");
      IteratorUtils.boundedIterator((Iterator<? extends String>) listIterator0, 0L, (long) 0);
      int int0 = new Integer(0);
      IteratorUtils.getIterator((Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.getIterator((Object) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-2165), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) resettableIterator0, 1393L, 1393L);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }
}
