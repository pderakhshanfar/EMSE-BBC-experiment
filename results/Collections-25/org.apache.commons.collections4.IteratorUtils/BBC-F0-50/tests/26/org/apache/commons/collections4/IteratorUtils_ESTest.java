/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:34:33 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      OrderedMapIterator<SQLDataException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "$Av*,j\"", (Throwable) null);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      ListIterator<SQLFeatureNotSupportedException> listIterator1 = IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) orderedMapIterator0, (Iterator<? extends SQLNonTransientException>) listIterator0, (Iterator<? extends SQLNonTransientException>) listIterator1);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Comparator<SQLFeatureNotSupportedException> comparator0 = (Comparator<SQLFeatureNotSupportedException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLException sQLException0 = new SQLException("\"U)G\"T~38a|<eZ}3/}2", "y6Y8y28", 1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("y6Y8y28", "\"U)G\"T~38a|<eZ}3/}2", (-1865), sQLException0);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      MapIterator<SQLTimeoutException, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 1);
      MapIterator<SQLNonTransientConnectionException, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) mapIterator0;
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MapIterator<SQLTimeoutException, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLTimeoutException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, BatchUpdateException>(mapIterator0);
      MapIterator<SQLTimeoutException, BatchUpdateException> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTimeoutException, BatchUpdateException>) abstractMapIteratorDecorator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[4];
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<IIOMetadataNode>) objectArrayListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ListIterator<SQLException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<SQLException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(listIterator1.equals((Object)listIterator0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("Collection must not be null");
      Stack<Object> stack0 = new Stack<Object>();
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Object>) stack0);
      String string0 = IteratorUtils.toString((Iterator<Object>) resettableListIterator0, (Transformer<? super Object, String>) transformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultEquator<IIOMetadataNode> defaultEquator0 = DefaultEquator.defaultEquator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("#h %v=", "yZX");
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      DefaultEquator<Object> defaultEquator1 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(defaultEquator0, defaultEquator1);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) singletonListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) equalPredicate0);
      ListIteratorWrapper<SQLFeatureNotSupportedException> listIteratorWrapper0 = new ListIteratorWrapper<SQLFeatureNotSupportedException>(listIterator0);
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) listIteratorWrapper0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ConstantTransformer.nullTransformer();
      ListIterator<Transformer<Object, SQLFeatureNotSupportedException>> listIterator0 = IteratorUtils.singletonListIterator(transformer0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      HashMap<Object, SQLTimeoutException> hashMap0 = new HashMap<Object, SQLTimeoutException>();
      Transformer<Object, SQLTimeoutException> transformer1 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLTimeoutException>) hashMap0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.transformedIterator((Iterator<?>) listIterator0, (Transformer<? super Object, ? extends SQLTimeoutException>) transformer1);
      SQLTransientException[] sQLTransientExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLTransientException>) iterator0, class0);
      assertEquals(1, sQLTransientExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("", "", (-1));
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.singletonIterator(sQLDataException0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) resettableIterator0);
      ArrayDeque<SQLException> arrayDeque0 = new ArrayDeque<SQLException>();
      Iterator<SQLException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0, (Collection<? super SQLException>) arrayDeque0);
      Object[] objectArray0 = IteratorUtils.toArray(iterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("5XhxHf? =.T(%:S;1?", "5XhxHf? =.T(%:S;1?");
      Transformer<Object, SQLTimeoutException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer0);
      Iterator<SQLTransientException> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientException>) iterator0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Hashtable<SQLSyntaxErrorException, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLSyntaxErrorException, SQLTransactionRollbackException>();
      EntrySetMapIterator<SQLSyntaxErrorException, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<SQLSyntaxErrorException, SQLTransactionRollbackException>(hashtable0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLSyntaxErrorException>) entrySetMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("");
      boolean boolean0 = IteratorUtils.contains((Iterator<String>) singletonIterator0, (Object) "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 2);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[9];
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) resettableIterator0;
      MapIterator<SQLNonTransientConnectionException, SQLNonTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) mapIterator0;
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TreeSet<StringTokenizer>[] treeSetArray0 = (TreeSet<StringTokenizer>[]) Array.newInstance(TreeSet.class, 3);
      ResettableListIterator<TreeSet<StringTokenizer>> resettableListIterator0 = IteratorUtils.arrayListIterator(treeSetArray0, 0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashSet<Boolean>[] hashSetArray0 = (HashSet<Boolean>[]) Array.newInstance(HashSet.class, 4);
      ResettableIterator<HashSet<Boolean>> resettableIterator0 = IteratorUtils.arrayIterator(hashSetArray0, 1, 1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("ListIterator must not be null", "$Av*,j\"", (Throwable) null);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<?>) listIterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLSyntaxErrorException>[] classArray0 = (Class<SQLSyntaxErrorException>[]) Array.newInstance(Class.class, 3);
      InvokerTransformer<Object, Predicate<Object>> invokerTransformer0 = new InvokerTransformer<Object, Predicate<Object>>("", classArray0, classArray0);
      Iterator<Predicate<Object>> iterator0 = IteratorUtils.objectGraphIterator((Predicate<Object>) instanceofPredicate0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Predicate<Object>>) iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class org.apache.commons.collections4.functors.InstanceofPredicate' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLWarning>) null, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<ComparatorPredicate.Criterion>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Integer[] integerArray0 = new Integer[5];
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Integer>) objectArrayListIterator0, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ConstantTransformer.nullTransformer();
      ListIterator<Transformer<Object, SQLFeatureNotSupportedException>> listIterator0 = IteratorUtils.singletonListIterator(transformer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      SQLDataException sQLDataException0 = new SQLDataException();
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLDataException0, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      ListIterator<Object> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<?>) listIterator0, (Predicate<? super Object>) comparatorPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Object>) listIterator1, (Predicate<? super Object>) allPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ComparatorPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Iterator<SQLIntegrityConstraintViolationException>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.emptyIterator();
      ListIteratorWrapper<SQLTimeoutException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTimeoutException>(resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) listIteratorWrapper0, 1206L, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) null, (-953L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[9];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 1887, 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((DataTruncation[]) null, 61);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(",S?0k'i$idI%K1e~O", "&f&uv]9Y");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", sQLTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLSyntaxErrorException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 28);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransactionRollbackException[]) null, 53, 53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[8];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLExceptionArray0, 769);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1607, 6147);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      int[] intArray0 = new int[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("L]@'( Ae", "L]@'( Ae", 4907, intArray0, sQLTransientException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      SQLDataException sQLDataException0 = new SQLDataException();
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 4);
      Transformer<SQLException, ClientInfoStatus> transformer0 = InvokerTransformer.invokerTransformer("Collection must not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) singletonListIterator0, (Transformer<? super SQLDataException, ? extends ClientInfoStatus>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply(iterator0, (Closure<? super ClientInfoStatus>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Collection must not be null' on 'class java.sql.SQLDataException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>((Object) null, true);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("d.JLBLi<Pskk<i0.");
      String string0 = IteratorUtils.toString((Iterator<Object>) singletonIterator0, (Transformer<? super Object, String>) transformer0, "c6GJn4+", "d.JLBLi<Pskk<i0.", "c6GJn4+");
      assertFalse(singletonIterator0.hasNext());
      assertEquals("d.JLBLi<Pskk<i0.nullc6GJn4+", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DefaultEquator<IIOMetadataNode> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<IIOMetadataNode> equalPredicate0 = new EqualPredicate<IIOMetadataNode>(iIOMetadataNode0, defaultEquator0);
      PredicateTransformer<IIOMetadataNode> predicateTransformer0 = new PredicateTransformer<IIOMetadataNode>(equalPredicate0);
      Boolean boolean0 = predicateTransformer0.transform(iIOMetadataNode0);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(boolean0, false);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) singletonIterator0, (Transformer<? super Object, String>) transformer0, "", "", "c6GJn4+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.lang.Boolean' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("_\":,\"8_.Rtll;m&OTe");
      String string0 = IteratorUtils.toString((Iterator<Object>) null, (Transformer<? super Object, String>) transformer0, "org.apache.commons.collections4.functors.AllPredicate", "org.apache.commons.collections4.functors.AllPredicate", " was null");
      assertEquals("org.apache.commons.collections4.functors.AllPredicate was null", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashSet<SQLIntegrityConstraintViolationException> hashSet0 = new HashSet<SQLIntegrityConstraintViolationException>();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(hashSet0);
      PriorityQueue<ComparatorPredicate.Criterion> priorityQueue0 = new PriorityQueue<ComparatorPredicate.Criterion>();
      LoopingIterator<ComparatorPredicate.Criterion> loopingIterator0 = new LoopingIterator<ComparatorPredicate.Criterion>(priorityQueue0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<ComparatorPredicate.Criterion>) loopingIterator0, (Predicate<? super ComparatorPredicate.Criterion>) equalPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ListIterator<SQLTransientException> listIterator0 = EmptyListIterator.emptyListIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) listIterator0, comparator0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<ComparatorPredicate.Criterion>) null, (Predicate<? super ComparatorPredicate.Criterion>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableIterator0, 3420);
      assertFalse(list0.contains(3420));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("qbg>y9YzU6;I\"", ";");
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      BoundedIterator<SQLTimeoutException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0, 0L, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Hashtable<SQLException, SQLTransientConnectionException> hashtable0 = new Hashtable<SQLException, SQLTransientConnectionException>();
      EntrySetMapIterator<SQLException, SQLTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLException, SQLTransientConnectionException>(hashtable0);
      Factory<String> factory0 = ConstantFactory.constantFactory("3r;");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) entrySetMapIterator0, (Transformer<? super SQLException, String>) transformer0, "3r;", "Node must not be null", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[4];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("#@m!@\"(To6}ueMob>", "#@m!@\"(To6}ueMob>", 3420, intArray0);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(batchUpdateException0, true);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("#@m!@\"(To6}ueMob>");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) singletonIterator0, (Transformer<? super Object, String>) transformer0, "", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Hashtable<SQLException, SQLTransientConnectionException> hashtable0 = new Hashtable<SQLException, SQLTransientConnectionException>();
      EntrySetMapIterator<SQLException, SQLTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLException, SQLTransientConnectionException>(hashtable0);
      Factory<String> factory0 = ConstantFactory.constantFactory((String) null);
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) entrySetMapIterator0, (Transformer<? super SQLException, String>) transformer0, (String) null, (String) null, "FilterListIterator.set(Object) is not supported.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(instanceofPredicate0, false);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) singletonIterator0, (Transformer<? super Object, String>) null, "", "", "remove() method is not supported for an ObjectArrayIterator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ConstantTransformer.nullTransformer();
      ListIterator<Transformer<Object, SQLFeatureNotSupportedException>> listIterator0 = IteratorUtils.singletonListIterator(transformer0);
      int int0 = IteratorUtils.size(listIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      OrderedMapIterator<SQLDataException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) orderedMapIterator0, 479);
      Enumeration<SQLNonTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) orderedMapIterator0);
      Iterator<SQLException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0, (Collection<? super SQLException>) list0);
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SingletonListIterator<SQLNonTransientException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientException>(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLNonTransientException>) singletonListIterator0, 17);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 16
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ConstantTransformer.nullTransformer();
      ListIterator<Transformer<Object, SQLFeatureNotSupportedException>> listIterator0 = IteratorUtils.singletonListIterator(transformer0);
      boolean boolean0 = IteratorUtils.isEmpty(listIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Hashtable<SQLIntegrityConstraintViolationException, Transformer<Object, SQLFeatureNotSupportedException>> hashtable0 = new Hashtable<SQLIntegrityConstraintViolationException, Transformer<Object, SQLFeatureNotSupportedException>>();
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, Transformer<Object, SQLFeatureNotSupportedException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, Transformer<Object, SQLFeatureNotSupportedException>>(hashtable0);
      boolean boolean0 = IteratorUtils.isEmpty(entrySetMapIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("1NlJ>R1V316", "DxQ?*N//dkk.", (-2129));
      Transformer<SQLIntegrityConstraintViolationException, SQLIntegrityConstraintViolationException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.objectGraphIterator(sQLIntegrityConstraintViolationException0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      boolean boolean0 = IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>((SQLIntegrityConstraintViolationException) null);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) singletonListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = linkedList0.descendingIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      ResettableListIterator<Class<SQLIntegrityConstraintViolationException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      SkippingIterator<Class<SQLIntegrityConstraintViolationException>> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Class<SQLIntegrityConstraintViolationException>>) resettableListIterator0, (long) 70);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLDataExceptionArray0[1]);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Class<SQLIntegrityConstraintViolationException>>) skippingIterator0, (Predicate<? super Class<SQLIntegrityConstraintViolationException>>) identityPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("Te{E_");
      Transformer<BatchUpdateException, Transformer<SQLNonTransientConnectionException, Transformer<Object, SQLFeatureNotSupportedException>>> transformer0 = ExceptionTransformer.exceptionTransformer();
      boolean boolean0 = IteratorUtils.contains((Iterator<String>) singletonIterator0, (Object) transformer0);
      assertFalse(singletonIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ConstantTransformer.nullTransformer();
      ListIterator<Transformer<Object, SQLFeatureNotSupportedException>> listIterator0 = IteratorUtils.singletonListIterator(transformer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      ListIterator<Object> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<?>) listIterator0, (Predicate<? super Object>) allPredicate0);
      IteratorUtils.find((Iterator<Object>) listIterator1, (Predicate<? super Object>) allPredicate0);
      assertFalse(listIterator1.hasNext());
      assertTrue(listIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      OrderedIterator<PriorityQueue<String>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<PriorityQueue<String>>) orderedIterator0, (Predicate<? super PriorityQueue<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      Object object0 = IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) equalPredicate0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      ListIterator<ClientInfoStatus> listIterator0 = IteratorUtils.singletonListIterator(clientInfoStatus0);
      IteratorUtils.apply((Iterator<ClientInfoStatus>) listIterator0, (Closure<? super ClientInfoStatus>) closure0);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<ClientInfoStatus>) null, (Closure<? super ClientInfoStatus>) closure0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      OrderedMapIterator<ClientInfoStatus, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<ClientInfoStatus>) orderedMapIterator0, (Closure<? super ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Hashtable<SQLException, Closure<Object>> hashtable0 = new Hashtable<SQLException, Closure<Object>>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(hashtable0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ConstantTransformer.nullTransformer();
      ListIterator<Transformer<Object, SQLFeatureNotSupportedException>> listIterator0 = IteratorUtils.singletonListIterator(transformer0);
      Enumeration<Transformer<Object, SQLFeatureNotSupportedException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Transformer<Object, SQLFeatureNotSupportedException>>) listIterator0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(linkedList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Hashtable<SQLIntegrityConstraintViolationException, Transformer<Object, SQLFeatureNotSupportedException>> hashtable0 = new Hashtable<SQLIntegrityConstraintViolationException, Transformer<Object, SQLFeatureNotSupportedException>>();
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, Transformer<Object, SQLFeatureNotSupportedException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, Transformer<Object, SQLFeatureNotSupportedException>>(hashtable0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(entrySetMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OrderedIterator<SQLException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) orderedIterator0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) null, 3420);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<SQLTransientException> class0 = SQLTransientException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransientException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ListIterator<SQLTransientException> listIterator0 = EmptyListIterator.emptyListIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) listIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      ListIterator<ClientInfoStatus> listIterator0 = IteratorUtils.singletonListIterator(clientInfoStatus0);
      ListIterator<ClientInfoStatus> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends ClientInfoStatus>) listIterator0);
      assertTrue(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("Kb #U/b");
      Iterable<String> iterable0 = IteratorUtils.asIterable((Iterator<? extends String>) singletonIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ListIterator<SQLTransientException> listIterator0 = EmptyListIterator.emptyListIterator();
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) listIterator0, 3420);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLException>) null, (Collection<? super SQLException>) list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Transformer<Object, IIOMetadataNode> transformer0 = InvokerTransformer.invokerTransformer("Kb #U/b", (Class<?>[]) null, (Object[]) null);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0, (Collection<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ConstantTransformer.nullTransformer();
      ListIterator<Transformer<Object, SQLFeatureNotSupportedException>> listIterator0 = IteratorUtils.singletonListIterator(transformer0);
      Enumeration<Transformer<Object, SQLFeatureNotSupportedException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Transformer<Object, SQLFeatureNotSupportedException>>) listIterator0);
      Iterator<Transformer<Object, SQLFeatureNotSupportedException>> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Transformer<Object, SQLFeatureNotSupportedException>>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      ResettableIterator<String> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends String>) vector0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[3];
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_CategoryArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Locale.Category>) resettableListIterator0, (Predicate<? super Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) instanceofPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      StringTokenizer stringTokenizer0 = new StringTokenizer("U4=", "Hd15VjxCfua?mDDF");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends StringTokenizer>) singletonListIterator0, (Predicate<? super StringTokenizer>) predicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("'3/GI}R=p)V5Wt+", "'3/GI}R=p)V5Wt+");
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 6);
      InvokerTransformer<Object, StringTokenizer> invokerTransformer0 = new InvokerTransformer<Object, StringTokenizer>("'3/GI}R=p)V5Wt+", classArray0, classArray0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends StringTokenizer>) iterator0, (Predicate<? super StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLException sQLException0 = new SQLException("", "X,");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", sQLException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("X,", "BC/%O un4 ip|DK", (-1), sQLIntegrityConstraintViolationException0);
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<?>) singletonListIterator0, (Transformer<? super Object, ? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Transformer<SQLException, SQLInvalidAuthorizationSpecException> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("5B9S!CZM(T8GE!");
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) listIterator0, (Iterator<? extends String>) listIterator0, (Iterator<? extends String>) listIterator0);
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) zippingIterator0);
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      Iterable<String> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends String>) resettableListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ConstantTransformer<Integer, String> constantTransformer0 = new ConstantTransformer<Integer, String>("");
      String string0 = IteratorUtils.toString((Iterator<Integer>) null, (Transformer<? super Integer, String>) constantTransformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Transformer<Object, SQLTimeoutException> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) transformer0, (-1), 2335);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Iterator<SQLIntegrityConstraintViolationException>[]) null, 28);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Iterator<?> iterator0 = IteratorUtils.getIterator(closure0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableIterator0, defaultEquator0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(iIOMetadataNode0);
      predicateArray0[1] = (Predicate<Object>) identityPredicate0;
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicateArray0[0], equalPredicate0);
      predicateArray0[2] = (Predicate<Object>) andPredicate0;
      predicateArray0[3] = (Predicate<Object>) identityPredicate0;
      predicateArray0[4] = (Predicate<Object>) equalPredicate0;
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>((Transformer<? super Object, Boolean>) null);
      predicateArray0[5] = (Predicate<Object>) transformerPredicate0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[6] = (Predicate<Object>) comparatorPredicate0;
      predicateArray0[7] = predicateArray0[1];
      Predicate<SQLTransientException> predicate0 = OnePredicate.onePredicate((Predicate<? super SQLTransientException>[]) predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTransactionRollbackException>) null, (Predicate<? super SQLTransactionRollbackException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<ClientInfoStatus, SQLNonTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((ComparatorPredicate.Criterion[]) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkedHashSet<SQLClientInfoException>[] linkedHashSetArray0 = (LinkedHashSet<SQLClientInfoException>[]) Array.newInstance(LinkedHashSet.class, 8);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(linkedHashSetArray0, 12, 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[4];
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      String string0 = IteratorUtils.toString((Iterator<IIOMetadataNode>) objectArrayListIterator0);
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals("[null, null, null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) arrayList0);
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int[] intArray0 = new int[6];
      DataTruncation dataTruncation0 = new DataTruncation(1896, true, true, 0, 4);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", intArray0, dataTruncation0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 4, batchUpdateException0);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0, true);
      BoundedIterator<SQLTransientException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTransientException>) singletonIterator0, 2131L);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLTransientException>) boundedIterator0, (Predicate<? super SQLTransientException>) predicate0);
      assertFalse(singletonIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
      Iterator<SQLTimeoutException> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 16, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[3];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, (-1159));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("=C^/V>s");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLDataException0, 2151);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Vector<SQLFeatureNotSupportedException> vector0 = new Vector<SQLFeatureNotSupportedException>();
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>(vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) arrayList0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      SQLDataException[] sQLDataExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLDataException>) orderedIterator0, class0);
      assertEquals(0, sQLDataExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[0];
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLWarningArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Vector<SQLFeatureNotSupportedException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }
}
