/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 22:09:29 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Spliterator;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "ZDFwa2i'");
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("suffix may not be null", (String) null, (-4650), sQLRecoverableException1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("suffix may not be null", (String) null, sQLTimeoutException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLNonTransientConnectionException0);
      vector0.add(sQLTransactionRollbackException0);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) vector0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) resettableListIterator0, (Class<SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      Iterator<?> iterator0 = IteratorUtils.getIterator(class0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(anyPredicate0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      anyPredicate0.getPredicates();
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(nullIsTruePredicate0, transformer0, transformer0);
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) nullIsTruePredicate0, (Transformer<? super Object, ? extends String>) ifTransformer0, (Transformer<? super Object, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Hashtable<PriorityQueue, TreeSet>>) iterator0, (Transformer<? super Hashtable<PriorityQueue, TreeSet>, String>) transformer1, "", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AnyPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      Iterator<?> iterator0 = IteratorUtils.getIterator(class0);
      IteratorUtils.toArray(iterator0);
      SQLDataException sQLDataException0 = new SQLDataException(".SST;fn9~1xSAD0 ", "InstantiateFactory: Constructor threw an exception", (-1477));
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTimeoutExceptionArray0[2]);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      int int0 = 1;
      IteratorUtils.get((Iterator<SQLTimeoutException>) resettableIterator0, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[1];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0, 1);
      IteratorUtils.size(objectArrayListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object[]) sQLNonTransientExceptionArray0, 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-46);
      byteArray0[0] = (byte) (-46);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-6);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ListIterator must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTimeoutExceptionArray0[2]);
      IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[9];
      SQLDataException sQLDataException0 = new SQLDataException("The parameter types must match the arguments", "The parameter types must match the arguments", 1280, sQLTimeoutException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException();
      sQLDataExceptionArray0[1] = sQLDataException0;
      SQLDataException sQLDataException2 = new SQLDataException("The parameter types must match the arguments", "org.apache.commons.collections4.functors.TransformedPredicate", sQLDataException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException((String) null, sQLDataException2);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException((String) null, "suffix may not be null", sQLDataException3);
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("M]trT", "suffix may not be null");
      sQLDataExceptionArray0[5] = sQLDataException5;
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0, 1);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) objectArrayIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0, (Collection<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super String>) null, (Iterator<? extends String>) null, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTimeoutExceptionArray0[2]);
      Predicate<BatchUpdateException> predicate0 = NullPredicate.nullPredicate();
      NullIsFalsePredicate<BatchUpdateException> nullIsFalsePredicate0 = new NullIsFalsePredicate<BatchUpdateException>(predicate0);
      IteratorUtils.find((Iterator<BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) nullIsFalsePredicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      IteratorUtils.getIterator(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PriorityQueue<Class<String>>[] priorityQueueArray0 = (PriorityQueue<Class<String>>[]) Array.newInstance(PriorityQueue.class, 6);
      PriorityQueue<Class<String>> priorityQueue0 = new PriorityQueue<Class<String>>(1235);
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<Class<String>> priorityQueue1 = new PriorityQueue<Class<String>>();
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<Class<String>> priorityQueue2 = new PriorityQueue<Class<String>>();
      priorityQueueArray0[2] = priorityQueue2;
      PriorityQueue<Class<String>> priorityQueue3 = new PriorityQueue<Class<String>>();
      priorityQueueArray0[3] = priorityQueue3;
      PriorityQueue<Class<String>> priorityQueue4 = new PriorityQueue<Class<String>>();
      priorityQueueArray0[4] = priorityQueue4;
      PriorityQueue<Class<String>> priorityQueue5 = new PriorityQueue<Class<String>>();
      priorityQueueArray0[5] = priorityQueue5;
      ResettableIterator<PriorityQueue<Class<String>>> resettableIterator0 = IteratorUtils.arrayIterator(priorityQueueArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<PriorityQueue<Class<String>>>) resettableIterator0, (Predicate<? super PriorityQueue<Class<String>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TreeSet<SQLTimeoutException> treeSet0 = new TreeSet<SQLTimeoutException>();
      MapIterator<SQLIntegrityConstraintViolationException, Vector<String>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLIntegrityConstraintViolationException, Vector<String>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLIntegrityConstraintViolationException, Vector<String>>(mapIterator0);
      InvokerTransformer.invokerTransformer("No next() entry in the iteration");
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Integer integer0 = new Integer(779);
      IteratorUtils.getIterator(integer0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransactionRollbackException[]) null, 2697, 2697);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ListIterator<PriorityQueue<Class<String>>> listIterator0 = EmptyListIterator.emptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<PriorityQueue<Class<String>>>) listIterator0, (Predicate<? super PriorityQueue<Class<String>>>) uniquePredicate0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "8V<_}n'$>aF|C", 3, (Throwable) null);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, closure0, closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLTimeoutException>) resettableIterator0, (Closure<? super SQLTimeoutException>) ifClosure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<BatchUpdateException>) orderedIterator0);
      IteratorUtils.find(iterator0, (Predicate<? super BatchUpdateException>) uniquePredicate0);
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLIntegrityConstraintViolationException[]) null, 2129);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(stack0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      stack0.add(sQLInvalidAuthorizationSpecException0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) null);
      String string0 = "4";
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) loopingListIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) transformer0, "4", "4", "tPd07f-F`");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<Vector<SQLInvalidAuthorizationSpecException>> resettableIterator0 = IteratorUtils.singletonIterator(vector0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<Vector<SQLInvalidAuthorizationSpecException>>) resettableIterator0, (Closure<? super Vector<SQLInvalidAuthorizationSpecException>>) closure0);
      Hashtable<Locale.Category, SQLDataException>[] hashtableArray0 = (Hashtable<Locale.Category, SQLDataException>[]) Array.newInstance(Hashtable.class, 7);
      Hashtable<Locale.Category, SQLDataException> hashtable0 = new Hashtable<Locale.Category, SQLDataException>();
      hashtableArray0[0] = hashtable0;
      Hashtable<Locale.Category, SQLDataException> hashtable1 = new Hashtable<Locale.Category, SQLDataException>();
      hashtableArray0[1] = hashtable1;
      Hashtable<Locale.Category, SQLDataException> hashtable2 = new Hashtable<Locale.Category, SQLDataException>();
      hashtableArray0[2] = hashtable2;
      Hashtable<Locale.Category, SQLDataException> hashtable3 = new Hashtable<Locale.Category, SQLDataException>();
      hashtableArray0[3] = hashtable3;
      Hashtable<Locale.Category, SQLDataException> hashtable4 = new Hashtable<Locale.Category, SQLDataException>();
      hashtableArray0[4] = hashtable4;
      Hashtable<Locale.Category, SQLDataException> hashtable5 = new Hashtable<Locale.Category, SQLDataException>();
      hashtableArray0[5] = hashtable5;
      Hashtable<Locale.Category, SQLDataException> hashtable6 = new Hashtable<Locale.Category, SQLDataException>();
      hashtableArray0[6] = hashtable6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(hashtableArray0, 1255, 2246);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLNonTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", ", ", 2882, sQLTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException((String) null, sQLNonTransientException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException((String) null, sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("", sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 3);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      IteratorUtils.getIterator(class0);
      EmptyMapIterator.emptyMapIterator();
      Transformer<Object, DataTruncation> transformer0 = ExceptionTransformer.exceptionTransformer();
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<Vector<SQLInvalidAuthorizationSpecException>>) null, (Closure<? super Vector<SQLInvalidAuthorizationSpecException>>) closure0);
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long[] longArray0 = new long[2];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.collections4.functors.NOPClosure");
      longArray0[0] = (long) (-4475);
      longArray0[1] = (long) (-4475);
      int[] intArray0 = new int[8];
      intArray0[0] = (-4475);
      intArray0[1] = (-4475);
      intArray0[2] = (-4475);
      intArray0[3] = (-4475);
      intArray0[4] = (-4475);
      int int0 = (-1323);
      intArray0[5] = (-1323);
      intArray0[6] = (-4475);
      intArray0[7] = (-4475);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", intArray0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", "", (-4475), longArray0, batchUpdateException0);
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(batchUpdateException1);
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      instantiateFactory0.create();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(instantiateFactory0);
      IteratorUtils.toString((Iterator<SQLException>) singletonListIterator0, (Transformer<? super SQLException, String>) factoryTransformer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Iterator<DataTruncation> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      EmptyListIterator.emptyListIterator();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("#f4,<(dc");
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 0, sQLRecoverableException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("#f4,<(dc", dataTruncation0);
      arrayList0.add(sQLTransactionRollbackException0);
      LoopingListIterator<SQLTransactionRollbackException> loopingListIterator0 = new LoopingListIterator<SQLTransactionRollbackException>(arrayList0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) loopingListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTimeoutExceptionArray0[2]);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      IteratorUtils.get((Iterator<SQLTimeoutException>) resettableIterator0, 1);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("ILDij{", "ILDij{");
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("ILDij{", (String) null);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 1, (-229));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      IteratorUtils.getIterator(class0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTimeoutExceptionArray0[2]);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException0;
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      IteratorUtils.get((Iterator<SQLTimeoutException>) resettableIterator0, 1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      DefaultEquator<IIOMetadataNode> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<IIOMetadataNode> equalPredicate0 = new EqualPredicate<IIOMetadataNode>((IIOMetadataNode) null, defaultEquator0);
      PredicateTransformer<IIOMetadataNode> predicateTransformer0 = new PredicateTransformer<IIOMetadataNode>(equalPredicate0);
      predicateTransformer0.transform((IIOMetadataNode) null);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(resettableListIterator0, true);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("3o|$N@N[0m2vg?1CV");
      IteratorUtils.toString((Iterator<Object>) null, (Transformer<? super Object, String>) transformer0, "3o|$N@N[0m2vg?1CV", "al>@*_;Mg&0s}4", "vWM>w");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("(=%f=", "9,'1");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("4.jD", "oCB`t-H2mbbc", sQLNonTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("(=%f=", sQLFeatureNotSupportedException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLFeatureNotSupportedException0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[8];
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException1;
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException1;
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException1;
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException1;
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTimeoutException>) resettableIterator0, 2150);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2142
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      IteratorUtils.getIterator(class0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("a'3dBw$H", (Throwable) null);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("a'3dBw$H", "EQUAL", (Throwable) null);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("4.jD", sQLTimeoutException1);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException(sQLTimeoutException2);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      IteratorUtils.get((Iterator<SQLTimeoutException>) resettableIterator0, 1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(resettableListIterator0);
      Hashtable<Object, SQLWarning> hashtable0 = new Hashtable<Object, SQLWarning>();
      HashMap<Object, SQLWarning> hashMap0 = new HashMap<Object, SQLWarning>();
      EntrySetMapIterator<Object, SQLWarning> entrySetMapIterator0 = new EntrySetMapIterator<Object, SQLWarning>(hashMap0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap1);
      EmptyListIterator.emptyListIterator();
      IteratorUtils.toString((Iterator<Object>) entrySetMapIterator0, (Transformer<? super Object, String>) transformer0, "s+gPokqC<*]/^]o,", "[", "[");
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PriorityQueue<Class<String>> priorityQueue0 = new PriorityQueue<Class<String>>();
      SingletonIterator<PriorityQueue<Class<String>>> singletonIterator0 = new SingletonIterator<PriorityQueue<Class<String>>>(priorityQueue0, false);
      IteratorUtils.matchesAll((Iterator<PriorityQueue<Class<String>>>) singletonIterator0, (Predicate<? super PriorityQueue<Class<String>>>) identityPredicate0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "The map size must be 1");
      Hashtable<Object, SQLWarning> hashtable0 = new Hashtable<Object, SQLWarning>();
      HashMap<Object, SQLWarning> hashMap0 = new HashMap<Object, SQLWarning>();
      EntrySetMapIterator<Object, SQLWarning> entrySetMapIterator0 = new EntrySetMapIterator<Object, SQLWarning>(hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Transformer<Object, SQLFeatureNotSupportedException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ConstantTransformer.nullTransformer();
      ListIterator<Transformer<Object, SQLFeatureNotSupportedException>> listIterator0 = IteratorUtils.singletonListIterator(transformer0);
      Enumeration<Transformer<Object, SQLFeatureNotSupportedException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Transformer<Object, SQLFeatureNotSupportedException>>) listIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Transformer<Object, SQLFeatureNotSupportedException>>) enumeration0);
      ResettableListIterator<Object> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) resettableListIterator0, (Transformer<? super Object, String>) null, "", "", "Enumeration must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(resettableListIterator0);
      OrderedMapIterator<BatchUpdateException, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLRecoverableException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLRecoverableException>(orderedMapIterator0);
      IteratorUtils.find((Iterator<BatchUpdateException>) orderedMapIterator0, (Predicate<? super BatchUpdateException>) identityPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.contains((Iterator<StringTokenizer>) null, (Object) resettableIterator0);
      IteratorUtils.size((Iterator<?>) null);
      ExceptionTransformer.exceptionTransformer();
      IteratorUtils.emptyOrderedMapIterator();
      Hashtable<Object, SQLWarning> hashtable0 = new Hashtable<Object, SQLWarning>();
      EntrySetMapIterator<Object, SQLWarning> entrySetMapIterator0 = new EntrySetMapIterator<Object, SQLWarning>(hashtable0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<Object>) entrySetMapIterator0, (Transformer<? super Object, String>) transformer0, "nTmM@f\"o", "FO^;Tz7oW", "nTmM@f\"o");
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SingletonIterator<PriorityQueue<Class<String>>> singletonIterator0 = new SingletonIterator<PriorityQueue<Class<String>>>((PriorityQueue<Class<String>>) null, false);
      IteratorUtils.matchesAll((Iterator<PriorityQueue<Class<String>>>) singletonIterator0, (Predicate<? super PriorityQueue<Class<String>>>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientException>) null, (Predicate<? super SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Hashtable<SQLException, Closure<Object>> hashtable0 = new Hashtable<SQLException, Closure<Object>>();
      Stack<Object> stack0 = new Stack<Object>();
      ListIterator<PriorityQueue<Class<String>>> listIterator0 = EmptyListIterator.emptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<PriorityQueue<Class<String>>>) listIterator0, (Predicate<? super PriorityQueue<Class<String>>>) uniquePredicate0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<HashSet<ArrayList>>) resettableListIterator0, (Transformer<? super HashSet<ArrayList>, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Hashtable<SQLException, Closure<Object>> hashtable0 = new Hashtable<SQLException, Closure<Object>>();
      Enumeration<SQLException> enumeration0 = hashtable0.keys();
      Stack<Object> stack0 = new Stack<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0, (Collection<? super SQLException>) stack0);
      ListIterator<PriorityQueue<Class<String>>> listIterator0 = EmptyListIterator.emptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<PriorityQueue<Class<String>>>) listIterator0, (Predicate<? super PriorityQueue<Class<String>>>) uniquePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransactionRollbackException[]) null, 3416);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLRecoverableException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLRecoverableException>(orderedMapIterator0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator((BatchUpdateException) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1371)).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) orderedMapIterator0, comparator0);
      IteratorUtils.find((Iterator<BatchUpdateException>) resettableIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      SQLException sQLException0 = new SQLException((Throwable) null);
      ArrayIterator<SQLRecoverableException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLRecoverableException>(sQLException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) singletonIterator0);
      Iterator<ComparatorPredicate.Criterion> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.skippingIterator(iterator0, 0L);
      IteratorUtils.singletonIterator(";");
      EmptyMapIterator.emptyMapIterator();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      int[] intArray0 = new int[6];
      intArray0[0] = (-1165);
      intArray0[1] = 3420;
      intArray0[2] = (-3874);
      intArray0[3] = 308;
      intArray0[4] = 2694;
      intArray0[5] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Invalid index:", ";", intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLTimeoutException0, (Equator<SQLException>) null);
      IteratorUtils.find((Iterator<BatchUpdateException>) objectArrayIterator0, (Predicate<? super BatchUpdateException>) equalPredicate0);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.contains((Iterator<StringTokenizer>) null, (Object) resettableIterator0);
      IteratorUtils.size((Iterator<?>) null);
      ExceptionTransformer.exceptionTransformer();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNextSibling();
      IteratorUtils.getIterator(iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, SQLException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Hashtable<SQLNonTransientException, DataTruncation> hashtable0 = new Hashtable<SQLNonTransientException, DataTruncation>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("l!sYW/DW# ]]-+~6", "org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry", 3432, sQLNonTransientConnectionException0);
      DataTruncation dataTruncation0 = new DataTruncation(306, false, true, 844, 256, sQLNonTransientConnectionException0);
      hashtable0.put(sQLInvalidAuthorizationSpecException0, dataTruncation0);
      hashtable0.clear();
      Enumeration<DataTruncation> enumeration0 = hashtable0.elements();
      IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0);
      OrderedMapIterator<DataTruncation, ArrayDeque<SQLTransientConnectionException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) orderedMapIterator0, (-1506));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("qbg>y9YzU6;I\"", ";");
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) iterator0, 0L, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLRecoverableException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLRecoverableException>(orderedMapIterator0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator((BatchUpdateException) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) orderedMapIterator0, comparator0);
      IteratorUtils.find((Iterator<BatchUpdateException>) resettableIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      SQLException sQLException0 = new SQLException((Throwable) null);
      ArrayIterator<SQLRecoverableException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLRecoverableException>(sQLException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLInvalidAuthorizationSpecException, ClientInfoStatus> mapIterator0 = IteratorUtils.emptyMapIterator();
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<SQLException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLException>>) linkedList0);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[4];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException((Throwable) null);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException((Throwable) null);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      sQLTransactionRollbackException2.setNextException(sQLTransactionRollbackException2);
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("Closure must not be null", "");
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      sQLTransactionRollbackException1.getLocalizedMessage();
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) objectArrayListIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      IteratorUtils.find((Iterator<SQLTransactionRollbackException>) listIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      IteratorUtils.skippingIterator((Iterator<HashMap<SQLNonTransientConnectionException, EnumSet>>) iterator0, 0L);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, sQLTransactionRollbackException0);
      ArrayListIterator<ClientInfoStatus> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<ClientInfoStatus>(sQLTransientConnectionException0, 44);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.contains((Iterator<StringTokenizer>) null, (Object) resettableIterator0);
      IteratorUtils.size((Iterator<?>) null);
      ExceptionTransformer.exceptionTransformer();
      ExceptionTransformer.exceptionTransformer();
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 1);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("The type to check instanceof must not be null", "aF[x", 1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("aF[x", sQLNonTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException("The type to check instanceof must not be null", "The type to check instanceof must not be null", 0, sQLSyntaxErrorException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLDataException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("aF[x", (String) null);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientConnectionException>) objectArrayListIterator0);
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) listIterator0;
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      Enumeration<SQLTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) iterator0);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) listIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0, (Collection<? super SQLException>) list0);
      ListIterator<PriorityQueue<Class<String>>> listIterator1 = EmptyListIterator.emptyListIterator();
      NullPredicate.nullPredicate();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAll((Iterator<PriorityQueue<Class<String>>>) listIterator1, (Predicate<? super PriorityQueue<Class<String>>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ConstantTransformer.nullTransformer();
      ListIterator<Transformer<Object, SQLFeatureNotSupportedException>> listIterator0 = IteratorUtils.singletonListIterator(transformer0);
      Enumeration<Transformer<Object, SQLFeatureNotSupportedException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Transformer<Object, SQLFeatureNotSupportedException>>) listIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Transformer<Object, SQLFeatureNotSupportedException>>) enumeration0);
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      ReverseListIterator<Locale.Category> reverseListIterator0 = new ReverseListIterator<Locale.Category>(linkedList0);
      ListIterator<SQLRecoverableException> listIterator1 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) listIterator1, (-268L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Hashtable<SQLException, Closure<Object>> hashtable0 = new Hashtable<SQLException, Closure<Object>>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("Criterion must not be null.");
      IteratorUtils.getIterator(stringTokenizer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Properties properties0 = new Properties();
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(identityPredicate0);
      ExceptionTransformer.exceptionTransformer();
      Class<Properties> class0 = Properties.class;
      InstantiateFactory<Properties> instantiateFactory0 = new InstantiateFactory<Properties>(class0);
      Transformer<Object, Properties> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Properties>) instantiateFactory0);
      ExceptionTransformer.exceptionTransformer();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      predicateArray0[0] = (Predicate<Object>) identityPredicate0;
      predicateArray0[2] = (Predicate<Object>) identityPredicate0;
      predicateArray0[3] = (Predicate<Object>) identityPredicate0;
      predicateArray0[4] = (Predicate<Object>) identityPredicate0;
      Transformer<Object, Properties>[] transformerArray0 = (Transformer<Object, Properties>[]) Array.newInstance(Transformer.class, 5);
      transformerArray0[0] = transformer0;
      transformerArray0[1] = transformer0;
      NullPredicate.nullPredicate();
      IteratorUtils.matchesAll((Iterator<PriorityQueue<Class<String>>>) null, (Predicate<? super PriorityQueue<Class<String>>>) predicateArray0[3]);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.contains((Iterator<StringTokenizer>) null, (Object) resettableIterator0);
      IteratorUtils.size((Iterator<?>) null);
      ExceptionTransformer.exceptionTransformer();
      IteratorUtils.emptyOrderedMapIterator();
      Hashtable<Object, SQLWarning> hashtable0 = new Hashtable<Object, SQLWarning>();
      EntrySetMapIterator<Object, SQLWarning> entrySetMapIterator0 = new EntrySetMapIterator<Object, SQLWarning>(hashtable0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<Object>) entrySetMapIterator0, (Transformer<? super Object, String>) transformer0, "nTmM@f\"o", "FO^;Tz7oW", "nTmM@f\"o");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("U~k2A*C#!LN;P_!~");
      Hashtable<Object, IIOMetadataNode> hashtable1 = new Hashtable<Object, IIOMetadataNode>();
      MapTransformer.mapTransformer((Map<? super Object, ? extends IIOMetadataNode>) hashtable1);
      Comparator<IIOMetadataNode> comparator0 = (Comparator<IIOMetadataNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[1];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Bm\"b3krc9jJMJOk?", "FO^;Tz7oWnTmM@f\"o");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLIntegrityConstraintViolationException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Bm\"b3krc9jJMJOk?", "FO^;Tz7oW", 0, sQLFeatureNotSupportedException0);
      SQLException sQLException0 = new SQLException(" must be Comparable", " must be Comparable", 851, sQLTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "org.apache.commons.collections4.functors.AndPredicate", 0, sQLException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator1 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, 0);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) resettableIterator1, class0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(identityPredicate0);
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      Class<Properties> class0 = Properties.class;
      InstantiateFactory<Properties> instantiateFactory0 = new InstantiateFactory<Properties>(class0);
      Transformer<Object, Properties> transformer1 = FactoryTransformer.factoryTransformer((Factory<? extends Properties>) instantiateFactory0);
      ExceptionTransformer.exceptionTransformer();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      predicateArray0[3] = (Predicate<Object>) identityPredicate0;
      predicateArray0[4] = (Predicate<Object>) identityPredicate0;
      Transformer<Object, Properties>[] transformerArray0 = (Transformer<Object, Properties>[]) Array.newInstance(Transformer.class, 5);
      transformerArray0[0] = transformer1;
      transformerArray0[1] = transformer1;
      transformerArray0[2] = transformer0;
      SwitchTransformer<Iterator<SQLIntegrityConstraintViolationException>, Properties> switchTransformer0 = new SwitchTransformer<Iterator<SQLIntegrityConstraintViolationException>, Properties>(predicateArray0, transformerArray0, transformer0);
      Iterator<Iterator<SQLIntegrityConstraintViolationException>>[] iteratorArray0 = (Iterator<Iterator<SQLIntegrityConstraintViolationException>>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Iterator<SQLIntegrityConstraintViolationException>>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0);
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      IteratorUtils.emptyIterator();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "iterator";
      stringArray0[3] = "gF=";
      stringArray0[4] = "The predicate and closure map must not be null";
      stringArray0[5] = "getValue() can only be called after next() and before remove()";
      stringArray0[6] = "p.{3[\"AD|IA3M%E4";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      IteratorUtils.boundedIterator((Iterator<? extends String>) objectArrayListIterator0, 0L);
      Properties[] propertiesArray0 = new Properties[7];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 1, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Properties>) resettableListIterator0, (Predicate<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTransactionRollbackException>) orderedIterator0, (Predicate<? super SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Iterator<SQLIntegrityConstraintViolationException>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(identityPredicate0);
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      Class<Properties> class0 = Properties.class;
      InstantiateFactory<Properties> instantiateFactory0 = new InstantiateFactory<Properties>(class0);
      Transformer<Object, Properties> transformer1 = FactoryTransformer.factoryTransformer((Factory<? extends Properties>) instantiateFactory0);
      Transformer<Object, Properties> transformer2 = ExceptionTransformer.exceptionTransformer();
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      IfTransformer.ifTransformer((Predicate<? super Object>) instanceofPredicate0, (Transformer<? super Object, ? extends Properties>) transformer2, (Transformer<? super Object, ? extends Properties>) transformer2);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      predicateArray0[0] = (Predicate<Object>) identityPredicate0;
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[2] = (Predicate<Object>) identityPredicate0;
      predicateArray0[3] = (Predicate<Object>) identityPredicate0;
      predicateArray0[4] = (Predicate<Object>) identityPredicate0;
      predicateArray0[5] = (Predicate<Object>) instanceofPredicate0;
      Transformer<Object, Properties>[] transformerArray0 = (Transformer<Object, Properties>[]) Array.newInstance(Transformer.class, 5);
      transformerArray0[0] = transformer1;
      transformerArray0[1] = transformer1;
      transformerArray0[2] = transformer0;
      transformerArray0[4] = transformer2;
      SwitchTransformer<Iterator<SQLIntegrityConstraintViolationException>, Properties> switchTransformer0 = new SwitchTransformer<Iterator<SQLIntegrityConstraintViolationException>, Properties>(predicateArray0, transformerArray0, transformer0);
      Iterator<Iterator<SQLIntegrityConstraintViolationException>>[] iteratorArray0 = (Iterator<Iterator<SQLIntegrityConstraintViolationException>>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Iterator<SQLIntegrityConstraintViolationException>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Iterator<SQLIntegrityConstraintViolationException>>[]) iteratorArray0);
      IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLIntegrityConstraintViolationException>>) zippingIterator0, (Transformer<? super Iterator<SQLIntegrityConstraintViolationException>, ? extends Properties>) transformer2);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientException, Class<Properties>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Hashtable<SQLException, Closure<Object>> hashtable0 = new Hashtable<SQLException, Closure<Object>>();
      hashtable0.keys();
      Stack<Object> stack0 = new Stack<Object>();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("]", "]", (-1262));
      SQLException sQLException0 = new SQLException("Yii/^!|s", sQLNonTransientException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("]", "]", (-1262), sQLException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLException sQLException1 = new SQLException("]", "Transformer must not be null", (-2328));
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("Yii/^!|s", "]", sQLException1);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("]", "Transformer must not be null");
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("Transformer must not be null", "]", 10);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException(sQLRecoverableException3);
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      SQLRecoverableException sQLRecoverableException7 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException7;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      IteratorUtils.contains((Iterator<SQLRecoverableException>) resettableIterator0, (Object) sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      Iterator<Properties> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Properties>) iterator0, (Iterator<? extends Properties>) iterator0);
      IteratorUtils.size(iterator1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("W;Ve4C]'}A9LK['OhM", "=y,W&[A", sQLIntegrityConstraintViolationException1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("l-ib^", "=y,W&[A", sQLTransientException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("z\".", "W;Ve4C]'}A9LK['OhM", 14);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException((String) null, "]");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("E?0exbWP'F&(I", "org.apache.commons.collections4.map.SingletonMap", 0, sQLIntegrityConstraintViolationException1);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException5;
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException5;
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException2;
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException5;
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      Iterator<SQLIntegrityConstraintViolationException> iterator2 = IteratorUtils.pushbackIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayListIterator0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.sql.SQLException.class) , any(java.sql.SQLException.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<SQLException> comparatorPredicate0 = new ComparatorPredicate<SQLException>(sQLNonTransientConnectionException0, comparator0, comparatorPredicate_Criterion0);
      NullIsTruePredicate<SQLException> nullIsTruePredicate0 = new NullIsTruePredicate<SQLException>(comparatorPredicate0);
      IteratorUtils.matchesAny(iterator2, (Predicate<? super SQLIntegrityConstraintViolationException>) nullIsTruePredicate0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Class<DataTruncation> class0 = DataTruncation.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.matchesAny((Iterator<SQLTransientException>) null, (Predicate<? super SQLTransientException>) predicate0);
      Hashtable<SQLException, Closure<Object>> hashtable0 = new Hashtable<SQLException, Closure<Object>>();
      Enumeration<SQLException> enumeration0 = hashtable0.keys();
      Stack<Object> stack0 = new Stack<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0, (Collection<? super SQLException>) stack0);
      EmptyListIterator.emptyListIterator();
      NullPredicate.nullPredicate();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>(11);
      IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[7];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLDataException sQLDataException0 = new SQLDataException((String) null, sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLDataException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLWarning sQLWarning0 = new SQLWarning((String) null, (String) null, 5);
      IteratorUtils.getIterator((Object) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Properties properties0 = new Properties();
      Object object0 = new Object();
      IteratorUtils.arrayIterator((SQLException[]) sQLIntegrityConstraintViolationExceptionArray0, 5, 5);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      Iterator<Properties> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Properties>) iterator0, (Iterator<? extends Properties>) iterator0);
      IteratorUtils.size(iterator1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLIntegrityConstraintViolationException0);
      SQLWarning sQLWarning0 = new SQLWarning("W;Ve4C]'}A9LK['OhM", "W;Ve4C]'}A9LK['OhM");
      IteratorUtils.getIterator("W;Ve4C]'}A9LK['OhM");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Properties properties0 = new Properties();
      Object object0 = new Object();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 0);
      Iterator<SQLDataException> iterator2 = IteratorUtils.unmodifiableIterator((Iterator<SQLDataException>) resettableListIterator0);
      IteratorUtils.peekingIterator((Iterator<?>) iterator2);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DefaultEquator.defaultEquator();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.loopingListIterator(list0);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, 1);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      Transformer<Object, SQLNonTransientException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<SQLException> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) stack0);
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>(transformer0, predicate0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLTransactionRollbackException>) resettableIterator0, (Predicate<? super SQLTransactionRollbackException>) transformedPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.matchesAny((Iterator<SQLTransientException>) null, (Predicate<? super SQLTransientException>) predicate0);
      Hashtable<SQLException, Closure<Object>> hashtable0 = new Hashtable<SQLException, Closure<Object>>();
      Enumeration<SQLException> enumeration0 = hashtable0.keys();
      Stack<Object> stack0 = new Stack<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0, (Collection<? super SQLException>) stack0);
      EmptyListIterator.emptyListIterator();
      NullPredicate.nullPredicate();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>(11);
      IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[7];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLDataException sQLDataException0 = new SQLDataException((String) null, sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLDataException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException(sQLDataException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("(^}6.GSQ99*A+=Z*", (String) null, sQLIntegrityConstraintViolationException2);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException((String) null, (String) null, sQLNonTransientConnectionException0);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException((String) null, "org.apache.commons.collections4.map.SingletonMap", 11);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException((String) null, "");
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException("4fP ", (String) null, 11, sQLIntegrityConstraintViolationException4);
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayListIterator0);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<IIOMetadataNode>) null);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>("[]");
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(identityPredicate0);
      IdentityPredicate.identityPredicate("w7l+ZRYJx[x1l+\"5#IZ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[]");
      IteratorUtils.toListIterator((Iterator<? extends Predicate<Object>>) singletonIterator0);
      IteratorUtils.emptyMapIterator();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      EmptyListIterator.emptyListIterator();
      OrderedMapIterator<BatchUpdateException, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLRecoverableException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLRecoverableException>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<BatchUpdateException, SQLRecoverableException>) orderedMapIterator0);
      IteratorUtils.find((Iterator<BatchUpdateException>) abstractOrderedMapIteratorDecorator0, (Predicate<? super BatchUpdateException>) identityPredicate0);
      ArrayIterator<SQLRecoverableException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLRecoverableException>(orderedMapIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.contains((Iterator<StringTokenizer>) null, (Object) resettableIterator0);
      IteratorUtils.size((Iterator<?>) null);
      ExceptionTransformer.exceptionTransformer();
      ExceptionTransformer.exceptionTransformer();
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InvokerTransformer.invokerTransformer("PFzI _");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.contains((Iterator<StringTokenizer>) null, (Object) resettableIterator0);
      IteratorUtils.size((Iterator<?>) null);
      ExceptionTransformer.exceptionTransformer();
      ExceptionTransformer.exceptionTransformer();
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>((Object) null, true);
      singletonIterator0.next();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("PFzI _");
      IteratorUtils.toString((Iterator<Object>) singletonIterator0, (Transformer<? super Object, String>) transformer0, "", "", "");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0);
      IteratorUtils.emptyMapIterator();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ListIterator<PriorityQueue<Class<String>>> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Iterator<Object> iterator0 = IteratorUtils.filteredIterator((Iterator<?>) listIterator0, (Predicate<? super Object>) predicate0);
      IteratorUtils.unmodifiableIterator(iterator0);
      Class<String> class0 = String.class;
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 5);
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      classArray0[0] = class1;
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      classArray0[1] = class2;
      Class<SQLFeatureNotSupportedException> class3 = SQLFeatureNotSupportedException.class;
      classArray0[2] = class3;
      Class<SQLFeatureNotSupportedException> class4 = SQLFeatureNotSupportedException.class;
      classArray0[3] = class4;
      Class<SQLFeatureNotSupportedException> class5 = SQLFeatureNotSupportedException.class;
      classArray0[4] = class5;
      // Undeclared exception!
      try { 
        InstantiateFactory.instantiateFactory(class0, (Class<?>[]) classArray0, (Object[]) classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InstantiateFactory: The constructor must exist and be public 
         //
         verifyException("org.apache.commons.collections4.functors.InstantiateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ListIterator<SQLTransientException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.contains((Iterator<SQLTransientException>) listIterator0, (Object) listIterator0);
      IteratorUtils.singletonListIterator((LinkedList<DataTruncation>) null);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) listIterator0, class0);
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      Vector<SQLInvalidAuthorizationSpecException> vector1 = new Vector<SQLInvalidAuthorizationSpecException>();
      Vector<Properties> vector2 = new Vector<Properties>();
      LoopingListIterator<Properties> loopingListIterator0 = new LoopingListIterator<Properties>(vector2);
      ListIteratorWrapper<Properties> listIteratorWrapper0 = new ListIteratorWrapper<Properties>(loopingListIterator0);
      IteratorUtils.isEmpty(listIterator0);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(identityPredicate0);
      IdentityPredicate.identityPredicate("[]");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[]");
      IteratorUtils.toListIterator((Iterator<? extends Predicate<Object>>) singletonIterator0);
      IteratorUtils.emptyMapIterator();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      EmptyListIterator.emptyListIterator();
      OrderedMapIterator<BatchUpdateException, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLRecoverableException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLRecoverableException>(orderedMapIterator0);
      MapIterator<BatchUpdateException, SQLRecoverableException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<BatchUpdateException, SQLRecoverableException>) orderedMapIterator0);
      IteratorUtils.find((Iterator<BatchUpdateException>) mapIterator0, (Predicate<? super BatchUpdateException>) identityPredicate0);
      ArrayIterator<SQLRecoverableException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLRecoverableException>(abstractOrderedMapIteratorDecorator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNode0.normalize();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(")", "org.apache.commons.collections4.functors.ComparatorPredicate$Criterion");
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      MapIterator<SQLTimeoutException, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLTimeoutException, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, Object>(mapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLTimeoutException>) mapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, 0L, 0L);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ConstantTransformer.nullTransformer();
      ListIterator<Transformer<Object, SQLFeatureNotSupportedException>> listIterator0 = IteratorUtils.singletonListIterator(transformer0);
      Enumeration<Transformer<Object, SQLFeatureNotSupportedException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Transformer<Object, SQLFeatureNotSupportedException>>) listIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Transformer<Object, SQLFeatureNotSupportedException>>) enumeration0);
      Class<String> class0 = String.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      MapIterator<SQLTransientException, LinkedHashSet<SQLInvalidAuthorizationSpecException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.matchesAny((Iterator<SQLTransientException>) mapIterator0, (Predicate<? super SQLTransientException>) predicate0);
      Hashtable<SQLException, Closure<Object>> hashtable0 = new Hashtable<SQLException, Closure<Object>>();
      hashtable0.keys();
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLException>) null, (Collection<? super SQLException>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) null, 1021);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.collections4.iterators.ReverseListIterator");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.iterators.ReverseListIterator");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.getIterator(listIterator0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.contains((Iterator<StringTokenizer>) null, (Object) resettableIterator0);
      IteratorUtils.size((Iterator<?>) null);
      ExceptionTransformer.exceptionTransformer();
      SQLWarning sQLWarning0 = new SQLWarning("W;Ve4C]'}A9LK['OhM", "W;Ve4C]'}A9LK['OhM", 10);
      IteratorUtils.getIterator(resettableIterator0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Properties properties0 = new Properties();
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ListIterator<SQLTransientException> listIterator0 = EmptyListIterator.emptyListIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.singletonListIterator((LinkedList<DataTruncation>) null);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) listIterator0, class0);
      ListIterator<SQLFeatureNotSupportedException> listIterator1 = EmptyListIterator.emptyListIterator();
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) listIterator1);
      IteratorUtils.loopingListIterator(list0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator1, (Iterator<? extends SQLFeatureNotSupportedException>) listIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ConstantTransformer.nullTransformer();
      ListIterator<Transformer<Object, SQLFeatureNotSupportedException>> listIterator0 = IteratorUtils.singletonListIterator(transformer0);
      Enumeration<Transformer<Object, SQLFeatureNotSupportedException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Transformer<Object, SQLFeatureNotSupportedException>>) listIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Transformer<Object, SQLFeatureNotSupportedException>>) enumeration0);
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      linkedList0.add(locale_Category0);
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "Closure must not be null", (-92), sQLWarning0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLWarning0);
      IdentityPredicate.identityPredicate((Object) enumeration0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      MapIterator<Vector<SQLInvalidAuthorizationSpecException>, Iterator<SQLIntegrityConstraintViolationException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.apply((Iterator<Vector<SQLInvalidAuthorizationSpecException>>) mapIterator0, (Closure<? super Vector<SQLInvalidAuthorizationSpecException>>) closure0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[0];
      IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(identityPredicate0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      IteratorUtils.toListIterator((Iterator<? extends Predicate<Object>>) singletonIterator0);
      IteratorUtils.emptyMapIterator();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ListIterator<PriorityQueue<Class<String>>> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAll((Iterator<PriorityQueue<Class<String>>>) listIterator0, (Predicate<? super PriorityQueue<Class<String>>>) predicate0);
      ListIterator<IIOMetadataNode> listIterator1 = IteratorUtils.unmodifiableListIterator((ListIterator<IIOMetadataNode>) resettableListIterator0);
      IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) listIterator1);
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DefaultEquator<IIOMetadataNode> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<IIOMetadataNode> equalPredicate0 = new EqualPredicate<IIOMetadataNode>(iIOMetadataNode0, defaultEquator0);
      PredicateTransformer<IIOMetadataNode> predicateTransformer0 = new PredicateTransformer<IIOMetadataNode>(equalPredicate0);
      predicateTransformer0.transform(iIOMetadataNode0);
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      ReverseListIterator<Locale.Category> reverseListIterator0 = new ReverseListIterator<Locale.Category>(vector0);
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      linkedList0.add(locale_Category0);
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Predicate<Locale.Category> predicate0 = IdentityPredicate.identityPredicate(locale_Category1);
      IteratorUtils.filteredListIterator((ListIterator<? extends Locale.Category>) reverseListIterator0, (Predicate<? super Locale.Category>) predicate0);
      Iterator<SQLNonTransientConnectionException> iterator0 = null;
      int int0 = (-1426);
      SQLDataException sQLDataException0 = new SQLDataException("", "", (-1426));
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>) singletonListIterator0, (Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ConstantTransformer.nullTransformer();
      ListIterator<Transformer<Object, SQLFeatureNotSupportedException>> listIterator0 = IteratorUtils.singletonListIterator(transformer0);
      Enumeration<Transformer<Object, SQLFeatureNotSupportedException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Transformer<Object, SQLFeatureNotSupportedException>>) listIterator0);
      Iterator<Transformer<Object, SQLFeatureNotSupportedException>> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Transformer<Object, SQLFeatureNotSupportedException>>) enumeration0);
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(iterator0, true);
      ListIterator<SQLFeatureNotSupportedException> listIterator1 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) listIterator1);
      LinkedList<SQLFeatureNotSupportedException> linkedList1 = new LinkedList<SQLFeatureNotSupportedException>();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) linkedList1);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator1, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Integer integer0 = new Integer(977);
      Integer integer1 = new Integer(10);
      OrderedMapIterator<BatchUpdateException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<BatchUpdateException, SQLClientInfoException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<BatchUpdateException, ? extends SQLClientInfoException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<BatchUpdateException>) orderedMapIterator1, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(identityPredicate0);
      ExceptionTransformer.exceptionTransformer();
      Class<Properties> class0 = Properties.class;
      InstantiateFactory<Properties> instantiateFactory0 = new InstantiateFactory<Properties>(class0);
      FactoryTransformer.factoryTransformer((Factory<? extends Properties>) instantiateFactory0);
      ExceptionTransformer.exceptionTransformer();
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      linkedList0.add(locale_Category0);
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      IdentityPredicate.identityPredicate(locale_Category1);
      ListIterator<Locale.Category> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Locale.Category>) listIterator0, (Predicate<? super Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(identityPredicate0);
      String string0 = "W;Ve4C]'}A9LK['OhM";
      String string1 = "";
      SQLWarning sQLWarning0 = new SQLWarning("", "]");
      Object object0 = null;
      IteratorUtils.getIterator((Object) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Properties properties0 = new Properties();
      int int0 = 1650;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) properties0, 1650);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.contains((Iterator<StringTokenizer>) null, (Object) resettableIterator0);
      IteratorUtils.size((Iterator<?>) null);
      ExceptionTransformer.exceptionTransformer();
      ExceptionTransformer.exceptionTransformer();
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      IteratorUtils.emptyOrderedMapIterator();
      String string0 = "";
      InvokerTransformer.invokerTransformer("");
      String string1 = "c6GJn4+";
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<?>) null, (Predicate<? super Object>) instanceofPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ListIterator<SQLTransientException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.contains((Iterator<SQLTransientException>) listIterator0, (Object) listIterator0);
      Hashtable<SQLException, Closure<Object>> hashtable0 = new Hashtable<SQLException, Closure<Object>>();
      ExceptionTransformer.exceptionTransformer();
      ExceptionTransformer.exceptionTransformer();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.emptyOrderedMapIterator();
      ListIterator<SQLFeatureNotSupportedException> listIterator1 = EmptyListIterator.emptyListIterator();
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) listIterator1);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      SkippingIterator<SQLFeatureNotSupportedException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) listIterator1, 0L);
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) skippingIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) skippingIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) zippingIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-2100));
      ArrayIterator<SQLRecoverableException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLRecoverableException>(nodeListIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(identityPredicate0);
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      Class<Properties> class0 = Properties.class;
      InstantiateFactory<Properties> instantiateFactory0 = new InstantiateFactory<Properties>(class0);
      Transformer<Object, Properties> transformer1 = FactoryTransformer.factoryTransformer((Factory<? extends Properties>) instantiateFactory0);
      Transformer<Object, Properties> transformer2 = ExceptionTransformer.exceptionTransformer();
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      IfTransformer.ifTransformer((Predicate<? super Object>) instanceofPredicate0, (Transformer<? super Object, ? extends Properties>) transformer2, (Transformer<? super Object, ? extends Properties>) transformer2);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      predicateArray0[0] = (Predicate<Object>) identityPredicate0;
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[2] = (Predicate<Object>) identityPredicate0;
      predicateArray0[3] = (Predicate<Object>) identityPredicate0;
      predicateArray0[4] = (Predicate<Object>) identityPredicate0;
      predicateArray0[5] = (Predicate<Object>) instanceofPredicate0;
      Transformer<Object, Properties>[] transformerArray0 = (Transformer<Object, Properties>[]) Array.newInstance(Transformer.class, 5);
      transformerArray0[0] = transformer1;
      transformerArray0[1] = transformer1;
      transformerArray0[2] = transformer0;
      transformerArray0[3] = transformer2;
      transformerArray0[4] = transformer2;
      SwitchTransformer<Iterator<SQLIntegrityConstraintViolationException>, Properties> switchTransformer0 = new SwitchTransformer<Iterator<SQLIntegrityConstraintViolationException>, Properties>(predicateArray0, transformerArray0, transformer0);
      Iterator<Iterator<SQLIntegrityConstraintViolationException>>[] iteratorArray0 = (Iterator<Iterator<SQLIntegrityConstraintViolationException>>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Iterator<SQLIntegrityConstraintViolationException>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Iterator<SQLIntegrityConstraintViolationException>>[]) iteratorArray0);
      IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLIntegrityConstraintViolationException>>) zippingIterator0, (Transformer<? super Iterator<SQLIntegrityConstraintViolationException>, ? extends Properties>) transformer2);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      IteratorUtils.asIterable((Iterator<?>) resettableIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator", 408);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      arrayList0.add(sQLFeatureNotSupportedException0);
      IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) arrayList0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure0);
      MapIterator<Vector<SQLInvalidAuthorizationSpecException>, Iterator<SQLIntegrityConstraintViolationException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.apply((Iterator<Vector<SQLInvalidAuthorizationSpecException>>) mapIterator0, (Closure<? super Vector<SQLInvalidAuthorizationSpecException>>) closure1);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, ArrayList<Properties>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, ArrayList<Properties>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, ArrayList<Properties>>(orderedMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) abstractOrderedMapIteratorDecorator0);
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      ReverseListIterator<Locale.Category> reverseListIterator0 = new ReverseListIterator<Locale.Category>(linkedList0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Predicate<Locale.Category> predicate0 = IdentityPredicate.identityPredicate(locale_Category0);
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category0);
      IteratorUtils.filteredListIterator((ListIterator<? extends Locale.Category>) listIterator0, (Predicate<? super Locale.Category>) predicate0);
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      Vector<SQLInvalidAuthorizationSpecException> vector1 = new Vector<SQLInvalidAuthorizationSpecException>();
      Iterator<SQLTransientConnectionException> iterator0 = null;
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) properties0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(identityPredicate0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      IteratorUtils.toListIterator((Iterator<? extends Predicate<Object>>) singletonIterator0);
      IteratorUtils.emptyMapIterator();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ListIterator<PriorityQueue<Class<String>>> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAll((Iterator<PriorityQueue<Class<String>>>) listIterator0, (Predicate<? super PriorityQueue<Class<String>>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.contains((Iterator<StringTokenizer>) null, (Object) resettableIterator0);
      IteratorUtils.size((Iterator<?>) null);
      ExceptionTransformer.exceptionTransformer();
      ExceptionTransformer.exceptionTransformer();
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      IteratorUtils.emptyOrderedMapIterator();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      ArrayIterator<SQLRecoverableException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLRecoverableException>(integer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      IteratorUtils.asIterable((Iterator<?>) resettableIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator", 408);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      arrayList0.add(sQLFeatureNotSupportedException0);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) arrayList0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Integer integer0 = new Integer(408);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[3];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "[", 408, hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "", map0);
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("", map1, sQLFeatureNotSupportedException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException2;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("", (String) null, map0, sQLNonTransientException0);
      sQLClientInfoException0.getStackTrace();
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException3;
      sQLClientInfoException3.printStackTrace();
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("w}2O>tx-{UN:#U`IW(", (String) null, 408, map0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException4;
      IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      arrayList0.add(sQLFeatureNotSupportedException0);
      Consumer<SQLFeatureNotSupportedException> consumer0 = (Consumer<SQLFeatureNotSupportedException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("u");
      arrayList0.add(sQLFeatureNotSupportedException1);
      TreeSet<Properties> treeSet0 = new TreeSet<Properties>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category2);
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 2);
      enumSetArray0[0] = enumSet0;
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet1 = EnumSet.allOf(class0);
      enumSetArray0[1] = enumSet1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(enumSetArray0, 2282, 425);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 4);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0);
      EnumSet<Locale.Category> enumSet1 = enumSet0.clone();
      enumSetArray0[0] = enumSet1;
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet2 = EnumSet.allOf(class0);
      enumSetArray0[1] = enumSet2;
      Class<Locale.Category> class1 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet3 = EnumSet.allOf(class1);
      enumSetArray0[2] = enumSet3;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet4 = EnumSet.of(locale_Category0, locale_Category1, locale_Category2);
      enumSetArray0[3] = enumSet4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(enumSetArray0, 2282, 2282);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLClientInfoException0);
      IteratorUtils.matchesAny((Iterator<String>) resettableListIterator0, (Predicate<? super String>) identityPredicate0);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 5);
      String string0 = ">+utev";
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(">+utev", ">+utev", (-1), intArray0);
      int int0 = 0;
      ArrayIterator<SQLDataException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLDataException>(batchUpdateException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(identityPredicate0);
      IteratorUtils.toListIterator((Iterator<? extends Predicate<Object>>) singletonIterator0);
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLClientInfoException[]) null, 2151, 2151);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.matchesAny((Iterator<SQLTransientException>) null, (Predicate<? super SQLTransientException>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.item(1345);
      int[] intArray0 = new int[1];
      intArray0[0] = 1345;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "PrototypeCloneFactory: The clone method must exist and be public ");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("dD]", "PrototypeCloneFactory: The clone method must exist and be public ", 1345, intArray0, sQLRecoverableException0);
      SQLException[] sQLExceptionArray0 = new SQLException[2];
      sQLExceptionArray0[0] = (SQLException) batchUpdateException0;
      sQLExceptionArray0[1] = (SQLException) batchUpdateException0;
      IteratorUtils.arrayIterator(sQLExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      arrayList0.add(sQLFeatureNotSupportedException0);
      Consumer<SQLFeatureNotSupportedException> consumer0 = (Consumer<SQLFeatureNotSupportedException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("u");
      arrayList0.add(sQLFeatureNotSupportedException1);
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      OrderedMapIterator<SQLException, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLException, SQLClientInfoException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLException, ? extends SQLClientInfoException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLException, SQLClientInfoException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLException, SQLClientInfoException>(orderedMapIterator1);
      AbstractOrderedMapIteratorDecorator<SQLException, SQLClientInfoException> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLException, SQLClientInfoException>(orderedMapIterator0);
      IteratorUtils.toString((Iterator<SQLException>) orderedMapIterator0, (Transformer<? super SQLException, String>) transformer0, "Yp5I]_eb;qL_u)Wh,L", "Yp5I]_eb;qL_u)Wh,L", "]");
      IteratorUtils.isEmpty((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.contains((Iterator<StringTokenizer>) null, (Object) resettableIterator0);
      IteratorUtils.size((Iterator<?>) null);
      ExceptionTransformer.exceptionTransformer();
      ExceptionTransformer.exceptionTransformer();
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("WCT'_", "Enumeration must not be null", 0);
      arrayList0.add(sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator", "Start index must not be greater than the array length", 0);
      arrayList0.add(sQLFeatureNotSupportedException1);
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) linkedList0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      iIOMetadataNode0.getLength();
      ArrayIterator<SQLRecoverableException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLRecoverableException>(resettableListIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(1598);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1598);
      integerArray0[3] = integer3;
      int int0 = 0;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[3]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[3]);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((-1589));
      integerArray0[8] = integer8;
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0, int0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Stack<Closure>>) objectArrayIterator0, (Transformer<? super Stack<Closure>, String>) transformer0, "Iterator must not be null", (String) null, "Iterator must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      Iterator<Properties> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Properties>) iterator0, (Iterator<? extends Properties>) iterator0);
      IteratorUtils.size(iterator1);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[5];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLIntegrityConstraintViolationException0);
      SQLWarning sQLWarning0 = new SQLWarning("W;Ve4C]'}A9LK['OhM", "=y,W&[A", 5);
      IteratorUtils.getIterator("W;Ve4C]'}A9LK['OhM");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) properties0, 1650);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Properties[] propertiesArray0 = new Properties[4];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      Iterator<Properties> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Properties>) resettableListIterator0, (Iterator<? extends Properties>) resettableListIterator0);
      IteratorUtils.size(iterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLIntegrityConstraintViolationException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTransientException0);
      String string0 = "Kw*`lWy[i~nqSkF";
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("Kw*`lWy[i~nqSkF", sQLTransactionRollbackException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("<", "", 4, sQLIntegrityConstraintViolationException0);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[1];
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransientConnectionException0;
      IteratorUtils.arrayListIterator(sQLTransientExceptionArray0);
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 5);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      ArrayListIterator<SQLIntegrityConstraintViolationException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLIntegrityConstraintViolationException>(sQLSyntaxErrorException0, 925);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 4);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0);
      EnumSet<Locale.Category> enumSet1 = enumSet0.clone();
      enumSetArray0[0] = enumSet1;
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet2 = EnumSet.allOf(class0);
      enumSetArray0[1] = enumSet2;
      Class<Locale.Category> class1 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet3 = EnumSet.allOf(class1);
      enumSetArray0[2] = enumSet3;
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      Vector<Properties> vector0 = new Vector<Properties>(linkedList0);
      LoopingListIterator<Properties> loopingListIterator0 = new LoopingListIterator<Properties>(vector0);
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties0);
      ListIteratorWrapper<Properties> listIteratorWrapper0 = new ListIteratorWrapper<Properties>(resettableIterator0);
      IteratorUtils.isEmpty(resettableIterator0);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.contains((Iterator<StringTokenizer>) null, (Object) resettableIterator0);
      IteratorUtils.size((Iterator<?>) null);
      ExceptionTransformer.exceptionTransformer();
      ExceptionTransformer.exceptionTransformer();
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ArrayDeque<Properties> arrayDeque0 = new ArrayDeque<Properties>();
      Iterator<Properties> iterator0 = arrayDeque0.iterator();
      ListIteratorWrapper<Properties> listIteratorWrapper0 = new ListIteratorWrapper<Properties>(iterator0);
      IteratorUtils.isEmpty(iterator0);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      Stack<SQLInvalidAuthorizationSpecException> stack1 = new Stack<SQLInvalidAuthorizationSpecException>();
      Stack<SQLInvalidAuthorizationSpecException> stack2 = new Stack<SQLInvalidAuthorizationSpecException>();
      Factory<String> factory0 = ConstantFactory.constantFactory("j%1y{)>%Y9yL");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      OrderedMapIterator<SQLException, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLException, SQLClientInfoException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLException, ? extends SQLClientInfoException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLException, SQLClientInfoException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLException, SQLClientInfoException>(orderedMapIterator1);
      AbstractOrderedMapIteratorDecorator<SQLException, SQLClientInfoException> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLException, SQLClientInfoException>(abstractOrderedMapIteratorDecorator0);
      IteratorUtils.toString((Iterator<SQLException>) abstractOrderedMapIteratorDecorator1, (Transformer<? super SQLException, String>) transformer0, "]", "", "3r;");
      IteratorUtils.isEmpty(orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ConstantTransformer.nullTransformer();
      ListIterator<Transformer<Object, SQLFeatureNotSupportedException>> listIterator0 = IteratorUtils.singletonListIterator(transformer0);
      Enumeration<Transformer<Object, SQLFeatureNotSupportedException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Transformer<Object, SQLFeatureNotSupportedException>>) listIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Transformer<Object, SQLFeatureNotSupportedException>>) enumeration0);
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      ReverseListIterator<Locale.Category> reverseListIterator0 = new ReverseListIterator<Locale.Category>(linkedList0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      linkedList0.add(locale_Category0);
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Predicate<Locale.Category> predicate0 = IdentityPredicate.identityPredicate(locale_Category1);
      IteratorUtils.filteredListIterator((ListIterator<? extends Locale.Category>) reverseListIterator0, (Predicate<? super Locale.Category>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      EmptyIterator.emptyIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ZippingIterator<SQLTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) zippingIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      IteratorUtils.asIterable((Iterator<?>) iterator0);
      Vector<Properties> vector0 = null;
      try {
        vector0 = new Vector<Properties>((Collection<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      linkedHashSet0.add(iIOMetadataNode0);
      HashMap<SQLException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLTransientConnectionException>();
      EntrySetMapIterator<SQLException, SQLTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLException, SQLTransientConnectionException>(hashMap0);
      int int0 = 2150;
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>(2150);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Vector<SQLInvalidAuthorizationSpecException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ConstantTransformer.nullTransformer();
      ListIterator<Transformer<Object, SQLFeatureNotSupportedException>> listIterator0 = IteratorUtils.singletonListIterator(transformer0);
      Enumeration<Transformer<Object, SQLFeatureNotSupportedException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Transformer<Object, SQLFeatureNotSupportedException>>) listIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Transformer<Object, SQLFeatureNotSupportedException>>) enumeration0);
      Hashtable<SQLSyntaxErrorException, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLSyntaxErrorException, SQLTransactionRollbackException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLSyntaxErrorException0);
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      ReverseListIterator<Locale.Category> reverseListIterator0 = new ReverseListIterator<Locale.Category>(linkedList0);
      MapIterator<Vector<SQLInvalidAuthorizationSpecException>, Iterator<SQLIntegrityConstraintViolationException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Vector<SQLInvalidAuthorizationSpecException>>) mapIterator0, (Closure<? super Vector<SQLInvalidAuthorizationSpecException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, ArrayList<Properties>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, ArrayList<Properties>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, ArrayList<Properties>>(orderedMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) abstractOrderedMapIteratorDecorator0);
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      ReverseListIterator<Locale.Category> reverseListIterator0 = new ReverseListIterator<Locale.Category>(linkedList0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Predicate<Locale.Category> predicate0 = IdentityPredicate.identityPredicate(locale_Category0);
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category0);
      IteratorUtils.filteredListIterator((ListIterator<? extends Locale.Category>) listIterator0, (Predicate<? super Locale.Category>) predicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Hashtable<SQLTransientConnectionException, SQLTransientException> hashtable0 = new Hashtable<SQLTransientConnectionException, SQLTransientException>();
      EntrySetMapIterator<SQLTransientConnectionException, SQLTransientException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientConnectionException, SQLTransientException>(hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.matchesAny((Iterator<SQLTransientException>) null, (Predicate<? super SQLTransientException>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.item(1345);
      try { 
        iIOMetadataNode0.isDefaultNamespace("dD]");
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Method not supported
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      Iterator<Properties> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Properties>) iterator0, (Iterator<? extends Properties>) iterator0);
      IteratorUtils.size(iterator1);
      IteratorUtils.size(iterator0);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[5];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLIntegrityConstraintViolationException0);
      sQLTransientExceptionArray0[0] = sQLTransientException0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "");
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransientConnectionException0;
      sQLTransientException0.spliterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("[");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLRecoverableException0);
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTransactionRollbackException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("[", sQLTransactionRollbackException0);
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransientConnectionException1;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[", "[", 0, sQLTransientException0);
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTimeoutException0;
      IteratorUtils.arrayListIterator(sQLTransientExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<EnumSet<ComparatorPredicate.Criterion>>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      Iterator<Properties> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Properties>) iterator0, (Iterator<? extends Properties>) iterator0);
      IteratorUtils.size(iterator1);
      IteratorUtils.size(iterator0);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[5];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLIntegrityConstraintViolationException0);
      sQLTransientExceptionArray0[0] = sQLTransientException0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "");
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransientConnectionException0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("[");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLRecoverableException0);
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTransactionRollbackException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("[", sQLTransactionRollbackException0);
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransientConnectionException1;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[", "[", 0, sQLTransientException0);
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTimeoutException0;
      IteratorUtils.arrayListIterator(sQLTransientExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[6];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("dw5NK9Mbog$(#`Q", "'P\"xVCYK", 1345);
      SQLWarning sQLWarning0 = new SQLWarning("dw5NK9Mbog$(#`Q", "nodeList must not be null!", sQLRecoverableException0);
      sQLExceptionArray0[0] = (SQLException) sQLWarning0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("0qtumx|", "8dV95^sCx{%*-0", 1345);
      sQLExceptionArray0[1] = (SQLException) sQLTransactionRollbackException0;
      SQLTransientException sQLTransientException0 = new SQLTransientException("'P\"xVCYK", "", 1345);
      sQLExceptionArray0[2] = (SQLException) sQLTransientException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Collection must not be null", sQLTransientException0);
      sQLExceptionArray0[3] = (SQLException) sQLSyntaxErrorException0;
      SQLTransientException sQLTransientException1 = new SQLTransientException();
      sQLExceptionArray0[4] = (SQLException) sQLTransientException1;
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1345;
      intArray0[2] = 1345;
      intArray0[3] = 1345;
      sQLTransientException0.spliterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("FqZHirP$Et3o", "L]@'( e", 1345, intArray0, sQLExceptionArray0[0]);
      sQLExceptionArray0[5] = (SQLException) batchUpdateException0;
      IteratorUtils.arrayIterator(sQLExceptionArray0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((PriorityQueue<SQLWarning>[]) null, 1345, 1345);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[6];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("dw5NK9Mbog$(#`Q", "'P\"xVCYK", 1345);
      SQLWarning sQLWarning0 = new SQLWarning("dw5NK9Mbog$(#`Q", "nodeList must not be null!", sQLRecoverableException0);
      sQLExceptionArray0[0] = (SQLException) sQLWarning0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("0qtumx|", "8dV95^sCx{%*-0", 1345);
      sQLExceptionArray0[1] = (SQLException) sQLTransactionRollbackException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("dw5NK9Mbog$(#`Q", (String) null, 3420);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) iterator0, (-1L), 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, ArrayList<Properties>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, ArrayList<Properties>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, ArrayList<Properties>>(orderedMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) abstractOrderedMapIteratorDecorator0);
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      ReverseListIterator<Locale.Category> reverseListIterator0 = new ReverseListIterator<Locale.Category>(linkedList0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Predicate<Locale.Category> predicate0 = IdentityPredicate.identityPredicate(locale_Category0);
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category0);
      IteratorUtils.filteredListIterator((ListIterator<? extends Locale.Category>) listIterator0, (Predicate<? super Locale.Category>) predicate0);
      Transformer<Object, Properties>[] transformerArray0 = (Transformer<Object, Properties>[]) Array.newInstance(Transformer.class, 4);
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      transformerArray0[0] = transformer0;
      Class<Properties> class0 = Properties.class;
      InstantiateFactory<Properties> instantiateFactory0 = new InstantiateFactory<Properties>(class0);
      Transformer<Object, Properties> transformer1 = FactoryTransformer.factoryTransformer((Factory<? extends Properties>) instantiateFactory0);
      transformerArray0[1] = transformer1;
      Transformer<Object, Properties> transformer2 = ExceptionTransformer.exceptionTransformer();
      transformerArray0[2] = transformer2;
      Transformer<Object, String> transformer3 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) null, (Transformer<? super Object, String>) transformer3, (String) null, "m\"VTlF_+8", "m\"VTlF_+8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, ArrayList<Properties>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, ArrayList<Properties>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, ArrayList<Properties>>(orderedMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) abstractOrderedMapIteratorDecorator0);
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      ReverseListIterator<Locale.Category> reverseListIterator0 = new ReverseListIterator<Locale.Category>(linkedList0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Predicate<Locale.Category> predicate0 = IdentityPredicate.identityPredicate(locale_Category0);
      IteratorUtils.filteredListIterator((ListIterator<? extends Locale.Category>) reverseListIterator0, (Predicate<? super Locale.Category>) predicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Object, Properties>[] transformerArray0 = (Transformer<Object, Properties>[]) Array.newInstance(Transformer.class, 4);
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      transformerArray0[0] = transformer0;
      Transformer<Object, Properties> transformer1 = ExceptionTransformer.exceptionTransformer();
      transformerArray0[2] = transformer1;
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 7);
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      classArray0[0] = class1;
      Class<IIOMetadataNode> class2 = IIOMetadataNode.class;
      classArray0[1] = class2;
      Class<IIOMetadataNode> class3 = IIOMetadataNode.class;
      classArray0[2] = class3;
      Class<IIOMetadataNode> class4 = IIOMetadataNode.class;
      classArray0[3] = class4;
      OrderedMapIterator<ArrayList<Properties>, SQLException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<ArrayList<Properties>>) orderedMapIterator1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ConstantTransformer.nullTransformer();
      ListIterator<Transformer<Object, SQLFeatureNotSupportedException>> listIterator0 = IteratorUtils.singletonListIterator(transformer0);
      Enumeration<Transformer<Object, SQLFeatureNotSupportedException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Transformer<Object, SQLFeatureNotSupportedException>>) listIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Transformer<Object, SQLFeatureNotSupportedException>>) enumeration0);
      Hashtable<SQLSyntaxErrorException, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLSyntaxErrorException, SQLTransactionRollbackException>();
      Throwable throwable0 = null;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLSyntaxErrorException0);
      int int0 = (-376);
      SQLWarning sQLWarning0 = new SQLWarning("=y,W&[A", "W;Ve4C]'}A9LK['OhM", (-376));
      IteratorUtils.getIterator(hashtable0);
      int int1 = 1603;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "W;Ve4C]'}A9LK['OhM", 1603);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      InvokerTransformer.invokerTransformer("[");
      Comparator<SQLFeatureNotSupportedException> comparator0 = (Comparator<SQLFeatureNotSupportedException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      int int0 = 579;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) orderedIterator0, 579);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      SQLWarning sQLWarning0 = new SQLWarning("]", "", (-376));
      IteratorUtils.getIterator(sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      Iterator<StringTokenizer> iterator0 = null;
      IteratorUtils.contains((Iterator<StringTokenizer>) null, (Object) resettableIterator0);
      IteratorUtils.size((Iterator<?>) null);
      ExceptionTransformer.exceptionTransformer();
      ExceptionTransformer.exceptionTransformer();
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asIterable((Iterator<?>) resettableIterator0);
      Vector<Properties> vector0 = null;
      try {
        vector0 = new Vector<Properties>((Collection<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      IteratorUtils.asIterable((Iterator<?>) resettableIterator0);
      Vector<Properties> vector0 = null;
      try {
        vector0 = new Vector<Properties>((Collection<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.contains((Iterator<StringTokenizer>) null, (Object) resettableIterator0);
      IteratorUtils.size((Iterator<?>) null);
      Hashtable<SQLException, SQLTransientConnectionException> hashtable0 = new Hashtable<SQLException, SQLTransientConnectionException>();
      EntrySetMapIterator<SQLException, SQLTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLException, SQLTransientConnectionException>(hashtable0);
      Factory<String> factory0 = ConstantFactory.constantFactory("3r;");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) entrySetMapIterator0, (Transformer<? super SQLException, String>) transformer0, "3r;", "Node must not be null", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.contains((Iterator<StringTokenizer>) null, (Object) resettableIterator0);
      int int0 = 100;
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer0 = ConstantTransformer.constantTransformer((SQLIntegrityConstraintViolationException) null);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.objectGraphIterator((SQLIntegrityConstraintViolationException) null, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("%I,]n3 Xl[+r[", "");
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) stringTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("^M=tY>^");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^M=tY>^");
      PrintWriter printWriter0 = mockPrintWriter0.append(':');
      sQLInvalidAuthorizationSpecException0.printStackTrace(printWriter0);
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      IteratorUtils.singletonIterator((Object) sQLInvalidAuthorizationSpecException0);
      IteratorUtils.emptyListIterator();
      ArrayList<Iterator<SQLIntegrityConstraintViolationException>>[] arrayListArray0 = (ArrayList<Iterator<SQLIntegrityConstraintViolationException>>[]) Array.newInstance(ArrayList.class, 9);
      ArrayList<Iterator<SQLIntegrityConstraintViolationException>> arrayList0 = new ArrayList<Iterator<SQLIntegrityConstraintViolationException>>();
      arrayListArray0[0] = arrayList0;
      ArrayList<Iterator<SQLIntegrityConstraintViolationException>> arrayList1 = new ArrayList<Iterator<SQLIntegrityConstraintViolationException>>();
      arrayListArray0[1] = arrayList1;
      ArrayList<Iterator<SQLIntegrityConstraintViolationException>> arrayList2 = new ArrayList<Iterator<SQLIntegrityConstraintViolationException>>();
      arrayListArray0[2] = arrayList2;
      ArrayList<Iterator<SQLIntegrityConstraintViolationException>> arrayList3 = new ArrayList<Iterator<SQLIntegrityConstraintViolationException>>();
      arrayListArray0[3] = arrayList3;
      ArrayList<Iterator<SQLIntegrityConstraintViolationException>> arrayList4 = new ArrayList<Iterator<SQLIntegrityConstraintViolationException>>();
      arrayListArray0[4] = arrayList4;
      ArrayList<Iterator<SQLIntegrityConstraintViolationException>> arrayList5 = new ArrayList<Iterator<SQLIntegrityConstraintViolationException>>();
      arrayListArray0[5] = arrayList5;
      ArrayList<Iterator<SQLIntegrityConstraintViolationException>> arrayList6 = new ArrayList<Iterator<SQLIntegrityConstraintViolationException>>();
      arrayListArray0[6] = arrayList6;
      ArrayList<Iterator<SQLIntegrityConstraintViolationException>> arrayList7 = new ArrayList<Iterator<SQLIntegrityConstraintViolationException>>();
      arrayListArray0[7] = arrayList7;
      ArrayList<Iterator<SQLIntegrityConstraintViolationException>> arrayList8 = new ArrayList<Iterator<SQLIntegrityConstraintViolationException>>();
      arrayListArray0[8] = arrayList8;
      IteratorUtils.arrayListIterator(arrayListArray0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      arrayList0.add(sQLFeatureNotSupportedException0);
      Consumer<SQLFeatureNotSupportedException> consumer0 = (Consumer<SQLFeatureNotSupportedException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      OrderedMapIterator<SQLClientInfoException, ArrayList<Properties>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, ArrayList<Properties>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, ArrayList<Properties>>(orderedMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) abstractOrderedMapIteratorDecorator0);
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      ReverseListIterator<Locale.Category> reverseListIterator0 = new ReverseListIterator<Locale.Category>(linkedList0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Predicate<Locale.Category> predicate0 = IdentityPredicate.identityPredicate(locale_Category0);
      IteratorUtils.filteredListIterator((ListIterator<? extends Locale.Category>) reverseListIterator0, (Predicate<? super Locale.Category>) predicate0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      IteratorUtils.arrayListIterator(stringArray0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      linkedHashSet0.add(iIOMetadataNode0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null, 1165, (Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((Throwable) null);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) null);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure0);
      MapIterator<Vector<SQLInvalidAuthorizationSpecException>, Iterator<SQLIntegrityConstraintViolationException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.apply((Iterator<Vector<SQLInvalidAuthorizationSpecException>>) mapIterator0, (Closure<? super Vector<SQLInvalidAuthorizationSpecException>>) closure0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ListIterator<SQLTransientException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.contains((Iterator<SQLTransientException>) listIterator0, (Object) listIterator0);
      Hashtable<SQLException, Closure<Object>> hashtable0 = new Hashtable<SQLException, Closure<Object>>();
      Enumeration<SQLException> enumeration0 = hashtable0.keys();
      int int0 = 3420;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      ListIteratorWrapper<BatchUpdateException> listIteratorWrapper0 = new ListIteratorWrapper<BatchUpdateException>(resettableIterator0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) listIteratorWrapper0, 3420);
      IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0, (Collection<? super SQLException>) list0);
      String string0 = "{,h&*\\uO0K3|$~TzP";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(string0, "");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) listIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("qbg>y9YzU6;I\"", ";");
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0);
      BoundedIterator<SQLTimeoutException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) iterator0, 0L, 0L);
      assertNotNull(boundedIterator0);
      
      Hashtable<DataTruncation, SQLSyntaxErrorException> hashtable0 = new Hashtable<DataTruncation, SQLSyntaxErrorException>();
      EntrySetMapIterator<DataTruncation, SQLSyntaxErrorException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLSyntaxErrorException>(hashtable0);
      Iterator<DataTruncation> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) entrySetMapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLWarning>) iterator1, 0L);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, ArrayList<Properties>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, ArrayList<Properties>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, ArrayList<Properties>>(orderedMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) abstractOrderedMapIteratorDecorator0);
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      ReverseListIterator<Locale.Category> reverseListIterator0 = new ReverseListIterator<Locale.Category>(linkedList0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Predicate<Locale.Category> predicate0 = IdentityPredicate.identityPredicate(locale_Category0);
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category0);
      IteratorUtils.filteredListIterator((ListIterator<? extends Locale.Category>) listIterator0, (Predicate<? super Locale.Category>) predicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Object, Properties>[] transformerArray0 = (Transformer<Object, Properties>[]) Array.newInstance(Transformer.class, 4);
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      transformerArray0[0] = transformer0;
      Class<Properties> class0 = Properties.class;
      InstantiateFactory<Properties> instantiateFactory0 = new InstantiateFactory<Properties>(class0);
      Transformer<Object, Properties> transformer1 = FactoryTransformer.factoryTransformer((Factory<? extends Properties>) instantiateFactory0);
      transformerArray0[1] = transformer1;
      Transformer<Object, Properties> transformer2 = ExceptionTransformer.exceptionTransformer();
      transformerArray0[2] = transformer2;
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      Transformer<Object, Properties> transformer3 = IfTransformer.ifTransformer((Predicate<? super Object>) instanceofPredicate0, (Transformer<? super Object, ? extends Properties>) transformer1, (Transformer<? super Object, ? extends Properties>) transformer1);
      transformerArray0[3] = transformer3;
      SwitchTransformer<Iterator<SQLIntegrityConstraintViolationException>, Properties> switchTransformer0 = new SwitchTransformer<Iterator<SQLIntegrityConstraintViolationException>, Properties>(predicateArray0, transformerArray0, transformer3);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLIntegrityConstraintViolationException>>) null, (Transformer<? super Iterator<SQLIntegrityConstraintViolationException>, ? extends Properties>) switchTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      linkedList0.iterator();
      IteratorUtils.singletonListIterator(linkedList0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransientException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      iIOMetadataNode0.getNamespaceURI();
      iIOMetadataNode0.getAttributeNS("-:-g[zrpPQ}Tu^", "prefix may not be null");
      Node node0 = iIOMetadataNode0.replaceChild(iIOMetadataNode1, iIOMetadataNode1);
      Node node1 = iIOMetadataNode0.appendChild(node0);
      IteratorUtils.nodeListIterator(node1);
      OrderedIterator<SQLException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super SQLException>) comparator0, (Iterator<? extends SQLException>) orderedIterator0, (Iterator<? extends SQLException>) orderedIterator0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-2078);
      intArray0[1] = (-1461);
      intArray0[2] = 0;
      intArray0[3] = 100;
      intArray0[4] = 125;
      intArray0[5] = 4382;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("b(.}$K8@QQ2!", intArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException0, 4382, (-1126));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Enz/GE]&[e -bV6HO@");
      iIOMetadataNode0.getAttribute("Enz/GE]&[e -bV6HO@");
      iIOMetadataNode0.getAttributes();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      IteratorUtils.emptyMapIterator();
      String string0 = "s before the start of the array. ";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(",4=i:&7+-m|c88w", "QjlvM qb8oi", 100);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      sQLSyntaxErrorException0.getStackTrace();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("s before the start of the array. ", "", sQLSyntaxErrorException0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "oI");
      ArrayIterator<String> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<String>(sQLTimeoutException0, 100, 512);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.contains((Iterator<StringTokenizer>) null, (Object) resettableIterator0);
      IteratorUtils.size((Iterator<?>) null);
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) iterator0, class0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 2);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[9];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("2ec", (String) null, 378);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(378, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: 2ec", sQLNonTransientConnectionException0.toString());
      assertEquals("2ec", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("M, U]PSw[1#u", "EQUAL", sQLNonTransientConnectionException0);
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(378, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: 2ec", sQLNonTransientConnectionException0.toString());
      assertEquals("2ec", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("EQUAL", sQLNonTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: M, U]PSw[1#u", sQLNonTransientConnectionException1.toString());
      assertEquals("M, U]PSw[1#u", sQLNonTransientConnectionException1.getMessage());
      assertNotNull(sQLNonTransientConnectionException1);
      
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException((String) null, sQLNonTransientConnectionException0);
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException0));
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(378, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: 2ec", sQLNonTransientConnectionException0.toString());
      assertEquals("2ec", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException2.getErrorCode());
      assertNull(sQLNonTransientConnectionException2.getMessage());
      assertNull(sQLNonTransientConnectionException2.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException2.toString());
      assertNotNull(sQLNonTransientConnectionException2);
      
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException0));
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(378, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: 2ec", sQLNonTransientConnectionException0.toString());
      assertEquals("2ec", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: 2ec", sQLNonTransientConnectionException3.getMessage());
      assertNull(sQLNonTransientConnectionException3.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLNonTransientConnectionException: 2ec", sQLNonTransientConnectionException3.toString());
      assertEquals(0, sQLNonTransientConnectionException3.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException3);
      
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException((String) null);
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException2));
      assertNull(sQLNonTransientConnectionException4.getSQLState());
      assertNull(sQLNonTransientConnectionException4.getMessage());
      assertEquals(0, sQLNonTransientConnectionException4.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException4.toString());
      assertNotNull(sQLNonTransientConnectionException4);
      
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException(";~/`qOF^v8[/3c0Aq@n", sQLNonTransientConnectionException1);
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException0));
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(378, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: 2ec", sQLNonTransientConnectionException0.toString());
      assertEquals("2ec", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("EQUAL", sQLNonTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: M, U]PSw[1#u", sQLNonTransientConnectionException1.toString());
      assertEquals("M, U]PSw[1#u", sQLNonTransientConnectionException1.getMessage());
      assertEquals(0, sQLNonTransientConnectionException5.getErrorCode());
      assertNull(sQLNonTransientConnectionException5.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ;~/`qOF^v8[/3c0Aq@n", sQLNonTransientConnectionException5.toString());
      assertEquals(";~/`qOF^v8[/3c0Aq@n", sQLNonTransientConnectionException5.getMessage());
      assertNotNull(sQLNonTransientConnectionException5);
      
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException((String) null, "s}Q=X[", sQLNonTransientConnectionException2);
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException2));
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(378, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: 2ec", sQLNonTransientConnectionException0.toString());
      assertEquals("2ec", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException2.getErrorCode());
      assertNull(sQLNonTransientConnectionException2.getMessage());
      assertNull(sQLNonTransientConnectionException2.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException2.toString());
      assertNull(sQLNonTransientConnectionException6.getMessage());
      assertEquals("s}Q=X[", sQLNonTransientConnectionException6.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException6.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException6.toString());
      assertNotNull(sQLNonTransientConnectionException6);
      
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      SQLDataException sQLDataException0 = new SQLDataException("M, U]PSw[1#u", "J@^`#@BKA3>n7l{_`v", sQLNonTransientConnectionException0);
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException6));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException3));
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("J@^`#@BKA3>n7l{_`v", sQLDataException0.getSQLState());
      assertEquals("M, U]PSw[1#u", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: M, U]PSw[1#u", sQLDataException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(378, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: 2ec", sQLNonTransientConnectionException0.toString());
      assertEquals("2ec", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLDataException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException("u", sQLDataException0);
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException6));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException6));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException3));
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("J@^`#@BKA3>n7l{_`v", sQLDataException0.getSQLState());
      assertEquals("M, U]PSw[1#u", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: M, U]PSw[1#u", sQLDataException0.toString());
      assertNull(sQLNonTransientConnectionException7.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: u", sQLNonTransientConnectionException7.toString());
      assertEquals("u", sQLNonTransientConnectionException7.getMessage());
      assertEquals(0, sQLNonTransientConnectionException7.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(378, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: 2ec", sQLNonTransientConnectionException0.toString());
      assertEquals("2ec", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException7);
      
      sQLNonTransientConnectionExceptionArray0[7] = sQLNonTransientConnectionException7;
      SQLNonTransientConnectionException sQLNonTransientConnectionException8 = new SQLNonTransientConnectionException(" 7YFqLFQ95dj", "Comparator must not be null.", 378, sQLNonTransientConnectionException1);
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException6));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException7));
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException6));
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException8.equals((Object)sQLNonTransientConnectionException7));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException7));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException6));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException4));
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(378, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: 2ec", sQLNonTransientConnectionException0.toString());
      assertEquals("2ec", sQLNonTransientConnectionException0.getMessage());
      assertEquals(378, sQLNonTransientConnectionException8.getErrorCode());
      assertEquals("Comparator must not be null.", sQLNonTransientConnectionException8.getSQLState());
      assertEquals(" 7YFqLFQ95dj", sQLNonTransientConnectionException8.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException:  7YFqLFQ95dj", sQLNonTransientConnectionException8.toString());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("EQUAL", sQLNonTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: M, U]PSw[1#u", sQLNonTransientConnectionException1.toString());
      assertEquals("M, U]PSw[1#u", sQLNonTransientConnectionException1.getMessage());
      assertNotNull(sQLNonTransientConnectionException8);
      
      sQLNonTransientConnectionExceptionArray0[8] = sQLNonTransientConnectionException8;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      assertEquals(9, sQLNonTransientConnectionExceptionArray0.length);
      assertNotNull(resettableIterator0);
      
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) resettableIterator0;
      MapIterator<SQLNonTransientConnectionException, SQLNonTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) mapIterator0;
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      assertEquals(2, iteratorArray0.length);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(",S?0k'i$idI%K1e~O", "&f&uv]9Y");
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(",S?0k'i$idI%K1e~O", sQLTransientConnectionException0.getMessage());
      assertEquals("&f&uv]9Y", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: ,S?0k'i$idI%K1e~O", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(",S?0k'i$idI%K1e~O", sQLTransientConnectionException0.getMessage());
      assertEquals("&f&uv]9Y", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: ,S?0k'i$idI%K1e~O", sQLTransientConnectionException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLSyntaxErrorException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(",S?0k'i$idI%K1e~O", sQLTransientConnectionException0.getMessage());
      assertEquals("&f&uv]9Y", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: ,S?0k'i$idI%K1e~O", sQLTransientConnectionException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLRecoverableException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(",S?0k'i$idI%K1e~O", sQLTransientConnectionException0.getMessage());
      assertEquals("&f&uv]9Y", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: ,S?0k'i$idI%K1e~O", sQLTransientConnectionException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLRecoverableException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<ComparatorPredicate.Criterion>) null, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -1
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[9];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", sQLTimeoutException0);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException1.getSQLState());
      assertEquals("", sQLTimeoutException1.getMessage());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException1.toString());
      assertNotNull(sQLTimeoutException1);
      
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("");
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException1));
      assertEquals("", sQLTimeoutException2.getMessage());
      assertNull(sQLTimeoutException2.getSQLState());
      assertEquals(0, sQLTimeoutException2.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException2.toString());
      assertNotNull(sQLTimeoutException2);
      
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException(sQLTimeoutException0);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException2));
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException3.getSQLState());
      assertEquals(0, sQLTimeoutException3.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLTimeoutException: ", sQLTimeoutException3.toString());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException3.getMessage());
      assertNotNull(sQLTimeoutException3);
      
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("", sQLTimeoutException1);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException3));
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException1.getSQLState());
      assertEquals("", sQLTimeoutException1.getMessage());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException1.toString());
      assertNull(sQLTimeoutException4.getSQLState());
      assertEquals("", sQLTimeoutException4.getMessage());
      assertEquals(0, sQLTimeoutException4.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException4.toString());
      assertNotNull(sQLTimeoutException4);
      
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("", "X]B_e", sQLTimeoutException3);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException4));
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException4));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException4));
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException3.getSQLState());
      assertEquals(0, sQLTimeoutException3.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLTimeoutException: ", sQLTimeoutException3.toString());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException3.getMessage());
      assertEquals("X]B_e", sQLTimeoutException5.getSQLState());
      assertEquals(0, sQLTimeoutException5.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException5.toString());
      assertEquals("", sQLTimeoutException5.getMessage());
      assertNotNull(sQLTimeoutException5);
      
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException("X]B_e", sQLTimeoutException4);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException5));
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException4));
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException5));
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException4));
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException5));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException4));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException5));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException6.equals((Object)sQLTimeoutException1));
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException1.getSQLState());
      assertEquals("", sQLTimeoutException1.getMessage());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException1.toString());
      assertNull(sQLTimeoutException4.getSQLState());
      assertEquals("", sQLTimeoutException4.getMessage());
      assertEquals(0, sQLTimeoutException4.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException4.toString());
      assertEquals("X]B_e", sQLTimeoutException6.getMessage());
      assertEquals(0, sQLTimeoutException6.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: X]B_e", sQLTimeoutException6.toString());
      assertNull(sQLTimeoutException6.getSQLState());
      assertNotNull(sQLTimeoutException6);
      
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      SQLTimeoutException sQLTimeoutException7 = new SQLTimeoutException((String) null);
      assertFalse(sQLTimeoutException7.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException7.equals((Object)sQLTimeoutException4));
      assertFalse(sQLTimeoutException7.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException7.equals((Object)sQLTimeoutException6));
      assertFalse(sQLTimeoutException7.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException7.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException7.equals((Object)sQLTimeoutException5));
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException7.toString());
      assertEquals(0, sQLTimeoutException7.getErrorCode());
      assertNull(sQLTimeoutException7.getMessage());
      assertNull(sQLTimeoutException7.getSQLState());
      assertNotNull(sQLTimeoutException7);
      
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException7;
      SQLTimeoutException sQLTimeoutException8 = new SQLTimeoutException((String) null, (String) null);
      assertFalse(sQLTimeoutException8.equals((Object)sQLTimeoutException5));
      assertFalse(sQLTimeoutException8.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException8.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException8.equals((Object)sQLTimeoutException6));
      assertFalse(sQLTimeoutException8.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException8.equals((Object)sQLTimeoutException4));
      assertFalse(sQLTimeoutException8.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException8.equals((Object)sQLTimeoutException7));
      assertEquals(0, sQLTimeoutException8.getErrorCode());
      assertNull(sQLTimeoutException8.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException8.toString());
      assertNull(sQLTimeoutException8.getSQLState());
      assertNotNull(sQLTimeoutException8);
      
      sQLTimeoutExceptionArray0[8] = sQLTimeoutException8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 1887, 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[2];
      String string0 = "OY4_)ILVh|1Z";
      String string1 = "vC IHI.?mtQ!o";
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("vC IHI.?mtQ!o");
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: vC IHI.?mtQ!o", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("vC IHI.?mtQ!o", sQLTransientConnectionException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry", "vC IHI.?mtQ!o", sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: vC IHI.?mtQ!o", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("vC IHI.?mtQ!o", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("vC IHI.?mtQ!o", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("OY4_)ILVh|1Z", "vC IHI.?mtQ!o", hashMap0, sQLInvalidAuthorizationSpecException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: vC IHI.?mtQ!o", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("vC IHI.?mtQ!o", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("vC IHI.?mtQ!o", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: OY4_)ILVh|1Z", sQLClientInfoException0.toString());
      assertEquals("vC IHI.?mtQ!o", sQLClientInfoException0.getSQLState());
      assertEquals("OY4_)ILVh|1Z", sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      String string2 = null;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((String) null, (String) null, 0, hashMap0);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(sQLClientInfoException1.getSQLState());
      assertNull(sQLClientInfoException1.getMessage());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException1.toString());
      assertNotNull(sQLClientInfoException1);
      
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      int int0 = (-444);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, (-444));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode0);
      
      Comparator<IIOMetadataNode> comparator0 = (Comparator<IIOMetadataNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(comparator0).compare(any(javax.imageio.metadata.IIOMetadataNode.class) , any(javax.imageio.metadata.IIOMetadataNode.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<IIOMetadataNode> comparatorPredicate0 = new ComparatorPredicate<IIOMetadataNode>(iIOMetadataNode0, comparator0, comparatorPredicate_Criterion0);
      assertNotNull(comparatorPredicate0);
      
      PredicateTransformer<IIOMetadataNode> predicateTransformer0 = new PredicateTransformer<IIOMetadataNode>(comparatorPredicate0);
      assertNotNull(predicateTransformer0);
      
      Boolean boolean0 = predicateTransformer0.transform(iIOMetadataNode0);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = predicateTransformer0.transform(iIOMetadataNode0);
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode1);
      
      Boolean boolean2 = predicateTransformer0.transform(iIOMetadataNode1);
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = predicateTransformer0.transform(iIOMetadataNode1);
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertTrue(boolean3);
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      int int0 = (-67);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(booleanArray0, (-67));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
      
      Iterator<Properties> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Properties>) iterator0, (Iterator<? extends Properties>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      
      int int0 = IteratorUtils.size(iterator1);
      assertFalse(iterator0.equals((Object)iterator1));
      assertFalse(iterator1.equals((Object)iterator0));
      assertEquals(0, int0);
      
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[5];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLIntegrityConstraintViolationException", sQLTransientException0.toString());
      assertNotNull(sQLTransientException0);
      
      sQLTransientExceptionArray0[0] = sQLTransientException0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "");
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTransientConnectionException0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLRecoverableException0);
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLRecoverableException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLRecoverableException sQLRecoverableException1 = (SQLRecoverableException)sQLRecoverableException0.fillInStackTrace();
      assertSame(sQLRecoverableException0, sQLRecoverableException1);
      assertSame(sQLRecoverableException1, sQLRecoverableException0);
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException1.toString());
      assertNull(sQLRecoverableException1.getSQLState());
      assertNull(sQLRecoverableException1.getMessage());
      assertNotNull(sQLRecoverableException1);
      
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTransactionRollbackException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("$`e[", sQLTransactionRollbackException0);
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLRecoverableException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: $`e[", sQLTransientConnectionException1.toString());
      assertEquals("$`e[", sQLTransientConnectionException1.getMessage());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertNotNull(sQLTransientConnectionException1);
      
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransientConnectionException1;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("$`e[", "$`e[", 0, sQLTransientException0);
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLIntegrityConstraintViolationException", sQLTransientException0.toString());
      assertEquals("java.sql.SQLTimeoutException: $`e[", sQLTimeoutException0.toString());
      assertEquals("$`e[", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("$`e[", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[6];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("dw5NK9Mbog$(#`Q", "'P\"xVCYK", 1345);
      assertEquals("dw5NK9Mbog$(#`Q", sQLRecoverableException0.getMessage());
      assertEquals("'P\"xVCYK", sQLRecoverableException0.getSQLState());
      assertEquals(1345, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: dw5NK9Mbog$(#`Q", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      
      SQLWarning sQLWarning0 = new SQLWarning("dw5NK9Mbog$(#`Q", "dw5NK9Mbog$(#`Q", sQLRecoverableException0);
      assertEquals("dw5NK9Mbog$(#`Q", sQLRecoverableException0.getMessage());
      assertEquals("'P\"xVCYK", sQLRecoverableException0.getSQLState());
      assertEquals(1345, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: dw5NK9Mbog$(#`Q", sQLRecoverableException0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: dw5NK9Mbog$(#`Q", sQLWarning0.toString());
      assertEquals("dw5NK9Mbog$(#`Q", sQLWarning0.getMessage());
      assertEquals("dw5NK9Mbog$(#`Q", sQLWarning0.getSQLState());
      assertNotNull(sQLWarning0);
      
      sQLExceptionArray0[0] = (SQLException) sQLWarning0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("0qtumx|", "8dV95^sCx{%*-0", 1345);
      assertEquals("java.sql.SQLTransactionRollbackException: 0qtumx|", sQLTransactionRollbackException0.toString());
      assertEquals("8dV95^sCx{%*-0", sQLTransactionRollbackException0.getSQLState());
      assertEquals(1345, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("0qtumx|", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
      
      Iterator<Properties> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Properties>) iterator0, (Iterator<? extends Properties>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      
      int int0 = IteratorUtils.size(iterator1);
      assertFalse(iterator0.equals((Object)iterator1));
      assertFalse(iterator1.equals((Object)iterator0));
      assertEquals(0, int0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: java.sql.SQLIntegrityConstraintViolationException", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLTransientException0.getMessage());
      assertNotNull(sQLTransientException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("u");
      assertEquals("u", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: u", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      assertFalse(arrayList0.contains(sQLFeatureNotSupportedException0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("u");
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertEquals("u", sQLFeatureNotSupportedException1.getMessage());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: u", sQLFeatureNotSupportedException1.toString());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException1);
      
      boolean boolean0 = arrayList0.add(sQLFeatureNotSupportedException1);
      assertTrue(arrayList0.contains(sQLFeatureNotSupportedException1));
      assertFalse(arrayList0.contains(sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("u", sQLFeatureNotSupportedException1.getMessage());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: u", sQLFeatureNotSupportedException1.toString());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("+'NCcX6E", "org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator", 91);
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException0));
      assertEquals("java.sql.SQLFeatureNotSupportedException: +'NCcX6E", sQLFeatureNotSupportedException2.toString());
      assertEquals("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator", sQLFeatureNotSupportedException2.getSQLState());
      assertEquals(91, sQLFeatureNotSupportedException2.getErrorCode());
      assertEquals("+'NCcX6E", sQLFeatureNotSupportedException2.getMessage());
      assertNotNull(sQLFeatureNotSupportedException2);
      
      boolean boolean1 = arrayList0.add(sQLFeatureNotSupportedException1);
      assertTrue(arrayList0.contains(sQLFeatureNotSupportedException1));
      assertFalse(arrayList0.contains(sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException2));
      assertTrue(boolean1 == boolean0);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException2);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals("u", sQLFeatureNotSupportedException1.getMessage());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: u", sQLFeatureNotSupportedException1.toString());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      
      Spliterator<Throwable> spliterator0 = sQLFeatureNotSupportedException2.spliterator();
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException0));
      assertNotSame(sQLFeatureNotSupportedException2, sQLFeatureNotSupportedException1);
      assertNotSame(sQLFeatureNotSupportedException2, sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: +'NCcX6E", sQLFeatureNotSupportedException2.toString());
      assertEquals("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator", sQLFeatureNotSupportedException2.getSQLState());
      assertEquals(91, sQLFeatureNotSupportedException2.getErrorCode());
      assertEquals("+'NCcX6E", sQLFeatureNotSupportedException2.getMessage());
      assertNotNull(spliterator0);
      
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) arrayList0);
      assertTrue(arrayList0.contains(sQLFeatureNotSupportedException1));
      assertFalse(arrayList0.contains(sQLFeatureNotSupportedException2));
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator1 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException2);
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(resettableListIterator1.equals((Object)resettableListIterator0));
      assertEquals("java.sql.SQLFeatureNotSupportedException: +'NCcX6E", sQLFeatureNotSupportedException2.toString());
      assertEquals("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator", sQLFeatureNotSupportedException2.getSQLState());
      assertEquals(91, sQLFeatureNotSupportedException2.getErrorCode());
      assertEquals("+'NCcX6E", sQLFeatureNotSupportedException2.getMessage());
      assertFalse(resettableListIterator1.hasPrevious());
      assertTrue(resettableListIterator1.hasNext());
      assertNotNull(resettableListIterator1);
      
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator1, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator1);
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(resettableListIterator1.equals((Object)resettableListIterator0));
      assertNotSame(sQLFeatureNotSupportedException2, sQLFeatureNotSupportedException1);
      assertNotSame(sQLFeatureNotSupportedException2, sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: +'NCcX6E", sQLFeatureNotSupportedException2.toString());
      assertEquals("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator", sQLFeatureNotSupportedException2.getSQLState());
      assertEquals(91, sQLFeatureNotSupportedException2.getErrorCode());
      assertEquals("+'NCcX6E", sQLFeatureNotSupportedException2.getMessage());
      assertFalse(resettableListIterator1.hasPrevious());
      assertTrue(resettableListIterator1.hasNext());
      assertNotNull(zippingIterator0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      int int1 = iIOMetadataNode0.getLength();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      ArrayIterator<SQLRecoverableException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLRecoverableException>(sQLTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      boolean boolean0 = arrayList0.add(sQLFeatureNotSupportedException0);
      assertTrue(arrayList0.contains(sQLFeatureNotSupportedException0));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      Consumer<SQLFeatureNotSupportedException> consumer0 = (Consumer<SQLFeatureNotSupportedException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      assertTrue(arrayList0.contains(sQLFeatureNotSupportedException0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("u");
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("u", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: u", sQLFeatureNotSupportedException1.toString());
      assertNotNull(sQLFeatureNotSupportedException1);
      
      boolean boolean1 = arrayList0.add(sQLFeatureNotSupportedException1);
      assertTrue(arrayList0.contains(sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertTrue(boolean1);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("u", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: u", sQLFeatureNotSupportedException1.toString());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator", "org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator", 395);
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException1));
      assertEquals("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator", sQLFeatureNotSupportedException2.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator", sQLFeatureNotSupportedException2.toString());
      assertEquals(395, sQLFeatureNotSupportedException2.getErrorCode());
      assertEquals("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator", sQLFeatureNotSupportedException2.getMessage());
      assertNotNull(sQLFeatureNotSupportedException2);
      
      boolean boolean2 = arrayList0.add(sQLFeatureNotSupportedException2);
      assertTrue(arrayList0.contains(sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(sQLFeatureNotSupportedException2, sQLFeatureNotSupportedException0);
      assertNotSame(sQLFeatureNotSupportedException2, sQLFeatureNotSupportedException1);
      assertTrue(boolean2);
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator", sQLFeatureNotSupportedException2.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator", sQLFeatureNotSupportedException2.toString());
      assertEquals(395, sQLFeatureNotSupportedException2.getErrorCode());
      assertEquals("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator", sQLFeatureNotSupportedException2.getMessage());
      
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) arrayList0);
      assertTrue(arrayList0.contains(sQLFeatureNotSupportedException2));
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      assertTrue(arrayList0.contains(sQLFeatureNotSupportedException2));
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertNotNull(zippingIterator0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      int int0 = iIOMetadataNode0.getLength();
      assertEquals(0, int0);
      
      ArrayIterator<SQLRecoverableException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLRecoverableException>(iIOMetadataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ListIterator<SQLTransientException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.contains((Iterator<SQLTransientException>) listIterator0, (Object) listIterator0);
      Hashtable<SQLException, Closure<Object>> hashtable0 = new Hashtable<SQLException, Closure<Object>>();
      Enumeration<SQLException> enumeration0 = hashtable0.keys();
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) listIterator0, 3420);
      IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0, (Collection<? super SQLException>) list0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, ArrayList<Properties>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, ArrayList<Properties>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, ArrayList<Properties>>(orderedMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) abstractOrderedMapIteratorDecorator0);
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      ReverseListIterator<Locale.Category> reverseListIterator0 = new ReverseListIterator<Locale.Category>(linkedList0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Predicate<Locale.Category> predicate0 = IdentityPredicate.identityPredicate(locale_Category0);
      IteratorUtils.filteredListIterator((ListIterator<? extends Locale.Category>) reverseListIterator0, (Predicate<? super Locale.Category>) predicate0);
      Transformer<Object, Properties>[] transformerArray0 = (Transformer<Object, Properties>[]) Array.newInstance(Transformer.class, 4);
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      transformerArray0[0] = transformer0;
      Transformer<Object, Properties> transformer1 = ExceptionTransformer.exceptionTransformer();
      transformerArray0[2] = transformer1;
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 7);
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      classArray0[0] = class1;
      Class<IIOMetadataNode> class2 = IIOMetadataNode.class;
      classArray0[1] = class2;
      Class<IIOMetadataNode> class3 = IIOMetadataNode.class;
      classArray0[2] = class3;
      Factory<String> factory0 = ConstantFactory.constantFactory("3r;");
      Transformer<Object, String> transformer2 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      OrderedMapIterator<SQLException, SQLClientInfoException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLException, SQLClientInfoException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLException, ? extends SQLClientInfoException>) orderedMapIterator1);
      AbstractOrderedMapIteratorDecorator<SQLException, SQLClientInfoException> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLException, SQLClientInfoException>(orderedMapIterator2);
      String string0 = IteratorUtils.toString((Iterator<SQLException>) orderedMapIterator1, (Transformer<? super SQLException, String>) transformer2, "next() must have been called for remove() to function", "next() must have been called for remove() to function", "oIi;OQ");
      assertEquals("next() must have been called for remove() to functionoIi;OQ", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.contains((Iterator<StringTokenizer>) null, (Object) resettableIterator0);
      IteratorUtils.size((Iterator<?>) null);
      ExceptionTransformer.exceptionTransformer();
      ExceptionTransformer.exceptionTransformer();
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>((Object) null, true);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("PFzI _");
      String string0 = IteratorUtils.toString((Iterator<Object>) singletonIterator0, (Transformer<? super Object, String>) transformer0, "", "", "");
      assertFalse(singletonIterator0.hasNext());
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^M=tY>^");
      mockPrintWriter0.append(':');
      IteratorUtils.emptyListIterator();
      ArrayList<Iterator<SQLIntegrityConstraintViolationException>>[] arrayListArray0 = (ArrayList<Iterator<SQLIntegrityConstraintViolationException>>[]) Array.newInstance(ArrayList.class, 17);
      ArrayList<Iterator<SQLIntegrityConstraintViolationException>> arrayList0 = new ArrayList<Iterator<SQLIntegrityConstraintViolationException>>();
      arrayListArray0[0] = arrayList0;
      ArrayList<Iterator<SQLIntegrityConstraintViolationException>> arrayList1 = new ArrayList<Iterator<SQLIntegrityConstraintViolationException>>();
      arrayListArray0[1] = arrayList1;
      ArrayList<Iterator<SQLIntegrityConstraintViolationException>> arrayList2 = new ArrayList<Iterator<SQLIntegrityConstraintViolationException>>();
      arrayListArray0[2] = arrayList2;
      ArrayList<Iterator<SQLIntegrityConstraintViolationException>> arrayList3 = new ArrayList<Iterator<SQLIntegrityConstraintViolationException>>();
      arrayListArray0[3] = arrayList3;
      ArrayList<Iterator<SQLIntegrityConstraintViolationException>> arrayList4 = new ArrayList<Iterator<SQLIntegrityConstraintViolationException>>();
      arrayListArray0[4] = arrayList4;
      ArrayList<Iterator<SQLIntegrityConstraintViolationException>> arrayList5 = new ArrayList<Iterator<SQLIntegrityConstraintViolationException>>();
      arrayListArray0[5] = arrayList5;
      ArrayList<Iterator<SQLIntegrityConstraintViolationException>> arrayList6 = new ArrayList<Iterator<SQLIntegrityConstraintViolationException>>();
      arrayListArray0[6] = arrayList6;
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      LoopingIterator<SQLIntegrityConstraintViolationException> loopingIterator0 = new LoopingIterator<SQLIntegrityConstraintViolationException>(arrayDeque0);
      ZippingIterator<SQLIntegrityConstraintViolationException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) loopingIterator0);
      arrayList4.add((Iterator<SQLIntegrityConstraintViolationException>) zippingIterator0);
      ArrayList<Iterator<SQLIntegrityConstraintViolationException>> arrayList7 = new ArrayList<Iterator<SQLIntegrityConstraintViolationException>>();
      arrayListArray0[7] = arrayList7;
      ArrayList<Iterator<SQLIntegrityConstraintViolationException>> arrayList8 = new ArrayList<Iterator<SQLIntegrityConstraintViolationException>>();
      arrayListArray0[8] = arrayList8;
      IteratorUtils.arrayListIterator(arrayListArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Properties>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DefaultEquator<IIOMetadataNode> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<IIOMetadataNode> equalPredicate0 = new EqualPredicate<IIOMetadataNode>(iIOMetadataNode0, defaultEquator0);
      PredicateTransformer<IIOMetadataNode> predicateTransformer0 = new PredicateTransformer<IIOMetadataNode>(equalPredicate0);
      Boolean boolean0 = predicateTransformer0.transform(iIOMetadataNode0);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(boolean0, false);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) singletonIterator0, (Transformer<? super Object, String>) transformer0, "", "", "c6GJn4+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.lang.Boolean' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("[");
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) transformer0, "[", "x^noe3C", "Node must not be null");
      Comparator<SQLFeatureNotSupportedException> comparator0 = (Comparator<SQLFeatureNotSupportedException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator1, (Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[6];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("dw5NK9Mbog$(#`Q", "'P\"xVCYK", 1345);
      SQLWarning sQLWarning0 = new SQLWarning("dw5NK9Mbog$(#`Q", "nodeList must not be null!", sQLRecoverableException0);
      sQLExceptionArray0[0] = (SQLException) sQLWarning0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("0qtumx|", "8dV95^sCx{%*-0", 1345);
      sQLExceptionArray0[1] = (SQLException) sQLTransactionRollbackException0;
      SQLTransientException sQLTransientException0 = new SQLTransientException("'P\"xVCYK", "", 1345);
      sQLExceptionArray0[2] = (SQLException) sQLTransientException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Collection must not be null", sQLTransientException0);
      sQLExceptionArray0[3] = (SQLException) sQLSyntaxErrorException0;
      SQLTransientException sQLTransientException1 = new SQLTransientException();
      sQLExceptionArray0[4] = (SQLException) sQLTransientException1;
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1345;
      intArray0[2] = 1345;
      intArray0[3] = 1345;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("FqZHirP$Et3o", "L]@'( Ae", 1345, intArray0, sQLExceptionArray0[0]);
      sQLExceptionArray0[5] = (SQLException) batchUpdateException0;
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0);
      Iterable<SQLException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) resettableIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("5XhxHf? =.T(%:S;1?", "5XhxHf? =.T(%:S;1?");
      Transformer<Object, SQLTimeoutException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) transformer0, (-1), 2335);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 16, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, ArrayList<Properties>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, ArrayList<Properties>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, ArrayList<Properties>>(orderedMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) abstractOrderedMapIteratorDecorator0);
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      ReverseListIterator<Locale.Category> reverseListIterator0 = new ReverseListIterator<Locale.Category>(linkedList0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Predicate<Locale.Category> predicate0 = IdentityPredicate.identityPredicate(locale_Category0);
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category0);
      IteratorUtils.filteredListIterator((ListIterator<? extends Locale.Category>) listIterator0, (Predicate<? super Locale.Category>) predicate0);
      Transformer<Object, Properties>[] transformerArray0 = (Transformer<Object, Properties>[]) Array.newInstance(Transformer.class, 4);
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      transformerArray0[0] = transformer0;
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) orderedIterator0, (Iterator<? extends SQLTransientConnectionException>) orderedIterator0);
      IteratorUtils.asIterable((Iterator<?>) abstractOrderedMapIteratorDecorator0);
      Vector<Properties> vector0 = null;
      try {
        vector0 = new Vector<Properties>((Collection<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttributeNode("");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ConstantTransformer.nullTransformer();
      ListIterator<Transformer<Object, SQLFeatureNotSupportedException>> listIterator0 = IteratorUtils.singletonListIterator(transformer0);
      Enumeration<Transformer<Object, SQLFeatureNotSupportedException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Transformer<Object, SQLFeatureNotSupportedException>>) listIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Transformer<Object, SQLFeatureNotSupportedException>>) enumeration0);
      Hashtable<SQLSyntaxErrorException, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLSyntaxErrorException, SQLTransactionRollbackException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLSyntaxErrorException0);
      int int0 = 3416;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", "", 3416, sQLSyntaxErrorException0);
      sQLSyntaxErrorException1.printStackTrace();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("y168)-q/9k_xymH", "y168)-q/9k_xymH", sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException2;
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException1;
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException1;
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 3416);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLDataExceptionArray0, (-1106));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      iIOMetadataNode1.insertBefore(iIOMetadataNode1, iIOMetadataNode0);
      IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      String string0 = "g\"\"^J-Uu0ts^_Ri.!*(";
      try { 
        iIOMetadataNode0.isDefaultNamespace("g\"\"^J-Uu0ts^_Ri.!*(");
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Method not supported
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{EIPV A+";
      stringArray0[1] = "The predicate and transformer map must not be null";
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.commons.collections4.iterators.AbstractEmptyIterator";
      stringArray0[4] = "Array class must not be null";
      stringArray0[5] = "Iterator[]";
      IteratorUtils.arrayIterator(stringArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) "Iterator[]", comparator0);
      int int0 = 10;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      Predicate<Object> predicate1 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[2] = predicate1;
      // Undeclared exception!
      try { 
        NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not contain a null predicate, index 3 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Iterator<BatchUpdateException>[] iteratorArray0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
      EntrySetMapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> entrySetMapIterator0 = null;
      try {
        entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException>((Map<SQLNonTransientConnectionException, SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      linkedHashSet0.add(iIOMetadataNode0);
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) linkedHashSet0);
      OrderedMapIterator<SQLIntegrityConstraintViolationException, ClientInfoStatus> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ConstantTransformer.nullTransformer();
      ListIterator<Transformer<Object, SQLFeatureNotSupportedException>> listIterator0 = IteratorUtils.singletonListIterator(transformer0);
      Enumeration<Transformer<Object, SQLFeatureNotSupportedException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Transformer<Object, SQLFeatureNotSupportedException>>) listIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Transformer<Object, SQLFeatureNotSupportedException>>) enumeration0);
      Hashtable<SQLSyntaxErrorException, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLSyntaxErrorException, SQLTransactionRollbackException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLSyntaxErrorException0);
      hashtable0.put(sQLSyntaxErrorException0, sQLTransactionRollbackException0);
      EntrySetMapIterator<SQLSyntaxErrorException, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<SQLSyntaxErrorException, SQLTransactionRollbackException>(hashtable0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLSyntaxErrorException>) entrySetMapIterator0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[0];
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0, 0, 2203);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("=C^/V>s");
      int int0 = 2151;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLDataException0, 2151);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1607, 6147);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      IteratorUtils.singletonListIterator(hashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLWarning>) null, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }
}
