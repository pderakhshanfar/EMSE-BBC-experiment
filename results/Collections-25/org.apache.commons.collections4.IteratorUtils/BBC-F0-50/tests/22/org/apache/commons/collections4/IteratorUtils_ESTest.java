/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:49:33 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Iterable<Object> iterable0 = new TreeSet<Object>();
      Integer[] integerArray0 = new Integer[13];
      Integer integer0 = new Integer(2);
      int int0 = 1500;
      Integer integer1 = new Integer(1500);
      Integer integer2 = new Integer(58);
      Integer integer3 = new Integer(1175);
      Integer integer4 = new Integer(2);
      Integer integer5 = new Integer(58);
      Integer integer6 = new Integer(1175);
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      IteratorUtils.get((Iterator<Integer>) resettableListIterator0, 0);
      HashMap<Iterator<SQLTransactionRollbackException>, String> hashMap0 = new HashMap<Iterator<SQLTransactionRollbackException>, String>();
      EntrySetMapIterator<Iterator<SQLTransactionRollbackException>, String> entrySetMapIterator0 = new EntrySetMapIterator<Iterator<SQLTransactionRollbackException>, String>(hashMap0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Iterator<SQLTransactionRollbackException>>) entrySetMapIterator0, (Transformer<? super Iterator<SQLTransactionRollbackException>, String>) transformer0, "Enumeration must not be null", (String) null, "Enumeration must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLWarning>) null, (Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      IteratorUtils.getIterator(sQLFeatureNotSupportedException0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[1];
      Class<SQLWarning> class0 = SQLWarning.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0, 1);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLNonTransientConnectionException[]) null, 3067, 59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<?>) resettableIterator0);
      Integer[] integerArray0 = new Integer[13];
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(1500);
      Integer integer2 = new Integer(58);
      Integer integer3 = new Integer(2);
      Integer integer4 = new Integer(1175);
      Integer integer5 = new Integer(2);
      Integer integer6 = new Integer((-1189));
      Integer integer7 = new Integer(58);
      Integer integer8 = new Integer(4);
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      IteratorUtils.get((Iterator<Integer>) resettableListIterator0, 0);
      IteratorUtils.emptyMapIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("d7Xv", "toIndex = ", 58, sQLSyntaxErrorException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "ExceptionTransformer invoked", sQLFeatureNotSupportedException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      predicateArray1[0] = (Predicate<Object>) uniquePredicate0;
      predicateArray1[1] = (Predicate<Object>) uniquePredicate0;
      predicateArray1[2] = (Predicate<Object>) uniquePredicate0;
      predicateArray1[3] = (Predicate<Object>) uniquePredicate0;
      predicateArray1[4] = (Predicate<Object>) uniquePredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray1);
      predicateArray0[1] = (Predicate<Object>) onePredicate0;
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicateArray1[2]);
      predicateArray0[2] = (Predicate<Object>) nullIsTruePredicate0;
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("toIndex = ");
      Transformer<Object, SQLNonTransientConnectionException> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicateArray0[2], (Transformer<? super Object, ? extends SQLNonTransientConnectionException>) transformer0, (Transformer<? super Object, ? extends SQLNonTransientConnectionException>) transformer0);
      SwitchTransformer<Object, SQLNonTransientConnectionException> switchTransformer0 = new SwitchTransformer<Object, SQLNonTransientConnectionException>(predicateArray0, (Transformer<? super Object, ? extends SQLNonTransientConnectionException>[]) null, transformer1);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) switchTransformer0);
      Transformer<SQLNonTransientConnectionException, String> transformer2 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLNonTransientConnectionException, String>) transformer2, "' threw an exception", "", "d7Xv");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      SingletonListIterator<ArrayList<Object>> singletonListIterator0 = new SingletonListIterator<ArrayList<Object>>(arrayList1);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<ArrayList<Object>>) singletonListIterator0, (Predicate<? super ArrayList<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>((StringTokenizer) null);
      Class<Boolean> class0 = Boolean.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("oyx3bp~id");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<?>) resettableIterator0);
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(1500);
      Integer integer2 = new Integer(58);
      Integer integer3 = new Integer(2);
      Integer integer4 = new Integer(1500);
      Integer integer5 = new Integer(2);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[4];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(".lsv-!E*D+YQY)");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("~G[E", ".lsv-!E*D+YQY)", sQLTransactionRollbackException0);
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransientConnectionException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(".lsv-!E*D+YQY)", sQLTransientConnectionException0);
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTimeoutException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("");
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTransientConnectionException1;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransactionRollbackException1;
      sQLTransientConnectionException1.getSuppressed();
      ObjectArrayIterator<SQLTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientException>(sQLTransientExceptionArray0);
      IteratorUtils.get((Iterator<SQLTransientException>) objectArrayIterator0, 2);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<Locale.Category, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Locale.Category, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Locale.Category, Object>(orderedMapIterator0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) comparator0, (Iterator<? extends Locale.Category>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends Locale.Category>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<?>) resettableIterator0);
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator");
      Integer integer2 = new Integer(118);
      Integer integer3 = new Integer(58);
      Integer integer4 = new Integer(118);
      Integer integer5 = new Integer(118);
      Integer integer6 = new Integer((-1189));
      Integer integer7 = new Integer(57);
      Integer integer8 = new Integer(58);
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      IteratorUtils.get((Iterator<Integer>) resettableListIterator0, 4);
      IteratorUtils.emptyListIterator();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("next() must have been called for remove() to function", "org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator");
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("next() must have been called for remove() to function", "org.apache.commons.collections4.functors.AnyPredicate");
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 118);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ListIterator<ArrayList<Object>> listIterator0 = new SingletonListIterator<ArrayList<Object>>(arrayList0);
      ArrayList<Object> arrayList1 = IteratorUtils.find((Iterator<ArrayList<Object>>) listIterator0, (Predicate<? super ArrayList<Object>>) predicate0);
      assertSame(arrayList1, arrayList0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IteratorUtils.emptyIterator();
      EmptyListIterator.resettableEmptyListIterator();
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[8];
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("`?!4I:y<", "", sQLTransientException0);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("H/DHT~&!nY");
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("6VA)_", "H/DHT~&!nY", 0);
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("L", "[z4 %rV+%2du'n7b1", sQLSyntaxErrorException0);
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      SQLDataException sQLDataException0 = new SQLDataException("H/DHT~&!nY", sQLSyntaxErrorException0);
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLDataException0;
      sQLNonTransientConnectionException0.setNextException(sQLNonTransientExceptionArray0[3]);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", "L", sQLNonTransientExceptionArray0[4]);
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLNonTransientConnectionException1;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException((String) null, "prefix may not be null", 13, sQLNonTransientExceptionArray0[1]);
      sQLNonTransientExceptionArray0[6] = (SQLNonTransientException) sQLSyntaxErrorException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException();
      sQLNonTransientExceptionArray0[7] = (SQLNonTransientException) sQLNonTransientConnectionException2;
      ObjectArrayIterator<SQLNonTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) objectArrayIterator0, (Predicate<? super SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Integer integer0 = new Integer((-1486));
      Integer integer1 = new Integer(100);
      Integer integer2 = new Integer(526);
      Integer integer3 = new Integer(21);
      Integer integer4 = new Integer(261);
      Integer integer5 = new Integer(104);
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = integer4;
      integerArray0[2] = integer4;
      integerArray0[3] = integer5;
      integerArray0[4] = integer2;
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1389));
      integerArray0[6] = integer6;
      integerArray0[7] = integer1;
      integerArray0[8] = integer5;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Integer>) resettableListIterator0, 61);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 52
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<?>) resettableIterator0);
      Integer[] integerArray0 = new Integer[9];
      int int0 = 2;
      Integer integer0 = new Integer(2);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(58);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1189));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(104);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(4);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(4);
      integerArray0[8] = integer8;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      Integer integer9 = IteratorUtils.get((Iterator<Integer>) resettableListIterator0, 0);
      assertEquals(2, (int)integer9);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(linkedList0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = (Predicate<Object>) identityPredicate0;
      predicateArray0[1] = (Predicate<Object>) identityPredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicateArray0[1], closure0);
      Predicate<? super Object>[] predicateArray1 = onePredicate0.getPredicates();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "start";
      stringArray0[1] = "tanBtwWu%r<j{A,H";
      stringArray0[2] = "start";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "tanBtwWu%r<j{A,H";
      stringArray0[6] = "";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      IteratorUtils.apply((Iterator<String>) objectArrayListIterator0, (Closure<? super String>) ifClosure0);
      LinkedList<SQLClientInfoException> linkedList1 = new LinkedList<SQLClientInfoException>();
      ReverseListIterator<SQLClientInfoException> reverseListIterator0 = new ReverseListIterator<SQLClientInfoException>(linkedList1);
      OnePredicate.onePredicate(predicateArray1);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<?>) null, (Predicate<? super Object>) predicateArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Stack<SQLNonTransientException> stack0 = new Stack<SQLNonTransientException>();
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends StringTokenizer>) resettableIterator0, (Transformer<? super StringTokenizer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      Transformer<Object, ArrayDeque<StringTokenizer>> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<ArrayDeque<StringTokenizer>> iterator0 = IteratorUtils.objectGraphIterator(arrayDeque0, (Transformer<? super ArrayDeque<StringTokenizer>, ? extends ArrayDeque<StringTokenizer>>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll(iterator0, (Predicate<? super ArrayDeque<StringTokenizer>>) uniquePredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IteratorUtils.loopingListIterator((List<Integer>) linkedList0);
      NotNullPredicate.notNullPredicate();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("t%BF:,t'vqo{=WxJdi", "", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLClientInfoException1);
      IteratorUtils.singletonIterator(sQLTimeoutException0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLTransientException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLTransientException>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLTransientException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLTransientException>(hashMap0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0, (Collection<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "K-vO?f4");
      IteratorUtils.emptyMapIterator();
      SQLDataException sQLDataException0 = new SQLDataException();
      ConstantFactory.constantFactory(sQLDataException0);
      ConstantFactory<SQLDataException> constantFactory0 = new ConstantFactory<SQLDataException>(sQLDataException0);
      Transformer<Object, SQLDataException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLDataException>) constantFactory0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>((-226), transformerClosure0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((PriorityQueue<BatchUpdateException>[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 24);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate0;
      predicateArray0[4] = predicate0;
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(class0);
      predicateArray0[5] = (Predicate<Object>) identityPredicate0;
      predicateArray0[6] = predicate0;
      predicateArray0[7] = predicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(onePredicate0, (Closure<? super Object>) null);
      onePredicate0.getPredicates();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "start";
      stringArray0[2] = "tanBtwWu%r<j{A,H";
      stringArray0[3] = "";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<String>) objectArrayListIterator0, (Closure<? super String>) ifClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.OnePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLDataException sQLDataException0 = new SQLDataException();
      Factory<SQLDataException> factory0 = ConstantFactory.constantFactory(sQLDataException0);
      Transformer<Object, SQLDataException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLDataException>) factory0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(10, transformerClosure0);
      IteratorUtils.apply((Iterator<String>) null, (Closure<? super String>) forClosure0);
      assertEquals(10, forClosure0.getCount());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedIterator();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, (Closure<? super Object>) null);
      MapIterator<String, SQLWarning> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<String, SQLWarning> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends String, ? extends SQLWarning>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<String>) mapIterator1, (Closure<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("L@lyvOkPn");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>(":cH{_*Y2[5");
      int[] intArray0 = new int[1];
      intArray0[0] = 870;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(":cH{_*Y2[5");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(":cH{_*Y2[5", ":cH{_*Y2[5", intArray0, sQLTimeoutException0);
      ConstantTransformer.constantTransformer(batchUpdateException0);
      IteratorUtils.toString((Iterator<StringTokenizer>) singletonListIterator0, (Transformer<? super StringTokenizer, String>) constantTransformer0);
      IteratorUtils.emptyMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Iterator<SQLTransactionRollbackException>>) comparator0, (Iterator<? extends Iterator<SQLTransactionRollbackException>>) null, (Iterator<? extends Iterator<SQLTransactionRollbackException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      vector0.ensureCapacity((-1832));
      IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) vector0);
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<SQLException> class0 = SQLException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, (Closure<? super Object>) null);
      IteratorUtils.apply((Iterator<String>) orderedIterator0, (Closure<? super String>) ifClosure0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IteratorUtils.emptyMapIterator();
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      IteratorUtils.getIterator(instanceofPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<StringTokenizer>) null, (Transformer<? super StringTokenizer, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.isEmpty(orderedMapIterator0);
      NotNullPredicate.notNullPredicate();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Integer>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      UnaryOperator<SQLNonTransientException> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) vector0);
      LinkedHashSet<InstanceofPredicate>[] linkedHashSetArray0 = (LinkedHashSet<InstanceofPredicate>[]) Array.newInstance(LinkedHashSet.class, 8);
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      linkedHashSetArray0[0] = linkedHashSet0;
      LinkedHashSet<InstanceofPredicate> linkedHashSet1 = new LinkedHashSet<InstanceofPredicate>();
      linkedHashSetArray0[1] = linkedHashSet1;
      LinkedHashSet<InstanceofPredicate> linkedHashSet2 = new LinkedHashSet<InstanceofPredicate>();
      linkedHashSetArray0[2] = linkedHashSet2;
      LinkedHashSet<InstanceofPredicate> linkedHashSet3 = new LinkedHashSet<InstanceofPredicate>();
      linkedHashSetArray0[3] = linkedHashSet3;
      LinkedHashSet<InstanceofPredicate> linkedHashSet4 = new LinkedHashSet<InstanceofPredicate>(0);
      linkedHashSetArray0[4] = linkedHashSet4;
      LinkedHashSet<InstanceofPredicate> linkedHashSet5 = new LinkedHashSet<InstanceofPredicate>();
      linkedHashSetArray0[5] = linkedHashSet5;
      LinkedHashSet<InstanceofPredicate> linkedHashSet6 = new LinkedHashSet<InstanceofPredicate>();
      linkedHashSetArray0[6] = linkedHashSet6;
      LinkedHashSet<InstanceofPredicate> linkedHashSet7 = new LinkedHashSet<InstanceofPredicate>();
      linkedHashSetArray0[7] = linkedHashSet7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(linkedHashSetArray0, 0, (-4137));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      SingletonListIterator<ArrayDeque<StringTokenizer>> singletonListIterator1 = new SingletonListIterator<ArrayDeque<StringTokenizer>>(arrayDeque0);
      TruePredicate.truePredicate();
      MapIterator<SQLIntegrityConstraintViolationException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) mapIterator0, (Iterator<?>) mapIterator0, (Iterator<?>) resettableIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      SingletonListIterator<ArrayDeque<StringTokenizer>> singletonListIterator0 = new SingletonListIterator<ArrayDeque<StringTokenizer>>(arrayDeque0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[7];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("s=]%~R,r-");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("s=]%~R,r-");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      uniquePredicate0.evaluate(sQLSyntaxErrorException0);
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("prefix may not be null");
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode();
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) objectArrayListIterator0, (Predicate<? super IIOMetadataNode>) uniquePredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IteratorUtils.emptyMapIterator();
      NotNullPredicate.notNullPredicate();
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 4);
      MapIterator<SQLSyntaxErrorException, Hashtable<SQLIntegrityConstraintViolationException, SQLDataException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) mapIterator0, (Iterator<? extends SQLSyntaxErrorException>) mapIterator0);
      iteratorArray0[0] = iterator0;
      String string0 = "";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) listIterator0;
      Iterator<SQLSyntaxErrorException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      iteratorArray0[2] = iterator1;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) listIterator0, (Predicate<? super SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      Properties[] propertiesArray0 = new Properties[7];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", (String) null, sQLDataException0);
      BiFunction<Object, Object, Properties> biFunction0 = (BiFunction<Object, Object, Properties>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      properties2.merge(sQLTransientConnectionException0, resettableIterator0, biFunction0);
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      properties2.put(properties3, properties0);
      properties2.put(properties5, properties0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 1192, hashtable0);
      properties0.put(sQLClientInfoException0, properties4);
      propertiesArray0[6] = properties6;
      IteratorUtils.arrayListIterator(propertiesArray0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties6);
      assertNotNull(iterator0);
      
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLFeatureNotSupportedException> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      Iterator<SQLFeatureNotSupportedException> iterator2 = IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator1, (Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      assertFalse(iterator2.equals((Object)iterator1));
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      predicateArray0[0] = predicate0;
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      Predicate<Object> predicate2 = NotPredicate.notPredicate((Predicate<? super Object>) predicate1);
      Predicate<Object> predicate3 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate2);
      predicateArray0[1] = predicate3;
      Predicate<Object> predicate4 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      predicateArray0[2] = predicate4;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate5 = ComparatorPredicate.comparatorPredicate((Object) resettableIterator0, comparator0);
      predicateArray0[3] = predicate5;
      Predicate<Object> predicate6 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      Iterator<Object> iterator3 = IteratorUtils.filteredIterator((Iterator<?>) resettableIterator0, (Predicate<? super Object>) predicate6);
      assertNotNull(iterator3);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) null);
      IteratorUtils.matchesAny((Iterator<SQLWarning>) null, (Predicate<? super SQLWarning>) predicate0);
      IteratorUtils.find((Iterator<Hashtable<Boolean, SQLSyntaxErrorException>>) null, (Predicate<? super Hashtable<Boolean, SQLSyntaxErrorException>>) predicate0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) predicate0;
      objectArray0[5] = (Object) predicate0;
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0);
      assertNotNull(resettableIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-3361));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      String string0 = "";
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) null, (Predicate<? super String>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      SingletonListIterator<ArrayDeque<StringTokenizer>> singletonListIterator0 = new SingletonListIterator<ArrayDeque<StringTokenizer>>(arrayDeque0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAll((Iterator<ArrayDeque<StringTokenizer>>) singletonListIterator0, (Predicate<? super ArrayDeque<StringTokenizer>>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      IteratorUtils.size((Iterator<?>) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 5);
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[0] = (Iterator<BatchUpdateException>) resettableIterator0;
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) resettableIterator0);
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) linkedList0);
      iteratorArray0[1] = iterator0;
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<BatchUpdateException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      iteratorArray0[2] = (Iterator<BatchUpdateException>) listIterator1;
      ListIteratorWrapper<BatchUpdateException> listIteratorWrapper0 = new ListIteratorWrapper<BatchUpdateException>(iterator0);
      iteratorArray0[3] = (Iterator<BatchUpdateException>) listIteratorWrapper0;
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(linkedList0);
      listIteratorWrapper0.nextIndex();
      iteratorArray0[4] = (Iterator<BatchUpdateException>) reverseListIterator0;
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      IteratorUtils.size((Iterator<?>) null);
      ArrayList<BatchUpdateException> arrayList1 = new ArrayList<BatchUpdateException>();
      IteratorUtils.emptyMapIterator();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[3];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, 394);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      int int0 = (-3228);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("d", "d", (-3228), sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      String string0 = "q";
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("q", "GREATER");
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, 1295, 1295);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<StringTokenizer, Integer> transformer0 = InvokerTransformer.invokerTransformer("}oyr/g");
      OrderedIterator<StringTokenizer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<Integer> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends StringTokenizer>) orderedIterator0, (Transformer<? super StringTokenizer, ? extends Integer>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Integer>) iterator0, (-2031L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<?>) orderedMapIterator0);
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<?>) orderedMapIterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("vpj;tiw{bTi,{_-EU");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>((StringTokenizer) null);
      BoundedIterator<StringTokenizer> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) singletonListIterator0, 0L);
      IteratorUtils.toString((Iterator<StringTokenizer>) boundedIterator0, (Transformer<? super StringTokenizer, String>) constantTransformer0);
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1951);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.emptyOrderedIterator();
      NotNullPredicate.notNullPredicate();
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque1 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque2 = new ArrayDeque<StringTokenizer>();
      SingletonListIterator<ArrayDeque<StringTokenizer>> singletonListIterator0 = new SingletonListIterator<ArrayDeque<StringTokenizer>>(arrayDeque2);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      SkippingIterator<ArrayDeque<StringTokenizer>> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<ArrayDeque<StringTokenizer>>) singletonListIterator0, 932L);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayDeque<StringTokenizer>>) skippingIterator0, (Predicate<? super ArrayDeque<StringTokenizer>>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category0, locale_Category0);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet0);
      Stack<EnumSet<Locale.Category>> stack0 = new Stack<EnumSet<Locale.Category>>();
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<EnumSet<Locale.Category>>) stack0);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator1 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet0);
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator1, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator1);
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IteratorUtils.loopingListIterator((List<Integer>) linkedList0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("=");
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(linkedList0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      IdentityPredicate.identityPredicate((SQLTransientException) sQLTimeoutException0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<String>) singletonListIterator0, (Predicate<? super String>) identityPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[6];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashtable0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 3497, sQLClientInfoException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", "", 3497);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "", 732);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "Node must not be null", "", 732);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("b,f@%", "", "", 732);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("Already at start of list.", "", "", (-198));
      stackTraceElementArray0[3] = stackTraceElement3;
      sQLTransactionRollbackException1.setStackTrace(stackTraceElementArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("~%h!{hW@b/HE,C", "eB1eRi){)L4S1m\"m_:", sQLClientInfoException0);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("'h8`{P?-os?{6<j", sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException(" is invalid for size ", "");
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("~%h!{hW@b/HE,C", sQLTransactionRollbackException0);
      IteratorUtils.singletonListIterator(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLInvalidAuthorizationSpecException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) orderedIterator0, (Iterator<? extends SQLTimeoutException>) orderedIterator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<ArrayDeque<BatchUpdateException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
      IteratorUtils.emptyOrderedIterator();
      NotNullPredicate.notNullPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) orderedIterator0, (Iterator<? extends SQLTimeoutException>) orderedIterator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Integer>) linkedList0);
      IteratorUtils.boundedIterator((Iterator<? extends Integer>) resettableListIterator0, 19L, 3434L);
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque1 = new ArrayDeque<StringTokenizer>();
      SingletonListIterator<ArrayDeque<StringTokenizer>> singletonListIterator0 = new SingletonListIterator<ArrayDeque<StringTokenizer>>(arrayDeque0);
      ArrayDeque<StringTokenizer> arrayDeque2 = new ArrayDeque<StringTokenizer>();
      UniquePredicate.uniquePredicate();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) arrayDeque1, (Equator<Object>) defaultEquator0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayDeque<StringTokenizer>>) singletonListIterator0, (Predicate<? super ArrayDeque<StringTokenizer>>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      IteratorUtils.toString((Iterator<StringTokenizer>) singletonListIterator0, (Transformer<? super StringTokenizer, String>) constantTransformer0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[]");
      SQLTransientException sQLTransientException0 = new SQLTransientException("", sQLTimeoutException0);
      MockThrowable mockThrowable0 = new MockThrowable("", sQLTransientException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTimeoutException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "_\"'?Y!q1bW", 793, (Map<String, ClientInfoStatus>) null, sQLTransientException0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) objectArrayListIterator0, (Transformer<? super SQLClientInfoException, String>) null, "[]", "5C", "Gm!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      IteratorUtils.emptyIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(arrayList0);
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      ListIterator<String> listIterator0 = new SingletonListIterator<String>("");
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<String>) loopingListIterator0, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      stringTokenizer0.hasMoreElements();
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", sQLTimeoutException0);
      MockThrowable mockThrowable0 = new MockThrowable("][\"&", sQLTransientException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(mockThrowable0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[0];
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      IteratorUtils.toString((Iterator<SQLClientInfoException>) objectArrayListIterator0, (Transformer<? super SQLClientInfoException, String>) constantTransformer0, "rT.lD6bgj|@", "", "uhJlY)Z8.~1");
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) zippingIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      ConstantFactory<SQLRecoverableException> constantFactory0 = new ConstantFactory<SQLRecoverableException>(sQLRecoverableException0);
      FactoryTransformer<Object, SQLRecoverableException> factoryTransformer0 = new FactoryTransformer<Object, SQLRecoverableException>(constantFactory0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Transformer<? super SQLClientInfoException, ? extends SQLRecoverableException>) factoryTransformer0);
      Iterator<SQLRecoverableException> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) iterator1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque1 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque2 = new ArrayDeque<StringTokenizer>();
      SingletonListIterator<ArrayDeque<StringTokenizer>> singletonListIterator0 = new SingletonListIterator<ArrayDeque<StringTokenizer>>(arrayDeque0);
      ArrayDeque<StringTokenizer> arrayDeque3 = new ArrayDeque<StringTokenizer>();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAll((Iterator<ArrayDeque<StringTokenizer>>) singletonListIterator0, (Predicate<? super ArrayDeque<StringTokenizer>>) predicate0);
      Comparator<SQLDataException> comparator0 = (Comparator<SQLDataException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("FJ|9h<N2#0L");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "FJ|9h<N2#0L";
      stringArray0[4] = "/Lntuzzw";
      stringArray0[5] = "FJ|9h<N2#0L";
      stringArray0[6] = "xku>mk8G^KGp";
      stringArray0[7] = "";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) resettableListIterator0);
      IteratorUtils.filteredListIterator((ListIterator<? extends String>) resettableListIterator0, (Predicate<? super String>) predicate0);
      IteratorUtils.emptyOrderedMapIterator();
      MapIterator<ArrayList<Object>, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<ArrayList<Object>, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<ArrayList<Object>, String>(mapIterator0);
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      IteratorUtils.find((Iterator<ArrayList<Object>>) mapIterator0, (Predicate<? super ArrayList<Object>>) predicate1);
      Iterator<SQLTransientException>[] iteratorArray0 = (Iterator<SQLTransientException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) orderedIterator0, (Iterator<? extends SQLTimeoutException>) orderedIterator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Integer>) linkedList0);
      IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) resettableListIterator0);
      BoundedIterator<Integer> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Integer>) resettableListIterator0, 19L, 3434L);
      ArrayDeque<StringTokenizer>[] arrayDequeArray0 = (ArrayDeque<StringTokenizer>[]) Array.newInstance(ArrayDeque.class, 3);
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<StringTokenizer> arrayDeque1 = new ArrayDeque<StringTokenizer>();
      arrayDequeArray0[1] = arrayDeque1;
      ArrayDeque<StringTokenizer> arrayDeque2 = new ArrayDeque<StringTokenizer>();
      arrayDequeArray0[2] = arrayDeque2;
      IteratorUtils.arrayListIterator(arrayDequeArray0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("suffix may not be null");
      IteratorUtils.matchesAny((Iterator<String>) singletonListIterator0, (Predicate<? super String>) predicate0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(boundedIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Comparator<SQLException> comparator0 = null;
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 7);
      int int0 = (-1798);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1798), (-1798));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 8);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) orderedIterator0, (Iterator<? extends SQLTimeoutException>) orderedIterator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      NotNullPredicate.notNullPredicate();
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>((String) null);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(singletonListIterator0);
      IteratorUtils.filteredListIterator((ListIterator<? extends String>) singletonListIterator0, (Predicate<? super String>) identityPredicate0);
      OrderedMapIterator<ArrayList<Object>, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<ArrayList<Object>, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<ArrayList<Object>, String>(orderedMapIterator0);
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      IteratorUtils.find((Iterator<ArrayList<Object>>) orderedMapIterator0, (Predicate<? super ArrayList<Object>>) identityPredicate0);
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 4);
      MapIterator<BatchUpdateException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[0] = (Iterator<BatchUpdateException>) mapIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) zippingIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      ConstantFactory<SQLRecoverableException> constantFactory0 = new ConstantFactory<SQLRecoverableException>(sQLRecoverableException0);
      FactoryTransformer<Object, SQLRecoverableException> factoryTransformer0 = new FactoryTransformer<Object, SQLRecoverableException>(constantFactory0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Transformer<? super SQLClientInfoException, ? extends SQLRecoverableException>) factoryTransformer0);
      Iterator<SQLRecoverableException> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) iterator1);
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer>[] arrayDequeArray0 = (ArrayDeque<StringTokenizer>[]) Array.newInstance(ArrayDeque.class, 8);
      arrayDequeArray0[0] = arrayDeque0;
      arrayDequeArray0[1] = arrayDeque0;
      arrayDequeArray0[2] = arrayDeque0;
      arrayDequeArray0[3] = arrayDeque0;
      arrayDequeArray0[4] = arrayDeque0;
      arrayDequeArray0[5] = arrayDeque0;
      arrayDequeArray0[6] = arrayDeque0;
      arrayDequeArray0[7] = arrayDeque0;
      IteratorUtils.arrayListIterator(arrayDequeArray0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ListIterator<String> listIterator1 = EmptyListIterator.emptyListIterator();
      IteratorUtils.matchesAny((Iterator<String>) listIterator1, (Predicate<? super String>) predicate0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SQLWarning sQLWarning0 = new SQLWarning("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapIterator", "Couldn't get the node: index (", (-1510));
      IteratorUtils.getIterator(sQLWarning0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("tcr^");
      boolean boolean0 = IteratorUtils.contains((Iterator<DataTruncation>) null, (Object) iIOMetadataNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
      Iterator<SQLTimeoutException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTimeoutException>) null, 61);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("uhJlY)Z8.~1");
      IteratorUtils.toString((Iterator<StringTokenizer>) singletonListIterator0, (Transformer<? super StringTokenizer, String>) transformer0);
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque1 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque2 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque3 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque4 = new ArrayDeque<StringTokenizer>();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>(vector0);
      LinkedList<SQLTimeoutException> linkedList1 = new LinkedList<SQLTimeoutException>(vector0);
      IteratorUtils.loopingListIterator((List<SQLTimeoutException>) linkedList1);
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.matchesAny((Iterator<String>) listIterator0, (Predicate<? super String>) predicate0);
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) zippingIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      ConstantFactory<SQLRecoverableException> constantFactory0 = new ConstantFactory<SQLRecoverableException>(sQLRecoverableException0);
      FactoryTransformer<Object, SQLRecoverableException> factoryTransformer0 = new FactoryTransformer<Object, SQLRecoverableException>(constantFactory0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Transformer<? super SQLClientInfoException, ? extends SQLRecoverableException>) factoryTransformer0);
      Iterator<SQLRecoverableException> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) iterator1);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>((Integer) null);
      Class<Integer> class0 = Integer.class;
      Integer[] integerArray0 = IteratorUtils.toArray((Iterator<? extends Integer>) singletonListIterator0, class0);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) singletonListIterator0, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) orderedIterator0, (Iterator<? extends SQLTimeoutException>) orderedIterator0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SQLWarning sQLWarning0 = new SQLWarning("98)v");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLWarning0);
      ConstantFactory<SQLRecoverableException> constantFactory0 = new ConstantFactory<SQLRecoverableException>(sQLRecoverableException0);
      FactoryTransformer<Object, SQLRecoverableException> factoryTransformer0 = new FactoryTransformer<Object, SQLRecoverableException>(constantFactory0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) null, (Transformer<? super SQLClientInfoException, ? extends SQLRecoverableException>) factoryTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("uhJlY)Z8.~1");
      IteratorUtils.toString((Iterator<StringTokenizer>) singletonListIterator0, (Transformer<? super StringTokenizer, String>) transformer0);
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque1 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque2 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque3 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer>[] arrayDequeArray0 = (ArrayDeque<StringTokenizer>[]) Array.newInstance(ArrayDeque.class, 1);
      ArrayDeque<StringTokenizer> arrayDeque4 = new ArrayDeque<StringTokenizer>();
      arrayDequeArray0[0] = arrayDeque4;
      IteratorUtils.arrayListIterator(arrayDequeArray0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      SQLDataException sQLDataException0 = new SQLDataException("uhJlY)Z8.~1", (String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("uhJlY)Z8.~1", sQLDataException0);
      vector0.add(sQLTimeoutException0);
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>(vector0);
      IteratorUtils.loopingListIterator((List<SQLTimeoutException>) linkedList0);
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.matchesAny((Iterator<String>) listIterator0, (Predicate<? super String>) predicate0);
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(instanceofPredicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Object> iterator1 = IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, iterator0, (Iterator<?>) listIterator0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      OrderedMapIterator<SQLDataException, EnumSet<ClientInfoStatus>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, EnumSet<ClientInfoStatus>> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends EnumSet<ClientInfoStatus>>) orderedMapIterator0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) null, (Iterator<? extends SQLDataException>) orderedMapIterator1, (Iterator<? extends SQLDataException>) orderedMapIterator1);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) orderedIterator0, (Iterator<? extends SQLTimeoutException>) orderedIterator0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("org.apache.commons.collections4.IteratorUtils");
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(arrayList0);
      Predicate<String> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAny((Iterator<String>) loopingListIterator0, (Predicate<? super String>) predicate0);
      IteratorUtils.isEmpty(loopingListIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.IteratorUtils", "", (-1960));
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.collections4.IteratorUtils");
      sQLIntegrityConstraintViolationException0.printStackTrace((PrintStream) mockPrintStream0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLIntegrityConstraintViolationException0.initCause(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0, (-2542));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque1 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque2 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque3 = new ArrayDeque<StringTokenizer>();
      TruePredicate.truePredicate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>(vector0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("_\"'?Y!q1bW");
      SQLTransientException sQLTransientException0 = new SQLTransientException("5C", sQLTimeoutException0);
      MockThrowable mockThrowable0 = new MockThrowable("", sQLTransientException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransientException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("%68f;A06jHq]", "gU}LU!", 32, (Map<String, ClientInfoStatus>) null, mockThrowable0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[6];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException0;
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = "";
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) objectArrayListIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0, "OG<RetN(Sj", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      IteratorUtils.toString((Iterator<Stack<SQLDataException>>) null);
      OrderedMapIterator<BatchUpdateException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, Integer>(orderedMapIterator0);
      OrderedMapIterator<BatchUpdateException, Integer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<BatchUpdateException, ? extends Integer>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) orderedMapIterator1, 1L, 909L);
      HashMap<SQLClientInfoException, String> hashMap0 = new HashMap<SQLClientInfoException, String>();
      EntrySetMapIterator<SQLClientInfoException, String> entrySetMapIterator0 = new EntrySetMapIterator<SQLClientInfoException, String>(hashMap0);
      int int0 = 2323;
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) entrySetMapIterator0, 2323);
      LoopingIterator<SQLClientInfoException> loopingIterator0 = new LoopingIterator<SQLClientInfoException>(list0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) loopingIterator0);
      IteratorUtils.zippingIterator((Iterator<?>) orderedMapIterator0, (Iterator<?>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
      IteratorUtils.emptyOrderedIterator();
      Stack<Integer> stack0 = new Stack<Integer>();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(stack0);
      ListIterator<Integer> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) loopingListIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends Integer>) listIterator0, 3434L, 19L);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) orderedIterator0, (Iterator<? extends SQLTimeoutException>) orderedIterator0);
      TruePredicate.truePredicate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      MapIterator<SQLNonTransientException, TreeSet<String>> mapIterator0 = IteratorUtils.emptyMapIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("f&$8Z", sQLTimeoutException0);
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      MapIterator<SQLRecoverableException, Vector<SQLNonTransientException>> mapIterator1 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLRecoverableException>) mapIterator1);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      ArrayDeque<StringTokenizer>[] arrayDequeArray0 = (ArrayDeque<StringTokenizer>[]) Array.newInstance(ArrayDeque.class, 0);
      IteratorUtils.arrayListIterator(arrayDequeArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>(vector0);
      IteratorUtils.loopingListIterator((List<SQLTimeoutException>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NodeList nodeList0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MapIterator<StringTokenizer, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int[] intArray0 = new int[2];
      intArray0[0] = (-2132);
      intArray0[1] = (-1284);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, (Throwable) null);
      batchUpdateException0.getNextException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Q", "org.apache.commons.collections4.functors.TransformedPredicate", hashMap0, batchUpdateException0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException0;
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) objectArrayListIterator0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) objectArrayListIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0, "Iterator must not be null", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) orderedIterator0, (Iterator<? extends SQLTimeoutException>) orderedIterator0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("org.apache.commons.collections4.IteratorUtils");
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(arrayList0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<SQLClientInfoException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLClientInfoException, ? extends String>) hashMap0);
      String string0 = IteratorUtils.toString((Iterator<SQLClientInfoException>) null, (Transformer<? super SQLClientInfoException, String>) transformer0, "k$(NGc&PUxuv#A*", "org.apache.commons.collections4.IteratorUtils", "P:1;;p>fcc'$[(");
      assertEquals("org.apache.commons.collections4.IteratorUtilsP:1;;p>fcc'$[(", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) orderedIterator0, (Iterator<? extends SQLTimeoutException>) orderedIterator0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("org.apache.commons.collections4.IteratorUtils");
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(arrayList0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, Iterator<SQLTransactionRollbackException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
      IteratorUtils.emptyOrderedIterator();
      Stack<Integer> stack0 = new Stack<Integer>();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(stack0);
      ListIterator<Integer> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) loopingListIterator0);
      BoundedIterator<Integer> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Integer>) listIterator0, 3434L, 19L);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) boundedIterator0);
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) stack0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLTimeoutException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, Properties>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iterator0, (-1194));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("uhJlY)Z8.~1");
      IteratorUtils.toString((Iterator<StringTokenizer>) singletonListIterator0, (Transformer<? super StringTokenizer, String>) transformer0);
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque1 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque2 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque3 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque4 = new ArrayDeque<StringTokenizer>();
      TruePredicate.truePredicate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>(vector0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("_\"'?Y!q1bW");
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.apache.commons.collections4.bidimap.DualTreeBidiMap", sQLTimeoutException0);
      MockThrowable mockThrowable0 = new MockThrowable("", sQLTransientException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(mockThrowable0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("5C", "uhJlY)Z8.~1", 793, (Map<String, ClientInfoStatus>) null, sQLSyntaxErrorException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) objectArrayListIterator0);
      ExceptionTransformer.exceptionTransformer();
      String string0 = IteratorUtils.toString((Iterator<SQLClientInfoException>) objectArrayListIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0, "_\"'?Y!q1bW", "Gm!", "z@?umf1A^~['!^QD ");
      assertEquals(1, objectArrayListIterator0.nextIndex());
      assertEquals("Gm!uhJlY)Z8.~1z@?umf1A^~['!^QD ", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      IteratorUtils.emptyIterator();
      EmptyListIterator.resettableEmptyListIterator();
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>(0);
      ListIterator<ArrayList<Object>> listIterator0 = IteratorUtils.singletonListIterator(arrayList0);
      ArrayList<Object> arrayList1 = IteratorUtils.find((Iterator<ArrayList<Object>>) listIterator0, (Predicate<? super ArrayList<Object>>) predicate0);
      assertNull(arrayList1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[7];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", (String) null, sQLDataException0);
      BiFunction<Object, Object, Properties> biFunction0 = (BiFunction<Object, Object, Properties>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      properties2.put(properties5, properties0);
      properties4.put(sQLTransientConnectionException0, properties1);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 1192, hashtable0);
      sQLClientInfoException0.getLocalizedMessage();
      properties0.put(sQLClientInfoException0, properties4);
      propertiesArray0[6] = properties6;
      IteratorUtils.arrayListIterator(propertiesArray0);
      IteratorUtils.emptyIterator();
      OrderedMapIterator<ArrayList<Object>, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<ArrayList<Object>, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<ArrayList<Object>, String>(orderedMapIterator0);
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      ArrayList<Object> arrayList0 = IteratorUtils.find((Iterator<ArrayList<Object>>) abstractMapIteratorDecorator0, (Predicate<? super ArrayList<Object>>) predicate0);
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
      IteratorUtils.emptyOrderedIterator();
      Predicate<String> predicate0 = NotNullPredicate.notNullPredicate();
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      IteratorUtils.filteredListIterator((ListIterator<? extends String>) singletonListIterator0, (Predicate<? super String>) predicate0);
      OrderedMapIterator<ArrayList<Object>, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<ArrayList<Object>, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<ArrayList<Object>, String>(orderedMapIterator0);
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      IteratorUtils.find((Iterator<ArrayList<Object>>) orderedMapIterator0, (Predicate<? super ArrayList<Object>>) predicate1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-1960), (-4135));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ResettableIterator<SQLNonTransientException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.size(resettableIterator0);
      Comparator<IIOMetadataNode> comparator0 = (Comparator<IIOMetadataNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque1 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque2 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque3 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque4 = new ArrayDeque<StringTokenizer>();
      TruePredicate.truePredicate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      ArrayDeque<SQLTimeoutException> arrayDeque5 = new ArrayDeque<SQLTimeoutException>();
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>(arrayDeque5);
      OrderedMapIterator<Integer, EnumSet<Locale.Category>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends EnumSet<Locale.Category>>) orderedMapIterator0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) orderedMapIterator0);
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(priorityQueue0);
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) linkedList1);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("org.apache.commons.collections4.functors.TransformedPredicate");
      iIOMetadataNode2.getAttributeNodeNS("", "vgq\u0004?,|0fQ]`[.b");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode1);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      IteratorUtils.emptyIterator();
      OrderedIterator<StringTokenizer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) orderedIterator0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0);
      assertNotNull(iterator0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, (Throwable) null);
      batchUpdateException0.getNextException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.functors.TransformedPredicate", "Estimated size must be greater than 0", hashMap0, (Throwable) null);
      OrderedMapIterator<Integer, EnumSet<Locale.Category>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends EnumSet<Locale.Category>>) orderedMapIterator0);
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(16);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-4520));
      integerArray0[2] = integer2;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      Enumeration<Integer> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableIterator0);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) orderedMapIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>(list0);
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration1, (Collection<? super Integer>) linkedList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttributeNodeNS("IW|!TaeVT!`~#&zg", "delimiter may not be null");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.getIterator(class0);
      Iterator<ClientInfoStatus>[] iteratorArray0 = (Iterator<ClientInfoStatus>[]) Array.newInstance(Iterator.class, 3);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      SingletonListIterator<ClientInfoStatus> singletonListIterator0 = new SingletonListIterator<ClientInfoStatus>(clientInfoStatus0);
      iteratorArray0[0] = (Iterator<ClientInfoStatus>) singletonListIterator0;
      Iterator<ClientInfoStatus> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<ClientInfoStatus> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends ClientInfoStatus>) iterator0);
      Iterator<ClientInfoStatus> iterator1 = IteratorUtils.asIterator((Enumeration<? extends ClientInfoStatus>) enumeration0);
      iteratorArray0[1] = iterator1;
      ZippingIterator<ClientInfoStatus> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends ClientInfoStatus>) iterator0, (Iterator<? extends ClientInfoStatus>) iterator1);
      iteratorArray0[2] = (Iterator<ClientInfoStatus>) zippingIterator0;
      Iterator<ClientInfoStatus> iterator2 = IteratorUtils.collatedIterator((Comparator<? super ClientInfoStatus>) null, (Iterator<? extends ClientInfoStatus>[]) iteratorArray0);
      Class<SQLTransientConnectionException>[] classArray0 = (Class<SQLTransientConnectionException>[]) Array.newInstance(Class.class, 8);
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      classArray0[0] = class1;
      Class<SQLTransientConnectionException> class2 = SQLTransientConnectionException.class;
      classArray0[1] = class2;
      Class<SQLTransientConnectionException> class3 = SQLTransientConnectionException.class;
      classArray0[2] = class3;
      Class<SQLTransientConnectionException> class4 = SQLTransientConnectionException.class;
      classArray0[3] = class4;
      Class<SQLTransientConnectionException> class5 = SQLTransientConnectionException.class;
      classArray0[4] = class5;
      Class<SQLTransientConnectionException> class6 = SQLTransientConnectionException.class;
      classArray0[5] = class6;
      Class<SQLTransientConnectionException> class7 = SQLTransientConnectionException.class;
      classArray0[6] = class7;
      Class<SQLTransientConnectionException> class8 = SQLTransientConnectionException.class;
      classArray0[7] = class8;
      InvokerTransformer<ClientInfoStatus, BatchUpdateException> invokerTransformer0 = new InvokerTransformer<ClientInfoStatus, BatchUpdateException>("", classArray0, classArray0);
      Iterator<BatchUpdateException> iterator3 = IteratorUtils.transformedIterator((Iterator<? extends ClientInfoStatus>) iterator2, (Transformer<? super ClientInfoStatus, ? extends BatchUpdateException>) invokerTransformer0);
      assertNotNull(iterator3);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) iterator0, class0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[3];
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("", (String) null, 3, sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException((String) null);
      sQLDataExceptionArray0[2] = sQLDataException2;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) resettableListIterator0);
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0);
      PredicateTransformer<String> predicateTransformer0 = new PredicateTransformer<String>(predicate0);
      String string0 = null;
      Boolean boolean0 = predicateTransformer0.transform((String) null);
      SingletonIterator<Boolean> singletonIterator0 = new SingletonIterator<Boolean>(boolean0);
      int int0 = 1073741824;
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends Boolean>) singletonIterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[5];
      int[] intArray0 = new int[4];
      intArray0[0] = (-1544);
      intArray0[1] = 16;
      intArray0[2] = 100;
      intArray0[3] = 100;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("F<@", "F<@");
      SQLTransientException sQLTransientException0 = new SQLTransientException("F<@", sQLSyntaxErrorException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("F<@", "F<@", intArray0, sQLTransientException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      int[] intArray1 = new int[6];
      intArray1[0] = 100;
      intArray1[1] = (-1544);
      intArray1[2] = (-811);
      intArray1[3] = (-1544);
      intArray1[4] = 16;
      intArray1[5] = 16;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("F<@", intArray1, batchUpdateException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException();
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      int[] intArray2 = new int[4];
      intArray2[0] = 4350;
      intArray2[1] = 100;
      intArray2[2] = 4350;
      intArray2[3] = 16;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("", "", 4350, intArray2);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      long[] longArray0 = new long[0];
      BatchUpdateException batchUpdateException4 = new BatchUpdateException((String) null, "", (-811), longArray0, batchUpdateException2);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      Predicate<SQLException> predicate0 = FalsePredicate.falsePredicate();
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) resettableListIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      ConstantTransformer.constantTransformer("uhJlY)Z8.~1");
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque1 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque2 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque3 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer>[] arrayDequeArray0 = (ArrayDeque<StringTokenizer>[]) Array.newInstance(ArrayDeque.class, 1);
      ResettableListIterator<ArrayDeque<StringTokenizer>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayDequeArray0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAll((Iterator<ArrayDeque<StringTokenizer>>) resettableListIterator0, (Predicate<? super ArrayDeque<StringTokenizer>>) predicate0);
      IteratorUtils.toArray((Iterator<?>) singletonListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("uhJlY)Z8.~1");
      iIOMetadataNode0.getAttributeNodeNS("NodeList must not be null", "");
      // Undeclared exception!
      try { 
        iIOMetadataNode0.setAttributeNodeNS((Attr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("uhJlY)Z8.~1");
      IteratorUtils.toString((Iterator<StringTokenizer>) singletonListIterator0, (Transformer<? super StringTokenizer, String>) transformer0);
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque1 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque2 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque3 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer>[] arrayDequeArray0 = (ArrayDeque<StringTokenizer>[]) Array.newInstance(ArrayDeque.class, 1);
      ArrayDeque<StringTokenizer> arrayDeque4 = new ArrayDeque<StringTokenizer>();
      arrayDequeArray0[0] = arrayDeque4;
      IteratorUtils.arrayListIterator(arrayDequeArray0);
      TruePredicate.truePredicate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      SQLDataException sQLDataException0 = new SQLDataException("uhJlY)Z8.~1", (String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("uhJlY)Z8.~1", sQLDataException0);
      vector0.add(sQLTimeoutException0);
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>(vector0);
      IteratorUtils.loopingListIterator((List<SQLTimeoutException>) linkedList0);
      Vector<SQLNonTransientException> vector1 = new Vector<SQLNonTransientException>();
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) vector1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) resettableIterator0);
      String string0 = "b5";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("b5");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<?>) orderedMapIterator0);
      int int0 = 9;
      Integer integer0 = new Integer(9);
      Factory<Integer> factory0 = ConstantFactory.constantFactory(integer0);
      FactoryTransformer<Object, Integer> factoryTransformer0 = new FactoryTransformer<Object, Integer>(factory0);
      factoryTransformer0.transform(factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) factory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      IteratorUtils.emptyIterator();
      OrderedIterator<StringTokenizer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) orderedIterator0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 1);
      OrderedMapIterator<Integer, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Integer, SQLTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, SQLTransientException>(orderedMapIterator0);
      iteratorArray0[0] = (Iterator<Integer>) abstractOrderedMapIteratorDecorator0;
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) iterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLWarning>) null, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("uhJlY)Z8.~1");
      IteratorUtils.toString((Iterator<StringTokenizer>) singletonListIterator0, (Transformer<? super StringTokenizer, String>) transformer0);
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque1 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque2 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque3 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque4 = new ArrayDeque<StringTokenizer>();
      TruePredicate.truePredicate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>(vector0);
      OrderedMapIterator<Integer, EnumSet<Locale.Category>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Integer, EnumSet<Locale.Category>> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends EnumSet<Locale.Category>>) orderedMapIterator0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) orderedMapIterator1);
      LinkedList<Object> linkedList1 = new LinkedList<Object>(arrayDeque2);
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) linkedList1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttributeNodeNS("delimiter may not be null", "");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      IteratorUtils.emptyIterator();
      OrderedIterator<StringTokenizer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) orderedIterator0);
      IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, (Throwable) null);
      batchUpdateException0.getNextException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.functors.TransformedPredicate", "Estimated size must be greater than 0", hashMap0, (Throwable) null);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) objectArrayListIterator0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) listIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0, (String) null, "Estimated size must be greater than 0", "P:1;;p>fcc'$[(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) zippingIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      ConstantFactory<SQLRecoverableException> constantFactory0 = new ConstantFactory<SQLRecoverableException>(sQLRecoverableException0);
      FactoryTransformer<Object, SQLRecoverableException> factoryTransformer0 = new FactoryTransformer<Object, SQLRecoverableException>(constantFactory0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Transformer<? super SQLClientInfoException, ? extends SQLRecoverableException>) factoryTransformer0);
      Iterator<SQLRecoverableException> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) iterator1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      IteratorUtils.singletonListIterator(priorityQueue0);
      ArrayDeque<StringTokenizer>[] arrayDequeArray0 = (ArrayDeque<StringTokenizer>[]) Array.newInstance(ArrayDeque.class, 7);
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      arrayDequeArray0[2] = arrayDeque0;
      ArrayDeque<StringTokenizer> arrayDeque1 = new ArrayDeque<StringTokenizer>();
      arrayDequeArray0[1] = arrayDeque1;
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      ConstantTransformer.constantTransformer("uhJlY)Z8.~1");
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque1 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque2 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque3 = new ArrayDeque<StringTokenizer>();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[3];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("$e|", "");
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "=5i?", (-2034), sQLIntegrityConstraintViolationException0);
      SQLDataException sQLDataException0 = new SQLDataException("", sQLTransientException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("0QgfI", "uhJlY)Z8.~1");
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException((String) null);
      sQLDataExceptionArray0[2] = sQLDataException2;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) resettableIterator0);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
      IteratorUtils.emptyMapIterator();
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer>[] arrayDequeArray0 = (ArrayDeque<StringTokenizer>[]) Array.newInstance(ArrayDeque.class, 7);
      arrayDequeArray0[0] = arrayDeque0;
      arrayDequeArray0[1] = arrayDeque0;
      arrayDequeArray0[2] = arrayDeque0;
      arrayDequeArray0[3] = arrayDeque0;
      arrayDequeArray0[4] = arrayDeque0;
      arrayDequeArray0[5] = arrayDeque0;
      arrayDequeArray0[6] = arrayDeque0;
      ResettableListIterator<ArrayDeque<StringTokenizer>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayDequeArray0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAll((Iterator<ArrayDeque<StringTokenizer>>) resettableListIterator0, (Predicate<? super ArrayDeque<StringTokenizer>>) predicate0);
      IteratorUtils.getIterator(arrayDeque0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[7];
      long[] longArray0 = new long[6];
      longArray0[0] = 1750L;
      longArray0[1] = (long) (-4157);
      longArray0[2] = (long) (-4157);
      longArray0[3] = (long) (-4157);
      longArray0[4] = (long) (-4157);
      longArray0[5] = (long) (-4157);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", ", ", (-2242), (Map<String, ClientInfoStatus>) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "6_EW?OVoXx_", (-4157), longArray0, sQLClientInfoException1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", batchUpdateException0);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(", ");
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("hULg926X33h,$$ :*&L", "");
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(",{+tkn}9H6UEUMM~dhL", "6_EW?OVoXx_", (-4157));
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLSyntaxErrorException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(", ", "", (-4157));
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("zvE=ylZBQa");
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLFeatureNotSupportedException1;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLClientInfoException0);
      sQLNonTransientExceptionArray0[6] = sQLNonTransientException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, (-1), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      enumSet0.add(locale_Category1);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet0);
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0);
      enumSet0.clear();
      enumSet0.add(locale_Category0);
      int int0 = 61;
      IteratorUtils.toList((Iterator<?>) singletonListIterator0, 61);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((InstanceofPredicate[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      IteratorUtils.emptyIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(arrayList0);
      ListIterator<String> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<String>) loopingListIterator0);
      Predicate<String> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAny((Iterator<String>) listIterator0, (Predicate<? super String>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<LinkedList<IIOMetadataNode>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      Properties[] propertiesArray0 = new Properties[7];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", (String) null, sQLDataException0);
      BiFunction<Object, Object, Properties> biFunction0 = (BiFunction<Object, Object, Properties>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      properties2.merge(sQLTransientConnectionException0, resettableIterator0, biFunction0);
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      properties2.put(properties3, properties0);
      properties2.put(properties5, properties0);
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer>[] arrayDequeArray0 = (ArrayDeque<StringTokenizer>[]) Array.newInstance(ArrayDeque.class, 0);
      ResettableListIterator<ArrayDeque<StringTokenizer>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayDequeArray0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayDeque<StringTokenizer>>) resettableListIterator0, (Predicate<? super ArrayDeque<StringTokenizer>>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category1;
      locale_CategoryArray0[3] = locale_Category0;
      locale_CategoryArray0[4] = locale_Category0;
      locale_CategoryArray0[5] = locale_Category0;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[6] = locale_Category2;
      locale_CategoryArray0[7] = locale_Category0;
      locale_CategoryArray0[8] = locale_Category0;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_CategoryArray0);
      Class<Locale.Category> class0 = Locale.Category.class;
      enumSet0.add(locale_Category0);
      EnumSet.allOf(class0);
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      enumSet0.add(locale_Category3);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet0);
      singletonListIterator0.next();
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0);
      enumSet0.clear();
      OrderedMapIterator<String, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<String, StringTokenizer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ? extends StringTokenizer>) orderedMapIterator0);
      MapIterator<String, StringTokenizer> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<String, StringTokenizer>) orderedMapIterator1);
      ListIteratorWrapper<String> listIteratorWrapper0 = new ListIteratorWrapper<String>(mapIterator0);
      IteratorUtils.unmodifiableListIterator((ListIterator<String>) listIteratorWrapper0);
      Predicate<String> predicate0 = NotNullPredicate.notNullPredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<String>) listIteratorWrapper0, (Predicate<? super String>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      IteratorUtils.emptyIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("Class to instantiate must not be null");
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(arrayList0);
      ListIterator<String> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<String>) loopingListIterator0);
      Predicate<String> predicate0 = NotNullPredicate.notNullPredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<String>) listIterator0, (Predicate<? super String>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PriorityQueue<SQLTimeoutException>[] priorityQueueArray0 = (PriorityQueue<SQLTimeoutException>[]) Array.newInstance(PriorityQueue.class, 3);
      PriorityQueue<SQLTimeoutException> priorityQueue0 = new PriorityQueue<SQLTimeoutException>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<SQLTimeoutException> priorityQueue1 = new PriorityQueue<SQLTimeoutException>();
      priorityQueueArray0[1] = priorityQueue1;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "QL~\u0000}ms9Gh]v.Zk1V<", 417);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("QL~\u0000}ms9Gh]v.Zk1V<", sQLTransactionRollbackException0);
      priorityQueue1.add(sQLTimeoutException0);
      PriorityQueue<SQLTimeoutException> priorityQueue2 = new PriorityQueue<SQLTimeoutException>();
      priorityQueue1.isEmpty();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("");
      priorityQueue2.add(sQLTimeoutException1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      priorityQueueArray0[2] = priorityQueue2;
      IteratorUtils.arrayIterator(priorityQueueArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLException[]) null, (-3701));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[1];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("j", "j", sQLTransactionRollbackException0);
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransactionRollbackException1;
      IteratorUtils.arrayListIterator(sQLTransientExceptionArray0, 0, 0);
      DataTruncation dataTruncation0 = new DataTruncation(135, false, true, 0, 0);
      SQLWarning sQLWarning0 = new SQLWarning("j", "j", 0);
      Throwable throwable0 = sQLWarning0.fillInStackTrace();
      assertSame(sQLWarning0, throwable0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      Properties[] propertiesArray0 = new Properties[7];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", (String) null, sQLDataException0);
      BiFunction<Object, Object, Properties> biFunction0 = (BiFunction<Object, Object, Properties>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      properties2.merge(sQLTransientConnectionException0, resettableIterator0, biFunction0);
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      properties2.put(properties3, properties0);
      properties2.put(properties5, properties0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashtable0.put("Node must not be null", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 1192, hashtable0);
      properties0.put(sQLClientInfoException0, properties4);
      propertiesArray0[6] = properties6;
      IteratorUtils.arrayListIterator(propertiesArray0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyIterator();
      IteratorUtils.getIterator(properties6);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLClientInfoException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLTransientException0, (Equator<Object>) defaultEquator0);
      predicateArray0[0] = predicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<InstanceofPredicate>) null, (Predicate<? super InstanceofPredicate>) nonePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      InvokerTransformer.invokerTransformer("ij!M)f`[W$");
      OrderedIterator<StringTokenizer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      predicateArray0[0] = (Predicate<Object>) nullIsTruePredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) nonePredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) anyPredicate0;
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[3] = predicate1;
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate2 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[4] = predicate2;
      Predicate<Object> predicate3 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.matchesAll((Iterator<ArrayDeque<StringTokenizer>>) null, (Predicate<? super ArrayDeque<StringTokenizer>>) predicate3);
      Transformer<Object, InstanceofPredicate> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<Predicate<Object>> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends StringTokenizer>) orderedIterator0, (Transformer<? super StringTokenizer, ? extends Predicate<Object>>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category0, locale_Category1);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet0);
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0);
      enumSet0.clear();
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque1 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque2 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque3 = new ArrayDeque<StringTokenizer>();
      SingletonListIterator<ArrayDeque<StringTokenizer>> singletonListIterator1 = new SingletonListIterator<ArrayDeque<StringTokenizer>>(arrayDeque2);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAll((Iterator<ArrayDeque<StringTokenizer>>) singletonListIterator1, (Predicate<? super ArrayDeque<StringTokenizer>>) predicate0);
      SQLWarning sQLWarning0 = new SQLWarning("*8h&[C", "The predicate collection must not contain a null predicate, index ", (-1960));
      Integer integer0 = new Integer(678);
      Factory<Integer> factory0 = ConstantFactory.constantFactory(integer0);
      Transformer<Object, Integer> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Integer>) factory0);
      Iterator<Object> iterator0 = IteratorUtils.objectGraphIterator((Object) sQLWarning0, (Transformer<? super Object, ?>) transformer0);
      IteratorUtils.toString(iterator0);
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 8);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[6];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("LyY*ZuA6C>C_<rRyr", sQLWarning0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("*8h&[C", "[678]");
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException(sQLWarning0);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("LyY*ZuA6C>C_<rRyr");
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      IteratorUtils.emptyIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer((String) null);
      OrderedIterator<StringTokenizer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<StringTokenizer>) orderedIterator0, (Transformer<? super StringTokenizer, String>) transformer0);
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque1 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque2 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque3 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque4 = new ArrayDeque<StringTokenizer>();
      TruePredicate.truePredicate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      SQLTransientException sQLTransientException0 = new SQLTransientException("", sQLTimeoutException0);
      MockThrowable mockThrowable0 = new MockThrowable("=g4xnf|IY>]fzeHKQ;", sQLTimeoutException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTimeoutException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, 793, (Map<String, ClientInfoStatus>) null, sQLSyntaxErrorException0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException0;
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      IteratorUtils.toString((Iterator<SQLClientInfoException>) objectArrayListIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0, "Gm!", "&b;(%", "=g4xnf|IY>]fzeHKQ;");
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 1);
      LoopingIterator<IIOMetadataNode> loopingIterator0 = null;
      try {
        loopingIterator0 = new LoopingIterator<IIOMetadataNode>((Collection<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The collection must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.LoopingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[21];
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("1xX", "1xX", intArray0);
      batchUpdateException0.getSuppressed();
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("1xX", "1xX", 0, intArray0, batchUpdateException0);
      batchUpdateException1.setNextException(batchUpdateException0);
      batchUpdateExceptionArray0[0] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("", "jP+|mc!r++V^", 2202, intArray0);
      batchUpdateException2.printStackTrace();
      batchUpdateExceptionArray0[1] = batchUpdateException2;
      IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0);
      ArrayList<Transformer<Object, Properties>> arrayList0 = new ArrayList<Transformer<Object, Properties>>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      arrayList0.add(transformer0);
      arrayList0.forEach(consumer0);
      ResettableListIterator<Transformer<Object, Properties>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Transformer<Object, Properties>>) arrayList0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Transformer<Object, Properties>>) resettableListIterator0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<InstanceofPredicate>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (-12L), (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) zippingIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      ConstantFactory<SQLRecoverableException> constantFactory0 = new ConstantFactory<SQLRecoverableException>(sQLRecoverableException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, 10);
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "ListIterator must not be null", 0, (Map<String, ClientInfoStatus>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException0, 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 3);
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<String>) orderedIterator0;
      String string0 = null;
      // Undeclared exception!
      try { 
        InvokerTransformer.invokerTransformer((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The method to invoke must not be null
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      LoopingIterator<String> loopingIterator0 = new LoopingIterator<String>(priorityQueue0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends String>) loopingIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category0, locale_Category1);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet0);
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0);
      enumSet0.clear();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) singletonListIterator0, (-1960));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[8];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-3906);
      intArray0[2] = 1465;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("itGQsG+6`w]'hrGUZ", intArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("F/id\"??}:IHxs#p]\"", "F/id\"??}:IHxs#p]\"", batchUpdateException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("", "itGQsG+6`w]'hrGUZ", 1465);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("", "");
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("", "F/id\"??}:IHxs#p]\"", 0, sQLFeatureNotSupportedException4);
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException("itGQsG+6`w]'hrGUZ", sQLFeatureNotSupportedException5);
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException6;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException7 = new SQLFeatureNotSupportedException("", "Enumeration must not be null", 1465);
      sQLFeatureNotSupportedExceptionArray0[7] = sQLFeatureNotSupportedException7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, (-1253));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Stack<String> stack0 = new Stack<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) stack0, locale_FilteringMode0);
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(list0);
      ListIterator<String> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<String>) loopingListIterator0);
      Predicate<String> predicate0 = NotNullPredicate.notNullPredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<String>) listIterator0, (Predicate<? super String>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category1;
      locale_CategoryArray0[3] = locale_Category0;
      locale_CategoryArray0[4] = locale_Category0;
      locale_CategoryArray0[5] = locale_Category0;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[6] = locale_Category2;
      locale_CategoryArray0[7] = locale_Category0;
      locale_CategoryArray0[8] = locale_Category0;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_CategoryArray0);
      Class<Locale.Category> class0 = Locale.Category.class;
      enumSet0.add(locale_Category0);
      EnumSet.allOf(class0);
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      enumSet0.add(locale_Category3);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet0);
      singletonListIterator0.next();
      ZippingIterator<EnumSet<Locale.Category>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0);
      enumSet0.clear();
      enumSet0.add(locale_Category2);
      int int0 = 61;
      IteratorUtils.toList((Iterator<?>) zippingIterator0, 61);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((InstanceofPredicate[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MapIterator<Integer, ArrayDeque<StringTokenizer>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 1192, hashtable0);
      Properties properties0 = new Properties();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Predicate must not be null", sQLClientInfoException0);
      properties0.put(mapIterator0, sQLTransientConnectionException0);
      Properties[] propertiesArray0 = new Properties[0];
      IteratorUtils.arrayListIterator(propertiesArray0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyIterator();
      IteratorUtils.getIterator(properties0);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsFalsePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("uhJlY)Z8.~1");
      IteratorUtils.toString((Iterator<StringTokenizer>) singletonListIterator0, (Transformer<? super StringTokenizer, String>) transformer0);
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque1 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque2 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque3 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer>[] arrayDequeArray0 = (ArrayDeque<StringTokenizer>[]) Array.newInstance(ArrayDeque.class, 1);
      ArrayDeque<StringTokenizer> arrayDeque4 = new ArrayDeque<StringTokenizer>();
      arrayDequeArray0[0] = arrayDeque4;
      IteratorUtils.arrayListIterator(arrayDequeArray0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      SQLDataException sQLDataException0 = new SQLDataException("uhJlY)Z8.~1", (String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("uhJlY)Z8.~1", sQLDataException0);
      vector0.add(sQLTimeoutException0);
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>(vector0);
      IteratorUtils.loopingListIterator((List<SQLTimeoutException>) linkedList0);
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.matchesAny((Iterator<String>) listIterator0, (Predicate<? super String>) predicate0);
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(instanceofPredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0");
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "T,M)2#lDhj");
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      String string0 = "";
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      // Undeclared exception!
      try { 
        stringTokenizer0.nextToken();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("uhJlY)Z8.~1");
      IteratorUtils.toString((Iterator<StringTokenizer>) singletonListIterator0, (Transformer<? super StringTokenizer, String>) transformer0);
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque1 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque2 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque3 = new ArrayDeque<StringTokenizer>();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "[uhJlY)Z8.~1]", 274, hashtable0);
      Properties properties0 = new Properties();
      DataTruncation dataTruncation0 = new DataTruncation(10, false, false, 274, 9);
      properties0.put("[uhJlY)Z8.~1]", dataTruncation0);
      Properties[] propertiesArray0 = new Properties[4];
      Properties properties1 = new Properties();
      propertiesArray0[0] = properties1;
      propertiesArray0[1] = properties0;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      propertiesArray0[3] = properties0;
      IteratorUtils.arrayListIterator(propertiesArray0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyIterator();
      StringTokenizer stringTokenizer1 = new StringTokenizer("");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer1);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      Throwable throwable0 = null;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", (Throwable) null);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", "", (-4923), sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      String string0 = "g956iqsNW";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("g956iqsNW", sQLFeatureNotSupportedException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("g956iqsNW", "g956iqsNW", "Set must not be null", (-4923));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("Set must not be null", "g956iqsNW", "Set must not be null", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLFeatureNotSupportedException1.setStackTrace(stackTraceElementArray0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.spliterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLException>) resettableIterator0, 925L, (-2453L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      IteratorUtils.emptyIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(arrayList0);
      ArrayList<SQLDataException> arrayList1 = new ArrayList<SQLDataException>();
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLDataException>) arrayList1);
      IteratorUtils.toList((Iterator<?>) resettableListIterator0, 61);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((InstanceofPredicate[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("1xX", "1xX", intArray0);
      batchUpdateException0.getSuppressed();
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("1xX", "1xX", 0, intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[0] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("", "jP+|mc!r++V^", 2202, intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException2;
      IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0);
      ArrayList<Transformer<Object, Properties>> arrayList0 = new ArrayList<Transformer<Object, Properties>>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      arrayList0.add(transformer0);
      arrayList0.forEach(consumer0);
      ResettableListIterator<Transformer<Object, Properties>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Transformer<Object, Properties>>) arrayList0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Transformer<Object, Properties>>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (-12L), (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("transformer may not be null");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.functors.SwitchClosure", "org.apache.commons.collections4.functors.SwitchClosure", sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLSyntaxErrorException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLIntegrityConstraintViolationException1);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("suffix may not be null", "transformer may not be null");
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("suffix may not be null", "org.apache.commons.collections4.functors.SwitchClosure", 1742);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("", "i5JTP,2zBP@", sQLIntegrityConstraintViolationException1);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      String string0 = "org.apache.commons.collections4.functors.ExceptionTransformer";
      int int0 = 1807;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.map.ListOrderedMap", "org.apache.commons.collections4.functors.ExceptionTransformer", 1807, sQLIntegrityConstraintViolationException1);
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, (-2920), 1464);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IteratorUtils.loopingListIterator((List<Integer>) linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("%n\"aP");
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) listIterator0);
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(linkedList0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) loopingListIterator0);
      String string0 = "P#3V[B9b";
      DefaultEquator<String> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate("M", (Equator<String>) defaultEquator0);
      Equator<Object> equator0 = (Equator<Object>) mock(Equator.class, new ViolatedAssumptionAnswer());
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(defaultEquator0, equator0);
      Predicate<Object> predicate0 = AndPredicate.andPredicate((Predicate<? super Object>) equalPredicate0, (Predicate<? super Object>) equalPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 8);
      String string1 = "&A7{zP\":^\\V@dy&";
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("&A7{zP\":^V@dy&");
      transformerArray0[0] = transformer0;
      Transformer<Object, String> transformer1 = StringValueTransformer.stringValueTransformer();
      transformerArray0[1] = transformer1;
      // Undeclared exception!
      try { 
        SwitchTransformer.switchTransformer((Predicate<? super Object>[]) predicateArray0, (Transformer<? super Object, ? extends String>[]) transformerArray0, (Transformer<? super Object, ? extends String>) transformer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The transformer array must not contain a null transformer, index 2 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.asMultipleUseIterable((Iterator<?>) nodeListIterator0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Closure collection must not be null", "", 2212, (long[]) null, sQLWarning0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      int[] intArray0 = new int[5];
      intArray0[0] = 1231;
      intArray0[1] = 2212;
      intArray0[2] = 100;
      intArray0[3] = 2212;
      intArray0[4] = 2212;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", (String) null, 100, intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      ListIterator<SQLException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLException>) resettableListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Iterator<Object> iterator0 = null;
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<Object>) null, (Transformer<? super Object, String>) transformer0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[]";
      stringArray0[1] = "[]";
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringArray0, 2789, 1369);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("eH=", "@h73rz&sxsY.a8/Y)>W", 0);
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[9];
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<SQLTransientException> class1 = SQLTransientException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class2);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class2);
      instanceofPredicateArray0[3] = instanceofPredicate3;
      Class<Object> class3 = Object.class;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class3);
      instanceofPredicateArray0[4] = instanceofPredicate4;
      Class<SQLTimeoutException> class4 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate5 = new InstanceofPredicate(class4);
      instanceofPredicateArray0[5] = instanceofPredicate5;
      Class<IIOMetadataNode> class5 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate6 = new InstanceofPredicate(class5);
      instanceofPredicateArray0[6] = instanceofPredicate6;
      Class<Object> class6 = Object.class;
      InstanceofPredicate instanceofPredicate7 = new InstanceofPredicate(class6);
      instanceofPredicateArray0[7] = instanceofPredicate7;
      Class<SQLException> class7 = SQLException.class;
      InstanceofPredicate instanceofPredicate8 = new InstanceofPredicate(class7);
      instanceofPredicateArray0[8] = instanceofPredicate8;
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.arrayIterator(instanceofPredicateArray0, 1, 1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
      MapIterator<Integer, ArrayDeque<StringTokenizer>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<Integer> class0 = Integer.class;
      Integer[] integerArray0 = IteratorUtils.toArray((Iterator<? extends Integer>) mapIterator0, class0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException> iterator0 = null;
      IteratorUtils.isEmpty((Iterator<?>) null);
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) orderedIterator0, (Iterator<? extends SQLTimeoutException>) orderedIterator0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("org.apache.commons.collections4.IteratorUtils");
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(arrayList0);
      Predicate<String> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAny((Iterator<String>) loopingListIterator0, (Predicate<? super String>) predicate0);
      IteratorUtils.isEmpty(zippingIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.IteratorUtils", (-3115));
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      OrderedIterator<ArrayDeque<SQLNonTransientException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.peekingIterator((Iterator<? extends ArrayDeque<SQLNonTransientException>>) orderedIterator0);
      EntrySetMapIterator<SQLWarning, SQLRecoverableException> entrySetMapIterator0 = null;
      try {
        entrySetMapIterator0 = new EntrySetMapIterator<SQLWarning, SQLRecoverableException>((Map<SQLWarning, SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = 31;
      Integer integer0 = new Integer(31);
      int int1 = 1430;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) integer0, 31, 1430);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("uhJlY)Z8.~1");
      IteratorUtils.toString((Iterator<StringTokenizer>) singletonListIterator0, (Transformer<? super StringTokenizer, String>) transformer0);
      IteratorUtils.emptyMapIterator();
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) null, (Collection<? super Integer>) arrayDeque0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque1 = new ArrayDeque<StringTokenizer>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category1, locale_Category0);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet0);
      ZippingIterator<EnumSet<Locale.Category>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0);
      int int0 = IteratorUtils.size(zippingIterator0);
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ResettableIterator<SQLNonTransientException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.size(resettableIterator0);
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      IteratorUtils.emptyMapIterator();
      OrderedMapIterator<SQLTimeoutException, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTimeoutException>) orderedMapIterator0, 26);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 26
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[0];
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.arrayIterator(stringTokenizerArray0);
      int int0 = (-286);
      ArrayListIterator<BatchUpdateException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<BatchUpdateException>(resettableIterator0, (-286), (-286));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ResettableIterator<SQLNonTransientException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.size(resettableIterator0);
      Comparator<IIOMetadataNode> comparator0 = (Comparator<IIOMetadataNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 6);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode((String) null);
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      ResettableIterator<IIOMetadataNode> resettableIterator1 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) resettableIterator1;
      ArrayIterator<IIOMetadataNode> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<IIOMetadataNode>(iIOMetadataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("%Vx", "", mockThrowable0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("%Vx", sQLTransactionRollbackException0);
      int int0 = 1593;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0, 1593);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, 1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[8];
      StringTokenizer stringTokenizer0 = new StringTokenizer("0_@y/@fSNPZ-", "0_@y/@fSNPZ-", true);
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("0_@y/@fSNPZ-");
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("0_@y/@fSNPZ-", "0_@y/@fSNPZ-");
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("R7*io[pGXbUgYeLn(");
      stringTokenizerArray0[3] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = new StringTokenizer("0_@y/@fSNPZ-", "0_@y/@fSNPZ-", true);
      stringTokenizerArray0[4] = stringTokenizer4;
      StringTokenizer stringTokenizer5 = new StringTokenizer("0_@y/@fSNPZ-", "/7W^", true);
      stringTokenizerArray0[5] = stringTokenizer5;
      StringTokenizer stringTokenizer6 = new StringTokenizer(":YJ", "/7W^", false);
      stringTokenizerArray0[6] = stringTokenizer6;
      StringTokenizer stringTokenizer7 = new StringTokenizer("", "/7W^");
      stringTokenizerArray0[7] = stringTokenizer7;
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.arrayIterator(stringTokenizerArray0, 1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Integer integer0 = new Integer(1);
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) constantTransformer0);
      IteratorUtils.emptyMapIterator();
      ArrayIterator<SQLFeatureNotSupportedException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLFeatureNotSupportedException>(integer0, (-343), (-343));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) zippingIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      ConstantFactory<SQLRecoverableException> constantFactory0 = new ConstantFactory<SQLRecoverableException>(sQLRecoverableException0);
      FactoryTransformer<Object, SQLRecoverableException> factoryTransformer0 = new FactoryTransformer<Object, SQLRecoverableException>(constantFactory0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Transformer<? super SQLClientInfoException, ? extends SQLRecoverableException>) factoryTransformer0);
      Iterator<SQLRecoverableException> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) iterator1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      IteratorUtils.singletonListIterator(priorityQueue0);
      ArrayDeque<StringTokenizer>[] arrayDequeArray0 = (ArrayDeque<StringTokenizer>[]) Array.newInstance(ArrayDeque.class, 7);
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<StringTokenizer> arrayDeque1 = new ArrayDeque<StringTokenizer>();
      arrayDequeArray0[1] = arrayDeque1;
      ArrayDeque<StringTokenizer> arrayDeque2 = new ArrayDeque<StringTokenizer>();
      arrayDequeArray0[2] = arrayDeque2;
      ArrayDeque<StringTokenizer> arrayDeque3 = new ArrayDeque<StringTokenizer>();
      arrayDequeArray0[3] = arrayDeque3;
      ArrayDeque<StringTokenizer> arrayDeque4 = new ArrayDeque<StringTokenizer>();
      arrayDequeArray0[4] = arrayDeque4;
      ArrayDeque<StringTokenizer> arrayDeque5 = new ArrayDeque<StringTokenizer>();
      arrayDequeArray0[5] = arrayDeque5;
      ArrayDeque<StringTokenizer> arrayDeque6 = new ArrayDeque<StringTokenizer>();
      arrayDequeArray0[6] = arrayDeque6;
      ResettableListIterator<ArrayDeque<StringTokenizer>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayDequeArray0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayDeque<StringTokenizer>>) resettableListIterator0, (Predicate<? super ArrayDeque<StringTokenizer>>) predicate0);
      assertTrue(resettableListIterator0.hasPrevious());
      assertTrue(boolean0);
  }
}
