/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 21:31:39 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.stream.Stream;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      int[] intArray0 = new int[9];
      intArray0[0] = 65;
      intArray0[1] = 65;
      intArray0[2] = 65;
      intArray0[3] = (-1674);
      intArray0[4] = 65;
      intArray0[5] = 65;
      intArray0[6] = 65;
      intArray0[7] = 65;
      intArray0[8] = 65;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("i=@kIb'\"", (String) null, 65, intArray0);
      Predicate<BatchUpdateException>[] predicateArray0 = (Predicate<BatchUpdateException>[]) Array.newInstance(Predicate.class, 4);
      OnePredicate<BatchUpdateException> onePredicate0 = new OnePredicate<BatchUpdateException>(predicateArray0);
      predicateArray0[0] = (Predicate<BatchUpdateException>) onePredicate0;
      Predicate<BatchUpdateException> predicate0 = UniquePredicate.uniquePredicate();
      predicateArray0[1] = predicate0;
      Predicate<BatchUpdateException> predicate1 = NullPredicate.nullPredicate();
      NullIsExceptionPredicate<BatchUpdateException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<BatchUpdateException>(predicate1);
      predicateArray0[2] = (Predicate<BatchUpdateException>) nullIsExceptionPredicate0;
      Hashtable<Object, BatchUpdateException> hashtable0 = new Hashtable<Object, BatchUpdateException>();
      Transformer<Object, BatchUpdateException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends BatchUpdateException>) hashtable0);
      Predicate<BatchUpdateException> predicate2 = TransformedPredicate.transformedPredicate((Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer0, (Predicate<? super BatchUpdateException>) predicate1);
      predicateArray0[3] = predicate2;
      Transformer<Object, BatchUpdateException>[] transformerArray0 = (Transformer<Object, BatchUpdateException>[]) Array.newInstance(Transformer.class, 4);
      transformerArray0[0] = transformer0;
      transformerArray0[1] = transformer0;
      transformerArray0[2] = transformer0;
      transformerArray0[3] = transformer0;
      SwitchTransformer<BatchUpdateException, BatchUpdateException> switchTransformer0 = new SwitchTransformer<BatchUpdateException, BatchUpdateException>(predicateArray0, transformerArray0, transformer0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) switchTransformer0);
      Iterator<SQLException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Hashtable<PriorityQueue, ArrayList>>) iterator1, 65);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.getIterator(locale_Category0);
      int int0 = 0;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("*UmyEC \"tBv+vV)");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 7);
      OrderedMapIterator<String, TreeSet<Hashtable>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      BoundedIterator<String> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends String>) orderedMapIterator0, 0L, 1L);
      iteratorArray0[0] = (Iterator<String>) boundedIterator0;
      Iterator<String> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends String>) boundedIterator0);
      iteratorArray0[1] = iterator0;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "*UmyEC \"tBv+vV)";
      stringArray0[1] = "*UmyEC \"tBv+vV)";
      stringArray0[2] = "*UmyEC \"tBv+vV)";
      stringArray0[3] = "*UmyEC \"tBv+vV)";
      stringArray0[4] = "*UmyEC \"tBv+vV)";
      stringArray0[5] = "*UmyEC \"tBv+vV)";
      stringArray0[6] = "*UmyEC \"tBv+vV)";
      stringArray0[7] = "*UmyEC \"tBv+vV)";
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stringArray0, 0, (-2078));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Properties properties0 = new Properties();
      Factory<Properties> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, Properties> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Properties>) factory0);
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      SingletonIterator<ClientInfoStatus> singletonIterator0 = new SingletonIterator<ClientInfoStatus>(clientInfoStatus0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ForClosure<Object> forClosure0 = new ForClosure<Object>(4, (Closure<? super Object>) null);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(uniquePredicate0, forClosure0, forClosure0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<ClientInfoStatus>) singletonIterator0, (Closure<? super ClientInfoStatus>) ifClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ForClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category1, locale_Category0);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet0);
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0);
      enumSet0.clear();
      singletonListIterator0.reset();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IteratorUtils.getIterator(sQLClientInfoException0);
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 9);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLClientInfoException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLRecoverableException0);
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) singletonIterator0;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[1] = (Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0;
      MapIterator<SQLIntegrityConstraintViolationException, StringTokenizer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLIntegrityConstraintViolationException, StringTokenizer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLIntegrityConstraintViolationException, StringTokenizer>(mapIterator0);
      MapIterator<SQLIntegrityConstraintViolationException, StringTokenizer> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLIntegrityConstraintViolationException, ? extends StringTokenizer>) abstractMapIteratorDecorator0);
      iteratorArray0[2] = (Iterator<SQLIntegrityConstraintViolationException>) mapIterator1;
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator0, (Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.getIterator(locale_Category0);
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      SingletonIterator<PriorityQueue<Integer>> singletonIterator0 = new SingletonIterator<PriorityQueue<Integer>>(priorityQueue0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(locale_Category0, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) comparatorPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<PriorityQueue<Integer>>) singletonIterator0, (Predicate<? super PriorityQueue<Integer>>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ComparatorPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>("", classArray0, classArray0);
      Iterator<Integer> iterator0 = IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Hashtable<PriorityQueue, ArrayList>>) iterator0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.lang.Integer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 5);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      IteratorUtils.getIterator(class0);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[1];
      SQLWarning sQLWarning0 = new SQLWarning();
      sQLWarningArray0[0] = sQLWarning0;
      IteratorUtils.arrayListIterator(sQLWarningArray0, 0, 1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MapIterator<Integer, Stack<SQLIntegrityConstraintViolationException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) mapIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      predicateArray0[0] = predicate0;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) predicate0, (Equator<Object>) defaultEquator0);
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = UniquePredicate.uniquePredicate();
      predicateArray0[2] = predicate2;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion1 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(predicate2, comparator1, comparatorPredicate_Criterion1);
      predicateArray0[3] = (Predicate<Object>) comparatorPredicate0;
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate3 = AndPredicate.andPredicate((Predicate<? super Object>) predicate1, (Predicate<? super Object>) instanceofPredicate0);
      predicateArray0[4] = predicate3;
      Predicate<Object> predicate4 = OrPredicate.orPredicate((Predicate<? super Object>) predicate1, (Predicate<? super Object>) comparatorPredicate0);
      predicateArray0[5] = predicate4;
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[3];
      instanceofPredicateArray0[0] = instanceofPredicate0;
      instanceofPredicateArray0[1] = instanceofPredicate0;
      instanceofPredicateArray0[2] = instanceofPredicate0;
      ObjectArrayIterator<InstanceofPredicate> objectArrayIterator0 = new ObjectArrayIterator<InstanceofPredicate>(instanceofPredicateArray0);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) objectArrayIterator0);
      Predicate<Object> predicate5 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) list0);
      predicateArray0[6] = predicate5;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(instanceofPredicateArray0);
      predicateArray0[7] = (Predicate<Object>) nonePredicate0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(predicateArray0, (-1), (-1095));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TruePredicate.truePredicate();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category1, locale_Category0, locale_Category2);
      enumSet0.clear();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "]", 0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", hashtable0, sQLFeatureNotSupportedException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      int int0 = 1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 1, (-3021));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TruePredicate.truePredicate();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer((String) null);
      HashSet<DataTruncation> hashSet0 = new HashSet<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) hashSet0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) zippingIterator0, (Transformer<? super DataTruncation, String>) transformer0, (String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MapIterator<Integer, Stack<SQLIntegrityConstraintViolationException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Integer>) mapIterator0, (Class<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>((EnumSet<Locale.Category>) null);
      enumSet0.clear();
      IteratorUtils.get((Iterator<Hashtable<PriorityQueue, ArrayList>>) singletonListIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet.of(locale_Category0);
      Integer integer0 = new Integer(6);
      FactoryTransformer<Integer, Integer> factoryTransformer0 = new FactoryTransformer<Integer, Integer>((Factory<? extends Integer>) null);
      Iterator<Integer> iterator0 = IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) factoryTransformer0);
      Iterator<Integer> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends Integer>) iterator0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Integer>) iterator1, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTransientConnectionException[]) null, 0, 1871);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Integer> class0 = Integer.class;
      IteratorUtils.getIterator(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "xrDfV:&uuSaTR{U");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "yXsX1][{c", 3605, sQLSyntaxErrorException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLTransactionRollbackException0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0);
      Class<SQLTransactionRollbackException>[] classArray0 = (Class<SQLTransactionRollbackException>[]) Array.newInstance(Class.class, 5);
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      classArray0[0] = class1;
      Class<SQLTransactionRollbackException> class2 = SQLTransactionRollbackException.class;
      classArray0[1] = class2;
      Class<SQLTransactionRollbackException> class3 = SQLTransactionRollbackException.class;
      classArray0[2] = class3;
      Class<SQLTransactionRollbackException> class4 = SQLTransactionRollbackException.class;
      classArray0[3] = class4;
      Class<SQLTransactionRollbackException> class5 = SQLTransactionRollbackException.class;
      classArray0[4] = class5;
      InvokerTransformer<SQLInvalidAuthorizationSpecException, String> invokerTransformer0 = new InvokerTransformer<SQLInvalidAuthorizationSpecException, String>("yXsX1][{c", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) zippingIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) invokerTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'yXsX1][{c' on 'class java.sql.SQLInvalidAuthorizationSpecException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0);
      EnumSet<Locale.Category> enumSet1 = enumSet0.clone();
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet0);
      ZippingIterator<EnumSet<Locale.Category>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0);
      enumSet1.clear();
      IteratorUtils.get((Iterator<Hashtable<PriorityQueue, ArrayList>>) zippingIterator0, 0);
      Iterator<BatchUpdateException> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply(iterator0, (Closure<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0, (Transformer<? super IIOMetadataNode, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.emptyOrderedMapIterator();
      OrderedIterator<SQLDataException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) orderedIterator0, (Transformer<? super SQLDataException, ? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ExceptionTransformer.exceptionTransformer();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Hashtable<Object, SQLNonTransientConnectionException> hashtable0 = new Hashtable<Object, SQLNonTransientConnectionException>();
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLNonTransientConnectionException>) hashtable0);
      OrderedIterator<SQLDataException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) orderedIterator0, (Transformer<? super SQLDataException, ? extends SQLNonTransientConnectionException>) transformer0);
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      SingletonIterator<ArrayList<SQLRecoverableException>> singletonIterator0 = new SingletonIterator<ArrayList<SQLRecoverableException>>(arrayList0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<ArrayList<SQLRecoverableException>>) singletonIterator0, (Predicate<? super ArrayList<SQLRecoverableException>>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      ArrayList<Class<SQLClientInfoException>> arrayList0 = new ArrayList<Class<SQLClientInfoException>>();
      ResettableListIterator<Class<SQLClientInfoException>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Class<SQLClientInfoException>>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Class<SQLClientInfoException>>) resettableListIterator0, (Transformer<? super Class<SQLClientInfoException>, String>) transformer0, "Enumeration must not be null", "Enumeration must not be null", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category0, locale_Category0);
      enumSet0.clear();
      IteratorUtils.emptyIterator();
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 1);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      ObjectArrayIterator<Class<SQLClientInfoException>> objectArrayIterator0 = new ObjectArrayIterator<Class<SQLClientInfoException>>(classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Class<SQLClientInfoException>>) objectArrayIterator0, (Transformer<? super Class<SQLClientInfoException>, String>) transformer0, "_a,{%n*C6E", "", "_u?KAhx @2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.emptyOrderedMapIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0);
      EnumSet<Locale.Category> enumSet1 = EnumSet.complementOf(enumSet0);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet1);
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0);
      enumSet1.clear();
      TreeSet<SQLFeatureNotSupportedException> treeSet0 = new TreeSet<SQLFeatureNotSupportedException>();
      treeSet0.isEmpty();
      IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) treeSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLFeatureNotSupportedException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) null, 48);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add((Integer) null);
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Integer>) arrayList0);
      IteratorUtils.size(resettableListIterator0);
      IteratorUtils.emptyMapIterator();
      Iterator<SQLRecoverableException> iterator0 = null;
      Enumeration<SQLRecoverableException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) iterator0);
      Collection<SQLException> collection0 = null;
      IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) enumeration0, (Collection<? super SQLRecoverableException>) collection0);
      Iterator<SQLFeatureNotSupportedException> iterator1 = null;
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator1);
      Transformer<SQLNonTransientException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = "Predicate must not be null.";
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) listIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) transformer0, string0, string0, string0);
      Object object0 = null;
      int int0 = 2553;
      ArrayListIterator<InstanceofPredicate> arrayListIterator0 = new ArrayListIterator<InstanceofPredicate>(object0, int0, int0);
      Enumeration<InstanceofPredicate> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) arrayListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      LinkedList<Transformer<Object, Properties>> linkedList0 = new LinkedList<Transformer<Object, Properties>>();
      IteratorUtils.loopingListIterator((List<Transformer<Object, Properties>>) linkedList0);
      SQLWarning sQLWarning0 = new SQLWarning();
      DataTruncation dataTruncation0 = new DataTruncation(31, false, false, 31, 31, sQLWarning0);
      Transformer<Object, SQLWarning> transformer0 = ConstantTransformer.constantTransformer((SQLWarning) dataTruncation0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(dataTruncation0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(equalPredicate0, equalPredicate0);
      IfClosure.ifClosure((Predicate<? super Object>) equalPredicate0, (Closure<? super Object>) transformerClosure0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<BatchUpdateException>) listIterator0, (Closure<? super BatchUpdateException>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<Integer> class0 = Integer.class;
      IteratorUtils.toArray((Iterator<? extends Integer>) orderedIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLException[]) null, 630);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      LinkedList<Transformer<Object, Properties>> linkedList0 = new LinkedList<Transformer<Object, Properties>>();
      IteratorUtils.loopingListIterator((List<Transformer<Object, Properties>>) linkedList0);
      SQLWarning sQLWarning0 = new SQLWarning();
      Transformer<Object, SQLWarning> transformer0 = ConstantTransformer.constantTransformer(sQLWarning0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(transformer0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(equalPredicate0, equalPredicate0);
      IfClosure.ifClosure((Predicate<? super Object>) orPredicate0, (Closure<? super Object>) transformerClosure0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      IteratorUtils.apply((Iterator<BatchUpdateException>) listIterator0, (Closure<? super BatchUpdateException>) transformerClosure0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      NotNullPredicate.notNullPredicate();
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ListIterator<Class<SQLClientInfoException>> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Class<SQLClientInfoException>>) listIterator0, (Transformer<? super Class<SQLClientInfoException>, String>) null, "", "$=&o(O+4", "-#^uUR2I");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.emptyOrderedMapIterator();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      ListIterator<Class<SQLClientInfoException>> listIterator0 = IteratorUtils.singletonListIterator(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Class<SQLClientInfoException>>) listIterator0, (Transformer<? super Class<SQLClientInfoException>, String>) null, (String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      locale_CategoryArray0[2] = locale_Category0;
      locale_CategoryArray0[3] = locale_Category0;
      locale_CategoryArray0[4] = locale_Category0;
      locale_CategoryArray0[5] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[6] = locale_Category1;
      locale_CategoryArray0[7] = locale_Category0;
      locale_CategoryArray0[8] = locale_Category1;
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet0);
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0);
      singletonListIterator0.reset();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(arrayList0);
      Integer integer0 = new Integer(352);
      arrayList0.add(integer0);
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Integer>) loopingListIterator0, class1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      NotNullPredicate.notNullPredicate();
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      MapIterator<Class<SQLClientInfoException>, Locale.LanguageRange> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Class<SQLClientInfoException>>) mapIterator0, (Transformer<? super Class<SQLClientInfoException>, String>) transformer0, "", (String) null, "7E+RqUB\",}x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Properties[] propertiesArray0 = new Properties[1];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      ResettableListIterator<Properties> resettableListIterator1 = IteratorUtils.arrayListIterator(propertiesArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashMap0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLClientInfoException0);
      predicateArray0[0] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) allPredicate0;
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) resettableListIterator0);
      predicateArray0[2] = predicate1;
      Predicate<Object> predicate2 = IdentityPredicate.identityPredicate((Object) resettableListIterator1);
      predicateArray0[3] = predicate2;
      Class<SQLDataException> class0 = SQLDataException.class;
      Predicate<Object> predicate3 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[4] = predicate3;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[5] = (Predicate<Object>) uniquePredicate0;
      OnePredicate.onePredicate((Predicate<? super Properties>[]) predicateArray0);
      ListIterator<Properties> listIterator0 = new SingletonListIterator<Properties>(properties0);
      IteratorUtils.find((Iterator<Properties>) listIterator0, (Predicate<? super Properties>) predicate1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category1, locale_Category0);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet0);
      ZippingIterator<EnumSet<Locale.Category>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0);
      IteratorUtils.get((Iterator<Hashtable<PriorityQueue, ArrayList>>) zippingIterator0, 0);
      IteratorUtils.getIterator(locale_Category1);
      IteratorUtils.emptyIterator();
      Class<StringTokenizer> class0 = StringTokenizer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.singletonIterator(instanceofPredicate0);
      IteratorUtils.find((Iterator<InstanceofPredicate>) resettableIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
      IteratorUtils.toString((Iterator<SQLClientInfoException>) null);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category1;
      locale_CategoryArray0[3] = locale_Category1;
      locale_CategoryArray0[4] = locale_Category0;
      locale_CategoryArray0[5] = locale_Category0;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[6] = locale_Category2;
      locale_CategoryArray0[7] = locale_Category0;
      locale_CategoryArray0[8] = locale_Category0;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_CategoryArray0);
      Class<Locale.Category> class0 = Locale.Category.class;
      enumSet0.add(locale_Category0);
      EnumSet<Locale.Category> enumSet1 = EnumSet.allOf(class0);
      enumSet0.add(locale_Category2);
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      enumSet0.add(locale_Category3);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet1);
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0);
      enumSet0.clear();
      singletonListIterator0.reset();
      IteratorUtils.get((Iterator<Hashtable<PriorityQueue, ArrayList>>) singletonListIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      ResettableListIterator<Properties> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableListIterator0, (Equator<Object>) null);
      Vector<Vector<Boolean>> vector0 = new Vector<Vector<Boolean>>();
      ReverseListIterator<Vector<Boolean>> reverseListIterator0 = new ReverseListIterator<Vector<Boolean>>(vector0);
      EqualPredicate.equalPredicate((Iterator<Vector<Boolean>>) reverseListIterator0);
      IteratorUtils.find((Iterator<Properties>) resettableListIterator0, (Predicate<? super Properties>) equalPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      Iterator<ServiceLoader<String>> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.contains(iterator0, (Object) iterator0);
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyOrderedMapIterator();
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[9];
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[1] = instanceofPredicate0;
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[3] = instanceofPredicate1;
      Class<Integer> class2 = Integer.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class2);
      instanceofPredicateArray0[4] = instanceofPredicate2;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class2);
      instanceofPredicateArray0[6] = instanceofPredicate3;
      Class<SQLDataException> class3 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class3);
      instanceofPredicateArray0[7] = instanceofPredicate4;
      Class<SQLTransientException> class4 = SQLTransientException.class;
      InstanceofPredicate instanceofPredicate5 = new InstanceofPredicate(class4);
      instanceofPredicateArray0[8] = instanceofPredicate5;
      ObjectArrayListIterator<InstanceofPredicate> objectArrayListIterator0 = new ObjectArrayListIterator<InstanceofPredicate>(instanceofPredicateArray0);
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<InstanceofPredicate>) objectArrayListIterator0);
      Factory<SQLTransientConnectionException> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, SQLTransientConnectionException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLTransientConnectionException>) factory0);
      Iterator<SQLTransientConnectionException> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends InstanceofPredicate>) listIterator0, (Transformer<? super InstanceofPredicate, ? extends SQLTransientConnectionException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) iterator1, 2469);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      LinkedList<Transformer<Object, Properties>> linkedList0 = new LinkedList<Transformer<Object, Properties>>();
      ArrayDeque<StringTokenizer>[] arrayDequeArray0 = (ArrayDeque<StringTokenizer>[]) Array.newInstance(ArrayDeque.class, 0);
      ResettableListIterator<ArrayDeque<StringTokenizer>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayDequeArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<ArrayDeque<StringTokenizer>>) resettableListIterator0, (Predicate<? super ArrayDeque<StringTokenizer>>) uniquePredicate0);
      EmptyOrderedIterator.emptyOrderedIterator();
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      Properties properties8 = new Properties();
      propertiesArray0[8] = properties8;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0, 1);
      Iterator<Properties> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Properties>) objectArrayListIterator0, (Predicate<? super Properties>) uniquePredicate0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.find(iterator0, (Predicate<? super Properties>) predicate0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) orderedIterator0, (Iterator<? extends Integer>) orderedIterator0);
      EmptyIterator.emptyIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.emptyListIterator();
      DataTruncation dataTruncation0 = new DataTruncation((-1142), true, true, (-487), (-1142));
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) dataTruncation0);
      IteratorUtils.matchesAll((Iterator<ArrayDeque<StringTokenizer>>) null, (Predicate<? super ArrayDeque<StringTokenizer>>) predicate0);
      EmptyOrderedIterator.emptyOrderedIterator();
      EmptyListIterator.resettableEmptyListIterator();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.matchesAll((Iterator<ArrayDeque<StringTokenizer>>) null, (Predicate<? super ArrayDeque<StringTokenizer>>) predicate0);
      EmptyOrderedIterator.emptyOrderedIterator();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      Properties properties5 = new Properties();
      Properties properties6 = new Properties();
      Properties properties7 = new Properties();
      Properties properties8 = new Properties();
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<Properties>((Properties[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>((SQLDataException) null);
      FactoryTransformer<SQLException, SQLNonTransientConnectionException> factoryTransformer0 = new FactoryTransformer<SQLException, SQLNonTransientConnectionException>((Factory<? extends SQLNonTransientConnectionException>) null);
      IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) singletonListIterator0, (Transformer<? super SQLDataException, ? extends SQLNonTransientConnectionException>) factoryTransformer0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      SingletonListIterator<Class<SQLClientInfoException>> singletonListIterator1 = new SingletonListIterator<Class<SQLClientInfoException>>(class0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<Class<SQLClientInfoException>>) singletonListIterator1, (Transformer<? super Class<SQLClientInfoException>, String>) transformer0, "[", "[", "");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      LinkedList<Transformer<Object, Properties>> linkedList0 = new LinkedList<Transformer<Object, Properties>>();
      IteratorUtils.loopingListIterator((List<Transformer<Object, Properties>>) linkedList0);
      LinkedList<Properties> linkedList1 = new LinkedList<Properties>();
      LoopingListIterator<Properties> loopingListIterator0 = new LoopingListIterator<Properties>(linkedList1);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      vector0.addAll((Collection<? extends InstanceofPredicate>) stack0);
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) vector0);
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<Properties>) loopingListIterator0, (Predicate<? super Properties>) predicate1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Object, SQLIntegrityConstraintViolationException>[] transformerArray0 = (Transformer<Object, SQLIntegrityConstraintViolationException>[]) Array.newInstance(Transformer.class, 6);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer0 = ConstantTransformer.constantTransformer(sQLIntegrityConstraintViolationException0);
      transformerArray0[0] = transformer0;
      Factory<SQLIntegrityConstraintViolationException> factory0 = ConstantFactory.constantFactory(sQLIntegrityConstraintViolationException0);
      FactoryTransformer<Object, SQLIntegrityConstraintViolationException> factoryTransformer0 = new FactoryTransformer<Object, SQLIntegrityConstraintViolationException>(factory0);
      transformerArray0[1] = (Transformer<Object, SQLIntegrityConstraintViolationException>) factoryTransformer0;
      HashMap<Object, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<Object, SQLIntegrityConstraintViolationException>();
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer1 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLIntegrityConstraintViolationException>) hashMap0);
      transformerArray0[2] = transformer1;
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer2 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate1, (Transformer<? super Object, ? extends SQLIntegrityConstraintViolationException>) factoryTransformer0, (Transformer<? super Object, ? extends SQLIntegrityConstraintViolationException>) factoryTransformer0);
      transformerArray0[3] = transformer2;
      IfTransformer<Object, SQLIntegrityConstraintViolationException> ifTransformer0 = new IfTransformer<Object, SQLIntegrityConstraintViolationException>(predicate0, transformer0, transformer0);
      transformerArray0[4] = (Transformer<Object, SQLIntegrityConstraintViolationException>) ifTransformer0;
      FactoryTransformer<Object, SQLIntegrityConstraintViolationException> factoryTransformer1 = new FactoryTransformer<Object, SQLIntegrityConstraintViolationException>(factory0);
      transformerArray0[5] = (Transformer<Object, SQLIntegrityConstraintViolationException>) factoryTransformer1;
      SwitchTransformer<Object, SQLIntegrityConstraintViolationException> switchTransformer0 = new SwitchTransformer<Object, SQLIntegrityConstraintViolationException>(predicateArray0, transformerArray0, transformer0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(switchTransformer0);
      Closure<Object> closure0 = IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) transformerClosure0);
      IteratorUtils.apply((Iterator<BatchUpdateException>) null, (Closure<? super BatchUpdateException>) closure0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) orderedIterator0, (Iterator<? extends Integer>) orderedIterator0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Iterator<ServiceLoader<String>> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.contains(iterator0, (Object) orderedIterator0);
      Iterator<DataTruncation> iterator1 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      IteratorUtils.singletonListIterator(clientInfoStatus0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) orderedIterator0, (Iterator<? extends Integer>) orderedIterator0);
      EmptyIterator.emptyIterator();
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer>[] arrayDequeArray0 = (ArrayDeque<StringTokenizer>[]) Array.newInstance(ArrayDeque.class, 5);
      arrayDequeArray0[0] = arrayDeque0;
      arrayDequeArray0[1] = arrayDeque0;
      arrayDequeArray0[2] = arrayDeque0;
      arrayDequeArray0[3] = arrayDeque0;
      arrayDequeArray0[4] = arrayDeque0;
      ResettableListIterator<ArrayDeque<StringTokenizer>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayDequeArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ArrayDeque<StringTokenizer>>) resettableListIterator0, (Predicate<? super ArrayDeque<StringTokenizer>>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) orderedIterator0, (Iterator<? extends Integer>) orderedIterator0);
      Iterator<ServiceLoader<String>> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.contains(iterator0, (Object) orderedIterator0);
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<SQLTransientConnectionException, EnumSet<ClientInfoStatus>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0, 2469);
      IteratorUtils.size(iterator0);
      MapIterator<IIOMetadataNode, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) mapIterator0, (Predicate<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      IteratorUtils.emptyIterator();
      MockThrowable mockThrowable0 = new MockThrowable("#<@=%;^DxM`$4/!E4,");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("#<@=%;^DxM`$4/!E4,", "", 1381, mockThrowable0);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      mockThrowable0.initCause(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0, (Predicate<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      IteratorUtils.unmodifiableListIterator((ListIterator<String>) singletonListIterator0);
      UniquePredicate<String> uniquePredicate0 = new UniquePredicate<String>();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.matchesAny((Iterator<String>) singletonListIterator0, (Predicate<? super String>) predicate0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) orderedIterator0, (Iterator<? extends Integer>) orderedIterator0);
      EmptyIterator.emptyIterator();
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer>[] arrayDequeArray0 = (ArrayDeque<StringTokenizer>[]) Array.newInstance(ArrayDeque.class, 8);
      arrayDequeArray0[1] = arrayDeque0;
      arrayDequeArray0[2] = arrayDeque0;
      ArrayDeque<StringTokenizer> arrayDeque1 = new ArrayDeque<StringTokenizer>();
      arrayDequeArray0[3] = arrayDeque1;
      arrayDequeArray0[4] = arrayDeque0;
      arrayDequeArray0[5] = arrayDeque0;
      arrayDequeArray0[6] = arrayDeque0;
      ArrayDeque<StringTokenizer> arrayDeque2 = new ArrayDeque<StringTokenizer>();
      arrayDequeArray0[7] = arrayDeque2;
      ResettableListIterator<ArrayDeque<StringTokenizer>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayDequeArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<ArrayDeque<StringTokenizer>>) resettableListIterator0, (Predicate<? super ArrayDeque<StringTokenizer>>) uniquePredicate0);
      EmptyOrderedIterator.emptyOrderedIterator();
      EmptyListIterator.resettableEmptyListIterator();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) comparator0, (Iterator<? extends InstanceofPredicate>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashMap0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", (String) null, 2469, hashMap0, sQLClientInfoException0);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(hashMap0, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException((String) null, "", hashMap0, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("j5", ".bLg+^9pIC^Jp~", 2469, hashMap0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException(hashMap0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException(".bLg+^9pIC^Jp~", hashMap0, sQLClientInfoException4);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException(".bLg+^9pIC^Jp~", "org.apache.commons.collections4.map.Flat3Map", 2469, hashMap0, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException7;
      SQLClientInfoException sQLClientInfoException8 = new SQLClientInfoException(".bLg+^9pIC^Jp~", "j5", hashMap0);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException8;
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "org.apache.commons.collections4.map.Flat3Map", 2469);
      SQLClientInfoException sQLClientInfoException9 = new SQLClientInfoException("transformer may not be null", hashMap0, sQLDataException0);
      sQLClientInfoExceptionArray0[8] = sQLClientInfoException9;
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      IteratorUtils.toArray((Iterator<?>) objectArrayListIterator0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>(".bLg+^9pIC^Jp~");
      IteratorUtils.unmodifiableListIterator((ListIterator<String>) singletonListIterator0);
      UniquePredicate<String> uniquePredicate0 = new UniquePredicate<String>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLClientInfoException7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<StringTokenizer, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<StringTokenizer, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<StringTokenizer, ? extends DataTruncation>) orderedMapIterator0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) comparator0, (Iterator<? extends StringTokenizer>) orderedMapIterator1, (Iterator<? extends StringTokenizer>) orderedMapIterator0);
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      NotNullPredicate.notNullPredicate();
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Transformer<Object, Properties>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      Iterator<Properties> iterator0 = hashSet0.iterator();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) hashSet0);
      UniquePredicate.uniquePredicate();
      IteratorUtils.getIterator(enumeration0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      ListIterator<String> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<String>) singletonListIterator0);
      UniquePredicate<String> uniquePredicate0 = new UniquePredicate<String>();
      IteratorUtils.matchesAny((Iterator<String>) listIterator0, (Predicate<? super String>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) uniquePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.singletonIterator((SQLDataException) null);
      FactoryTransformer<SQLException, SQLNonTransientConnectionException> factoryTransformer0 = new FactoryTransformer<SQLException, SQLNonTransientConnectionException>((Factory<? extends SQLNonTransientConnectionException>) null);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) resettableIterator0, (Transformer<? super SQLDataException, ? extends SQLNonTransientConnectionException>) factoryTransformer0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<Transformer<Object, Properties>> arrayList0 = new ArrayList<Transformer<Object, Properties>>();
      IteratorUtils.loopingListIterator((List<Transformer<Object, Properties>>) arrayList0);
      Hashtable<PriorityQueue, ArrayList> hashtable0 = new Hashtable<PriorityQueue<SQLDataException>, ArrayList<StringTokenizer>>();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Predicate<SQLException> predicate1 = OrPredicate.orPredicate((Predicate<? super SQLException>) predicate0, (Predicate<? super SQLException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) zippingIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      ConstantFactory<SQLRecoverableException> constantFactory0 = new ConstantFactory<SQLRecoverableException>(sQLRecoverableException0);
      FactoryTransformer<Object, SQLRecoverableException> factoryTransformer0 = new FactoryTransformer<Object, SQLRecoverableException>(constantFactory0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Transformer<? super SQLClientInfoException, ? extends SQLRecoverableException>) factoryTransformer0);
      IteratorUtils.unmodifiableIterator(iterator0);
      ServiceLoader<String>[] serviceLoaderArray0 = (ServiceLoader<String>[]) Array.newInstance(ServiceLoader.class, 3);
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      serviceLoaderArray0[0] = serviceLoader0;
      ServiceLoader<String> serviceLoader1 = ServiceLoader.loadInstalled(class0);
      serviceLoaderArray0[1] = serviceLoader1;
      Class<String> class1 = String.class;
      ServiceLoader<String> serviceLoader2 = ServiceLoader.loadInstalled(class1);
      serviceLoaderArray0[2] = serviceLoader2;
      ResettableIterator<ServiceLoader<String>> resettableIterator1 = IteratorUtils.arrayIterator(serviceLoaderArray0);
      IteratorUtils.contains((Iterator<ServiceLoader<String>>) resettableIterator1, (Object) serviceLoader1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedHashSet<EnumSet<Locale.Category>> linkedHashSet0 = new LinkedHashSet<EnumSet<Locale.Category>>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet0);
      ResettableIterator<Class<SQLClientInfoException>> resettableIterator0 = IteratorUtils.emptyIterator();
      ExceptionTransformer.exceptionTransformer();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>((String) null);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      IteratorUtils.toString((Iterator<Class<SQLClientInfoException>>) resettableIterator0, (Transformer<? super Class<SQLClientInfoException>, String>) factoryTransformer0, "ZMz&PljCZQ10DhL;zxD", "", "");
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Hashtable<Object, SQLNonTransientConnectionException> hashtable0 = new Hashtable<Object, SQLNonTransientConnectionException>();
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLNonTransientConnectionException>) hashtable0);
      EmptyOrderedIterator.emptyOrderedIterator();
      Hashtable<SQLDataException, Integer> hashtable1 = new Hashtable<SQLDataException, Integer>();
      EntrySetMapIterator<SQLDataException, Integer> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, Integer>(hashtable1);
      IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) entrySetMapIterator0, (Transformer<? super SQLDataException, ? extends SQLNonTransientConnectionException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<ClientInfoStatus>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("uhJlY)Z8.~1");
      IteratorUtils.toString((Iterator<StringTokenizer>) singletonListIterator0, (Transformer<? super StringTokenizer, String>) transformer0);
      IteratorUtils.emptyMapIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      IteratorUtils.isEmpty(orderedMapIterator0);
      IteratorUtils.emptyIterator();
      Class<String> class0 = String.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.getIterator("uhJlY)Z8.~1");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableException0.fillInStackTrace();
      ConstantFactory<SQLRecoverableException> constantFactory0 = new ConstantFactory<SQLRecoverableException>(sQLRecoverableException0);
      FactoryTransformer<Object, SQLRecoverableException> factoryTransformer0 = new FactoryTransformer<Object, SQLRecoverableException>(constantFactory0);
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((EnumSet<Locale.Category>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte) (-95);
      byteArray0[7] = (byte) (-95);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      StringTokenizer stringTokenizer0 = new StringTokenizer("XHwG>W~'>QXii=|L", "XHwG>W~'>QXii=|L", false);
      IteratorUtils.emptyOrderedIterator();
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      Iterator<Properties> iterator0 = linkedHashSet0.iterator();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      AndPredicate<Properties> andPredicate0 = new AndPredicate<Properties>(predicate0, (Predicate<? super Properties>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.find(iterator0, (Predicate<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      int int0 = 1168;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.TransformerUtils", "6<h2a%`3*n", 1168);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.TransformerUtils", "Estimated size must be greater than 0", sQLTimeoutException0);
      Transformer<SQLNonTransientException, SQLIntegrityConstraintViolationException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.objectGraphIterator(sQLIntegrityConstraintViolationException0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      ConstantTransformer.constantTransformer("");
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque1 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer>[] arrayDequeArray0 = (ArrayDeque<StringTokenizer>[]) Array.newInstance(ArrayDeque.class, 1);
      ArrayDeque<StringTokenizer> arrayDeque2 = new ArrayDeque<StringTokenizer>();
      ResettableListIterator<ArrayDeque<StringTokenizer>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayDequeArray0);
      IteratorUtils.isEmpty(resettableListIterator0);
      EmptyListIterator.resettableEmptyListIterator();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("?(4(+ql");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      IteratorUtils.emptyIterator();
      DefaultEquator.defaultEquator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category0, locale_Category0);
      enumSet0.clear();
      IteratorUtils.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>((Integer) (-1), true);
      Iterator<Integer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) singletonIterator0, (Iterator<? extends Integer>) singletonIterator0);
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) iterator0, (Iterator<? extends Integer>) singletonIterator0);
      Class<Integer> class0 = Integer.class;
      IteratorUtils.toArray((Iterator<? extends Integer>) zippingIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Class<String> class0 = String.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.getIterator(class0);
      DefaultEquator.defaultEquator();
      IteratorUtils.emptyOrderedMapIterator();
      Class<Integer> class1 = Integer.class;
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) (-1);
      Integer integer0 = new Integer(282);
      integerArray0[1] = integer0;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      IteratorUtils.toArray((Iterator<? extends Integer>) resettableIterator0, class1);
      StringTokenizer stringTokenizer0 = new StringTokenizer("1,ysD(", "1,ysD(", false);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) stringTokenizer0, (-2940));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.size(resettableIterator0);
      EmptyOrderedIterator.emptyOrderedIterator();
      EmptyListIterator.resettableEmptyListIterator();
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) orderedIterator0);
      OrderedIterator<BatchUpdateException> orderedIterator1 = IteratorUtils.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      predicateArray0[0] = (Predicate<Object>) orPredicate0;
      String string0 = "[";
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 3);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      classArray0[0] = class0;
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      classArray0[1] = class1;
      Class<SQLInvalidAuthorizationSpecException> class2 = SQLInvalidAuthorizationSpecException.class;
      classArray0[2] = class2;
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) orderedIterator1;
      objectArray0[2] = (Object) orderedIterator1;
      IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) predicate0);
      objectArray0[3] = null;
      objectArray0[4] = (Object) class1;
      objectArray0[5] = (Object) "[";
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      IteratorUtils.emptyIterator();
      DefaultEquator.defaultEquator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category0, locale_Category0);
      enumSet0.clear();
      ResettableIterator<Class<SQLClientInfoException>> resettableIterator0 = IteratorUtils.emptyIterator();
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<Class<SQLClientInfoException>>) resettableIterator0, (Transformer<? super Class<SQLClientInfoException>, String>) transformer0, "", "", "");
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", mockThrowable0);
      SQLDataException sQLDataException0 = new SQLDataException("");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<ServiceLoader<String>> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.contains(iterator0, (Object) iterator0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.hasChildNodes();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      long long0 = 0L;
      long long1 = 516L;
      BoundedIterator<StringTokenizer> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) resettableListIterator0, 0L, 516L);
      long long2 = (-1L);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<StringTokenizer>) boundedIterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("?(4(+ql");
      iIOMetadataNode0.getElementsByTagNameNS("p7|(q*xWwpspz4~QcG", "IteratorChain cannot be changed after the first use of a method from the Iterator interface");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.asMultipleUseIterable((Iterator<?>) nodeListIterator0);
      SQLWarning sQLWarning0 = new SQLWarning();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) resettableListIterator0, (Predicate<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) resettableIterator0);
      Collection<Object> collection0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) zippingIterator0);
      LinkedHashSet<EnumSet<Locale.Category>> linkedHashSet0 = new LinkedHashSet<EnumSet<Locale.Category>>();
      linkedHashSet0.stream();
      MapIterator<EnumSet<Locale.Category>, TreeSet<Properties>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) listIterator0, (Equator<Object>) defaultEquator0);
      Iterator<EnumSet<Locale.Category>> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends EnumSet<Locale.Category>>) mapIterator0, (Predicate<? super EnumSet<Locale.Category>>) predicate0);
      IteratorUtils.toList((Iterator<? extends EnumSet<Locale.Category>>) iterator0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category0, locale_Category1);
      enumSet0.clear();
      ResettableIterator<Class<SQLClientInfoException>> resettableIterator1 = IteratorUtils.emptyIterator();
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<Class<SQLClientInfoException>>) resettableIterator1, (Transformer<? super Class<SQLClientInfoException>, String>) transformer0, "", "", "_a,{%n*C6E");
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("_a,{%n*C6E", mockThrowable0);
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.map.Flat3Map$FlatMapEntry", sQLSyntaxErrorException0);
      ResettableIterator<SQLDataException> resettableIterator2 = IteratorUtils.singletonIterator(sQLDataException0);
      FactoryTransformer<SQLException, SQLNonTransientConnectionException> factoryTransformer0 = new FactoryTransformer<SQLException, SQLNonTransientConnectionException>((Factory<? extends SQLNonTransientConnectionException>) null);
      Iterator<SQLNonTransientConnectionException> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) resettableIterator2, (Transformer<? super SQLDataException, ? extends SQLNonTransientConnectionException>) factoryTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(linkedList1);
      loopingListIterator0.add(".S-");
      ListIterator<String> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<String>) loopingListIterator0);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) listIterator0);
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) linkedList1);
      ArrayListIterator<BatchUpdateException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<BatchUpdateException>(enumeration0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.size(resettableIterator0);
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<Integer> class0 = Integer.class;
      Integer[] integerArray0 = IteratorUtils.toArray((Iterator<? extends Integer>) orderedIterator0, class0);
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("");
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 22);
      Class<SQLDataException> class1 = SQLDataException.class;
      classArray0[0] = class1;
      Class<SQLDataException> class2 = SQLDataException.class;
      classArray0[1] = class2;
      Class<SQLDataException> class3 = SQLDataException.class;
      classArray0[2] = class3;
      Class<SQLDataException> class4 = SQLDataException.class;
      classArray0[3] = class4;
      Class<SQLDataException> class5 = SQLDataException.class;
      classArray0[4] = class5;
      Class<SQLDataException> class6 = SQLDataException.class;
      classArray0[5] = class6;
      Class<SQLDataException> class7 = SQLDataException.class;
      classArray0[6] = class7;
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("", classArray0, integerArray0);
      InvokerTransformer.invokerTransformer("transformer may not be null");
      IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) null, (Transformer<? super SQLIntegrityConstraintViolationException, String>) invokerTransformer0, "transformer may not be null", "' on '", "transformer may not be null");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte) (-121);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.collections4.functors.ConstantFactory");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[0];
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      SkippingIterator<SQLClientInfoException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLClientInfoException>) objectArrayListIterator0, 0L);
      BoundedIterator<SQLClientInfoException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) skippingIterator0, (long) 100);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) boundedIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) listIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ArrayListIterator<EnumSet<Locale.Category>> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<EnumSet<Locale.Category>>(sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Stack<String> stack0 = new Stack<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) stack0, locale_FilteringMode0);
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(list0);
      IteratorUtils.unmodifiableListIterator((ListIterator<String>) loopingListIterator0);
      NotNullPredicate.notNullPredicate();
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      MapIterator<IIOMetadataNode, InstanceofPredicate> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) mapIterator0, (Iterator<? extends IIOMetadataNode>) mapIterator0, (Iterator<? extends IIOMetadataNode>) mapIterator0);
      ZippingIterator<IIOMetadataNode> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) mapIterator0, (Iterator<? extends IIOMetadataNode>) zippingIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) zippingIterator1, (Iterator<? extends IIOMetadataNode>) zippingIterator0);
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super String>) null, (Iterator<? extends String>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 6);
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) resettableIterator0;
      iteratorArray0[1] = (Iterator<SQLClientInfoException>) zippingIterator0;
      iteratorArray0[2] = (Iterator<SQLClientInfoException>) zippingIterator0;
      iteratorArray0[3] = (Iterator<SQLClientInfoException>) zippingIterator0;
      iteratorArray0[4] = (Iterator<SQLClientInfoException>) resettableIterator0;
      iteratorArray0[5] = (Iterator<SQLClientInfoException>) zippingIterator0;
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) iterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      ConstantFactory<SQLRecoverableException> constantFactory0 = new ConstantFactory<SQLRecoverableException>(sQLRecoverableException0);
      FactoryTransformer<Object, SQLRecoverableException> factoryTransformer0 = new FactoryTransformer<Object, SQLRecoverableException>(constantFactory0);
      Iterator<SQLRecoverableException> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) iteratorArray0[3], (Transformer<? super SQLClientInfoException, ? extends SQLRecoverableException>) factoryTransformer0);
      IteratorUtils.unmodifiableIterator(iterator1);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) zippingIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.asMultipleUseIterable((Iterator<?>) zippingIterator0);
      SQLWarning sQLWarning0 = new SQLWarning();
      IteratorUtils.emptyMapIterator();
      iIOMetadataNode0.getElementsByTagName("delimiter may not be null");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.getIterator(listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((InstanceofPredicate[]) null, 2553, 2553);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.getIterator(resettableIterator0);
      OrderedMapIterator<SQLFeatureNotSupportedException, Vector<SQLWarning>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      String string0 = "\") in this Map";
      Transformer<Object, DataTruncation> transformer0 = InvokerTransformer.invokerTransformer("\") in this Map");
      IteratorUtils.transformedIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, (Transformer<? super SQLFeatureNotSupportedException, ? extends DataTruncation>) transformer0);
      int int0 = (-506);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "\") in this Map", (-506), (-506));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) zippingIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      ConstantFactory<SQLRecoverableException> constantFactory0 = new ConstantFactory<SQLRecoverableException>(sQLRecoverableException0);
      FactoryTransformer<Object, SQLRecoverableException> factoryTransformer0 = new FactoryTransformer<Object, SQLRecoverableException>(constantFactory0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Transformer<? super SQLClientInfoException, ? extends SQLRecoverableException>) factoryTransformer0);
      Iterator<SQLRecoverableException> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) iterator1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      int int0 = (-1922);
      int int1 = 3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-1922), 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category1);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet0);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator1 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet0);
      singletonListIterator1.next();
      ZippingIterator<EnumSet<Locale.Category>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Hashtable<PriorityQueue, ArrayList>>) zippingIterator0, 24);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 23
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedHashSet<EnumSet<Locale.Category>> linkedHashSet0 = new LinkedHashSet<EnumSet<Locale.Category>>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet0);
      EnumSet<Locale.Category> enumSet1 = singletonListIterator0.next();
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator1 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet1);
      singletonListIterator1.next();
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator0 = IteratorUtils.singletonIterator(enumSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) resettableIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator1, (Iterator<? extends EnumSet<Locale.Category>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<SQLWarning> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLWarning>) resettableListIterator0);
      IteratorUtils.toString(iterator0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[3];
      String string0 = null;
      String string1 = ",ezZ3=";
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("])Me'R#>wdqzeYcpkV", ",ezZ3=", intArray0);
      SQLWarning sQLWarning0 = new SQLWarning("Node must not be null", (String) null, 0, batchUpdateException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("[]", "E@e1", 0, sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[]", "End index must not be less than start index", sQLRecoverableException0);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLNonTransientExceptionArray0[0]);
      // Undeclared exception!
      try { 
        sQLWarning0.initCause(sQLRecoverableException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLRecoverableException: []
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Stack<String> stack0 = new Stack<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) stack0, locale_FilteringMode0);
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(list0);
      ListIterator<String> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<String>) loopingListIterator0);
      Predicate<String> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAny((Iterator<String>) listIterator0, (Predicate<? super String>) predicate0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLClientInfoException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLInvalidAuthorizationSpecException, ? extends SQLClientInfoException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLClientInfoException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLClientInfoException>(orderedMapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLInvalidAuthorizationSpecException>) abstractOrderedMapIteratorDecorator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) zippingIterator0);
      LinkedHashSet<EnumSet<Locale.Category>> linkedHashSet0 = new LinkedHashSet<EnumSet<Locale.Category>>();
      linkedHashSet0.stream();
      DefaultEquator.defaultEquator();
      LinkedList<Transformer<Object, Properties>> linkedList0 = new LinkedList<Transformer<Object, Properties>>();
      IteratorUtils.loopingListIterator((List<Transformer<Object, Properties>>) linkedList0);
      Predicate<String> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAny((Iterator<String>) null, (Predicate<? super String>) predicate0);
      ArrayIterator<String> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<String>(zippingIterator0, 100, 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.noneOf(class0);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet0);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator1 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet0);
      EnumSet<Locale.Category> enumSet1 = singletonListIterator1.next();
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator1, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0);
      enumSet1.clear();
      int int0 = (-16);
      SQLException[] sQLExceptionArray0 = new SQLException[1];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(",J", "1f~Xa<", 10, sQLNonTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException("Collection must not be null", "iterator", (-16), sQLTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLDataException0);
      sQLExceptionArray0[0] = (SQLException) sQLTimeoutException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLExceptionArray0, 10, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-111);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.IteratorUtils");
      arrayDeque0.add(stringTokenizer0);
      IteratorUtils.singletonIterator(arrayDeque0);
      IteratorUtils.emptyOrderedIterator();
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      Iterator<Properties> iterator0 = hashSet0.iterator();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      AndPredicate<Properties> andPredicate0 = new AndPredicate<Properties>(predicate0, predicate0);
      IteratorUtils.find(iterator0, (Predicate<? super Properties>) andPredicate0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("yp-hM\"%1hX-^G@IOF");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Attempt to make an ArrayIterator that ");
      ConstantFactory<SQLRecoverableException> constantFactory0 = new ConstantFactory<SQLRecoverableException>(sQLRecoverableException0);
      FactoryTransformer<Object, SQLRecoverableException> factoryTransformer0 = new FactoryTransformer<Object, SQLRecoverableException>(constantFactory0);
      MapIterator<SQLClientInfoException, Stack<Properties>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      SkippingIterator<SQLClientInfoException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLClientInfoException>) mapIterator0, 0L);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) skippingIterator0, (Transformer<? super SQLClientInfoException, ? extends SQLRecoverableException>) factoryTransformer0);
      IteratorUtils.unmodifiableIterator(iterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) mapIterator0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(list0);
      ListIterator<String> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<String>) loopingListIterator0);
      Predicate<String> predicate0 = NotNullPredicate.notNullPredicate();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) listIterator0);
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) linkedList1);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super String>) predicate0);
      Comparator<DataTruncation> comparator0 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      EmptyIterator.resettableEmptyIterator();
      OrderedMapIterator<DataTruncation, LinkedHashSet<BatchUpdateException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<DataTruncation, LinkedHashSet<BatchUpdateException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, LinkedHashSet<BatchUpdateException>>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, LinkedHashSet<BatchUpdateException>>) abstractMapIteratorDecorator0);
      DataTruncation dataTruncation0 = new DataTruncation(128, false, false, (-1), 150);
      IteratorUtils.singletonIterator(dataTruncation0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Integer>) null, (Iterator<? extends Integer>) resettableIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(list0);
      IteratorUtils.emptyMapIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Zzt+uC%");
      IteratorUtils.isEmpty(loopingListIterator0);
      IteratorUtils.emptyIterator();
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.getIterator((Object) null);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      IteratorUtils.emptyMapIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Integer>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("yp-hM\"%1hX-^G@IOF");
      MapIterator<Integer, ArrayDeque<StringTokenizer>> mapIterator0 = IteratorUtils.emptyMapIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      Class<Integer> class0 = Integer.class;
      IteratorUtils.toArray((Iterator<? extends Integer>) mapIterator0, class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) resettableListIterator0, (Predicate<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      IteratorUtils.emptyMapIterator();
      IteratorUtils.isEmpty(resettableIterator0);
      MapIterator<SQLTimeoutException, TreeSet<Hashtable>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) mapIterator0, (Iterator<? extends SQLTransientException>) mapIterator0, (Iterator<? extends SQLTransientException>) mapIterator0);
      Properties properties0 = new Properties();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) listIterator0, (Predicate<? super Properties>) predicate0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(list0);
      ListIterator<String> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<String>) loopingListIterator0);
      Predicate<String> predicate0 = NotNullPredicate.notNullPredicate();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) listIterator0);
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) linkedList1);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super String>) predicate0);
      ArrayListIterator<BatchUpdateException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<BatchUpdateException>(locale_FilteringMode0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Index ");
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("Index ");
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      iIOMetadataNodeArray0[0] = iIOMetadataNode3;
      IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      IteratorUtils.emptyMapIterator();
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<Integer> class0 = Integer.class;
      IteratorUtils.toArray((Iterator<? extends Integer>) orderedIterator0, class0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, String>(orderedMapIterator0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, String> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLInvalidAuthorizationSpecException, ? extends String>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator1, (-387L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category1;
      locale_CategoryArray0[3] = locale_Category1;
      locale_CategoryArray0[4] = locale_Category0;
      locale_CategoryArray0[5] = locale_Category0;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[6] = locale_Category2;
      locale_CategoryArray0[7] = locale_Category0;
      locale_CategoryArray0[8] = locale_Category0;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_CategoryArray0);
      Class<Locale.Category> class0 = Locale.Category.class;
      enumSet0.add(locale_Category0);
      EnumSet.allOf(class0);
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      enumSet0.add(locale_Category3);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "tfds(:", 1041, hashtable0);
      Properties properties0 = new Properties();
      properties0.put(locale_Category2, "");
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.functors.AndPredicate", "Closure must not be null", 10);
      IteratorUtils.getIterator(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      MapIterator<Integer, ArrayDeque<StringTokenizer>> mapIterator0 = IteratorUtils.emptyMapIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      Class<Integer> class0 = Integer.class;
      IteratorUtils.toArray((Iterator<? extends Integer>) mapIterator0, class0);
      Predicate<Object> predicate0 = null;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLRecoverableException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) zippingIterator0);
      LinkedHashSet<EnumSet<Locale.Category>> linkedHashSet0 = new LinkedHashSet<EnumSet<Locale.Category>>();
      linkedHashSet0.stream();
      MapIterator<EnumSet<Locale.Category>, TreeSet<Properties>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) listIterator0, (Equator<Object>) defaultEquator0);
      Iterator<EnumSet<Locale.Category>> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends EnumSet<Locale.Category>>) mapIterator0, (Predicate<? super EnumSet<Locale.Category>>) predicate0);
      List<EnumSet<Locale.Category>> list0 = IteratorUtils.toList((Iterator<? extends EnumSet<Locale.Category>>) iterator0);
      IteratorUtils.loopingIterator((Collection<? extends EnumSet<Locale.Category>>) list0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      IteratorUtils.emptyIterator();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, intArray0);
      batchUpdateException0.getSuppressed();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "Closure must not be null", batchUpdateException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", "", 838, intArray0, sQLFeatureNotSupportedException0);
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("gK0mY('B`h@", (String) null, 838, intArray0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0);
      ArrayList<Transformer<Object, Properties>> arrayList0 = new ArrayList<Transformer<Object, Properties>>();
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      arrayList0.add(transformer0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      ResettableListIterator<Transformer<Object, Properties>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Transformer<Object, Properties>>) arrayList0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Transformer<Object, Properties>>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, 0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-95);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.IteratorUtils");
      IteratorUtils.emptyOrderedIterator();
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      Iterator<Properties> iterator0 = linkedHashSet0.iterator();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      AndPredicate<Properties> andPredicate0 = new AndPredicate<Properties>(predicate0, predicate0);
      IteratorUtils.find(iterator0, (Predicate<? super Properties>) andPredicate0);
      IteratorUtils.singletonIterator((BatchUpdateException) null);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Locale.Category, SQLDataException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<Locale.Category> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<Locale.Category> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) comparator0, (Iterator<? extends Locale.Category>) resettableIterator0, (Iterator<? extends Locale.Category>) resettableIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) iterator0, (Iterator<? extends Locale.Category>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientException, ArrayList<Integer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<IIOMetadataNode, SQLSyntaxErrorException>) orderedMapIterator0);
      OrderedMapIterator<InstanceofPredicate, SQLDataException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      String string0 = "hF";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hF");
      OrderedMapIterator<InstanceofPredicate, SQLDataException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<InstanceofPredicate, ? extends SQLDataException>) orderedMapIterator1);
      long long0 = 0L;
      BoundedIterator<Predicate<Object>> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Predicate<Object>>) orderedMapIterator2, 0L, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) boundedIterator0, (-2242));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTimeoutException[]) null, 997);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      Properties[] propertiesArray0 = new Properties[7];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", (String) null, sQLDataException0);
      BiFunction<Object, Object, Properties> biFunction0 = (BiFunction<Object, Object, Properties>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      properties2.merge(sQLTransientConnectionException0, resettableIterator0, biFunction0);
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties2;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      Iterator<Properties> iterator0 = hashSet0.iterator();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) hashSet0);
      UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
      
      MapIterator<SQLTimeoutException, TreeSet<Hashtable>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("uhJlY)Z8.~1");
      IteratorUtils.toString((Iterator<StringTokenizer>) singletonListIterator0, (Transformer<? super StringTokenizer, String>) transformer0);
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque1 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque2 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque3 = new ArrayDeque<StringTokenizer>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category1, locale_Category2);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator1 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet0);
      singletonListIterator1.next();
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator1, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator1, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator1);
      enumSet0.clear();
      enumSet0.add(locale_Category0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Locale.Category>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[6];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      locale_CategoryArray0[2] = locale_Category0;
      locale_CategoryArray0[3] = locale_Category0;
      locale_CategoryArray0[4] = locale_Category0;
      locale_CategoryArray0[5] = locale_Category0;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_CategoryArray0);
      Class<Locale.Category> class0 = Locale.Category.class;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      enumSet0.add(locale_Category1);
      EnumSet.allOf(class0);
      enumSet0.add(locale_Category0);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet0);
      EnumSet<Locale.Category> enumSet1 = singletonListIterator0.next();
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0);
      enumSet1.clear();
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      enumSet1.add(locale_Category2);
      int int0 = 61;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.size(resettableIterator0);
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<Integer> class0 = Integer.class;
      IteratorUtils.toArray((Iterator<? extends Integer>) orderedIterator0, class0);
      String string0 = "9f";
      String string1 = "$\"KR`}$\"t\\";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OrderedMapIterator must not be null");
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("$\"KR`}$\"t");
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Stack<String> stack0 = new Stack<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) stack0, locale_FilteringMode0);
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(list0);
      IteratorUtils.unmodifiableListIterator((ListIterator<String>) loopingListIterator0);
      NotNullPredicate.notNullPredicate();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Predicate<Object> predicate2 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate1);
      AndPredicate<SQLException> andPredicate0 = new AndPredicate<SQLException>(predicate2, predicate1);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTransientConnectionException>) null, (Predicate<? super SQLTransientConnectionException>) andPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category1;
      locale_CategoryArray0[3] = locale_Category1;
      locale_CategoryArray0[4] = locale_Category0;
      locale_CategoryArray0[5] = locale_Category0;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[6] = locale_Category2;
      locale_CategoryArray0[7] = locale_Category0;
      locale_CategoryArray0[8] = locale_Category0;
      Iterator<SQLSyntaxErrorException> iterator0 = null;
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Transformer<? super SQLSyntaxErrorException, ? extends String>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Stack<String> stack0 = new Stack<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) stack0, locale_FilteringMode0);
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(list0);
      ConstantTransformer.constantTransformer("The predicate array must not contain a null predicate, index ");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-291));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category1;
      locale_CategoryArray0[3] = locale_Category1;
      locale_CategoryArray0[4] = locale_Category0;
      locale_CategoryArray0[5] = locale_Category0;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[6] = locale_Category2;
      locale_CategoryArray0[7] = locale_Category0;
      locale_CategoryArray0[8] = locale_Category0;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_CategoryArray0);
      Class<Locale.Category> class0 = Locale.Category.class;
      enumSet0.add(locale_Category0);
      EnumSet<Locale.Category> enumSet1 = EnumSet.allOf(class0);
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      enumSet0.add(locale_Category3);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet1);
      singletonListIterator0.next();
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0);
      enumSet1.clear();
      Locale.Category locale_Category4 = Locale.Category.DISPLAY;
      singletonListIterator0.previous();
      Locale.Category locale_Category5 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet2 = EnumSet.of(locale_Category4, locale_Category0, locale_Category5, locale_Category5, locale_Category0);
      Locale.Category locale_Category6 = Locale.Category.DISPLAY;
      enumSet2.add(locale_Category6);
      IteratorUtils.toList((Iterator<?>) singletonListIterator0, 61);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((InstanceofPredicate[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category1;
      locale_CategoryArray0[3] = locale_Category1;
      locale_CategoryArray0[4] = locale_Category0;
      locale_CategoryArray0[5] = locale_Category0;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[6] = locale_Category2;
      locale_CategoryArray0[7] = locale_Category0;
      locale_CategoryArray0[8] = locale_Category0;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_CategoryArray0);
      Class<Locale.Category> class0 = Locale.Category.class;
      enumSet0.add(locale_Category0);
      EnumSet<Locale.Category> enumSet1 = EnumSet.allOf(class0);
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      enumSet0.add(locale_Category3);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet1);
      singletonListIterator0.next();
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0);
      enumSet0.clear();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Hashtable<PriorityQueue, ArrayList>>) singletonListIterator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 4234, 4234);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LinkedHashSet<EnumSet<Locale.Category>> linkedHashSet0 = new LinkedHashSet<EnumSet<Locale.Category>>();
      Stream<EnumSet<Locale.Category>> stream0 = linkedHashSet0.stream();
      IteratorUtils.loopingIterator((Collection<? extends EnumSet<Locale.Category>>) linkedHashSet0);
      int int0 = 8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) stream0, 8, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("eH=", "@h73rz&sxsY.a8/Y)>W", 0);
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque1 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque2 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque3 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque4 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer> arrayDeque5 = new ArrayDeque<StringTokenizer>();
      ArrayDeque<StringTokenizer>[] arrayDequeArray0 = (ArrayDeque<StringTokenizer>[]) Array.newInstance(ArrayDeque.class, 0);
      IteratorUtils.arrayListIterator(arrayDequeArray0);
      TruePredicate.truePredicate();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("eH=", "eH=", 0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("eH=", "eH=");
      Integer integer0 = new Integer(125);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) integer0, 100, 512);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) zippingIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.emptyMapIterator();
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<Integer> class0 = Integer.class;
      IteratorUtils.toArray((Iterator<? extends Integer>) orderedIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) listIterator0, (Predicate<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[1];
      SQLTransientException sQLTransientException0 = new SQLTransientException("j", "", 5);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("j", "j", sQLTransientException0);
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransactionRollbackException0.getLocalizedMessage();
      IteratorUtils.arrayListIterator(sQLTransientExceptionArray0, 0, 0);
      DataTruncation dataTruncation0 = new DataTruncation(135, false, true, 0, 0);
      SQLWarning sQLWarning0 = new SQLWarning("", "", 135);
      sQLWarning0.fillInStackTrace();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Transformer<SQLException, SQLNonTransientConnectionException> transformer0 = null;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("p3L!}L4[3", "org.apache.commons.collections4.functors.UniquePredicate");
      Throwable throwable0 = null;
      sQLNonTransientConnectionException0.initCause((Throwable) null);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<SQLException> comparatorPredicate0 = new ComparatorPredicate<SQLException>(sQLNonTransientConnectionException0, (Comparator<SQLException>) null, comparatorPredicate_Criterion0);
      // Undeclared exception!
      try { 
        TransformedPredicate.transformedPredicate((Transformer<? super SQLException, ? extends SQLException>) null, (Predicate<? super SQLException>) comparatorPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The transformer to call must not be null
         //
         verifyException("org.apache.commons.collections4.functors.TransformedPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 3);
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<String>) orderedIterator0;
      String string0 = null;
      // Undeclared exception!
      try { 
        InvokerTransformer.invokerTransformer((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The method to invoke must not be null
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      LoopingIterator<String> loopingIterator0 = new LoopingIterator<String>(priorityQueue0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends String>) loopingIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) iterator0, 2553);
      LoopingIterator<SQLClientInfoException> loopingIterator0 = new LoopingIterator<SQLClientInfoException>(list0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) loopingIterator0, (-506));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[8];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-3906);
      intArray0[2] = 1465;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("itGQsG+6`w]'hrGUZ", intArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("F/id\"??}:IHxs#p]\"", "F/id\"??}:IHxs#p]\"", batchUpdateException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("", "itGQsG+6`w]'hrGUZ", 1465);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("", "");
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("", "F/id\"??}:IHxs#p]\"", 0, sQLFeatureNotSupportedException4);
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException("itGQsG+6`w]'hrGUZ", sQLFeatureNotSupportedException5);
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException6;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException7 = new SQLFeatureNotSupportedException("", "Enumeration must not be null", 1465);
      sQLFeatureNotSupportedExceptionArray0[7] = sQLFeatureNotSupportedException7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, (-1253));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category1;
      locale_CategoryArray0[3] = locale_Category0;
      locale_CategoryArray0[4] = locale_Category0;
      locale_CategoryArray0[5] = locale_Category0;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[6] = locale_Category2;
      locale_CategoryArray0[7] = locale_Category0;
      locale_CategoryArray0[8] = locale_Category0;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_CategoryArray0);
      Class<Locale.Category> class0 = Locale.Category.class;
      enumSet0.add(locale_Category0);
      EnumSet.allOf(class0);
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      enumSet0.add(locale_Category3);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet0);
      singletonListIterator0.next();
      ZippingIterator<EnumSet<Locale.Category>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0);
      enumSet0.clear();
      enumSet0.add(locale_Category2);
      int int0 = 61;
      IteratorUtils.toList((Iterator<?>) zippingIterator0, 61);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((InstanceofPredicate[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet0);
      enumSet0.clear();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      String string0 = "";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      // Undeclared exception!
      try { 
        singletonListIterator0.add(stringTokenizer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported by this iterator
         //
         verifyException("org.apache.commons.collections4.iterators.SingletonListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      Properties[] propertiesArray0 = new Properties[7];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", (String) null, sQLDataException0);
      BiFunction<Object, Object, Properties> biFunction0 = (BiFunction<Object, Object, Properties>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      properties2.merge(sQLTransientConnectionException0, resettableIterator0, biFunction0);
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      properties2.put(properties3, properties0);
      properties2.put(properties5, properties0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 1192, hashtable0);
      properties0.put(sQLClientInfoException0, properties4);
      propertiesArray0[6] = properties6;
      IteratorUtils.arrayListIterator(propertiesArray0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyIterator();
      IteratorUtils.getIterator(properties6);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.asMultipleUseIterable((Iterator<?>) nodeListIterator0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Closure collection must not be null", "", 2212, (long[]) null, sQLWarning0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      int[] intArray0 = new int[5];
      intArray0[0] = 1231;
      intArray0[2] = 100;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "Closure collection must not be null", 1571, hashtable0);
      Properties properties0 = new Properties();
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", intArray0);
      ListIterator<Transformer<SQLInvalidAuthorizationSpecException, SQLClientInfoException>> listIterator0 = EmptyListIterator.emptyListIterator();
      properties0.put(batchUpdateException1, listIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.getIterator(predicate0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category1;
      locale_CategoryArray0[3] = locale_Category1;
      locale_CategoryArray0[4] = locale_Category0;
      locale_CategoryArray0[5] = locale_Category0;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[6] = locale_Category2;
      locale_CategoryArray0[7] = locale_Category0;
      locale_CategoryArray0[8] = locale_Category0;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_CategoryArray0);
      enumSet0.add(locale_Category0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (-12L), (-12L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      int int0 = 1045;
      List<SQLInvalidAuthorizationSpecException> list0 = IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0, 1045);
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) list0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0);
      LinkedHashSet<EnumSet<Locale.Category>> linkedHashSet0 = new LinkedHashSet<EnumSet<Locale.Category>>();
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends EnumSet<Locale.Category>>) linkedHashSet0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.find((Iterator<EnumSet<Locale.Category>>) resettableIterator1, (Predicate<? super EnumSet<Locale.Category>>) predicate0);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      Throwable throwable0 = null;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", (Throwable) null);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", "", (-4923), sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      String string0 = "g956iqsNW";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("g956iqsNW", sQLFeatureNotSupportedException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("g956iqsNW", "g956iqsNW", "Set must not be null", (-4923));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("Set must not be null", "g956iqsNW", "Set must not be null", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLFeatureNotSupportedException1.setStackTrace(stackTraceElementArray0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DataTruncation dataTruncation0 = new DataTruncation(100, true, false, 128, 128, (Throwable) null);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLException>) resettableIterator0, (long) 128, (long) 100);
      String string0 = "%Un[%";
      StringTokenizer stringTokenizer0 = new StringTokenizer("%Un[%", "%Un[%");
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0, true);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) singletonIterator0, (Iterator<? extends StringTokenizer>) singletonIterator0, (Iterator<? extends StringTokenizer>) singletonIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) anyPredicate0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      predicateArray0[0] = (Predicate<Object>) nullIsTruePredicate0;
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 5);
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicateArray0[0], (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(instanceofPredicate0, transformer1, transformer0);
      transformerArray0[0] = (Transformer<Object, String>) ifTransformer0;
      Transformer<Object, String> transformer2 = ConstantTransformer.constantTransformer("");
      transformerArray0[1] = transformer2;
      Transformer<Object, String> transformer3 = ExceptionTransformer.exceptionTransformer();
      transformerArray0[2] = transformer3;
      Class<SQLTransactionRollbackException>[] classArray0 = (Class<SQLTransactionRollbackException>[]) Array.newInstance(Class.class, 7);
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      classArray0[0] = class1;
      Class<SQLTransactionRollbackException> class2 = SQLTransactionRollbackException.class;
      classArray0[1] = class2;
      Class<SQLTransactionRollbackException> class3 = SQLTransactionRollbackException.class;
      classArray0[2] = class3;
      Class<SQLTransactionRollbackException> class4 = SQLTransactionRollbackException.class;
      classArray0[3] = class4;
      Class<SQLTransactionRollbackException> class5 = SQLTransactionRollbackException.class;
      classArray0[4] = class5;
      Class<SQLTransactionRollbackException> class6 = SQLTransactionRollbackException.class;
      classArray0[5] = class6;
      Class<SQLTransactionRollbackException> class7 = SQLTransactionRollbackException.class;
      classArray0[6] = class7;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("%Un[%", classArray0, classArray0);
      transformerArray0[3] = (Transformer<Object, String>) invokerTransformer0;
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      transformerArray0[4] = (Transformer<Object, String>) constantTransformer0;
      // Undeclared exception!
      try { 
        SwitchTransformer.switchTransformer((Predicate<? super Object>[]) predicateArray0, (Transformer<? super Object, ? extends String>[]) transformerArray0, (Transformer<? super Object, ? extends String>) transformer2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate and transformer arrays must be the same size
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) zippingIterator0);
      LinkedHashSet<EnumSet<Locale.Category>> linkedHashSet0 = new LinkedHashSet<EnumSet<Locale.Category>>();
      linkedHashSet0.stream();
      DefaultEquator.defaultEquator();
      LinkedList<Transformer<Object, Properties>> linkedList0 = new LinkedList<Transformer<Object, Properties>>();
      ResettableListIterator<Transformer<Object, Properties>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Transformer<Object, Properties>>) linkedList0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Transformer<Object, Properties>>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, 2610L, 570L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("1xX", "1xX", intArray0);
      batchUpdateException0.getSuppressed();
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("1xX", "1xX", 0, intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[0] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("", "jP+|mc!r++V^", 2202, intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException2;
      IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0);
      ArrayList<Transformer<Object, Properties>> arrayList0 = new ArrayList<Transformer<Object, Properties>>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      arrayList0.add(transformer0);
      arrayList0.forEach(consumer0);
      ResettableListIterator<Transformer<Object, Properties>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Transformer<Object, Properties>>) arrayList0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Transformer<Object, Properties>>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (-12L), (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("transformer may not be null");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.functors.SwitchClosure", "org.apache.commons.collections4.functors.SwitchClosure", sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLSyntaxErrorException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLIntegrityConstraintViolationException1);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("suffix may not be null", "transformer may not be null");
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("suffix may not be null", "org.apache.commons.collections4.functors.SwitchClosure", 1742);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("", "i5JTP,2zBP@", sQLIntegrityConstraintViolationException1);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      String string0 = "org.apache.commons.collections4.functors.ExceptionTransformer";
      int int0 = 1807;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.map.ListOrderedMap", "org.apache.commons.collections4.functors.ExceptionTransformer", 1807, sQLIntegrityConstraintViolationException1);
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, (-2920), 1464);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      MapIterator<SQLDataException, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<HashSet<TreeSet>, Locale.Category>) mapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>) mapIterator0, (Iterator<? extends SQLNonTransientException>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("%n\"aP");
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) listIterator0);
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(linkedList0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) loopingListIterator0);
      String string0 = "P#3V[B9b";
      DefaultEquator<String> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate("M", (Equator<String>) defaultEquator0);
      Equator<Object> equator0 = (Equator<Object>) mock(Equator.class, new ViolatedAssumptionAnswer());
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(defaultEquator0, equator0);
      Predicate<Object> predicate0 = AndPredicate.andPredicate((Predicate<? super Object>) equalPredicate0, (Predicate<? super Object>) equalPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 8);
      String string1 = "&A7{zP\":^\\V@dy&";
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("&A7{zP\":^V@dy&");
      transformerArray0[0] = transformer0;
      Transformer<Object, String> transformer1 = StringValueTransformer.stringValueTransformer();
      transformerArray0[1] = transformer1;
      // Undeclared exception!
      try { 
        SwitchTransformer.switchTransformer((Predicate<? super Object>[]) predicateArray0, (Transformer<? super Object, ? extends String>[]) transformerArray0, (Transformer<? super Object, ? extends String>) transformer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The transformer array must not contain a null transformer, index 2 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.asMultipleUseIterable((Iterator<?>) nodeListIterator0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Closure collection must not be null", "", 2212, (long[]) null, sQLWarning0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      int[] intArray0 = new int[5];
      intArray0[0] = 1231;
      intArray0[1] = 2212;
      intArray0[2] = 100;
      intArray0[3] = 2212;
      intArray0[4] = 2212;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", (String) null, 100, intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      IteratorUtils.toListIterator((Iterator<? extends SQLException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Iterator<Object> iterator0 = null;
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<Object>) null, (Transformer<? super Object, String>) transformer0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[]";
      stringArray0[1] = "[]";
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringArray0, 2789, 1369);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      OrderedIterator<StringTokenizer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) orderedIterator0);
      assertNotNull(enumeration0);
      
      Iterator<StringTokenizer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("eH=", "@h73rz&sxsY.a8/Y)>W", 0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("eH=", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("@h73rz&sxsY.a8/Y)>W", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: eH=", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = (SQLInvalidAuthorizationSpecException)sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("eH=", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("@h73rz&sxsY.a8/Y)>W", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: eH=", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: eH=", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("@h73rz&sxsY.a8/Y)>W", sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("eH=", sQLInvalidAuthorizationSpecException1.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[9];
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<SQLTransientException> class1 = SQLTransientException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      assertFalse(instanceofPredicate1.equals((Object)instanceofPredicate0));
      assertNotNull(instanceofPredicate1);
      
      instanceofPredicateArray0[1] = instanceofPredicate1;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class2);
      assertFalse(instanceofPredicate2.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate2.equals((Object)instanceofPredicate0));
      assertNotNull(instanceofPredicate2);
      
      instanceofPredicateArray0[2] = instanceofPredicate2;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class2);
      assertFalse(instanceofPredicate3.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate3.equals((Object)instanceofPredicate2));
      assertFalse(instanceofPredicate3.equals((Object)instanceofPredicate1));
      assertNotNull(instanceofPredicate3);
      
      instanceofPredicateArray0[3] = instanceofPredicate3;
      Class<Object> class3 = Object.class;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class3);
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate2));
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate4.equals((Object)instanceofPredicate3));
      assertNotNull(instanceofPredicate4);
      
      instanceofPredicateArray0[4] = instanceofPredicate4;
      Class<SQLTimeoutException> class4 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate5 = new InstanceofPredicate(class4);
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate3));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate4));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate5.equals((Object)instanceofPredicate2));
      assertNotNull(instanceofPredicate5);
      
      instanceofPredicateArray0[5] = instanceofPredicate5;
      Class<IIOMetadataNode> class5 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate6 = new InstanceofPredicate(class5);
      assertFalse(instanceofPredicate6.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate6.equals((Object)instanceofPredicate4));
      assertFalse(instanceofPredicate6.equals((Object)instanceofPredicate5));
      assertFalse(instanceofPredicate6.equals((Object)instanceofPredicate2));
      assertFalse(instanceofPredicate6.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate6.equals((Object)instanceofPredicate3));
      assertNotNull(instanceofPredicate6);
      
      instanceofPredicateArray0[6] = instanceofPredicate6;
      Class<Object> class6 = Object.class;
      InstanceofPredicate instanceofPredicate7 = new InstanceofPredicate(class6);
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate2));
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate4));
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate3));
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate1));
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate5));
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate6));
      assertFalse(instanceofPredicate7.equals((Object)instanceofPredicate0));
      assertNotNull(instanceofPredicate7);
      
      instanceofPredicateArray0[7] = instanceofPredicate7;
      Class<SQLException> class7 = SQLException.class;
      InstanceofPredicate instanceofPredicate8 = new InstanceofPredicate(class7);
      assertFalse(instanceofPredicate8.equals((Object)instanceofPredicate3));
      assertFalse(instanceofPredicate8.equals((Object)instanceofPredicate4));
      assertFalse(instanceofPredicate8.equals((Object)instanceofPredicate7));
      assertFalse(instanceofPredicate8.equals((Object)instanceofPredicate5));
      assertFalse(instanceofPredicate8.equals((Object)instanceofPredicate6));
      assertFalse(instanceofPredicate8.equals((Object)instanceofPredicate0));
      assertFalse(instanceofPredicate8.equals((Object)instanceofPredicate2));
      assertFalse(instanceofPredicate8.equals((Object)instanceofPredicate1));
      assertNotNull(instanceofPredicate8);
      
      instanceofPredicateArray0[8] = instanceofPredicate8;
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.arrayIterator(instanceofPredicateArray0, 1, 1);
      assertNotNull(resettableIterator0);
      assertEquals(9, instanceofPredicateArray0.length);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
      assertEquals(0, iteratorArray0.length);
      
      MapIterator<Integer, ArrayDeque<StringTokenizer>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Class<Integer> class0 = Integer.class;
      Integer[] integerArray0 = IteratorUtils.toArray((Iterator<? extends Integer>) mapIterator0, class0);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException> iterator0 = null;
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
      
      MapIterator<SQLTimeoutException, TreeSet<Hashtable>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      MapIterator<SQLIntegrityConstraintViolationException, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      boolean boolean0 = IteratorUtils.isEmpty(mapIterator0);
      assertTrue(boolean0);
      
      MapIterator<SQLTimeoutException, TreeSet<Hashtable>> mapIterator1 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      OrderedIterator<ArrayDeque<SQLNonTransientException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Iterator<ArrayDeque<SQLNonTransientException>> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends ArrayDeque<SQLNonTransientException>>) orderedIterator0);
      assertNotNull(iterator0);
      
      EntrySetMapIterator<SQLWarning, SQLRecoverableException> entrySetMapIterator0 = null;
      try {
        entrySetMapIterator0 = new EntrySetMapIterator<SQLWarning, SQLRecoverableException>((Map<SQLWarning, SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int int0 = 31;
      Integer integer0 = new Integer(31);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(31, (int)integer0);
      assertNotNull(integer0);
      
      int int1 = 1430;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) integer0, 31, 1430);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      assertEquals(0, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      assertEquals(0, stringTokenizer0.countTokens());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertNotNull(singletonListIterator0);
      
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("uhJlY)Z8.~1");
      assertNotNull(transformer0);
      
      String string0 = IteratorUtils.toString((Iterator<StringTokenizer>) singletonListIterator0, (Transformer<? super StringTokenizer, String>) transformer0);
      assertEquals("[uhJlY)Z8.~1]", string0);
      assertEquals(0, stringTokenizer0.countTokens());
      assertTrue(singletonListIterator0.hasPrevious());
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.previousIndex());
      assertEquals(1, singletonListIterator0.nextIndex());
      assertNotNull(string0);
      
      MapIterator<SQLTransactionRollbackException, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(""));
      
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) null, (Collection<? super Integer>) arrayDeque0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      assertNotNull(transformer0);
      
      String string0 = IteratorUtils.toString((Iterator<Object>) null, (Transformer<? super Object, String>) transformer0);
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[1] = "[]";
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientConnectionException0, (-2059));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
      assertEquals(0, iteratorArray0.length);
      
      MapIterator<Integer, ArrayDeque<StringTokenizer>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      SQLDataException sQLDataException0 = new SQLDataException("", "", 24);
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals(24, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getMessage());
      assertNotNull(sQLDataException0);
      
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.singletonIterator(sQLDataException0);
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals(24, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getMessage());
      assertNotNull(resettableIterator0);
      
      FactoryTransformer<SQLException, SQLNonTransientConnectionException> factoryTransformer0 = new FactoryTransformer<SQLException, SQLNonTransientConnectionException>((Factory<? extends SQLNonTransientConnectionException>) null);
      assertNotNull(factoryTransformer0);
      
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) resettableIterator0, (Transformer<? super SQLDataException, ? extends SQLNonTransientConnectionException>) factoryTransformer0);
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals(24, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getMessage());
      assertNotNull(iterator0);
      
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(1, int0);
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals(24, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ResettableIterator<SQLNonTransientException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(0, int0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Transformer must not be null");
      assertEquals("Transformer must not be null", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Transformer must not be null", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLFeatureNotSupportedException0);
      assertEquals("Transformer must not be null", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Transformer must not be null", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Transformer must not be null", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLFeatureNotSupportedException: Transformer must not be null", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[0];
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.arrayIterator(stringTokenizerArray0);
      assertNotNull(resettableIterator0);
      assertEquals(0, stringTokenizerArray0.length);
      
      int int0 = (-286);
      ArrayListIterator<BatchUpdateException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<BatchUpdateException>(resettableIterator0, (-286), (-286));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ResettableIterator<SQLNonTransientException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(0, int0);
      
      Comparator<IIOMetadataNode> comparator0 = (Comparator<IIOMetadataNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 6);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode1);
      
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode((String) null);
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode2);
      
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode3);
      
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode1));
      assertNotNull(iIOMetadataNode4);
      
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      ResettableIterator<IIOMetadataNode> resettableIterator1 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      assertNotNull(resettableIterator1);
      assertEquals(5, iIOMetadataNodeArray0.length);
      
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) resettableIterator1;
      ArrayIterator<IIOMetadataNode> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<IIOMetadataNode>(iIOMetadataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("%Vx", "", mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("%Vx", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: %Vx", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("%Vx", sQLTransactionRollbackException0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("%Vx", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: %Vx", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("%Vx", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: %Vx", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      int int0 = 1593;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0, 1593);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, 1);
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(1, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLRecoverableException0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(1, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals("java.sql.SQLRecoverableException", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLRecoverableException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[8];
      StringTokenizer stringTokenizer0 = new StringTokenizer("0_@y/@fSNPZ-", "0_@y/@fSNPZ-", true);
      assertEquals(12, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("0_@y/@fSNPZ-");
      assertFalse(stringTokenizer1.equals((Object)stringTokenizer0));
      assertEquals(1, stringTokenizer1.countTokens());
      assertNotNull(stringTokenizer1);
      
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("0_@y/@fSNPZ-", "0_@y/@fSNPZ-");
      assertFalse(stringTokenizer2.equals((Object)stringTokenizer1));
      assertFalse(stringTokenizer2.equals((Object)stringTokenizer0));
      assertEquals(0, stringTokenizer2.countTokens());
      assertNotNull(stringTokenizer2);
      
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("R7*io[pGXbUgYeLn(");
      assertFalse(stringTokenizer3.equals((Object)stringTokenizer1));
      assertFalse(stringTokenizer3.equals((Object)stringTokenizer2));
      assertFalse(stringTokenizer3.equals((Object)stringTokenizer0));
      assertEquals(1, stringTokenizer3.countTokens());
      assertNotNull(stringTokenizer3);
      
      stringTokenizerArray0[3] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = new StringTokenizer("0_@y/@fSNPZ-", "0_@y/@fSNPZ-", true);
      assertFalse(stringTokenizer4.equals((Object)stringTokenizer3));
      assertFalse(stringTokenizer4.equals((Object)stringTokenizer1));
      assertFalse(stringTokenizer4.equals((Object)stringTokenizer2));
      assertFalse(stringTokenizer4.equals((Object)stringTokenizer0));
      assertEquals(12, stringTokenizer4.countTokens());
      assertNotNull(stringTokenizer4);
      
      stringTokenizerArray0[4] = stringTokenizer4;
      StringTokenizer stringTokenizer5 = new StringTokenizer("0_@y/@fSNPZ-", "/7W^", true);
      assertFalse(stringTokenizer5.equals((Object)stringTokenizer0));
      assertFalse(stringTokenizer5.equals((Object)stringTokenizer1));
      assertFalse(stringTokenizer5.equals((Object)stringTokenizer2));
      assertFalse(stringTokenizer5.equals((Object)stringTokenizer3));
      assertFalse(stringTokenizer5.equals((Object)stringTokenizer4));
      assertEquals(3, stringTokenizer5.countTokens());
      assertNotNull(stringTokenizer5);
      
      stringTokenizerArray0[5] = stringTokenizer5;
      StringTokenizer stringTokenizer6 = new StringTokenizer(":YJ", "/7W^", false);
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer1));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer2));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer5));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer0));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer4));
      assertFalse(stringTokenizer6.equals((Object)stringTokenizer3));
      assertEquals(1, stringTokenizer6.countTokens());
      assertNotNull(stringTokenizer6);
      
      stringTokenizerArray0[6] = stringTokenizer6;
      StringTokenizer stringTokenizer7 = new StringTokenizer("", "/7W^");
      assertFalse(stringTokenizer7.equals((Object)stringTokenizer5));
      assertFalse(stringTokenizer7.equals((Object)stringTokenizer3));
      assertFalse(stringTokenizer7.equals((Object)stringTokenizer1));
      assertFalse(stringTokenizer7.equals((Object)stringTokenizer2));
      assertFalse(stringTokenizer7.equals((Object)stringTokenizer6));
      assertFalse(stringTokenizer7.equals((Object)stringTokenizer0));
      assertFalse(stringTokenizer7.equals((Object)stringTokenizer4));
      assertEquals(0, stringTokenizer7.countTokens());
      assertNotNull(stringTokenizer7);
      
      stringTokenizerArray0[7] = stringTokenizer7;
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.arrayIterator(stringTokenizerArray0, 1);
      assertNotNull(resettableIterator0);
      assertEquals(8, stringTokenizerArray0.length);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ResettableListIterator<ArrayList<String>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      assertNotNull(constantTransformer0);
      
      Iterator<Integer> iterator0 = IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) constantTransformer0);
      assertNotNull(iterator0);
      
      MapIterator<SQLTransactionRollbackException, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      ArrayIterator<SQLFeatureNotSupportedException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLFeatureNotSupportedException>(integer0, (-343), (-343));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      assertNotNull(zippingIterator0);
      
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) zippingIterator0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      assertEquals("", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      ConstantFactory<SQLRecoverableException> constantFactory0 = new ConstantFactory<SQLRecoverableException>(sQLRecoverableException0);
      assertEquals("", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(constantFactory0);
      
      FactoryTransformer<Object, SQLRecoverableException> factoryTransformer0 = new FactoryTransformer<Object, SQLRecoverableException>(constantFactory0);
      assertEquals("", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(factoryTransformer0);
      
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Transformer<? super SQLClientInfoException, ? extends SQLRecoverableException>) factoryTransformer0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(iterator0);
      
      Iterator<SQLRecoverableException> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(iterator1);
      
      Iterable<SQLException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLException>) iterator1);
      assertFalse(iterator0.equals((Object)iterator1));
      assertFalse(iterator1.equals((Object)iterator0));
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(iterable0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      ListIterator<PriorityQueue<SQLNonTransientConnectionException>> listIterator1 = IteratorUtils.singletonListIterator(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertTrue(listIterator1.hasNext());
      assertFalse(listIterator1.hasPrevious());
      assertNotNull(listIterator1);
      
      ArrayDeque<StringTokenizer>[] arrayDequeArray0 = (ArrayDeque<StringTokenizer>[]) Array.newInstance(ArrayDeque.class, 7);
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<StringTokenizer> arrayDeque1 = new ArrayDeque<StringTokenizer>();
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertNotNull(arrayDeque1);
      
      arrayDequeArray0[1] = arrayDeque1;
      ArrayDeque<StringTokenizer> arrayDeque2 = new ArrayDeque<StringTokenizer>();
      assertFalse(arrayDeque2.equals((Object)arrayDeque0));
      assertFalse(arrayDeque2.equals((Object)arrayDeque1));
      assertTrue(arrayDeque2.isEmpty());
      assertEquals(0, arrayDeque2.size());
      assertNotNull(arrayDeque2);
      
      arrayDequeArray0[2] = arrayDeque2;
      ArrayDeque<StringTokenizer> arrayDeque3 = new ArrayDeque<StringTokenizer>();
      assertFalse(arrayDeque3.equals((Object)arrayDeque0));
      assertFalse(arrayDeque3.equals((Object)arrayDeque1));
      assertFalse(arrayDeque3.equals((Object)arrayDeque2));
      assertEquals(0, arrayDeque3.size());
      assertTrue(arrayDeque3.isEmpty());
      assertNotNull(arrayDeque3);
      
      arrayDequeArray0[3] = arrayDeque3;
      ArrayDeque<StringTokenizer> arrayDeque4 = new ArrayDeque<StringTokenizer>();
      assertFalse(arrayDeque4.equals((Object)arrayDeque1));
      assertFalse(arrayDeque4.equals((Object)arrayDeque3));
      assertFalse(arrayDeque4.equals((Object)arrayDeque0));
      assertFalse(arrayDeque4.equals((Object)arrayDeque2));
      assertEquals(0, arrayDeque4.size());
      assertTrue(arrayDeque4.isEmpty());
      assertNotNull(arrayDeque4);
      
      arrayDequeArray0[4] = arrayDeque4;
      ArrayDeque<StringTokenizer> arrayDeque5 = new ArrayDeque<StringTokenizer>();
      assertFalse(arrayDeque5.equals((Object)arrayDeque0));
      assertFalse(arrayDeque5.equals((Object)arrayDeque2));
      assertFalse(arrayDeque5.equals((Object)arrayDeque1));
      assertFalse(arrayDeque5.equals((Object)arrayDeque3));
      assertFalse(arrayDeque5.equals((Object)arrayDeque4));
      assertTrue(arrayDeque5.isEmpty());
      assertEquals(0, arrayDeque5.size());
      assertNotNull(arrayDeque5);
      
      arrayDequeArray0[5] = arrayDeque5;
      ArrayDeque<StringTokenizer> arrayDeque6 = new ArrayDeque<StringTokenizer>();
      arrayDequeArray0[6] = arrayDeque6;
      ResettableListIterator<ArrayDeque<StringTokenizer>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayDequeArray0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAll((Iterator<ArrayDeque<StringTokenizer>>) resettableListIterator0, (Predicate<? super ArrayDeque<StringTokenizer>>) predicate0);
  }
}
