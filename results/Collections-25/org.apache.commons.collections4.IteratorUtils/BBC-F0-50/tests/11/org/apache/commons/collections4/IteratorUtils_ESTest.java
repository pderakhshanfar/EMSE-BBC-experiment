/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:31:43 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLTransientConnectionException>(orderedMapIterator0);
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLClientInfoException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLClientInfoException>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLInvalidAuthorizationSpecException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLInvalidAuthorizationSpecException>(orderedMapIterator0);
      AbstractMapIteratorDecorator<IIOMetadataNode, SQLInvalidAuthorizationSpecException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, SQLInvalidAuthorizationSpecException>(abstractOrderedMapIteratorDecorator0);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) orderedMapIterator0, (Iterator<? extends IIOMetadataNode>) abstractMapIteratorDecorator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0, 4165, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLTransientConnectionException>(orderedMapIterator0);
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) orderedMapIterator0, (Iterator<? extends SQLClientInfoException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLClientInfoException>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLTransientConnectionException>(orderedMapIterator0);
      MapIterator<SQLClientInfoException, SQLTransientConnectionException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, SQLTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ListIterator<HashMap<SQLFeatureNotSupportedException, Boolean>> listIterator0 = IteratorUtils.singletonListIterator((HashMap<SQLFeatureNotSupportedException, Boolean>) null);
      ListIterator<HashMap<SQLFeatureNotSupportedException, Boolean>> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(listIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<SQLClientInfoException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(listIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 7);
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 1);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, transformerArray0);
      ResettableListIterator<SQLException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      String string0 = IteratorUtils.toString((Iterator<SQLException>) resettableListIterator0, (Transformer<? super SQLException, String>) invokerTransformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Vector<ArrayDeque<SQLInvalidAuthorizationSpecException>> vector0 = new Vector<ArrayDeque<SQLInvalidAuthorizationSpecException>>();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(vector0);
      PredicateTransformer<Integer> predicateTransformer0 = new PredicateTransformer<Integer>(equalPredicate0);
      Integer integer0 = new Integer(579);
      Boolean boolean0 = predicateTransformer0.transform(integer0);
      ResettableIterator<Boolean> resettableIterator0 = IteratorUtils.singletonIterator(boolean0);
      List<Boolean> list0 = IteratorUtils.toList((Iterator<? extends Boolean>) resettableIterator0);
      ResettableIterator<Boolean> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends Boolean>) list0);
      Iterator<Boolean> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Boolean>) resettableIterator1, (Iterator<? extends Boolean>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.iterators.EmptyIterator", sQLTimeoutException0);
      Factory<SQLInvalidAuthorizationSpecException> factory0 = ConstantFactory.constantFactory(sQLInvalidAuthorizationSpecException0);
      Transformer<SQLNonTransientException, SQLInvalidAuthorizationSpecException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLInvalidAuthorizationSpecException>) factory0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) iterator0, class0);
      assertEquals(1, sQLNonTransientExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) sQLNonTransientConnectionException0;
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0, 0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)IteratorUtils.get((Iterator<Object>) objectArrayListIterator0, 0);
      assertNull(sQLNonTransientConnectionException1.getSQLState());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 1);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[0] = iterator0;
      Iterator<Object> iterator1 = IteratorUtils.chainedIterator((Iterator<?>[]) iteratorArray0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Object, SQLInvalidAuthorizationSpecException>[] hashMapArray0 = (HashMap<Object, SQLInvalidAuthorizationSpecException>[]) Array.newInstance(HashMap.class, 6);
      ResettableListIterator<HashMap<Object, SQLInvalidAuthorizationSpecException>> resettableListIterator0 = IteratorUtils.arrayListIterator(hashMapArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[6];
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 4);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Transformer<Object, SQLDataException>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<BatchUpdateException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Transformer<BatchUpdateException, BatchUpdateException> transformer0 = CloneTransformer.cloneTransformer();
      int[] intArray0 = new int[3];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("$nH[", "@Q1CpryYvrC-v", intArray0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer0);
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 2);
      Transformer<Object, String> transformer1 = InvokerTransformer.invokerTransformer("5", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super BatchUpdateException, String>) transformer1, "@Q1CpryYvrC-v", "ir)fAI", "u7]WRp1%Y1t(Sj$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '5' on 'class java.sql.BatchUpdateException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Vector<ArrayDeque<SQLInvalidAuthorizationSpecException>> vector0 = new Vector<ArrayDeque<SQLInvalidAuthorizationSpecException>>();
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque0 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      vector0.add(arrayDeque0);
      ResettableListIterator<ArrayDeque<SQLInvalidAuthorizationSpecException>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<ArrayDeque<SQLInvalidAuthorizationSpecException>>) vector0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<ArrayDeque<SQLInvalidAuthorizationSpecException>>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<BatchUpdateException>) arrayList0);
      arrayList0.add((BatchUpdateException) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLDataException>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("#>I92%RH/fsx(]Mr");
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(transformerPredicate0, transformerPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLNonTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLNonTransientConnectionException>) andPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[9];
      ObjectArrayIterator<SQLWarning> objectArrayIterator0 = new ObjectArrayIterator<SQLWarning>(sQLWarningArray0);
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(transformerPredicate0, transformerPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLWarning>) objectArrayIterator0, (Predicate<? super SQLWarning>) andPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Iterator<SQLWarning>[] iteratorArray0 = (Iterator<SQLWarning>[]) Array.newInstance(Iterator.class, 7);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) null, (Iterator<? extends SQLWarning>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends ClientInfoStatus>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) null, (long) 0, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Iterator<SQLTimeoutException> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) iterator0, (-1355L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 1658, (-784));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(predicateArray0, (-2899));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 100, 1707);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 357);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Stack<BatchUpdateException>[]) null, 44, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[5];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 5, (-619));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ArrayDeque<Closure<Object>>[] arrayDequeArray0 = (ArrayDeque<Closure<Object>>[]) Array.newInstance(ArrayDeque.class, 7);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(arrayDequeArray0, (-1), 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((String[]) null, 3751);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLDataExceptionArray0, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 93, 93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) class0, (-3760));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "ln=3nlQlcA!b", (-4417));
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[LZBT\"f~YVGM", sQLTransientException0);
      Predicate<SQLFeatureNotSupportedException> predicate0 = IdentityPredicate.identityPredicate(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ConstantTransformer<BatchUpdateException, String> constantTransformer0 = new ConstantTransformer<BatchUpdateException, String>("|");
      String string0 = IteratorUtils.toString((Iterator<BatchUpdateException>) null, (Transformer<? super BatchUpdateException, String>) constantTransformer0, "The comparator must not be null", "The map size must be 1", "The map size must be 1");
      assertEquals("The map size must be 1The map size must be 1", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("[$>}g1#W>", "Ltvkd}b3nMkhE", 531);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransactionRollbackException0);
      Transformer<BatchUpdateException, BatchUpdateException> transformer0 = CloneTransformer.cloneTransformer();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super BatchUpdateException, String>) null, "", "[$>}g1#W>", "Ltvkd}b3nMkhE");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Stack<BatchUpdateException>>) null, (Predicate<? super Stack<BatchUpdateException>>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OrderedMapIterator<Closure<Object>, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Closure<Object>>) orderedMapIterator0, (Predicate<? super Closure<Object>>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(".&yDy<&o4uB.h", (Map<String, ClientInfoStatus>) null);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.singletonIterator(sQLClientInfoException0);
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) resettableIterator0, 100);
      assertTrue(list0.contains(sQLClientInfoException0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) listIterator0, 100);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      MapIterator<SQLSyntaxErrorException, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLSyntaxErrorException, SQLDataException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLSyntaxErrorException, SQLDataException>(mapIterator0);
      Class<SQLTransientException>[] classArray0 = (Class<SQLTransientException>[]) Array.newInstance(Class.class, 3);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("Ack~[XwM}9", (Class<?>[]) classArray0, (Object[]) classArray0);
      IfTransformer<SQLNonTransientException, String> ifTransformer0 = new IfTransformer<SQLNonTransientException, String>(predicate0, transformer0, transformer0);
      String string0 = IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) abstractMapIteratorDecorator0, (Transformer<? super SQLSyntaxErrorException, String>) ifTransformer0, "Ack~[XwM}9", "Ack~[XwM}9", "UVX?bmd^ }a-iKw");
      assertEquals("Ack~[XwM}9UVX?bmd^ }a-iKw", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Transformer<Object, BatchUpdateException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer0);
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 3);
      Transformer<Object, String> transformer1 = InvokerTransformer.invokerTransformer("@Q1CpryYvrC-v", (Class<?>[]) classArray0, (Object[]) classArray0);
      String string0 = IteratorUtils.toString(iterator0, (Transformer<? super BatchUpdateException, String>) transformer1, "", "u7]WRp1%Y1t(Sj$", "\":");
      assertEquals("u7]WRp1%Y1t(Sj$null\":", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      int[] intArray0 = new int[9];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, intArray0);
      ClosureTransformer<BatchUpdateException> closureTransformer0 = new ClosureTransformer<BatchUpdateException>(closure0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) closureTransformer0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>((String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super BatchUpdateException, String>) constantTransformer0, "5=>cigH;G0xx", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Transformer<BatchUpdateException, BatchUpdateException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("Xr");
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super BatchUpdateException, String>) constantTransformer0, (String) null, "Xr", "Xr");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator((String) null);
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      OrderedMapIterator<Closure<Object>, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Closure<Object>, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Closure<Object>, Integer>(orderedMapIterator0);
      int int0 = IteratorUtils.size(abstractOrderedMapIteratorDecorator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransactionRollbackException0);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(batchUpdateException0, false);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) singletonIterator0, 531);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 530
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(1572, true, true, (-3590), 8);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, true);
      boolean boolean0 = IteratorUtils.isEmpty(singletonIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      boolean boolean0 = IteratorUtils.isEmpty(listIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      ForClosure<Object> forClosure0 = new ForClosure<Object>(9, closure0);
      SingletonIterator<Closure<Object>> singletonIterator0 = new SingletonIterator<Closure<Object>>(forClosure0, false);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Closure<Object>>) singletonIterator0, (Predicate<? super Closure<Object>>) orPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) hashMap0);
      predicateArray0[0] = predicate0;
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      predicateArray0[1] = (Predicate<Object>) nullIsFalsePredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      SingletonIterator<Closure<Object>> singletonIterator0 = new SingletonIterator<Closure<Object>>(closure0, true);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Closure<Object>>) singletonIterator0, (Predicate<? super Closure<Object>>) nonePredicate0);
      assertFalse(singletonIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Predicate<SQLNonTransientConnectionException> predicate0 = ExceptionPredicate.exceptionPredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ResettableIterator<ClientInfoStatus> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ClientInfoStatus>) resettableIterator0, (Predicate<? super ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      boolean boolean0 = IteratorUtils.contains((Iterator<ArrayDeque<IIOMetadataNode>>) null, (Object) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Iterator<Closure<Object>> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super Closure<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      ObjectArrayIterator<Object> objectArrayIterator0 = new ObjectArrayIterator<Object>(objectArray0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(nullIsExceptionPredicate0);
      IteratorUtils.find((Iterator<Object>) objectArrayIterator0, (Predicate<? super Object>) nullIsFalsePredicate0);
      assertFalse(objectArrayIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<BatchUpdateException>) vector0);
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>(resettableListIterator0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      LoopingListIterator loopingListIterator0 = (LoopingListIterator)IteratorUtils.find((Iterator<Object>) singletonListIterator0, (Predicate<? super Object>) predicate0);
      assertFalse(loopingListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("&K-I{", "XIiKR");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "", 954, sQLNonTransientConnectionException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLFeatureNotSupportedException0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) singletonIterator0, (Iterator<? extends SQLNonTransientException>) singletonIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLNonTransientException>) zippingIterator0, (Predicate<? super SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null, (Equator<Object>) defaultEquator0);
      predicateArray0[3] = predicate0;
      BatchUpdateException batchUpdateException0 = IteratorUtils.find((Iterator<BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) predicateArray0[3]);
      assertNull(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator((String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<String>) resettableIterator0, (Closure<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Transformer<Object, SQLTransientException> transformer0 = InvokerTransformer.invokerTransformer("5XM:p");
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      IteratorUtils.apply((Iterator<TreeSet<EnumSet>>) null, (Closure<? super TreeSet<EnumSet>>) transformerClosure0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("PDG?hn*/g&(cw42=.");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", true);
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLTransactionRollbackException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("1ysE", (Throwable) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLSyntaxErrorException0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0, true);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends StringTokenizer>) null, 21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, String>(orderedMapIterator0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) abstractOrderedMapIteratorDecorator0, class0);
      assertEquals(0, sQLNonTransientExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, String>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) abstractOrderedMapIteratorDecorator0, (Class<SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      OrderedMapIterator<Closure<Object>, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Closure<Object>, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Closure<Object>, Integer>(orderedMapIterator0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) abstractOrderedMapIteratorDecorator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIterator<Integer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Integer>) resettableIterator0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) listIterator0, (Equator<Object>) defaultEquator0);
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<BatchUpdateException>) arrayList0);
      BatchUpdateException batchUpdateException0 = IteratorUtils.find((Iterator<BatchUpdateException>) resettableListIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      assertNull(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[6];
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      Iterable<SQLInvalidAuthorizationSpecException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>();
      PriorityQueue<SQLTransactionRollbackException> priorityQueue0 = new PriorityQueue<SQLTransactionRollbackException>((SortedSet<? extends SQLTransactionRollbackException>) treeSet0);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) priorityQueue0);
      Iterable<SQLTransactionRollbackException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Enumeration<Properties> enumeration0 = (Enumeration<Properties>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
      Enumeration<Properties> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) iterator0);
      Iterator<Properties> iterator1 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration1, (Collection<? super Properties>) linkedList0);
      assertNotSame(iterator1, iterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends EnumSet<Locale.Category>>) null, (Collection<? super EnumSet<Locale.Category>>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(".");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIteratorWrapper<SQLNonTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLNonTransientConnectionException>(resettableIterator0);
      Predicate<SQLNonTransientConnectionException> predicate0 = ExceptionPredicate.exceptionPredicate();
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) listIteratorWrapper0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) listIterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLDataException>) objectArrayListIterator0, (Predicate<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends EnumSet<Locale.Category>>) null, (Predicate<? super EnumSet<Locale.Category>>) predicateArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Transformer<Object, SQLWarning> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLWarning> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTransientConnectionException>) orderedIterator0, (Transformer<? super SQLTransientConnectionException, ? extends SQLWarning>) transformer0);
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      Iterator<SQLIntegrityConstraintViolationException> iterator1 = linkedList0.descendingIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(iterator1, comparator0, comparatorPredicate_Criterion0);
      Iterator<SQLWarning> iterator2 = IteratorUtils.filteredIterator((Iterator<? extends SQLWarning>) iterator0, (Predicate<? super SQLWarning>) comparatorPredicate0);
      assertFalse(iterator2.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTransientConnectionException>) null, (Transformer<? super SQLTransientConnectionException, ? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, (Transformer<? super SQLTransientConnectionException, ? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ResettableListIterator<Integer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) resettableListIterator0);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) list0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      OrderedMapIterator<DataTruncation, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      SkippingIterator<DataTruncation> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<DataTruncation>) orderedMapIterator0, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLWarning>) skippingIterator0, (-1260));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[5];
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[0];
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      BoundedIterator<IIOMetadataNode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) objectArrayListIterator0, (long) 3501, (long) 3501);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) boundedIterator0, (Iterator<? extends IIOMetadataNode>) boundedIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ArrayDeque<IIOMetadataNode> arrayDeque0 = new ArrayDeque<IIOMetadataNode>();
      ResettableIterator<ArrayDeque<IIOMetadataNode>> resettableIterator0 = IteratorUtils.singletonIterator(arrayDeque0);
      Iterator<ArrayDeque<IIOMetadataNode>> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<ArrayDeque<IIOMetadataNode>>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Stack<DataTruncation>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Comparator<SQLTimeoutException> comparator0 = (Comparator<SQLTimeoutException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTimeoutException> iterator0 = EmptyIterator.emptyIterator();
      Iterator<SQLTimeoutException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>) iterator0, (Iterator<? extends SQLTimeoutException>) iterator0);
      Comparator<SQLException> comparator1 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTimeoutException> iterator2 = IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator1, (Iterator<? extends SQLTimeoutException>) iterator0, (Iterator<? extends SQLTimeoutException>) iterator1);
      assertFalse(iterator2.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Class<SQLException>[]) null, 2092, 2092);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[3];
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 0, 3);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) null);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>) null, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Transformer<Object, BatchUpdateException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer0);
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 9);
      Transformer<Object, String> transformer1 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super BatchUpdateException, String>) transformer1, "Xr", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0, 0);
      IteratorUtils.boundedIterator((Iterator<?>) objectArrayListIterator0, (long) 0);
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", 2004);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, (-1), (-1));
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) singletonListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) ")fhN7", 562, (-964));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLException[]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ArrayDeque<IIOMetadataNode> arrayDeque0 = new ArrayDeque<IIOMetadataNode>();
      ResettableIterator<ArrayDeque<IIOMetadataNode>> resettableIterator0 = IteratorUtils.singletonIterator(arrayDeque0);
      boolean boolean0 = IteratorUtils.contains((Iterator<ArrayDeque<IIOMetadataNode>>) resettableIterator0, (Object) ":!jn3^.jWP/`LT");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) hashSet0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ListIterator<Object> listIterator0 = IteratorUtils.singletonListIterator((Object) null);
      Object object0 = IteratorUtils.get((Iterator<Object>) listIterator0, 0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MapIterator<Properties, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<Properties, SQLNonTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Properties, SQLNonTransientConnectionException>(mapIterator0);
      Iterator<Properties> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Properties>) abstractMapIteratorDecorator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 842);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Stack<Boolean>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<ServiceLoader<SQLClientInfoException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }
}
