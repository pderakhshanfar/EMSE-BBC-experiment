/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 11:20:20 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      stack0.add(sQLSyntaxErrorException0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = stack0.elements();
      IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0);
      MapIterator<SQLSyntaxErrorException, Stack<SQLClientInfoException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLSyntaxErrorException, Stack<SQLClientInfoException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("'D>SV4dx`^j", "", 943);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("2GSw]y[QPvi&kQ|^2", "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException();
      DefaultEquator<SQLNonTransientException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate((SQLNonTransientException) sQLIntegrityConstraintViolationException2, (Equator<SQLNonTransientException>) defaultEquator0);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator((Integer) (-1));
      IteratorUtils.unmodifiableIterator((Iterator<Integer>) resettableIterator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) locale_FilteringMode0, 19);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(123, true, true, 123, 123);
      Throwable throwable0 = dataTruncation0.fillInStackTrace();
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>((DataTruncation) throwable0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) singletonListIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLException>) singletonListIterator0, (Iterator<? extends SQLException>) listIterator0);
      ArrayDeque<Properties>[] arrayDequeArray0 = (ArrayDeque<Properties>[]) Array.newInstance(ArrayDeque.class, 1);
      ArrayDeque<Properties> arrayDeque0 = new ArrayDeque<Properties>();
      arrayDequeArray0[0] = arrayDeque0;
      IteratorUtils.arrayListIterator(arrayDequeArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(", ");
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList1 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList2 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList3 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("", sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException1, 288, 1232);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IteratorUtils.singletonListIterator((ServiceLoader<ArrayDeque>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OrderedIterator<LinkedHashSet<SQLSyntaxErrorException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("X47?x7", "y+N");
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Iterator<StringTokenizer> iterator0 = EmptyIterator.emptyIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply(iterator0, (Closure<? super StringTokenizer>) closure0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Hashtable<BatchUpdateException, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<BatchUpdateException, SQLInvalidAuthorizationSpecException>();
      EntrySetMapIterator<BatchUpdateException, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<BatchUpdateException, SQLInvalidAuthorizationSpecException>(hashtable0);
      MapIterator<BatchUpdateException, SQLInvalidAuthorizationSpecException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends BatchUpdateException, ? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) mapIterator0);
      IteratorUtils.isEmpty(mapIterator0);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Properties[]) null, 0, 156);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[4];
      String string0 = "";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("'D>SV4dx`^j", "", 943);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientConnectionException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("2GSw]y[QPvi&kQ|^2", "");
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("", "", 943);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      ConstantTransformer.constantTransformer("'D>SV4dx`^j");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 2);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      classArray0[0] = class0;
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      classArray0[1] = class1;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) sQLIntegrityConstraintViolationException0;
      objectArray0[1] = (Object) "";
      InvokerTransformer<Locale.FilteringMode, Locale.FilteringMode> invokerTransformer0 = new InvokerTransformer<Locale.FilteringMode, Locale.FilteringMode>("1+", classArray0, objectArray0);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.objectGraphIterator(locale_FilteringMode0, (Transformer<? super Locale.FilteringMode, ? extends Locale.FilteringMode>) invokerTransformer0);
      Enumeration<Locale.FilteringMode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) enumeration0, (Collection<? super Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OrderedIterator<LinkedHashSet<SQLSyntaxErrorException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<IIOMetadataNode, BatchUpdateException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedIterator<LinkedHashSet<SQLSyntaxErrorException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<IIOMetadataNode, BatchUpdateException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      SQLException sQLException0 = new SQLException("", "");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, sQLException0);
      SQLException sQLException1 = new SQLException((String) null, "&<ZW?MrnXN", 1, sQLTimeoutException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", (int[]) null, sQLException1);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException();
      BatchUpdateException batchUpdateException2 = new BatchUpdateException((int[]) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("");
      String string0 = IteratorUtils.toString((Iterator<Locale.FilteringMode>) singletonListIterator0, (Transformer<? super Locale.FilteringMode, String>) transformer0, "p|vy':~)0'&j<l:", "", "v1O!vS);p");
      assertEquals("v1O!vS);p", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[");
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) iterator0);
      IteratorUtils.emptyMapIterator();
      InvokerTransformer.invokerTransformer("[");
      Integer integer0 = new Integer(1);
      boolean boolean0 = IteratorUtils.contains((Iterator<BatchUpdateException>) null, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.setAttribute("", "rNaZL3y=4R");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      Integer integer0 = new Integer(1613);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      ListIteratorWrapper<SQLTimeoutException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTimeoutException>(listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[6];
      int[] intArray0 = new int[0];
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null, 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("rNaZL3y=4R", "rNaZL3y=4R", intArray0, sQLTransientException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(sQLTransientException0);
      batchUpdateExceptionArray0[5] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException((String) null, (String) null, 0, intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException((String) null, (String) null, (-1613), intArray0, batchUpdateException2);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("n:", intArray0, batchUpdateException4);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) priorityQueue0);
      IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer(">\"\tau2iu`", (String) null, false);
      int int0 = 1613;
      Integer integer0 = new Integer(1613);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("l%kdg!T>0O.", "OM~2`l!(lwC OAcJ#=");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[4];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("add() not supported for empty Iterator");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("add() not supported for empty Iterator", sQLFeatureNotSupportedException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("add() not supported for empty Iterator", sQLTransactionRollbackException0);
      sQLTransientExceptionArray0[0] = sQLTransientException0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransientConnectionException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransientConnectionException0);
      sQLFeatureNotSupportedException0.getSuppressed();
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTimeoutException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("add() not supported for empty Iterator", "add() not supported for empty Iterator");
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransientConnectionException1;
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      OrderedMapIterator<Properties, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) orderedMapIterator0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertFalse(boolean0);
      
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[7];
      StringTokenizer stringTokenizer0 = new StringTokenizer("add() not supported for empty Iterator", "add() not supported for empty Iterator", false);
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("6", "add() not supported for empty Iterator");
      stringTokenizerArray0[1] = stringTokenizer1;
      stringTokenizerArray0[1] = stringTokenizer0;
      StringTokenizer stringTokenizer2 = new StringTokenizer("add() not supported for empty Iterator");
      stringTokenizerArray0[3] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("6", "6");
      stringTokenizerArray0[4] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = new StringTokenizer("Collection must not be null", "*");
      stringTokenizerArray0[5] = stringTokenizer4;
      StringTokenizer stringTokenizer5 = new StringTokenizer("", (String) null);
      IteratorUtils.arrayListIterator(stringTokenizerArray0);
      ExceptionClosure.exceptionClosure();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      String string0 = IteratorUtils.toString((Iterator<Vector<Integer>>) null);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) iterator0);
      IteratorUtils.emptyMapIterator();
      Iterator<SQLTimeoutException> iterator1 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      Enumeration<SQLSyntaxErrorException> enumeration0 = stack0.elements();
      IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[4];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("add() not supported for empty Iterator");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("add() not supported for empty Iterator", sQLFeatureNotSupportedException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("add() not supported for empty Iterator", sQLTransactionRollbackException0);
      sQLTransientExceptionArray0[0] = sQLTransientException0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransientConnectionException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransientConnectionException0);
      sQLFeatureNotSupportedException0.getSuppressed();
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTimeoutException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("add() not supported for empty Iterator", "add() not supported for empty Iterator");
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransientConnectionException1;
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      OrderedMapIterator<Properties, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) orderedMapIterator0);
      IteratorUtils.isEmpty(resettableIterator0);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[7];
      StringTokenizer stringTokenizer0 = new StringTokenizer("add() not supported for empty Iterator", "add() not supported for empty Iterator", false);
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("6", "add() not supported for empty Iterator");
      stringTokenizerArray0[1] = stringTokenizer1;
      stringTokenizerArray0[1] = stringTokenizer0;
      StringTokenizer stringTokenizer2 = new StringTokenizer("add() not supported for empty Iterator");
      stringTokenizerArray0[3] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("6", "6");
      stringTokenizerArray0[4] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = new StringTokenizer("Collection must not be null", "*");
      stringTokenizerArray0[5] = stringTokenizer4;
      StringTokenizer stringTokenizer5 = new StringTokenizer("", (String) null);
      IteratorUtils.arrayListIterator(stringTokenizerArray0);
      ExceptionClosure.exceptionClosure();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MapIterator<DataTruncation, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<DataTruncation, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, SQLException>(mapIterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Factory<SQLClientInfoException> factory0 = ConstantFactory.constantFactory(sQLClientInfoException0);
      Transformer<Object, SQLClientInfoException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLClientInfoException>) factory0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) abstractMapIteratorDecorator0, (Transformer<? super DataTruncation, ? extends SQLClientInfoException>) transformer0);
      IteratorUtils.size(mapIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 1);
      MapIterator<BatchUpdateException, SQLSyntaxErrorException> mapIterator1 = IteratorUtils.emptyMapIterator();
      IteratorUtils.contains((Iterator<BatchUpdateException>) mapIterator1, (Object) null);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLException>) comparator0, (Iterator<? extends SQLException>) iterator0, (Iterator<? extends SQLException>) abstractMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iterator1, (Predicate<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      String string0 = null;
      Hashtable<SQLIntegrityConstraintViolationException, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<SQLIntegrityConstraintViolationException, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, SQLFeatureNotSupportedException>(hashtable0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLException>) entrySetMapIterator0, (Iterator<? extends SQLException>) entrySetMapIterator0);
      ArrayDeque<Properties> arrayDeque0 = new ArrayDeque<Properties>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((ArrayDeque<Properties>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      Comparator<Locale.FilteringMode> comparator0 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) comparator0, (Iterator<? extends Locale.FilteringMode>) null, (Iterator<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Transformer<SQLFeatureNotSupportedException, SQLFeatureNotSupportedException> transformer0 = InvokerTransformer.invokerTransformer("[");
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) transformer0);
      Iterator<SQLFeatureNotSupportedException> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      ArrayIterator<SQLNonTransientConnectionException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLNonTransientConnectionException>(iterator1, (-1453));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 751;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<BatchUpdateException>) null, 751);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[7];
      DataTruncation dataTruncation0 = new DataTruncation((-466), true, true, 2702, 2702);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(0, false, false, (-466), 2702);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-466), true, true, 2702, (-466));
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation((-2025), false, true, 100, (-2025), dataTruncation2);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(417, true, true, 0, 417);
      dataTruncationArray0[4] = dataTruncation4;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      ArrayListIterator<ArrayDeque<SQLTransientException>> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<ArrayDeque<SQLTransientException>>(dataTruncation2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[6];
      int[] intArray0 = new int[0];
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null, 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("rNaZL3y=4R", "rNaZL3y=4R", intArray0, sQLTransientException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(sQLTransientException0);
      batchUpdateExceptionArray0[5] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException((String) null, (String) null, 0, intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException((String) null, (String) null, (-1613), intArray0, batchUpdateException2);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("n:", intArray0, batchUpdateException4);
      OrderedMapIterator<Integer, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Integer, SQLSyntaxErrorException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, SQLSyntaxErrorException>(orderedMapIterator0);
      OrderedMapIterator<Integer, SQLSyntaxErrorException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends SQLSyntaxErrorException>) abstractOrderedMapIteratorDecorator0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) orderedMapIterator1);
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      IteratorUtils.isEmpty(iterator0);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object[]) batchUpdateExceptionArray0, 0, 128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[6];
      int[] intArray0 = new int[0];
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("rNaZL3y=4R", "rNaZL3y=4R", intArray0, sQLTransientException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(sQLTransientException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException((String) null, (String) null, 0, intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Locale.FilteringMode>) singletonListIterator0, (Transformer<? super Locale.FilteringMode, String>) transformer0, "", ",(AO.", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OrderedMapIterator<String, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toList((Iterator<? extends String>) orderedMapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.setAttribute("", "");
      String string0 = "InstantiateTransformer: Constructor must be public";
      Properties properties0 = new Properties();
      properties0.replace((Object) "InstantiateTransformer: Constructor must be public", (Object) iIOMetadataNode0);
      Properties properties1 = new Properties();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLNonTransientException0);
      BiFunction<Object, Object, SQLNonTransientConnectionException> biFunction0 = (BiFunction<Object, Object, SQLNonTransientConnectionException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(sQLNonTransientConnectionException0).when(biFunction0).apply(any() , any());
      properties1.compute(orderedMapIterator0, biFunction0);
      int int0 = 14;
      Integer integer0 = new Integer(14);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Hashtable<BatchUpdateException, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<BatchUpdateException, SQLInvalidAuthorizationSpecException>();
      EntrySetMapIterator<BatchUpdateException, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<BatchUpdateException, SQLInvalidAuthorizationSpecException>(hashtable0);
      MapIterator<BatchUpdateException, SQLInvalidAuthorizationSpecException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends BatchUpdateException, ? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) mapIterator0);
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLRecoverableException>) linkedList0);
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 4);
      SQLRecoverableException sQLRecoverableException0 = null;
      linkedList0.add((SQLRecoverableException) null);
      iteratorArray0[0] = (Iterator<SQLRecoverableException>) resettableListIterator0;
      iteratorArray0[1] = (Iterator<SQLRecoverableException>) resettableListIterator0;
      // Undeclared exception!
      try { 
        linkedList0.add(1854, (SQLRecoverableException) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1854, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[6];
      int[] intArray0 = new int[0];
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null, 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("rNaZL3y=4R", "rNaZL3y=4R", intArray0, sQLTransientException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(sQLTransientException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException((String) null, (String) null, 0, intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", (String) null, (-1795));
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OrderedIterator<Locale.FilteringMode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Transformer<Locale.FilteringMode, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Locale.FilteringMode>) orderedIterator0, (Transformer<? super Locale.FilteringMode, String>) transformer0, (String) null, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      Enumeration<SQLSyntaxErrorException> enumeration0 = stack0.elements();
      Iterator<SQLException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      MapIterator<DataTruncation, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<DataTruncation, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, SQLException>(mapIterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Factory<SQLClientInfoException> factory0 = ConstantFactory.constantFactory(sQLClientInfoException0);
      Transformer<Object, SQLClientInfoException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLClientInfoException>) factory0);
      IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) mapIterator0, (Transformer<? super DataTruncation, ? extends SQLClientInfoException>) transformer0);
      IteratorUtils.size(abstractMapIteratorDecorator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("EeP;#:F;|^Pwk", "", 0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("Collection must not be null", "EeP;#:F;|^Pwk", sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException();
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException(":\"B]}BwJ[;Tnp", (String) null, sQLTransactionRollbackException1);
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte)24;
      byteArray0[7] = (byte)14;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList1 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList2 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList3 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      LinkedList<SQLInvalidAuthorizationSpecException>[] linkedListArray0 = (LinkedList<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(LinkedList.class, 3);
      linkedListArray0[0] = linkedList1;
      linkedListArray0[1] = linkedList2;
      linkedListArray0[2] = linkedList1;
      ResettableIterator<LinkedList<SQLInvalidAuthorizationSpecException>> resettableIterator0 = IteratorUtils.arrayIterator(linkedListArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((LinkedList<SQLInvalidAuthorizationSpecException>[]) null, 980);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[4];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("add() not supported for empty Iterator");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("add() not supported for empty Iterator", sQLFeatureNotSupportedException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("add() not supported for empty Iterator", sQLTransactionRollbackException0);
      sQLTransientExceptionArray0[0] = sQLTransientException0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransientConnectionException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransientConnectionException0);
      sQLFeatureNotSupportedException0.getSuppressed();
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTimeoutException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("add() not supported for empty Iterator", "add() not supported for empty Iterator");
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransientConnectionException1;
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      OrderedMapIterator<Properties, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) orderedMapIterator0);
      IteratorUtils.isEmpty(resettableIterator0);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[7];
      StringTokenizer stringTokenizer0 = new StringTokenizer("add() not supported for empty Iterator", "add() not supported for empty Iterator", false);
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("6", "add() not supported for empty Iterator");
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("6");
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("6", "");
      stringTokenizerArray0[3] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = new StringTokenizer("j+ f%]|BGp@Ewup>Yy;", "j+ f%]|BGp@Ewup>Yy;");
      stringTokenizerArray0[4] = stringTokenizer4;
      StringTokenizer stringTokenizer5 = new StringTokenizer("Collection must not be null", "*");
      stringTokenizerArray0[5] = stringTokenizer5;
      StringTokenizer stringTokenizer6 = new StringTokenizer("", (String) null);
      stringTokenizerArray0[6] = stringTokenizer6;
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.arrayListIterator(stringTokenizerArray0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<StringTokenizer>) resettableListIterator0, (Closure<? super StringTokenizer>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OrderedMapIterator<Object, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[6];
      int[] intArray0 = new int[0];
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null, 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("rNaZL3y=4R", "rNaZL3y=4R", intArray0, sQLTransientException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(sQLTransientException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException((String) null, (String) null, 0, intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", (String) null, (-1795));
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[0];
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      DefaultEquator<SQLNonTransientException> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<SQLNonTransientException> predicate0 = EqualPredicate.equalPredicate((SQLNonTransientException) sQLIntegrityConstraintViolationException0, (Equator<SQLNonTransientException>) defaultEquator0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      String string0 = IteratorUtils.toString((Iterator<Object>) orderedMapIterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      ExceptionTransformer.exceptionTransformer();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationExceptionArray0[1]);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException0;
      IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      OrderedMapIterator<SQLFeatureNotSupportedException, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException>[] linkedListArray0 = (LinkedList<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(LinkedList.class, 7);
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.emptyIterator();
      OrderedMapIterator<SQLDataException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, DataTruncation>(orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLNonTransientException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLNonTransientException>) abstractOrderedMapIteratorDecorator0);
      SQLDataException sQLDataException0 = new SQLDataException("Predicate must not be null");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("BjG*?K3 #d_dI!Z-2k,", sQLDataException0);
      linkedList0.add(sQLInvalidAuthorizationSpecException0);
      linkedListArray0[0] = linkedList0;
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList1 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      linkedListArray0[1] = linkedList1;
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList2 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      linkedListArray0[2] = linkedList2;
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList3 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      linkedListArray0[3] = linkedList3;
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList4 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      linkedListArray0[4] = linkedList4;
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList5 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      linkedListArray0[5] = linkedList5;
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList6 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      linkedListArray0[6] = linkedList6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(linkedListArray0, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[6];
      int[] intArray0 = new int[0];
      String string0 = null;
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null, 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("rNaZL3y=4R", "rNaZL3y=4R", intArray0, sQLTransientException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(sQLTransientException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      int int0 = 0;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException((String) null, (String) null, 0, intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException((String) null, (String) null, (-1613), intArray0, batchUpdateException2);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      String string1 = "n:";
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("n:", intArray0, batchUpdateException4);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) priorityQueue0);
      IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) iterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 0);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      long long0 = (-22L);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) singletonIterator0, (-22L), (-2331L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[6];
      int[] intArray0 = new int[0];
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null, 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("rNaZL3y=4R", "rNaZL3y=4R", intArray0, sQLTransientException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(sQLTransientException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException((String) null, "", batchUpdateException0);
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("");
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException((String) null, (String) null);
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("", "List must not be null");
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("rNaZL3y=4R", batchUpdateException0);
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException(sQLTransactionRollbackException2);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[3];
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException6;
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException0;
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 3);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[8];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "transformer may not be null");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("~UgPm3bLty6s\"N", "~UgPm3bLty6s\"N", 0, sQLRecoverableException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("", "CIu]wT7*w>2VG", 1685);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("CIu]wT7*w>2VG", "~UgPm3bLty6s\"N", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("transformer may not be null", "Av7rI!V4Dh=B:103Qc", sQLRecoverableException0);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("transformer may not be null", "transformer may not be null", 1685);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException4);
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException("", sQLIntegrityConstraintViolationException2);
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException7 = new SQLIntegrityConstraintViolationException("3|G@kLYG8w@Pi", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[7] = sQLIntegrityConstraintViolationException7;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0;
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) null, (Collection<? super SQLIntegrityConstraintViolationException>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OrderedMapIterator<String, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toList((Iterator<? extends String>) orderedMapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.setAttribute("", "");
      iIOMetadataNode0.setAttribute("InstantiateTransformer: Constructor must be public", "");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Object object0 = null;
      IteratorUtils.contains((Iterator<BatchUpdateException>) resettableIterator0, (Object) null);
      OrderedMapIterator<Class<SQLException>, Stack<DataTruncation>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Class<SQLException>>) orderedMapIterator0, (Predicate<? super Class<SQLException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLTransientConnectionException, SQLWarning> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTransientConnectionException, ? extends SQLWarning>) mapIterator0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransientConnectionException>) mapIterator1);
      IteratorUtils.asIterable((Iterator<? extends SQLTransientConnectionException>) listIterator0);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      SQLDataException sQLDataException0 = new SQLDataException("MJnG1k", "MJnG1k", 161);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLDataException0);
      sQLDataException0.initCause(sQLSyntaxErrorException0);
      vector0.add(sQLDataException0);
      IteratorUtils.singletonIterator(vector0);
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList1 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList2 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList3 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      assertTrue(linkedList3.equals((Object)linkedList0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLTransientConnectionException, SQLWarning> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTransientConnectionException, ? extends SQLWarning>) mapIterator0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransientConnectionException>) mapIterator1);
      IteratorUtils.asIterable((Iterator<? extends SQLTransientConnectionException>) listIterator0);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      SQLDataException sQLDataException0 = new SQLDataException("MJnG1k", "MJnG1k", 161);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLDataException0);
      sQLDataException0.initCause(sQLSyntaxErrorException0);
      vector0.add(sQLDataException0);
      IteratorUtils.singletonIterator(vector0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) nullIsFalsePredicate0);
      predicateArray0[0] = predicate1;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<Object> predicate2 = ComparatorPredicate.comparatorPredicate((Object) iIOMetadataNode0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      predicateArray0[1] = predicate2;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      PredicateTransformer<Properties> predicateTransformer0 = new PredicateTransformer<Properties>(onePredicate0);
      Properties properties0 = new Properties();
      Boolean boolean0 = predicateTransformer0.transform(properties0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) boolean0, 161);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<IIOMetadataNode, SQLTimeoutException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ? extends SQLTimeoutException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) mapIterator0, (Iterator<? extends IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) mapIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.contains((Iterator<BatchUpdateException>) resettableIterator0, (Object) null);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[2];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "S;8Y4Vr2nN-/7_bsN");
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      ResettableIterator<SQLNonTransientException> resettableIterator1 = IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientException>) resettableIterator1, (Transformer<? super SQLNonTransientException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Properties>) null, (Transformer<? super Properties, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MapIterator<DataTruncation, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<DataTruncation, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, SQLException>(mapIterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Factory<SQLClientInfoException> factory0 = ConstantFactory.constantFactory(sQLClientInfoException0);
      Transformer<Object, SQLClientInfoException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLClientInfoException>) factory0);
      IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) abstractMapIteratorDecorator0, (Transformer<? super DataTruncation, ? extends SQLClientInfoException>) transformer0);
      IteratorUtils.size(mapIterator0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[9];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 1);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("org.apache.commons.collections4.iterators.ObjectArrayListIterator", "", sQLClientInfoException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("a'80Z@$b{0gQN9P+", "org.apache.commons.collections4.iterators.ObjectArrayListIterator", sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("");
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("", "a'80Z@$b{0gQN9P+");
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException("org.apache.commons.collections4.iterators.ObjectArrayListIterator", "");
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      SQLTransactionRollbackException sQLTransactionRollbackException7 = new SQLTransactionRollbackException("x", sQLTransactionRollbackException3);
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException7;
      SQLTransactionRollbackException sQLTransactionRollbackException8 = new SQLTransactionRollbackException(sQLTransactionRollbackException7);
      sQLTransactionRollbackExceptionArray0[8] = sQLTransactionRollbackException8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[6];
      String string0 = "9~a!OU";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("9~a!OU");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("KqO");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("9~a!OU");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      try { 
        iIOMetadataNode0.compareDocumentPosition(iIOMetadataNode2);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Method not supported
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      SQLException sQLException0 = new SQLException(sQLTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "n`!q\\Th;Hb[";
      StringTokenizer stringTokenizer0 = new StringTokenizer("n`!qTh;Hb[");
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) stringTokenizer0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[4];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("'D>SV4dx`^j", "", 943);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientConnectionException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("2GSw]y[QPvi&kQ|^2", "");
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("", "", 943);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      DefaultEquator<SQLNonTransientException> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<SQLNonTransientException> predicate0 = EqualPredicate.equalPredicate((SQLNonTransientException) sQLIntegrityConstraintViolationException2, (Equator<SQLNonTransientException>) defaultEquator0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.contains((Iterator<BatchUpdateException>) resettableIterator0, (Object) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.iterators.SkippingIterator");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("PX6Jp.Um'&W-h.S", "PX6Jp.Um'&W-h.S", 100, sQLNonTransientConnectionException0);
      Predicate<SQLNonTransientException> predicate0 = EqualPredicate.equalPredicate((SQLNonTransientException) sQLSyntaxErrorException0, (Equator<SQLNonTransientException>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-3719), (-3719));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[3];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(">6ba3n@Ybe3,/ P5");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(">6ba3n@Ybe3,/ P5", "");
      sQLSyntaxErrorException0.getSuppressed();
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("", "", 1046, sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      IteratorUtils.getIterator(sQLDataException0);
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(1046);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1087);
      integerArray0[2] = integer2;
      int int0 = (-1);
      Integer integer3 = new Integer((-1));
      integerArray0[3] = integer3;
      IteratorUtils.arrayListIterator(integerArray0, 0);
      Predicate<Integer>[] predicateArray0 = (Predicate<Integer>[]) Array.newInstance(Predicate.class, 5);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Predicate<Integer> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Integer>>) priorityQueue0);
      predicateArray0[0] = predicate0;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Integer> comparatorPredicate0 = new ComparatorPredicate<Integer>(integer2, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[1] = (Predicate<Integer>) comparatorPredicate0;
      Predicate<Integer> predicate1 = AndPredicate.andPredicate((Predicate<? super Integer>) predicateArray0[1], (Predicate<? super Integer>) predicate0);
      predicateArray0[2] = predicate1;
      Predicate<Integer> predicate2 = FalsePredicate.falsePredicate();
      predicateArray0[3] = predicate2;
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Integer> predicate3 = EqualPredicate.equalPredicate((Integer) int0, (Equator<Integer>) defaultEquator0);
      predicateArray0[4] = predicate3;
      Transformer<Integer, String>[] transformerArray0 = (Transformer<Integer, String>[]) Array.newInstance(Transformer.class, 7);
      Transformer<Integer, String> transformer0 = InvokerTransformer.invokerTransformer("<^,{BZ4Gc*z-Vu50_\"!");
      IfTransformer<Integer, String> ifTransformer0 = new IfTransformer<Integer, String>(predicate0, transformer0, transformer0);
      transformerArray0[0] = (Transformer<Integer, String>) ifTransformer0;
      Hashtable<InstanceofPredicate, Transformer<Object, String>> hashtable0 = new Hashtable<InstanceofPredicate, Transformer<Object, String>>();
      Transformer<Integer, String> transformer1 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Integer>, ? extends Transformer<? super Integer, ? extends String>>) hashtable0);
      transformerArray0[1] = transformer1;
      String string0 = "H@\";%d6xp,MLa";
      Transformer<Integer, String> transformer2 = ConstantTransformer.constantTransformer("H@\";%d6xp,MLa");
      transformerArray0[2] = transformer2;
      Transformer<Integer, String> transformer3 = ExceptionTransformer.exceptionTransformer();
      transformerArray0[3] = transformer3;
      Class<String> class0 = String.class;
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 2);
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      classArray0[0] = class1;
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      classArray0[1] = class2;
      // Undeclared exception!
      try { 
        InstantiateFactory.instantiateFactory(class0, (Class<?>[]) classArray0, (Object[]) classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InstantiateFactory: The constructor must exist and be public 
         //
         verifyException("org.apache.commons.collections4.functors.InstantiateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      int int0 = 128;
      // Undeclared exception!
      try { 
        properties0.replace((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      OrderedIterator<Locale.FilteringMode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.getIterator(orderedIterator0);
      DataTruncation dataTruncation0 = new DataTruncation((-466), true, true, (-466), 1);
      DataTruncation dataTruncation1 = new DataTruncation((-1), true, true, 10, (-1));
      DataTruncation dataTruncation2 = new DataTruncation((-1432), true, false, 10, (-1432));
      DataTruncation dataTruncation3 = new DataTruncation(0, true, true, 2173, 100, dataTruncation1);
      DataTruncation dataTruncation4 = new DataTruncation(0, false, false, (-1432), 100);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      ArrayListIterator<ArrayDeque<SQLTransientException>> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<ArrayDeque<SQLTransientException>>(dataTruncation1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      int int0 = 128;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.setAttribute("DHBEx'D`Z+H11x", "");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(4112);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) integer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      int int0 = (-1821);
      sQLTimeoutException0.getSuppressed();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, (-1821), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      BoundedIterator<IIOMetadataNode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) listIterator0, 0L);
      int int0 = 2702;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<IIOMetadataNode>) boundedIterator0, 2702);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2702
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLDataException>) resettableListIterator0);
      IteratorUtils.skippingIterator((Iterator<SQLDataException>) listIterator0, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) listIterator0, (-3131), (-3131));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      OrderedIterator<Locale.FilteringMode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Transformer<Locale.FilteringMode, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Locale.FilteringMode>) orderedIterator0, (Transformer<? super Locale.FilteringMode, String>) transformer0, "", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 123;
      DataTruncation dataTruncation0 = new DataTruncation(123, true, true, 123, 123);
      dataTruncation0.fillInStackTrace();
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      ListIterator<DataTruncation> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) listIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLException>) listIterator0, (Iterator<? extends SQLException>) listIterator1);
      ArrayDeque<Properties>[] arrayDequeArray0 = (ArrayDeque<Properties>[]) Array.newInstance(ArrayDeque.class, 1);
      ArrayDeque<Properties> arrayDeque0 = new ArrayDeque<Properties>();
      arrayDequeArray0[0] = arrayDeque0;
      IteratorUtils.arrayListIterator(arrayDequeArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(", ");
      int int1 = (-1563);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLIntegrityConstraintViolationException0, 123, (-1563));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null);
      sQLTimeoutException0.getSuppressed();
      sQLTimeoutException0.printStackTrace();
      IteratorUtils.singletonListIterator(sQLTimeoutException0);
      IteratorUtils.emptyOrderedIterator();
      int int0 = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, 0, (long[]) null, sQLTimeoutException0);
      batchUpdateException0.getNextException();
      ArrayIterator<DataTruncation> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<DataTruncation>((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>();
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, (-440), 0, sQLWarning0);
      linkedHashSet0.add(dataTruncation0);
      linkedHashSet0.add((DataTruncation) null);
      ResettableIterator<LinkedHashSet<DataTruncation>> resettableIterator0 = IteratorUtils.singletonIterator(linkedHashSet0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      String string0 = "The map size must be 1";
      IteratorUtils.singletonIterator("The map size must be 1");
      OrderedMapIterator<Integer, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Integer, BatchUpdateException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends BatchUpdateException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<Integer, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, BatchUpdateException>(orderedMapIterator1);
      // Undeclared exception!
      try { 
        abstractOrderedMapIteratorDecorator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      OrderedMapIterator<SQLTransientException, Locale.FilteringMode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLTransientException, Locale.FilteringMode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransientException, Locale.FilteringMode>(orderedMapIterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        abstractMapIteratorDecorator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[5];
      int[] intArray0 = new int[9];
      intArray0[0] = 100;
      intArray0[1] = 100;
      intArray0[2] = (-1);
      intArray0[3] = 100;
      intArray0[4] = 100;
      intArray0[5] = 0;
      intArray0[6] = 100;
      intArray0[7] = 0;
      intArray0[8] = 100;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", intArray0);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 100, 0, batchUpdateException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(0, true, true, 100, 105, dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(14, true, true, 14, 688);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(100, true, true, 100, (-1), dataTruncation2);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(100, true, true, 495, (-1695));
      dataTruncationArray0[4] = dataTruncation4;
      IteratorUtils.arrayIterator(dataTruncationArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, (-96), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Comparator<SQLClientInfoException> comparator0 = (Comparator<SQLClientInfoException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 1);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>((SQLClientInfoException) null);
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) singletonIterator0;
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) iterator0);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLWarningArray0, (-283), 3301);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[6];
      int[] intArray0 = new int[0];
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null, 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("rNaZL3y=4R", "rNaZL3y=4R", intArray0, sQLTransientException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(sQLTransientException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException((String) null, (String) null, 0, intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException((String) null, (String) null, (-1613), intArray0, batchUpdateException2);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("n:", intArray0, batchUpdateException4);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) priorityQueue0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) iterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      DataTruncation dataTruncation0 = new DataTruncation(1, true, true, (-576), (-2380));
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1, true, true, (-2380), 1);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(0, true, true, 10, 2923);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(1422, true, false, (-412), (-2380), dataTruncation2);
      dataTruncationArray0[3] = dataTruncation3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(dataTruncationArray0, (-2380));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }
}
