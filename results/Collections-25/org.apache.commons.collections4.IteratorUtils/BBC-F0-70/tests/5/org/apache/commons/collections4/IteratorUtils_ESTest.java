/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 02:00:00 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>((Predicate<? super Object>) null, closure0, closure0);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>((Predicate<? super Object>) null, ifClosure0, true);
      ResettableIterator<ArrayDeque<SQLTransientException>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.apply((Iterator<ArrayDeque<SQLTransientException>>) resettableIterator0, (Closure<? super ArrayDeque<SQLTransientException>>) ifClosure0);
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<IIOMetadataNode>) resettableListIterator0, (-3972));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -3972
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayDeque<SQLTransientException> arrayDeque0 = new ArrayDeque<SQLTransientException>();
      SingletonListIterator<ArrayDeque<SQLTransientException>> singletonListIterator0 = new SingletonListIterator<ArrayDeque<SQLTransientException>>(arrayDeque0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>((Predicate<? super Object>) null, closure0, closure0);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>((Predicate<? super Object>) null, ifClosure0, true);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<ArrayDeque<SQLTransientException>>) singletonListIterator0, (Closure<? super ArrayDeque<SQLTransientException>>) whileClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("8|H1&b)", "8|H1&b)");
      sQLTransientConnectionException0.getLocalizedMessage();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Stack<InstanceofPredicate> stack1 = new Stack<InstanceofPredicate>();
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) stack1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>("8|H1&b)", (Comparator<Object>) null, comparatorPredicate_Criterion0);
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(comparatorPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Predicate<Object>>) singletonIterator0, (Predicate<? super Predicate<Object>>) comparatorPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ComparatorPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<InstanceofPredicate> comparator0 = (Comparator<InstanceofPredicate>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      ConstantFactory<SQLTransientConnectionException> constantFactory0 = new ConstantFactory<SQLTransientConnectionException>(sQLTransientConnectionException0);
      FactoryTransformer<Object, SQLTransientConnectionException> factoryTransformer0 = new FactoryTransformer<Object, SQLTransientConnectionException>(constantFactory0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) null, (Transformer<? super BatchUpdateException, ? extends SQLTransientConnectionException>) factoryTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[4];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0, 0);
      ListIterator<Properties> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) objectArrayListIterator0);
      objectArrayListIterator0.reset();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.get((Iterator<Properties>) listIterator0, 0);
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyMapIterator();
      IteratorUtils.arrayListIterator((Object[]) propertiesArray0, 0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "", 0);
      SingletonIterator<SQLNonTransientException> singletonIterator0 = new SingletonIterator<SQLNonTransientException>(sQLNonTransientException0);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientException>) singletonIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0, "", "u1`", "u1`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparator<InstanceofPredicate> comparator0 = (Comparator<InstanceofPredicate>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) comparator0, (Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
      Iterator<InstanceofPredicate> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends InstanceofPredicate>) iterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Uol^v3zO");
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLFeatureNotSupportedException0, comparator1);
      IteratorUtils.filteredIterator((Iterator<? extends Predicate<Object>>) iterator1, (Predicate<? super Predicate<Object>>) predicate0);
      Transformer<SQLInvalidAuthorizationSpecException, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) null, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) transformer0, "", "", "");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      ObjectArrayIterator<SQLInvalidAuthorizationSpecException> objectArrayIterator0 = new ObjectArrayIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      Comparator<InstanceofPredicate> comparator0 = (Comparator<InstanceofPredicate>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) comparator0, (Iterator<? extends InstanceofPredicate>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(stack0);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) reverseListIterator0);
      IteratorUtils.loopingListIterator(list0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("Closure must not be null");
      IteratorUtils.nodeListIterator(nodeList0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Predicate<Object> predicate2 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate1);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate2, predicate1);
      IteratorUtils.find((Iterator<SQLRecoverableException>) null, (Predicate<? super SQLRecoverableException>) orPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      ConstantFactory<SQLTransientConnectionException> constantFactory0 = new ConstantFactory<SQLTransientConnectionException>(sQLTransientConnectionException0);
      FactoryTransformer<Object, SQLTransientConnectionException> factoryTransformer0 = new FactoryTransformer<Object, SQLTransientConnectionException>(constantFactory0);
      IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) orderedIterator0, (Transformer<? super BatchUpdateException, ? extends SQLTransientConnectionException>) factoryTransformer0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 9);
      Integer[] integerArray0 = new Integer[2];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      int int1 = (-1912);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, (-1912), 1538);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<InstanceofPredicate> comparator0 = (Comparator<InstanceofPredicate>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) comparator0, (Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
      Iterator<InstanceofPredicate> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends InstanceofPredicate>) iterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Uol^v3zO");
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLFeatureNotSupportedException0, comparator1);
      Iterator<Predicate<Object>> iterator2 = IteratorUtils.filteredIterator((Iterator<? extends Predicate<Object>>) iterator1, (Predicate<? super Predicate<Object>>) predicate0);
      boolean boolean0 = IteratorUtils.matchesAny(iterator2, (Predicate<? super Predicate<Object>>) predicate0);
      assertFalse(boolean0);
      
      IteratorUtils.zippingIterator((Iterator<?>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("8|H1&b)", "8|H1&b)");
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLTransientConnectionException0, (Equator<Object>) null);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      EqualPredicate.equalPredicate((Object) instanceofPredicate0, (Equator<Object>) null);
      OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      Predicate<Object> predicate1 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      NullIsFalsePredicate<SQLException> nullIsFalsePredicate0 = new NullIsFalsePredicate<SQLException>(predicateArray0[1]);
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>(" 2o+W awXk}*7+");
      IfTransformer<SQLInvalidAuthorizationSpecException, String> ifTransformer0 = new IfTransformer<SQLInvalidAuthorizationSpecException, String>(predicate1, constantTransformer0, constantTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) null, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) null, "v-/0+5u]pbb:B%O\"M", "]", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, Integer>(orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, Integer> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, Integer>(orderedMapIterator0);
      ArrayList<ClientInfoStatus> arrayList0 = new ArrayList<ClientInfoStatus>();
      ReverseListIterator<ClientInfoStatus> reverseListIterator0 = new ReverseListIterator<ClientInfoStatus>(arrayList0);
      OrderedMapIterator<IIOMetadataNode, Predicate<Object>> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) orderedMapIterator1);
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Iterator<? extends IIOMetadataNode>) orderedMapIterator1);
      OrPredicate<IIOMetadataNode> orPredicate0 = new OrPredicate<IIOMetadataNode>((Predicate<? super IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) null);
      IteratorUtils.find(iterator1, (Predicate<? super IIOMetadataNode>) orPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 56, 56);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[6];
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException0;
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      SingletonListIterator<ClientInfoStatus> singletonListIterator0 = new SingletonListIterator<ClientInfoStatus>(clientInfoStatus0);
      List<ClientInfoStatus> list0 = IteratorUtils.toList((Iterator<? extends ClientInfoStatus>) singletonListIterator0, 2755);
      ReverseListIterator<ClientInfoStatus> reverseListIterator0 = new ReverseListIterator<ClientInfoStatus>(list0);
      IteratorUtils.toList((Iterator<? extends ClientInfoStatus>) reverseListIterator0, 2755);
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      LoopingIterator<SQLRecoverableException> loopingIterator0 = new LoopingIterator<SQLRecoverableException>(stack0);
      Enumeration<SQLRecoverableException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) loopingIterator0);
      List<Object> list1 = new Stack<Object>();
      IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) list1);
      MapIterator<Integer, Boolean> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<Integer> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration1, (Collection<? super Integer>) list1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((TreeSet<SQLException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparator<InstanceofPredicate> comparator0 = (Comparator<InstanceofPredicate>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) comparator0, (Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
      Iterator<InstanceofPredicate> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends InstanceofPredicate>) iterator0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      Iterator<SQLSyntaxErrorException> iterator2 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0);
      IteratorUtils.asIterable((Iterator<? extends SQLSyntaxErrorException>) iterator2);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) listIterator0, class0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate((Object) listIterator0, comparator1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", (String) null, 23);
      IteratorUtils.getIterator(iterator1);
      Transformer<Object, Closure<Object>> transformer0 = ConstantTransformer.constantTransformer((Closure<Object>) null);
      IteratorUtils.objectGraphIterator((Closure<Object>) null, (Transformer<? super Closure<Object>, ? extends Closure<Object>>) transformer0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      ObjectArrayIterator<SQLInvalidAuthorizationSpecException> objectArrayIterator0 = new ObjectArrayIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null, (Equator<Object>) null);
      predicateArray0[0] = predicate0;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) locale_Category0, (Equator<Object>) null);
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate1);
      predicateArray0[2] = predicate2;
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate3 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      predicateArray0[3] = predicate3;
      Predicate<Object> predicate4 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      NullIsFalsePredicate<SQLException> nullIsFalsePredicate0 = new NullIsFalsePredicate<SQLException>(predicate4);
      IfTransformer<SQLInvalidAuthorizationSpecException, String> ifTransformer0 = new IfTransformer<SQLInvalidAuthorizationSpecException, String>(nullIsFalsePredicate0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends String>) null, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends String>) null);
      String string0 = IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) objectArrayIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) ifTransformer0, "org.apache.commons.collections4.map.AbstractReferenceMap", "org.apache.commons.collections4.map.AbstractReferenceMap", "org.apache.commons.collections4.map.AbstractReferenceMap");
      assertEquals("org.apache.commons.collections4.map.AbstractReferenceMaporg.apache.commons.collections4.map.AbstractReferenceMap", string0);
      
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) objectArrayIterator0, (Iterator<? extends SQLNonTransientException>) objectArrayIterator0, (Iterator<? extends SQLNonTransientException>) objectArrayIterator0);
      LoopingListIterator<Predicate<Object>> loopingListIterator0 = new LoopingListIterator<Predicate<Object>>(linkedList0);
      IteratorUtils.matchesAny((Iterator<Predicate<Object>>) loopingListIterator0, (Predicate<? super Predicate<Object>>) predicate2);
      IteratorUtils.isEmpty(loopingListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "org.apache.commons.collections4.map.AbstractReferenceMap", (-2088), (-2088));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("8|H1&b)", "8|H1&b)");
      sQLTransientConnectionException0.getLocalizedMessage();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[0];
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Vector<InstanceofPredicate> vector0 = new Stack<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) vector0);
      IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      Class<String> class0 = String.class;
      IteratorUtils.singletonListIterator(class0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      IteratorUtils.loopingListIterator((List<String>) stack0);
      OrderedMapIterator<TreeSet<IIOMetadataNode>, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<TreeSet<IIOMetadataNode>, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<TreeSet<IIOMetadataNode>, BatchUpdateException>(orderedMapIterator0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "O";
      stringArray0[1] = null;
      IteratorUtils.arrayListIterator(stringArray0);
      IteratorUtils.loopingListIterator((List<String>) stack0);
      OrderedMapIterator<TreeSet<IIOMetadataNode>, BatchUpdateException> orderedMapIterator1 = new AbstractOrderedMapIteratorDecorator<TreeSet<IIOMetadataNode>, BatchUpdateException>(abstractOrderedMapIteratorDecorator0);
      AbstractOrderedMapIteratorDecorator<TreeSet<IIOMetadataNode>, BatchUpdateException> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<TreeSet<IIOMetadataNode>, BatchUpdateException>(orderedMapIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null);
      Stack<Properties> stack1 = new Stack<Properties>();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Properties>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comparator<InstanceofPredicate> comparator0 = (Comparator<InstanceofPredicate>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) comparator0, (Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
      Iterator<InstanceofPredicate> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends InstanceofPredicate>) iterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Uol^v3zO");
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLFeatureNotSupportedException0, comparator1);
      IteratorUtils.filteredIterator((Iterator<? extends Predicate<Object>>) iterator1, (Predicate<? super Predicate<Object>>) predicate0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.range(clientInfoStatus0, clientInfoStatus0);
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends ClientInfoStatus>) enumSet0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends ClientInfoStatus>) resettableIterator0, 10);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Comparator<InstanceofPredicate> comparator0 = (Comparator<InstanceofPredicate>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 1);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Transformer<Object, InstanceofPredicate>[] transformerArray0 = (Transformer<Object, InstanceofPredicate>[]) Array.newInstance(Transformer.class, 5);
      Transformer<Object, InstanceofPredicate> transformer0 = ConstantTransformer.constantTransformer(instanceofPredicate0);
      transformerArray0[0] = transformer0;
      Transformer<Object, InstanceofPredicate> transformer1 = ExceptionTransformer.exceptionTransformer();
      transformerArray0[1] = transformer1;
      String string0 = "DH(fX@.";
      Transformer<Object, InstanceofPredicate> transformer2 = InvokerTransformer.invokerTransformer("DH(fX@.");
      transformerArray0[2] = transformer2;
      Transformer<Object, InstanceofPredicate> transformer3 = ExceptionTransformer.exceptionTransformer();
      transformerArray0[3] = transformer3;
      Transformer<Object, InstanceofPredicate> transformer4 = IfTransformer.ifTransformer((Predicate<? super Object>) instanceofPredicate0, (Transformer<? super Object, ? extends InstanceofPredicate>) transformer0, (Transformer<? super Object, ? extends InstanceofPredicate>) transformer2);
      transformerArray0[4] = transformer4;
      ChainedTransformer<InstanceofPredicate> chainedTransformer0 = new ChainedTransformer<InstanceofPredicate>(transformerArray0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.objectGraphIterator(instanceofPredicate0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) chainedTransformer0);
      iteratorArray0[0] = iterator0;
      IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) comparator0, (Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(")");
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(instanceofPredicate0);
      IteratorUtils.matchesAny((Iterator<Predicate<Object>>) singletonIterator0, (Predicate<? super Predicate<Object>>) uniquePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) stack0);
      OrderedMapIterator<TreeSet<IIOMetadataNode>, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<TreeSet<IIOMetadataNode>, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<TreeSet<IIOMetadataNode>, BatchUpdateException>(orderedMapIterator0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "O";
      stringArray0[1] = null;
      stringArray0[2] = null;
      IteratorUtils.arrayListIterator(stringArray0);
      IteratorUtils.skippingIterator((Iterator<String>) resettableListIterator0, 0L);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) listIterator0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0);
      IteratorUtils.asIterable((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) iterator0, class0);
      Vector<PriorityQueue<SQLNonTransientException>> vector0 = new Vector<PriorityQueue<SQLNonTransientException>>();
      PriorityQueue<SQLNonTransientException> priorityQueue0 = new PriorityQueue<SQLNonTransientException>();
      vector0.add(priorityQueue0);
      ResettableListIterator<PriorityQueue<SQLNonTransientException>> resettableListIterator1 = IteratorUtils.loopingListIterator((List<PriorityQueue<SQLNonTransientException>>) vector0);
      IteratorUtils.unmodifiableListIterator((ListIterator<PriorityQueue<SQLNonTransientException>>) resettableListIterator1);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.matchesAny((Iterator<Predicate<Object>>) null, (Predicate<? super Predicate<Object>>) instanceofPredicate0);
      ArrayListIterator<Integer> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<Integer>((Object) null, 100, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[4];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      String string0 = null;
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) resettableListIterator0);
      IteratorUtils.loopingListIterator(list0);
      AbstractOrderedMapIteratorDecorator<TreeSet<IIOMetadataNode>, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = null;
      try {
        abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<TreeSet<IIOMetadataNode>, BatchUpdateException>((OrderedMapIterator<TreeSet<IIOMetadataNode>, BatchUpdateException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OrderedMapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[4];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0, 0);
      IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) objectArrayListIterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      objectArrayListIterator0.forEachRemaining(consumer0);
      objectArrayListIterator0.reset();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate((Object) properties2, comparator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Predicate<Object>>) null, (Predicate<? super Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      int int0 = 0;
      Properties[] propertiesArray0 = new Properties[7];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      propertiesArray0[4] = properties2;
      Properties properties4 = new Properties();
      propertiesArray0[5] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[6] = properties5;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0, 0);
      ListIterator<Properties> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) objectArrayListIterator0);
      objectArrayListIterator0.reset();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[\"~r@#1nOUFIf");
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Properties>) listIterator0, 2012);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2005
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, Integer>(orderedMapIterator0);
      Comparator<InstanceofPredicate> comparator0 = (Comparator<InstanceofPredicate>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) comparator0, (Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(uniquePredicate0);
      IteratorUtils.matchesAny((Iterator<Predicate<Object>>) singletonIterator0, (Predicate<? super Predicate<Object>>) uniquePredicate0);
      IteratorUtils.toArray(iterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, 417);
      IteratorUtils.getIterator(uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      ObjectArrayIterator<SQLInvalidAuthorizationSpecException> objectArrayIterator0 = new ObjectArrayIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null, (Equator<Object>) null);
      predicateArray0[0] = predicate0;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) locale_Category0, (Equator<Object>) null);
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate1);
      predicateArray0[2] = predicate2;
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate3 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      predicateArray0[3] = predicate3;
      Predicate<Object> predicate4 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      NullIsFalsePredicate<SQLException> nullIsFalsePredicate0 = new NullIsFalsePredicate<SQLException>(predicate4);
      IfTransformer<SQLInvalidAuthorizationSpecException, String> ifTransformer0 = new IfTransformer<SQLInvalidAuthorizationSpecException, String>(nullIsFalsePredicate0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends String>) null, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends String>) null);
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) objectArrayIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) ifTransformer0, "org.apache.comons.collections4.map.AbstractReferenceMap", "org.apache.comons.collections4.map.AbstractReferenceMap", "org.apache.comons.collections4.map.AbstractReferenceMap");
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) objectArrayIterator0, (Iterator<? extends SQLNonTransientException>) objectArrayIterator0, (Iterator<? extends SQLNonTransientException>) objectArrayIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.map.AbstractHashedMap$HashEntry", "");
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) zippingIterator0);
      IteratorUtils.getIterator(predicate0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) linkedList0);
      IteratorUtils.contains((Iterator<Integer>) resettableIterator0, (Object) resettableIterator0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ResettableListIterator<ServiceLoader<Integer>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asIterable((Iterator<?>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLRecoverableException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comparator<InstanceofPredicate> comparator0 = (Comparator<InstanceofPredicate>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) comparator0, (Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
      IteratorUtils.peekingIterator((Iterator<? extends InstanceofPredicate>) iterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Uol^v3zO");
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      Iterator<Predicate<Object>> iterator1 = new SingletonIterator<Predicate<Object>>(predicate0);
      IteratorUtils.matchesAny(iterator1, (Predicate<? super Predicate<Object>>) predicate0);
      IteratorUtils.toArray(iterator1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("R=G*IO{N.n*R!`6v", "R=G*IO{N.n*R!`6v", 56);
      IteratorUtils.getIterator(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      IteratorUtils.loopingListIterator((List<String>) stack0);
      OrderedMapIterator<TreeSet<IIOMetadataNode>, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<TreeSet<IIOMetadataNode>, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<TreeSet<IIOMetadataNode>, BatchUpdateException>(orderedMapIterator0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "O";
      stringArray0[1] = null;
      stringArray0[2] = null;
      IteratorUtils.arrayListIterator(stringArray0);
      IteratorUtils.loopingListIterator((List<String>) stack0);
      OrderedMapIterator<TreeSet<IIOMetadataNode>, BatchUpdateException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<TreeSet<IIOMetadataNode>, BatchUpdateException> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<TreeSet<IIOMetadataNode>, BatchUpdateException>(orderedMapIterator1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(stringArray0[2]);
      Stack<Properties> stack1 = new Stack<Properties>();
      ReverseListIterator<Properties> reverseListIterator0 = new ReverseListIterator<Properties>(stack1);
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) reverseListIterator0);
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) stack1);
      Class<Properties> class0 = Properties.class;
      IteratorUtils.toArray((Iterator<? extends Properties>) iterator0, class0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Properties properties0 = new Properties();
      Comparator<InstanceofPredicate> comparator0 = (Comparator<InstanceofPredicate>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 1);
      Iterator<InstanceofPredicate> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[0] = iterator0;
      IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) comparator0, (Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
      IteratorUtils.peekingIterator((Iterator<? extends InstanceofPredicate>) iterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("suffix may not be null");
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("suffix may not be null", "");
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) uniquePredicate0);
      IteratorUtils.toString((Iterator<ServiceLoader<SQLTransactionRollbackException>>) null);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLRecoverableException, Integer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLRecoverableException, ? extends Integer>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, Integer>(orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLRecoverableException, Integer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLRecoverableException, Integer>(orderedMapIterator1);
      ArrayList<ClientInfoStatus> arrayList0 = new ArrayList<ClientInfoStatus>();
      ReverseListIterator<ClientInfoStatus> reverseListIterator0 = new ReverseListIterator<ClientInfoStatus>(arrayList0);
      IteratorUtils.toList((Iterator<? extends ClientInfoStatus>) reverseListIterator0, 4548);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      IteratorUtils.loopingListIterator((List<String>) stack0);
      OrderedMapIterator<TreeSet<IIOMetadataNode>, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<TreeSet<IIOMetadataNode>, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<TreeSet<IIOMetadataNode>, BatchUpdateException>(orderedMapIterator0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "O";
      stringArray0[1] = null;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkMapIterator");
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, stringArray0[1]);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) uniquePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((ClientInfoStatus[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[4];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLRecoverableException>) null, 18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Comparator<SQLSyntaxErrorException> comparator0 = (Comparator<SQLSyntaxErrorException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      String string1 = "xn*=U,}6pDUvO*7@zqR";
      String string2 = "eFvm8";
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[4];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      ArrayList<ClientInfoStatus> arrayList0 = new ArrayList<ClientInfoStatus>();
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTransientConnectionException[]) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<EnumSet<Locale.Category>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Comparator<InstanceofPredicate> comparator0 = (Comparator<InstanceofPredicate>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) comparator0, (Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
      Iterator<InstanceofPredicate> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends InstanceofPredicate>) iterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Uol^v3zO");
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) iterator1);
      SingletonListIterator<Predicate<Object>> singletonListIterator0 = new SingletonListIterator<Predicate<Object>>(predicate0);
      IteratorUtils.matchesAny((Iterator<Predicate<Object>>) singletonListIterator0, (Predicate<? super Predicate<Object>>) predicate0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Uol^v3zO", "Uol^v3zO");
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      predicateArray0[0] = predicate0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[1] = (Predicate<Object>) uniquePredicate0;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) uniquePredicate0, (Equator<Object>) defaultEquator0);
      predicateArray0[2] = predicate1;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[3] = (Predicate<Object>) allPredicate0;
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicateArray0[3]);
      predicateArray0[4] = (Predicate<Object>) nullIsExceptionPredicate0;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      predicateArray0[5] = (Predicate<Object>) equalPredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[6] = (Predicate<Object>) nonePredicate0;
      ObjectArrayListIterator<Predicate<Object>> objectArrayListIterator0 = new ObjectArrayListIterator<Predicate<Object>>(predicateArray0);
      IteratorUtils.matchesAny((Iterator<Predicate<Object>>) objectArrayListIterator0, (Predicate<? super Predicate<Object>>) predicateArray0[6]);
      IteratorUtils.isEmpty(objectArrayListIterator0);
      int int0 = (-86);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) predicateArray0[4], (-86), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Comparator<InstanceofPredicate> comparator0 = (Comparator<InstanceofPredicate>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) comparator0, (Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[6];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException0;
      sQLTransientConnectionException0.getLocalizedMessage();
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException0;
      IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = null;
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 2);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      classArray0[1] = class0;
      Object[] objectArray0 = new Object[0];
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, objectArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) null, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) invokerTransformer0, (String) null, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[4];
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      properties2.replaceAll(biFunction0);
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0, 0);
      ListIterator<Properties> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) objectArrayListIterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      objectArrayListIterator0.forEachRemaining(consumer0);
      objectArrayListIterator0.reset();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      ArrayDeque<ClientInfoStatus> arrayDeque0 = new ArrayDeque<ClientInfoStatus>();
      LoopingIterator<ClientInfoStatus> loopingIterator0 = new LoopingIterator<ClientInfoStatus>(arrayDeque0);
      BiFunction<Object, Object, SQLClientInfoException> biFunction1 = (BiFunction<Object, Object, SQLClientInfoException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      properties3.merge(sQLSyntaxErrorException0, loopingIterator0, biFunction1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      properties2.put(iIOMetadataNode0, sQLTransientConnectionException0);
      IteratorUtils.get((Iterator<Properties>) listIterator0, 0);
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.singletonIterator((SQLTransientException) sQLTransientConnectionException0);
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLTransientException>) resettableIterator0, (Predicate<? super SQLTransientException>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[4];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      ArrayList<ClientInfoStatus> arrayList0 = new ArrayList<ClientInfoStatus>();
      ReverseListIterator<ClientInfoStatus> reverseListIterator0 = new ReverseListIterator<ClientInfoStatus>(arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends ClientInfoStatus>) reverseListIterator0, (-1927));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, (-1));
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) orderedIterator0, (Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[6];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException0;
      sQLTransientConnectionException0.getLocalizedMessage();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>((Predicate<Object>) null);
      singletonIterator0.reset();
      IteratorUtils.matchesAny((Iterator<Predicate<Object>>) singletonIterator0, (Predicate<? super Predicate<Object>>) uniquePredicate0);
      IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, 3);
      IteratorUtils.getIterator(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[6];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException0;
      sQLTransientConnectionException0.getLocalizedMessage();
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException0;
      IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>(hashSet0);
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Comparator<InstanceofPredicate> comparator0 = (Comparator<InstanceofPredicate>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) comparator0, (Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
      IteratorUtils.peekingIterator((Iterator<? extends InstanceofPredicate>) iterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Uol^v3zO");
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      Iterator<Predicate<Object>> iterator1 = new SingletonIterator<Predicate<Object>>(predicate0);
      IteratorUtils.matchesAny(iterator1, (Predicate<? super Predicate<Object>>) predicate0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Uol^v3zO", "Uol^v3zO");
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "G`xctE+h _?!'vs*");
      sQLTimeoutException0.getLocalizedMessage();
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[8];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException((String) null);
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      IteratorUtils.loopingListIterator((List<String>) stack0);
      OrderedMapIterator<TreeSet<IIOMetadataNode>, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<TreeSet<IIOMetadataNode>, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<TreeSet<IIOMetadataNode>, BatchUpdateException>(orderedMapIterator0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "O";
      stringArray0[1] = null;
      IteratorUtils.arrayListIterator(stringArray0);
      IteratorUtils.loopingListIterator((List<String>) stack0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<TreeSet<IIOMetadataNode>, BatchUpdateException> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<TreeSet<IIOMetadataNode>, BatchUpdateException>(orderedMapIterator0);
      Iterator<InstanceofPredicate> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Predicate<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[4];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      properties2.replace((Object) properties2, (Object) properties0, (Object) properties2);
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0, 0);
      IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) objectArrayListIterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      objectArrayListIterator0.forEachRemaining(consumer0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Uol^v3zO");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) properties1, comparator0);
      Comparator<InstanceofPredicate> comparator1 = (Comparator<InstanceofPredicate>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      LoopingListIterator<InstanceofPredicate> loopingListIterator0 = new LoopingListIterator<InstanceofPredicate>(linkedList0);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      linkedList0.add(instanceofPredicate0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends InstanceofPredicate>) loopingListIterator0);
      Iterator<InstanceofPredicate> iterator1 = IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) comparator1, (Iterator<? extends InstanceofPredicate>) iterator0, (Iterator<? extends InstanceofPredicate>) loopingListIterator0);
      Iterator<Predicate<Object>> iterator2 = IteratorUtils.filteredIterator((Iterator<? extends Predicate<Object>>) iterator1, (Predicate<? super Predicate<Object>>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iterator2, (Predicate<? super Predicate<Object>>) predicate0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) stack0);
      OrderedMapIterator<TreeSet<IIOMetadataNode>, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<TreeSet<IIOMetadataNode>, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<TreeSet<IIOMetadataNode>, BatchUpdateException>(orderedMapIterator0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "O";
      stringArray0[1] = null;
      stringArray0[2] = null;
      IteratorUtils.arrayListIterator(stringArray0);
      IteratorUtils.skippingIterator((Iterator<String>) resettableListIterator0, 0L);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) listIterator0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0);
      IteratorUtils.asIterable((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) iterator0, class0);
      Vector<PriorityQueue<SQLNonTransientException>> vector0 = new Vector<PriorityQueue<SQLNonTransientException>>();
      ResettableListIterator<PriorityQueue<SQLNonTransientException>> resettableListIterator1 = IteratorUtils.loopingListIterator((List<PriorityQueue<SQLNonTransientException>>) vector0);
      IteratorUtils.unmodifiableListIterator((ListIterator<PriorityQueue<SQLNonTransientException>>) resettableListIterator1);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "F~:r_C%;");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0, 10, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0);
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>((SQLIntegrityConstraintViolationException) null);
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<SQLException> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) instanceofPredicate0);
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) singletonListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      MapIterator<SQLNonTransientConnectionException, PriorityQueue<SQLFeatureNotSupportedException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      String string0 = "";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", ":xlU7L:?m3`6=Sp|J", 14);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0, true);
      IteratorUtils.peekingIterator((Iterator<? extends SQLTransactionRollbackException>) singletonIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) mapIterator0, 14, 2006);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      IteratorUtils.loopingListIterator((List<String>) stack0);
      OrderedMapIterator<TreeSet<IIOMetadataNode>, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<TreeSet<IIOMetadataNode>, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<TreeSet<IIOMetadataNode>, BatchUpdateException>(orderedMapIterator0);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      int int0 = 0;
      Properties[] propertiesArray0 = new Properties[7];
      propertiesArray0[0] = properties0;
      propertiesArray0[1] = properties0;
      propertiesArray0[2] = properties1;
      propertiesArray0[3] = properties1;
      propertiesArray0[4] = properties1;
      propertiesArray0[5] = properties0;
      propertiesArray0[6] = properties1;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0, 1);
      IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) objectArrayListIterator0);
      objectArrayListIterator0.reset();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("NMjM~T9|KLMnf1$");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("j0>P", "");
      properties1.put(sQLFeatureNotSupportedException0, "The transformer to call must not be null");
      IteratorUtils.get((Iterator<Properties>) objectArrayListIterator0, 1);
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.singletonIterator((SQLTransientException) sQLTransientConnectionException0);
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLTransientException>) resettableIterator0, (Predicate<? super SQLTransientException>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[4];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      int int0 = 0;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0, 0);
      ListIterator<Properties> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) objectArrayListIterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      objectArrayListIterator0.forEachRemaining(consumer0);
      objectArrayListIterator0.reset();
      String string0 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      properties2.put(iIOMetadataNode0, sQLTransientConnectionException0);
      IteratorUtils.get((Iterator<Properties>) listIterator0, 0);
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.singletonIterator((SQLTransientException) sQLTransientConnectionException0);
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLTransientException>) resettableIterator0, (Predicate<? super SQLTransientException>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[4];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0, 0);
      ListIterator<Properties> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) objectArrayListIterator0);
      objectArrayListIterator0.reset();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.get((Iterator<Properties>) listIterator0, 0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[3];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException0;
      IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>(hashSet0);
      Vector<SQLException> vector1 = new Vector<SQLException>();
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLException>) vector1);
      Predicate<SQLException> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLException>>) hashSet0);
      IteratorUtils.find((Iterator<SQLException>) resettableListIterator0, (Predicate<? super SQLException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLDataException sQLDataException0 = new SQLDataException("", "", 0, sQLClientInfoException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("urP}kGPk^N", sQLClientInfoException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      sQLClientInfoException0.printStackTrace();
      SQLDataException sQLDataException2 = new SQLDataException("Ww~5@m\"W", "List must not be null");
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("Ww~5@m\"W", "urP}kGPk^N");
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException(sQLDataException1);
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) resettableIterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add(".");
      IteratorUtils.loopingListIterator((List<String>) stack0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ObjectArrayIterator<ClientInfoStatus> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<ClientInfoStatus>((ClientInfoStatus[]) null, 100, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      Stack<DataTruncation>[] stackArray0 = (Stack<DataTruncation>[]) Array.newInstance(Stack.class, 2);
      Stack<DataTruncation> stack1 = new Stack<DataTruncation>();
      stackArray0[0] = stack1;
      Stack<DataTruncation> stack2 = new Stack<DataTruncation>();
      stackArray0[1] = stack2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stackArray0, 2188, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLDataException sQLDataException0 = new SQLDataException("", "", 0, sQLClientInfoException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("urP}kGPk^N", sQLClientInfoException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("Ww~5@m\"W", "List must not be null");
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("Ww~5@m\"W", "urP}kGPk^N");
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLDataException0);
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("Ww~5@m\"W");
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[6];
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException3;
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 5035, 56);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      List<ClientInfoStatus> list0 = new Vector<ClientInfoStatus>();
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLSyntaxErrorException, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLSyntaxErrorException, SQLTransactionRollbackException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends SQLTransactionRollbackException>) orderedMapIterator0);
      MapIterator<SQLSyntaxErrorException, SQLTransactionRollbackException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLSyntaxErrorException, ? extends SQLTransactionRollbackException>) orderedMapIterator1);
      AbstractMapIteratorDecorator<SQLSyntaxErrorException, SQLTransactionRollbackException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLSyntaxErrorException, SQLTransactionRollbackException>(mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLSyntaxErrorException>) abstractMapIteratorDecorator0, (long) (-3658));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 5);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      OrderedIterator<ClientInfoStatus> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends ClientInfoStatus>) orderedIterator0, (-1L), (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      MapIterator<Transformer<Object, Properties>, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "^H$odo|2{A{RaR";
      stringArray0[2] = "O";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      IteratorUtils.skippingIterator((Iterator<String>) resettableListIterator0, 0L);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLSyntaxErrorException>) listIterator0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableIterator0, class0);
      Vector<PriorityQueue<SQLNonTransientException>> vector0 = new Vector<PriorityQueue<SQLNonTransientException>>();
      ResettableListIterator<PriorityQueue<SQLNonTransientException>> resettableListIterator1 = IteratorUtils.loopingListIterator((List<PriorityQueue<SQLNonTransientException>>) vector0);
      IteratorUtils.unmodifiableListIterator((ListIterator<PriorityQueue<SQLNonTransientException>>) resettableListIterator1);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) instanceofPredicate0, 10, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[7];
      SQLWarning sQLWarning0 = new SQLWarning("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLWarning0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("");
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("", "]&X7nn'e-", 100, sQLWarning0);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException(">^rr_R9^f", ">^rr_R9^f");
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("\"wt]S P[2+b)%*", "", 1981, sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException6;
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0, 0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLRecoverableException, Integer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLRecoverableException, ? extends Integer>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, Integer>(orderedMapIterator1);
      AbstractMapIteratorDecorator<SQLRecoverableException, Integer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLRecoverableException, Integer>(abstractOrderedMapIteratorDecorator0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLRecoverableException>) abstractMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) abstractMapIteratorDecorator0, (-3620));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Comparator<Object> comparator0 = null;
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[7];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("NodeList must not be null");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("NodeList must not be null", "", sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("EVa6o", " ", (-5303), sQLRecoverableException0);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("org.apache.commons.collections4.list.AbstractLinkedList$Node", sQLRecoverableException2);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("org.apache.commons.collections4.list.AbstractLinkedList$Node", sQLRecoverableException2);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException("dqtC\"LZ+fEkHdoR\"", (String) null, 679);
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException((String) null, "^H.lku9=w+]asE5|", (-3190), sQLRecoverableException3);
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, (-1061));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, 1565L);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((InstanceofPredicate[]) null, 1371, 954);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends ClientInfoStatus>) null, (-3658));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, Integer>(orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, Integer> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, Integer>(abstractOrderedMapIteratorDecorator0);
      ArrayList<ClientInfoStatus> arrayList0 = new ArrayList<ClientInfoStatus>();
      ReverseListIterator<ClientInfoStatus> reverseListIterator0 = new ReverseListIterator<ClientInfoStatus>(arrayList0);
      IteratorUtils.toList((Iterator<? extends ClientInfoStatus>) reverseListIterator0, 4548);
      Enumeration<SQLRecoverableException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) abstractOrderedMapIteratorDecorator0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) abstractOrderedMapIteratorDecorator1);
      IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) list0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[4];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0, 0);
      ListIterator<Properties> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) objectArrayListIterator0);
      objectArrayListIterator0.reset();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      properties2.put(iIOMetadataNode0, sQLTransientConnectionException0);
      Properties properties4 = IteratorUtils.get((Iterator<Properties>) listIterator0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) properties4, 161);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MapIterator<Properties, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) mapIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "Predicate must not be null");
      sQLTimeoutException0.getLocalizedMessage();
      IteratorUtils.singletonListIterator(sQLTimeoutException0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[8];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException((String) null);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("/", (String) null, sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException((String) null, (String) null, 123, sQLTransientConnectionException2);
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      SQLTransientConnectionException sQLTransientConnectionException6 = new SQLTransientConnectionException("/", sQLTransientConnectionException4);
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException6;
      SQLTransientConnectionException sQLTransientConnectionException7 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[7] = sQLTransientConnectionException7;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>(hashSet0);
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) vector0);
      IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      IteratorUtils.loopingListIterator((List<String>) stack0);
      OrderedMapIterator<TreeSet<IIOMetadataNode>, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<TreeSet<IIOMetadataNode>, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<TreeSet<IIOMetadataNode>, BatchUpdateException>(orderedMapIterator0);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-692);
      longArray0[1] = (long) (-692);
      longArray0[2] = (long) (-692);
      longArray0[3] = (long) (-692);
      Transformer<SQLTimeoutException, String> transformer0 = ConstantTransformer.constantTransformer((String) null);
      MapIterator<SQLTimeoutException, SQLTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<SQLTimeoutException>) mapIterator0, (Transformer<? super SQLTimeoutException, String>) transformer0);
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<IIOMetadataNode>) null, (-692L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Comparator<SQLTransientConnectionException> comparator0 = (Comparator<SQLTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) orderedIterator0, (Iterator<? extends SQLTransientConnectionException>) orderedIterator0);
      Transformer<SQLTimeoutException, String> transformer0 = ConstantTransformer.constantTransformer("");
      IteratorUtils.toString((Iterator<SQLTimeoutException>) null, (Transformer<? super SQLTimeoutException, String>) transformer0);
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<IIOMetadataNode>) null, (-529L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      assertNotNull(resettableIterator0);
      assertTrue(integer0.equals((Object)int0));
      
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 5);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[4];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNotNull(sQLRecoverableException0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLRecoverableException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLRecoverableException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", sQLFeatureNotSupportedException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLRecoverableException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", sQLFeatureNotSupportedException0);
      assertNotNull(sQLTransactionRollbackException1);
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLRecoverableException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException1.toString());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals("", sQLTransactionRollbackException1.getMessage());
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLTransactionRollbackException1);
      assertNotNull(sQLClientInfoException0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLRecoverableException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException1.toString());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals("", sQLTransactionRollbackException1.getMessage());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLTransactionRollbackException: ", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNotNull(map0);
      assertNotSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLRecoverableException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException1.toString());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals("", sQLTransactionRollbackException1.getMessage());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLTransactionRollbackException: ", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "", map0);
      assertNotNull(sQLClientInfoException1);
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLRecoverableException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException1.toString());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals("", sQLTransactionRollbackException1.getMessage());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLTransactionRollbackException: ", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("", sQLClientInfoException1.getSQLState());
      assertEquals("", sQLClientInfoException1.getMessage());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", sQLClientInfoException1);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLRecoverableException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException1.toString());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals("", sQLTransactionRollbackException1.getMessage());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLTransactionRollbackException: ", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("", sQLClientInfoException1.getSQLState());
      assertEquals("", sQLClientInfoException1.getMessage());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException(sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLTransactionRollbackException2);
      assertNull(sQLTransactionRollbackException2.getSQLState());
      assertEquals(0, sQLTransactionRollbackException2.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLTransactionRollbackException2.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLInvalidAuthorizationSpecException: ", sQLTransactionRollbackException2.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLRecoverableException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException1.toString());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals("", sQLTransactionRollbackException1.getMessage());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLTransactionRollbackException: ", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("", sQLClientInfoException1.getSQLState());
      assertEquals("", sQLClientInfoException1.getMessage());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("list (", sQLFeatureNotSupportedException0);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0, (-457));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Array class must not be null", "Array class must not be null", 128);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(128, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Array class must not be null", sQLFeatureNotSupportedException0.toString());
      assertEquals("Array class must not be null", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Array class must not be null", sQLFeatureNotSupportedException0.getMessage());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Array class must not be null", "Array class must not be null", sQLFeatureNotSupportedException0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(128, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Array class must not be null", sQLFeatureNotSupportedException0.toString());
      assertEquals("Array class must not be null", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Array class must not be null", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("Array class must not be null", sQLTransientConnectionException0.getSQLState());
      assertEquals("Array class must not be null", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: Array class must not be null", sQLTransientConnectionException0.toString());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTransientConnectionException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(128, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Array class must not be null", sQLFeatureNotSupportedException0.toString());
      assertEquals("Array class must not be null", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Array class must not be null", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("Array class must not be null", sQLTransientConnectionException0.getSQLState());
      assertEquals("Array class must not be null", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: Array class must not be null", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLTransientConnectionException: Array class must not be null", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: Array class must not be null", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0, 14, 128);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      OrderedMapIterator<SQLException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[6];
      int int0 = (-760);
      SQLException sQLException0 = new SQLException();
      assertNotNull(sQLException0);
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("r V[", "r V[", (-760), sQLException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals("r V[", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: r V[", sQLSyntaxErrorException0.toString());
      assertEquals((-760), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("r V[", sQLSyntaxErrorException0.getSQLState());
      
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("r V[");
      assertNotNull(sQLSyntaxErrorException1);
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("r V[", sQLSyntaxErrorException1.getMessage());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: r V[", sQLSyntaxErrorException1.toString());
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("r V[", "[", sQLSyntaxErrorException1);
      assertNotNull(sQLSyntaxErrorException2);
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("r V[", sQLSyntaxErrorException1.getMessage());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: r V[", sQLSyntaxErrorException1.toString());
      assertEquals(0, sQLSyntaxErrorException2.getErrorCode());
      assertEquals("[", sQLSyntaxErrorException2.getSQLState());
      assertEquals("r V[", sQLSyntaxErrorException2.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: r V[", sQLSyntaxErrorException2.toString());
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("[", "X/~'}rU=Kne/", (-2027), sQLSyntaxErrorException0);
      assertNotNull(sQLSyntaxErrorException3);
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals("r V[", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: r V[", sQLSyntaxErrorException0.toString());
      assertEquals((-760), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("r V[", sQLSyntaxErrorException0.getSQLState());
      assertEquals("X/~'}rU=Kne/", sQLSyntaxErrorException3.getSQLState());
      assertEquals((-2027), sQLSyntaxErrorException3.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: [", sQLSyntaxErrorException3.toString());
      assertEquals("[", sQLSyntaxErrorException3.getMessage());
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException0));
      
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException((String) null, sQLSyntaxErrorException3);
      assertNotNull(sQLSyntaxErrorException4);
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals("r V[", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: r V[", sQLSyntaxErrorException0.toString());
      assertEquals((-760), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("r V[", sQLSyntaxErrorException0.getSQLState());
      assertEquals("X/~'}rU=Kne/", sQLSyntaxErrorException3.getSQLState());
      assertEquals((-2027), sQLSyntaxErrorException3.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: [", sQLSyntaxErrorException3.toString());
      assertEquals("[", sQLSyntaxErrorException3.getMessage());
      assertEquals(0, sQLSyntaxErrorException4.getErrorCode());
      assertNull(sQLSyntaxErrorException4.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException4.toString());
      assertNull(sQLSyntaxErrorException4.getSQLState());
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException0));
      
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("[");
      assertNotNull(sQLSyntaxErrorException5);
      assertEquals("[", sQLSyntaxErrorException5.getMessage());
      assertEquals(0, sQLSyntaxErrorException5.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: [", sQLSyntaxErrorException5.toString());
      assertNull(sQLSyntaxErrorException5.getSQLState());
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException0));
      
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      assertEquals(6, sQLSyntaxErrorExceptionArray0.length);
      assertNotNull(resettableListIterator0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      assertEquals(6, sQLSyntaxErrorExceptionArray0.length);
      assertNotNull(listIterator0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0, (Iterator<? extends SQLSyntaxErrorException>) listIterator0);
      assertEquals(6, sQLSyntaxErrorExceptionArray0.length);
      assertNotNull(zippingIterator0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLException[]) sQLSyntaxErrorExceptionArray0, 1382);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ResettableIterator<Class<Properties>> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      assertNotNull(sQLFeatureNotSupportedException1);
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException1.toString());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, 0);
      assertEquals(2, sQLFeatureNotSupportedExceptionArray0.length);
      assertNotNull(resettableIterator0);
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", false);
      assertNotNull(stringTokenizer0);
      assertEquals(0, stringTokenizer0.countTokens());
      
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(stringTokenizer0, (Equator<Object>) null);
      assertNotNull(equalPredicate0);
      assertEquals(0, stringTokenizer0.countTokens());
      
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) equalPredicate0);
      assertNotNull(predicate0);
      assertEquals(0, stringTokenizer0.countTokens());
      
      predicateArray0[0] = predicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      assertEquals(1, predicateArray0.length);
      assertNotNull(onePredicate0);
      
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, (Predicate<? super SQLFeatureNotSupportedException>) onePredicate0);
      assertEquals(2, sQLFeatureNotSupportedExceptionArray0.length);
      assertEquals(1, predicateArray0.length);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) stack0);
      assertNotNull(resettableListIterator0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      OrderedMapIterator<TreeSet<IIOMetadataNode>, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<TreeSet<IIOMetadataNode>, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<TreeSet<IIOMetadataNode>, BatchUpdateException>(orderedMapIterator0);
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "O";
      stringArray0[1] = null;
      stringArray0[2] = null;
      ResettableListIterator<String> resettableListIterator1 = IteratorUtils.arrayListIterator(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(resettableListIterator1);
      assertFalse(resettableListIterator1.hasPrevious());
      assertTrue(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.equals((Object)resettableListIterator0));
      
      SkippingIterator<String> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<String>) resettableListIterator0, 0L);
      assertFalse(stack0.contains("O"));
      assertNotNull(skippingIterator0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.equals((Object)resettableListIterator1));
      
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) listIterator0);
      assertNotNull(enumeration0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0);
      assertNotNull(iterator0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      Iterable<SQLSyntaxErrorException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      assertNotNull(iterable0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) iterator0, class0);
      assertEquals(0, sQLNonTransientExceptionArray0.length);
      assertNotNull(sQLNonTransientExceptionArray0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      Vector<PriorityQueue<SQLNonTransientException>> vector0 = new Vector<PriorityQueue<SQLNonTransientException>>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      ResettableListIterator<PriorityQueue<SQLNonTransientException>> resettableListIterator2 = IteratorUtils.loopingListIterator((List<PriorityQueue<SQLNonTransientException>>) vector0);
      assertNotNull(resettableListIterator2);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(resettableListIterator2.hasNext());
      assertFalse(resettableListIterator2.hasPrevious());
      
      ListIterator<PriorityQueue<SQLNonTransientException>> listIterator1 = IteratorUtils.unmodifiableListIterator((ListIterator<PriorityQueue<SQLNonTransientException>>) resettableListIterator2);
      assertNotNull(listIterator1);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(resettableListIterator2.hasNext());
      assertFalse(resettableListIterator2.hasPrevious());
      assertFalse(listIterator1.hasPrevious());
      assertFalse(listIterator1.hasNext());
      
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Predicate<Object>>) null, (Predicate<? super Predicate<Object>>) instanceofPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      ObjectArrayIterator<SQLInvalidAuthorizationSpecException> objectArrayIterator0 = new ObjectArrayIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null, (Equator<Object>) null);
      predicateArray0[0] = predicate0;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) locale_Category0, (Equator<Object>) null);
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate1);
      predicateArray0[2] = predicate2;
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate3 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      predicateArray0[3] = predicate3;
      Predicate<Object> predicate4 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      NullIsFalsePredicate<SQLException> nullIsFalsePredicate0 = new NullIsFalsePredicate<SQLException>(predicate4);
      IfTransformer<SQLInvalidAuthorizationSpecException, String> ifTransformer0 = new IfTransformer<SQLInvalidAuthorizationSpecException, String>(nullIsFalsePredicate0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends String>) null, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends String>) null);
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) objectArrayIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) ifTransformer0, "org.apache.commons.collections4.map.AbstractReferenceMap", "org.apache.commons.collections4.map.AbstractReferenceMap", "org.apache.commons.collections4.map.AbstractReferenceMap");
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) objectArrayIterator0, (Iterator<? extends SQLNonTransientException>) objectArrayIterator0, (Iterator<? extends SQLNonTransientException>) objectArrayIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.map.AbstractHashedMap$HashEntry", "");
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) zippingIterator0);
      ResettableListIterator<Locale.Category> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      IteratorUtils.contains((Iterator<Locale.Category>) resettableListIterator0, (Object) sQLTransientConnectionException0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) objectArrayIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      IteratorUtils.loopingListIterator((List<String>) stack0);
      OrderedMapIterator<TreeSet<IIOMetadataNode>, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<TreeSet<IIOMetadataNode>, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<TreeSet<IIOMetadataNode>, BatchUpdateException>(orderedMapIterator0);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-692);
      longArray0[1] = (long) (-692);
      longArray0[2] = (long) (-692);
      longArray0[3] = (long) (-692);
      longArray0[4] = 1L;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, (-692), longArray0, (Throwable) null);
      // Undeclared exception!
      try { 
        abstractOrderedMapIteratorDecorator0.setValue(batchUpdateException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) stack0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 7);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category0);
      enumSetArray0[0] = enumSet0;
      EnumSet<Locale.Category> enumSet1 = EnumSet.copyOf(enumSet0);
      enumSetArray0[1] = enumSet1;
      EnumSet<Locale.Category> enumSet2 = enumSet1.clone();
      enumSetArray0[2] = enumSet2;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet3 = EnumSet.range(locale_Category0, locale_Category1);
      enumSetArray0[3] = enumSet3;
      EnumSet<Locale.Category> enumSet4 = EnumSet.range(locale_Category1, locale_Category1);
      enumSetArray0[4] = enumSet4;
      EnumSet<Locale.Category> enumSet5 = EnumSet.complementOf(enumSet4);
      enumSetArray0[5] = enumSet5;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet6 = EnumSet.of(locale_Category0, locale_Category1, locale_Category2);
      enumSet5.stream();
      enumSetArray0[6] = enumSet6;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      enumSet6.add(locale_Category3);
      int int0 = 0;
      IteratorUtils.arrayIterator(enumSetArray0, 0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "XE,Rl4*m", 128, sQLNonTransientException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("GS,`CTc", "GS,`CTc", sQLSyntaxErrorException0);
      sQLSyntaxErrorException1.addSuppressed(sQLNonTransientException0);
      IteratorUtils.singletonListIterator((SQLNonTransientException) sQLSyntaxErrorException1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      IteratorUtils.emptyOrderedMapIterator();
      DataTruncation dataTruncation0 = new DataTruncation(1027, true, true, 128, 128, sQLNonTransientException0);
      Transformer<SQLException, DataTruncation> transformer0 = ConstantTransformer.constantTransformer(dataTruncation0);
      IteratorUtils.objectGraphIterator((SQLException) sQLSyntaxErrorException1, (Transformer<? super SQLException, ? extends SQLException>) transformer0);
      IteratorUtils.unmodifiableListIterator((ListIterator<ArrayDeque<Hashtable>>) resettableListIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, (-1124));
      // Undeclared exception!
      try { 
        sQLInvalidAuthorizationSpecException0.setStackTrace((StackTraceElement[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0);
      IteratorUtils.singletonListIterator(enumSet0);
      IteratorUtils.emptyListIterator();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[6];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("", sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("", sQLRecoverableException1);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("");
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("", "");
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException(sQLRecoverableException4);
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNode0.item(167);
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 3);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLRecoverableException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLRecoverableException>(orderedMapIterator0);
      MapIterator<SQLNonTransientConnectionException, SQLRecoverableException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, SQLRecoverableException>) abstractOrderedMapIteratorDecorator0);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) mapIterator0;
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[8];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLFeatureNotSupportedException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransactionRollbackException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException((String) null, (String) null, sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      String string0 = "";
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("", (String) null, 1390);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("The predicate and closure arrays must be the same size");
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException((String) null, sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException((String) null);
      sQLNonTransientConnectionExceptionArray0[7] = sQLNonTransientConnectionException7;
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0, 0, 4157);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLDataException sQLDataException0 = new SQLDataException("", "", 0, sQLClientInfoException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("urP}kGPk^N", sQLClientInfoException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("Ww~5@m\"W", "List must not be null");
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("Ww~5@m\"W", "urP}kGPk^N");
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException(sQLClientInfoException0);
      sQLDataExceptionArray0[4] = sQLDataException4;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) resettableIterator0);
      Iterable<SQLNonTransientException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) iterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      SkippingIterator<SQLSyntaxErrorException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLSyntaxErrorException>) listIterator0, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) skippingIterator0, (Predicate<? super SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      MapIterator<Integer, ArrayDeque<SQLClientInfoException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) mapIterator0, 0, (-1101));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLRecoverableException, Integer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLRecoverableException, ? extends Integer>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, Integer>(orderedMapIterator1);
      AbstractMapIteratorDecorator<SQLRecoverableException, Integer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLRecoverableException, Integer>(abstractOrderedMapIteratorDecorator0);
      int int0 = 10;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLRecoverableException>) abstractMapIteratorDecorator0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 10
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 8);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>((String) null);
      iteratorArray0[0] = (Iterator<String>) singletonListIterator0;
      ListIteratorWrapper<String> listIteratorWrapper0 = new ListIteratorWrapper<String>(iteratorArray0[0]);
      iteratorArray0[1] = (Iterator<String>) listIteratorWrapper0;
      BoundedIterator<String> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends String>) singletonListIterator0, 0L);
      iteratorArray0[2] = (Iterator<String>) boundedIterator0;
      OrderedMapIterator<String, SQLIntegrityConstraintViolationException> orderedMapIterator0 = null;
      AbstractOrderedMapIteratorDecorator<String, SQLIntegrityConstraintViolationException> abstractOrderedMapIteratorDecorator0 = null;
      try {
        abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, SQLIntegrityConstraintViolationException>((OrderedMapIterator<String, SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OrderedMapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", e);
      }
  }
}
