/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 02:06:22 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Transformer<SQLException, SQLInvalidAuthorizationSpecException> transformer0 = ConstantTransformer.nullTransformer();
      SQLDataException sQLDataException0 = new SQLDataException();
      IteratorUtils.getIterator(transformer0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      sQLDataExceptionArray0[0] = sQLDataException0;
      sQLDataExceptionArray0[1] = sQLDataException0;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 2, 2);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransientException>) resettableListIterator0, (Class<SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException((String) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException((String) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException4;
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLFeatureNotSupportedException4.setStackTrace(stackTraceElementArray0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException4;
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException5;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      IteratorUtils.get((Iterator<SQLFeatureNotSupportedException>) objectArrayListIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      ObjectArrayIterator<SQLClientInfoException> objectArrayIterator0 = new ObjectArrayIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) objectArrayIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.IteratorUtils");
      UniquePredicate<SQLTransactionRollbackException> uniquePredicate0 = new UniquePredicate<SQLTransactionRollbackException>();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[3];
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException0;
      ObjectArrayIterator<SQLTransactionRollbackException> objectArrayIterator1 = new ObjectArrayIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLTransactionRollbackException>) objectArrayIterator1, (Predicate<? super SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Transformer<SQLException, SQLInvalidAuthorizationSpecException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) orderedMapIterator0, (Transformer<? super BatchUpdateException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      IteratorUtils.zippingIterator((Iterator<?>) iterator0, (Iterator<?>) iterator0, (Iterator<?>) orderedMapIterator0);
      SQLDataException sQLDataException0 = new SQLDataException();
      IteratorUtils.size(orderedMapIterator0);
      IteratorUtils.getIterator(transformer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("list (", "list (", sQLDataException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLFeatureNotSupportedException>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLDataException0);
      String string0 = "5;DA^_d";
      SQLException sQLException0 = new SQLException("5;DA^_d", "5;DA^_d", sQLInvalidAuthorizationSpecException0);
      String string1 = "m(\"4`X;AS1@@naHi{";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("m(\"4`X;AS1@@naHi{", "5;DA^_d", 730, sQLInvalidAuthorizationSpecException0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[6];
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException0;
      ObjectArrayIterator<SQLTransactionRollbackException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 5);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<String> class3 = String.class;
      classArray0[3] = class3;
      Class<String> class4 = String.class;
      classArray0[4] = class4;
      InvokerTransformer<Object, SQLTransactionRollbackException> invokerTransformer0 = new InvokerTransformer<Object, SQLTransactionRollbackException>("m(\"4`X;AS1@@naHi{", classArray0, classArray0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLException0);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) invokerTransformer0, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLTransactionRollbackException>) objectArrayIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'm(\"4`X;AS1@@naHi{' on 'class java.sql.SQLTransactionRollbackException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Transformer<SQLException, SQLInvalidAuthorizationSpecException> transformer0 = ConstantTransformer.nullTransformer();
      SQLDataException sQLDataException0 = new SQLDataException();
      IteratorUtils.getIterator(transformer0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Ir-k8\"5 43ELRINI", "]", 91);
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 5);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      classArray0[2] = class2;
      Class<SQLClientInfoException> class3 = SQLClientInfoException.class;
      classArray0[3] = class3;
      Class<SQLClientInfoException> class4 = SQLClientInfoException.class;
      classArray0[4] = class4;
      InvokerTransformer<SQLNonTransientException, String> invokerTransformer0 = new InvokerTransformer<SQLNonTransientException, String>("\"EY", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) singletonListIterator0, (Transformer<? super SQLSyntaxErrorException, String>) invokerTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '\"EY' on 'class java.sql.SQLSyntaxErrorException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) null, (Predicate<? super DataTruncation>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyListIterator();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0, true);
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<InstanceofPredicate>) singletonIterator0, 141);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 140
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLException>) orderedIterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("delimiter may not be null", sQLTransientException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException((String) null);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) objectArrayListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      IteratorUtils.emptyListIterator();
      Class<SQLTransientException> class0 = SQLTransientException.class;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) resettableListIterator1, class0);
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[2];
      clientInfoStatusArray0[1] = clientInfoStatusArray0[0];
      ResettableListIterator<ClientInfoStatus> resettableListIterator2 = IteratorUtils.arrayListIterator(clientInfoStatusArray0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAny((Iterator<ClientInfoStatus>) resettableListIterator2, (Predicate<? super ClientInfoStatus>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) enumeration0, (-1648));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator");
      IfTransformer<SQLException, String> ifTransformer0 = new IfTransformer<SQLException, String>((Predicate<? super SQLException>) null, transformer0, transformer0);
      OrderedMapIterator<SQLNonTransientException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toString((Iterator<SQLNonTransientException>) orderedMapIterator0, (Transformer<? super SQLNonTransientException, String>) ifTransformer0, "org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator", "org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator", "org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator");
      Comparator<SQLIntegrityConstraintViolationException> comparator0 = (Comparator<SQLIntegrityConstraintViolationException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SQLIntegrityConstraintViolationException> priorityQueue0 = new PriorityQueue<SQLIntegrityConstraintViolationException>(comparator0);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>(priorityQueue0);
      IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      HashMap<InstanceofPredicate, Transformer<Object, String>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashMap0);
      IfTransformer<SQLException, String> ifTransformer0 = new IfTransformer<SQLException, String>((Predicate<? super SQLException>) null, transformer0, transformer0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[7];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Mwl6?'Ll3|n0]7>", sQLDataException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("Mwl6?'Ll3|n0]7>", "Mwl6?'Ll3|n0]7>", 0);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("Mwl6?'Ll3|n0]7>", sQLDataException0);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("Mwl6?'Ll3|n0]7>", sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException("v,Mpx'M", sQLInvalidAuthorizationSpecException3);
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException6;
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0);
      Iterator<SQLNonTransientException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator1, (Transformer<? super SQLNonTransientException, String>) ifTransformer0, (String) null, "Mwl6?'Ll3|n0]7>", "Mwl6?'Ll3|n0]7>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      IteratorUtils.emptyListIterator();
      Class<SQLTransientException> class0 = SQLTransientException.class;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) resettableListIterator1, class0);
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[2];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[1] = clientInfoStatus1;
      ResettableListIterator<ClientInfoStatus> resettableListIterator2 = IteratorUtils.arrayListIterator(clientInfoStatusArray0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAny((Iterator<ClientInfoStatus>) resettableListIterator2, (Predicate<? super ClientInfoStatus>) predicate0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Entry does not exist: ", "Entry does not exist: ", (Throwable) null);
      SQLException sQLException0 = new SQLException("OA,*((9Lm ^N", "Entry does not exist: ", sQLTransientConnectionException0);
      String string0 = "m(\"4`X;AS1@@naHi{";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Entry does not exist: ", "8f0s", 730, sQLException0);
      Predicate<SQLTransactionRollbackException> predicate0 = EqualPredicate.equalPredicate(sQLTransactionRollbackException0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[1];
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException1;
      ObjectArrayIterator<SQLTransactionRollbackException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      IteratorUtils.matchesAll((Iterator<SQLTransactionRollbackException>) objectArrayIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      int int0 = 1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("]", "", 1, sQLTransactionRollbackException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "OA,*((9Lm ^N");
      int int1 = (-902);
      ArrayListIterator<SQLRecoverableException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLRecoverableException>("OA,*((9Lm ^N", (-902));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<Object, SQLDataException> hashMap0 = new HashMap<Object, SQLDataException>();
      EntrySetMapIterator<Object, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<Object, SQLDataException>(hashMap0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>((Predicate<? super Object>) null);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nullIsFalsePredicate0, (Predicate<? super Object>) null);
      IteratorUtils.matchesAny((Iterator<Object>) entrySetMapIterator0, (Predicate<? super Object>) andPredicate0);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[5];
      StringTokenizer stringTokenizer0 = new StringTokenizer("\"W", "Gt44Z?j");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("Gt44Z?j");
      stringTokenizer0.nextElement();
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("Gt44Z?j", "Gt44Z?j", false);
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Class<SQLTransientException> class0 = SQLTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) resettableListIterator0, class0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0, (-1306));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Object, SQLDataException> hashMap0 = new HashMap<Object, SQLDataException>();
      EntrySetMapIterator<Object, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<Object, SQLDataException>(hashMap0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>((Predicate<? super Object>) null);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nullIsFalsePredicate0, (Predicate<? super Object>) null);
      IteratorUtils.matchesAny((Iterator<Object>) entrySetMapIterator0, (Predicate<? super Object>) andPredicate0);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[5];
      StringTokenizer stringTokenizer0 = new StringTokenizer("\"W", "Gt44Z?j");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("Gt44Z?j");
      stringTokenizer0.nextElement();
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("Gt44Z?j", "Gt44Z?j", false);
      stringTokenizerArray0[2] = stringTokenizer2;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("\"W");
      IfTransformer<SQLException, String> ifTransformer0 = new IfTransformer<SQLException, String>((Predicate<? super SQLException>) null, transformer0, transformer0);
      OrderedMapIterator<SQLNonTransientException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientException>) orderedMapIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0, "", "f<`! I&", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, Locale.FilteringMode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, Locale.FilteringMode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, Locale.FilteringMode>(orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLTransactionRollbackException, Locale.FilteringMode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransactionRollbackException, Locale.FilteringMode>(abstractOrderedMapIteratorDecorator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Bj?gXT^i");
      IteratorUtils.getIterator("");
      IteratorUtils.getIterator("Transformer must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-274));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLDataException0);
      SQLException sQLException0 = new SQLException("5;DA^_d", "5;DA^_d", sQLInvalidAuthorizationSpecException0);
      String string0 = "m(\"4`X;AS1@@naHi{";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("m(\"4`X;AS1@@naHi{", "5;DA^_d", 730, sQLInvalidAuthorizationSpecException0);
      Predicate<SQLTransactionRollbackException> predicate0 = EqualPredicate.equalPredicate(sQLTransactionRollbackException0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[3];
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException0;
      ObjectArrayIterator<SQLTransactionRollbackException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      IteratorUtils.matchesAll((Iterator<SQLTransactionRollbackException>) objectArrayIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("5;DA^_d", "5;DA^_d", 1, sQLTransactionRollbackException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("m(\"4`X;AS1@@naHi{", "5;DA^_d");
      int int0 = 61;
      ArrayListIterator<SQLRecoverableException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLRecoverableException>(sQLFeatureNotSupportedException0, 61);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.aache.commons.collections4.map.AbstractSortedMapDecoratorSortedMapIterator");
      iIOMetadataNode0.getFirstChild();
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("org.aache.commons.collections4.map.AbstractSortedMapDecoratorSortedMapIterator");
      IteratorUtils.nodeListIterator(nodeList0);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException sQLDataException1 = new SQLDataException("", "");
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<BatchUpdateException>) vector0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1212);
      intArray0[1] = (-1212);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "fx/RB", (-1212), intArray0);
      vector0.add(batchUpdateException0);
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) resettableListIterator0, (Predicate<? super BatchUpdateException>) instanceofPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.contains((Iterator<BatchUpdateException>) listIterator0, (Object) null);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ListIterator<HashSet<SQLClientInfoException>> listIterator0 = EmptyListIterator.emptyListIterator();
      int int0 = 91;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<HashSet<SQLClientInfoException>>) listIterator0, 91);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 91
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Object, SQLDataException> hashMap0 = new HashMap<Object, SQLDataException>();
      EntrySetMapIterator<Object, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<Object, SQLDataException>(hashMap0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>((Predicate<? super Object>) null);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nullIsFalsePredicate0, (Predicate<? super Object>) null);
      IteratorUtils.matchesAny((Iterator<Object>) entrySetMapIterator0, (Predicate<? super Object>) andPredicate0);
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 7);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[5];
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "Gt44Z?j");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("Gt44Z?j");
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("");
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("|&_)L;c&!*-0^QZ.1?d", "Gt44Z?j", false);
      stringTokenizerArray0[3] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = new StringTokenizer("", "", false);
      stringTokenizerArray0[4] = stringTokenizer4;
      ObjectArrayListIterator<StringTokenizer> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<StringTokenizer>(stringTokenizerArray0, 28);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Transformer<SQLException, SQLInvalidAuthorizationSpecException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) orderedMapIterator0, (Transformer<? super BatchUpdateException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      IteratorUtils.zippingIterator((Iterator<?>) iterator0, (Iterator<?>) iterator0, (Iterator<?>) orderedMapIterator0);
      SQLDataException sQLDataException0 = new SQLDataException();
      IteratorUtils.size(orderedMapIterator0);
      IteratorUtils.getIterator(transformer0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[3];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLDataException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("", "", 0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IfTransformer<SQLException, String> ifTransformer0 = new IfTransformer<SQLException, String>(predicate0, (Transformer<? super SQLException, ? extends String>) null, (Transformer<? super SQLException, ? extends String>) null);
      IteratorUtils.toString((Iterator<SQLNonTransientException>) null, (Transformer<? super SQLNonTransientException, String>) ifTransformer0, "iterator", ",ch\"QB.H9Se?Qbp", ",ch\"QB.H9Se?Qbp");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Transformer<SQLException, SQLNonTransientConnectionException> transformer0 = ConstantTransformer.nullTransformer();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      IteratorUtils.objectGraphIterator((SQLNonTransientException) sQLSyntaxErrorException0, (Transformer<? super SQLNonTransientException, ? extends SQLNonTransientException>) transformer0);
      UniquePredicate.uniquePredicate();
      ConstantTransformer.constantTransformer("Closure must not be null");
      ConstantTransformer.nullTransformer();
      InvokerTransformer.invokerTransformer("utl)|nmH%l");
      int int0 = 10;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransactionRollbackException[]) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ArrayDeque<Closure<Object>> arrayDeque0 = new ArrayDeque<Closure<Object>>();
      ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) arrayDeque0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLWarning>) null, (Closure<? super SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, Locale.FilteringMode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, Locale.FilteringMode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, Locale.FilteringMode>(orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLTransactionRollbackException, Locale.FilteringMode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransactionRollbackException, Locale.FilteringMode>(abstractOrderedMapIteratorDecorator0);
      String string0 = "";
      int int0 = 87;
      String string1 = "Transformer must not be null";
      String string2 = "BV?gXT^i";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("BV?gXT^i");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLIntegrityConstraintViolationException0);
      SQLException sQLException0 = new SQLException("Transformer must not be null", "BV?gXT^i", sQLInvalidAuthorizationSpecException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 87, sQLException0);
      Consumer<SQLException> consumer0 = (Consumer<SQLException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractOrderedMapIteratorDecorator0.forEachRemaining(consumer0);
      Predicate<SQLTransactionRollbackException> predicate0 = EqualPredicate.equalPredicate(sQLTransactionRollbackException0);
      IteratorUtils.matchesAll((Iterator<SQLTransactionRollbackException>) abstractMapIteratorDecorator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>((DataTruncation) null);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) singletonListIterator0);
      IteratorUtils.loopingListIterator(list0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("PGosKOEu");
      iIOMetadataNode0.setNodeValue("PGosKOEu");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Estimated size must be greater than 0", "Estimated size must be greater than 0", (-1));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("PGosKOEu");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("PGosKOEu", sQLTransientConnectionException0);
      sQLNonTransientConnectionException0.spliterator();
      sQLNonTransientConnectionException0.getStackTrace();
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      IteratorUtils.contains((Iterator<Hashtable<ArrayList, SQLClientInfoException>>) null, (Object) singletonListIterator0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("delimiter may not be null");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) orderedIterator0, (Iterator<? extends IIOMetadataNode>) resettableIterator0);
      IteratorUtils.size(zippingIterator0);
      Integer integer0 = new Integer((-1909));
      IteratorUtils.getIterator(iIOMetadataNode1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      Vector<SQLException> vector0 = new Vector<SQLException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) vector0);
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) loopingListIterator0, (Transformer<? super BatchUpdateException, ? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ArrayDeque<Closure<Object>> arrayDeque0 = new ArrayDeque<Closure<Object>>();
      ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) arrayDeque0);
      ConstantTransformer.nullTransformer();
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Transformer<SQLException, SQLInvalidAuthorizationSpecException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) orderedMapIterator0, (Transformer<? super BatchUpdateException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      IteratorUtils.zippingIterator((Iterator<?>) iterator0, (Iterator<?>) iterator0, (Iterator<?>) orderedMapIterator0);
      SQLDataException sQLDataException0 = new SQLDataException();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(allPredicate0, allPredicate0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) allPredicate0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLException>) orderedMapIterator0, 1L);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      Vector<SQLException> vector0 = new Vector<SQLException>();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) vector0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      IteratorUtils.getIterator(enumeration0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) linkedList0);
      SQLWarning sQLWarning0 = new SQLWarning("+SGYj", "", 44);
      SingletonListIterator<SQLWarning> singletonListIterator0 = new SingletonListIterator<SQLWarning>(sQLWarning0);
      IteratorUtils.apply((Iterator<SQLWarning>) singletonListIterator0, (Closure<? super SQLWarning>) closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Properties[]) null, 4220, 2211);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ArrayDeque<Closure<Object>> arrayDeque0 = new ArrayDeque<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) arrayDeque0);
      IteratorUtils.apply((Iterator<SQLWarning>) null, (Closure<? super SQLWarning>) closure0);
      EmptyListIterator.emptyListIterator();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      SQLDataException sQLDataException0 = new SQLDataException();
      String string0 = "BV?gXT^i";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("BV?gXT^i");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("=", "BV?gXT^i");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTransactionRollbackException0);
      String string1 = "yp?)?46E";
      SQLException sQLException0 = new SQLException("yp?)?46E", "=", sQLDataException0);
      int int0 = 612;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("Transformer must not be null", (String) null, 612, sQLTransactionRollbackException0);
      Predicate<SQLTransactionRollbackException> predicate0 = EqualPredicate.equalPredicate(sQLTransactionRollbackException1);
      IteratorUtils.matchesAll((Iterator<SQLTransactionRollbackException>) null, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "", 612);
      Transformer<SQLNonTransientException, SQLDataException> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.objectGraphIterator((SQLNonTransientException) sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientException, ? extends SQLNonTransientException>) transformer0);
      IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) orderedIterator0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) list0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 87);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      DataTruncation dataTruncation0 = new DataTruncation(10, true, true, 10, 10);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) listIterator0, (Predicate<? super DataTruncation>) andPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("zHN7&.<G83,6c", (String) null, 2259);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) iterator0, (-1L), 311L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, Locale.FilteringMode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, Locale.FilteringMode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, Locale.FilteringMode>(orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLTransactionRollbackException, Locale.FilteringMode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransactionRollbackException, Locale.FilteringMode>(abstractOrderedMapIteratorDecorator0);
      int int0 = 87;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Bj?gXT^i");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLIntegrityConstraintViolationException0);
      SQLException sQLException0 = new SQLException("Transformer must not be null", "Bj?gXT^i", sQLInvalidAuthorizationSpecException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 87, sQLException0);
      MapIterator<DataTruncation, Closure<Predicate<Object>>> mapIterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, Closure<Predicate<Object>>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      sQLDataExceptionArray0[2] = sQLDataException0;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) resettableListIterator0);
      Transformer<SQLException, SQLNonTransientConnectionException> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.objectGraphIterator((SQLNonTransientException) sQLDataException0, (Transformer<? super SQLNonTransientException, ? extends SQLNonTransientException>) transformer0);
      IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ArrayDeque<Closure<Object>> arrayDeque0 = new ArrayDeque<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) arrayDeque0);
      IteratorUtils.apply((Iterator<SQLWarning>) null, (Closure<? super SQLWarning>) closure0);
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.singletonIterator(instanceofPredicate0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Vector<Integer> vector0 = new Vector<Integer>();
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Integer>) vector0);
      ListIterator<Integer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Integer>) resettableListIterator0);
      IteratorUtils.toList((Iterator<? extends Integer>) listIterator0, 100);
      IteratorUtils.find((Iterator<Hashtable<SQLClientInfoException, SQLException>>) null, (Predicate<? super Hashtable<SQLClientInfoException, SQLException>>) instanceofPredicate0);
      OrderedMapIterator<Integer, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.find((Iterator<Integer>) orderedMapIterator0, (Predicate<? super Integer>) instanceofPredicate0);
      IteratorUtils.isEmpty((Iterator<?>) null);
      IteratorUtils.getIterator((Object) null);
      IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) resettableIterator0, 612);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<?>) null, (Iterator<?>) resettableListIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.chainedIterator((Iterator<?>) resettableListIterator0, (Iterator<?>) resettableListIterator0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = (Enumeration<SQLFeatureNotSupportedException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Vector<SQLException> vector0 = new Vector<SQLException>();
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 1);
      OrderedMapIterator<SQLRecoverableException, HashSet<IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLRecoverableException, HashSet<IIOMetadataNode>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLRecoverableException, HashSet<IIOMetadataNode>>) orderedMapIterator0);
      iteratorArray0[0] = (Iterator<SQLRecoverableException>) mapIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 7026, (Throwable) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(object0, 0, 7026);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[3];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("The transformer array must not be null");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("The transformer array must not be null", (String) null, sQLRecoverableException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("b=4-#AZ<Z6m#", "b=4-#AZ<Z6m#", 1);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Transformer<SQLException, SQLInvalidAuthorizationSpecException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) orderedMapIterator0, (Transformer<? super BatchUpdateException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      IteratorUtils.zippingIterator((Iterator<?>) iterator0, (Iterator<?>) iterator0, (Iterator<?>) orderedMapIterator0);
      SQLDataException sQLDataException0 = new SQLDataException();
      IteratorUtils.size(orderedMapIterator0);
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.chainedIterator((Iterator<?>) resettableListIterator0, (Iterator<?>) resettableListIterator0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = (Enumeration<SQLFeatureNotSupportedException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      EmptyListIterator.emptyListIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>((String) null);
      IteratorUtils.toString((Iterator<String>) null, (Transformer<? super String, String>) constantTransformer0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<Locale.FilteringMode> resettableListIterator1 = IteratorUtils.emptyListIterator();
      IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) comparator0, (Iterator<? extends Locale.FilteringMode>) singletonListIterator0, (Iterator<? extends Locale.FilteringMode>) resettableListIterator1);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.chainedIterator((Iterator<?>) resettableListIterator0, (Iterator<?>) resettableListIterator0);
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, Locale.FilteringMode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, Locale.FilteringMode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, Locale.FilteringMode>(orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLTransactionRollbackException, Locale.FilteringMode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransactionRollbackException, Locale.FilteringMode>(abstractOrderedMapIteratorDecorator0);
      String string0 = "";
      int int0 = 87;
      String string1 = "Transformer must not be null";
      String string2 = "BV?gXT^i";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("BV?gXT^i");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLIntegrityConstraintViolationException0);
      SQLException sQLException0 = new SQLException("Transformer must not be null", "BV?gXT^i", sQLInvalidAuthorizationSpecException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 87, sQLException0);
      Predicate<SQLTransactionRollbackException> predicate0 = EqualPredicate.equalPredicate(sQLTransactionRollbackException0);
      IteratorUtils.matchesAll((Iterator<SQLTransactionRollbackException>) abstractMapIteratorDecorator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = 903;
      intArray0[2] = 903;
      intArray0[3] = 903;
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) null, (Collection<? super SQLFeatureNotSupportedException>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Vector<SQLException> vector0 = new Vector<SQLException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) null, (Collection<? super SQLFeatureNotSupportedException>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[0];
      IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((EnumSet<ClientInfoStatus>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.zippingIterator((Iterator<?>) resettableListIterator0, (Iterator<?>) resettableListIterator0, (Iterator<?>) resettableListIterator0);
      SQLDataException sQLDataException0 = new SQLDataException();
      EmptyListIterator.emptyListIterator();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[1];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", (String) null, 1073741824);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "", 5616);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientConnectionException0.forEach(consumer0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientConnectionException>) resettableListIterator1);
      sQLTransientConnectionException0.setNextException(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[3];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("The transformer array must not be null");
      IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0[0]);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<SQLTransientException> class0 = SQLTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.singletonIterator(sQLSyntaxErrorException0);
      IteratorUtils.chainedIterator((Iterator<?>) resettableListIterator0, (Iterator<?>) resettableIterator0);
      Vector<SQLException> vector0 = new Vector<SQLException>();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("#^X(7vX)QgouuE_'9r", "", sQLSyntaxErrorException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, 339);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      sQLDataExceptionArray0[2] = sQLDataException0;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) resettableListIterator0);
      Vector<String> vector0 = new Vector<String>();
      IteratorUtils.loopingIterator((Collection<? extends String>) vector0);
      Transformer<SQLException, SQLNonTransientConnectionException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.objectGraphIterator((SQLNonTransientException) sQLDataException0, (Transformer<? super SQLNonTransientException, ? extends SQLNonTransientException>) transformer0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Transformer<SQLException, String> transformer1 = ConstantTransformer.constantTransformer("yWe;`T9j7B);=)nbKf9");
      IfTransformer<SQLException, String> ifTransformer0 = new IfTransformer<SQLException, String>(predicate0, transformer1, transformer1);
      IteratorUtils.toString(iterator0, (Transformer<? super SQLNonTransientException, String>) ifTransformer0, "8", "8", "yWe;`T9j7B);=)nbKf9");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<?>) null, (Iterator<?>) null, (Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator");
      iIOMetadataNode0.setNodeValue("org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("$,mbyOxnC#)R]/VM", "$,mbyOxnC#)R]/VM", 31);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[9];
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("");
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException1;
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[8] = sQLTransactionRollbackException0;
      IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0);
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Transformer<SQLException, SQLInvalidAuthorizationSpecException> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) orderedMapIterator0, (Transformer<? super BatchUpdateException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      IteratorUtils.emptyOrderedIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      int[] intArray0 = new int[7];
      intArray0[0] = (-1826);
      intArray0[1] = 1;
      intArray0[2] = 102;
      intArray0[3] = 3652;
      intArray0[4] = 1129;
      intArray0[5] = 10;
      intArray0[6] = (-435);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("[qu", "[qu", batchUpdateException0);
      EqualPredicate.equalPredicate(sQLTransactionRollbackException0);
      SingletonListIterator<Predicate<Object>> singletonListIterator0 = new SingletonListIterator<Predicate<Object>>(uniquePredicate0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientConnectionException0.forEach(consumer0);
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientConnectionException>) resettableListIterator0);
      sQLTransientConnectionException0.setNextException(batchUpdateException0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) listIterator0, class0);
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ArrayDeque<Closure<Object>> arrayDeque0 = new ArrayDeque<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) arrayDeque0);
      IteratorUtils.apply((Iterator<SQLWarning>) null, (Closure<? super SQLWarning>) closure0);
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.singletonIterator(instanceofPredicate0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Vector<Integer> vector0 = new Vector<Integer>();
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Integer>) vector0);
      ListIterator<Integer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Integer>) resettableListIterator0);
      IteratorUtils.toList((Iterator<? extends Integer>) listIterator0, 100);
      IteratorUtils.find((Iterator<Hashtable<SQLClientInfoException, SQLException>>) null, (Predicate<? super Hashtable<SQLClientInfoException, SQLException>>) instanceofPredicate0);
      OrderedMapIterator<Integer, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.find((Iterator<Integer>) orderedMapIterator0, (Predicate<? super Integer>) instanceofPredicate0);
      IteratorUtils.isEmpty((Iterator<?>) null);
      ResettableListIterator<SQLNonTransientException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<SQLNonTransientException>) resettableListIterator1, (Transformer<? super SQLNonTransientException, String>) transformer0, "setValue() is not supported", "wb^_%Mw", "wb^_%Mw");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getFirstChild();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      int[] intArray0 = new int[5];
      intArray0[0] = 1312;
      intArray0[1] = 1312;
      intArray0[2] = 1066;
      intArray0[3] = 1312;
      intArray0[4] = 1312;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 1312, intArray0);
      linkedHashSet0.add(batchUpdateException0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) linkedHashSet0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<BatchUpdateException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      IteratorUtils.singletonIterator(linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = 903;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", intArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", batchUpdateException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("b=4-#AZ<Z6m#", "b=4-#AZ<Z6m#", 1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLInvalidAuthorizationSpecException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 903;
      Iterator<Integer> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      int[] intArray0 = new int[6];
      intArray0[1] = 227;
      intArray0[2] = (-2564);
      intArray0[3] = 93;
      intArray0[4] = (-17);
      intArray0[5] = (-1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      EmptyListIterator.emptyListIterator();
      Integer integer0 = new Integer(335);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<SQLException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLException>>) linkedList0);
      PredicateTransformer<SQLWarning> predicateTransformer0 = new PredicateTransformer<SQLWarning>(predicate0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "", batchUpdateException0);
      Boolean boolean0 = predicateTransformer0.transform(sQLWarning0);
      IteratorUtils.getIterator(boolean0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(batchUpdateException0);
      DataTruncation dataTruncation0 = new DataTruncation((-1933), true, false, 233, (-2564), sQLTransientConnectionException0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>((Predicate<? super Object>) null);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nullIsFalsePredicate0, (Predicate<? super Object>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) listIterator0, (Predicate<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator");
      IteratorUtils.nodeListIterator(nodeList0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("", "");
      Iterator<SQLTransactionRollbackException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) iterator0, 0L, 0L);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      sQLDataExceptionArray0[2] = sQLDataException0;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) resettableListIterator0);
      Vector<String> vector0 = new Vector<String>();
      IteratorUtils.loopingIterator((Collection<? extends String>) vector0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("wG]h$DT7FP<-+&$GmG=", "", batchUpdateException0);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientException>) singletonIterator0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 123;
      longArray0[1] = 0L;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("IqE", "org.apache.commons.collections4.IteratorUtils", 123, longArray0, sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException1, 100, 3815);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("The transformer array must not be null");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("The transformer array must not be null", (String) null, sQLRecoverableException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("remove() is not supported");
      SQLException sQLException0 = null;
      sQLInvalidAuthorizationSpecException0.setNextException(sQLRecoverableException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (Throwable) null);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      IteratorUtils.contains((Iterator<Hashtable<ArrayList, SQLClientInfoException>>) resettableIterator0, (Object) resettableIterator0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      Predicate<IIOMetadataNode> predicate0 = IdentityPredicate.identityPredicate(iIOMetadataNode0);
      IteratorUtils.find((Iterator<IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        InvokerTransformer.invokerTransformer((String) null, (Class<?>[]) classArray0, (Object[]) classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The method to invoke must not be null
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      OrderedMapIterator<Integer, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<Integer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Integer>) orderedMapIterator0);
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      IteratorUtils.loopingListIterator((List<BatchUpdateException>) linkedList0);
      int[] intArray0 = new int[3];
      intArray0[0] = 29;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "", 29);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("()\"a8dhj:;i", sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException1);
      IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0);
      Class<Properties> class0 = Properties.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.singletonIterator(instanceofPredicate0);
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class1);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toList((Iterator<? extends Integer>) iterator0, 29);
      IteratorUtils.find((Iterator<Hashtable<SQLClientInfoException, SQLException>>) null, (Predicate<? super Hashtable<SQLClientInfoException, SQLException>>) predicate0);
      IteratorUtils.find(iterator0, (Predicate<? super Integer>) predicate0);
      IteratorUtils.isEmpty(iterator0);
      IteratorUtils.getIterator(orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("The transformer array must not be null");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("The transformer array must not be null", (String) null, sQLRecoverableException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("b=4-#AZ<Z6m#", "b=4-#AZ<Z6m#", 1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "b=4-#AZ<Z6m#");
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransientException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = 903;
      intArray0[2] = 903;
      intArray0[3] = 903;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      EmptyListIterator.emptyListIterator();
      Integer integer0 = new Integer((-4110));
      IteratorUtils.getIterator(integer0);
      DataTruncation dataTruncation0 = new DataTruncation(903, false, false, 903, 100, batchUpdateException0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) listIterator0, (Predicate<? super DataTruncation>) andPredicate0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[3];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("The transformer array must not be null");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("The transformer array must not be null", (String) null, sQLRecoverableException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientException>) iterator0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[3];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("The transformer array must not be null");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("The transformer array must not be null", (String) null, sQLRecoverableException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("b=4-#AZ<Z6m#", "b=4-#AZ<Z6m#", 1);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("+q0B S\",", "org.apache.commons.collections4.functors.InstantiateTransformer", 2280, sQLDataException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("@S=z'SRSI$$B=y7", "", 10);
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator((SQLNonTransientException[]) sQLDataExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientException>) resettableListIterator0, (Transformer<? super SQLNonTransientException, String>) null, "", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.zippingIterator((Iterator<?>) resettableListIterator0, (Iterator<?>) resettableListIterator0, (Iterator<?>) resettableListIterator0);
      SQLDataException sQLDataException0 = new SQLDataException();
      ListIterator<Object> listIterator0 = EmptyListIterator.emptyListIterator();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      String string0 = "p <~no{){B!i< 'IIfT";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("0sod-8ir*C/Jzwt{u", "p <~no{){B!i< 'IIfT");
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(listIterator0);
      SingletonListIterator<Predicate<Object>> singletonListIterator0 = new SingletonListIterator<Predicate<Object>>(equalPredicate0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) priorityQueue0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[0] = predicate0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("h*>d*`)}R`r9ZxC'E/", "&P#:Czb(e");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("List must not be null", "List must not be null", 91, sQLNonTransientException0);
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("&P#:Czb(e", "a]G", 1);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[2];
      sQLNonTransientExceptionArray0[0] = sQLNonTransientException0;
      sQLNonTransientExceptionArray0[1] = sQLNonTransientException1;
      ResettableListIterator<SQLNonTransientException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      Transformer<SQLNonTransientException, String> transformer0 = ConstantTransformer.constantTransformer(";=IQS[d,");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientException>) resettableListIterator1, (Transformer<? super SQLNonTransientException, String>) transformer0, "h*>d*`)}R`r9ZxC'E/", (String) null, "The map size must be 0 or 1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("InstantiateTransformer: Constructor must be public", (String) null, 1588, hashMap0);
      sQLSyntaxErrorException0.initCause(sQLClientInfoException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("InstantiateTransformer: Constructor must be public", sQLSyntaxErrorException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLNonTransientConnectionException0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.singletonIterator(instanceofPredicate0);
      InstanceofPredicate.instanceOfPredicate(class0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<Integer> list0 = new Stack<Integer>();
      IteratorUtils.find((Iterator<Hashtable<SQLClientInfoException, SQLException>>) null, (Predicate<? super Hashtable<SQLClientInfoException, SQLException>>) instanceofPredicate0);
      IteratorUtils.find((Iterator<Integer>) null, (Predicate<? super Integer>) instanceofPredicate0);
      Class<SQLDataException> class1 = SQLDataException.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      IteratorUtils.isEmpty(resettableIterator0);
      IteratorUtils.getIterator(instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OrderedMapIterator<Integer, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<Integer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Integer>) orderedMapIterator0);
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      IteratorUtils.loopingListIterator((List<BatchUpdateException>) linkedList0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "", 0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("()\"a8dhj:;i", sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException1);
      IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0);
      Class<Properties> class0 = Properties.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.singletonIterator(instanceofPredicate0);
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) iterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) priorityQueue0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[0] = predicate0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("MapIterator[]", "MapIterator[]");
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLNonTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("MapIterator[]", "", sQLNonTransientConnectionException0);
      EqualPredicate.equalPredicate(sQLTransactionRollbackException0);
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      SingletonListIterator<Predicate<Object>> singletonListIterator0 = new SingletonListIterator<Predicate<Object>>(equalPredicate0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      Class<SQLTransientException> class1 = SQLTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) listIterator0, class1);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends StringTokenizer>) null, (-700));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator");
      iIOMetadataNode0.setNodeValue("org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator");
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 2886);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Iterator<Stack<IIOMetadataNode>> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toString(iterator0);
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer.invokerTransformer("[]", (Class<?>[]) classArray0, (Object[]) classArray0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[3];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("[]", "");
      sQLNonTransientExceptionArray0[0] = sQLNonTransientException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[]", "[]", 903, sQLNonTransientException0);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      String string0 = "dJ<$G($MqvZRJd";
      String string1 = ":!j,";
      int int0 = 10;
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("dJ<$G($MqvZRJd", ":!j,", 10);
      sQLNonTransientExceptionArray0[2] = sQLNonTransientException1;
      int[] intArray0 = new int[6];
      intArray0[0] = 903;
      intArray0[1] = 10;
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[]", "The current criterion '");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 2262);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.emptyMapIterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) comparator0, (Iterator<? extends SQLNonTransientException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) priorityQueue0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[0] = predicate0;
      IteratorUtils.zippingIterator((Iterator<?>) iterator0, (Iterator<?>) resettableListIterator0, (Iterator<?>) resettableListIterator0);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException sQLDataException1 = new SQLDataException();
      EmptyListIterator.emptyListIterator();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[7];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("suffix may not be null");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("suffix may not be null");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("suffix may not be null");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("]*#rT[5/v`(BE5 F");
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, (-757), (-757));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Iterator<Stack<IIOMetadataNode>> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toString(iterator0);
      int[] intArray0 = new int[5];
      intArray0[1] = 903;
      String string0 = ";{*Xl=\"{$";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";{*Xl=\"{$");
      intArray0[2] = 903;
      intArray0[3] = 903;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      EmptyListIterator.emptyListIterator();
      Integer integer0 = new Integer((-4110));
      IteratorUtils.getIterator(integer0);
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 4);
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      predicateArray0[0] = predicate0;
      // Undeclared exception!
      try { 
        AnyPredicate.anyPredicate((Predicate<? super SQLException>[]) predicateArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not contain a null predicate, index 1 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Transformer must not be null", "Transformer must not be null");
      File file0 = MockFile.createTempFile("Transformer must not be null", "Transformer must not be null");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      sQLInvalidAuthorizationSpecException0.printStackTrace((PrintWriter) mockPrintWriter0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.singletonIterator(instanceofPredicate0);
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      SQLWarning sQLWarning0 = new SQLWarning("Transformer must not be null");
      sQLInvalidAuthorizationSpecException0.setNextException(sQLWarning0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      IteratorUtils.contains((Iterator<Hashtable<ArrayList, SQLClientInfoException>>) resettableIterator0, (Object) sQLTransientConnectionException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.zippingIterator((Iterator<?>) resettableListIterator0, (Iterator<?>) resettableListIterator0, (Iterator<?>) resettableListIterator0);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException sQLDataException1 = new SQLDataException();
      EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLClientInfoException[]) null, (-695));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.zippingIterator((Iterator<?>) resettableListIterator0, (Iterator<?>) resettableListIterator0, (Iterator<?>) resettableListIterator0);
      SQLDataException sQLDataException0 = new SQLDataException();
      EmptyListIterator.emptyListIterator();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[1];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", (String) null, 1073741824);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Stack<SQLTimeoutException>[] stackArray0 = (Stack<SQLTimeoutException>[]) Array.newInstance(Stack.class, 0);
      ResettableListIterator<Stack<SQLTimeoutException>> resettableListIterator0 = IteratorUtils.arrayListIterator(stackArray0);
      int int0 = (-719);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableListIterator0, (-719));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator");
      iIOMetadataNode0.setNodeValue("org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("", "");
      Iterator<Object> iterator0 = IteratorUtils.chainedIterator((Iterator<?>) nodeListIterator0, (Iterator<?>) nodeListIterator0);
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(1, int0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLNonTransientConnectionException0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Iterator<Stack<IIOMetadataNode>> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toString(iterator0);
      int[] intArray0 = new int[5];
      intArray0[1] = 903;
      intArray0[2] = 903;
      intArray0[3] = 903;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      EmptyListIterator.emptyListIterator();
      Integer integer0 = new Integer((-4110));
      IteratorUtils.getIterator(integer0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
      assertNotNull(iterator0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 4);
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) vector0);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) resettableListIterator0;
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      iteratorArray0[1] = (Iterator<IIOMetadataNode>) listIterator0;
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(vector0);
      iteratorArray0[2] = (Iterator<IIOMetadataNode>) reverseListIterator0;
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) iteratorArray0[1]);
      iteratorArray0[3] = (Iterator<IIOMetadataNode>) zippingIterator0;
      IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iterator0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "q='J}PlY.z sUyt");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-403), 130);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.emptyMapIterator();
      EmptyListIterator.emptyListIterator();
      Collection<Locale.FilteringMode> collection0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      SQLDataException sQLDataException1 = new SQLDataException("+q0B S\",", "", 2280);
      sQLDataExceptionArray0[0] = sQLDataException1;
      sQLDataExceptionArray0[2] = sQLDataException0;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) resettableListIterator0);
      Vector<String> vector0 = new Vector<String>();
      ResettableIterator<String> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends String>) vector0);
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) hashSet0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Class<SQLSyntaxErrorException>[] classArray0 = (Class<SQLSyntaxErrorException>[]) Array.newInstance(Class.class, 1);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      classArray0[0] = class0;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("|PwI8D#5(^T5", classArray0, sQLDataExceptionArray0);
      IteratorUtils.toString((Iterator<String>) resettableIterator0, (Transformer<? super String, String>) invokerTransformer0);
      IteratorUtils.getIterator(vector0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) priorityQueue0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[0] = predicate0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("MapIterator[]", "? @l9WR");
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLNonTransientConnectionException0);
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      IteratorUtils.arrayListIterator(predicateArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      DefaultEquator<LinkedList<SQLRecoverableException>> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate(linkedList0, (Equator<LinkedList<SQLRecoverableException>>) defaultEquator0);
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 3);
      Class<SQLDataException> class1 = SQLDataException.class;
      classArray0[0] = class1;
      Class<SQLDataException> class2 = SQLDataException.class;
      classArray0[1] = class2;
      Class<SQLDataException> class3 = SQLDataException.class;
      classArray0[2] = class3;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("toIndex = ", classArray0, predicateArray0);
      IteratorUtils.toString((Iterator<String>) null, (Transformer<? super String, String>) invokerTransformer0);
      Comparator<Locale.FilteringMode> comparator0 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode0);
      IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) comparator0, (Iterator<? extends Locale.FilteringMode>) singletonListIterator0, (Iterator<? extends Locale.FilteringMode>) singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException sQLDataException1 = new SQLDataException();
      EmptyListIterator.emptyListIterator();
      IteratorUtils.toString((Iterator<Properties>) null);
      LinkedList<SQLSyntaxErrorException>[] linkedListArray0 = (LinkedList<SQLSyntaxErrorException>[]) Array.newInstance(LinkedList.class, 4);
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      linkedListArray0[0] = linkedList0;
      LinkedList<SQLSyntaxErrorException> linkedList1 = new LinkedList<SQLSyntaxErrorException>();
      linkedListArray0[1] = linkedList1;
      LinkedList<SQLSyntaxErrorException> linkedList2 = new LinkedList<SQLSyntaxErrorException>();
      linkedListArray0[2] = linkedList2;
      LinkedList<SQLSyntaxErrorException> linkedList3 = new LinkedList<SQLSyntaxErrorException>();
      linkedListArray0[3] = linkedList3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(linkedListArray0, 3222, 3222);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Iterator<Stack<IIOMetadataNode>> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toString(iterator0);
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)14;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Transformer<Object, String> transformer0 = new ConstantTransformer<Object, String>("[]");
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[3];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("[]", "");
      sQLNonTransientExceptionArray0[0] = sQLNonTransientException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[]", "[]", 903, sQLNonTransientException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("[]", "");
      IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      ListIterator<SQLTransientConnectionException> listIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      DefaultEquator<LinkedList<SQLRecoverableException>> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate(linkedList0, (Equator<LinkedList<SQLRecoverableException>>) defaultEquator0);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      IteratorUtils.toString((Iterator<String>) null, (Transformer<? super String, String>) invokerTransformer0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode0);
      IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) null, (Iterator<? extends Locale.FilteringMode>) singletonListIterator0, (Iterator<? extends Locale.FilteringMode>) singletonListIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      ArrayListIterator<SQLTransactionRollbackException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLTransactionRollbackException>(sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("5sN,oH6", "5sN,oH6");
      File file0 = MockFile.createTempFile("5sN,oH6", "5sN,oH6");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      sQLInvalidAuthorizationSpecException0.printStackTrace((PrintWriter) mockPrintWriter0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "5sN,oH6";
      stringArray0[1] = "5sN,oH6";
      stringArray0[2] = "5sN,oH6";
      stringArray0[3] = "5sN,oH6";
      stringArray0[4] = "5sN,oH6";
      int int0 = (-1367);
      int int1 = 495;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringArray0, (-1367), 495);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Transformer<SQLException, SQLInvalidAuthorizationSpecException> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) orderedMapIterator0, (Transformer<? super BatchUpdateException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      IteratorUtils.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[1] = (Predicate<Object>) uniquePredicate0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLRecoverableException>) linkedList0);
      IteratorUtils.skippingIterator((Iterator<SQLRecoverableException>) resettableListIterator0, 3430L);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(", ", ", ", 1197, (Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1449, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<SQLNonTransientException, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, 1073741824);
      SQLException sQLException0 = new SQLException((String) null, sQLInvalidAuthorizationSpecException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("/lf#6`j6^\u00EBR sVY:", (String) null, sQLException0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[6];
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLSyntaxErrorException0;
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLSyntaxErrorException0;
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientException>) objectArrayListIterator0);
      IteratorUtils.skippingIterator((Iterator<SQLNonTransientException>) mapIterator0, (long) 1073741824);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException sQLDataException1 = new SQLDataException("MjavtqP!_!z!tF");
      sQLDataException1.getSuppressed();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      SQLDataException sQLDataException2 = new SQLDataException("+q0B S\",", "", 2280);
      sQLDataExceptionArray0[0] = sQLDataException2;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      Vector<String> vector0 = new Vector<String>();
      IteratorUtils.loopingIterator((Collection<? extends String>) vector0);
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) hashSet0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLDataException0);
      IteratorUtils.getIterator(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 9);
      OrderedMapIterator<SQLNonTransientConnectionException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[2] = (Iterator<SQLNonTransientConnectionException>) orderedMapIterator0;
      OrderedMapIterator<SQLNonTransientConnectionException, BatchUpdateException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLNonTransientConnectionException, BatchUpdateException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, BatchUpdateException>) orderedMapIterator1);
      iteratorArray0[3] = (Iterator<SQLNonTransientConnectionException>) mapIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[2];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.apache.commons.collections4.iterators.ArrayListIterator", "org.apache.commons.collections4.iterators.ArrayListIterator");
      SQLDataException sQLDataException0 = new SQLDataException("+9", "+9", 0);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLDataException0;
      IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 7);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      classArray0[3] = class0;
      Class<String> class3 = String.class;
      classArray0[4] = class3;
      Class<String> class4 = String.class;
      classArray0[5] = class4;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("+9", "`LI11=8Ct<P)hEUi");
      SQLException sQLException0 = new SQLException("", "Qp@C='L#AGSh qI0P", 1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLException0);
      IteratorUtils.getIterator((Object) null);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((String[]) null, 10, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException sQLDataException1 = new SQLDataException("MjavtqP!_!z!tF");
      sQLDataException1.getSuppressed();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      SQLDataException sQLDataException2 = new SQLDataException("+q0B S\",", "", 2280);
      sQLDataExceptionArray0[0] = sQLDataException2;
      sQLDataExceptionArray0[1] = sQLDataException1;
      sQLDataExceptionArray0[2] = sQLDataException0;
      sQLDataExceptionArray0[3] = sQLDataException1;
      sQLDataExceptionArray0[4] = sQLDataException0;
      sQLDataExceptionArray0[5] = sQLDataException1;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) resettableListIterator0);
      Vector<String> vector0 = new Vector<String>();
      IteratorUtils.loopingIterator((Collection<? extends String>) vector0);
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) hashSet0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransactionRollbackException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(batchUpdateException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator");
      iIOMetadataNode0.setNodeValue("org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator");
      IteratorUtils.nodeListIterator(nodeList0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("", "");
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException(sQLDataException1);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("MjavtqP!_!z!tF");
      sQLDataExceptionArray0[3] = sQLDataException3;
      sQLDataException3.getSuppressed();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "04~1aoUC1`7", 555);
      Properties properties0 = new Properties();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLDataException3);
      properties0.put(sQLIntegrityConstraintViolationException0, sQLDataException2);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ArrayDeque<Closure<Object>> arrayDeque0 = new ArrayDeque<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) arrayDeque0);
      IteratorUtils.apply((Iterator<SQLWarning>) null, (Closure<? super SQLWarning>) closure0);
      Properties[] propertiesArray0 = new Properties[0];
      int int0 = (-743);
      int int1 = 31;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(propertiesArray0, (-743), 31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Vector<StringTokenizer>[] vectorArray0 = (Vector<StringTokenizer>[]) Array.newInstance(Vector.class, 9);
      Stack<StringTokenizer> stack0 = new Stack<StringTokenizer>();
      vectorArray0[0] = (Vector<StringTokenizer>) stack0;
      Stack<StringTokenizer> stack1 = new Stack<StringTokenizer>();
      vectorArray0[1] = (Vector<StringTokenizer>) stack1;
      Stack<StringTokenizer> stack2 = new Stack<StringTokenizer>();
      vectorArray0[2] = (Vector<StringTokenizer>) stack2;
      Stack<StringTokenizer> stack3 = new Stack<StringTokenizer>();
      vectorArray0[3] = (Vector<StringTokenizer>) stack3;
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      vectorArray0[4] = vector0;
      Stack<StringTokenizer> stack4 = new Stack<StringTokenizer>();
      vectorArray0[5] = (Vector<StringTokenizer>) stack4;
      Vector<StringTokenizer> vector1 = new Vector<StringTokenizer>(0);
      vectorArray0[6] = vector1;
      Vector<StringTokenizer> vector2 = new Vector<StringTokenizer>();
      vectorArray0[7] = vector2;
      Vector<StringTokenizer> vector3 = new Vector<StringTokenizer>();
      vectorArray0[8] = vector3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(vectorArray0, 12, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Properties properties0 = new Properties();
      String string0 = "Cannot store a duplicate value (\"";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("Cannot store a duplicate value (\"", "Cannot store a duplicate value (\"");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Cannot store a duplicate value (\"
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
      String string0 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      String string1 = "org.apache.commons.collections4.iterators.ListIteratorWrapper";
      iIOMetadataNode0.getAttributeNodeNS("org.apache.commons.collections4.iterators.ListIteratorWrapper", "org.apache.commons.collections4.iterators.ListIteratorWrapper");
      // Undeclared exception!
      try { 
        iIOMetadataNode0.setAttributeNodeNS((Attr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<Object> iterator0 = IteratorUtils.chainedIterator((Iterator<?>) resettableListIterator0, (Iterator<?>) resettableListIterator0);
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Closure<Object>>) null, (Transformer<? super Closure<Object>, ? extends String>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException sQLDataException1 = new SQLDataException("MjavtqP!_!z!tF");
      sQLDataException1.getSuppressed();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      int int0 = 2280;
      SQLDataException sQLDataException2 = new SQLDataException("+q0B S\",", "", 2280);
      sQLDataExceptionArray0[0] = sQLDataException2;
      sQLDataExceptionArray0[1] = sQLDataException1;
      sQLDataExceptionArray0[2] = sQLDataException0;
      sQLDataExceptionArray0[3] = sQLDataException1;
      sQLDataExceptionArray0[4] = sQLDataException0;
      sQLDataExceptionArray0[5] = sQLDataException1;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) resettableListIterator0);
      Vector<String> vector0 = new Vector<String>();
      IteratorUtils.loopingIterator((Collection<? extends String>) vector0);
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      Transformer<SQLException, SQLIntegrityConstraintViolationException> transformer0 = InvokerTransformer.invokerTransformer("");
      IteratorUtils.transformedIterator((Iterator<? extends SQLTimeoutException>) resettableListIterator0, (Transformer<? super SQLTimeoutException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) properties0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Transformer<SQLException, SQLInvalidAuthorizationSpecException> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) orderedMapIterator0, (Transformer<? super BatchUpdateException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      IteratorUtils.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) instanceofPredicate0);
      predicateArray0[0] = predicate0;
      // Undeclared exception!
      try { 
        OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.OrPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashSet<BatchUpdateException>[] hashSetArray0 = (HashSet<BatchUpdateException>[]) Array.newInstance(HashSet.class, 4);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      hashSetArray0[0] = (HashSet<BatchUpdateException>) linkedHashSet0;
      LinkedHashSet<BatchUpdateException> linkedHashSet1 = new LinkedHashSet<BatchUpdateException>();
      hashSetArray0[1] = (HashSet<BatchUpdateException>) linkedHashSet1;
      LinkedHashSet<BatchUpdateException> linkedHashSet2 = new LinkedHashSet<BatchUpdateException>();
      hashSetArray0[2] = (HashSet<BatchUpdateException>) linkedHashSet2;
      HashSet<BatchUpdateException> hashSet0 = new HashSet<BatchUpdateException>();
      hashSetArray0[3] = hashSet0;
      ResettableListIterator<HashSet<BatchUpdateException>> resettableListIterator0 = IteratorUtils.arrayListIterator(hashSetArray0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Iterator<Stack<IIOMetadataNode>> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toString(iterator0);
      int int0 = 0;
      int int1 = 903;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((String[]) null, 0, 903);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("5sN,oH6", "5sN,oH6");
      File file0 = MockFile.createTempFile("org.apache.commons.collections4.functors.IdentityPredicate", "org.apache.commons.collections4.functors.IdentityPredicate");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      sQLInvalidAuthorizationSpecException0.printStackTrace((PrintWriter) mockPrintWriter0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.singletonIterator(instanceofPredicate0);
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      OrderedMapIterator<IIOMetadataNode, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) orderedMapIterator0, (Predicate<? super IIOMetadataNode>) instanceofPredicate0);
      Iterator<Integer> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 9);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long long0 = 0L;
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Properties>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 7);
      OrderedMapIterator<SQLClientInfoException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) orderedMapIterator0;
      // Undeclared exception!
      try { 
        AllPredicate.allPredicate((Predicate<? super SQLClientInfoException>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 3);
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<SQLTransactionRollbackException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) listIterator1;
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[1] = (Iterator<SQLTransactionRollbackException>) orderedIterator0;
      SQLDataException sQLDataException0 = new SQLDataException("");
      int int0 = (-3053);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLDataException0, (-3053), (-3053));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator");
      IteratorUtils.nodeListIterator(nodeList0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException sQLDataException1 = new SQLDataException("V,B%<}>Fj<'Wd", "V,B%<}>Fj<'Wd");
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      SingletonListIterator<Predicate<Object>> singletonListIterator0 = new SingletonListIterator<Predicate<Object>>(predicate0);
      Predicate<Object> predicate1 = FalsePredicate.falsePredicate();
      Predicate<Object> predicate2 = IteratorUtils.find((Iterator<Predicate<Object>>) singletonListIterator0, (Predicate<? super Predicate<Object>>) predicate1);
      assertNull(predicate2);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLTransactionRollbackException>) null, (Predicate<? super SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      OrderedMapIterator<Integer, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<Integer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Integer>) orderedMapIterator0);
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      IteratorUtils.loopingListIterator((List<BatchUpdateException>) linkedList0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      Class<Properties> class0 = Properties.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.singletonIterator(instanceofPredicate0);
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class1);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.find((Iterator<Hashtable<SQLClientInfoException, SQLException>>) null, (Predicate<? super Hashtable<SQLClientInfoException, SQLException>>) predicate0);
      IteratorUtils.find(iterator0, (Predicate<? super Integer>) predicate0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Iterator<?> iterator1 = IteratorUtils.getIterator(orderedMapIterator0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 9);
      OrderedMapIterator<SQLNonTransientConnectionException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[2] = (Iterator<SQLNonTransientConnectionException>) orderedMapIterator0;
      IteratorUtils.pushbackIterator((Iterator<?>) orderedMapIterator0);
      OrderedMapIterator<SQLNonTransientConnectionException, BatchUpdateException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, BatchUpdateException>) orderedMapIterator1);
      IteratorUtils.emptyMapIterator();
      EmptyListIterator.emptyListIterator();
      String string0 = "=";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("{,x:EDf1Kds~");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("=", "The closure array must not be null", sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<Object> iterator0 = IteratorUtils.chainedIterator((Iterator<?>) resettableListIterator0, (Iterator<?>) resettableListIterator0);
      IteratorUtils.size(iterator0);
      ResettableListIterator<Integer> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<Integer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Integer>) resettableListIterator1);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      TreeSet<Properties> treeSet0 = new TreeSet<Properties>();
      TreeSet<Properties> treeSet1 = new TreeSet<Properties>((SortedSet<Properties>) treeSet0);
      stack0.containsAll(treeSet1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      stack0.add(sQLFeatureNotSupportedException0);
      IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) stack0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[3];
      String string0 = "I`iIX";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "I`iIX", sQLFeatureNotSupportedException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("Node must not be null", "Node must not be null", sQLFeatureNotSupportedException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      int int0 = 0;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, 0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0, (-394L), (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Iterator<Stack<IIOMetadataNode>> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toString(iterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("? @l9WR", "org.apache.commons.collections4.map.AbstractHashedMap");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[]", sQLNonTransientConnectionException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLInvalidAuthorizationSpecException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      predicateArray0[2] = (Predicate<Object>) equalPredicate0;
      predicateArray0[3] = (Predicate<Object>) equalPredicate0;
      IteratorUtils.arrayListIterator(predicateArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Transformer must not be null", "org.apache.commons.collections4.bidimap.TreeBidiMap$Node", sQLInvalidAuthorizationSpecException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      DefaultEquator<Object> defaultEquator1 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate1 = new EqualPredicate<Object>(defaultEquator0, defaultEquator1);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(equalPredicate1, predicate0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.constantTransformer(iIOMetadataNode0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicateArray0[3]);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      AllPredicate.allPredicate((Predicate<? super IIOMetadataNode>[]) predicateArray0);
      IIOMetadataNode iIOMetadataNode1 = IteratorUtils.find((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) predicateArray0[2]);
      assertNull(iIOMetadataNode1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      OrderedMapIterator<Integer, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<Integer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Integer>) orderedMapIterator0);
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<BatchUpdateException>) linkedList0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1187);
      intArray0[2] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", intArray0);
      linkedList0.add(batchUpdateException0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      MapIterator<IIOMetadataNode, StringTokenizer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<IIOMetadataNode, StringTokenizer> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ? extends StringTokenizer>) mapIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) iterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      predicateArray0[0] = predicate0;
      LinkedList<InstanceofPredicate> linkedList1 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList1);
      predicateArray0[1] = predicate1;
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, (-1187), 0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", dataTruncation0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTransactionRollbackException0, defaultEquator0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, equalPredicate0);
      predicateArray0[2] = (Predicate<Object>) andPredicate0;
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[3] = (Predicate<Object>) instanceofPredicate0;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.constantTransformer(iIOMetadataNode0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, equalPredicate0);
      predicateArray0[4] = (Predicate<Object>) transformedPredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[5] = (Predicate<Object>) anyPredicate0;
      Predicate<IIOMetadataNode> predicate2 = AllPredicate.allPredicate((Predicate<? super IIOMetadataNode>[]) predicateArray0);
      IIOMetadataNode iIOMetadataNode1 = IteratorUtils.find((Iterator<IIOMetadataNode>) mapIterator1, (Predicate<? super IIOMetadataNode>) predicate2);
      assertNull(iIOMetadataNode1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) priorityQueue0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[0] = predicate0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("MapIterator[]", "? @l9WR");
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLNonTransientConnectionException0);
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      IteratorUtils.arrayListIterator(predicateArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("MapIterator[]", "", sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 2);
      MapIterator<Integer, ServiceLoader<Properties>> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<Integer, ServiceLoader<Properties>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Integer, ServiceLoader<Properties>>(mapIterator0);
      iteratorArray0[0] = (Iterator<Integer>) abstractMapIteratorDecorator0;
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) abstractMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        abstractMapIteratorDecorator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "c78b4\"Sd]2~](0[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MapIterator<BatchUpdateException, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) mapIterator0);
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 9);
      MapIterator<InstanceofPredicate, SQLDataException> mapIterator1 = IteratorUtils.emptyMapIterator();
      iteratorArray0[0] = (Iterator<InstanceofPredicate>) mapIterator1;
      MapIterator<InstanceofPredicate, SQLTransientException> mapIterator2 = IteratorUtils.emptyMapIterator();
      iteratorArray0[1] = (Iterator<InstanceofPredicate>) mapIterator2;
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[6];
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<DataTruncation> class1 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      Class<Properties> class2 = Properties.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class2);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[3] = instanceofPredicate3;
      Class<SQLTimeoutException> class3 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class3);
      instanceofPredicateArray0[4] = instanceofPredicate4;
      InstanceofPredicate instanceofPredicate5 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[5] = instanceofPredicate5;
      int int0 = 1;
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.arrayIterator(instanceofPredicateArray0, 1);
      iteratorArray0[2] = (Iterator<InstanceofPredicate>) resettableIterator0;
      ArrayListIterator<InstanceofPredicate> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<InstanceofPredicate>(instanceofPredicate5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException sQLDataException1 = new SQLDataException("MjavtqP!_!z!tF");
      sQLDataException1.getSuppressed();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      SQLDataException sQLDataException2 = new SQLDataException("+q0B S\",", "", 2280);
      sQLDataExceptionArray0[0] = sQLDataException2;
      sQLDataExceptionArray0[1] = sQLDataException1;
      sQLDataExceptionArray0[2] = sQLDataException0;
      sQLDataExceptionArray0[3] = sQLDataException1;
      sQLDataExceptionArray0[4] = sQLDataException0;
      sQLDataExceptionArray0[5] = sQLDataException1;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) resettableListIterator0);
      Vector<String> vector0 = new Vector<String>();
      ResettableIterator<String> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends String>) vector0);
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ArrayDeque<Closure<Object>> arrayDeque0 = new ArrayDeque<Closure<Object>>();
      IteratorUtils.emptyMapIterator();
      EmptyListIterator.emptyListIterator();
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>[]) iteratorArray0);
      IteratorUtils.emptyMapIterator();
      ListIterator<Object> listIterator0 = EmptyListIterator.emptyListIterator();
      boolean boolean0 = IteratorUtils.isEmpty(listIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = "Ml(I8.62LWb!t&";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Ml(I8.62LWb!t&");
      int int0 = 0;
      Hashtable<Object, IIOMetadataNode> hashtable0 = new Hashtable<Object, IIOMetadataNode>(0);
      Transformer<Object, IIOMetadataNode> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends IIOMetadataNode>) hashtable0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Iterator<? extends IIOMetadataNode>) iterator0, (Iterator<? extends IIOMetadataNode>) iterator0);
      Iterator<BatchUpdateException> iterator1 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLException>) null, (Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(">mOsqS &");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("?}[WKK", sQLRecoverableException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null, (-941), sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0, 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator");
      iIOMetadataNode0.setNodeValue("org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator");
      IteratorUtils.nodeListIterator(nodeList0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataExceptionArray0[0] = sQLDataException0;
      String string0 = "";
      SQLDataException sQLDataException1 = new SQLDataException("", "");
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException(sQLDataException1);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("MjavtqP!_!z!tF");
      sQLDataExceptionArray0[3] = sQLDataException3;
      sQLDataException3.getSuppressed();
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) objectArrayListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[2];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.apache.commons.collections4.iterators.ArrayListIterator", "org.apache.commons.collections4.iterators.ArrayListIterator");
      sQLNonTransientExceptionArray0[0] = sQLNonTransientException0;
      SQLDataException sQLDataException0 = new SQLDataException("+9", "+9", 0);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLDataException0;
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 7);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<String> class3 = String.class;
      classArray0[3] = class3;
      Class<String> class4 = String.class;
      classArray0[4] = class4;
      Class<String> class5 = String.class;
      classArray0[5] = class5;
      Class<String> class6 = String.class;
      classArray0[6] = class6;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("+9", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientException>) resettableIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0, "+9", "org.apache.commons.collections4.iterators.ArrayListIterator", "+9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '+9' on 'class java.sql.SQLNonTransientException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }
}
