/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 11:51:30 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Comparator<SQLFeatureNotSupportedException> comparator0 = (Comparator<SQLFeatureNotSupportedException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<SQLFeatureNotSupportedException, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) iterator0, (Iterator<?>) mapIterator0, (Iterator<?>) iterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<?>) mapIterator0, (Iterator<?>) null, (Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) orderedIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<SQLNonTransientConnectionException, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (Iterator<? extends SQLNonTransientConnectionException>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLInvalidAuthorizationSpecException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLInvalidAuthorizationSpecException>(orderedMapIterator0);
      OrderedMapIterator<SQLTimeoutException, SQLNonTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends SQLNonTransientException>) abstractOrderedMapIteratorDecorator0);
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLNonTransientException> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLNonTransientException>(orderedMapIterator1);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator1, (Iterator<? extends SQLTimeoutException>) orderedMapIterator1);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.objectGraphIterator((SQLTransactionRollbackException) null, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) null);
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) iterator0, (Iterator<? extends SQLTransactionRollbackException>) iterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>((SQLTransientConnectionException) null);
      singletonListIterator0.next();
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientConnectionException>) singletonListIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      Iterator<SQLClientInfoException> iterator0 = stack0.iterator();
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) listIterator0);
      assertTrue(list0.contains(iIOMetadataNode0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", sQLFeatureNotSupportedException0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, class0);
      assertEquals(1, sQLIntegrityConstraintViolationExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MapIterator<Properties, SQLDataException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      SkippingIterator<Properties> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Properties>) mapIterator0, 1L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[4];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, ", ", (-2167));
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException0;
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) objectArrayListIterator0, 1);
      assertEquals(1, objectArrayListIterator0.previousIndex());
      assertEquals(2, objectArrayListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 1);
      HashMap<SQLIntegrityConstraintViolationException, LinkedHashSet<Integer>> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, LinkedHashSet<Integer>>();
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, LinkedHashSet<Integer>> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, LinkedHashSet<Integer>>(hashMap0);
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) entrySetMapIterator0;
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, SQLSyntaxErrorException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, SQLSyntaxErrorException>(orderedMapIterator0);
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 8);
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) orderedMapIterator0;
      iteratorArray0[1] = (Iterator<SQLTransientConnectionException>) orderedMapIterator0;
      iteratorArray0[2] = (Iterator<SQLTransientConnectionException>) abstractOrderedMapIteratorDecorator0;
      iteratorArray0[3] = (Iterator<SQLTransientConnectionException>) abstractOrderedMapIteratorDecorator0;
      iteratorArray0[4] = (Iterator<SQLTransientConnectionException>) abstractOrderedMapIteratorDecorator0;
      iteratorArray0[5] = (Iterator<SQLTransientConnectionException>) orderedMapIterator0;
      iteratorArray0[6] = (Iterator<SQLTransientConnectionException>) abstractOrderedMapIteratorDecorator0;
      iteratorArray0[7] = (Iterator<SQLTransientConnectionException>) orderedMapIterator0;
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("BcSV<]", "BcSV<]", sQLTransactionRollbackException0);
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0, (long) 1);
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(singletonListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 2);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[8];
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Iterator<HashSet<SQLSyntaxErrorException>>, SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 1);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("BFzE]vVL8{f", (Class<?>[]) classArray0, (Object[]) classArray0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("BFzE]vVL8{f");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      ObjectArrayIterator<IIOMetadataNode> objectArrayIterator0 = new ObjectArrayIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) objectArrayIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'BFzE]vVL8{f' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Stack<SQLIntegrityConstraintViolationException> stack0 = new Stack<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("7|~0%'Z6|yrRrS", "%D");
      stack0.add(sQLIntegrityConstraintViolationException0);
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) stack0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) arrayList0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", "org.apache.commons.collections4.IteratorUtils", (Throwable) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", sQLDataException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.IteratorUtils", sQLTransientException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("ListIterator must not be null", "ListIterator must not be null", 3239, sQLInvalidAuthorizationSpecException0);
      arrayList0.add(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, class0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Transformer<Object, SQLSyntaxErrorException> transformer0 = ConstantTransformer.nullTransformer();
      DataTruncation dataTruncation0 = new DataTruncation(162, false, false, 162, 162, (Throwable) null);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLException>) listIterator0, (Transformer<? super SQLException, ? extends SQLSyntaxErrorException>) transformer0);
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      Iterator<SQLSyntaxErrorException> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator(iterator1, (long) 162);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Iterator<SQLNonTransientException> iterator0 = EmptyIterator.emptyIterator();
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-844));
      integerArray0[1] = integer0;
      integerArray0[4] = integerArray0[1];
      Transformer<Object, SQLSyntaxErrorException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLSyntaxErrorException> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends SQLException>) iterator0, (Transformer<? super SQLException, ? extends SQLSyntaxErrorException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator(iterator1, (long) integerArray0[4]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "`|X[1,{E$R]");
      stack0.add(sQLNonTransientConnectionException0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) stack0);
      // Undeclared exception!
      IteratorUtils.size(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>((SQLFeatureNotSupportedException) null);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<SQLException> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLFeatureNotSupportedException>) singletonListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input Object must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Object>) objectArrayListIterator0, (Predicate<? super Object>) nonePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NonePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) null, 1669);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      UniquePredicate<SQLInvalidAuthorizationSpecException> uniquePredicate0 = new UniquePredicate<SQLInvalidAuthorizationSpecException>();
      DataTruncation dataTruncation0 = new DataTruncation(1, false, false, 12, 12);
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>(dataTruncation0, false);
      Factory<SQLInvalidAuthorizationSpecException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<SQLException, SQLInvalidAuthorizationSpecException> factoryTransformer0 = new FactoryTransformer<SQLException, SQLInvalidAuthorizationSpecException>(factory0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLWarning>) singletonIterator0, (Transformer<? super SQLWarning, ? extends SQLInvalidAuthorizationSpecException>) factoryTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.find(iterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) uniquePredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      int[] intArray0 = new int[9];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLNonTransientConnectionExceptionArray0[0]);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) resettableIterator0, (-1L), (long) 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLClientInfoException[]) null, 546, 3234);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, 14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Iterator<HashSet<SQLSyntaxErrorException>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0, (-1), 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 128);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(objectArray0, (-1243), (-1243));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLNonTransientException[]) null, 1195);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ArrayDeque<Class<IIOMetadataNode>>[] arrayDequeArray0 = (ArrayDeque<Class<IIOMetadataNode>>[]) Array.newInstance(ArrayDeque.class, 7);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(arrayDequeArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLInvalidAuthorizationSpecException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 0, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      SingletonListIterator<HashSet<Properties>> singletonListIterator0 = new SingletonListIterator<HashSet<Properties>>((HashSet<Properties>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<HashSet<Properties>>) singletonListIterator0, (Closure<? super HashSet<Properties>>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      SingletonIterator<Vector<String>> singletonIterator0 = new SingletonIterator<Vector<String>>(vector0, false);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<Vector<String>>) singletonIterator0, (Transformer<? super Vector<String>, String>) transformer0, "", "%YaTOL,{29#YvN", "");
      assertEquals("%YaTOL,{29#YvNnull", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      SingletonIterator<Vector<String>> singletonIterator0 = new SingletonIterator<Vector<String>>(stack0, false);
      singletonIterator0.next();
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 1);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("BFzE]vVL8{f", (Class<?>[]) classArray0, (Object[]) classArray0);
      String string0 = IteratorUtils.toString((Iterator<Vector<String>>) singletonIterator0, (Transformer<? super Vector<String>, String>) transformer0, "BFzE]vVL8{f", "BFzE]vVL8{f", "BFzE]vVL8{f");
      assertEquals("BFzE]vVL8{fBFzE]vVL8{f", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      SingletonIterator<Vector<String>> singletonIterator0 = new SingletonIterator<Vector<String>>(stack0, false);
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 1);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("BFzE]vVL8{f", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Vector<String>>) singletonIterator0, (Transformer<? super Vector<String>, String>) transformer0, "BFzE]vVL8{f", "BFzE]vVL8{f", "BFzE]vVL8{f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'BFzE]vVL8{f' on 'class java.util.Stack' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Object>) null, (Predicate<? super Object>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) objectArrayIterator0, 786);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TreeSet<SQLInvalidAuthorizationSpecException> treeSet0 = new TreeSet<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) treeSet0);
      List<SQLNonTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) resettableIterator0, 100);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) null, 3236);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", (int[]) null);
      ConstantFactory<BatchUpdateException> constantFactory0 = new ConstantFactory<BatchUpdateException>(batchUpdateException0);
      FactoryTransformer<Object, BatchUpdateException> factoryTransformer0 = new FactoryTransformer<Object, BatchUpdateException>(constantFactory0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) factoryTransformer0);
      BoundedIterator<BatchUpdateException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) iterator0, (long) 0, 2204L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      String string0 = IteratorUtils.toString((Iterator<Vector<String>>) null, (Transformer<? super Vector<String>, String>) transformer0, "", "pxiPzrav", "prefix may not be null");
      assertEquals("pxiPzravprefix may not be null", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      SingletonIterator<Vector<String>> singletonIterator0 = new SingletonIterator<Vector<String>>(stack0, false);
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 1);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.IteratorUtils", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Vector<String>>) singletonIterator0, (Transformer<? super Vector<String>, String>) transformer0, (String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<EnumSet<Locale.FilteringMode>>) null, (Transformer<? super EnumSet<Locale.FilteringMode>, String>) null, "yQ=as.$O7s/td", "org.apache.commons.collections4.iterators.EmptyOrderedIterator", "org.apache.commons.collections4.iterators.EmptyOrderedIterator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      int int0 = IteratorUtils.size(listIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[4];
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) objectArrayListIterator0, 1);
      assertEquals(2, objectArrayListIterator0.nextIndex());
      assertEquals(1, objectArrayListIterator0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[4];
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) objectArrayListIterator0, 91);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 87
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      SingletonIterator<Vector<String>> singletonIterator0 = new SingletonIterator<Vector<String>>(stack0, false);
      boolean boolean0 = IteratorUtils.isEmpty(singletonIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Iterator<SQLNonTransientException> iterator0 = EmptyIterator.emptyIterator();
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<HashSet<ArrayDeque>>) null, (Predicate<? super HashSet<ArrayDeque>>) instanceofPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(objectArray0[1], defaultEquator0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Object>) objectArrayListIterator0, (Predicate<? super Object>) equalPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Object>) objectArrayListIterator0, (Predicate<? super Object>) predicate0);
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      OrderedMapIterator<Object, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Object>) orderedMapIterator0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", 5);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      UniquePredicate<SQLInvalidAuthorizationSpecException> uniquePredicate0 = new UniquePredicate<SQLInvalidAuthorizationSpecException>();
      uniquePredicate0.evaluate(sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) uniquePredicate0);
      assertNull(sQLInvalidAuthorizationSpecException1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      UniquePredicate<SQLInvalidAuthorizationSpecException> uniquePredicate0 = new UniquePredicate<SQLInvalidAuthorizationSpecException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) uniquePredicate0);
      assertNull(sQLInvalidAuthorizationSpecException1.getMessage());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      UniquePredicate<SQLInvalidAuthorizationSpecException> uniquePredicate0 = new UniquePredicate<SQLInvalidAuthorizationSpecException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) uniquePredicate0);
      assertNull(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PriorityQueue<BatchUpdateException> priorityQueue0 = new PriorityQueue<BatchUpdateException>();
      ListIterator<PriorityQueue<BatchUpdateException>> listIterator0 = IteratorUtils.singletonListIterator(priorityQueue0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<PriorityQueue<BatchUpdateException>>) listIterator0, (Predicate<? super PriorityQueue<BatchUpdateException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashSet<Properties>[] hashSetArray0 = (HashSet<Properties>[]) Array.newInstance(HashSet.class, 6);
      ObjectArrayListIterator<HashSet<Properties>> objectArrayListIterator0 = new ObjectArrayListIterator<HashSet<Properties>>(hashSetArray0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<HashSet<Properties>>) objectArrayListIterator0, (Closure<? super HashSet<Properties>>) closure0);
      assertEquals(5, objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      IteratorUtils.apply((Iterator<HashSet<Properties>>) null, (Closure<? super HashSet<Properties>>) closure0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MapIterator<HashSet<Properties>, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<HashSet<Properties>>) mapIterator0, (Closure<? super HashSet<Properties>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("~:pq@^'l 55GWVx*A");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "org.apache.commons.collections4.functors.TransformerPredicate");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLDataException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLNonTransientConnectionException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      OrderedMapIterator<PriorityQueue<BatchUpdateException>, ServiceLoader<PriorityQueue>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Iterator<SQLNonTransientException> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) iterator0, (-351));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "org.apache.commons.collections4.functors.TransformerPredicate", 2213);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      Iterable<Object> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<?>) objectArrayIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterable<BatchUpdateException> iterable0 = IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0, (Collection<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashSet<SQLException> hashSet0 = new HashSet<SQLException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) null, (Collection<? super SQLTransactionRollbackException>) hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0, (Collection<? super SQLIntegrityConstraintViolationException>) treeSet0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(arrayList0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) reverseListIterator0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(uniquePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("NodeList must not be null", (Throwable) null);
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) equalPredicate0);
      assertNotNull(listIterator0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("I`.", "I`.", sQLTransactionRollbackException0);
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<?>) singletonListIterator0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<?>) null, (Predicate<? super Object>) instanceofPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) resettableListIterator0, (Transformer<? super SQLDataException, ? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Q+D|bb`XXVN}9~Q9M", "org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", 1);
      SQLWarning sQLWarning0 = new SQLWarning("", "@bBRQ@u%N.O]Qw", 1, sQLInvalidAuthorizationSpecException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("O{\"1U", "", 1, sQLWarning0);
      ConstantTransformer<Object, SQLTransactionRollbackException> constantTransformer0 = new ConstantTransformer<Object, SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLRecoverableException>) null, (Transformer<? super SQLRecoverableException, ? extends SQLTransactionRollbackException>) constantTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      LoopingIterator<Locale.FilteringMode> loopingIterator0 = new LoopingIterator<Locale.FilteringMode>(linkedHashSet0);
      ZippingIterator<Locale.FilteringMode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) loopingIterator0, (Iterator<? extends Locale.FilteringMode>) loopingIterator0, (Iterator<? extends Locale.FilteringMode>) loopingIterator0);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      Locale.FilteringMode[] locale_FilteringModeArray0 = IteratorUtils.toArray((Iterator<? extends Locale.FilteringMode>) zippingIterator0, class0);
      assertEquals(0, locale_FilteringModeArray0.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(162, true, true, 162, 162, (Throwable) null);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, SQLSyntaxErrorException> invokerTransformer0 = new InvokerTransformer<Object, SQLSyntaxErrorException>((String) null, classArray0, classArray0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLException>) singletonListIterator0, (Transformer<? super SQLException, ? extends SQLSyntaxErrorException>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator(iterator0, 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientConnectionException>();
      SingletonIterator<LinkedHashSet<SQLNonTransientConnectionException>> singletonIterator0 = new SingletonIterator<LinkedHashSet<SQLNonTransientConnectionException>>(linkedHashSet0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      String string0 = IteratorUtils.toString((Iterator<LinkedHashSet<SQLNonTransientConnectionException>>) singletonIterator0, (Transformer<? super LinkedHashSet<SQLNonTransientConnectionException>, String>) transformer0);
      assertFalse(singletonIterator0.hasNext());
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "whdrVo", (Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0, 0, 73);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale_FilteringMode0);
      Object[] objectArray0 = IteratorUtils.toArray(iterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, (Class<SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<BatchUpdateException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      ResettableIterator<Boolean> resettableIterator0 = IteratorUtils.arrayIterator(booleanArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[7];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 14, 87);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Class<Object>[]) null, 7, 1468);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int[] intArray0 = new int[8];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Y/P[oO", "prefix may not be null", 1252, intArray0);
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 3);
      Transformer<Object, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("[]", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 1252);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '[]' on 'class java.sql.BatchUpdateException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<SQLIntegrityConstraintViolationException, LinkedHashSet<Integer>> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, LinkedHashSet<Integer>>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends Properties>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 90, 90);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Integer[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLDataException>) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("g:M9(xe\"qJ");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0, 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) arrayList0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      OrderedMapIterator<DataTruncation, SQLRecoverableException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) orderedMapIterator0, (-1906));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      OrderedIterator<Object> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MapIterator<HashSet<Properties>, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) mapIterator0);
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>((SQLTransientConnectionException) null);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientConnectionException>) singletonListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }
}
