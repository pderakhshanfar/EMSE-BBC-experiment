/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 02:06:12 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("afw!", "delimiter may not be null", 0, (long[]) null, (Throwable) null);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      ResettableIterator<BatchUpdateException> resettableIterator1 = IteratorUtils.emptyIterator();
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator1);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("afw!", "delimiter may not be null", 0, (long[]) null, (Throwable) null);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) resettableIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) iterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLTimeoutException, SQLTransactionRollbackException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTimeoutException, SQLTransactionRollbackException>) orderedMapIterator0);
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0, (Iterator<? extends SQLTimeoutException>) mapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLTimeoutException, SQLTransactionRollbackException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTimeoutException, SQLTransactionRollbackException>) orderedMapIterator0);
      Comparator<SQLTimeoutException> comparator0 = (Comparator<SQLTimeoutException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>) orderedMapIterator0, (Iterator<? extends SQLTimeoutException>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>) singletonIterator0, (Iterator<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "org.apache.commons.collections4.IterableUtils$5", 4179);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLRecoverableException0, (-2675), 4179);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) objectArrayIterator0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SkippingIterator<SQLNonTransientConnectionException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLNonTransientConnectionException>) orderedMapIterator0, 1L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      arrayList0.add(sQLClientInfoException0);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLClientInfoException>) arrayList0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) resettableListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[9];
      SQLDataException sQLDataException0 = new SQLDataException("z?9VFf??<-H,/?>mQq", "", 10);
      sQLDataExceptionArray0[0] = sQLDataException0;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      SQLDataException sQLDataException1 = IteratorUtils.get((Iterator<SQLDataException>) resettableListIterator0, 0);
      assertEquals("java.sql.SQLDataException: z?9VFf??<-H,/?>mQq", sQLDataException1.toString());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode0);
      MapIterator<Locale.FilteringMode, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Comparator<Locale.FilteringMode> comparator0 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Locale.FilteringMode>[] iteratorArray0 = (Iterator<Locale.FilteringMode>[]) Array.newInstance(Iterator.class, 5);
      iteratorArray0[0] = (Iterator<Locale.FilteringMode>) singletonListIterator0;
      iteratorArray0[1] = (Iterator<Locale.FilteringMode>) singletonListIterator0;
      iteratorArray0[2] = (Iterator<Locale.FilteringMode>) mapIterator0;
      iteratorArray0[3] = (Iterator<Locale.FilteringMode>) singletonListIterator0;
      iteratorArray0[4] = (Iterator<Locale.FilteringMode>) singletonListIterator0;
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) comparator0, (Iterator<? extends Locale.FilteringMode>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[5];
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[9];
      ResettableIterator<Boolean> resettableIterator0 = IteratorUtils.arrayIterator(booleanArray0, 0, 1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TreeSet<Closure<SQLException>>[] treeSetArray0 = (TreeSet<Closure<SQLException>>[]) Array.newInstance(TreeSet.class, 7);
      ResettableIterator<TreeSet<Closure<SQLException>>> resettableIterator0 = IteratorUtils.arrayIterator(treeSetArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0, true);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Object, ClientInfoStatus>[] transformerArray0 = (Transformer<Object, ClientInfoStatus>[]) Array.newInstance(Transformer.class, 1);
      InvokerTransformer<Object, ClientInfoStatus> invokerTransformer0 = new InvokerTransformer<Object, ClientInfoStatus>("EV2>He", (Class<?>[]) null, transformerArray0);
      SwitchTransformer<SQLRecoverableException, ClientInfoStatus> switchTransformer0 = new SwitchTransformer<SQLRecoverableException, ClientInfoStatus>(predicateArray0, transformerArray0, invokerTransformer0);
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLRecoverableException>) singletonIterator0, (Transformer<? super SQLRecoverableException, ? extends ClientInfoStatus>) switchTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'EV2>He' on 'class java.sql.SQLRecoverableException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<HashSet<Object>>) null, 61);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      ResettableIterator<Iterator<String>> resettableIterator0 = IteratorUtils.singletonIterator((Iterator<String>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Iterator<String>>) resettableIterator0, (Predicate<? super Iterator<String>>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>((Predicate<? super Object>[]) null);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(nonePredicate0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(nullIsTruePredicate0);
      MapIterator<String, Stack<SQLTransientException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ResettableIterator<Iterator<String>> resettableIterator0 = IteratorUtils.singletonIterator((Iterator<String>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Iterator<String>>) resettableIterator0, (Predicate<? super Iterator<String>>) nullIsExceptionPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NonePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Locale.FilteringMode>[] iteratorArray0 = (Iterator<Locale.FilteringMode>[]) Array.newInstance(Iterator.class, 6);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) comparator0, (Iterator<? extends Locale.FilteringMode>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (-827L), (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[8];
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator0 = new ObjectArrayIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransientException>) objectArrayIterator0, (-1760L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(objectArray0, (-73), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[5];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 1154);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("m#8om4mLM9p/^5>uvLo", (Throwable) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("m#8om4mLM9p/^5>uvLo", "m#8om4mLM9p/^5>uvLo", 4624, (Map<String, ClientInfoStatus>) null, sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException0, 687);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[2];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLWarningArray0, 244, 2854);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(integerArray0, 1105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTimeoutException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) properties0, 1, 1695);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("t+%");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLRecoverableException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      MapIterator<BatchUpdateException, HashMap<SQLInvalidAuthorizationSpecException, SQLSyntaxErrorException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      String string0 = IteratorUtils.toString((Iterator<BatchUpdateException>) mapIterator0, (Transformer<? super BatchUpdateException, String>) transformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("}tY5V k9P#z2^Fj&)|", "QkgJ");
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) resettableIterator0, 10);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Stack<Properties> stack0 = new Stack<Properties>();
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Properties>) stack0);
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) resettableListIterator0, 1822);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      BoundedIterator<SQLClientInfoException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, 0L, 0L);
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) boundedIterator0, (Iterator<? extends SQLClientInfoException>) boundedIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      Comparator<ClientInfoStatus> comparator0 = (Comparator<ClientInfoStatus>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<ClientInfoStatus> comparatorPredicate0 = new ComparatorPredicate<ClientInfoStatus>(clientInfoStatus0, comparator0, comparatorPredicate_Criterion0);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<ClientInfoStatus, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IfTransformer<ClientInfoStatus, String> ifTransformer0 = new IfTransformer<ClientInfoStatus, String>(comparatorPredicate0, transformer0, transformer0);
      String string0 = IteratorUtils.toString((Iterator<ClientInfoStatus>) null, (Transformer<? super ClientInfoStatus, String>) ifTransformer0, "Node must not be null", "Sq02'f]", "Sq02'f]");
      assertEquals("Sq02'f]Sq02'f]", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) listIterator0, 100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 99
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator((SQLTransactionRollbackException) null);
      boolean boolean0 = IteratorUtils.isEmpty(listIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      boolean boolean0 = IteratorUtils.isEmpty(mapIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(nullIsFalsePredicate0);
      Integer integer0 = new Integer(1822);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Integer>) resettableIterator0, (Predicate<? super Integer>) nullIsExceptionPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Integer integer0 = new Integer(1822);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Integer>) resettableIterator0, (Predicate<? super Integer>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Integer>) resettableIterator0, (Predicate<? super Integer>) nullIsExceptionPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Integer>) null, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Integer> predicate1 = OrPredicate.orPredicate((Predicate<? super Integer>) predicate0, (Predicate<? super Integer>) predicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Integer>) null, (Predicate<? super Integer>) predicate1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      SingletonIterator<Closure<Object>> singletonIterator0 = new SingletonIterator<Closure<Object>>(closure0);
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      PredicateTransformer<SQLNonTransientException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientException>(predicate0);
      SQLException sQLException0 = new SQLException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLException0);
      Boolean boolean0 = predicateTransformer0.transform(sQLInvalidAuthorizationSpecException0);
      boolean boolean1 = IteratorUtils.contains((Iterator<Closure<Object>>) singletonIterator0, (Object) boolean0);
      assertFalse(singletonIterator0.hasNext());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      SingletonIterator<Closure<Object>> singletonIterator0 = new SingletonIterator<Closure<Object>>(closure0);
      boolean boolean0 = IteratorUtils.contains((Iterator<Closure<Object>>) singletonIterator0, (Object) closure0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      MapIterator<String, Stack<SQLTransientException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ResettableIterator<Iterator<String>> resettableIterator0 = IteratorUtils.singletonIterator((Iterator<String>) mapIterator0);
      Iterator<String> iterator0 = IteratorUtils.find((Iterator<Iterator<String>>) resettableIterator0, (Predicate<? super Iterator<String>>) predicate0);
      assertNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      MapIterator<String, Stack<SQLTransientException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ResettableIterator<Iterator<String>> resettableIterator0 = IteratorUtils.singletonIterator((Iterator<String>) mapIterator0);
      Iterator<String> iterator0 = IteratorUtils.find((Iterator<Iterator<String>>) resettableIterator0, (Predicate<? super Iterator<String>>) uniquePredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      IdentityPredicate<SQLClientInfoException> identityPredicate0 = new IdentityPredicate<SQLClientInfoException>((SQLClientInfoException) null);
      SQLClientInfoException sQLClientInfoException0 = IteratorUtils.find((Iterator<SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) identityPredicate0);
      assertNull(sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransientException>) stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLTransientException>) resettableListIterator0, (Predicate<? super SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      OrderedIterator<Iterator<String>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Iterator<String> iterator0 = IteratorUtils.find((Iterator<Iterator<String>>) orderedIterator0, (Predicate<? super Iterator<String>>) predicate0);
      assertNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLIntegrityConstraintViolationException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(orderedIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("'&0{qF~B)=Jdg\"=o");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) objectArrayIterator0);
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("ExceptionFactory invoked", "node must not be null!");
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) resettableIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      OrderedMapIterator<String, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<String, Object> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ?>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<String, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, Object>(orderedMapIterator1);
      Class<String> class0 = String.class;
      String[] stringArray0 = IteratorUtils.toArray((Iterator<? extends String>) abstractOrderedMapIteratorDecorator0, class0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends String>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends String>) resettableIterator0, (Class<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MapIterator<String, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIterator<String> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends String>) mapIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>((String) null);
      Iterable<String> iterable0 = IteratorUtils.asIterable((Iterator<? extends String>) singletonIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashSet<SQLRecoverableException> hashSet0 = new HashSet<SQLRecoverableException>();
      LoopingIterator<SQLRecoverableException> loopingIterator0 = new LoopingIterator<SQLRecoverableException>(hashSet0);
      Enumeration<SQLRecoverableException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) loopingIterator0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) enumeration0, (Collection<? super SQLRecoverableException>) hashSet0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(arrayDeque0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) loopingIterator0);
      Iterator<SQLException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("J!ycpw%U+8t");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Stack<Properties> stack0 = new Stack<Properties>();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Properties>) stack0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      OrderedMapIterator<SQLClientInfoException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLClientInfoException, SQLInvalidAuthorizationSpecException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLClientInfoException, SQLInvalidAuthorizationSpecException>(orderedMapIterator0);
      ListIteratorWrapper<SQLClientInfoException> listIteratorWrapper0 = new ListIteratorWrapper<SQLClientInfoException>(abstractMapIteratorDecorator0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) listIteratorWrapper0, (Predicate<? super SQLClientInfoException>) predicate0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Predicate<SQLClientInfoException> predicate0 = NotNullPredicate.notNullPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLClientInfoException>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) resettableListIterator0, (Predicate<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) null, (Predicate<? super EnumSet<Locale.FilteringMode>>) uniquePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Vector<EnumSet<Locale.FilteringMode>> vector0 = new Vector<EnumSet<Locale.FilteringMode>>();
      LoopingIterator<EnumSet<Locale.FilteringMode>> loopingIterator0 = new LoopingIterator<EnumSet<Locale.FilteringMode>>(vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) loopingIterator0, (Predicate<? super EnumSet<Locale.FilteringMode>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Object, SQLFeatureNotSupportedException> hashMap0 = new HashMap<Object, SQLFeatureNotSupportedException>();
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLFeatureNotSupportedException>) hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) null, (Transformer<? super SQLClientInfoException, ? extends SQLFeatureNotSupportedException>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) null, (Iterator<? extends SQLTransientException>) null, (Iterator<? extends SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) comparator0, (Iterator<? extends Locale.FilteringMode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[9];
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_FilteringModeArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Locale.FilteringMode>) resettableListIterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("t", sQLTransientException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      Transformer<SQLSyntaxErrorException, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) listIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0);
      assertTrue(listIterator0.hasPrevious());
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1822, 1822);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransientException[]) null, (-2099));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ResettableIterator<SQLTransientException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<SQLTransientException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>) resettableIterator0, (Iterator<? extends SQLTransientException>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Iterator<String>, Properties>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      OrderedMapIterator<SQLDataException, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLDataException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLDataException>) orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[3];
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLFeatureNotSupportedException[]) null, 660, 3529);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLNonTransientConnectionException[]) null, 124, 124);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ResettableIterator<SQLTransientException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      String string0 = IteratorUtils.toString((Iterator<SQLTransientException>) resettableIterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "gA-b _(l2bJMwwb/0", 0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      HashMap<Object, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<Object, SQLIntegrityConstraintViolationException>();
      Transformer<SQLException, SQLIntegrityConstraintViolationException> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends SQLIntegrityConstraintViolationException>) hashMap0);
      Transformer<SQLIntegrityConstraintViolationException, SQLIntegrityConstraintViolationException> transformer1 = InvokerTransformer.invokerTransformer("");
      IfTransformer<SQLIntegrityConstraintViolationException, SQLIntegrityConstraintViolationException> ifTransformer0 = new IfTransformer<SQLIntegrityConstraintViolationException, SQLIntegrityConstraintViolationException>(predicate0, transformer0, transformer1);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.objectGraphIterator(sQLIntegrityConstraintViolationException0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) ifTransformer0);
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      BoundedIterator<SQLInvalidAuthorizationSpecException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((DataTruncation[]) null, 576);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      boolean boolean0 = IteratorUtils.contains((Iterator<Closure<Object>>) null, (Object) closure0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) listIterator0, 0);
      assertNull(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MapIterator<String, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<String> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends String>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Integer integer0 = new Integer(1744);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) integer0, 1744);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterable<SQLNonTransientConnectionException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Vector<Predicate<Object>>[] vectorArray0 = (Vector<Predicate<Object>>[]) Array.newInstance(Vector.class, 0);
      ResettableListIterator<Vector<Predicate<Object>>> resettableListIterator0 = IteratorUtils.arrayListIterator(vectorArray0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLClientInfoException>) arrayList0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) resettableListIterator0);
      assertFalse(listIterator0.hasNext());
  }
}
