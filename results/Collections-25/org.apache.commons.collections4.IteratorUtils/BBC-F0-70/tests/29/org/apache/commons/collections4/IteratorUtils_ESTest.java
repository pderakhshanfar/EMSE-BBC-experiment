/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 02:08:25 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Stack<SQLIntegrityConstraintViolationException> stack0 = new Stack<SQLIntegrityConstraintViolationException>();
      ReverseListIterator<SQLIntegrityConstraintViolationException> reverseListIterator0 = new ReverseListIterator<SQLIntegrityConstraintViolationException>(stack0);
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) orderedMapIterator0, (Iterator<? extends SQLNonTransientException>) orderedMapIterator0, (Iterator<? extends SQLNonTransientException>) reverseListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) orderedMapIterator0, (Iterator<? extends SQLNonTransientException>) iterator0, (Iterator<? extends SQLNonTransientException>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLFeatureNotSupportedException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, String>(orderedMapIterator0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("X<o]!|");
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.singletonIterator((SQLException) sQLIntegrityConstraintViolationException0);
      Iterator<SQLException>[] iteratorArray0 = (Iterator<SQLException>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = (Iterator<SQLException>) resettableIterator0;
      iteratorArray0[1] = (Iterator<SQLException>) resettableIterator0;
      OrderedMapIterator<SQLException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLException, Object> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLException, ?>) orderedMapIterator0);
      iteratorArray0[2] = (Iterator<SQLException>) orderedMapIterator1;
      iteratorArray0[3] = (Iterator<SQLException>) resettableIterator0;
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0);
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) objectArrayListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Iterator<InstanceofPredicate> iterator0 = EmptyIterator.emptyIterator();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("X<o]!|");
      FactoryTransformer<InstanceofPredicate, String> factoryTransformer0 = new FactoryTransformer<InstanceofPredicate, String>(constantFactory0);
      String string0 = IteratorUtils.toString(iterator0, (Transformer<? super InstanceofPredicate, String>) factoryTransformer0, "X-A[jTSEaqOC", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) arrayList0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      arrayList0.add(sQLFeatureNotSupportedException0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Vector<SQLFeatureNotSupportedException> vector0 = new Vector<SQLFeatureNotSupportedException>();
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(vector0);
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) loopingListIterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) objectArrayListIterator0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 3);
      OrderedIterator<InstanceofPredicate> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[2] = (Iterator<InstanceofPredicate>) orderedIterator0;
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate[] instanceofPredicateArray0 = IteratorUtils.toArray((Iterator<? extends InstanceofPredicate>) iteratorArray0[2], class0);
      assertEquals(0, instanceofPredicateArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[6];
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      ListIterator<SQLException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) resettableListIterator0, (Predicate<? super SQLException>) predicate0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) listIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Stack<Transformer<Object, Locale.Category>> stack0 = new Stack<Transformer<Object, Locale.Category>>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Transformer<Object, Locale.Category> transformer0 = ConstantTransformer.constantTransformer(locale_Category0);
      stack0.add(transformer0);
      ResettableListIterator<Transformer<Object, Locale.Category>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Transformer<Object, Locale.Category>>) stack0);
      assertTrue(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) null, (Iterator<? extends Properties>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 2);
      PriorityQueue<SQLSyntaxErrorException> priorityQueue0 = new PriorityQueue<SQLSyntaxErrorException>();
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) priorityQueue0);
      ListIteratorWrapper<SQLSyntaxErrorException> listIteratorWrapper0 = new ListIteratorWrapper<SQLSyntaxErrorException>(resettableIterator0);
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) listIteratorWrapper0;
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) resettableIterator0;
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[2];
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      BoundedIterator<SQLIntegrityConstraintViolationException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, (long) 1617, 823L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[6];
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[0];
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[5];
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, 5);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Iterator<SQLFeatureNotSupportedException>>) null, (Iterator<? extends Iterator<SQLFeatureNotSupportedException>>) null, (Iterator<? extends Iterator<SQLFeatureNotSupportedException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, HashSet<DataTruncation>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashSet<InstanceofPredicate>[] hashSetArray0 = (HashSet<InstanceofPredicate>[]) Array.newInstance(HashSet.class, 6);
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      hashSetArray0[0] = hashSet0;
      ResettableIterator<HashSet<InstanceofPredicate>> resettableIterator0 = IteratorUtils.arrayIterator(hashSetArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("(e^+ey*=g/&eTU$|F8", (Class<?>[]) null, (Object[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<HashSet<InstanceofPredicate>>) resettableIterator0, (Transformer<? super HashSet<InstanceofPredicate>, String>) transformer0, "", "(e^+ey*=g/&eTU$|F8", "(e^+ey*=g/&eTU$|F8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '(e^+ey*=g/&eTU$|F8' on 'class java.util.HashSet' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) orderedIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[8];
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) objectArrayListIterator0, 3);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) list0);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLTimeoutException>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLSyntaxErrorException>) orderedMapIterator0, (-2588L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[8];
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<SQLException> predicate1 = ExceptionPredicate.exceptionPredicate();
      ListIterator<SQLException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) resettableListIterator0, (Predicate<? super SQLException>) predicate1);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLException>) listIterator0, (Predicate<? super SQLException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<DataTruncation>) null, 2249);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("org.apache.commons\"collectionsx.map.AbstractLinkedMap$ValuesIterZi'r");
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<String>) singletonIterator0, (Predicate<? super String>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) comparator0, (Iterator<? extends Locale.Category>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, Boolean> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, Boolean> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, Boolean>(orderedMapIterator0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) listIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) null, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Closure<Object>[]) null, 911, 3176);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((HashSet<SQLNonTransientConnectionException>[]) null, (-2804), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((TreeSet<SQLNonTransientException>[]) null, 1936);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, (-27));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("LE~]k*!pjk.2");
      DataTruncation dataTruncation0 = new DataTruncation((-427), true, true, (-803), (-790), sQLRecoverableException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation0, 0, (-803));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLNonTransientException[]) null, 6, 2078);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLDataException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Stack<Transformer<Object, Locale.Category>> stack0 = new Stack<Transformer<Object, Locale.Category>>();
      ResettableListIterator<Transformer<Object, Locale.Category>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Transformer<Object, Locale.Category>>) stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableListIterator0, (-1966), 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableIterator0, (-1322));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("m|mXMM-c@m,HW ", "m|mXMM-c@m,HW ");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLRecoverableException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("U(_7=u", "U(_7=u");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("}D6Sn", "W3.ZZXR", 10, sQLSyntaxErrorException0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0, true);
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = InvokerTransformer.invokerTransformer(">aiP;rogo!0em*ww");
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(10, transformerClosure0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLTransientConnectionException>) singletonIterator0, (Closure<? super SQLTransientConnectionException>) forClosure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '>aiP;rogo!0em*ww' on 'class java.sql.SQLTransientConnectionException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OrderedMapIterator<InstanceofPredicate, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ConstantTransformer<InstanceofPredicate, String> constantTransformer0 = new ConstantTransformer<InstanceofPredicate, String>("U(_7=u");
      String string0 = IteratorUtils.toString((Iterator<InstanceofPredicate>) orderedMapIterator0, (Transformer<? super InstanceofPredicate, String>) constantTransformer0, "U(_7=u", "U(_7=u", "H:hEn");
      assertEquals("U(_7=uH:hEn", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ConstantTransformer<InstanceofPredicate, String> constantTransformer0 = new ConstantTransformer<InstanceofPredicate, String>("U(_7=u");
      String string0 = IteratorUtils.toString((Iterator<InstanceofPredicate>) null, (Transformer<? super InstanceofPredicate, String>) constantTransformer0, "U(_7=u", "7/e|AjyeL]yZrjBP&im", "7/e|AjyeL]yZrjBP&im");
      assertEquals("7/e|AjyeL]yZrjBP&im7/e|AjyeL]yZrjBP&im", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLException>) null, (Predicate<? super SQLException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) resettableIterator0, 1912);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLDataException>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[6];
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, (-2121L), (long) (-27));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashSet<InstanceofPredicate>[] hashSetArray0 = (HashSet<InstanceofPredicate>[]) Array.newInstance(HashSet.class, 6);
      ResettableIterator<HashSet<InstanceofPredicate>> resettableIterator0 = IteratorUtils.arrayIterator(hashSetArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("(e^+ey*=g/&eTU$|F8", (Class<?>[]) null, (Object[]) null);
      String string0 = IteratorUtils.toString((Iterator<HashSet<InstanceofPredicate>>) resettableIterator0, (Transformer<? super HashSet<InstanceofPredicate>, String>) transformer0, "", "(e^+ey*=g/&eTU$|F8", "(e^+ey*=g/&eTU$|F8");
      assertEquals("(e^+ey*=g/&eTU$|F8nullnullnullnullnullnull(e^+ey*=g/&eTU$|F8", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Iterator<InstanceofPredicate> iterator0 = EmptyIterator.emptyIterator();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      FactoryTransformer<InstanceofPredicate, String> factoryTransformer0 = new FactoryTransformer<InstanceofPredicate, String>(constantFactory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super InstanceofPredicate, String>) factoryTransformer0, "", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ConstantTransformer<InstanceofPredicate, String> constantTransformer0 = new ConstantTransformer<InstanceofPredicate, String>("");
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.singletonListIterator(instanceofPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<InstanceofPredicate>) listIterator0, (Transformer<? super InstanceofPredicate, String>) constantTransformer0, "", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      OrderedMapIterator<InstanceofPredicate, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ConstantTransformer<InstanceofPredicate, String> constantTransformer0 = new ConstantTransformer<InstanceofPredicate, String>((String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<InstanceofPredicate>) orderedMapIterator0, (Transformer<? super InstanceofPredicate, String>) constantTransformer0, (String) null, "U(_7=u", "9o1wEyEE]2U/wS4@Jq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<InstanceofPredicate>) null, (Transformer<? super InstanceofPredicate, String>) null, "", "org.apache.commons.collections4.functors.AllPredicate", "H:hEn");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[8];
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      int int0 = IteratorUtils.size(objectArrayListIterator0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("g0%b=4R");
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, (-1165), 3356, sQLFeatureNotSupportedException0);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      DataTruncation dataTruncation1 = IteratorUtils.get((Iterator<DataTruncation>) singletonListIterator0, 0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[6];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("K~`,t>v.g{:'|N*b z", sQLIntegrityConstraintViolationExceptionArray0[0]);
      DataTruncation dataTruncation0 = new DataTruncation((-1), false, false, 10, 32, sQLIntegrityConstraintViolationException0);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<DataTruncation>) singletonListIterator0, 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 31
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      boolean boolean0 = IteratorUtils.isEmpty(orderedMapIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0, true);
      boolean boolean0 = IteratorUtils.isEmpty(singletonIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) instanceofPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Boolean>) null, (Predicate<? super Boolean>) equalPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<SQLException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLException>>) hashSet0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) predicate0);
      assertTrue(resettableListIterator0.hasPrevious());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("U(_7=u", "org.apache.commons.collections4.IteratorUtils");
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.singletonIterator((SQLException) sQLSyntaxErrorException0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLException>) resettableIterator0, (Predicate<? super SQLException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Predicate<Object>>) null, (Predicate<? super Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0, true);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(instanceofPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[2] = (Predicate<Object>) nullIsTruePredicate0;
      predicateArray0[3] = (Predicate<Object>) nullIsTruePredicate0;
      predicateArray0[4] = (Predicate<Object>) nullIsTruePredicate0;
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, instanceofPredicate0);
      IteratorUtils.find((Iterator<InstanceofPredicate>) singletonIterator0, (Predicate<? super InstanceofPredicate>) andPredicate0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0, true);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(instanceofPredicate0, instanceofPredicate0);
      InstanceofPredicate instanceofPredicate1 = IteratorUtils.find((Iterator<InstanceofPredicate>) singletonIterator0, (Predicate<? super InstanceofPredicate>) andPredicate0);
      assertNotNull(instanceofPredicate1);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      InstanceofPredicate instanceofPredicate0 = IteratorUtils.find((Iterator<InstanceofPredicate>) null, (Predicate<? super InstanceofPredicate>) predicate0);
      assertNull(instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      MockThrowable mockThrowable0 = new MockThrowable(sQLDataException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("!j*_RAU|t", "!j*_RAU|t", (-1268), mockThrowable0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0, true);
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = InvokerTransformer.invokerTransformer("W3.ZZXR");
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>((-1268), transformerClosure0);
      IteratorUtils.apply((Iterator<SQLTransientConnectionException>) singletonIterator0, (Closure<? super SQLTransientConnectionException>) forClosure0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<Iterator<SQLClientInfoException>>) null, (Closure<? super Iterator<SQLClientInfoException>>) closure0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("PD=][VM7B1l]A?l(TB9");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(hashMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "org.apache.commons.collections4.functors.IfTransformer");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "=9_,", (-2645), hashMap0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("The predicate array must not contain a null predicate, index ", "The predicate array must not contain a null predicate, index ", 5, sQLClientInfoException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "]k$J=!;DfgZ8 X", sQLTimeoutException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLTransientConnectionException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) resettableIterator0, (-24));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTimeoutException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator((SQLTimeoutException) null);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLTimeoutException>) resettableIterator0, class0);
      assertEquals(1, sQLTimeoutExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      Iterable<SQLTransientConnectionException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) null, (Collection<? super SQLTimeoutException>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) orderedIterator0);
      Stack<Object> stack0 = new Stack<Object>();
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) stack0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ListIterator<SQLDataException> listIterator0 = EmptyListIterator.emptyListIterator();
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) listIterator0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) objectArrayListIterator0, (Predicate<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) null, (Predicate<? super StringTokenizer>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("U(_7=u");
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      ListIterator<SQLException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) singletonListIterator0, (Predicate<? super SQLException>) predicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLException>) listIterator0, (Predicate<? super SQLException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[24];
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0, 0);
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<SQLException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLException>>) arrayList0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) objectArrayListIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NotPredicate<SQLException> notPredicate0 = new NotPredicate<SQLException>(predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) notPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) orderedMapIterator0, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Iterator<Iterator<SQLFeatureNotSupportedException>> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLFeatureNotSupportedException>>) iterator0, (Transformer<? super Iterator<SQLFeatureNotSupportedException>, ? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("U(_7=u", "U(_7=u");
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      DataTruncation dataTruncation0 = new DataTruncation(2667, false, false, 845, 845, sQLSyntaxErrorException0);
      ConstantTransformer<Object, DataTruncation> constantTransformer0 = new ConstantTransformer<Object, DataTruncation>(dataTruncation0);
      IfTransformer<Object, DataTruncation> ifTransformer0 = new IfTransformer<Object, DataTruncation>(predicate0, constantTransformer0, constantTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLFeatureNotSupportedException>>) null, (Transformer<? super Iterator<SQLFeatureNotSupportedException>, ? extends DataTruncation>) ifTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Iterator<Iterator<SQLFeatureNotSupportedException>> iterator0 = EmptyIterator.emptyIterator();
      DataTruncation dataTruncation0 = new DataTruncation(3, true, true, (-1785), (-742));
      ConstantTransformer<Object, DataTruncation> constantTransformer0 = new ConstantTransformer<Object, DataTruncation>(dataTruncation0);
      Iterator<DataTruncation> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLFeatureNotSupportedException>>) iterator0, (Transformer<? super Iterator<SQLFeatureNotSupportedException>, ? extends DataTruncation>) constantTransformer0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ZippingIterator<Locale.Category> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) resettableListIterator0, (Iterator<? extends Locale.Category>) resettableListIterator0, (Iterator<? extends Locale.Category>) resettableListIterator0);
      Iterable<Locale.Category> iterable0 = IteratorUtils.asIterable((Iterator<? extends Locale.Category>) zippingIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 4);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      SkippingIterator<SQLNonTransientConnectionException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLNonTransientConnectionException>) resettableListIterator0, 278L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("TL].Ej", (Class<?>[]) classArray0, (Object[]) classArray0);
      String string0 = IteratorUtils.toString((Iterator<ArrayDeque<SQLRecoverableException>>) null, (Transformer<? super ArrayDeque<SQLRecoverableException>, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-776), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLIntegrityConstraintViolationException[]) null, 911);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<Locale.Category> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Locale.Category>) resettableListIterator0, (Iterator<? extends Locale.Category>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MapIterator<InstanceofPredicate, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<InstanceofPredicate>) mapIterator0, (Predicate<? super InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale_Category0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Hashtable<SQLDataException, SQLDataException> hashtable0 = new Hashtable<SQLDataException, SQLDataException>(485);
      EntrySetMapIterator<SQLDataException, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, SQLDataException>(hashtable0);
      MapIterator<SQLDataException, SQLDataException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, SQLDataException>) entrySetMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      ReverseListIterator<Properties> reverseListIterator0 = new ReverseListIterator<Properties>(linkedList0);
      Iterator<Properties> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Properties>) reverseListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 5, 5);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[7];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, 1997, 2793);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) null, (Iterator<? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Class<SQLSyntaxErrorException>[] classArray0 = (Class<SQLSyntaxErrorException>[]) Array.newInstance(Class.class, 4);
      Transformer<Object, SQLRecoverableException> transformer0 = InvokerTransformer.invokerTransformer("a3@;knEAQUp,K?$", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      BoundedIterator<SQLException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLException>) orderedMapIterator0, 265L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 7);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.list.AbstractLinkedList");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[0];
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (Throwable) null);
      boolean boolean0 = IteratorUtils.contains((Iterator<IIOMetadataNode>) null, (Object) sQLSyntaxErrorException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("N7Qg!znr&V?oz)", (String) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("NodeList must not be null", (String) null, 1, sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) priorityQueue0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-86));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLDataException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) resettableListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }
}
