/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 13:45:26 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileDescriptor;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.SortedSet;
import java.util.Spliterator;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.DOMException;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[4];
      Class<Object> class1 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[1] = instanceofPredicate0;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[3] = instanceofPredicate1;
      Class<SQLException> class2 = SQLException.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class2);
      ObjectArrayIterator<InstanceofPredicate> objectArrayIterator0 = new ObjectArrayIterator<InstanceofPredicate>(instanceofPredicateArray0, 0, 2);
      IteratorUtils.matchesAny((Iterator<InstanceofPredicate>) objectArrayIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.emptyMapIterator();
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[4];
      Class<Object> class1 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[1] = instanceofPredicate0;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[3] = instanceofPredicate1;
      Class<SQLException> class2 = SQLException.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class2);
      ObjectArrayIterator<InstanceofPredicate> objectArrayIterator0 = new ObjectArrayIterator<InstanceofPredicate>(instanceofPredicateArray0, 0, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<InstanceofPredicate>) objectArrayIterator0, (Predicate<? super InstanceofPredicate>) nonePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NonePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Properties properties0 = new Properties();
      IteratorUtils.singletonIterator(properties0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("d1rl)nhwu");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, 669, sQLRecoverableException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLRecoverableException0);
      ConstantTransformer<Object, SQLSyntaxErrorException> constantTransformer0 = new ConstantTransformer<Object, SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      Iterator<Object> iterator0 = IteratorUtils.objectGraphIterator((Object) sQLTransientConnectionException0, (Transformer<? super Object, ?>) constantTransformer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[0] = predicate0;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("d1rl)nhwu");
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate1 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      predicateArray0[2] = predicate1;
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate2 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      predicateArray0[3] = predicate2;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super Object>) anyPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      EmptyIterator.resettableEmptyIterator();
      ResettableIterator<Object> resettableIterator0 = null;
      IteratorUtils.apply((Iterator<Object>) null, (Closure<? super Object>) closure0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 8);
      Class<Integer> class1 = Integer.class;
      classArray0[0] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[1] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[2] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[3] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[4] = class5;
      Class<Integer> class6 = Integer.class;
      classArray0[5] = class6;
      Class<Integer> class7 = Integer.class;
      classArray0[6] = class7;
      Class<Integer> class8 = Integer.class;
      classArray0[7] = class8;
      InstantiateFactory<SQLSyntaxErrorException> instantiateFactory0 = null;
      try {
        instantiateFactory0 = new InstantiateFactory<SQLSyntaxErrorException>(class0, classArray0, classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InstantiateFactory: The constructor must exist and be public 
         //
         verifyException("org.apache.commons.collections4.functors.InstantiateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[5];
      Class<SQLDataException> class1 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<Object> class2 = Object.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class2);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      Class<SQLTransientConnectionException> class3 = SQLTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class3);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[3] = instanceofPredicate3;
      Class<SQLException> class4 = SQLException.class;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class4);
      ObjectArrayIterator<InstanceofPredicate> objectArrayIterator0 = new ObjectArrayIterator<InstanceofPredicate>(instanceofPredicateArray0, 0, 2);
      IteratorUtils.matchesAny((Iterator<InstanceofPredicate>) objectArrayIterator0, (Predicate<? super InstanceofPredicate>) nonePredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) null, 1073741823);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<?>) resettableListIterator0, (Transformer<? super Object, ? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, class0);
      OrderedMapIterator<InstanceofPredicate, ArrayDeque<Properties>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>((Predicate<? super Object>[]) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = (Predicate<Object>) nonePredicate0;
      NonePredicate<Object> nonePredicate1 = new NonePredicate<Object>(predicateArray0);
      nonePredicate1.getPredicates();
      IteratorUtils.matchesAny((Iterator<InstanceofPredicate>) orderedMapIterator0, (Predicate<? super InstanceofPredicate>) predicateArray0[0]);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLRecoverableException>) singletonIterator0, (Predicate<? super SQLRecoverableException>) nonePredicate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NonePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, class0);
      IteratorUtils.getIterator(class0);
      ResettableIterator<Boolean> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Boolean>) resettableIterator0, (Closure<? super Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.size(iterator0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.getIterator(iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<StringTokenizer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.size(iterator0);
      OrderedMapIterator<InstanceofPredicate, ArrayDeque<Properties>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>((Predicate<? super Object>[]) null);
      IteratorUtils.matchesAny((Iterator<InstanceofPredicate>) orderedMapIterator0, (Predicate<? super InstanceofPredicate>) nonePredicate0);
      OrderedMapIterator<Properties, InstanceofPredicate> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Properties, InstanceofPredicate> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Properties, ? extends InstanceofPredicate>) orderedMapIterator1);
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) orderedMapIterator2);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.size(iterator0);
      Class<SQLTransactionRollbackException>[] classArray0 = (Class<SQLTransactionRollbackException>[]) Array.newInstance(Class.class, 4);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      classArray0[0] = class0;
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      classArray0[1] = class1;
      Class<SQLTransactionRollbackException> class2 = SQLTransactionRollbackException.class;
      classArray0[2] = class2;
      Class<SQLTransactionRollbackException> class3 = SQLTransactionRollbackException.class;
      classArray0[3] = class3;
      InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      Class<IIOMetadataNode> class4 = IIOMetadataNode.class;
      InstantiateFactory<IIOMetadataNode> instantiateFactory0 = new InstantiateFactory<IIOMetadataNode>(class4);
      FactoryTransformer.factoryTransformer((Factory<? extends IIOMetadataNode>) instantiateFactory0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<Boolean, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<Boolean> iterator1 = IteratorUtils.collatedIterator((Comparator<? super Boolean>) comparator0, (Iterator<? extends Boolean>) mapIterator0, (Iterator<? extends Boolean>) mapIterator0);
      ZippingIterator<Boolean> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Boolean>) iterator1, (Iterator<? extends Boolean>) iterator1);
      Transformer<Object, Locale.FilteringMode> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<Object> iterator2 = IteratorUtils.transformedIterator((Iterator<? extends Boolean>) zippingIterator0, (Transformer<? super Boolean, ?>) transformer0);
      Transformer<Object, Boolean> transformer1 = ConstantTransformer.nullTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer1);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) transformerPredicate0, (Closure<? super Object>) closure0);
      IteratorUtils.apply(iterator2, (Closure<? super Object>) closure1);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "prefix may not be null";
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 6);
      Class<DataTruncation> class0 = DataTruncation.class;
      classArray0[0] = class0;
      Class<DataTruncation> class1 = DataTruncation.class;
      classArray0[1] = class1;
      Class<DataTruncation> class2 = DataTruncation.class;
      classArray0[2] = class2;
      Class<DataTruncation> class3 = DataTruncation.class;
      classArray0[3] = class3;
      Class<DataTruncation> class4 = DataTruncation.class;
      classArray0[4] = class4;
      Class<DataTruncation> class5 = DataTruncation.class;
      classArray0[5] = class5;
      Transformer<Object, Locale.FilteringMode> transformer0 = InvokerTransformer.invokerTransformer("prefix may not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      OrderedMapIterator<Boolean, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Boolean, SQLTimeoutException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Boolean, SQLTimeoutException>(orderedMapIterator0);
      IteratorUtils.transformedIterator((Iterator<? extends Boolean>) abstractOrderedMapIteratorDecorator0, (Transformer<? super Boolean, ?>) transformer0);
      Transformer<Object, Boolean> transformer1 = ConstantTransformer.nullTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer1);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      // Undeclared exception!
      try { 
        SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate and closure map must not be null
         //
         verifyException("org.apache.commons.collections4.functors.SwitchClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      IteratorUtils.contains((Iterator<SQLTimeoutException>) resettableIterator0, (Object) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, class0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      Class<Integer> class1 = Integer.class;
      classArray0[0] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[1] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[2] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[3] = class4;
      Transformer<Object, Locale.FilteringMode> transformer0 = InvokerTransformer.invokerTransformer("@ctWN:0z})dC*8pe{7", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Boolean>) null, (Transformer<? super Boolean, ?>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator((Object) "");
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      IteratorUtils.apply((Iterator<Object>) resettableIterator0, (Closure<? super Object>) closure0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      IteratorUtils.singletonIterator((Object) sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      IteratorUtils.getIterator(instanceofPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLIntegrityConstraintViolationException[]) null, (-15));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TruePredicate.truePredicate();
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[16];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[4] = locale_FilteringMode4;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[5] = locale_FilteringMode5;
      Locale.FilteringMode locale_FilteringMode6 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[6] = locale_FilteringMode6;
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_FilteringModeArray0, 0, 5);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Locale.FilteringMode>) resettableListIterator0, (-2040));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -2040
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.getIterator(resettableListIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply(iterator0, (Closure<? super Object>) closure0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLDataException>(orderedMapIterator0);
      OrderedMapIterator<SQLTimeoutException, SQLNonTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends SQLNonTransientException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.skippingIterator((Iterator<SQLTimeoutException>) orderedMapIterator1, 0L);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      DefaultEquator<Object> defaultEquator1 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(defaultEquator0, defaultEquator1);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(equalPredicate0);
      IteratorUtils.matchesAny((Iterator<TreeSet<Integer>>) null, (Predicate<? super TreeSet<Integer>>) equalPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[9];
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      iIOMetadataNodeArray0[2] = iIOMetadataNode0;
      iIOMetadataNodeArray0[3] = iIOMetadataNode0;
      iIOMetadataNodeArray0[4] = iIOMetadataNode0;
      iIOMetadataNodeArray0[5] = iIOMetadataNode0;
      iIOMetadataNodeArray0[6] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("3<G9+fHN,ki");
      iIOMetadataNodeArray0[7] = iIOMetadataNode1;
      iIOMetadataNodeArray0[8] = iIOMetadataNode0;
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0, 1960);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) arrayList0);
      String string0 = "";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MapIterator<Object, ComparatorPredicate.Criterion> mapIterator0 = IteratorUtils.emptyMapIterator();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "The predicate an tasformer map must not be null";
      objectArray0[1] = (Object) mapIterator0;
      objectArray0[2] = (Object) mapIterator0;
      objectArray0[3] = (Object) "The predicate an tasformer map must not be null";
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0, 3, 3);
      StringTokenizer stringTokenizer0 = new StringTokenizer("transformer may not be null", "The predicate an tasformer map must not be null", false);
      IteratorUtils.getIterator(stringTokenizer0);
      ResettableListIterator<Locale.LanguageRange> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends Locale.LanguageRange>) resettableListIterator0, (Iterator<? extends Locale.LanguageRange>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Properties properties0 = new Properties();
      ListIterator<Integer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Integer>) orderedIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) orderedIterator0;
      objectArray0[1] = (Object) orderedIterator0;
      objectArray0[2] = (Object) orderedIterator0;
      objectArray0[3] = (Object) listIterator0;
      objectArray0[4] = (Object) uniquePredicate0;
      objectArray0[5] = (Object) listIterator0;
      objectArray0[6] = (Object) properties0;
      objectArray0[7] = (Object) listIterator0;
      objectArray0[8] = (Object) uniquePredicate0;
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0, 4);
      IteratorUtils.find((Iterator<Object>) resettableListIterator0, (Predicate<? super Object>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Iterator<Integer> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("#jd5AVVhMPJq");
      SQLDataException sQLDataException0 = new SQLDataException("#jd5AVVhMPJq", (Throwable) null);
      ConstantFactory.constantFactory(sQLDataException0);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      ListIterator<Vector<Locale.FilteringMode>> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Vector<Locale.FilteringMode>>) listIterator0, (Transformer<? super Vector<Locale.FilteringMode>, String>) factoryTransformer0, "C,R", "#jd5AVVhMPJq", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      OrderedIterator<Vector<Locale.FilteringMode>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("Node must not be null");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      IteratorUtils.toString((Iterator<Vector<Locale.FilteringMode>>) orderedIterator0, (Transformer<? super Vector<Locale.FilteringMode>, String>) factoryTransformer0, "Node must not be null", "Node must not be null", "Node must not be null");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      ConstantFactory.constantFactory(locale_FilteringMode0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MapIterator<Object, ComparatorPredicate.Criterion> mapIterator0 = IteratorUtils.emptyMapIterator();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "The predicate an tasformer map must not be null";
      objectArray0[1] = (Object) mapIterator0;
      objectArray0[2] = (Object) mapIterator0;
      objectArray0[3] = (Object) "The predicate an tasformer map must not be null";
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0, 3, 3);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("The predicate an tasformer map must not be null");
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator((Object) iIOMetadataNode0);
      IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      IteratorUtils.size(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      Properties properties0 = new Properties();
      int int0 = (-5);
      DataTruncation dataTruncation0 = new DataTruncation(1070, true, false, (-5), (-5));
      properties0.put(orderedIterator0, dataTruncation0);
      ConstantTransformer<Object, Properties> constantTransformer0 = new ConstantTransformer<Object, Properties>(properties0);
      ConstantTransformer.constantTransformer((SQLException) dataTruncation0);
      IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) constantTransformer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[4];
      SQLTransientException sQLTransientException0 = new SQLTransientException(")s\"LBM");
      sQLTransientExceptionArray0[0] = sQLTransientException0;
      SQLTransientException sQLTransientException1 = new SQLTransientException();
      sQLTransientExceptionArray0[1] = sQLTransientException1;
      sQLTransientException0.getStackTrace();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(")s\"LBM", ")s\"LBM", sQLTimeoutException0);
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTimeoutException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTransientExceptionArray0, 1, (-5));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator((SQLFeatureNotSupportedException) null);
      long[] longArray0 = new long[12];
      longArray0[1] = (long) 3;
      longArray0[2] = (long) 3;
      Properties properties0 = new Properties();
      Object object0 = new Object();
      properties0.getOrDefault(listIterator0, object0);
      IteratorUtils.getIterator(properties0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[3];
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTimeoutException0;
      sQLTransientExceptionArray0[1] = (SQLTransientException) null;
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTimeoutException0;
      IteratorUtils.arrayIterator(sQLTransientExceptionArray0, 0, 0);
      Class<SQLException> class0 = SQLException.class;
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      Class<SQLSyntaxErrorException> class2 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class2);
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class0);
      Class<Object> class3 = Object.class;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class3);
      Class<Properties> class4 = Properties.class;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class4);
      InstanceofPredicate instanceofPredicate5 = new InstanceofPredicate(class4);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[9];
      instanceofPredicateArray0[0] = instanceofPredicate5;
      instanceofPredicateArray0[1] = instanceofPredicate5;
      instanceofPredicateArray0[2] = instanceofPredicate0;
      instanceofPredicateArray0[3] = instanceofPredicate2;
      instanceofPredicateArray0[4] = instanceofPredicate1;
      instanceofPredicateArray0[5] = instanceofPredicate1;
      instanceofPredicateArray0[6] = instanceofPredicate4;
      InstanceofPredicate instanceofPredicate6 = new InstanceofPredicate(class3);
      instanceofPredicateArray0[7] = instanceofPredicate6;
      instanceofPredicateArray0[8] = instanceofPredicate5;
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      IteratorUtils.toString((Iterator<InstanceofPredicate>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      Properties properties0 = new Properties();
      DataTruncation dataTruncation0 = new DataTruncation(1070, true, false, 8, 8);
      properties0.put(orderedIterator0, dataTruncation0);
      ConstantTransformer<Object, Properties> constantTransformer0 = new ConstantTransformer<Object, Properties>(properties0);
      ConstantTransformer.constantTransformer((SQLException) dataTruncation0);
      IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) constantTransformer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[4];
      SQLTransientException sQLTransientException0 = new SQLTransientException(")s\"LBM");
      sQLTransientExceptionArray0[0] = sQLTransientException0;
      SQLTransientException sQLTransientException1 = new SQLTransientException();
      sQLTransientExceptionArray0[1] = sQLTransientException1;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(")s\"LBM", ")s\"LBM", sQLTimeoutException0);
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTimeoutException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTransientExceptionArray0, 1, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>((SQLDataException) null);
      Iterator<SQLDataException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) singletonListIterator0);
      ListIteratorWrapper<SQLDataException> listIteratorWrapper0 = new ListIteratorWrapper<SQLDataException>(iterator0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) listIteratorWrapper0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Enumeration<Integer> enumeration0 = (Enumeration<Integer>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) iterator0);
      EmptyIterator.emptyIterator();
      IteratorUtils.emptyIterator();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientException>) null, (Predicate<? super SQLTransientException>) instanceofPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Predicate<IIOMetadataNode> predicate0 = FalsePredicate.falsePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("BM%?/.R");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("gl8u5:sx", sQLWarning0);
      Factory<SQLTransactionRollbackException> factory0 = ConstantFactory.constantFactory(sQLTransactionRollbackException0);
      FactoryTransformer.factoryTransformer((Factory<? extends SQLTransientException>) factory0);
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      SingletonListIterator<Vector<Locale.FilteringMode>> singletonListIterator0 = new SingletonListIterator<Vector<Locale.FilteringMode>>(stack0);
      IteratorUtils.toString((Iterator<Vector<Locale.FilteringMode>>) singletonListIterator0, (Transformer<? super Vector<Locale.FilteringMode>, String>) factoryTransformer0, "#Raz[Io_(", "BM%?/.R", "BM%?/.R");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      ConstantFactory.constantFactory(locale_FilteringMode0);
      IteratorUtils.emptyIterator();
      TruePredicate.truePredicate();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Enumeration<Integer> enumeration0 = (Enumeration<Integer>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false, false, false).when(enumeration0).hasMoreElements();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(enumeration0).nextElement();
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      Enumeration<Integer> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) iterator0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      EmptyIterator.emptyIterator();
      IteratorUtils.emptyIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Kc5Hj>[F+4@]aOSr", "Arrayclass must not be null", (-1));
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Kc5Hj>[F+4@]aOSr", sQLRecoverableException0);
      OrderedMapIterator<SQLRecoverableException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.contains((Iterator<SQLRecoverableException>) orderedMapIterator0, (Object) enumeration1);
      int int0 = 2406;
      IteratorUtils.toList((Iterator<? extends Integer>) iterator0, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      IteratorUtils.singletonListIterator((SQLFeatureNotSupportedException) null);
      long[] longArray0 = new long[12];
      longArray0[1] = (long) 3;
      Factory<String> factory0 = ConstantFactory.constantFactory("Transformer must not be null");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      Vector<Locale.FilteringMode>[] vectorArray0 = (Vector<Locale.FilteringMode>[]) Array.newInstance(Vector.class, 4);
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      vectorArray0[0] = (Vector<Locale.FilteringMode>) stack0;
      Stack<Locale.FilteringMode> stack1 = new Stack<Locale.FilteringMode>();
      vectorArray0[1] = (Vector<Locale.FilteringMode>) stack1;
      Stack<Locale.FilteringMode> stack2 = new Stack<Locale.FilteringMode>();
      vectorArray0[2] = (Vector<Locale.FilteringMode>) stack2;
      Stack<Locale.FilteringMode> stack3 = new Stack<Locale.FilteringMode>();
      vectorArray0[3] = (Vector<Locale.FilteringMode>) stack3;
      ResettableListIterator<Vector<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.arrayListIterator(vectorArray0);
      ListIterator<Vector<Locale.FilteringMode>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Vector<Locale.FilteringMode>>) resettableListIterator0);
      Iterator<Vector<Locale.FilteringMode>> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Vector<Locale.FilteringMode>>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super Vector<Locale.FilteringMode>, String>) factoryTransformer0, "s.r6", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("The predicate and transformer map must not be null");
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-754));
      integerArray0[0] = integer0;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0, 1);
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) objectArrayListIterator0);
      Iterator<Hashtable<Locale.FilteringMode, SQLTransientException>> iterator0 = EmptyIterator.emptyIterator();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, class0);
      IteratorUtils.size(iterator0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>((BatchUpdateException) null, true);
      IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) singletonIterator0, 0L);
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      IteratorUtils.loopingListIterator((List<SQLClientInfoException>) stack0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      IteratorUtils.singletonListIterator((SQLFeatureNotSupportedException) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null, (Equator<Object>) defaultEquator0);
      IteratorUtils.find((Iterator<Object>) singletonListIterator0, (Predicate<? super Object>) predicate0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Enumeration<Integer> enumeration0 = (Enumeration<Integer>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      String string0 = "transformer may not be null";
      SQLDataException sQLDataException0 = new SQLDataException("transformer may not be null", "transformer may not be null", 1071);
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>(sQLDataException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLDataException0, (Equator<Object>) defaultEquator0);
      IteratorUtils.find((Iterator<Object>) singletonListIterator0, (Predicate<? super Object>) predicate0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 8);
      OrderedMapIterator<SQLDataException, HashMap<DataTruncation, IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, HashMap<DataTruncation, IIOMetadataNode>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, HashMap<DataTruncation, IIOMetadataNode>>(orderedMapIterator0);
      iteratorArray0[0] = (Iterator<SQLDataException>) abstractOrderedMapIteratorDecorator0;
      ConstantTransformer<Object, SQLDataException> constantTransformer0 = new ConstantTransformer<Object, SQLDataException>(sQLDataException0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) constantTransformer0);
      iteratorArray0[1] = iterator0;
      ListIteratorWrapper<SQLDataException> listIteratorWrapper0 = new ListIteratorWrapper<SQLDataException>(iterator0);
      iteratorArray0[2] = (Iterator<SQLDataException>) listIteratorWrapper0;
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLDataException>) arrayList0);
      iteratorArray0[3] = (Iterator<SQLDataException>) resettableListIterator0;
      StringTokenizer stringTokenizer0 = new StringTokenizer("transformer may not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) stringTokenizer0, (-1), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      IteratorUtils.singletonListIterator((SQLFeatureNotSupportedException) null);
      long[] longArray0 = new long[12];
      longArray0[1] = (long) 3;
      longArray0[2] = (long) 3;
      longArray0[3] = (long) 3;
      longArray0[4] = (long) 3;
      longArray0[5] = (long) 3;
      longArray0[6] = (long) 3;
      MapIterator<DataTruncation, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<Vector<Locale.FilteringMode>, Stack<Stack>> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<Vector<Locale.FilteringMode>, Stack<Stack>>) mapIterator0);
      SkippingIterator<Vector<Locale.FilteringMode>> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Vector<Locale.FilteringMode>>) mapIterator1, 3L);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>(3, 3L);
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Vector<Locale.FilteringMode>>) skippingIterator0, (Transformer<? super Vector<Locale.FilteringMode>, String>) transformer0, (String) null, "]", "]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("The predicate and transformer map must not be null");
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.singletonIterator(locale_FilteringMode0);
      IteratorUtils.filteredIterator((Iterator<? extends Locale.FilteringMode>) resettableIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Locale.FilteringMode>) resettableIterator0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("ID</_K`o", "ID</_K`o", 0, (Throwable) null);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      IteratorUtils.isEmpty(listIterator0);
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.emptyIterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) resettableIterator0, (Equator<Object>) defaultEquator0);
      IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) predicate0);
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      Iterator<SQLFeatureNotSupportedException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) hashSet0);
      Iterator<SQLFeatureNotSupportedException> iterator2 = IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator1, (Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator2, (Iterator<? extends SQLFeatureNotSupportedException>) iterator0, (Iterator<? extends SQLFeatureNotSupportedException>) iterator1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Comparator<SQLDataException> comparator0 = (Comparator<SQLDataException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<SQLDataException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 5);
      iteratorArray0[0] = (Iterator<SQLDataException>) orderedIterator0;
      iteratorArray0[1] = (Iterator<SQLDataException>) orderedIterator0;
      iteratorArray0[2] = (Iterator<SQLDataException>) orderedIterator0;
      iteratorArray0[3] = (Iterator<SQLDataException>) orderedIterator0;
      iteratorArray0[4] = (Iterator<SQLDataException>) orderedIterator0;
      Iterator<SQLDataException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>[]) iteratorArray0);
      IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) iterator0);
      IteratorUtils.emptyMapIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("i", "o_|-");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Predicate must not be null", sQLNonTransientConnectionException0);
      IteratorUtils.getIterator((Object) null);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(128).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) instanceofPredicate0, comparator0);
      Hashtable<Locale.FilteringMode, SQLTransientException> hashtable0 = new Hashtable<Locale.FilteringMode, SQLTransientException>();
      InstanceofPredicate.instanceOfPredicate(class0);
      SingletonIterator<Hashtable<Locale.FilteringMode, SQLTransientException>> singletonIterator0 = new SingletonIterator<Hashtable<Locale.FilteringMode, SQLTransientException>>(hashtable0, true);
      IteratorUtils.matchesAll((Iterator<Hashtable<Locale.FilteringMode, SQLTransientException>>) singletonIterator0, (Predicate<? super Hashtable<Locale.FilteringMode, SQLTransientException>>) predicate0);
      IteratorUtils.skippingIterator((Iterator<ArrayDeque<PriorityQueue>>) singletonIterator0, (long) 128);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 10;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 10, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.getIterator(instanceofPredicate0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException("E", sQLTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Transformer must not be null", sQLDataException0);
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLInvalidAuthorizationSpecException0, true);
      IteratorUtils.toString((Iterator<SQLException>) singletonIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) instanceofPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Enumeration<Integer> enumeration0 = (Enumeration<Integer>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      SQLDataException sQLDataException0 = new SQLDataException("i4'M|{ip", "i4'M|{ip", 0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      IteratorUtils.toArray(iterator0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate((Class<?>) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("ID</_K`o");
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Iterator<Iterator<SQLRecoverableException>> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Iterator<SQLRecoverableException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) instanceofPredicate0, comparator0);
      Hashtable<Locale.FilteringMode, SQLTransientException> hashtable0 = new Hashtable<Locale.FilteringMode, SQLTransientException>();
      SingletonIterator<Hashtable<Locale.FilteringMode, SQLTransientException>> singletonIterator0 = new SingletonIterator<Hashtable<Locale.FilteringMode, SQLTransientException>>(hashtable0, true);
      IteratorUtils.matchesAll((Iterator<Hashtable<Locale.FilteringMode, SQLTransientException>>) singletonIterator0, (Predicate<? super Hashtable<Locale.FilteringMode, SQLTransientException>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("ID</_K`o", "<UCF%!}F9nq^MAk", 0, (Throwable) null);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      IteratorUtils.isEmpty(listIterator0);
      Hashtable<Locale.FilteringMode, SQLTransientException> hashtable0 = new Hashtable<Locale.FilteringMode, SQLTransientException>();
      SingletonIterator<Hashtable<Locale.FilteringMode, SQLTransientException>> singletonIterator0 = new SingletonIterator<Hashtable<Locale.FilteringMode, SQLTransientException>>(hashtable0, false);
      FactoryTransformer<Object, SQLNonTransientConnectionException> factoryTransformer0 = new FactoryTransformer<Object, SQLNonTransientConnectionException>((Factory<? extends SQLNonTransientConnectionException>) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = FalsePredicate.falsePredicate();
      predicateArray0[1] = predicate1;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(nonePredicate0);
      Predicate<Object> predicate2 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) factoryTransformer0, (Predicate<? super Object>) nullIsFalsePredicate0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate2);
      Predicate<Object> predicate3 = OrPredicate.orPredicate((Predicate<? super Object>) notPredicate0, (Predicate<? super Object>) nullIsFalsePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Hashtable<Locale.FilteringMode, SQLTransientException>>) singletonIterator0, (Predicate<? super Hashtable<Locale.FilteringMode, SQLTransientException>>) predicate3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.collections4.functors.TransformerPredicate");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IteratorUtils.emptyListIterator();
      OrderedIterator<EnumSet<Locale.FilteringMode>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ZippingIterator<EnumSet<Locale.FilteringMode>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedIterator0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("twS^s`&S?kp$y)QM");
      IteratorUtils.toString((Iterator<EnumSet<Locale.FilteringMode>>) zippingIterator0, (Transformer<? super EnumSet<Locale.FilteringMode>, String>) constantTransformer0);
      IteratorUtils.size(orderedIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getPreviousSibling();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLNonTransientConnectionException>) null, 667L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.collections4.functors.InstantiateTransformer");
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("K\"i02nS>:", "K\"i02nS>:");
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[2];
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Enumeration<Integer> enumeration0 = (Enumeration<Integer>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Integer>) orderedIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTimeoutException0);
      IteratorUtils.getIterator(sQLFeatureNotSupportedException0);
      int int0 = 61;
      Boolean[] booleanArray0 = new Boolean[7];
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      PredicateTransformer<SQLNonTransientConnectionException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientConnectionException>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform(sQLNonTransientConnectionException0);
      booleanArray0[0] = boolean0;
      Boolean boolean1 = predicateTransformer0.transform(sQLNonTransientConnectionException0);
      booleanArray0[1] = boolean1;
      Boolean boolean2 = predicateTransformer0.transform(sQLNonTransientConnectionException0);
      booleanArray0[2] = boolean2;
      Boolean boolean3 = predicateTransformer0.transform(sQLNonTransientConnectionException0);
      booleanArray0[3] = boolean3;
      Boolean boolean4 = predicateTransformer0.transform(sQLNonTransientConnectionException0);
      booleanArray0[4] = boolean4;
      Boolean boolean5 = predicateTransformer0.transform(sQLNonTransientConnectionException0);
      booleanArray0[5] = boolean5;
      sQLNonTransientConnectionException0.getSuppressed();
      PredicateTransformer<SQLNonTransientConnectionException> predicateTransformer1 = new PredicateTransformer<SQLNonTransientConnectionException>(predicate0);
      Boolean boolean6 = predicateTransformer1.transform(sQLNonTransientConnectionException0);
      booleanArray0[6] = boolean6;
      ObjectArrayListIterator<Boolean> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<Boolean>(booleanArray0, 61);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("o_|-", "");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("nc?R5\"zyrCoAHz", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.spliterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLNonTransientConnectionException0);
      sQLTransactionRollbackException0.fillInStackTrace();
      IteratorUtils.getIterator(sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-3528));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1419);
      integerArray0[3] = integer3;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) objectArrayListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) objectArrayListIterator0);
      SQLDataException sQLDataException0 = new SQLDataException("[]", "[]", 128);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLDataException0);
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientException>) singletonListIterator0, (Predicate<? super SQLTransientException>) uniquePredicate0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLDataException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("[]", "[]", 433, hashMap0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("[]", "A&,V0oS5^\"X-WWO7?N", hashMap0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("tU8Gi.>9u8I'r", "org.apache.commons.collections4.bidimap.TreeBidiMap$Inverse", hashMap0, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 0, (-1618));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Enumeration<Integer> enumeration0 = (Enumeration<Integer>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      IteratorUtils.asEnumeration((Iterator<? extends Integer>) iterator0);
      Iterator<IIOMetadataNode> iterator1 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      IteratorUtils.getIterator("+B");
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends Locale.LanguageRange>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Integer>) orderedIterator0);
      IteratorUtils.getIterator(orderedIterator0);
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 6);
      Boolean[] booleanArray0 = new Boolean[0];
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Boolean>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLDataException sQLDataException0 = new SQLDataException(sQLWarning0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("vFJ", sQLDataException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLDataException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("vFJ", "suffix may not be null");
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      OrderedMapIterator<Integer, InstanceofPredicate> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Integer, InstanceofPredicate> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends InstanceofPredicate>) orderedMapIterator0);
      IteratorUtils.toListIterator((Iterator<? extends Integer>) orderedMapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.collections4.functors.InstantiateTransformer");
      IteratorUtils.emptyMapIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("suffix may not be null", "suffix may not be null");
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[0];
      IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("'' k<'d{F\"=HPs@", "suffix may not be null");
      EmptyIterator.resettableEmptyIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLFeatureNotSupportedException0);
      sQLClientInfoException0.getFailedProperties();
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (long) 12;
      longArray0[2] = (long) 12;
      longArray0[3] = (long) 12;
      longArray0[4] = (long) 12;
      longArray0[5] = (long) 12;
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("The predicate and transformer map must not be null");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      ConstantFactory.constantFactory(locale_FilteringMode0);
      OrderedMapIterator<String, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<String, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ? extends DataTruncation>) orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends String>) orderedMapIterator1, (Iterator<? extends String>) orderedMapIterator1);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      ConstantFactory.constantFactory(locale_FilteringMode1);
      IteratorUtils.zippingIterator((Iterator<? extends String>) orderedMapIterator1, (Iterator<? extends String>) orderedMapIterator0);
      UniquePredicate.uniquePredicate();
      ObjectArrayListIterator<Object> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<Object>((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      OrderedIterator<Vector<Locale.FilteringMode>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("teator");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = new ConstantTransformer<Object, String>("teator");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) orderedIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      AndPredicate.andPredicate((Predicate<? super Object>) transformedPredicate0, (Predicate<? super Object>) predicate0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion1 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate.comparatorPredicate((Object) transformedPredicate0, comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("teator");
      IdentityPredicate.identityPredicate((Object) sQLTimeoutException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      Comparator<SQLException> comparator2 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<SQLInvalidAuthorizationSpecException, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator2, (Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("k;FR~lo/>f", sQLTimeoutException0);
      IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      Transformer<SQLException, SQLClientInfoException> transformer1 = InvokerTransformer.invokerTransformer("M4lC8/b");
      IteratorUtils.objectGraphIterator((SQLException) sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLException, ? extends SQLException>) transformer1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLDataException sQLDataException0 = new SQLDataException(sQLWarning0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("vFJ", sQLDataException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLDataException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("vFJ", "suffix may not be null");
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[4];
      sQLNonTransientExceptionArray0[0] = sQLNonTransientException0;
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLFeatureNotSupportedException1;
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLFeatureNotSupportedException1;
      sQLNonTransientExceptionArray0[3] = sQLNonTransientException0;
      IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.list.CursorableLinkedList", "vFJ");
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.contains((Iterator<SQLRecoverableException>) resettableIterator0, (Object) stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Integer>) orderedIterator0);
      IteratorUtils.getIterator(orderedIterator0);
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 6);
      Boolean[] booleanArray0 = new Boolean[0];
      ObjectArrayListIterator<Boolean> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<Boolean>(booleanArray0, 61);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends SQLException>) orderedMapIterator0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0, 0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) resettableIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Predicate<Object>>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "org.apache.commons.collections4.functors.InstantiateTransformer";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.collections4.functors.InstantiateTransformer");
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLException>) null, (-3964));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ArrayDeque<Properties>[] arrayDequeArray0 = (ArrayDeque<Properties>[]) Array.newInstance(ArrayDeque.class, 6);
      ArrayDeque<Properties> arrayDeque0 = new ArrayDeque<Properties>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<Properties> arrayDeque1 = new ArrayDeque<Properties>();
      arrayDequeArray0[1] = arrayDeque1;
      ArrayDeque<Properties> arrayDeque2 = new ArrayDeque<Properties>();
      arrayDequeArray0[2] = arrayDeque2;
      ArrayDeque<Properties> arrayDeque3 = new ArrayDeque<Properties>();
      arrayDequeArray0[3] = arrayDeque3;
      ArrayDeque<Properties> arrayDeque4 = new ArrayDeque<Properties>();
      arrayDequeArray0[4] = arrayDeque4;
      ArrayDeque<Properties> arrayDeque5 = new ArrayDeque<Properties>(1463);
      arrayDequeArray0[5] = arrayDeque5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(arrayDequeArray0, 1463);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Integer>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Vector<Locale.FilteringMode>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      OrderedMapIterator<Integer, ComparatorPredicate.Criterion> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<Integer, ComparatorPredicate.Criterion> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, ComparatorPredicate.Criterion>) orderedMapIterator0);
      MapIterator<Integer, ComparatorPredicate.Criterion> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.isEmpty(mapIterator1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLDataException sQLDataException0 = new SQLDataException("", sQLSyntaxErrorException0);
      sQLDataException0.printStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLDataException[]) null, 4, 2634);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      IteratorUtils.singletonListIterator((SQLFeatureNotSupportedException) null);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[5];
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 3;
      longArray0[1] = (long) 3;
      longArray0[2] = (long) 3;
      longArray0[3] = (long) 3;
      longArray0[4] = (long) 3;
      longArray0[5] = (long) 3;
      longArray0[6] = (long) 3;
      longArray0[7] = (long) 3;
      int int0 = 0;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0, 0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedMapIterator<IIOMetadataNode, Boolean> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<IIOMetadataNode, ? extends Boolean>) orderedMapIterator0);
      IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) orderedMapIterator0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) null, (Collection<? super StringTokenizer>) list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OrderedIterator<ComparatorPredicate.Criterion> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<ComparatorPredicate.Criterion>) orderedIterator0);
      IteratorUtils.singletonIterator("[]");
      ObjectArrayIterator<StringTokenizer> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<StringTokenizer>((StringTokenizer[]) null, 9, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("The predicate and transformer map must not be null");
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate((Object) singletonListIterator0, (Equator<Object>) defaultEquator0);
      IteratorUtils.size(singletonListIterator0);
      IteratorUtils.emptyListIterator();
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1415);
      intArray0[4] = (-1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("/z;g|a#;X", intArray0);
      IteratorUtils.singletonIterator(batchUpdateException0);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 3);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      SQLDataException sQLDataException0 = new SQLDataException("The predicate and transformer map must not be null", "2j%u:Vwe8X3:#'7%", (-1415));
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("Closure must not be null", "The predicate and transformer map must not be null", (-1415));
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("[", batchUpdateException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("O l)5c", "[", (Throwable) null);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("2j%u:Vwe8X3:#'7%", "2j%u:Vwe8X3:#'7%", 980, sQLDataException0);
      sQLDataExceptionArray0[4] = sQLDataException4;
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0, (-1), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("The predicate and transformer map must not be null");
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate((Object) singletonListIterator0, (Equator<Object>) defaultEquator0);
      Object object0 = new Object();
      IteratorUtils.size(singletonListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ArrayListIterator<Transformer<Object, Integer>> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<Transformer<Object, Integer>>(defaultEquator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) orderedIterator0, 1419);
      IteratorUtils.loopingListIterator(list0);
      OrderedMapIterator<Vector<Locale.FilteringMode>, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Vector<Locale.FilteringMode>, String> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Vector<Locale.FilteringMode>, ? extends String>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Vector<Locale.FilteringMode>>) orderedMapIterator1, (Transformer<? super Vector<Locale.FilteringMode>, String>) null, "", "", "]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      Enumeration<Integer> enumeration0 = (Enumeration<Integer>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) orderedIterator0, 1419);
      IteratorUtils.loopingListIterator(list0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLIntegrityConstraintViolationException0);
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0, false);
      sQLRecoverableException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      singletonIterator0.next();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 1);
      iteratorArray0[0] = (Iterator<SQLRecoverableException>) singletonIterator0;
      IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) comparator0, (Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLIntegrityConstraintViolationException0);
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<Object>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.getIterator((Object) null);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      SQLDataException sQLDataException0 = new SQLDataException("W9l-o0D)L");
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException(sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("W9l-o0D)L");
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException(sQLDataException0);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException();
      sQLDataExceptionArray0[4] = sQLDataException4;
      int int0 = (-5664);
      int int1 = 128;
      sQLDataException1.printStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLDataExceptionArray0, (-5664), 128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 100, 853);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator((SQLFeatureNotSupportedException) null);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) listIterator0, 128);
      IteratorUtils.loopingListIterator(list0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, sQLIntegrityConstraintViolationException0);
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0, true);
      sQLRecoverableException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      singletonIterator0.next();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) comparator0, (Iterator<? extends SQLRecoverableException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLFeatureNotSupportedException0);
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLFeatureNotSupportedException0);
      EqualPredicate.equalPredicate((Object) sQLTimeoutException0, (Equator<Object>) null);
      IteratorUtils.emptyMapIterator();
      MapIterator<Integer, SQLInvalidAuthorizationSpecException> mapIterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) resettableIterator0, (Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>[]) iteratorArray0);
      IteratorUtils.chainedIterator((Iterator<?>) zippingIterator0, (Iterator<?>) zippingIterator0);
      MapIterator<IIOMetadataNode, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      SingletonIterator<IIOMetadataNode> singletonIterator1 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0, true);
      Iterator<IIOMetadataNode>[] iteratorArray1 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray1[1] = (Iterator<IIOMetadataNode>) mapIterator0;
      iteratorArray1[2] = (Iterator<IIOMetadataNode>) singletonIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      DataTruncation dataTruncation0 = new DataTruncation(1419, true, true, 1419, 1419);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      IteratorUtils.toArray((Iterator<?>) singletonListIterator0);
      LoopingListIterator<Integer> loopingListIterator0 = null;
      try {
        loopingListIterator0 = new LoopingListIterator<Integer>((List<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The list must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.LoopingListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "org.apache.commons.collections4.functors.InstantiateTransformer";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.collections4.functors.InstantiateTransformer");
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) singletonListIterator0, (Equator<Object>) defaultEquator0);
      IteratorUtils.find((Iterator<Object>) singletonListIterator0, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) null, (Iterator<? extends SQLWarning>) null, (Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = EmptyIterator.emptyIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      predicateArray0[1] = predicate1;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[2] = (Predicate<Object>) uniquePredicate0;
      Predicate<Object> predicate2 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicateArray0[2]);
      predicateArray0[3] = predicate2;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<Object> predicate3 = ComparatorPredicate.comparatorPredicate((Object) predicate0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      predicateArray0[4] = predicate3;
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicateArray0[2], predicate3);
      predicateArray0[5] = (Predicate<Object>) andPredicate0;
      Predicate<Object> predicate4 = IdentityPredicate.identityPredicate((Object) predicate2);
      predicateArray0[6] = predicate4;
      Predicate<Object> predicate5 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate5);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("The predicate and transformer map must not be null");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      ConstantFactory.constantFactory(locale_FilteringMode0);
      OrderedMapIterator<String, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<String, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ? extends DataTruncation>) orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends String>) orderedMapIterator1, (Iterator<? extends String>) orderedMapIterator1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("ListIterator must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0, (-3381));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends SQLException>) orderedMapIterator0);
      int int0 = 0;
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0, 0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) resettableIterator0, class0);
      Iterator<InstanceofPredicate> iterator0 = null;
      SQLDataException sQLDataException0 = new SQLDataException((Throwable) null);
      ArrayListIterator<InstanceofPredicate> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<InstanceofPredicate>(sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLFeatureNotSupportedException0);
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLFeatureNotSupportedException0);
      EqualPredicate.equalPredicate((Object) sQLTimeoutException0, (Equator<Object>) null);
      MapIterator<Object, ComparatorPredicate.Criterion> mapIterator0 = IteratorUtils.emptyMapIterator();
      int int0 = 10;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) mapIterator0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 10
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      Enumeration<Integer> enumeration0 = (Enumeration<Integer>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLSyntaxErrorException0);
      EqualPredicate.equalPredicate((Object) sQLSyntaxErrorException0);
      Transformer<SQLException, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      IfTransformer<SQLException, Boolean> ifTransformer0 = new IfTransformer<SQLException, Boolean>((Predicate<? super SQLException>) null, transformer0, (Transformer<? super SQLException, ? extends Boolean>) null);
      TransformerPredicate<SQLTransientException> transformerPredicate0 = new TransformerPredicate<SQLTransientException>((Transformer<? super SQLTransientException, Boolean>) null);
      OrderedMapIterator<SQLTimeoutException, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLTimeoutException, Properties> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTimeoutException, Properties>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) mapIterator0, (Predicate<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      IteratorUtils.emptyIterator();
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      TreeSet<Integer> treeSet1 = new TreeSet<Integer>((SortedSet<Integer>) treeSet0);
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(treeSet1);
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Integer>) loopingIterator0, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = null;
      IteratorUtils.singletonListIterator((SQLFeatureNotSupportedException) null);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 3;
      longArray0[1] = (long) 3;
      longArray0[2] = (long) 3;
      longArray0[3] = (long) 3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("8", (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Collection must not be null", (Throwable) null);
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0, false);
      sQLRecoverableException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      singletonIterator0.next();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) comparator0, (Iterator<? extends SQLRecoverableException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      IteratorUtils.singletonListIterator((SQLFeatureNotSupportedException) null);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[5];
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 3;
      longArray0[1] = (long) 3;
      longArray0[2] = (long) 3;
      longArray0[3] = (long) 3;
      longArray0[4] = (long) 3;
      longArray0[5] = (long) 3;
      longArray0[6] = (long) 3;
      longArray0[7] = (long) 3;
      IteratorUtils.arrayIterator(batchUpdateExceptionArray0, 0);
      IteratorUtils.emptyMapIterator();
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(batchUpdateExceptionArray0, 0, 3);
      IteratorUtils.get((Iterator<Object>) objectArrayListIterator0, 0);
      HashMap<Object, SQLNonTransientConnectionException> hashMap0 = new HashMap<Object, SQLNonTransientConnectionException>();
      EntrySetMapIterator<Object, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<Object, SQLNonTransientConnectionException>(hashMap0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) entrySetMapIterator0, (Equator<Object>) defaultEquator0);
      IteratorUtils.find((Iterator<Object>) entrySetMapIterator0, (Predicate<? super Object>) predicate0);
      ObjectArrayListIterator<Object> objectArrayListIterator1 = null;
      try {
        objectArrayListIterator1 = new ObjectArrayListIterator<Object>(batchUpdateExceptionArray0, (-1), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("The predicate and transformer map must not be null");
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) singletonListIterator0, (Equator<Object>) defaultEquator0);
      IteratorUtils.find((Iterator<Object>) singletonListIterator0, (Predicate<? super Object>) predicate0);
      IteratorUtils.size(singletonListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Transformer<SQLSyntaxErrorException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) null, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "F,S~F^#TV|K0l", "", "F,S~F^#TV|K0l");
      IteratorUtils.size((Iterator<?>) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("F,S~F^#TV|K0l");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("{g,l<Y@S\"Y", (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("{g,l<Y@S\"Y", (String) null, 0, sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException((Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("uD)A(", (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("{g,l<Y@S\"Y");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLIntegrityConstraintViolationException[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0);
      IteratorUtils.matchesAll((Iterator<Hashtable<Locale.FilteringMode, SQLTransientException>>) null, (Predicate<? super Hashtable<Locale.FilteringMode, SQLTransientException>>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("ID</_K`o", "<UCF%!}F9nq^MAk", 0, (Throwable) null);
      List<SQLTransientConnectionException> list0 = new Vector<SQLTransientConnectionException>();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      OrderedIterator<Vector<Locale.FilteringMode>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("iterator");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      Factory<Properties> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer.factoryTransformer((Factory<? extends Properties>) factory0);
      IteratorUtils.toString((Iterator<Vector<Locale.FilteringMode>>) orderedIterator0, (Transformer<? super Vector<Locale.FilteringMode>, String>) factoryTransformer0, "iterator", "#Raz[Io_(", "ListIterator must not be null");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      ConstantFactory.constantFactory(locale_FilteringMode0);
      Iterator<String> iterator0 = null;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "#Raz[Io_(ListIterator must not be null";
      stringArray0[1] = "";
      stringArray0[2] = "@.%|LK?q";
      stringArray0[3] = "$-Nj_l";
      stringArray0[4] = "iterator";
      stringArray0[5] = "#Raz[Io_(ListIterator must not be null";
      stringArray0[6] = "#Raz[Io_(ListIterator must not be null";
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stringArray0, (-785), (-3349));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      IteratorUtils.singletonListIterator((SQLTransientConnectionException) null);
      MapIterator<SQLWarning, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Stack<LinkedHashSet>, IIOMetadataNode>) mapIterator0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "bmW<IgOv'q";
      stringArray0[2] = "";
      stringArray0[3] = "@.%|LK?q";
      stringArray0[4] = "$-Nj_l";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0, 0, 0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Iterator<String> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends String>) resettableListIterator0, (Predicate<? super String>) predicate0);
      IteratorUtils.unmodifiableIterator(iterator0);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      ServiceLoader<SQLTimeoutException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      IteratorUtils.singletonIterator(serviceLoader0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTimeoutException[]) null, 0, 2801);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<String>[] arrayListArray0 = (ArrayList<String>[]) Array.newInstance(ArrayList.class, 0);
      ResettableIterator<ArrayList<String>> resettableIterator0 = IteratorUtils.arrayIterator(arrayListArray0);
      int int0 = 10;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableIterator0, 10, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Hashtable<Hashtable<Locale.FilteringMode, SQLTransientException>, IIOMetadataNode> hashtable0 = new Hashtable<Hashtable<Locale.FilteringMode, SQLTransientException>, IIOMetadataNode>();
      EntrySetMapIterator<Hashtable<Locale.FilteringMode, SQLTransientException>, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<Hashtable<Locale.FilteringMode, SQLTransientException>, IIOMetadataNode>(hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Hashtable<Locale.FilteringMode, SQLTransientException>>) entrySetMapIterator0, (Predicate<? super Hashtable<Locale.FilteringMode, SQLTransientException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) singletonListIterator0, (Equator<Object>) defaultEquator0);
      IteratorUtils.find((Iterator<Object>) singletonListIterator0, (Predicate<? super Object>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.matchesAll((Iterator<SQLInvalidAuthorizationSpecException>) orderedIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<?>[]) iteratorArray0);
      long[] longArray0 = new long[3];
      longArray0[0] = 529L;
      longArray0[1] = (long) 3;
      longArray0[2] = (long) 3;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.apache.commons.collections4.iterators.SkippingIterator", "@J`5em9", 100, sQLTransactionRollbackException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("NodeList must not be null", "", 3, longArray0, sQLNonTransientException0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 100;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException((String) null, (String) null, 0, intArray0, sQLNonTransientException0);
      BatchUpdateException batchUpdateException2 = new BatchUpdateException((String) null, intArray0);
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("", "iterator", intArray0);
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("org.apache.commons.collections4.iterators.SkippingIterator", "Iterator getKey() can only be called after next() and before remove()", intArray0, sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((BatchUpdateException[]) null, (-1778));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      IteratorUtils.singletonListIterator((SQLFeatureNotSupportedException) null);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[5];
      int int0 = 3;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 3;
      longArray0[1] = (long) 3;
      longArray0[2] = (long) 3;
      longArray0[3] = (long) 3;
      longArray0[4] = (long) 3;
      longArray0[5] = (long) 3;
      longArray0[6] = (long) 3;
      longArray0[7] = (long) 3;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.iterators.SkippingIterator", "8", 3, longArray0, (Throwable) null);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0, 0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) resettableIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends InstanceofPredicate>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      OrderedIterator<Vector<Locale.FilteringMode>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("iterator");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      Factory<Properties> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer.factoryTransformer((Factory<? extends Properties>) factory0);
      IteratorUtils.toString((Iterator<Vector<Locale.FilteringMode>>) orderedIterator0, (Transformer<? super Vector<Locale.FilteringMode>, String>) factoryTransformer0, "iterator", "#Raz[Io_(", "ListIterator must not be null");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      ConstantFactory.constantFactory(locale_FilteringMode0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>) null, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MapIterator<Integer, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<Integer, InstanceofPredicate> mapIterator1 = new AbstractMapIteratorDecorator<Integer, InstanceofPredicate>(mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) mapIterator1, (-1611));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      Enumeration<Integer> enumeration0 = (Enumeration<Integer>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) orderedIterator0, 1419);
      IteratorUtils.loopingListIterator(list0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLIntegrityConstraintViolationException0);
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0, false);
      sQLRecoverableException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      SQLRecoverableException sQLRecoverableException1 = singletonIterator0.next();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 1);
      iteratorArray0[0] = (Iterator<SQLRecoverableException>) singletonIterator0;
      IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) comparator0, (Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLIntegrityConstraintViolationException0);
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      EqualPredicate.equalPredicate((SQLException) sQLRecoverableException1, (Equator<SQLException>) null);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = (Predicate<SQLException>) uniquePredicate0;
      predicateArray0[1] = (Predicate<SQLException>) uniquePredicate0;
      AnyPredicate.anyPredicate((Predicate<? super SQLTransientException>[]) predicateArray0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientException>) singletonListIterator0, (Predicate<? super SQLTransientException>) predicateArray0[1]);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      int[] intArray0 = new int[3];
      intArray0[0] = 10;
      intArray0[1] = 0;
      IteratorUtils.loopingListIterator((List<SQLException>) stack0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", (Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) comparator0, (Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, SQLException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends SQLException>) orderedMapIterator0);
      MapIterator<SQLClientInfoException, SQLException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) mapIterator1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 9);
      EntrySetToMapIteratorAdapter<Integer, SQLWarning> entrySetToMapIteratorAdapter0 = null;
      try {
        entrySetToMapIteratorAdapter0 = new EntrySetToMapIteratorAdapter<Integer, SQLWarning>((Set<Map.Entry<Integer, SQLWarning>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) listIterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 123;
      Integer integer0 = new Integer(123);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      IteratorUtils.singletonListIterator((SQLFeatureNotSupportedException) null);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[5];
      long[] longArray0 = new long[12];
      longArray0[0] = (long) 3;
      longArray0[1] = (long) 3;
      longArray0[2] = (long) 3;
      longArray0[3] = (long) 3;
      longArray0[4] = (long) 3;
      longArray0[5] = (long) 3;
      longArray0[6] = (long) 3;
      longArray0[7] = (long) 3;
      IteratorUtils.arrayIterator(batchUpdateExceptionArray0, 0);
      IteratorUtils.emptyMapIterator();
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(batchUpdateExceptionArray0, 0, 3);
      IteratorUtils.get((Iterator<Object>) objectArrayListIterator0, 0);
      IteratorUtils.contains((Iterator<SQLRecoverableException>) null, (Object) null);
      Iterator<Integer> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) iterator0, (-301));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, class0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[22];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("*Xx '");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Ny#c6,IMuU", sQLIntegrityConstraintViolationException0);
      SQLException sQLException0 = new SQLException("", "", 577, sQLNonTransientException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("b[#x", "b[#x", sQLException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("*Xx '", "Ny#c6,IMuU", 44, sQLNonTransientException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException(sQLTimeoutException1);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      ResettableListIterator<SQLTimeoutException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0);
      IteratorUtils.contains((Iterator<SQLTimeoutException>) resettableListIterator1, (Object) "b[#x");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) uniquePredicate0, 353);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>((Predicate<? super SQLException>) null);
      IteratorUtils.contains((Iterator<SQLTimeoutException>) resettableIterator0, (Object) null);
      OrderedMapIterator<String, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<String, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, DataTruncation>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<String>) abstractOrderedMapIteratorDecorator0, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      SQLDataException sQLDataException0 = new SQLDataException("W9l-o0D)L");
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException(sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("W9l-o0D)L");
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException(sQLDataException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("W9l-o0D)L");
      iIOMetadataNode0.item(10);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("W9l-o0D)L");
      Node node0 = iIOMetadataNode1.insertBefore(iIOMetadataNode0, iIOMetadataNode0);
      IteratorUtils.nodeListIterator(node0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, ArrayList<SQLDataException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("&-f4C");
      iIOMetadataNode0.cloneNode(false);
      Node node0 = iIOMetadataNode0.cloneNode(false);
      IteratorUtils.nodeListIterator(node0);
      LinkedList<TreeSet<Integer>> linkedList0 = new LinkedList<TreeSet<Integer>>();
      ResettableListIterator<TreeSet<Integer>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<TreeSet<Integer>>) linkedList0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(orderedMapIterator0, defaultEquator0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(equalPredicate0);
      IteratorUtils.matchesAny((Iterator<TreeSet<Integer>>) resettableListIterator0, (Predicate<? super TreeSet<Integer>>) notPredicate0);
      IteratorUtils.isEmpty(resettableListIterator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode1;
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, ArrayList<SQLDataException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("&-f4C");
      LinkedList<TreeSet<Integer>> linkedList0 = new LinkedList<TreeSet<Integer>>();
      ResettableListIterator<TreeSet<Integer>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<TreeSet<Integer>>) linkedList0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(orderedMapIterator0, defaultEquator0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(equalPredicate0);
      IteratorUtils.matchesAny((Iterator<TreeSet<Integer>>) resettableListIterator0, (Predicate<? super TreeSet<Integer>>) notPredicate0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      IteratorUtils.arrayIterator(batchUpdateExceptionArray0, 0);
      IteratorUtils.emptyMapIterator();
      ObjectArrayListIterator<Object> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<Object>(iIOMetadataNodeArray0, 1419, 237);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 10;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getAttributeNode("");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapIterator", ")cr,", sQLWarning0);
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("", sQLNonTransientException0);
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) null, (Object[]) null);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.objectGraphIterator(sQLNonTransientException1, (Transformer<? super SQLNonTransientException, ? extends SQLNonTransientException>) transformer0);
      IteratorUtils.unmodifiableIterator(iterator0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "InvokerTransformer: The method '";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("InvokerTransformer: The method '", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream("bGwMqg/@Ax[e7");
      mockPrintStream0.print((-133));
      sQLInvalidAuthorizationSpecException0.printStackTrace((PrintStream) mockPrintStream0);
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      sQLInvalidAuthorizationSpecException0.spliterator();
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      int int0 = (-1057);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0, (-1057));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLFeatureNotSupportedException0);
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLFeatureNotSupportedException0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLIntegrityConstraintViolationException0);
      IfTransformer<SQLException, Boolean> ifTransformer0 = new IfTransformer<SQLException, Boolean>(predicate0, (Transformer<? super SQLException, ? extends Boolean>) null, (Transformer<? super SQLException, ? extends Boolean>) null);
      TransformerPredicate<SQLTransientException> transformerPredicate0 = new TransformerPredicate<SQLTransientException>(ifTransformer0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) singletonIterator0, (Predicate<? super SQLTimeoutException>) transformerPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) singletonListIterator0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) listIterator0);
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0, (Collection<? super IIOMetadataNode>) vector0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      OrderedIterator<Vector<Locale.FilteringMode>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("iterator");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      Factory<Properties> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer.factoryTransformer((Factory<? extends Properties>) factory0);
      IteratorUtils.toString((Iterator<Vector<Locale.FilteringMode>>) orderedIterator0, (Transformer<? super Vector<Locale.FilteringMode>, String>) factoryTransformer0, "iterator", "#Raz[Io_(", "ListIterator must not be null");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      ConstantFactory.constantFactory(locale_FilteringMode0);
      iIOMetadataNode0.getUserObject();
      try { 
        iIOMetadataNode0.setIdAttribute("iterator", false);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Method not supported
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MapIterator<SQLClientInfoException, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) mapIterator0);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>(linkedList0);
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>(priorityQueue0);
      Integer[] integerArray0 = new Integer[2];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      linkedHashSet0.toArray(integerArray0);
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) linkedHashSet0);
      ListIterator<SQLWarning> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) listIterator0);
      OrderedMapIterator<IIOMetadataNode, Boolean> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, Boolean> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, Boolean>(orderedMapIterator0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedMapIterator<IIOMetadataNode, Boolean> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<IIOMetadataNode, ? extends Boolean>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) orderedMapIterator1);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) orderedMapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) null, (Collection<? super StringTokenizer>) list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "The parameter types must match the arguments");
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, 0, sQLIntegrityConstraintViolationException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(dataTruncation0);
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0, true);
      IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) singletonIterator0, (long) 0, (long) 0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 1);
      Enumeration<Integer> enumeration0 = (Enumeration<Integer>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      Enumeration<Integer> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) iterator0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Iterator<Integer> iterator1 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration1, (Collection<? super Integer>) arrayList0);
      ListIterator<Integer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Integer>) iterator1);
      iteratorArray0[0] = (Iterator<Integer>) listIterator0;
      IteratorUtils.chainedIterator((Iterator<?>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 6);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode1, locale_FilteringMode2, locale_FilteringMode0, locale_FilteringMode2);
      enumSetArray0[0] = enumSet0;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet1 = EnumSet.of(locale_FilteringMode3, locale_FilteringMode3);
      enumSetArray0[1] = enumSet1;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode6 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet2 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode4, locale_FilteringMode5, locale_FilteringMode6);
      enumSetArray0[2] = enumSet2;
      Locale.FilteringMode locale_FilteringMode7 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode8 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet3 = EnumSet.of(locale_FilteringMode5, locale_FilteringMode7, locale_FilteringMode8, locale_FilteringMode1);
      EnumSet<Locale.FilteringMode> enumSet4 = EnumSet.copyOf(enumSet3);
      enumSetArray0[3] = enumSet4;
      EnumSet<Locale.FilteringMode> enumSet5 = EnumSet.complementOf(enumSet2);
      enumSetArray0[4] = enumSet5;
      EnumSet<Locale.FilteringMode> enumSet6 = EnumSet.copyOf(enumSet0);
      enumSetArray0[5] = enumSet6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(enumSetArray0, 10, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((BatchUpdateException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class0);
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class1);
      InstanceofPredicate.instanceOfPredicate(class1);
      int int0 = 100;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) instanceofPredicate0, 0, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      String string0 = "Iterator must not be null";
      iIOMetadataNode0.setAttributeNS("Iterator must not be null", "Iterator must not be null", "Iterator must not be null");
      int int0 = (-1963);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0, (-1963), (-1963));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>[]) iteratorArray0);
      IteratorUtils.chainedIterator((Iterator<?>) zippingIterator0, (Iterator<?>) zippingIterator0);
      MapIterator<IIOMetadataNode, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      SingletonIterator<IIOMetadataNode> singletonIterator1 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0, true);
      Iterator<IIOMetadataNode>[] iteratorArray1 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray1[0] = (Iterator<IIOMetadataNode>) mapIterator0;
      iteratorArray1[1] = (Iterator<IIOMetadataNode>) mapIterator0;
      iteratorArray1[2] = (Iterator<IIOMetadataNode>) singletonIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray1);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "}O}w:Xinp'94mfZ^S/");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) singletonIterator0, 100, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "", 182, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[5];
      int[] intArray0 = new int[5];
      intArray0[0] = 1171;
      intArray0[1] = 0;
      intArray0[2] = 31;
      intArray0[3] = 1582;
      intArray0[4] = 1189;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("NodeList must not be null", "rr:'FQ}*V/i1hoBY", intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("NodeList must not be null", intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("rr:'FQ}*V/i1hoBY", "", 1582, intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("rr:'FQ}*V/i1hoBY", intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(batchUpdateExceptionArray0, 31, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      IteratorUtils.singletonIterator((SQLIntegrityConstraintViolationException) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      // Undeclared exception!
      try { 
        SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends Integer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate and transformer map must not be null
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLRecoverableException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, SQLRecoverableException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends SQLRecoverableException>) orderedMapIterator0);
      ListIteratorWrapper<SQLClientInfoException> listIteratorWrapper0 = new ListIteratorWrapper<SQLClientInfoException>(mapIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) listIteratorWrapper0);
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 1);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[6];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("epq/}a", (Throwable) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("epq/}a", "Predicate must not be null", 572, sQLFeatureNotSupportedException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"O&EX", "\"O&EX", 0, sQLNonTransientException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("d,]uAWw", sQLNonTransientException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException((String) null, (String) null, 0);
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("epq/}a", (String) null, 875, sQLNonTransientException1);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("$#AyV-Bf4WloD`OM!'4", "$#AyV-Bf4WloD`OM!'4");
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException(sQLNonTransientException0);
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) resettableListIterator0;
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLTransientConnectionException>) iterator0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("aBEs%3&]L|X_cc");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLTransientConnectionException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, sQLTransactionRollbackException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", sQLNonTransientException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 610;
      longArray0[1] = (long) 610;
      longArray0[2] = (long) 610;
      longArray0[3] = (long) 610;
      longArray0[4] = (long) 610;
      longArray0[5] = (long) 610;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator", "org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator", 610, longArray0, (Throwable) null);
      int[] intArray0 = new int[3];
      intArray0[0] = 610;
      intArray0[1] = 0;
      intArray0[2] = 0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator", "org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator", 0, intArray0, batchUpdateException0);
      int[] intArray1 = new int[3];
      intArray1[0] = 610;
      intArray1[1] = 610;
      intArray1[2] = 0;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("]", intArray1);
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("iterator", "org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator", intArray1);
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("iterator", "iterator", intArray0, batchUpdateException0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      batchUpdateExceptionArray0[2] = batchUpdateException4;
      batchUpdateExceptionArray0[3] = batchUpdateException4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(batchUpdateExceptionArray0, 2375);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      OrderedMapIterator<SQLDataException, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLWarning>[] iteratorArray0 = (Iterator<SQLWarning>[]) Array.newInstance(Iterator.class, 7);
      MapIterator<SQLWarning, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[0] = (Iterator<SQLWarning>) mapIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) orderedMapIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[0];
      int int0 = 128;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, 128, 128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>[]) iteratorArray0);
      IteratorUtils.chainedIterator((Iterator<?>) zippingIterator0, (Iterator<?>) zippingIterator0);
      IteratorUtils.emptyMapIterator();
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      int int0 = 3410;
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      int int1 = (-3406);
      // Undeclared exception!
      try { 
        stack0.listIterator((-3406));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3406
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 2);
      long long0 = 0L;
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) null, 0L, (-1718L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("ID</_K`o", "<UCF%!}F9nq^MAk", 0, (Throwable) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.collections4.iterators.PeekingIterator");
      sQLTimeoutException0.spliterator();
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      IteratorUtils.isEmpty(listIterator0);
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.emptyIterator();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Locale.FilteringMode>) resettableIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, ArrayList<SQLDataException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("&-f4C");
      LinkedList<TreeSet<Integer>> linkedList0 = new LinkedList<TreeSet<Integer>>();
      ResettableListIterator<TreeSet<Integer>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<TreeSet<Integer>>) linkedList0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(orderedMapIterator0, defaultEquator0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(equalPredicate0);
      IteratorUtils.matchesAny((Iterator<TreeSet<Integer>>) resettableListIterator0, (Predicate<? super TreeSet<Integer>>) notPredicate0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      IteratorUtils.arrayIterator(batchUpdateExceptionArray0, 0);
      IteratorUtils.emptyMapIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("nXQL!#akGB,G{-XXu");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("PHIX!", "_Z.0vZ%hC,Arwlg=", sQLRecoverableException0);
      sQLRecoverableException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0, false);
      SQLRecoverableException sQLRecoverableException1 = singletonIterator0.next();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLRecoverableException1);
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientException>) singletonListIterator0, (Predicate<? super SQLTransientException>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("ID</_K`o", "<UCaF%!}F9nq^MAk", 0, (Throwable) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<UCaF%!}F9nq^MAk");
      sQLTimeoutException0.spliterator();
      IteratorUtils.singletonListIterator(sQLTimeoutException0);
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.emptyIterator();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.filteredIterator((Iterator<? extends Locale.FilteringMode>) resettableIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, 4366, (Throwable) null);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLNonTransientConnectionException0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientConnectionException>) listIterator0);
      IteratorUtils.unmodifiableIterator(iterator0);
      OrderedMapIterator<Iterator<SQLRecoverableException>, TreeSet<ServiceLoader>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      List<Iterator<SQLRecoverableException>> list0 = IteratorUtils.toList((Iterator<? extends Iterator<SQLRecoverableException>>) orderedMapIterator0, 2720);
      LoopingIterator<Iterator<SQLRecoverableException>> loopingIterator0 = new LoopingIterator<Iterator<SQLRecoverableException>>(list0);
      IteratorUtils.zippingIterator((Iterator<? extends Iterator<SQLRecoverableException>>) loopingIterator0, (Iterator<? extends Iterator<SQLRecoverableException>>) loopingIterator0);
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      OrderedMapIterator<Integer, ComparatorPredicate.Criterion> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<Integer, ComparatorPredicate.Criterion> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, ComparatorPredicate.Criterion>) orderedMapIterator0);
      MapIterator<Integer, ComparatorPredicate.Criterion> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.isEmpty(mapIterator1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.item(0);
      // Undeclared exception!
      try { 
        iIOMetadataNode0.insertBefore((Node) null, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newChild == null!
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) listIterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      int[] intArray0 = new int[3];
      intArray0[0] = 10;
      intArray0[1] = 10;
      intArray0[2] = 10;
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>(stack0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) resettableListIterator0, (Equator<Object>) defaultEquator0);
      IteratorUtils.find((Iterator<Object>) singletonListIterator0, (Predicate<? super Object>) predicate0);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[1] = (Object) resettableListIterator0;
      objectArray0[2] = (Object) singletonListIterator0;
      objectArray0[3] = (Object) resettableListIterator0;
      objectArray0[4] = null;
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<Object>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      int[] intArray0 = new int[3];
      intArray0[0] = 10;
      intArray0[1] = 0;
      intArray0[2] = (-1615);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", intArray0);
      stack0.addElement(batchUpdateException0);
      ResettableListIterator<SQLException> resettableListIterator1 = IteratorUtils.loopingListIterator((List<SQLException>) stack0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate((Object) defaultEquator0, (Equator<Object>) defaultEquator0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) resettableListIterator1;
      objectArray0[1] = (Object) 10;
      objectArray0[2] = (Object) batchUpdateException0;
      MapIterator<Object, ComparatorPredicate.Criterion> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) mapIterator0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -1
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      int[] intArray0 = new int[3];
      intArray0[0] = 10;
      intArray0[1] = 0;
      intArray0[2] = (-1615);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", intArray0);
      stack0.addElement(batchUpdateException0);
      IteratorUtils.loopingListIterator((List<SQLException>) stack0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLIntegrityConstraintViolationException0);
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0, true);
      singletonIterator0.next();
      iteratorArray0[0] = (Iterator<SQLRecoverableException>) singletonIterator0;
      IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) comparator0, (Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLIntegrityConstraintViolationException0);
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 2);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      predicateArray0[0] = (Predicate<SQLException>) uniquePredicate0;
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLRecoverableException0, (Equator<SQLException>) null);
      predicateArray0[1] = predicate0;
      Predicate<SQLTransientException> predicate1 = AnyPredicate.anyPredicate((Predicate<? super SQLTransientException>[]) predicateArray0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientException>) singletonListIterator0, (Predicate<? super SQLTransientException>) predicate1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("jeD", "", 1659);
      IteratorUtils.singletonListIterator(sQLTimeoutException0);
      IteratorUtils.isEmpty((Iterator<?>) null);
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.emptyIterator();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Locale.FilteringMode>) resettableIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("The predicate and transformer map must not be null");
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>(sQLTimeoutException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) singletonListIterator0, (Equator<Object>) defaultEquator0);
      IteratorUtils.find((Iterator<Object>) singletonListIterator0, (Predicate<? super Object>) predicate0);
      objectArray0[0] = null;
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<Object>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      OrderedMapIterator<String, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      AbstractOrderedMapIteratorDecorator<String, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, DataTruncation>(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      
      Iterator<String> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends String>) abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(iterator0);
      
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0, 0, 0);
      assertEquals(0, dataTruncationArray0.length);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Hashtable<SQLSyntaxErrorException, LinkedList<SQLClientInfoException>> hashtable0 = new Hashtable<SQLSyntaxErrorException, LinkedList<SQLClientInfoException>>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      EntrySetMapIterator<SQLSyntaxErrorException, LinkedList<SQLClientInfoException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLSyntaxErrorException, LinkedList<SQLClientInfoException>>(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(entrySetMapIterator0);
      
      MapIterator<SQLSyntaxErrorException, LinkedList<SQLClientInfoException>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, LinkedList<SQLClientInfoException>>) entrySetMapIterator0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(mapIterator0);
      
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[9];
      int int0 = 0;
      String string0 = "yX$\"";
      SQLWarning sQLWarning0 = new SQLWarning("yX$\"");
      assertEquals("yX$\"", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: yX$\"", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      SQLDataException sQLDataException0 = new SQLDataException("", sQLWarning0);
      assertEquals("yX$\"", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: yX$\"", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      SQLDataException sQLDataException1 = new SQLDataException("", "", 0, sQLDataException0);
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertEquals("yX$\"", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: yX$\"", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("", sQLDataException1.getMessage());
      assertEquals("", sQLDataException1.getSQLState());
      assertEquals("java.sql.SQLDataException: ", sQLDataException1.toString());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertNotNull(sQLDataException1);
      
      sQLDataExceptionArray0[0] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException(sQLDataException0);
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertFalse(sQLDataException2.equals((Object)sQLDataException1));
      assertFalse(sQLDataException2.equals((Object)sQLDataException0));
      assertEquals("yX$\"", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: yX$\"", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException2.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.sql.SQLDataException: ", sQLDataException2.toString());
      assertEquals("java.sql.SQLDataException: ", sQLDataException2.getMessage());
      assertNull(sQLDataException2.getSQLState());
      assertNotNull(sQLDataException2);
      
      sQLDataExceptionArray0[1] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException(sQLDataException2);
      assertFalse(sQLDataException0.equals((Object)sQLDataException2));
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertFalse(sQLDataException2.equals((Object)sQLDataException1));
      assertFalse(sQLDataException2.equals((Object)sQLDataException0));
      assertFalse(sQLDataException3.equals((Object)sQLDataException0));
      assertFalse(sQLDataException3.equals((Object)sQLDataException1));
      assertFalse(sQLDataException3.equals((Object)sQLDataException2));
      assertEquals("yX$\"", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: yX$\"", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException2.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.sql.SQLDataException: ", sQLDataException2.toString());
      assertEquals("java.sql.SQLDataException: ", sQLDataException2.getMessage());
      assertNull(sQLDataException2.getSQLState());
      assertEquals(0, sQLDataException3.getErrorCode());
      assertEquals("java.sql.SQLDataException: java.sql.SQLDataException: ", sQLDataException3.getMessage());
      assertNull(sQLDataException3.getSQLState());
      assertEquals("java.sql.SQLDataException: java.sql.SQLDataException: java.sql.SQLDataException: ", sQLDataException3.toString());
      assertNotNull(sQLDataException3);
      
      sQLDataExceptionArray0[2] = sQLDataException3;
      String string1 = "pr]-=K7";
      SQLDataException sQLDataException4 = new SQLDataException("pr]-=K7", "", 0);
      assertFalse(sQLDataException4.equals((Object)sQLDataException0));
      assertFalse(sQLDataException4.equals((Object)sQLDataException1));
      assertFalse(sQLDataException4.equals((Object)sQLDataException2));
      assertFalse(sQLDataException4.equals((Object)sQLDataException3));
      assertEquals(0, sQLDataException4.getErrorCode());
      assertEquals("java.sql.SQLDataException: pr]-=K7", sQLDataException4.toString());
      assertEquals("", sQLDataException4.getSQLState());
      assertEquals("pr]-=K7", sQLDataException4.getMessage());
      assertNotNull(sQLDataException4);
      
      sQLDataExceptionArray0[3] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("");
      assertFalse(sQLDataException5.equals((Object)sQLDataException3));
      assertFalse(sQLDataException5.equals((Object)sQLDataException4));
      assertFalse(sQLDataException5.equals((Object)sQLDataException0));
      assertFalse(sQLDataException5.equals((Object)sQLDataException1));
      assertFalse(sQLDataException5.equals((Object)sQLDataException2));
      assertEquals("java.sql.SQLDataException: ", sQLDataException5.toString());
      assertEquals(0, sQLDataException5.getErrorCode());
      assertNull(sQLDataException5.getSQLState());
      assertEquals("", sQLDataException5.getMessage());
      assertNotNull(sQLDataException5);
      
      sQLDataExceptionArray0[4] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException("pr]-=K7", sQLDataException5);
      assertFalse(sQLDataException5.equals((Object)sQLDataException3));
      assertFalse(sQLDataException5.equals((Object)sQLDataException4));
      assertFalse(sQLDataException5.equals((Object)sQLDataException0));
      assertFalse(sQLDataException5.equals((Object)sQLDataException1));
      assertFalse(sQLDataException5.equals((Object)sQLDataException2));
      assertFalse(sQLDataException6.equals((Object)sQLDataException3));
      assertFalse(sQLDataException6.equals((Object)sQLDataException5));
      assertFalse(sQLDataException6.equals((Object)sQLDataException1));
      assertFalse(sQLDataException6.equals((Object)sQLDataException2));
      assertFalse(sQLDataException6.equals((Object)sQLDataException0));
      assertFalse(sQLDataException6.equals((Object)sQLDataException4));
      assertEquals("java.sql.SQLDataException: ", sQLDataException5.toString());
      assertEquals(0, sQLDataException5.getErrorCode());
      assertNull(sQLDataException5.getSQLState());
      assertEquals("", sQLDataException5.getMessage());
      assertNull(sQLDataException6.getSQLState());
      assertEquals(0, sQLDataException6.getErrorCode());
      assertEquals("pr]-=K7", sQLDataException6.getMessage());
      assertEquals("java.sql.SQLDataException: pr]-=K7", sQLDataException6.toString());
      assertNotNull(sQLDataException6);
      
      sQLDataExceptionArray0[5] = sQLDataException6;
      String string2 = "add() is not supported by this iterator";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("6p4YD-#|:{'G\"7]%9;", hashMap0, sQLDataException5);
      assertFalse(sQLDataException5.equals((Object)sQLDataException6));
      assertFalse(sQLDataException5.equals((Object)sQLDataException3));
      assertFalse(sQLDataException5.equals((Object)sQLDataException4));
      assertFalse(sQLDataException5.equals((Object)sQLDataException0));
      assertFalse(sQLDataException5.equals((Object)sQLDataException1));
      assertFalse(sQLDataException5.equals((Object)sQLDataException2));
      assertEquals("java.sql.SQLDataException: ", sQLDataException5.toString());
      assertEquals(0, sQLDataException5.getErrorCode());
      assertNull(sQLDataException5.getSQLState());
      assertEquals("", sQLDataException5.getMessage());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: 6p4YD-#|:{'G\"7]%9;", sQLClientInfoException0.toString());
      assertEquals("6p4YD-#|:{'G\"7]%9;", sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      // Undeclared exception!
      try { 
        sQLDataException6.initCause(sQLClientInfoException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLClientInfoException: 6p4YD-#|:{'G\"7]%9;
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) resettableIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator((SQLFeatureNotSupportedException) null);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[5];
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 3;
      longArray0[1] = (long) 3;
      longArray0[2] = (long) 3;
      longArray0[3] = (long) 3;
      longArray0[4] = (long) 3;
      longArray0[5] = (long) 3;
      longArray0[6] = (long) 3;
      longArray0[7] = (long) 3;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.iterators.SkippingIterator", "8", 3, longArray0, (Throwable) null);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L}, longArray0);
      assertEquals(3, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: org.apache.commons.collections4.iterators.SkippingIterator", batchUpdateException0.toString());
      assertEquals("org.apache.commons.collections4.iterators.SkippingIterator", batchUpdateException0.getMessage());
      assertEquals("8", batchUpdateException0.getSQLState());
      assertNotNull(batchUpdateException0);
      
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      int[] intArray0 = new int[9];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 3;
      intArray0[5] = 3;
      intArray0[6] = 3;
      intArray0[7] = 3;
      intArray0[8] = 3;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("8", (String) null, 3, intArray0, batchUpdateException0);
      assertEquals(8, longArray0.length);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new long[] {3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L}, longArray0);
      assertArrayEquals(new int[] {3, 3, 3, 3, 3, 3, 3, 3, 3}, intArray0);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertNull(batchUpdateException1.getSQLState());
      assertEquals(3, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: 8", batchUpdateException1.toString());
      assertEquals("8", batchUpdateException1.getMessage());
      assertEquals(3, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: org.apache.commons.collections4.iterators.SkippingIterator", batchUpdateException0.toString());
      assertEquals("org.apache.commons.collections4.iterators.SkippingIterator", batchUpdateException0.getMessage());
      assertEquals("8", batchUpdateException0.getSQLState());
      assertNotNull(batchUpdateException1);
      
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("8", intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {3, 3, 3, 3, 3, 3, 3, 3, 3}, intArray0);
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException0));
      assertEquals("8", batchUpdateException2.getMessage());
      assertEquals("java.sql.BatchUpdateException: 8", batchUpdateException2.toString());
      assertNull(batchUpdateException2.getSQLState());
      assertEquals(0, batchUpdateException2.getErrorCode());
      assertNotNull(batchUpdateException2);
      
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("iterator", "org.apache.commons.collections4.iterators.SkippingIterator", intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {3, 3, 3, 3, 3, 3, 3, 3, 3}, intArray0);
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException0));
      assertEquals("iterator", batchUpdateException3.getMessage());
      assertEquals(0, batchUpdateException3.getErrorCode());
      assertEquals("org.apache.commons.collections4.iterators.SkippingIterator", batchUpdateException3.getSQLState());
      assertEquals("java.sql.BatchUpdateException: iterator", batchUpdateException3.toString());
      assertNotNull(batchUpdateException3);
      
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("org.apache.commons.collections4.iterators.SkippingIterator", "8", intArray0, batchUpdateException2);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {3, 3, 3, 3, 3, 3, 3, 3, 3}, intArray0);
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException0));
      assertEquals("8", batchUpdateException2.getMessage());
      assertEquals("java.sql.BatchUpdateException: 8", batchUpdateException2.toString());
      assertNull(batchUpdateException2.getSQLState());
      assertEquals(0, batchUpdateException2.getErrorCode());
      assertEquals("8", batchUpdateException4.getSQLState());
      assertEquals(0, batchUpdateException4.getErrorCode());
      assertEquals("org.apache.commons.collections4.iterators.SkippingIterator", batchUpdateException4.getMessage());
      assertEquals("java.sql.BatchUpdateException: org.apache.commons.collections4.iterators.SkippingIterator", batchUpdateException4.toString());
      assertNotNull(batchUpdateException4);
      
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0, 0);
      assertEquals(5, batchUpdateExceptionArray0.length);
      assertNotNull(resettableIterator0);
      
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      BatchUpdateException[] batchUpdateExceptionArray1 = IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) resettableIterator0, class0);
      assertNotSame(batchUpdateExceptionArray1, batchUpdateExceptionArray0);
      assertNotSame(batchUpdateExceptionArray0, batchUpdateExceptionArray1);
      assertEquals(5, batchUpdateExceptionArray1.length);
      assertEquals(5, batchUpdateExceptionArray0.length);
      assertFalse(batchUpdateExceptionArray1.equals((Object)batchUpdateExceptionArray0));
      assertNotNull(batchUpdateExceptionArray1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "R,}Ho.\". R`~'\"");
      assertFalse(boolean0);
      
      Predicate<LinkedHashSet<SQLSyntaxErrorException>> predicate0 = UniquePredicate.uniquePredicate();
      assertNotNull(predicate0);
      
      Predicate<LinkedHashSet<SQLSyntaxErrorException>> predicate1 = UniquePredicate.uniquePredicate();
      assertNotSame(predicate1, predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertNotNull(sQLWarning0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Collection must not be null", "Collection must not be null", 1, sQLWarning0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Collection must not be null", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(1, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("Collection must not be null", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("Collection must not be null", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = (SQLInvalidAuthorizationSpecException)sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Collection must not be null", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(1, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("Collection must not be null", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("Collection must not be null", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Collection must not be null", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(1, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("Collection must not be null", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals("Collection must not be null", sQLInvalidAuthorizationSpecException1.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      boolean boolean1 = uniquePredicate0.evaluate(sQLInvalidAuthorizationSpecException0);
      assertTrue(boolean1);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertFalse(boolean1 == boolean0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Collection must not be null", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(1, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("Collection must not be null", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("Collection must not be null", sQLInvalidAuthorizationSpecException0.getSQLState());
      
      Predicate<LinkedHashSet<SQLSyntaxErrorException>> predicate2 = UniquePredicate.uniquePredicate();
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate2, predicate0);
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      
      Iterator<Object> iterator0 = IteratorUtils.filteredIterator((Iterator<?>) listIterator0, (Predicate<? super Object>) uniquePredicate0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      int int0 = 2981;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, 2981);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(2981, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(2981, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLTransactionRollbackException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(2981, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLTransactionRollbackException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTimeoutException0.getMessage());
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(2981, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLTimeoutException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(2981, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLTransactionRollbackException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTimeoutException0.getMessage());
      assertNotNull(predicate0);
      
      IfTransformer<SQLException, Boolean> ifTransformer0 = new IfTransformer<SQLException, Boolean>(predicate0, (Transformer<? super SQLException, ? extends Boolean>) null, (Transformer<? super SQLException, ? extends Boolean>) null);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(2981, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLTransactionRollbackException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTimeoutException0.getMessage());
      assertNotNull(ifTransformer0);
      
      TransformerPredicate<SQLTransientException> transformerPredicate0 = new TransformerPredicate<SQLTransientException>((Transformer<? super SQLTransientException, Boolean>) null);
      assertNotNull(transformerPredicate0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = "3Yd39?\"1>5Z\"f";
      String string1 = "\"si:";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("3Yd39?\"1>5Z\"f", "\"si:");
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: 3Yd39?\"1>5Z\"f", sQLTransactionRollbackException0.toString());
      assertEquals("\"si:", sQLTransactionRollbackException0.getSQLState());
      assertEquals("3Yd39?\"1>5Z\"f", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      Spliterator<Throwable> spliterator0 = sQLTransactionRollbackException0.spliterator();
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: 3Yd39?\"1>5Z\"f", sQLTransactionRollbackException0.toString());
      assertEquals("\"si:", sQLTransactionRollbackException0.getSQLState());
      assertEquals("3Yd39?\"1>5Z\"f", sQLTransactionRollbackException0.getMessage());
      assertNotNull(spliterator0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      Predicate<LinkedHashSet<SQLSyntaxErrorException>> predicate0 = UniquePredicate.uniquePredicate();
      assertNotNull(predicate0);
      
      Predicate<LinkedHashSet<SQLSyntaxErrorException>> predicate1 = UniquePredicate.uniquePredicate();
      assertNotSame(predicate1, predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      String string0 = "Collection must not be null";
      int int0 = 1;
      SQLWarning sQLWarning0 = new SQLWarning();
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertNotNull(sQLWarning0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Collection must not be null", "Collection must not be null", 1, sQLWarning0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Collection must not be null", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("Collection must not be null", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("Collection must not be null", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(1, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = (SQLInvalidAuthorizationSpecException)sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Collection must not be null", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("Collection must not be null", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("Collection must not be null", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(1, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("Collection must not be null", sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Collection must not be null", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals("Collection must not be null", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals(1, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      boolean boolean0 = uniquePredicate0.evaluate(sQLInvalidAuthorizationSpecException0);
      assertTrue(boolean0);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Collection must not be null", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("Collection must not be null", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("Collection must not be null", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(1, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      Predicate<LinkedHashSet<SQLSyntaxErrorException>> predicate2 = UniquePredicate.uniquePredicate();
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate2, predicate0);
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      
      Iterator<Object> iterator0 = IteratorUtils.filteredIterator((Iterator<?>) listIterator0, (Predicate<? super Object>) uniquePredicate0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
