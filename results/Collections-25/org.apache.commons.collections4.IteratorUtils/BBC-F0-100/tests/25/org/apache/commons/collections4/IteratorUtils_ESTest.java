/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 13:42:23 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PriorityQueue<ClientInfoStatus>[] priorityQueueArray0 = (PriorityQueue<ClientInfoStatus>[]) Array.newInstance(PriorityQueue.class, 10);
      EmptyIterator.emptyIterator();
      Integer integer0 = new Integer(1062);
      IteratorUtils.getIterator(integer0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "getValue() can only be called after next() and before remove()", hashMap0);
      Transformer<Object, SQLClientInfoException> transformer0 = InvokerTransformer.invokerTransformer("jZ-3");
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'jZ-3' on 'class java.sql.SQLClientInfoException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      PriorityQueue<ClientInfoStatus> priorityQueue0 = new PriorityQueue<ClientInfoStatus>();
      PriorityQueue<ClientInfoStatus> priorityQueue1 = new PriorityQueue<ClientInfoStatus>(priorityQueue0);
      LoopingIterator<ClientInfoStatus> loopingIterator0 = new LoopingIterator<ClientInfoStatus>(priorityQueue1);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      priorityQueue1.add(clientInfoStatus0);
      int int0 = 1;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<ClientInfoStatus>) loopingIterator0, 1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Comparator<SQLClientInfoException> comparator0 = (Comparator<SQLClientInfoException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 5);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("]kW|..Pt}F", ". [!gv/'", hashMap0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("]kW|..Pt}F", "List must not be null", hashMap0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) resettableListIterator0;
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) iteratorArray0[0]);
      iteratorArray0[1] = iterator0;
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) iterator0, (Iterator<? extends SQLClientInfoException>) iteratorArray0[0], (Iterator<? extends SQLClientInfoException>) iteratorArray0[0]);
      iteratorArray0[2] = (Iterator<SQLClientInfoException>) zippingIterator0;
      SkippingIterator<SQLClientInfoException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLClientInfoException>) resettableListIterator0, 1L);
      iteratorArray0[3] = (Iterator<SQLClientInfoException>) skippingIterator0;
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) resettableListIterator0);
      iteratorArray0[4] = (Iterator<SQLClientInfoException>) listIterator0;
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PriorityQueue<ClientInfoStatus>[] priorityQueueArray0 = (PriorityQueue<ClientInfoStatus>[]) Array.newInstance(PriorityQueue.class, 33);
      ObjectArrayIterator<PriorityQueue<ClientInfoStatus>> objectArrayIterator0 = new ObjectArrayIterator<PriorityQueue<ClientInfoStatus>>(priorityQueueArray0);
      int int0 = 4;
      PriorityQueue<ClientInfoStatus> priorityQueue0 = new PriorityQueue<ClientInfoStatus>();
      SQLDataException sQLDataException0 = new SQLDataException();
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) null);
      Predicate<SQLNonTransientException> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLDataException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MapIterator<SQLTransientException, Locale.LanguageRange> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = null;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<SQLException> anyPredicate0 = new AnyPredicate<SQLException>(predicateArray0);
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      PredicateTransformer<SQLNonTransientConnectionException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientConnectionException>(anyPredicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = null;
      Boolean boolean0 = predicateTransformer0.transform((SQLNonTransientConnectionException) null);
      ConstantTransformer<Object, Boolean> constantTransformer0 = new ConstantTransformer<Object, Boolean>(boolean0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(constantTransformer0);
      predicateArray1[0] = (Predicate<Object>) transformerPredicate0;
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      LoopingIterator<InstanceofPredicate> loopingIterator0 = new LoopingIterator<InstanceofPredicate>(arrayDeque0);
      int int0 = 1073741800;
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) loopingIterator0, 1073741800);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("<O\":6JmA4^");
      arrayList0.add("z`1]d}E1=Yqb#%FWTN");
      Iterator<String> iterator0 = arrayList0.iterator();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>((Factory<? extends String>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super String, String>) factoryTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLException[] sQLExceptionArray0 = new SQLException[2];
      SQLException sQLException0 = new SQLException((String) null);
      sQLExceptionArray0[0] = sQLException0;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLException0);
      sQLExceptionArray0[1] = (SQLException) sQLClientInfoException0;
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLExceptionArray0, 2);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, ClientInfoStatus> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) orderedMapIterator0, (Class<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException(":db64)iNm8", "");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTransientException0);
      Factory<SQLInvalidAuthorizationSpecException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, SQLInvalidAuthorizationSpecException> factoryTransformer0 = new FactoryTransformer<Object, SQLInvalidAuthorizationSpecException>(factory0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) factoryTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0, 3077);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PriorityQueue<ClientInfoStatus>[] priorityQueueArray0 = (PriorityQueue<ClientInfoStatus>[]) Array.newInstance(PriorityQueue.class, 14);
      ObjectArrayIterator<PriorityQueue<ClientInfoStatus>> objectArrayIterator0 = new ObjectArrayIterator<PriorityQueue<ClientInfoStatus>>(priorityQueueArray0);
      IteratorUtils.get((Iterator<PriorityQueue<ClientInfoStatus>>) objectArrayIterator0, 4);
      HashMap<Predicate<Object>, BatchUpdateException> hashMap0 = new HashMap<Predicate<Object>, BatchUpdateException>();
      SingletonListIterator<HashMap<Predicate<Object>, BatchUpdateException>> singletonListIterator0 = new SingletonListIterator<HashMap<Predicate<Object>, BatchUpdateException>>(hashMap0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("/UA");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<HashMap<Predicate<Object>, BatchUpdateException>>) singletonListIterator0, (Transformer<? super HashMap<Predicate<Object>, BatchUpdateException>, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '/UA' on 'class java.util.HashMap' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Properties>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PriorityQueue<ClientInfoStatus>[] priorityQueueArray0 = (PriorityQueue<ClientInfoStatus>[]) Array.newInstance(PriorityQueue.class, 3);
      ObjectArrayIterator<PriorityQueue<ClientInfoStatus>> objectArrayIterator0 = new ObjectArrayIterator<PriorityQueue<ClientInfoStatus>>(priorityQueueArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Transformer<IIOMetadataNode, IIOMetadataNode> transformer0 = CloneTransformer.cloneTransformer();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) iterator0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The prototype must be cloneable via a public clone method
         //
         verifyException("org.apache.commons.collections4.functors.PrototypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      linkedList0.add(iIOMetadataNode0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) linkedList0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Iterator<? extends IIOMetadataNode>) resettableListIterator0, (Iterator<? extends IIOMetadataNode>) iterator0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) zippingIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.getIterator(class0);
      ResettableListIterator<SQLException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) resettableListIterator0, (Transformer<? super SQLException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.getIterator(class0);
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MapIterator<IIOMetadataNode, SQLTransactionRollbackException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) mapIterator0, class0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[3];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Entry does not exist: ", "=.R", 33);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Enumeration must not be null", sQLSyntaxErrorException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("=.R");
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("ArgMaCY28i#kH", (String) null, sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      AndPredicate<SQLTransactionRollbackException> andPredicate0 = new AndPredicate<SQLTransactionRollbackException>((Predicate<? super SQLTransactionRollbackException>) null, (Predicate<? super SQLTransactionRollbackException>) null);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) objectArrayListIterator0, (Predicate<? super SQLTransactionRollbackException>) andPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) listIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AndPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Closure must not be null");
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) singletonIterator0, (Iterator<? extends IIOMetadataNode>) singletonIterator0, (Iterator<? extends IIOMetadataNode>) singletonIterator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) zippingIterator0);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Predicate<? super IIOMetadataNode>) transformerPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) iterator1, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-122);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLNonTransientException[]) null, 125, (-115));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.getIterator(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      LoopingIterator<IIOMetadataNode> loopingIterator0 = new LoopingIterator<IIOMetadataNode>(linkedList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("EJJn5s/9Ehj");
      linkedList0.add(iIOMetadataNode0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) loopingIterator0, class0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PriorityQueue<ClientInfoStatus>[] priorityQueueArray0 = (PriorityQueue<ClientInfoStatus>[]) Array.newInstance(PriorityQueue.class, 5);
      PriorityQueue<ClientInfoStatus> priorityQueue0 = new PriorityQueue<ClientInfoStatus>();
      PriorityQueue<ClientInfoStatus> priorityQueue1 = new PriorityQueue<ClientInfoStatus>();
      Comparator<ClientInfoStatus> comparator0 = (Comparator<ClientInfoStatus>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<ClientInfoStatus> priorityQueue2 = new PriorityQueue<ClientInfoStatus>();
      ObjectArrayIterator<PriorityQueue<ClientInfoStatus>> objectArrayIterator0 = new ObjectArrayIterator<PriorityQueue<ClientInfoStatus>>(priorityQueueArray0);
      PriorityQueue<ClientInfoStatus> priorityQueue3 = IteratorUtils.get((Iterator<PriorityQueue<ClientInfoStatus>>) objectArrayIterator0, 1);
      assertNull(priorityQueue3);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) orderedIterator0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) iterator0, class0);
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<BatchUpdateException> allPredicate0 = new AllPredicate<BatchUpdateException>(predicateArray0);
      IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) listIterator0, (Predicate<? super BatchUpdateException>) allPredicate0);
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 5);
      iteratorArray0[0] = iterator0;
      iteratorArray0[1] = (Iterator<IIOMetadataNode>) orderedIterator0;
      iteratorArray0[2] = iterator0;
      iteratorArray0[3] = (Iterator<IIOMetadataNode>) orderedIterator0;
      iteratorArray0[4] = (Iterator<IIOMetadataNode>) orderedIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      Iterator<String>[] iteratorArray1 = (Iterator<String>[]) Array.newInstance(Iterator.class, 5);
      String[] stringArray0 = null;
      int int0 = 2934;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((String[]) null, 2934, (-1395));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PriorityQueue<ClientInfoStatus>[] priorityQueueArray0 = (PriorityQueue<ClientInfoStatus>[]) Array.newInstance(PriorityQueue.class, 5);
      PriorityQueue<ClientInfoStatus> priorityQueue0 = new PriorityQueue<ClientInfoStatus>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<ClientInfoStatus> priorityQueue1 = new PriorityQueue<ClientInfoStatus>();
      priorityQueueArray0[1] = priorityQueue1;
      Comparator<ClientInfoStatus> comparator0 = (Comparator<ClientInfoStatus>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<ClientInfoStatus> priorityQueue2 = new PriorityQueue<ClientInfoStatus>(comparator0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 4);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure0);
      closureArray0[0] = closure1;
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(nullIsFalsePredicate0, closure0);
      closureArray0[1] = (Closure<Object>) ifClosure0;
      Closure<Object> closure2 = IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure0);
      closureArray0[2] = closure2;
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>(1);
      Closure<Object> closure3 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      closureArray0[3] = closure3;
      ChainedClosure<SQLException> chainedClosure0 = new ChainedClosure<SQLException>(closureArray0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 3);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "org.apache.commons.collections4.iterators.SingletonIterator");
      Predicate<SQLException> predicate1 = IdentityPredicate.identityPredicate((SQLException) sQLSyntaxErrorException0);
      predicateArray0[0] = predicate1;
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<SQLException> predicate2 = EqualPredicate.equalPredicate((SQLException) sQLSyntaxErrorException0, (Equator<SQLException>) defaultEquator0);
      predicateArray0[1] = predicate2;
      Predicate<SQLException> predicate3 = AndPredicate.andPredicate((Predicate<? super SQLException>) predicate0, (Predicate<? super SQLException>) predicate1);
      predicateArray0[2] = predicate3;
      Closure<Object>[] closureArray1 = (Closure<Object>[]) Array.newInstance(Closure.class, 2);
      closureArray1[0] = (Closure<Object>) ifClosure0;
      closureArray1[1] = closure1;
      SwitchClosure<SQLException> switchClosure0 = new SwitchClosure<SQLException>(predicateArray0, closureArray1, closure0);
      IteratorUtils.apply((Iterator<SQLDataException>) null, (Closure<? super SQLDataException>) closureArray0[1]);
      assertNotSame(closureArray0, closureArray1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MapIterator<SQLDataException, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      OrderedMapIterator<SQLRecoverableException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLRecoverableException, SQLTransactionRollbackException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLRecoverableException, ? extends SQLTransactionRollbackException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLTransactionRollbackException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLTransactionRollbackException>(orderedMapIterator1);
      MapIterator<SQLRecoverableException, SQLTransactionRollbackException> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLRecoverableException, SQLTransactionRollbackException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) mapIterator1, (Iterator<? extends SQLRecoverableException>) abstractOrderedMapIteratorDecorator0);
      DataTruncation dataTruncation0 = new DataTruncation(1175, true, false, (-1586), (-5131));
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) singletonIterator0, 1175);
      IteratorUtils.loopingListIterator(list0);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 9);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      SQLDataException sQLDataException0 = new SQLDataException("");
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("", "f'y4NVm-[>u7= U", (-1586));
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("f'y4NVm-[>u7= U");
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("}xwUK^0APOOqH", "}xwUK^0APOOqH", (-1586), sQLDataException2);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("", (String) null, (-5131), sQLDataException0);
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("", "j%");
      sQLDataExceptionArray0[5] = sQLDataException5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLDataExceptionArray0, (-5131));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) class0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, closure0, false);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((Throwable) null);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException((String) null, (Throwable) null);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("Q86[t|cmsn;/NT", "&yZ'V5` ", (Throwable) null);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      IteratorUtils.apply((Iterator<SQLRecoverableException>) objectArrayListIterator0, (Closure<? super SQLRecoverableException>) closure0);
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertFalse(objectArrayListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      OrderedMapIterator<SQLDataException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, SQLDataException>(orderedMapIterator0);
      OrderedMapIterator<SQLDataException, SQLDataException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends SQLDataException>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLDataException>) orderedMapIterator1, (Closure<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) orderedMapIterator0, class0);
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) orderedMapIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      predicateArray0[0] = predicate0;
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object> predicate1 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate1);
      predicateArray0[1] = (Predicate<Object>) nullIsFalsePredicate0;
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      ChainedClosure<SQLException> chainedClosure0 = new ChainedClosure<SQLException>(closureArray0);
      SwitchClosure<SQLException> switchClosure0 = new SwitchClosure<SQLException>(predicateArray0, closureArray0, chainedClosure0);
      IteratorUtils.apply((Iterator<SQLDataException>) resettableListIterator0, (Closure<? super SQLDataException>) switchClosure0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) orderedMapIterator0, class0);
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 21);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      predicateArray0[1] = (Predicate<Object>) nullIsFalsePredicate0;
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      ChainedClosure<SQLException> chainedClosure0 = new ChainedClosure<SQLException>(closureArray0);
      SwitchClosure<SQLException> switchClosure0 = new SwitchClosure<SQLException>(predicateArray0, closureArray0, chainedClosure0);
      IteratorUtils.apply((Iterator<SQLDataException>) resettableListIterator0, (Closure<? super SQLDataException>) switchClosure0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Integer integer0 = new Integer(9);
      IteratorUtils.getIterator(integer0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) resettableListIterator0, class0);
      PriorityQueue<ClientInfoStatus> priorityQueue0 = new PriorityQueue<ClientInfoStatus>();
      PriorityQueue<ClientInfoStatus>[] priorityQueueArray0 = (PriorityQueue<ClientInfoStatus>[]) Array.newInstance(PriorityQueue.class, 8);
      priorityQueueArray0[0] = priorityQueue0;
      priorityQueueArray0[1] = priorityQueue0;
      priorityQueueArray0[2] = priorityQueue0;
      priorityQueueArray0[3] = priorityQueue0;
      priorityQueueArray0[4] = priorityQueue0;
      priorityQueueArray0[5] = priorityQueue0;
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      priorityQueue0.add(clientInfoStatus0);
      priorityQueueArray0[6] = priorityQueue0;
      ObjectArrayIterator<PriorityQueue<ClientInfoStatus>> objectArrayIterator0 = new ObjectArrayIterator<PriorityQueue<ClientInfoStatus>>(priorityQueueArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super String>) null, (Iterator<? extends String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PriorityQueue<ClientInfoStatus>[] priorityQueueArray0 = (PriorityQueue<ClientInfoStatus>[]) Array.newInstance(PriorityQueue.class, 5);
      PriorityQueue<ClientInfoStatus> priorityQueue0 = new PriorityQueue<ClientInfoStatus>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<ClientInfoStatus> priorityQueue1 = new PriorityQueue<ClientInfoStatus>();
      priorityQueueArray0[1] = priorityQueue1;
      Comparator<ClientInfoStatus> comparator0 = (Comparator<ClientInfoStatus>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<ClientInfoStatus> priorityQueue2 = new PriorityQueue<ClientInfoStatus>(comparator0);
      priorityQueueArray0[2] = priorityQueue2;
      PriorityQueue<ClientInfoStatus> priorityQueue3 = new PriorityQueue<ClientInfoStatus>();
      priorityQueueArray0[3] = priorityQueue3;
      PriorityQueue<ClientInfoStatus> priorityQueue4 = new PriorityQueue<ClientInfoStatus>((Collection<? extends ClientInfoStatus>) priorityQueue1);
      priorityQueueArray0[4] = priorityQueue4;
      ObjectArrayIterator<PriorityQueue<ClientInfoStatus>> objectArrayIterator0 = new ObjectArrayIterator<PriorityQueue<ClientInfoStatus>>(priorityQueueArray0);
      IteratorUtils.get((Iterator<PriorityQueue<ClientInfoStatus>>) objectArrayIterator0, 1);
      OrderedMapIterator<IIOMetadataNode, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IIOMetadataNode[] iIOMetadataNodeArray0 = IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) orderedMapIterator0, class0);
      assertEquals(0, iIOMetadataNodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      PriorityQueue<ClientInfoStatus> priorityQueue0 = new PriorityQueue<ClientInfoStatus>(1466);
      PriorityQueue<ClientInfoStatus>[] priorityQueueArray0 = (PriorityQueue<ClientInfoStatus>[]) Array.newInstance(PriorityQueue.class, 5);
      priorityQueueArray0[0] = priorityQueue0;
      priorityQueueArray0[1] = priorityQueue0;
      priorityQueueArray0[2] = priorityQueue0;
      priorityQueueArray0[3] = priorityQueue0;
      priorityQueueArray0[4] = priorityQueue0;
      ObjectArrayIterator<PriorityQueue<ClientInfoStatus>> objectArrayIterator0 = new ObjectArrayIterator<PriorityQueue<ClientInfoStatus>>(priorityQueueArray0);
      IteratorUtils.get((Iterator<PriorityQueue<ClientInfoStatus>>) objectArrayIterator0, 2);
      OrderedIterator<Transformer<Object, String>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<Transformer<Object, String>> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Transformer<Object, String>>) orderedIterator0, (Iterator<? extends Transformer<Object, String>>) orderedIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      IteratorUtils.matchesAny((Iterator<PriorityQueue<ArrayList>>) null, (Predicate<? super PriorityQueue<ArrayList>>) instanceofPredicate0);
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 2);
      String string0 = "=DmE'bf&f8";
      MockThrowable mockThrowable0 = new MockThrowable("=DmE'bf&f8");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Xf2i", "=DmE'bf&f8", (-2419), mockThrowable0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        sQLTransactionRollbackException0.forEach((Consumer<? super Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      OrderedMapIterator<Locale.Category, LinkedList<DataTruncation>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Locale.Category, LinkedList<DataTruncation>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Locale.Category, LinkedList<DataTruncation>>(orderedMapIterator0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[7];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode("org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator");
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode();
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 1);
      IIOMetadataNode[] iIOMetadataNodeArray1 = IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) resettableListIterator0, class0);
      assertEquals(6, iIOMetadataNodeArray1.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      Iterator<?> iterator0 = IteratorUtils.getIterator(class0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(class0, comparator0, comparatorPredicate_Criterion0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<PriorityQueue<ArrayList>>) iterator0, (Predicate<? super PriorityQueue<ArrayList>>) comparatorPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<ComparatorPredicate.Criterion, Object> hashMap0 = new HashMap<ComparatorPredicate.Criterion, Object>();
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLException>>) arrayDeque0);
      EmptyListIterator.resettableEmptyListIterator();
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) null, (Collection<? super SQLClientInfoException>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) orderedIterator0);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) orderedIterator0);
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 3);
      LinkedHashSet<Locale.Category> linkedHashSet0 = new LinkedHashSet<Locale.Category>();
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Locale.Category>) linkedHashSet0);
      BoundedIterator<Locale.Category> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Locale.Category>) resettableIterator0, 1777L, 0L);
      iteratorArray0[0] = (Iterator<Locale.Category>) boundedIterator0;
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Transformer<Object, Locale.Category> transformer0 = ConstantTransformer.constantTransformer(locale_Category0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) resettableListIterator0, (Transformer<? super SQLDataException, ? extends Locale.Category>) transformer0);
      iteratorArray0[1] = iterator0;
      OrderedMapIterator<Locale.Category, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[2] = (Iterator<Locale.Category>) orderedMapIterator0;
      ZippingIterator<Locale.Category> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>[]) iteratorArray0);
      IteratorUtils.unmodifiableIterator((Iterator<Locale.Category>) zippingIterator0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<ComparatorPredicate.Criterion, Object> hashMap0 = new HashMap<ComparatorPredicate.Criterion, Object>();
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Class<SQLWarning> class0 = SQLWarning.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      arrayDeque0.add(instanceofPredicate0);
      Predicate<SQLException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLException>>) arrayDeque0);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Boolean, StringTokenizer> hashMap0 = new HashMap<Boolean, StringTokenizer>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<ComparatorPredicate.Criterion, Object> hashMap0 = new HashMap<ComparatorPredicate.Criterion, Object>();
      int[] intArray0 = new int[4];
      intArray0[0] = 180;
      intArray0[1] = 180;
      intArray0[2] = 180;
      intArray0[3] = 180;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Yw_V||>{^']#<", "D&Pj<%DeuE>u", 16);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, 180, intArray0, sQLTimeoutException0);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) singletonListIterator0);
      Integer integer0 = new Integer(16);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "Iterator must not be null", batchUpdateException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null);
      boolean boolean0 = IteratorUtils.contains((Iterator<BatchUpdateException>) singletonListIterator0, (Object) batchUpdateException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<ComparatorPredicate.Criterion, Object> hashMap0 = new HashMap<ComparatorPredicate.Criterion, Object>();
      Integer integer0 = new Integer((-1));
      IteratorUtils.getIterator(integer0);
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      UniquePredicate.uniquePredicate();
      OrderedMapIterator<ClientInfoStatus, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<ClientInfoStatus, SQLTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<ClientInfoStatus, ? extends SQLTransientException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<ClientInfoStatus, SQLTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<ClientInfoStatus, SQLTransientException>(orderedMapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends ClientInfoStatus>) abstractOrderedMapIteratorDecorator0, (Transformer<? super ClientInfoStatus, ? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.spliterator();
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      HashSet<StringTokenizer> hashSet0 = new HashSet<StringTokenizer>();
      IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) hashSet0);
      Hashtable<InstanceofPredicate, Transformer<Object, String>> hashtable0 = new Hashtable<InstanceofPredicate, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashtable0);
      IteratorUtils.toString((Iterator<TreeSet<SQLTransactionRollbackException>>) null, (Transformer<? super TreeSet<SQLTransactionRollbackException>, String>) transformer0, "Already at start of list.", "bK1]>12iBkD", "");
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.spliterator();
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>();
      ListIterator<TreeSet<SQLTransactionRollbackException>> listIterator0 = IteratorUtils.singletonListIterator(treeSet0);
      TruePredicate.truePredicate();
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<TreeSet<SQLTransactionRollbackException>>) listIterator0, (Transformer<? super TreeSet<SQLTransactionRollbackException>, String>) transformer0, "Already at start of list.", "}k\"^1n", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.spliterator();
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      HashSet<StringTokenizer> hashSet0 = new HashSet<StringTokenizer>();
      IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) hashSet0);
      IteratorUtils.emptyOrderedMapIterator();
      Integer integer0 = new Integer(2157);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      Integer integer1 = new Integer(2157);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer1);
      IteratorUtils.chainedIterator((Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) listIterator0);
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) listIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      OrderedMapIterator<Iterator<SQLInvalidAuthorizationSpecException>, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Iterator<SQLInvalidAuthorizationSpecException>, SQLSyntaxErrorException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Iterator<SQLInvalidAuthorizationSpecException>, SQLSyntaxErrorException>(orderedMapIterator0);
      OrderedMapIterator<Iterator<SQLInvalidAuthorizationSpecException>, SQLSyntaxErrorException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Iterator<SQLInvalidAuthorizationSpecException>, ? extends SQLSyntaxErrorException>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Iterator<SQLInvalidAuthorizationSpecException>>) orderedMapIterator1, (-376L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PriorityQueue<ClientInfoStatus>[] priorityQueueArray0 = (PriorityQueue<ClientInfoStatus>[]) Array.newInstance(PriorityQueue.class, 3);
      ObjectArrayIterator<PriorityQueue<ClientInfoStatus>> objectArrayIterator0 = new ObjectArrayIterator<PriorityQueue<ClientInfoStatus>>(priorityQueueArray0);
      objectArrayIterator0.next();
      IteratorUtils.get((Iterator<PriorityQueue<ClientInfoStatus>>) objectArrayIterator0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends EnumSet<Locale.Category>>) null, (Iterator<? extends EnumSet<Locale.Category>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) orderedIterator0);
      OrderedMapIterator<Locale.Category, LinkedList<DataTruncation>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) orderedMapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0);
      DefaultEquator.defaultEquator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<SQLTimeoutException> orderedIterator1 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>) orderedIterator1, (Iterator<? extends SQLTimeoutException>) orderedIterator1);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      String string0 = IteratorUtils.toString(iterator0, (Transformer<? super SQLTimeoutException, String>) transformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super EnumSet<Locale.Category>>) null, (Iterator<? extends EnumSet<Locale.Category>>) null, (Iterator<? extends EnumSet<Locale.Category>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      BatchUpdateException batchUpdateException1 = new BatchUpdateException();
      batchUpdateException0.spliterator();
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>((IIOMetadataNode) null);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) singletonListIterator0, class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EmptyListIterator.emptyListIterator();
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) batchUpdateException1, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      BatchUpdateException batchUpdateException1 = new BatchUpdateException();
      batchUpdateException0.spliterator();
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      instantiateFactory0.create();
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("");
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) listIterator0, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>();
      ListIterator<TreeSet<SQLTransactionRollbackException>> listIterator0 = IteratorUtils.singletonListIterator(treeSet0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashtable0);
      hashtable0.put(predicate0, transformer0);
      IteratorUtils.toString((Iterator<TreeSet<SQLTransactionRollbackException>>) listIterator0, (Transformer<? super TreeSet<SQLTransactionRollbackException>, String>) transformer0, "Already at start of list.", "Already at start of list.", "");
      IteratorUtils.emptyOrderedMapIterator();
      DefaultEquator.defaultEquator();
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>();
      IteratorUtils.singletonListIterator(treeSet0);
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      IteratorUtils.emptyOrderedMapIterator();
      UniquePredicate<BatchUpdateException> uniquePredicate0 = new UniquePredicate<BatchUpdateException>();
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLException>>) arrayDeque0);
      EmptyListIterator.resettableEmptyListIterator();
      Predicate<SQLException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLException>>) arrayDeque0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.spliterator();
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      HashSet<StringTokenizer> hashSet0 = new HashSet<StringTokenizer>();
      IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) hashSet0);
      IteratorUtils.emptyOrderedMapIterator();
      UniquePredicate<BatchUpdateException> uniquePredicate0 = new UniquePredicate<BatchUpdateException>();
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<SQLException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLException>>) arrayDeque0);
      IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) singletonListIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      instantiateFactory0.create();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<Boolean, StringTokenizer> hashMap0 = new HashMap<Boolean, StringTokenizer>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) singletonListIterator0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer1);
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) iterator0, (Iterator<? extends Integer>) iterator0, (Iterator<? extends Integer>) resettableIterator0);
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      UniquePredicate<BatchUpdateException> uniquePredicate0 = new UniquePredicate<BatchUpdateException>();
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) singletonListIterator0, (Predicate<? super BatchUpdateException>) uniquePredicate0);
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) iterator1, (Iterator<? extends BatchUpdateException>) iterator1);
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLClientInfoException>) orderedIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[6];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("N8G}(\u0007d<dZzP,m$%", "N8G}(\u0007d<dZzP,m$%", sQLTransientConnectionException0);
      sQLTransactionRollbackException0.printStackTrace();
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException(sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("N8G}(\u0007d<dZzP,m$%", "x\"D<JT[F", 0, sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("J<x}I)fg 3;;", "x\"D<JT[F", sQLTransientConnectionException0);
      sQLTransientConnectionException0.printStackTrace();
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("x\"D<JT[F");
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, 0, 0);
      HashSet<StringTokenizer> hashSet0 = new HashSet<StringTokenizer>();
      IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) hashSet0);
      MapIterator<BatchUpdateException, SQLNonTransientException> mapIterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<PriorityQueue<ClientInfoStatus>>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<Boolean, StringTokenizer> hashMap0 = new HashMap<Boolean, StringTokenizer>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      batchUpdateException0.getStackTrace();
      IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) singletonListIterator0);
      int int0 = 13;
      Integer integer0 = new Integer(13);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("]", "reove() is not supprted", batchUpdateException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("]", "]");
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.getIterator(class0);
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 3);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) resettableListIterator0);
      iteratorArray0[0] = iterator0;
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) iterator0, (Iterator<? extends IIOMetadataNode>) iterator0);
      iteratorArray0[1] = iterator1;
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) iterator0);
      Iterator<IIOMetadataNode> iterator2 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      iteratorArray0[2] = iterator2;
      Iterator<IIOMetadataNode> iterator3 = IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends IIOMetadataNode>) iterator3, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, Properties>(orderedMapIterator0);
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>();
      ListIterator<TreeSet<SQLTransactionRollbackException>> listIterator0 = IteratorUtils.singletonListIterator(treeSet0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashtable0);
      IteratorUtils.toString((Iterator<TreeSet<SQLTransactionRollbackException>>) listIterator0, (Transformer<? super TreeSet<SQLTransactionRollbackException>, String>) transformer0, "Already at start of list.", "$]6:", "L");
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) singletonIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0);
      IteratorUtils.emptyOrderedMapIterator();
      DefaultEquator.defaultEquator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 5);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) resettableIterator0;
      HashMap<SQLTimeoutException, Transformer<Object, String>> hashMap0 = new HashMap<SQLTimeoutException, Transformer<Object, String>>();
      EntrySetMapIterator<SQLTimeoutException, Transformer<Object, String>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, Transformer<Object, String>>(hashMap0);
      iteratorArray0[1] = (Iterator<SQLTimeoutException>) entrySetMapIterator0;
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) iteratorArray0[1]);
      iteratorArray0[2] = (Iterator<SQLTimeoutException>) zippingIterator0;
      OrderedMapIterator<SQLTimeoutException, String> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, String> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, String>(orderedMapIterator1);
      iteratorArray0[3] = (Iterator<SQLTimeoutException>) abstractOrderedMapIteratorDecorator1;
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, String> abstractOrderedMapIteratorDecorator2 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, String>(orderedMapIterator1);
      iteratorArray0[4] = (Iterator<SQLTimeoutException>) abstractOrderedMapIteratorDecorator2;
      Iterator<SQLException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLException>) comparator0, (Iterator<? extends SQLException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<ComparatorPredicate.Criterion, Object> hashMap0 = new HashMap<ComparatorPredicate.Criterion, Object>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      MapIterator<Integer, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator((Integer) null);
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) mapIterator0, (Iterator<? extends Integer>) mapIterator0, (Iterator<? extends Integer>) resettableIterator0);
      IteratorUtils.emptyListIterator();
      Properties properties0 = new Properties();
      ConstantTransformer<Object, Properties> constantTransformer0 = new ConstantTransformer<Object, Properties>(properties0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLInvalidAuthorizationSpecException>>) null, (Transformer<? super Iterator<SQLInvalidAuthorizationSpecException>, ? extends Properties>) constantTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", "", 0, (int[]) null, batchUpdateException0);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException1);
      IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) orderedMapIterator0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(100);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer1);
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) iterator0, (Iterator<? extends Integer>) resettableIterator0);
      ResettableListIterator<Iterator<SQLInvalidAuthorizationSpecException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ConstantTransformer<Object, Properties> constantTransformer0 = new ConstantTransformer<Object, Properties>(properties1);
      IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLInvalidAuthorizationSpecException>>) resettableListIterator0, (Transformer<? super Iterator<SQLInvalidAuthorizationSpecException>, ? extends Properties>) constantTransformer0);
      // Undeclared exception!
      try { 
        ComparatorPredicate.comparatorPredicate((Object) batchUpdateException1, (Comparator<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator must not be null.
         //
         verifyException("org.apache.commons.collections4.functors.ComparatorPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Boolean, StringTokenizer> hashMap0 = new HashMap<Boolean, StringTokenizer>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) singletonListIterator0);
      Integer integer0 = new Integer(0);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0);
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) iterator0, (Iterator<? extends Integer>) iterator0, (Iterator<? extends Integer>) resettableIterator0);
      assertNotNull(zippingIterator0);
      
      ResettableListIterator<Iterator<SQLInvalidAuthorizationSpecException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Properties properties0 = new Properties();
      ConstantTransformer<Object, Properties> constantTransformer0 = new ConstantTransformer<Object, Properties>(properties0);
      Iterator<Properties> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLInvalidAuthorizationSpecException>>) resettableListIterator0, (Transformer<? super Iterator<SQLInvalidAuthorizationSpecException>, ? extends Properties>) constantTransformer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) batchUpdateException0, comparator0);
      TransformedPredicate<Properties> transformedPredicate0 = new TransformedPredicate<Properties>(constantTransformer0, predicate0);
      boolean boolean0 = IteratorUtils.matchesAll(iterator1, (Predicate<? super Properties>) transformedPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.spliterator();
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      HashSet<StringTokenizer> hashSet0 = new HashSet<StringTokenizer>();
      IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) hashSet0);
      OrderedMapIterator<SQLClientInfoException, ClientInfoStatus> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) orderedMapIterator0);
      FalsePredicate.falsePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      HashSet<StringTokenizer> hashSet0 = new HashSet<StringTokenizer>();
      IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) hashSet0);
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Boolean, StringTokenizer> hashMap0 = new HashMap<Boolean, StringTokenizer>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1245;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      DataTruncation dataTruncation0 = new DataTruncation((-892), false, false, 2041, 501, batchUpdateException0);
      Iterator<Integer> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      BatchUpdateException batchUpdateException1 = new BatchUpdateException();
      batchUpdateException0.spliterator();
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      HashSet<StringTokenizer> hashSet0 = new HashSet<StringTokenizer>();
      IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) hashSet0);
      IteratorUtils.emptyOrderedMapIterator();
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) singletonListIterator0, 29);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      BatchUpdateException batchUpdateException1 = new BatchUpdateException();
      batchUpdateException0.spliterator();
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>();
      ListIterator<TreeSet<SQLTransactionRollbackException>> listIterator0 = IteratorUtils.singletonListIterator(treeSet0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<TreeSet<SQLTransactionRollbackException>>) listIterator0, (Transformer<? super TreeSet<SQLTransactionRollbackException>, String>) transformer0, (String) null, "$]6:", "[p");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) orderedIterator0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) iterator0, class0);
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<BatchUpdateException> allPredicate0 = new AllPredicate<BatchUpdateException>(predicateArray0);
      ListIterator<BatchUpdateException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) listIterator0, (Predicate<? super BatchUpdateException>) allPredicate0);
      assertFalse(listIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.emptyListIterator();
      Stack<TreeSet<SQLTransactionRollbackException>> stack0 = new Stack<TreeSet<SQLTransactionRollbackException>>();
      LoopingListIterator<TreeSet<SQLTransactionRollbackException>> loopingListIterator0 = new LoopingListIterator<TreeSet<SQLTransactionRollbackException>>(stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<TreeSet<SQLTransactionRollbackException>>) loopingListIterator0, (Transformer<? super TreeSet<SQLTransactionRollbackException>, String>) null, "\"{@PSb0;", "Ozr", "Ozr");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ArrayDeque<SQLNonTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLNonTransientConnectionException>();
      NodeList nodeList0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getParentNode();
      Hashtable<Boolean, StringTokenizer> hashtable0 = new Hashtable<Boolean, StringTokenizer>();
      EntrySetMapIterator<Boolean, StringTokenizer> entrySetMapIterator0 = new EntrySetMapIterator<Boolean, StringTokenizer>(hashtable0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<Boolean, StringTokenizer>) entrySetMapIterator0);
      String string0 = IteratorUtils.toString((Iterator<Boolean>) null);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<ComparatorPredicate.Criterion, Object> hashMap0 = new HashMap<ComparatorPredicate.Criterion, Object>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) linkedList0);
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(onePredicate0, onePredicate0);
      OrPredicate.orPredicate((Predicate<? super Locale.Category>) onePredicate0, (Predicate<? super Locale.Category>) onePredicate0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Transformer<Object, String>>) orPredicate0);
      int[] intArray0 = new int[9];
      intArray0[0] = 3260;
      intArray0[1] = 180;
      intArray0[2] = 10;
      IteratorUtils.emptyListIterator();
      Vector<Object> vector0 = new Vector<Object>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      ListIterator<SQLTimeoutException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      IteratorUtils.toArray((Iterator<?>) listIterator1);
      Properties properties1 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Properties[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.emptyListIterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      SQLTransientException sQLTransientException0 = new SQLTransientException("Bk9PKjd>h9(uCn9");
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("Pt=Sj", "C^GyCw", intArray0, sQLTransientException0);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException1);
      IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) singletonListIterator0);
      HashSet<StringTokenizer> hashSet0 = new HashSet<StringTokenizer>();
      hashSet0.iterator();
      IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) hashSet0);
      SQLException[] sQLExceptionArray0 = new SQLException[2];
      sQLExceptionArray0[0] = (SQLException) batchUpdateException0;
      sQLExceptionArray0[1] = (SQLException) sQLTransientException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLExceptionArray0, 0, (-536));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 1;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientException>) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Iterator<SQLRecoverableException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<ComparatorPredicate.Criterion, Object> hashMap0 = new HashMap<ComparatorPredicate.Criterion, Object>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) linkedList0);
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(onePredicate0, onePredicate0);
      OrPredicate.orPredicate((Predicate<? super Locale.Category>) onePredicate0, (Predicate<? super Locale.Category>) onePredicate0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Transformer<Object, String>>) orPredicate0);
      int[] intArray0 = new int[9];
      intArray0[0] = 3260;
      intArray0[1] = 180;
      intArray0[2] = 10;
      intArray0[3] = (-1915);
      intArray0[4] = 54;
      intArray0[5] = 1245;
      intArray0[6] = 97;
      intArray0[7] = (-1371);
      intArray0[8] = (-892);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SingletonIterator<BatchUpdateException> singletonIterator1 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      DataTruncation dataTruncation0 = new DataTruncation((-1915), false, true, (-1), 25, sQLIntegrityConstraintViolationException0);
      boolean boolean0 = IteratorUtils.contains((Iterator<BatchUpdateException>) singletonIterator1, (Object) dataTruncation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<ComparatorPredicate.Criterion, Object> hashMap0 = new HashMap<ComparatorPredicate.Criterion, Object>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) singletonListIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Bk9PKjd>h9(uCn9");
      DefaultEquator.defaultEquator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ResettableListIterator<ArrayList<SQLException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.find((Iterator<ArrayList<SQLException>>) resettableListIterator0, (Predicate<? super ArrayList<SQLException>>) uniquePredicate0);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator((Integer) (-1));
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) listIterator0);
      ResettableListIterator<SQLDataException> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>(linkedList0);
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(arrayDeque0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) loopingIterator0);
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>();
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) linkedHashSet0);
      ListIteratorWrapper<SQLDataException> listIteratorWrapper0 = new ListIteratorWrapper<SQLDataException>(iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) resettableListIterator1, (Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) iterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 180;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) singletonListIterator0);
      DataTruncation dataTruncation0 = new DataTruncation(1732, false, false, 1732, 512);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("<>%");
      DefaultEquator.defaultEquator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      EmptyListIterator.resettableEmptyListIterator();
      MapIterator<ArrayList<SQLException>, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.find((Iterator<ArrayList<SQLException>>) mapIterator0, (Predicate<? super ArrayList<SQLException>>) uniquePredicate0);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator((Integer) 180);
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) listIterator0);
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIteratorWrapper<SQLDataException> listIteratorWrapper0 = new ListIteratorWrapper<SQLDataException>(resettableListIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) listIteratorWrapper0, (Iterator<? extends SQLDataException>) resettableListIterator0, (Iterator<? extends SQLDataException>) listIteratorWrapper0);
      ListIterator<SQLNonTransientException> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) listIteratorWrapper0);
      assertFalse(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<ComparatorPredicate.Criterion, Object> hashMap0 = new HashMap<ComparatorPredicate.Criterion, Object>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) linkedList0);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0, (Iterator<? extends IIOMetadataNode>) resettableIterator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) zippingIterator0);
      IteratorUtils.getIterator(iterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      String string0 = "@xzt";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("@xzt", sQLIntegrityConstraintViolationException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLFeatureNotSupportedException0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      predicateArray0[1] = predicate1;
      int int0 = (-3678);
      ArrayList<InstanceofPredicate> arrayList0 = null;
      try {
        arrayList0 = new ArrayList<InstanceofPredicate>((-3678));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -3678
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 2374;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      DefaultEquator.defaultEquator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ResettableListIterator<ArrayList<SQLException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<ArrayList<SQLException>>) resettableListIterator0, (Predicate<? super ArrayList<SQLException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends Properties>) orderedMapIterator0);
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, Properties>(orderedMapIterator1);
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>();
      ListIterator<TreeSet<SQLTransactionRollbackException>> listIterator0 = new SingletonListIterator<TreeSet<SQLTransactionRollbackException>>(treeSet0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashtable0);
      IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      Transformer<Object, String> transformer1 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<TreeSet<SQLTransactionRollbackException>>) listIterator0, (Transformer<? super TreeSet<SQLTransactionRollbackException>, String>) transformer1, "suffix may not be null", "", "suffix may not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.util.TreeSet' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<Object> class1 = Object.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.matchesAll((Iterator<Properties>) resettableListIterator0, (Predicate<? super Properties>) instanceofPredicate0);
      Vector<Object> vector0 = new Vector<Object>();
      IteratorUtils.loopingListIterator((List<Object>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ft&uVi");
      IteratorUtils.emptyMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNodeValue();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) resettableListIterator0, 9);
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SQLSyntaxErrorException> priorityQueue0 = new PriorityQueue<SQLSyntaxErrorException>(comparator0);
      PriorityQueue<SQLSyntaxErrorException> priorityQueue1 = new PriorityQueue<SQLSyntaxErrorException>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) priorityQueue0);
      IteratorUtils.isEmpty(nodeListIterator0);
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      Iterator<StringTokenizer>[] iteratorArray1 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray1);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<StringTokenizer>) zippingIterator0, 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 9
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 180;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.spliterator();
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      HashSet<StringTokenizer> hashSet0 = new HashSet<StringTokenizer>();
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      ListIterator<SQLException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) singletonListIterator0, (Predicate<? super SQLException>) predicate0);
      assertTrue(listIterator0.hasNext());
      
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) instanceofPredicate0, 180);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 180;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) singletonListIterator0);
      DataTruncation dataTruncation0 = new DataTruncation(33, false, false, 0, 1732);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Bk9PKjd>h9(uCn9");
      DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      ResettableListIterator<ArrayList<SQLException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.find((Iterator<ArrayList<SQLException>>) resettableListIterator0, (Predicate<? super ArrayList<SQLException>>) predicate0);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator((Integer) 180);
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) listIterator0);
      ResettableListIterator<SQLDataException> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      ListIteratorWrapper<SQLDataException> listIteratorWrapper0 = new ListIteratorWrapper<SQLDataException>(resettableListIterator1);
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) listIteratorWrapper0, (Iterator<? extends SQLDataException>) resettableListIterator1, (Iterator<? extends SQLDataException>) resettableListIterator1);
      ListIterator<SQLNonTransientException> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) zippingIterator0);
      assertFalse(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLNonTransientConnectionException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties(properties0);
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(onePredicate0, onePredicate0);
      Predicate<Transformer<Object, String>> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Transformer<Object, String>>) orPredicate0);
      IteratorUtils.contains((Iterator<BatchUpdateException>) null, (Object) predicate0);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      BatchUpdateException batchUpdateException1 = new BatchUpdateException();
      batchUpdateException0.spliterator();
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      HashSet<StringTokenizer> hashSet0 = new HashSet<StringTokenizer>();
      IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) hashSet0);
      OrderedMapIterator<SQLClientInfoException, ClientInfoStatus> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 180;
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) linkedList0);
      OrderedMapIterator<IIOMetadataNode, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<IIOMetadataNode, SQLWarning> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ? extends SQLWarning>) orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0, (Iterator<? extends IIOMetadataNode>) mapIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) orderedMapIterator0);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLTransientException>) resettableListIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      HashSet<StringTokenizer> hashSet0 = new HashSet<StringTokenizer>();
      IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) hashSet0);
      OrderedMapIterator<SQLClientInfoException, ClientInfoStatus> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) orderedMapIterator1);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) vector0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<ComparatorPredicate.Criterion, Object> hashMap0 = new HashMap<ComparatorPredicate.Criterion, Object>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) linkedList0);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0, (Iterator<? extends IIOMetadataNode>) resettableIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) zippingIterator0);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLTransientException>) resettableListIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      HashSet<StringTokenizer> hashSet0 = new HashSet<StringTokenizer>();
      IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) hashSet0);
      OrderedMapIterator<SQLClientInfoException, ClientInfoStatus> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) orderedMapIterator0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) vector0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 180;
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class0);
      Class<Properties> class1 = Properties.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Properties>) resettableListIterator0, (Predicate<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MapIterator<TreeSet<SQLTransactionRollbackException>, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<TreeSet<SQLTransactionRollbackException>>) mapIterator0, (Predicate<? super TreeSet<SQLTransactionRollbackException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Properties properties0 = new Properties();
      Properties[] propertiesArray0 = new Properties[3];
      propertiesArray0[0] = properties0;
      propertiesArray0[1] = properties0;
      propertiesArray0[2] = properties0;
      IteratorUtils.arrayIterator(propertiesArray0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.getIterator(properties0);
      PredicateTransformer<SQLNonTransientConnectionException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientConnectionException>(instanceofPredicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("NodeList must not be null", "NodeList must not be null", (-2110));
      predicateTransformer0.transform(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) properties0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties(properties0);
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      IteratorUtils.arrayIterator(propertiesArray0);
      int int0 = 2755;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fjR^BJ\"w0u\u0002$N]v9", "z", 2755);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("z", "+s\"erd&r$C", 2755, hashMap0, sQLTransientConnectionException0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0, true);
      sQLClientInfoException0.spliterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) singletonIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends Properties>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<DataTruncation, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, Properties>(orderedMapIterator1);
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>();
      IteratorUtils.singletonListIterator(treeSet0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      Class<StringTokenizer> class0 = StringTokenizer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("Map.Entry.setValue is not supported", "Map.Entry.setValue is not supported", false);
      IteratorUtils.getIterator(stringTokenizer0);
      PredicateTransformer<SQLNonTransientConnectionException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientConnectionException>(predicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Map.Entry.setValue is not supported", "b1", 10);
      predicateTransformer0.transform(sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("The predicate and transformer arrays must be the same size", sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties(properties0);
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      IteratorUtils.arrayIterator(propertiesArray0);
      Class<SQLWarning> class0 = SQLWarning.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.getIterator(instanceofPredicate0);
      PredicateTransformer<SQLNonTransientConnectionException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientConnectionException>(instanceofPredicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("b1", "b1", 139);
      Boolean boolean0 = predicateTransformer0.transform(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 180;
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Class<Properties> class1 = Properties.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.matchesAll((Iterator<Properties>) resettableListIterator0, (Predicate<? super Properties>) predicate0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTimeoutException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties(properties0);
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      IteratorUtils.arrayIterator(propertiesArray0);
      Class<SQLWarning> class0 = SQLWarning.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(instanceofPredicate0);
      PredicateTransformer<SQLNonTransientConnectionException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientConnectionException>(instanceofPredicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("z}Q", "z}Q", 139);
      predicateTransformer0.transform(sQLNonTransientConnectionException0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "r\"GJ+KJ");
      Vector<SQLSyntaxErrorException> vector0 = new Vector<SQLSyntaxErrorException>(330, (-35));
      IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) vector0);
      IteratorUtils.isEmpty(iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<Boolean, StringTokenizer> hashMap0 = new HashMap<Boolean, StringTokenizer>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      Iterable<BatchUpdateException> iterable0 = new PriorityQueue<BatchUpdateException>();
      Integer integer0 = new Integer(35);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends Properties>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<DataTruncation, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, Properties>(orderedMapIterator1);
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>();
      ListIterator<TreeSet<SQLTransactionRollbackException>> listIterator0 = IteratorUtils.singletonListIterator(treeSet0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashtable0);
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate1, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      IteratorUtils.toString((Iterator<TreeSet<SQLTransactionRollbackException>>) listIterator0, (Transformer<? super TreeSet<SQLTransactionRollbackException>, String>) transformer1, "Already at start of list.", "Already at start of list.", "");
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) singletonIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0);
      PriorityQueue<SQLSyntaxErrorException> priorityQueue0 = new PriorityQueue<SQLSyntaxErrorException>();
      priorityQueue0.isEmpty();
      IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) priorityQueue0);
      IteratorUtils.isEmpty(listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Already at start of list.");
      iIOMetadataNode0.getFirstChild();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends Properties>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<DataTruncation, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, Properties>(orderedMapIterator1);
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>();
      ListIterator<TreeSet<SQLTransactionRollbackException>> listIterator0 = IteratorUtils.singletonListIterator(treeSet0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashtable0);
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate1, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      IteratorUtils.toString((Iterator<TreeSet<SQLTransactionRollbackException>>) listIterator0, (Transformer<? super TreeSet<SQLTransactionRollbackException>, String>) transformer1, "Already at start of list.", "$]6:", "");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) singletonIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0);
      IteratorUtils.emptyOrderedMapIterator();
      DefaultEquator.defaultEquator();
      DataTruncation dataTruncation0 = new DataTruncation((-1), false, false, (-1), (-1));
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Vector<Object> vector0 = new Vector<Object>();
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Object>) arrayList0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ft&uVi");
      IteratorUtils.emptyMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNodeValue();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) resettableListIterator0, 9);
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SQLSyntaxErrorException> priorityQueue0 = new PriorityQueue<SQLSyntaxErrorException>(comparator0);
      PriorityQueue<SQLSyntaxErrorException> priorityQueue1 = new PriorityQueue<SQLSyntaxErrorException>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) priorityQueue0);
      IteratorUtils.isEmpty(nodeListIterator0);
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Vector<Object> vector0 = new Vector<Object>();
      ResettableListIterator<Object> resettableListIterator1 = IteratorUtils.loopingListIterator((List<Object>) vector0);
      assertFalse(resettableListIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(1492);
      IteratorUtils.getIterator(integer0);
      List<SQLTransientConnectionException> list0 = new Stack<SQLTransientConnectionException>();
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      LoopingIterator<SQLTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLTransientConnectionException>(linkedList0);
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      String string0 = IteratorUtils.toString((Iterator<SQLTransientConnectionException>) loopingIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0);
      assertEquals("[]", string0);
      
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ft&uVi");
      IteratorUtils.emptyMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNodeValue();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) resettableListIterator0, (-2857));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.emptyListIterator();
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("W\"v9ze_5]2qpOgqNc");
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0, false);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) singletonIterator0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OrderedMapIterator<TreeSet<Boolean>, ArrayList<SQLTransientConnectionException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<TreeSet<Boolean>, ArrayList<SQLTransientConnectionException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<TreeSet<Boolean>, ArrayList<SQLTransientConnectionException>>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<TreeSet<Boolean>, ArrayList<SQLTransientConnectionException>>) abstractMapIteratorDecorator0);
      ConstantTransformer.constantTransformer("zY}XJ;");
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 1);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[7];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.DISPLAY;
      locale_CategoryArray0[4] = locale_Category4;
      Locale.Category locale_Category5 = Locale.Category.FORMAT;
      locale_CategoryArray0[5] = locale_Category5;
      Locale.Category locale_Category6 = Locale.Category.DISPLAY;
      locale_CategoryArray0[6] = locale_Category6;
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>(locale_CategoryArray0);
      iteratorArray0[0] = (Iterator<Locale.Category>) objectArrayIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends Locale.Category>[]) iteratorArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int[] intArray0 = new int[4];
      int int0 = 0;
      // Undeclared exception!
      try { 
        abstractMapIteratorDecorator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      String string0 = "";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "org.apache.commons.collections4.iterators.IteratorIterable$1", (-3931));
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      SingletonIterator<ArrayList<SQLException>> singletonIterator0 = new SingletonIterator<ArrayList<SQLException>>(arrayList0, true);
      DefaultEquator.defaultEquator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("InstantiateFactory: Constructor threw an exception", "69jj~>Z]r'sE|i~4!P", (-2892), (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException1.spliterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ResettableListIterator<Iterator<SQLTransactionRollbackException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(resettableListIterator0);
      IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EmptyOrderedIterator.emptyOrderedIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", " E9P)~L", 2755, hashMap0, sQLInvalidAuthorizationSpecException0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0, true);
      StringTokenizer stringTokenizer0 = new StringTokenizer("38hX/Hs/$xf1==Dpg", " E9P)~L", false);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate((Object) "", (Equator<Object>) defaultEquator0);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      SingletonIterator<ArrayList<SQLException>> singletonIterator1 = new SingletonIterator<ArrayList<SQLException>>(arrayList0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      ArrayList<SQLException> arrayList1 = IteratorUtils.find((Iterator<ArrayList<SQLException>>) singletonIterator1, (Predicate<? super ArrayList<SQLException>>) predicate0);
      assertSame(arrayList0, arrayList1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 180;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Yg", "Bk9PKjd>h9(uCn9", 0, (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("dW@8>X+kG", "dW@8>X+kG", intArray0, sQLTimeoutException0);
      sQLTimeoutException0.getLocalizedMessage();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Yg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.println((Object) "Bk9PKjd>h9(uCn9");
      batchUpdateException0.printStackTrace((PrintWriter) mockPrintWriter0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) resettableIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("Bk9PKjd>h9(uCn9", "Yg", 2929);
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("Yg", "Bk9PKjd>h9(uCn9", 0, sQLSyntaxErrorException0);
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("dW@8>X+kG", "Yg");
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException(">Wii><+Iou!#/");
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException();
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("dW@8>X+kG", sQLSyntaxErrorException5);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((StringTokenizer[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "c+AVW[Y6xURosCP");
      Class<Iterator> class0 = Iterator.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.matchesAll((Iterator<Properties>) null, (Predicate<? super Properties>) instanceofPredicate0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTimeoutException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1), 1392);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EmptyOrderedIterator.emptyOrderedIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", " E9P)~L", 2755, hashMap0, sQLInvalidAuthorizationSpecException0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0, true);
      ListIterator<TreeSet<SQLTransactionRollbackException>> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<TreeSet<SQLTransactionRollbackException>> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<TreeSet<SQLTransactionRollbackException>>) listIterator0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      String string0 = IteratorUtils.toString(iterator0, (Transformer<? super TreeSet<SQLTransactionRollbackException>, String>) transformer0, "~5{6O4x8p", "", "Wqd95tM6<,x)2+8b ^?");
      assertEquals("Wqd95tM6<,x)2+8b ^?", string0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonIterator<Locale.Category> singletonIterator1 = new SingletonIterator<Locale.Category>(locale_Category0);
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) singletonIterator1);
      IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0);
      IteratorUtils.emptyOrderedMapIterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      DataTruncation dataTruncation0 = new DataTruncation(2719, false, true, (-1), 2755);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) instanceofPredicate0, (Equator<Object>) defaultEquator0);
      ResettableListIterator<ArrayList<SQLException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.find((Iterator<ArrayList<SQLException>>) resettableListIterator0, (Predicate<? super ArrayList<SQLException>>) predicate0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      int int0 = IteratorUtils.size(listIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MapIterator<LinkedList<PriorityQueue>, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends Properties>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<DataTruncation, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, Properties>(orderedMapIterator1);
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>();
      ListIterator<TreeSet<SQLTransactionRollbackException>> listIterator0 = IteratorUtils.singletonListIterator(treeSet0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashtable0);
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate1, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      IteratorUtils.toString((Iterator<TreeSet<SQLTransactionRollbackException>>) listIterator0, (Transformer<? super TreeSet<SQLTransactionRollbackException>, String>) transformer1, "Already at start of list.", "$]6:", "");
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) singletonIterator0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0);
      IteratorUtils.emptyOrderedMapIterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      DataTruncation dataTruncation0 = new DataTruncation((-1), false, false, (-1), (-1));
      EqualPredicate.equalPredicate((Object) dataTruncation0, (Equator<Object>) defaultEquator0);
      ResettableListIterator<ArrayList<SQLException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.find((Iterator<ArrayList<SQLException>>) resettableListIterator0, (Predicate<? super ArrayList<SQLException>>) predicate0);
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      int int0 = IteratorUtils.size(iterator0);
      assertFalse(singletonIterator0.hasNext());
      assertEquals(1, int0);
      
      Iterator<?> iterator1 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties(properties0);
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      SQLWarning sQLWarning0 = new SQLWarning("`RBAh,'", (String) null, (Throwable) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("foLnnvl*MxQK:WmC", sQLWarning0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Xw9T;hLL.{XQ,<*$", "Xw9T;hLL.{XQ,<*$", sQLTransientException0);
      properties2.put(sQLTimeoutException0, properties1);
      propertiesArray0[2] = properties2;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(onePredicate0, onePredicate0);
      Predicate<Transformer<Object, String>> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Transformer<Object, String>>) orPredicate0);
      boolean boolean0 = IteratorUtils.contains((Iterator<BatchUpdateException>) null, (Object) predicate0);
      assertFalse(boolean0);
      
      MapIterator<ArrayList<SQLException>, Locale.Category> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<ArrayList<SQLException>, Locale.Category> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<ArrayList<SQLException>, Locale.Category>(mapIterator0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(onePredicate0);
      IteratorUtils.find((Iterator<ArrayList<SQLException>>) abstractMapIteratorDecorator0, (Predicate<? super ArrayList<SQLException>>) equalPredicate0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "B";
      Object[] objectArray0 = new Object[0];
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0, false);
      Consumer<SQLInvalidAuthorizationSpecException> consumer0 = (Consumer<SQLInvalidAuthorizationSpecException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonIterator0);
      AbstractOrderedMapIteratorDecorator<SQLDataException, Properties> abstractOrderedMapIteratorDecorator0 = null;
      try {
        abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, Properties>((OrderedMapIterator<SQLDataException, Properties>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OrderedMapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EmptyOrderedIterator.emptyOrderedIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", " E9P)~L", 2755, hashMap0, sQLInvalidAuthorizationSpecException0);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      SingletonIterator<ArrayList<SQLException>> singletonIterator0 = new SingletonIterator<ArrayList<SQLException>>(arrayList0, false);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("", ">r`LCI~M2}!SHN", false);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(">r`LCI~M2}!SHN");
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) iIOMetadataNode0, (Equator<Object>) defaultEquator0);
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 3);
      Class<SQLDataException> class0 = SQLDataException.class;
      classArray0[0] = class0;
      Class<SQLDataException> class1 = SQLDataException.class;
      classArray0[1] = class1;
      Class<SQLDataException> class2 = SQLDataException.class;
      classArray0[2] = class2;
      Transformer<Object, IIOMetadataNode> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<ArrayList<SQLException>>) singletonIterator0, (Predicate<? super ArrayList<SQLException>>) predicate1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.util.ArrayList' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = "K0V\"% ";
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "", 748);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("org.apache.commons.collections4.IteratorUtils", "", "", 125);
      stackTraceElementArray0[1] = stackTraceElement1;
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      BoundedIterator<SQLDataException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) iterator0, (long) 125);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLDataException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) iterator0, (Iterator<? extends SQLDataException>) boundedIterator0);
      IteratorUtils.toArray(iterator1);
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyOrderedMapIterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      DataTruncation dataTruncation0 = new DataTruncation(125, true, false, 125, 748);
      Integer integer0 = new Integer((-1));
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) integer0, (Equator<Object>) defaultEquator0);
      ResettableListIterator<ArrayList<SQLException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.find((Iterator<ArrayList<SQLException>>) resettableListIterator0, (Predicate<? super ArrayList<SQLException>>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) integer0, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends Properties>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<DataTruncation, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, Properties>(orderedMapIterator1);
      OrderedMapIterator<SQLSyntaxErrorException, IIOMetadataNode> orderedMapIterator2 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLSyntaxErrorException, IIOMetadataNode> orderedMapIterator3 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends IIOMetadataNode>) orderedMapIterator2);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator3);
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>();
      ListIterator<TreeSet<SQLTransactionRollbackException>> listIterator0 = IteratorUtils.singletonListIterator(treeSet0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashtable0);
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate1, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      IteratorUtils.toString((Iterator<TreeSet<SQLTransactionRollbackException>>) listIterator0, (Transformer<? super TreeSet<SQLTransactionRollbackException>, String>) transformer1, "Already at start of list.", "$]6:", "");
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) singletonIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0);
      IteratorUtils.emptyOrderedMapIterator();
      DefaultEquator.defaultEquator();
      Vector<Object>[] vectorArray0 = null;
      int int0 = 2107;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Vector<Object>[]) null, 2107);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      OrderedMapIterator<TreeSet<Boolean>, ArrayList<SQLTransientConnectionException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<TreeSet<Boolean>, ArrayList<SQLTransientConnectionException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<TreeSet<Boolean>, ArrayList<SQLTransientConnectionException>>(orderedMapIterator0);
      MapIterator<TreeSet<Boolean>, ArrayList<SQLTransientConnectionException>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<TreeSet<Boolean>, ArrayList<SQLTransientConnectionException>>) abstractMapIteratorDecorator0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("zY}XJ;");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<TreeSet<Boolean>>) mapIterator0, (Transformer<? super TreeSet<Boolean>, String>) transformer0, "zY}XJ;", (String) null, "|:5j;:F| ew");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[6];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("N8G}(\u0007d<dZzP,m$%", "x\"D<JT[F", 0, sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("J<x}I)fg 3;;", "x\"D<JT[F", sQLTransientConnectionException0);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("x\"D<JT[F");
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException4;
      IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, 0, 0);
      HashSet<StringTokenizer> hashSet0 = new HashSet<StringTokenizer>();
      IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) hashSet0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("RccJ<}Ko!7bo@", sQLTransientConnectionException0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 0, (-1309));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[6];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("]{Bn@ltr`#d~y(", "}vvi <pXPq", 0);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      SingletonIterator<ArrayList<SQLException>> singletonIterator0 = new SingletonIterator<ArrayList<SQLException>>(arrayList0, false);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      StringTokenizer stringTokenizer0 = new StringTokenizer(">r`LCI~M2}!SHN", "jOU:Ej1@\"E;~5xyi/", false);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) stringTokenizer0, (Equator<Object>) defaultEquator0);
      ArrayList<SQLException> arrayList1 = IteratorUtils.find((Iterator<ArrayList<SQLException>>) singletonIterator0, (Predicate<? super ArrayList<SQLException>>) predicate0);
      assertNull(arrayList1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[6];
      String string0 = "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("N8G}(\u0007d<dZzP,m$%", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", 0, sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("N8G}(\u0007d<dZzP,m$%", "N8G}(\u0007d<dZzP,m$%");
      sQLTransactionRollbackException1.getStackTrace();
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator");
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException4;
      Vector<Object>[] vectorArray0 = (Vector<Object>[]) Array.newInstance(Vector.class, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(vectorArray0, (-1022));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<ComparatorPredicate.Criterion, Object> hashMap0 = new HashMap<ComparatorPredicate.Criterion, Object>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) linkedList0);
      IteratorUtils.emptyListIterator();
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends Properties>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<DataTruncation, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, Properties>(orderedMapIterator1);
      OrderedMapIterator<SQLSyntaxErrorException, IIOMetadataNode> orderedMapIterator2 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLSyntaxErrorException, IIOMetadataNode> orderedMapIterator3 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends IIOMetadataNode>) orderedMapIterator2);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator3);
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>();
      ListIterator<TreeSet<SQLTransactionRollbackException>> listIterator0 = IteratorUtils.singletonListIterator(treeSet0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashtable0);
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate1, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      IteratorUtils.toString((Iterator<TreeSet<SQLTransactionRollbackException>>) listIterator0, (Transformer<? super TreeSet<SQLTransactionRollbackException>, String>) transformer1, "Already at start of list.", "$]6:", "");
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("$]6:null");
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLTransientException>) resettableIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      Vector<Object>[] vectorArray0 = (Vector<Object>[]) Array.newInstance(Vector.class, 7);
      vectorArray0[0] = vector0;
      vectorArray0[1] = vector0;
      vectorArray0[2] = vector0;
      vectorArray0[3] = vector0;
      vectorArray0[4] = vector0;
      vectorArray0[6] = vector0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(vectorArray0, (-206));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("K0V\"% ", "delimiter may not be null", 748);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLRecoverableException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "", 748);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("org.apache.commons.collections4.IteratorUtils", "", "", 125);
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLRecoverableException0.setStackTrace(stackTraceElementArray0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "K0V\"% ", 748, (int[]) null, sQLTransactionRollbackException0);
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      BoundedIterator<SQLDataException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) iterator0, (long) 125);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLDataException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) iterator0, (Iterator<? extends SQLDataException>) boundedIterator0);
      IteratorUtils.toArray(iterator1);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLTransientException>) resettableListIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      Vector<Object>[] vectorArray0 = (Vector<Object>[]) Array.newInstance(Vector.class, 5);
      vectorArray0[0] = vector0;
      vectorArray0[1] = vector0;
      vectorArray0[2] = vector0;
      vectorArray0[3] = vector0;
      vectorArray0[4] = vector0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(vectorArray0, 748);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<Boolean, StringTokenizer> hashMap0 = new HashMap<Boolean, StringTokenizer>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.spliterator();
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      HashSet<StringTokenizer> hashSet0 = new HashSet<StringTokenizer>();
      IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) hashSet0);
      OrderedMapIterator<SQLClientInfoException, ClientInfoStatus> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) orderedMapIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.clear();
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) linkedHashSet0);
      SingletonListIterator<String> singletonListIterator1 = new SingletonListIterator<String>(":34~{5g81H2XE4DXp{");
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends String>) singletonListIterator1, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 180;
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Class<Properties> class1 = Properties.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.matchesAll((Iterator<Properties>) resettableListIterator0, (Predicate<? super Properties>) predicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLDataException sQLDataException0 = new SQLDataException(sQLFeatureNotSupportedException0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0, true);
      IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) null, (Iterator<? extends SQLDataException>) singletonIterator0, (Iterator<? extends SQLDataException>) singletonIterator0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<BatchUpdateException, SQLNonTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties(properties0);
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      IteratorUtils.arrayIterator(propertiesArray0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(onePredicate0, onePredicate0);
      Predicate<Transformer<Object, String>> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Transformer<Object, String>>) orPredicate0);
      boolean boolean0 = IteratorUtils.contains((Iterator<BatchUpdateException>) null, (Object) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[6];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("]{Bn@ltr`#d~y(", "xgNAwP3", (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("]{Bn@ltr`#d~y(", "}vvi <pXPq", sQLFeatureNotSupportedException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("]{Bn@ltr`#d~y(", "}vvi <pXPq", 0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("Set must not be null", "!5B:0kKeP");
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("Predicate must not be null", "xgNAwP3", sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("Predicate must not be null", "y", sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("", "Predicate must not be null", (-184));
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      ObjectArrayIterator<SQLInvalidAuthorizationSpecException> objectArrayIterator0 = new ObjectArrayIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("]{Bn@ltr`#d~y(");
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      ArrayList<SQLException> arrayList0 = IteratorUtils.find((Iterator<ArrayList<SQLException>>) null, (Predicate<? super ArrayList<SQLException>>) predicate1);
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends Properties>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<DataTruncation, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, Properties>(orderedMapIterator1);
      IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) abstractOrderedMapIteratorDecorator0);
      OrderedMapIterator<SQLSyntaxErrorException, IIOMetadataNode> orderedMapIterator2 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLSyntaxErrorException, IIOMetadataNode> orderedMapIterator3 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends IIOMetadataNode>) orderedMapIterator2);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator3);
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>();
      ListIterator<TreeSet<SQLTransactionRollbackException>> listIterator0 = IteratorUtils.singletonListIterator(treeSet0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashtable0);
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate1, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      IteratorUtils.toString((Iterator<TreeSet<SQLTransactionRollbackException>>) listIterator0, (Transformer<? super TreeSet<SQLTransactionRollbackException>, String>) transformer1, "Already at start of list.", "$]6:", "");
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) singletonIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0);
      IteratorUtils.emptyOrderedMapIterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      DataTruncation dataTruncation0 = new DataTruncation((-1), false, false, (-1), (-1));
      EqualPredicate.equalPredicate((Object) dataTruncation0, (Equator<Object>) defaultEquator0);
      ResettableListIterator<ArrayList<SQLException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ArrayList<SQLException> arrayList0 = IteratorUtils.find((Iterator<ArrayList<SQLException>>) resettableListIterator0, (Predicate<? super ArrayList<SQLException>>) predicate0);
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<ComparatorPredicate.Criterion, Object> hashMap0 = new HashMap<ComparatorPredicate.Criterion, Object>();
      EntrySetMapIterator<ComparatorPredicate.Criterion, Object> entrySetMapIterator0 = new EntrySetMapIterator<ComparatorPredicate.Criterion, Object>(hashMap0);
      entrySetMapIterator0.reset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 2374;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator", "org.apache.commons.collections4.map.AbstractSortedMapDecorator$SortedMapIterator");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLIntegrityConstraintViolationException0, comparator0);
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 4);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      classArray0[1] = class1;
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      classArray0[2] = class2;
      Class<SQLNonTransientConnectionException> class3 = SQLNonTransientConnectionException.class;
      classArray0[3] = class3;
      InvokerTransformer<Object, InstanceofPredicate> invokerTransformer0 = new InvokerTransformer<Object, InstanceofPredicate>("%hYPhd=zDh", classArray0, classArray0);
      IteratorUtils.objectGraphIterator(predicate0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<ComparatorPredicate.Criterion>) entrySetMapIterator0, 2374);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2374
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      DataTruncation dataTruncation0 = new DataTruncation(2000, false, false, 2000, 2241);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("_+e;&8Q^Y}Hr", "org.apache.commons.collections4.FluentIterable", 3608, hashtable0, dataTruncation0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("org.apache.commons.collections4.FluentIterable", "org.apache.commons.collections4.functors.ExceptionClosure", map0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.FluentIterable", sQLClientInfoException1);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer0 = InvokerTransformer.invokerTransformer("");
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends SQLIntegrityConstraintViolationException>) transformer0, (Transformer<? super Object, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      IteratorUtils.objectGraphIterator(sQLIntegrityConstraintViolationException0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) transformer1);
      HashSet<BatchUpdateException>[] hashSetArray0 = (HashSet<BatchUpdateException>[]) Array.newInstance(HashSet.class, 1);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      hashSetArray0[0] = (HashSet<BatchUpdateException>) linkedHashSet0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(hashSetArray0, 2241, 2000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-3);
      byte byte0 = (byte)14;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IteratorUtils.toListIterator((Iterator<?>) resettableIterator0);
      ArrayIterator<ServiceLoader<SQLDataException>> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<ServiceLoader<SQLDataException>>(resettableIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", " E9P)~L", 2755, hashMap0, sQLInvalidAuthorizationSpecException0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0, true);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) singletonIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLClientInfoException>) listIterator0);
      Iterator<SQLTimeoutException> iterator0 = null;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) orderedIterator0, comparator0);
      predicateArray0[0] = predicate0;
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 0);
      InstantiateFactory<SQLTimeoutException> instantiateFactory0 = new InstantiateFactory<SQLTimeoutException>(class0, classArray0, predicateArray0);
      FactoryTransformer<Object, SQLTimeoutException> factoryTransformer0 = new FactoryTransformer<Object, SQLTimeoutException>(instantiateFactory0);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) factoryTransformer0, (Predicate<? super Object>) predicate0);
      predicateArray0[1] = predicate1;
      // Undeclared exception!
      try { 
        NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not contain a null predicate, index 2 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EmptyOrderedIterator.emptyOrderedIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", " E9P)~L", 2755, hashMap0, sQLInvalidAuthorizationSpecException0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0, true);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) singletonIterator0);
      Iterable<SQLClientInfoException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLClientInfoException>) listIterator0);
      OrderedMapIterator<Locale.Category, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Locale.Category, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Locale.Category, IIOMetadataNode>(orderedMapIterator0);
      OrderedMapIterator<Locale.Category, IIOMetadataNode> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.Category, ? extends IIOMetadataNode>) abstractOrderedMapIteratorDecorator0);
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) orderedMapIterator1);
      IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0);
      IteratorUtils.emptyOrderedMapIterator();
      DefaultEquator.defaultEquator();
      DataTruncation dataTruncation0 = new DataTruncation(1649, false, false, 4794, 1649);
      Object object0 = new Object();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate((Object) iterable0, (Equator<Object>) defaultEquator0);
      ResettableListIterator<ArrayList<SQLException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[6];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("]{Bn@ltr`#d~y(", "xgNAwP3", (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("]{Bn@ltr`#d~y(", "}vvi <pXPq", sQLFeatureNotSupportedException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("]{Bn@ltr`#d~y(", "}vvi <pXPq", 0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("Set must not be null", "!5B:0kKeP");
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("Predicate must not be null", "xgNAwP3", sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("y");
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("Predicate must not be null", "]{Bn@ltr`#d~y(", 1073);
      ObjectArrayIterator<SQLInvalidAuthorizationSpecException> objectArrayIterator0 = new ObjectArrayIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("!5B:0kKeP");
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      String string0 = IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) constantTransformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties(properties0);
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      SQLWarning sQLWarning0 = new SQLWarning("`RBAh,'", (String) null, (Throwable) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("foLnnvl*MxQK:WmC", sQLWarning0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Xw9T;hLL.{XQ,<*$", "Xw9T;hLL.{XQ,<*$", sQLTransientException0);
      properties2.put(sQLTimeoutException0, properties1);
      propertiesArray0[2] = properties2;
      IteratorUtils.arrayIterator(propertiesArray0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(onePredicate0, onePredicate0);
      Predicate<Transformer<Object, String>> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Transformer<Object, String>>) orPredicate0);
      boolean boolean0 = IteratorUtils.contains((Iterator<BatchUpdateException>) null, (Object) predicate0);
      assertFalse(boolean0);
      
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      LoopingListIterator<Locale.Category> loopingListIterator0 = new LoopingListIterator<Locale.Category>(vector0);
      String string0 = IteratorUtils.toString((Iterator<Locale.Category>) loopingListIterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getParentNode();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashSet<SQLInvalidAuthorizationSpecException>[] hashSetArray0 = (HashSet<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(HashSet.class, 1);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      linkedHashSet0.add(sQLInvalidAuthorizationSpecException0);
      hashSetArray0[0] = (HashSet<SQLInvalidAuthorizationSpecException>) linkedHashSet0;
      ObjectArrayIterator<HashSet<SQLInvalidAuthorizationSpecException>> objectArrayIterator0 = new ObjectArrayIterator<HashSet<SQLInvalidAuthorizationSpecException>>(hashSetArray0);
      IteratorUtils.toString((Iterator<HashSet<SQLInvalidAuthorizationSpecException>>) objectArrayIterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      objectArrayIterator0.forEachRemaining(consumer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[[java.sql.SQLInvalidAuthorizationSpecException]]");
      iIOMetadataNode0.getAttributeNodeNS("[[java.sql.SQLInvalidAuthorizationSpecException]]", "[[java.sql.SQLInvalidAuthorizationSpecException]]");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, Closure<IIOMetadataNode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ResettableIterator<Iterator<SQLInvalidAuthorizationSpecException>> resettableIterator0 = IteratorUtils.singletonIterator((Iterator<SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      long long0 = 3051L;
      IteratorUtils.skippingIterator((Iterator<Iterator<SQLInvalidAuthorizationSpecException>>) resettableIterator0, 3051L);
      OrderedMapIterator<Integer, ArrayList<BatchUpdateException>> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.skippingIterator((Iterator<Integer>) orderedMapIterator1, 0L);
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      String string0 = "Estimated size must be greater than 0";
      StringTokenizer stringTokenizer0 = new StringTokenizer("Estimated size must be greater than 0", "Estimated size must be greater than 0", false);
      String string1 = "U?l/";
      stringTokenizer0.nextToken("U?l/");
      arrayList0.add(stringTokenizer0);
      int int0 = (-1557);
      // Undeclared exception!
      try { 
        arrayList0.add((-1557), stringTokenizer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1557, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[9];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("r");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("xKa|nXyWM;|}T[HT");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode("Tknsh");
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode("org.apache.commons.collections4.list.CursorableLinkedList$SubCursor");
      iIOMetadataNodeArray0[7] = iIOMetadataNode7;
      IIOMetadataNode iIOMetadataNode8 = new IIOMetadataNode("r");
      iIOMetadataNodeArray0[8] = iIOMetadataNode8;
      IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 0, 0);
      Node node0 = iIOMetadataNode2.removeChild(iIOMetadataNode5);
      IteratorUtils.nodeListIterator(node0);
      long[] longArray0 = new long[7];
      longArray0[0] = (-651L);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("bd4rMHJ:s]h", "N|B;a#9[OH]*56r2H", 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.functors.TransformedPredicate", "bd4rMHJ:s]h", 0, longArray0, sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashSet<IIOMetadataNode>[] hashSetArray0 = (HashSet<IIOMetadataNode>[]) Array.newInstance(HashSet.class, 3);
      ArrayDeque<IIOMetadataNode> arrayDeque0 = new ArrayDeque<IIOMetadataNode>();
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>(arrayDeque0);
      hashSetArray0[0] = (HashSet<IIOMetadataNode>) linkedHashSet0;
      LinkedHashSet<IIOMetadataNode> linkedHashSet1 = new LinkedHashSet<IIOMetadataNode>();
      hashSetArray0[1] = (HashSet<IIOMetadataNode>) linkedHashSet1;
      LinkedHashSet<IIOMetadataNode> linkedHashSet2 = new LinkedHashSet<IIOMetadataNode>(91);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      linkedHashSet2.add(iIOMetadataNode0);
      hashSetArray0[2] = (HashSet<IIOMetadataNode>) linkedHashSet2;
      ResettableIterator<HashSet<IIOMetadataNode>> resettableIterator0 = IteratorUtils.arrayIterator(hashSetArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getLargeUpdateCounts();
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      Stack<Object> stack0 = new Stack<Object>();
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Object>) stack0);
      IteratorUtils.isEmpty(resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "ListIterator must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MapIterator<IIOMetadataNode, SQLTransactionRollbackException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) mapIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[6];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("]{Bn@ltr`#d~y(", "xgNAwP3", (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("]{Bn@ltr`#d~y(", "}vvi <pXPq", sQLFeatureNotSupportedException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("]{Bn@ltr`#d~y(", "}vvi <pXPq", 0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("Set must not be null", "!5B:0kKeP");
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("Predicate must not be null", "xgNAwP3", sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("y");
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("", "Predicate must not be null", (-184));
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      ObjectArrayIterator<SQLInvalidAuthorizationSpecException> objectArrayIterator0 = new ObjectArrayIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("]{Bn@ltr`#d~y(");
      String string0 = IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) objectArrayIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) constantTransformer0);
      assertFalse(objectArrayIterator0.hasNext());
      assertEquals("[]{Bn@ltr`#d~y(, ]{Bn@ltr`#d~y(, ]{Bn@ltr`#d~y(, ]{Bn@ltr`#d~y(, ]{Bn@ltr`#d~y(, ]{Bn@ltr`#d~y(]", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("K0V\"% ", "delimiter may not be null", 748);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLRecoverableException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "", 748);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("org.apache.commons.collections4.IteratorUtils", "", "", 125);
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLRecoverableException0.setStackTrace(stackTraceElementArray0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "K0V\"% ", 748, (int[]) null, sQLTransactionRollbackException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", batchUpdateException0);
      IteratorUtils.getIterator(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("}vvi <pXPq", "[:s_e/z`eQRT", 0);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      SingletonIterator<ArrayList<SQLException>> singletonIterator0 = new SingletonIterator<ArrayList<SQLException>>(arrayList0, false);
      DefaultEquator.defaultEquator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("jOU:Ej1@\"E;~5xyi/", "", false);
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Iterator<? extends SQLClientInfoException>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLClientInfoException>) zippingIterator0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -1
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      PriorityQueue<ClientInfoStatus> priorityQueue0 = new PriorityQueue<ClientInfoStatus>();
      SingletonIterator<PriorityQueue<ClientInfoStatus>> singletonIterator0 = new SingletonIterator<PriorityQueue<ClientInfoStatus>>(priorityQueue0, true);
      int int0 = 1449;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<PriorityQueue<ClientInfoStatus>>) singletonIterator0, 1449);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1448
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HashMap<ComparatorPredicate.Criterion, Object> hashMap0 = new HashMap<ComparatorPredicate.Criterion, Object>();
      EntrySetMapIterator<ComparatorPredicate.Criterion, Object> entrySetMapIterator0 = new EntrySetMapIterator<ComparatorPredicate.Criterion, Object>(hashMap0);
      entrySetMapIterator0.reset();
      int int0 = 2374;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<ComparatorPredicate.Criterion>) entrySetMapIterator0, 2374);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2374
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Rd2`O6.", "", 1219);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      SingletonIterator<ArrayList<SQLException>> singletonIterator0 = new SingletonIterator<ArrayList<SQLException>>(arrayList0);
      DefaultEquator.defaultEquator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("[:s_e/z`eQRT", "nA+wH9jZ~xn", false);
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) listIterator0, (Iterator<? extends SQLClientInfoException>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLClientInfoException>) listIterator0, 33);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 33
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[7];
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("[", "", sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 0, longArray0, sQLNonTransientException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 128;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 1666;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", "", intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException();
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("", "=&'", intArray0, batchUpdateException1);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException(batchUpdateException1);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      int[] intArray1 = new int[6];
      intArray1[0] = 2203;
      intArray1[1] = 128;
      intArray1[2] = 0;
      intArray1[3] = 2140;
      intArray1[4] = 128;
      intArray1[5] = 128;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException(intArray1, sQLNonTransientException0);
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      int int0 = 1801;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("EGUW9/n}O/", "EGUW9/n}O/", 1801);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLIntegrityConstraintViolationException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      sQLClientInfoException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      sQLClientInfoException0.getStackTrace();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*X16:G0a=U]-NZ2`[[");
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "EGUW9/n}O/";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "*X16:G0a=U]-NZ2`[[", objectArray0);
      sQLClientInfoException0.printStackTrace(printWriter0);
      int int1 = 0;
      IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 0);
      Integer integer0 = new Integer(0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      IteratorUtils.toList((Iterator<? extends Integer>) singletonListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "EGUW9/n}O/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransientConnectionException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<BatchUpdateException, SQLException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<BatchUpdateException, SQLException>) orderedMapIterator0);
      MapIterator<BatchUpdateException, SQLException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertSame(mapIterator1, mapIterator0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      String string0 = null;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("]Jr}WH{l;9`mV", hashtable0, sQLSyntaxErrorException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("]Jr}WH{l;9`mV", "]Jr}WH{l;9`mV", map0, sQLSyntaxErrorException0);
      ArrayListIterator<SQLSyntaxErrorException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLSyntaxErrorException>(sQLClientInfoException1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 341);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", (Map<String, ClientInfoStatus>) null, sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", "", sQLClientInfoException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "sN3EcMu5{!f", 341, sQLFeatureNotSupportedException1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getParentNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0, 419, 419);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[6];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("N8G}(\u0007d<dZzP,m$%", "N8G}(\u0007d<dZzP,m$%", sQLTransientConnectionException0);
      sQLTransactionRollbackException0.printStackTrace();
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException(sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("N8G}(\u0007d<dZzP,m$%", "x\"D<JT[F", 0, sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("J<x}I)fg 3;;", "x\"D<JT[F", sQLTransientConnectionException0);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("x\"D<JT[F");
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, 0, 0);
      HashSet<StringTokenizer> hashSet0 = new HashSet<StringTokenizer>();
      IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) hashSet0);
      MapIterator<BatchUpdateException, SQLNonTransientException> mapIterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<BatchUpdateException, SQLNonTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) null, 2911L, (-4393L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      int int0 = 3644;
      SQLDataException sQLDataException0 = new SQLDataException((Throwable) null);
      SQLException sQLException0 = new SQLException("L3l'_~1W", "HH*N7ZW2OXFJrW=", 3644, sQLDataException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLSyntaxErrorException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("ti\"gJV", "ti\"gJV", 0, sQLSyntaxErrorException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("", "", 0);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "HH*N7ZW2OXFJrW=", "L3l'_~1W", (-1));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "HH*N7ZW2OXFJrW=", "I]8-kjsZ", 3644);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("", "", "", (-1));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("I]8-kjsZ", "541yfrJ?E#WM", "", (-1));
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("541yfrJ?E#WM", "List must not be null", "", (-1));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("HH*N7ZW2OXFJrW=", "", "List must not be null", 4323);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("HH*N7ZW2OXFJrW=", ";lr9uUUy_uj]x|GI19", "org.apache.commons.collections4.functors.NotNullPredicate", (-1));
      stackTraceElementArray0[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement("`^80.rl^f|YfnHrYuJ", "", "NT--In", (-184));
      stackTraceElementArray0[7] = stackTraceElement7;
      sQLNonTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("", "ti\"gJV");
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 3644, (-2515));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-222), false, false, (-222), 1226, (Throwable) null);
      dataTruncation0.getNextWarning();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 0, (-222));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends Properties>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<DataTruncation, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, Properties>(orderedMapIterator1);
      IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) abstractOrderedMapIteratorDecorator0);
      OrderedMapIterator<SQLSyntaxErrorException, IIOMetadataNode> orderedMapIterator2 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLSyntaxErrorException, IIOMetadataNode> orderedMapIterator3 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends IIOMetadataNode>) orderedMapIterator2);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator3);
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>();
      ListIterator<TreeSet<SQLTransactionRollbackException>> listIterator0 = IteratorUtils.singletonListIterator(treeSet0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Hashtable<Predicate<Object>, Transformer<Object, String>> hashtable0 = new Hashtable<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashtable0);
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate1, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      IteratorUtils.toString((Iterator<TreeSet<SQLTransactionRollbackException>>) listIterator0, (Transformer<? super TreeSet<SQLTransactionRollbackException>, String>) transformer1, "Already at start of list.", "$]6:", "");
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) singletonIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0);
      IteratorUtils.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      properties0.setProperty("nn+k4l^!", "Already at start of list.");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) properties0, 3564);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTimeoutException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("<d>mt+P$\"=RnY", "[/:Js4shU\"U", 1073741824);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 1073741824);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 159;
      intArray0[1] = 718;
      intArray0[2] = 512;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Yg", "Bk9PKjd>h9(uCn9", 0, (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("dW@8>X+kG", "dW@8>X+kG", intArray0, sQLTimeoutException0);
      sQLTimeoutException0.getLocalizedMessage();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Yg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.println((Object) "Bk9PKjd>h9(uCn9");
      batchUpdateException0.printStackTrace((PrintWriter) mockPrintWriter0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) resettableIterator0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[8];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "Yg", 630);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("Bk9PKjd>h9(uCn9", "Yg", 2929);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("Yg", "Bk9PKjd>h9(uCn9", 718, sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("dW@8>X+kG", "Yg");
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException(">Wii><+Iou!#/");
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException(sQLSyntaxErrorException3);
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      SQLSyntaxErrorException sQLSyntaxErrorException7 = new SQLSyntaxErrorException("dW@8>X+kG", sQLSyntaxErrorException6);
      sQLSyntaxErrorExceptionArray0[7] = sQLSyntaxErrorException7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 0, 159);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Closure must not be null");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/0-t", "", sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0, (-558), (-1021));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
