/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 14:47:31 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLWarning[] sQLWarningArray0 = new SQLWarning[3];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)32;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "", (-2348));
      SQLWarning sQLWarning0 = new SQLWarning("", "", 3, sQLNonTransientException0);
      sQLWarning0.addSuppressed(sQLNonTransientException0);
      sQLWarningArray0[0] = sQLWarning0;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      DataTruncation dataTruncation0 = new DataTruncation(10, false, false, 10, (-955));
      dataTruncation0.setNextWarning(sQLWarning0);
      sQLWarningArray0[1] = (SQLWarning) dataTruncation0;
      SQLWarning sQLWarning1 = new SQLWarning("Iterator must not be null", sQLWarning0);
      sQLWarningArray0[2] = sQLWarning1;
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLWarningArray0, 3);
      IteratorUtils.size(resettableListIterator0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 1547);
      IteratorUtils.singletonListIterator(sQLTimeoutException0);
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      OrderedIterator<PriorityQueue<String>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OrderedIterator<StringTokenizer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toList((Iterator<? extends StringTokenizer>) orderedIterator0, 44);
      IteratorUtils.emptyListIterator();
      Vector<Object> vector0 = new Vector<Object>();
      vector0.setSize(44);
      IteratorUtils.loopingListIterator((List<Object>) vector0);
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      Properties properties8 = new Properties();
      propertiesArray0[8] = properties8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(propertiesArray0, (-1971));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      Factory<IIOMetadataNode> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<String, IIOMetadataNode> factoryTransformer0 = new FactoryTransformer<String, IIOMetadataNode>(factory0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends String>) singletonListIterator0, (Transformer<? super String, ? extends IIOMetadataNode>) factoryTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator(iterator0, 842L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      ServiceLoader<Boolean>[] serviceLoaderArray0 = (ServiceLoader<Boolean>[]) Array.newInstance(ServiceLoader.class, 5);
      Class<Boolean> class0 = Boolean.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ServiceLoader<Boolean> serviceLoader0 = ServiceLoader.load(class0, classLoader1);
      serviceLoaderArray0[0] = serviceLoader0;
      ServiceLoader<Boolean> serviceLoader1 = ServiceLoader.loadInstalled(class0);
      serviceLoaderArray0[1] = serviceLoader1;
      Class<Boolean> class1 = Boolean.class;
      ServiceLoader<Boolean> serviceLoader2 = ServiceLoader.load(class1);
      serviceLoaderArray0[2] = serviceLoader2;
      Class<Boolean> class2 = Boolean.class;
      ServiceLoader<Boolean> serviceLoader3 = ServiceLoader.loadInstalled(class2);
      serviceLoaderArray0[3] = serviceLoader3;
      Class<Boolean> class3 = Boolean.class;
      ServiceLoader<Boolean> serviceLoader4 = ServiceLoader.load(class3);
      serviceLoaderArray0[4] = serviceLoader4;
      ResettableIterator<ServiceLoader<Boolean>> resettableIterator0 = IteratorUtils.arrayIterator(serviceLoaderArray0, 3, 3);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("AO:[S8");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("AO:[S8", "r8H?(XfgO}", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException((String) null);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("r8H?(XfgO}");
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("+1Cvc\r", "+1Cvc\r");
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 1, (-404));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      int int0 = 14;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, 14, sQLWarning0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransactionRollbackException0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      NotPredicate.notPredicate((Predicate<? super SQLRecoverableException>) notPredicate0);
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) notPredicate0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      Predicate<Object> predicate2 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate1);
      PredicateTransformer<SQLSyntaxErrorException> predicateTransformer0 = new PredicateTransformer<SQLSyntaxErrorException>(predicate2);
      Boolean boolean0 = predicateTransformer0.transform((SQLSyntaxErrorException) null);
      predicateTransformer0.transform((SQLSyntaxErrorException) null);
      ConstantTransformer.constantTransformer(boolean0);
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) notPredicate0);
      TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      DefaultEquator.defaultEquator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(transformer0, defaultEquator0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate1, predicate2);
      IdentityPredicate.identityPredicate((Object) null);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(notPredicate0);
      AndPredicate<Object> andPredicate1 = new AndPredicate<Object>(nullIsExceptionPredicate0, predicate2);
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) andPredicate1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = predicate1;
      predicateArray0[1] = (Predicate<Object>) andPredicate0;
      Predicate<Object> predicate3 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.matchesAny((Iterator<SQLTransactionRollbackException>) listIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate3);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) predicateArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)29;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      vector0.add(sQLTimeoutException0);
      vector0.removeAll(stack0);
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(vector0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) loopingListIterator0, (Iterator<? extends SQLTimeoutException>) loopingListIterator0);
      // Undeclared exception!
      IteratorUtils.size(iterator0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.getIterator(orderedMapIterator0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>(hashtable0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("qd0m4?", hashtable1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("qd0m4?", "qd0m4?", 10, sQLClientInfoException0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransactionRollbackException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      predicateArray0[1] = predicate1;
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Predicate<Object> predicate2 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      predicateArray0[2] = predicate2;
      Predicate<Object> predicate3 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      predicateArray0[3] = predicate3;
      PredicateTransformer<SQLSyntaxErrorException> predicateTransformer0 = new PredicateTransformer<SQLSyntaxErrorException>(predicate1);
      Boolean boolean0 = predicateTransformer0.transform((SQLSyntaxErrorException) null);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.constantTransformer(boolean0);
      Predicate<Object> predicate4 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      predicateArray0[4] = predicate4;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(treeSet0, defaultEquator0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, equalPredicate0);
      predicateArray0[5] = (Predicate<Object>) andPredicate0;
      AndPredicate<Object> andPredicate1 = new AndPredicate<Object>(andPredicate0, andPredicate0);
      predicateArray0[6] = (Predicate<Object>) andPredicate1;
      Predicate<Object> predicate5 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      predicateArray0[7] = predicate5;
      Predicate<Object> predicate6 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate1);
      predicateArray0[8] = predicate6;
      Predicate<Object> predicate7 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      boolean boolean1 = IteratorUtils.matchesAny((Iterator<SQLTransactionRollbackException>) listIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate7);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) orderedMapIterator0, (Transformer<? super SQLTransientConnectionException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLSyntaxErrorException[]) null, (-3248));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLDataException>) iterator0, (Class<SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Transformer<Object, Object> transformer0 = CloneTransformer.cloneTransformer();
      IteratorUtils.getIterator(transformer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("E6)b-q'%VHN");
      Transformer<IIOMetadataNode, IIOMetadataNode> transformer1 = InvokerTransformer.invokerTransformer("E6)b-q'%VHN");
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer1);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'E6)b-q'%VHN' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CloneTransformer.cloneTransformer();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<SQLException> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLException>>) arrayList0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) singletonListIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      Properties properties0 = new Properties();
      IteratorUtils.contains((Iterator<SQLClientInfoException>) listIterator0, (Object) sQLClientInfoException0);
      Iterator<Hashtable<String, SQLNonTransientException>> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 3843);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 3843
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("mFqdk", "Tikh", hashtable0);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashtable0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("mFqdk", "Entry does not exist: ", (-2969), map0, sQLClientInfoException1);
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      vector0.add(sQLClientInfoException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<SQLException> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLException>>) arrayList0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) singletonListIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLClientInfoException>) listIterator0, (Object) sQLClientInfoException1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) resettableListIterator0, class0);
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      LoopingListIterator<SQLClientInfoException> loopingListIterator0 = new LoopingListIterator<SQLClientInfoException>(vector0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) loopingListIterator0);
      ListIteratorWrapper<SQLClientInfoException> listIteratorWrapper0 = new ListIteratorWrapper<SQLClientInfoException>(iterator0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("The transformer array must not contain a null transformer, index ", "|[", hashtable0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0);
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("|[", "6lch0`mWl79lo", (-958), map1, sQLClientInfoException0);
      vector0.add(sQLClientInfoException2);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        IteratorUtils.contains((Iterator<SQLClientInfoException>) listIteratorWrapper0, (Object) sQLTransactionRollbackException0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) iterator0, class0);
      SQLDataException sQLDataException0 = new SQLDataException("j^[zuBWj;@Fd\"", "j^[zuBWj;@Fd\"");
      DataTruncation dataTruncation0 = new DataTruncation(3088, true, true, 3088, 1522, sQLDataException0);
      Comparator<DataTruncation> comparator0 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<DataTruncation> predicate0 = ComparatorPredicate.comparatorPredicate(dataTruncation0, comparator0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<DataTruncation>) null, (Predicate<? super DataTruncation>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      ObjectArrayIterator<SQLNonTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) objectArrayIterator0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0);
      IteratorUtils.toArray(iterator0);
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>();
      LoopingIterator<SQLNonTransientException> loopingIterator0 = new LoopingIterator<SQLNonTransientException>(hashSet0);
      IteratorUtils.skippingIterator((Iterator<SQLNonTransientException>) loopingIterator0, 1377L);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("\"=q4F2dJ", (String) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("?~p4O)W&Iv? BpsyP", "\"=q4F2dJ", 357, sQLNonTransientConnectionException0);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0, true);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("?~p4O)W&Iv? BpsyP");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '?~p4O)W&Iv? BpsyP' on 'class java.sql.SQLInvalidAuthorizationSpecException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("QL/0}}>4", "QL/0}}>4", 359);
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>(sQLWarning0);
      IteratorUtils.get((Iterator<SQLWarning>) singletonIterator0, 0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[0];
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLIntegrityConstraintViolationException>) objectArrayIterator0, (Closure<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Transformer<Object, Object> transformer0 = CloneTransformer.cloneTransformer();
      IteratorUtils.getIterator(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Transformer<Object, Object> transformer0 = CloneTransformer.cloneTransformer();
      Iterator<?> iterator0 = IteratorUtils.getIterator(transformer0);
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 0);
      Transformer<Object, Boolean> transformer1 = InvokerTransformer.invokerTransformer("SJ/A/", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<Boolean> iterator1 = IteratorUtils.transformedIterator(iterator0, (Transformer<? super Object, ? extends Boolean>) transformer1);
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Boolean>) iterator1, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'SJ/A/' on 'class org.apache.commons.collections4.functors.CloneTransformer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CloneTransformer.cloneTransformer();
      SQLWarning[] sQLWarningArray0 = new SQLWarning[7];
      DataTruncation dataTruncation0 = new DataTruncation(594, true, false, 3843, 4);
      dataTruncation0.getNextWarning();
      sQLWarningArray0[0] = null;
      String string0 = "zy[";
      SQLWarning sQLWarning0 = new SQLWarning("zy[");
      sQLWarningArray0[1] = sQLWarning0;
      SQLWarning sQLWarning1 = new SQLWarning("zy[", "zy[", sQLWarning0);
      sQLWarningArray0[2] = sQLWarning1;
      SQLWarning sQLWarning2 = new SQLWarning("zy[", "zy[", (-1));
      sQLWarningArray0[3] = sQLWarning2;
      DataTruncation dataTruncation1 = new DataTruncation(4, true, false, 1421, (-1));
      sQLWarningArray0[4] = (SQLWarning) dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(1421, false, true, 594, 3843, (Throwable) null);
      sQLWarningArray0[5] = (SQLWarning) dataTruncation2;
      SQLWarning sQLWarning3 = new SQLWarning("zy[", "BPR>|p!^jk8>0", 4);
      MockFile mockFile0 = new MockFile("", "zy[");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      sQLWarning3.printStackTrace((PrintStream) mockPrintStream0);
      sQLWarningArray0[6] = sQLWarning3;
      ObjectArrayListIterator<SQLWarning> objectArrayListIterator0 = new ObjectArrayListIterator<SQLWarning>(sQLWarningArray0);
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLWarning>) objectArrayListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLWarning>) listIterator0, (-1811));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -1811
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("QL/0}}>4", "QL/0}}>4", 359);
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>(sQLWarning0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("QL/0}}>4", "QL/0}}>4");
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      SingletonListIterator<PriorityQueue<DataTruncation>> singletonListIterator0 = new SingletonListIterator<PriorityQueue<DataTruncation>>(priorityQueue0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>((Predicate<? super Object>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<PriorityQueue<DataTruncation>>) singletonListIterator0, (Predicate<? super PriorityQueue<DataTruncation>>) nullIsTruePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NullIsTruePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Transformer<Object, Object> transformer0 = CloneTransformer.cloneTransformer();
      IteratorUtils.getIterator(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CloneTransformer.cloneTransformer();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      LoopingIterator<DataTruncation> loopingIterator0 = new LoopingIterator<DataTruncation>(arrayList0);
      Iterator<SQLWarning> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLWarning>) loopingIterator0);
      DataTruncation dataTruncation0 = new DataTruncation((-2131), true, false, (-2131), (-2131));
      arrayList0.add(dataTruncation0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 2568);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate((Object) comparator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      EmptyListIterator.resettableEmptyListIterator();
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      EmptyIterator.emptyIterator();
      OrderedMapIterator<SQLTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0);
      Integer integer0 = new Integer((-3062));
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      IteratorUtils.getIterator(nullIsFalsePredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", sQLRecoverableException0);
      OrderedMapIterator<LinkedHashSet<ComparatorPredicate.Criterion>, SQLTransientException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate1, predicate1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = (Predicate<Object>) orPredicate0;
      predicateArray0[1] = predicate1;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      IteratorUtils.matchesAny((Iterator<LinkedHashSet<ComparatorPredicate.Criterion>>) orderedMapIterator1, (Predicate<? super LinkedHashSet<ComparatorPredicate.Criterion>>) predicate1);
      EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.isEmpty((Iterator<?>) null);
      OrderedIterator<SQLNonTransientException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("QL/}}>4", "QL/}}>4", 359);
      Transformer<Object, Object> transformer0 = CloneTransformer.cloneTransformer();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      IteratorUtils.apply((Iterator<ServiceLoader<LinkedHashSet>>) null, (Closure<? super ServiceLoader<LinkedHashSet>>) transformerClosure0);
      OrderedIterator<LinkedList<SQLRecoverableException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[1];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, 0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.singletonIterator(sQLWarning0);
      IteratorUtils.get((Iterator<SQLWarning>) resettableIterator0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Properties properties0 = new Properties();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CloneTransformer.cloneTransformer();
      StringTokenizer stringTokenizer0 = new StringTokenizer("QL/}}>4", "y'rgwa+vp");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ExceptionClosure.exceptionClosure();
      EmptyIterator.emptyIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(stack0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      SQLException sQLException0 = new SQLException();
      stack0.toArray(dataTruncationArray0);
      OrderedMapIterator<SQLTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0);
      Integer integer0 = new Integer(128);
      IteratorUtils.getIterator("KS7(`|%+yK6!oo5<?}V");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", sQLException0);
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLTransactionRollbackException>) singletonListIterator0);
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[2] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[3] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[4] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[5] = (Predicate<Object>) instanceofPredicate0;
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 2);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      closureArray0[0] = closure0;
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) predicateArray0[4], (Closure<? super Object>) closure0, (Closure<? super Object>) closure0);
      closureArray0[1] = closure1;
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(instanceofPredicate0, closure1, false);
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, closureArray0, whileClosure0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(128, switchClosure0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(instanceofPredicate0, forClosure0, closure0);
      IteratorUtils.apply(iterator0, (Closure<? super SQLTransactionRollbackException>) ifClosure0);
      assertTrue(singletonListIterator0.hasPrevious());
      assertEquals(1, singletonListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) "", comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      OrderedMapIterator<LinkedHashSet<ComparatorPredicate.Criterion>, SQLTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.matchesAny((Iterator<LinkedHashSet<ComparatorPredicate.Criterion>>) orderedMapIterator0, (Predicate<? super LinkedHashSet<ComparatorPredicate.Criterion>>) predicate0);
      Comparator<Boolean> comparator1 = null;
      Iterator<Boolean> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Boolean>) null, (-4814L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MapIterator<ComparatorPredicate.Criterion, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Integer integer0 = new Integer(33);
      IteratorUtils.contains((Iterator<ComparatorPredicate.Criterion>) mapIterator0, (Object) mapIterator0);
      Integer integer1 = new Integer((-3568));
      String string0 = "h_J`hq8";
      SQLDataException sQLDataException0 = new SQLDataException("h_J`hq8", (Throwable) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLDataException>) listIterator0, (Predicate<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 359;
      String string0 = "QL/0}}>4";
      SQLWarning sQLWarning0 = new SQLWarning("QL/0}}>4", "QL/0}}>4", 359);
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>(sQLWarning0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, sQLWarning0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.singletonIterator(sQLClientInfoException0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) resettableIterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ResettableListIterator<HashSet<Properties>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.skippingIterator((Iterator<HashSet<Properties>>) resettableListIterator0, 0L);
      Transformer<SQLNonTransientException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) null, (Transformer<? super SQLIntegrityConstraintViolationException, String>) transformer0, (String) null, (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MapIterator<ComparatorPredicate.Criterion, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Integer integer0 = new Integer(10);
      IteratorUtils.contains((Iterator<ComparatorPredicate.Criterion>) mapIterator0, (Object) null);
      Integer integer1 = new Integer(10);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cD.U*$");
      SQLDataException sQLDataException0 = new SQLDataException("", (Throwable) null);
      sQLDataException0.fillInStackTrace();
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLDataException0);
      OrderedMapIterator<SQLClientInfoException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, Properties>) orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, Properties>) orderedMapIterator0);
      IteratorUtils.isEmpty(iterator0);
      ArrayListIterator<LinkedList<SQLTransactionRollbackException>> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<LinkedList<SQLTransactionRollbackException>>(sQLDataException0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 1);
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      iteratorArray0[0] = (Iterator<BatchUpdateException>) listIterator0;
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      BoundedIterator<BatchUpdateException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) zippingIterator0, 0L);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) boundedIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 5);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 9);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) "", comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Iterator<PriorityQueue<DataTruncation>> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.matchesAll(iterator0, (Predicate<? super PriorityQueue<DataTruncation>>) predicate0);
      Iterator<SQLNonTransientException>[] iteratorArray0 = (Iterator<SQLNonTransientException>[]) Array.newInstance(Iterator.class, 2);
      Comparator<SQLException> comparator1 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) comparator1, (Iterator<? extends SQLNonTransientException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OrderedMapIterator<LinkedList<SQLRecoverableException>, LinkedList<DataTruncation>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableIterator((Iterator<LinkedList<SQLRecoverableException>>) orderedMapIterator0);
      SQLWarning sQLWarning0 = new SQLWarning("lWoY?Y*b>|6A_", "`u/D-", 739);
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>(sQLWarning0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0);
      IteratorUtils.singletonIterator(enumSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends EnumSet<Locale.Category>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 0, (-4986));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MapIterator<Integer, LinkedHashSet<SQLInvalidAuthorizationSpecException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends Integer>) mapIterator0);
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      IteratorUtils.emptyOrderedMapIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      NotPredicate.notPredicate((Predicate<? super Object>) transformerPredicate0);
      Predicate<SQLTransientException> predicate0 = NotPredicate.notPredicate((Predicate<? super SQLTransientException>) transformerPredicate0);
      OrPredicate.orPredicate((Predicate<? super SQLTimeoutException>) transformerPredicate0, (Predicate<? super SQLTimeoutException>) predicate0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 1);
      OrderedMapIterator<SQLTimeoutException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, Integer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends Integer>) orderedMapIterator0);
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) orderedMapIterator1;
      IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("P$fyADD'VFzHY=kV]{");
      OrderedMapIterator<SQLTransactionRollbackException, Properties> orderedMapIterator2 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLTransactionRollbackException, Properties> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransactionRollbackException, Properties>(orderedMapIterator2);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLTransactionRollbackException>) abstractMapIteratorDecorator0, (Object) orderedMapIterator1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.chainedIterator((Iterator<? extends Integer>) orderedIterator0, (Iterator<? extends Integer>) orderedIterator0);
      LinkedHashSet<ComparatorPredicate.Criterion>[] linkedHashSetArray0 = (LinkedHashSet<ComparatorPredicate.Criterion>[]) Array.newInstance(LinkedHashSet.class, 0);
      ObjectArrayIterator<LinkedHashSet<ComparatorPredicate.Criterion>> objectArrayIterator0 = new ObjectArrayIterator<LinkedHashSet<ComparatorPredicate.Criterion>>(linkedHashSetArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<LinkedHashSet<ComparatorPredicate.Criterion>>) objectArrayIterator0, (Predicate<? super LinkedHashSet<ComparatorPredicate.Criterion>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Hashtable<SQLSyntaxErrorException, DataTruncation> hashtable0 = new Hashtable<SQLSyntaxErrorException, DataTruncation>();
      Enumeration<SQLSyntaxErrorException> enumeration0 = hashtable0.keys();
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) linkedList0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("ANm &9M");
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLIntegrityConstraintViolationException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "ANm &9M", 1073741824, sQLIntegrityConstraintViolationException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "4WWiuYu0$CzUb", sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLException>) singletonIterator0, (Predicate<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<String>) singletonListIterator0, (Transformer<? super String, String>) transformer0, "org.apache.commons.collections4.map.Flat3Map$Values", "org.apache.commons.collections4.map.Flat3Map$Values", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MapIterator<Integer, LinkedHashSet<SQLInvalidAuthorizationSpecException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends Integer>) mapIterator0);
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      IteratorUtils.emptyOrderedMapIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("P$fyADD'VFzHY=kV]{", "P$fyADD'VFzHY=kV]{");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLRecoverableException0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.singletonIterator(sQLClientInfoException0);
      IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) resettableIterator0, 10);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("P$fyADD'VFzHY=kV]{");
      OrderedIterator<ComparatorPredicate.Criterion> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.contains((Iterator<ComparatorPredicate.Criterion>) orderedIterator0, (Object) priorityQueue0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[5];
      IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator");
      IteratorUtils.toString((Iterator<String>) null, (Transformer<? super String, String>) constantTransformer0, "org.apache.commons.collections4.map.Flat3Map$Values", "Invalid map index: ", "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator");
      OrderedMapIterator<SQLTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, SQLNonTransientConnectionException>(orderedMapIterator1);
      IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MapIterator<Integer, LinkedHashSet<SQLInvalidAuthorizationSpecException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends Integer>) mapIterator0);
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      IteratorUtils.emptyOrderedMapIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("P$fyADD'VFzHY=kV]{", "P$fyADD'VFzHY=kV]{");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLDataException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Hashtable<SQLSyntaxErrorException, DataTruncation> hashtable0 = new Hashtable<SQLSyntaxErrorException, DataTruncation>();
      Enumeration<SQLSyntaxErrorException> enumeration0 = hashtable0.keys();
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) stack0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("<$q^Yo");
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLIntegrityConstraintViolationException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("j#YA*ym", "<$q^Yo", 1073741824, sQLIntegrityConstraintViolationException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[", "", sQLFeatureNotSupportedException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(4276, 0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLSyntaxErrorException0, comparator0);
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = (SQLIntegrityConstraintViolationException)IteratorUtils.find((Iterator<SQLException>) singletonIterator0, (Predicate<? super SQLException>) predicate1);
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("QL/0}}>4");
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) transformerPredicate0);
      Predicate<SQLTimeoutException> predicate1 = OrPredicate.orPredicate((Predicate<? super SQLTimeoutException>) predicate0, (Predicate<? super SQLTimeoutException>) transformerPredicate0);
      Hashtable<SQLTimeoutException, ArrayDeque<SQLException>> hashtable0 = new Hashtable<SQLTimeoutException, ArrayDeque<SQLException>>();
      EntrySetMapIterator<SQLTimeoutException, ArrayDeque<SQLException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, ArrayDeque<SQLException>>(hashtable0);
      AbstractMapIteratorDecorator<SQLTimeoutException, ArrayDeque<SQLException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, ArrayDeque<SQLException>>(entrySetMapIterator0);
      SQLTimeoutException sQLTimeoutException0 = IteratorUtils.find((Iterator<SQLTimeoutException>) abstractMapIteratorDecorator0, (Predicate<? super SQLTimeoutException>) predicate1);
      assertNull(sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Locale.Category[]) null, 641, 47);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) resettableListIterator0, class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLRecoverableException0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLNonTransientConnectionException0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) listIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("QL/0}}>4");
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      File file0 = MockFile.createTempFile("QL/0}}>4", "QL/0}}>4", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) sQLTransientConnectionException0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      sQLTransientConnectionException0.printStackTrace((PrintWriter) mockPrintWriter1);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLTransientConnectionException>) singletonListIterator0, (Predicate<? super SQLTransientConnectionException>) instanceofPredicate0);
      SQLTimeoutException sQLTimeoutException0 = IteratorUtils.find((Iterator<SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) instanceofPredicate0);
      assertNull(sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Hashtable<SQLSyntaxErrorException, DataTruncation> hashtable0 = new Hashtable<SQLSyntaxErrorException, DataTruncation>();
      Enumeration<SQLSyntaxErrorException> enumeration0 = hashtable0.keys();
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) stack0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("<$q^Yo");
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLIntegrityConstraintViolationException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("j#YA*ym", "<$q^Yo", 1073741824, sQLIntegrityConstraintViolationException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[", "", sQLFeatureNotSupportedException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLSyntaxErrorException0, comparator0);
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<SQLException>) singletonIterator0, (Predicate<? super SQLException>) predicate1);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MapIterator<Integer, LinkedHashSet<SQLInvalidAuthorizationSpecException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends Integer>) mapIterator0);
      PriorityQueue<DataTruncation>[] priorityQueueArray0 = (PriorityQueue<DataTruncation>[]) Array.newInstance(PriorityQueue.class, 1);
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      priorityQueueArray0[0] = priorityQueue0;
      ObjectArrayIterator<PriorityQueue<DataTruncation>> objectArrayIterator0 = new ObjectArrayIterator<PriorityQueue<DataTruncation>>(priorityQueueArray0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate((Object) mapIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Vector<Object> vector0 = new Vector<Object>(priorityQueue0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) null, (Collection<? super SQLSyntaxErrorException>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Entry does not exist: ", "Entry does not exist: ");
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) transformerPredicate0);
      Predicate<SQLTimeoutException> predicate1 = OrPredicate.orPredicate((Predicate<? super SQLTimeoutException>) predicate0, (Predicate<? super SQLTimeoutException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLTimeoutException>) resettableIterator0, (Predicate<? super SQLTimeoutException>) predicate1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("3s", "", 641, (Throwable) null);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLDataException>) listIterator0, (Predicate<? super SQLDataException>) predicate0);
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) listIterator0, class0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category2, locale_Category3, locale_Category1);
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator0 = IteratorUtils.singletonIterator(enumSet0);
      Iterable<EnumSet<Locale.Category>> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends EnumSet<Locale.Category>>) resettableIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MapIterator<Integer, LinkedHashSet<SQLInvalidAuthorizationSpecException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends Integer>) mapIterator0);
      PriorityQueue<DataTruncation>[] priorityQueueArray0 = (PriorityQueue<DataTruncation>[]) Array.newInstance(PriorityQueue.class, 1);
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      priorityQueueArray0[0] = priorityQueue0;
      ObjectArrayIterator<PriorityQueue<DataTruncation>> objectArrayIterator0 = new ObjectArrayIterator<PriorityQueue<DataTruncation>>(priorityQueueArray0);
      Transformer<SQLException, SQLTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Transformer<? super SQLSyntaxErrorException, ? extends SQLTransientException>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[10];
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>(linkedList0);
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(linkedList1);
      Iterator<Integer> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Integer>) loopingListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<?>) iterator0, (Transformer<? super Object, ? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MapIterator<Integer, LinkedHashSet<SQLInvalidAuthorizationSpecException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends Integer>) mapIterator0);
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      Hashtable<SQLSyntaxErrorException, DataTruncation> hashtable0 = new Hashtable<SQLSyntaxErrorException, DataTruncation>();
      Enumeration<SQLSyntaxErrorException> enumeration0 = hashtable0.keys();
      Vector<SQLException> vector0 = new Vector<SQLException>();
      vector0.clone();
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) vector0);
      Properties[] propertiesArray0 = new Properties[0];
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MapIterator<Integer, LinkedHashSet<SQLInvalidAuthorizationSpecException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends Integer>) mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1893);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLException sQLException0 = new SQLException();
      Stack<String> stack0 = new Stack<String>();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      DataTruncation dataTruncation0 = new DataTruncation((-1), false, false, (-463), (-1449), sQLException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(31, true, true, (-1449), 8);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(31, false, false, 47, (-1813));
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(1987, false, true, (-1063), 47, dataTruncation0);
      dataTruncationArray0[3] = dataTruncation3;
      stack0.toArray(dataTruncationArray0);
      OrderedMapIterator<SQLTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0);
      Integer integer0 = new Integer(0);
      SQLWarning sQLWarning0 = new SQLWarning("{-~", "org.apache.commons.collections4.iterators.TransformIterator", 31);
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>(dataTruncationArray0[0]);
      IteratorUtils.get((Iterator<SQLWarning>) singletonIterator0, 0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[5];
      IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("dGPV3FJmie,4XAT;Vq");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) objectArrayIterator0);
      Integer integer0 = new Integer(128);
      SQLWarning sQLWarning0 = new SQLWarning("dGPV3FJmie,4XAT;Vq");
      IteratorUtils.getIterator(sQLWarning0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLRecoverableException, LinkedList<SQLRecoverableException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[4];
      IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) singletonIterator0, (Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) singletonIterator0);
      IteratorUtils.toList((Iterator<? extends Properties>) resettableIterator0, 2992);
      IteratorUtils.emptyOrderedMapIterator();
      EmptyIterator.resettableEmptyIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLException sQLException0 = new SQLException("HgaA/Gb?/?[2]Iw4q", sQLNonTransientConnectionException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLException0);
      ArrayListIterator<SQLTimeoutException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLTimeoutException>(sQLClientInfoException0, 2992);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      OrderedMapIterator<DataTruncation, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLWarning, ?>) orderedMapIterator0);
      OrderedMapIterator<SQLTransientConnectionException, Iterator<Class<Object>>> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ?>) orderedMapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[10];
      String string0 = "P#!iybh.6fT,Av5ja";
      IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      String string1 = "dGPV3FJmie,4XAT;Vq";
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLDataException>) null, (Predicate<? super SQLDataException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(stack0);
      IteratorUtils.toArray((Iterator<?>) loopingListIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) resettableListIterator0, (Iterator<? extends SQLTimeoutException>) resettableListIterator0, (Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList1 = new LinkedList<SQLClientInfoException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("3s", "", 641, (Throwable) null);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      ListIterator<SQLDataException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLDataException>) listIterator0, (Predicate<? super SQLDataException>) predicate0);
      Class<SQLDataException> class0 = SQLDataException.class;
      SQLDataException[] sQLDataExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLDataException>) listIterator1, class0);
      assertEquals(0, sQLDataExceptionArray0.length);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      LoopingIterator<Locale.Category> loopingIterator0 = new LoopingIterator<Locale.Category>(stack0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Locale.Category>) loopingIterator0);
      IteratorUtils.toList((Iterator<? extends Locale.Category>) iterator0);
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Locale.Category> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      OnePredicate<SQLTransientConnectionException> onePredicate0 = new OnePredicate<SQLTransientConnectionException>(predicateArray0);
      SQLDataException sQLDataException0 = new SQLDataException("Entry does not exist: ", "TA1!!g!");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("TA1!!g!", sQLDataException0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTransientConnectionException>) listIterator0, (Predicate<? super SQLTransientConnectionException>) predicateArray1[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<DataTruncation, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLWarning, ?>) orderedMapIterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransientConnectionException, Integer> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ?>) orderedMapIterator1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[0] = predicate0;
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      predicateArray0[1] = predicate1;
      OnePredicate<SQLTransientConnectionException> onePredicate0 = new OnePredicate<SQLTransientConnectionException>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator1, (Predicate<? super SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Predicate must not be null");
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException0;
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Predicate must not be null", "", (-1537));
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTimeoutException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      OrderedMapIterator<DataTruncation, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, SQLDataException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends SQLDataException>) orderedMapIterator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLWarning, ?>) orderedMapIterator1);
      OrderedMapIterator<SQLTransientConnectionException, Iterator<Class<Object>>> orderedMapIterator2 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransientConnectionException, Object> orderedMapIterator3 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ?>) orderedMapIterator2);
      Predicate<SQLTransientException>[] predicateArray0 = (Predicate<SQLTransientException>[]) Array.newInstance(Predicate.class, 5);
      Predicate<SQLTransientException> predicate0 = TruePredicate.truePredicate();
      predicateArray0[0] = predicate0;
      Transformer<SQLException, SQLTimeoutException> transformer0 = ConstantTransformer.nullTransformer();
      TransformedPredicate<SQLTransientException> transformedPredicate0 = new TransformedPredicate<SQLTransientException>(transformer0, predicate0);
      predicateArray0[1] = (Predicate<SQLTransientException>) transformedPredicate0;
      Predicate<SQLTransientException> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super SQLTransientException, ? extends SQLTransientException>) transformer0, (Predicate<? super SQLTransientException>) predicate0);
      predicateArray0[2] = predicate1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLFeatureNotSupportedException0);
      Predicate<SQLTransientException> predicate2 = IdentityPredicate.identityPredicate((SQLTransientException) sQLTimeoutException0);
      predicateArray0[3] = predicate2;
      DefaultEquator<SQLTransientException> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<SQLTransientException> predicate3 = EqualPredicate.equalPredicate((SQLTransientException) sQLTimeoutException0, (Equator<SQLTransientException>) defaultEquator0);
      predicateArray0[4] = predicate3;
      OnePredicate<SQLTransientConnectionException> onePredicate0 = new OnePredicate<SQLTransientConnectionException>(predicateArray0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator3, (Predicate<? super SQLTransientConnectionException>) predicateArray0[1]);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) resettableListIterator0, (Iterator<? extends SQLTimeoutException>) resettableListIterator0, (Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) linkedList0);
      iIOMetadataNode0.getPreviousSibling();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(stack0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      SQLException sQLException0 = new SQLException();
      stack0.toArray(dataTruncationArray0);
      OrderedMapIterator<SQLTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0);
      Integer integer0 = new Integer(128);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KS7(`|%+yK6!oo5<?}V");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      OrderedMapIterator<SQLClientInfoException, Properties> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, Properties>) orderedMapIterator1);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("KS7(`|%+yK6!oo5<?}V");
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode1.getChildNodes();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      assertNotSame(nodeListIterator0, iterator0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CloneTransformer.cloneTransformer();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("$h\"(lN^d!XtBXL[gYuH");
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 0);
      Transformer<SQLTransientConnectionException, SQLTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("transformer may not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 1955);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'transformer may not be null' on 'class java.sql.SQLTransientConnectionException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<SQLTimeoutException> comparator1 = (Comparator<SQLTimeoutException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLWarning sQLWarning0 = new SQLWarning("8u5", sQLFeatureNotSupportedException0);
      Transformer<SQLException, DataTruncation> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.functors.ComparatorPredicate");
      Iterator<SQLWarning> iterator0 = IteratorUtils.objectGraphIterator(sQLWarning0, (Transformer<? super SQLWarning, ? extends SQLWarning>) transformer0);
      int int0 = 9;
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'org.apache.commons.collections4.functors.ComparatorPredicate' on 'class java.sql.SQLWarning' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 43;
      intArray0[1] = 671;
      intArray0[2] = 47;
      intArray0[3] = (-1682);
      intArray0[4] = 4937;
      intArray0[5] = 30;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      Transformer<SQLException, BatchUpdateException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[10];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Predicate must not be null");
      IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      predicateArray0[0] = predicate0;
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      predicateArray0[1] = (Predicate<Object>) nullIsTruePredicate0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(uniquePredicate0, defaultEquator0);
      predicateArray0[2] = (Predicate<Object>) equalPredicate0;
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[3] = (Predicate<Object>) instanceofPredicate0;
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[4] = predicate1;
      Predicate<Object> predicate2 = IdentityPredicate.identityPredicate((Object) predicateArray0[1]);
      predicateArray0[5] = predicate2;
      OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      Properties properties0 = new Properties();
      IteratorUtils.singletonListIterator(properties0);
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) listIterator0, (Predicate<? super Properties>) predicate2);
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      OrderedIterator<Properties> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) singletonIterator0, (Iterator<? extends Properties>) singletonIterator0, (Iterator<? extends Properties>) orderedIterator0);
      IteratorUtils.toList((Iterator<? extends Properties>) singletonIterator0, 671);
      IteratorUtils.emptyOrderedMapIterator();
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      // Undeclared exception!
      try { 
        AllPredicate.allPredicate((Predicate<? super Object>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      OrderedMapIterator<DataTruncation, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, SQLDataException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends SQLDataException>) orderedMapIterator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLWarning, ?>) orderedMapIterator1);
      OrderedMapIterator<SQLTransientConnectionException, Iterator<Class<Object>>> orderedMapIterator2 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransientConnectionException, Object> orderedMapIterator3 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ?>) orderedMapIterator2);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<SQLTransientConnectionException> onePredicate0 = new OnePredicate<SQLTransientConnectionException>(predicateArray0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator3, (Predicate<? super SQLTransientConnectionException>) onePredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) resettableListIterator0, (Iterator<? extends SQLTimeoutException>) resettableListIterator0, (Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) linkedList0);
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(stack0);
      SQLException sQLException0 = new SQLException();
      Iterator<ArrayList<Object>> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<ArrayList<Object>>) null, 3829L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Stack<ArrayList<Object>> stack0 = new Stack<ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      stack0.add(arrayList0);
      LoopingListIterator<ArrayList<Object>> loopingListIterator0 = new LoopingListIterator<ArrayList<Object>>(stack0);
      IteratorUtils.skippingIterator((Iterator<ArrayList<Object>>) loopingListIterator0, 0L);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("f#%b*`17 SX<E}X", "wJ.-", (-1537));
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      arrayList0.containsAll(stack0);
      IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      SQLWarning sQLWarning0 = new SQLWarning("wJ.-", "f#%b*`17 SX<E}X", (-347));
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>(sQLWarning0);
      SQLWarning sQLWarning1 = IteratorUtils.get((Iterator<SQLWarning>) singletonIterator0, 0);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException>(orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException>(abstractOrderedMapIteratorDecorator0);
      Stack<SQLClientInfoException> stack1 = new Stack<SQLClientInfoException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) stack1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("wJ.-", sQLWarning1);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator1 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) singletonIterator1);
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) arrayList0);
      IteratorUtils.emptyOrderedMapIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("K");
      boolean boolean0 = IteratorUtils.contains((Iterator<ComparatorPredicate.Criterion>) null, (Object) sQLFeatureNotSupportedException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(stack0);
      IteratorUtils.emptyOrderedMapIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("prefix may not be null");
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("34A&Q\"]\"}^&4z", "prefix may not be null", sQLSyntaxErrorException0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException1);
      OrderedMapIterator<SQLTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      OrderedMapIterator<SQLTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      Properties properties0 = new Properties();
      IteratorUtils.getIterator((Object) null);
      BoundedIterator<SQLException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLException>) orderedMapIterator1, 0L, 19L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Stack<ArrayList<Object>> stack0 = new Stack<ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      stack0.add(arrayList0);
      LoopingListIterator<ArrayList<Object>> loopingListIterator0 = new LoopingListIterator<ArrayList<Object>>(stack0);
      IteratorUtils.skippingIterator((Iterator<ArrayList<Object>>) loopingListIterator0, 0L);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("f#%b*`17 SX<E}X", "wJ.-", (-1537));
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      SQLWarning sQLWarning0 = new SQLWarning("wJ.-", "f#%b*`17 SX<E}X", (-347));
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>(sQLWarning0);
      SQLWarning sQLWarning1 = IteratorUtils.get((Iterator<SQLWarning>) singletonIterator0, 0);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException>(orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException>(abstractOrderedMapIteratorDecorator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[7];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("wJ.-", "wJ.-", sQLTimeoutException0);
      sQLNonTransientExceptionArray0[0] = sQLNonTransientException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("wJ.-");
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLDataException sQLDataException0 = new SQLDataException("f#%b*`17 SX<E}X", "f#%b*`17 SX<E}X", 2183, sQLTimeoutException0);
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLDataException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("wJ.-", "wJ.-", (-347));
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException();
      sQLNonTransientExceptionArray0[4] = sQLNonTransientException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.iterators.LazyIteratorChain", sQLWarning1);
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("f#%b*`17 SX<E}X", sQLNonTransientExceptionArray0[1]);
      sQLNonTransientExceptionArray0[6] = (SQLNonTransientException) sQLNonTransientConnectionException1;
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<SQLTimeoutException> comparator1 = (Comparator<SQLTimeoutException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(stack0);
      IteratorUtils.emptyOrderedMapIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      IteratorUtils.singletonIterator(sQLTimeoutException0);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTransientConnectionException>) null, (Predicate<? super SQLTransientConnectionException>) instanceofPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OrderedMapIterator<DataTruncation, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, SQLDataException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends SQLDataException>) orderedMapIterator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLWarning, ?>) orderedMapIterator1);
      OrderedMapIterator<SQLTransientConnectionException, Iterator<Class<Object>>> orderedMapIterator2 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransientConnectionException, Object> orderedMapIterator3 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ?>) orderedMapIterator2);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<SQLTransientConnectionException> onePredicate0 = new OnePredicate<SQLTransientConnectionException>(predicateArray0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator3, (Predicate<? super SQLTransientConnectionException>) onePredicate0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) "DY4CR`bl(H;9");
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate1);
      OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      Properties properties0 = new Properties();
      ListIterator<Properties> listIterator1 = IteratorUtils.singletonListIterator(properties0);
      ListIterator<Properties> listIterator2 = IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) listIterator1, (Predicate<? super Properties>) nullIsTruePredicate0);
      assertFalse(listIterator2.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OrderedMapIterator<SQLTransientException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLTransientException, SQLDataException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientException, SQLDataException>) orderedMapIterator0);
      IteratorUtils.size(mapIterator0);
      PriorityQueue<DataTruncation>[] priorityQueueArray0 = (PriorityQueue<DataTruncation>[]) Array.newInstance(PriorityQueue.class, 3);
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<DataTruncation> priorityQueue1 = new PriorityQueue<DataTruncation>();
      priorityQueueArray0[1] = priorityQueue1;
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("]");
      String string0 = "";
      Transformer<String, String> transformer0 = NOPTransformer.nopTransformer();
      IteratorUtils.toString((Iterator<String>) singletonListIterator0, (Transformer<? super String, String>) transformer0, "", "-gaL&zo;t", "");
      OrderedMapIterator<SQLTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, SQLNonTransientConnectionException>(orderedMapIterator1);
      IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        Locale.Category.valueOf("-gaL&zo;t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.Locale.Category.-gaL&zo;t
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      singletonListIterator0.reset();
      IteratorUtils.toString((Iterator<String>) singletonListIterator0, (Transformer<? super String, String>) constantTransformer0, "u-j^T6HH5usYHT3B", "KQV]ZOGo95`p3hD", "u-j^T6HH5usYHT3B");
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KQV]ZOGo95`p3hDu-j^T6HH5usYHT3B");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLWarning>[] iteratorArray0 = (Iterator<SQLWarning>[]) Array.newInstance(Iterator.class, 2);
      Hashtable<SQLWarning, SQLException> hashtable0 = new Hashtable<SQLWarning, SQLException>();
      EntrySetMapIterator<SQLWarning, SQLException> entrySetMapIterator0 = new EntrySetMapIterator<SQLWarning, SQLException>(hashtable0);
      iteratorArray0[0] = (Iterator<SQLWarning>) entrySetMapIterator0;
      MapIterator<SQLWarning, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[1] = (Iterator<SQLWarning>) mapIterator0;
      Iterator<SQLWarning> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) null, (Iterator<? extends SQLWarning>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransactionRollbackException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransactionRollbackException, SQLDataException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransactionRollbackException, ? extends SQLDataException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLDataException>(orderedMapIterator1);
      MapIterator<SQLTransientException, SQLDataException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTransientException, ? extends SQLDataException>) abstractOrderedMapIteratorDecorator0);
      MapIterator<SQLTransientException, SQLDataException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.size(mapIterator1);
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      PriorityQueue<DataTruncation> priorityQueue1 = new PriorityQueue<DataTruncation>();
      PriorityQueue<DataTruncation> priorityQueue2 = new PriorityQueue<DataTruncation>();
      PriorityQueue<DataTruncation>[] priorityQueueArray0 = (PriorityQueue<DataTruncation>[]) Array.newInstance(PriorityQueue.class, 7);
      priorityQueueArray0[0] = priorityQueue1;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<DataTruncation> priorityQueue3 = new PriorityQueue<DataTruncation>(comparator0);
      priorityQueueArray0[1] = priorityQueue3;
      priorityQueueArray0[2] = priorityQueue1;
      priorityQueueArray0[3] = priorityQueue2;
      priorityQueueArray0[4] = priorityQueue0;
      priorityQueueArray0[5] = priorityQueue2;
      priorityQueueArray0[6] = priorityQueue2;
      ObjectArrayIterator<PriorityQueue<DataTruncation>> objectArrayIterator0 = new ObjectArrayIterator<PriorityQueue<DataTruncation>>(priorityQueueArray0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) comparator1, (Iterator<? extends SQLWarning>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<SQLWarning, SQLException> hashMap0 = new HashMap<SQLWarning, SQLException>();
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException>(orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException>(orderedMapIterator0);
      OrderedMapIterator<SQLDataException, Integer> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, Integer> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends Integer>) orderedMapIterator1);
      AbstractOrderedMapIteratorDecorator<SQLDataException, Integer> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLDataException, Integer>(orderedMapIterator2);
      Hashtable<SQLDataException, SQLNonTransientException> hashtable0 = new Hashtable<SQLDataException, SQLNonTransientException>();
      EntrySetMapIterator<SQLDataException, SQLNonTransientException> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, SQLNonTransientException>(hashtable0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) abstractOrderedMapIteratorDecorator1, (Iterator<? extends SQLDataException>) entrySetMapIterator0);
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) stack0);
      Consumer<SQLException> consumer0 = (Consumer<SQLException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractOrderedMapIteratorDecorator0.forEachRemaining(consumer0);
      BoundedIterator<SQLException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLException>) abstractOrderedMapIteratorDecorator0, 19L, 1641L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.fillInStackTrace();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("O\"x1w(~FEzE");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      ObjectArrayIterator<IIOMetadataNode> objectArrayIterator0 = new ObjectArrayIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) objectArrayIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0, (Collection<? super IIOMetadataNode>) vector0);
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) objectArrayIterator0, (Iterator<? extends IIOMetadataNode>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Predicate must not be null");
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      Transformer<SQLException, SQLTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("T(*Q*");
      IteratorUtils.transformedIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLTransientException>) transformer0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[2];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLSyntaxErrorException1);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException((String) null, "org.apache.commons.collections4.iterators.PushbackIterator", 19, sQLSyntaxErrorException1);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) null);
      Integer integer0 = new Integer((-712));
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Stack<ArrayList<Object>> stack0 = new Stack<ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      stack0.add(arrayList0);
      LoopingListIterator<ArrayList<Object>> loopingListIterator0 = new LoopingListIterator<ArrayList<Object>>(stack0);
      IteratorUtils.skippingIterator((Iterator<ArrayList<Object>>) loopingListIterator0, 0L);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("f#%b*`17 SX<E}X", "wJ.-", (-1537));
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      DataTruncation dataTruncation0 = new DataTruncation((-1537), true, true, (-3167), (-3167));
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) iterator0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) arrayDeque0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("ik8&a=;)", "f#%b*`17 SX<E}X", (-347));
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0, (-1537), (-3167));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 359;
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 7);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      HashMap<SQLWarning, SQLException> hashMap0 = new HashMap<SQLWarning, SQLException>();
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      PriorityQueue<DataTruncation> priorityQueue1 = new PriorityQueue<DataTruncation>();
      PriorityQueue<DataTruncation> priorityQueue2 = new PriorityQueue<DataTruncation>();
      PriorityQueue<DataTruncation>[] priorityQueueArray0 = (PriorityQueue<DataTruncation>[]) Array.newInstance(PriorityQueue.class, 4);
      priorityQueueArray0[0] = priorityQueue2;
      priorityQueueArray0[1] = priorityQueue0;
      priorityQueueArray0[2] = priorityQueue1;
      priorityQueueArray0[3] = priorityQueue0;
      ObjectArrayIterator<PriorityQueue<DataTruncation>> objectArrayIterator0 = new ObjectArrayIterator<PriorityQueue<DataTruncation>>(priorityQueueArray0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion1 = ComparatorPredicate.Criterion.LESS;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) comparatorPredicate_Criterion0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion1);
      IteratorUtils.matchesAll((Iterator<PriorityQueue<DataTruncation>>) objectArrayIterator0, (Predicate<? super PriorityQueue<DataTruncation>>) predicate0);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 7);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      OrderedMapIterator<SQLTransientException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLTransientException, SQLDataException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientException, SQLDataException>) orderedMapIterator0);
      IteratorUtils.size(mapIterator0);
      PriorityQueue<DataTruncation>[] priorityQueueArray0 = (PriorityQueue<DataTruncation>[]) Array.newInstance(PriorityQueue.class, 3);
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      priorityQueueArray0[0] = priorityQueue0;
      int int0 = 2366;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("rP@[(MN>yNU", "rP@[(MN>yNU", 2366);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      SQLWarning sQLWarning0 = new SQLWarning("remove() can only be called once after next()", "", 0);
      SQLWarning sQLWarning1 = new SQLWarning("remove() can only be called once after next()", sQLWarning0);
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>(sQLWarning1);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLWarning>) singletonIterator0, 31);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 30
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      HashMap<SQLWarning, SQLException> hashMap0 = new HashMap<SQLWarning, SQLException>();
      EntrySetMapIterator<SQLWarning, SQLException> entrySetMapIterator0 = new EntrySetMapIterator<SQLWarning, SQLException>(hashMap0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      String string0 = "delimiter may not be null";
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<String>) singletonListIterator0, (Transformer<? super String, String>) null, "delimiter may not be null", "4Ix*4#\" a;|@o eoTK", "org.apache.commons.collections4.functors.InvokerTransformer");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException>(orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException>(abstractOrderedMapIteratorDecorator0);
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException>(abstractOrderedMapIteratorDecorator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractMapIteratorDecorator0.forEachRemaining(consumer0);
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("l^9qYOy.1 ZdYi?[");
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("aDa_");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<String>) singletonListIterator0, (Transformer<? super String, String>) transformer0, "f<nnj+|kEr:&Jk", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(stack0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      SQLException sQLException0 = new SQLException();
      stack0.toArray(dataTruncationArray0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<String>) loopingListIterator0, (Transformer<? super String, String>) transformer0, "_yOz", (String) null, "tL");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MapIterator<Integer, LinkedHashSet<SQLInvalidAuthorizationSpecException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends Integer>) mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(linkedList0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) linkedList0);
      Class<DataTruncation> class0 = DataTruncation.class;
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) resettableIterator0, class0);
      Hashtable<SQLSyntaxErrorException, DataTruncation> hashtable0 = null;
      try {
        hashtable0 = new Hashtable<SQLSyntaxErrorException, DataTruncation>((-1118), (-1.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1118
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransactionRollbackException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransactionRollbackException, SQLDataException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransactionRollbackException, ? extends SQLDataException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLDataException>(orderedMapIterator1);
      MapIterator<SQLTransientException, SQLDataException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTransientException, ? extends SQLDataException>) abstractOrderedMapIteratorDecorator0);
      MapIterator<SQLTransientException, SQLDataException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.size(mapIterator1);
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      PriorityQueue<DataTruncation> priorityQueue1 = new PriorityQueue<DataTruncation>();
      PriorityQueue<DataTruncation> priorityQueue2 = new PriorityQueue<DataTruncation>();
      PriorityQueue<DataTruncation>[] priorityQueueArray0 = (PriorityQueue<DataTruncation>[]) Array.newInstance(PriorityQueue.class, 7);
      priorityQueueArray0[0] = priorityQueue1;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<DataTruncation> priorityQueue3 = new PriorityQueue<DataTruncation>(comparator0);
      priorityQueueArray0[1] = priorityQueue3;
      priorityQueueArray0[2] = priorityQueue1;
      priorityQueueArray0[3] = priorityQueue2;
      priorityQueueArray0[4] = priorityQueue0;
      priorityQueueArray0[5] = priorityQueue2;
      priorityQueueArray0[6] = priorityQueue2;
      ObjectArrayIterator<PriorityQueue<DataTruncation>> objectArrayIterator0 = new ObjectArrayIterator<PriorityQueue<DataTruncation>>(priorityQueueArray0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) orderedMapIterator0, comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IteratorUtils.matchesAll((Iterator<PriorityQueue<DataTruncation>>) objectArrayIterator0, (Predicate<? super PriorityQueue<DataTruncation>>) predicate0);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(linkedList0);
      Class<DataTruncation> class0 = DataTruncation.class;
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) reverseListIterator0, class0);
      Hashtable<SQLSyntaxErrorException, DataTruncation> hashtable0 = null;
      try {
        hashtable0 = new Hashtable<SQLSyntaxErrorException, DataTruncation>(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Load: 0.0
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OrderedMapIterator<SQLTransientException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLTransientException, SQLDataException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientException, SQLDataException>) orderedMapIterator0);
      int int0 = IteratorUtils.size(mapIterator0);
      assertEquals(0, int0);
      
      PriorityQueue<DataTruncation>[] priorityQueueArray0 = (PriorityQueue<DataTruncation>[]) Array.newInstance(PriorityQueue.class, 3);
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<DataTruncation> priorityQueue1 = new PriorityQueue<DataTruncation>();
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<DataTruncation> priorityQueue2 = new PriorityQueue<DataTruncation>();
      priorityQueueArray0[2] = priorityQueue2;
      ObjectArrayIterator<PriorityQueue<DataTruncation>> objectArrayIterator0 = new ObjectArrayIterator<PriorityQueue<DataTruncation>>(priorityQueueArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1267).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) priorityQueue0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<PriorityQueue<DataTruncation>>) objectArrayIterator0, (Predicate<? super PriorityQueue<DataTruncation>>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "QL/0}}>4";
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      PriorityQueue<DataTruncation> priorityQueue1 = new PriorityQueue<DataTruncation>();
      DataTruncation dataTruncation0 = new DataTruncation(100, true, false, (-999), (-999));
      DataTruncation dataTruncation1 = new DataTruncation(1, true, true, 958, (-788), dataTruncation0);
      priorityQueue1.add(dataTruncation1);
      PriorityQueue<DataTruncation> priorityQueue2 = new PriorityQueue<DataTruncation>();
      PriorityQueue<DataTruncation>[] priorityQueueArray0 = (PriorityQueue<DataTruncation>[]) Array.newInstance(PriorityQueue.class, 6);
      priorityQueueArray0[0] = priorityQueue2;
      priorityQueueArray0[1] = priorityQueue0;
      priorityQueueArray0[2] = priorityQueue1;
      priorityQueueArray0[3] = priorityQueue1;
      priorityQueueArray0[4] = priorityQueue2;
      priorityQueueArray0[5] = priorityQueue0;
      ObjectArrayIterator<PriorityQueue<DataTruncation>> objectArrayIterator0 = new ObjectArrayIterator<PriorityQueue<DataTruncation>>(priorityQueueArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      IteratorUtils.matchesAll((Iterator<PriorityQueue<DataTruncation>>) objectArrayIterator0, (Predicate<? super PriorityQueue<DataTruncation>>) uniquePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLWarning>) null, 959);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Comparator<SQLFeatureNotSupportedException> comparator0 = (Comparator<SQLFeatureNotSupportedException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 7);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) listIterator0;
      ListIterator<SQLFeatureNotSupportedException> listIterator1 = EmptyListIterator.emptyListIterator();
      iteratorArray0[1] = (Iterator<SQLFeatureNotSupportedException>) listIterator1;
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) iteratorArray0[1], (Iterator<? extends SQLFeatureNotSupportedException>) iteratorArray0[0], (Iterator<? extends SQLFeatureNotSupportedException>) iteratorArray0[0]);
      iteratorArray0[2] = (Iterator<SQLFeatureNotSupportedException>) zippingIterator0;
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[8];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[7] = sQLFeatureNotSupportedException0;
      int int0 = (-3080);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, 0, (-3080));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(stack0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      SQLException sQLException0 = new SQLException();
      DataTruncation dataTruncation0 = new DataTruncation(2689, true, true, 2689, 2689, sQLException0);
      dataTruncationArray0[0] = dataTruncation0;
      SQLException sQLException1 = new SQLException();
      DataTruncation dataTruncation1 = new DataTruncation(93, true, true, (-541), (-541));
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) iterator0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) arrayDeque0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) loopingListIterator0, (-541), (-541));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) null, (Collection<? super Locale.Category>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(stack0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      DataTruncation dataTruncation0 = new DataTruncation(1079, true, true, (-2895), 1663);
      stack0.toArray(dataTruncationArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("Predicate must not be null");
      IteratorUtils.toString((Iterator<String>) loopingListIterator0, (Transformer<? super String, String>) transformer0, "Predicate must not be null", "Predicate must not be null", "Array class must not be null");
      OrderedMapIterator<SQLTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0);
      IteratorUtils.getIterator("Predicate must not be nullArray class must not be null");
      OrderedMapIterator<SQLClientInfoException, Properties> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, Properties>) orderedMapIterator1);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, Properties>) orderedMapIterator1);
      Enumeration<SQLTimeoutException> enumeration0 = (Enumeration<SQLTimeoutException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0);
      Enumeration<SQLTimeoutException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration1, (Collection<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("QL/0}}>4", "QL/0}}>4");
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>(sQLWarning0);
      IteratorUtils.get((Iterator<SQLWarning>) singletonIterator0, 0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) stack0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0, (Collection<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Predicate must not be null");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      Transformer<SQLException, SQLTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("T(*Q*");
      IteratorUtils.transformedIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLTransientException>) transformer0);
      String string0 = "XpClY\\u";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("T(*Q*", string0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLIntegrityConstraintViolationException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) iterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      OrderedMapIterator<SQLTransientException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLTransientException, SQLDataException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientException, SQLDataException>) orderedMapIterator0);
      IteratorUtils.size(mapIterator0);
      PriorityQueue<DataTruncation>[] priorityQueueArray0 = (PriorityQueue<DataTruncation>[]) Array.newInstance(PriorityQueue.class, 3);
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<DataTruncation> priorityQueue1 = new PriorityQueue<DataTruncation>();
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<DataTruncation> priorityQueue2 = new PriorityQueue<DataTruncation>();
      priorityQueueArray0[2] = priorityQueue2;
      ObjectArrayIterator<PriorityQueue<DataTruncation>> objectArrayIterator0 = new ObjectArrayIterator<PriorityQueue<DataTruncation>>(priorityQueueArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Predicate must not be null");
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      OrderedMapIterator<SQLTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends SQLNonTransientConnectionException>) orderedMapIterator1);
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      OrderedMapIterator<SQLClientInfoException, Properties> orderedMapIterator2 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, Properties> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, Properties>) orderedMapIterator2);
      MapIterator<SQLClientInfoException, Properties> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      MapIterator<SQLClientInfoException, Properties> mapIterator2 = IteratorUtils.unmodifiableMapIterator(mapIterator1);
      assertSame(mapIterator2, mapIterator1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(stack0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      SQLException sQLException0 = new SQLException();
      DataTruncation dataTruncation0 = new DataTruncation((-541), true, true, 1813, 1, sQLException0);
      DataTruncation dataTruncation1 = new DataTruncation(93, false, true, 93, (-1441));
      stack0.toArray(dataTruncationArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("b3[#l-Jf");
      String string0 = IteratorUtils.toString((Iterator<String>) loopingListIterator0, (Transformer<? super String, String>) transformer0, "", "KS7(`|%+yK6!oo5<?}V", "");
      assertEquals("KS7(`|%+yK6!oo5<?}V", string0);
      
      OrderedMapIterator<SQLTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0);
      Integer integer0 = new Integer(128);
      IteratorUtils.getIterator("KS7(`|%+yK6!oo5<?}V");
      OrderedMapIterator<SQLClientInfoException, Properties> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, Properties>) orderedMapIterator1);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, Properties>) orderedMapIterator1);
      boolean boolean0 = IteratorUtils.isEmpty(loopingListIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      DataTruncation dataTruncation0 = new DataTruncation(1604, true, false, 0, 1604, sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation1 = new DataTruncation(0, true, true, (-939), (-939));
      Stack<String> stack0 = new Stack<String>();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[6];
      dataTruncationArray0[0] = dataTruncation1;
      dataTruncationArray0[1] = dataTruncation1;
      dataTruncationArray0[2] = dataTruncation0;
      dataTruncationArray0[3] = dataTruncation1;
      dataTruncationArray0[4] = dataTruncation0;
      dataTruncationArray0[5] = dataTruncation1;
      stack0.toArray(dataTruncationArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("Cw3`CGYaIT3v");
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<String>) singletonListIterator0, (Transformer<? super String, String>) transformer0, "sQ`{scn[?2aa}Q", "", "Entry does not exist: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Cw3`CGYaIT3v' on 'class java.lang.String' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Stack<ArrayList<Object>> stack0 = new Stack<ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      stack0.add(arrayList0);
      LoopingListIterator<ArrayList<Object>> loopingListIterator0 = new LoopingListIterator<ArrayList<Object>>(stack0);
      SkippingIterator<ArrayList<Object>> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<ArrayList<Object>>) loopingListIterator0, 0L);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      CloneTransformer.cloneTransformer();
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) vector0);
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      SingletonIterator<PriorityQueue<DataTruncation>> singletonIterator0 = new SingletonIterator<PriorityQueue<DataTruncation>>(priorityQueue0);
      IteratorUtils.matchesAll((Iterator<PriorityQueue<DataTruncation>>) singletonIterator0, (Predicate<? super PriorityQueue<DataTruncation>>) predicate0);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(linkedList0);
      LinkedList<DataTruncation> linkedList1 = new LinkedList<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) linkedList1);
      Class<DataTruncation> class0 = DataTruncation.class;
      IteratorUtils.toArray((Iterator<? extends DataTruncation>) resettableIterator0, class0);
      Hashtable<SQLSyntaxErrorException, DataTruncation> hashtable0 = new Hashtable<SQLSyntaxErrorException, DataTruncation>();
      Enumeration<SQLSyntaxErrorException> enumeration0 = hashtable0.keys();
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableListIterator0, 2208);
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) list0);
      IteratorUtils.emptyOrderedMapIterator();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("/S:rp9Xj_!xBO", "", 2208, (Throwable) null);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException((String) null, (String) null);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 3023);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("org.apache.commons.collections4.iterators.EmptyOrderedIterator", "org.apache.commons.collections4.iterators.EmptyOrderedIterator", 359);
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>(sQLWarning0);
      IteratorUtils.get((Iterator<SQLWarning>) singletonIterator0, 0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      ResettableIterator<PriorityQueue<DataTruncation>> resettableIterator0 = IteratorUtils.singletonIterator(priorityQueue0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<PriorityQueue<DataTruncation>>) resettableIterator0, (Predicate<? super PriorityQueue<DataTruncation>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("QL/0}}>4", "QL/0}}>4", 359);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      IteratorUtils.matchesAll((Iterator<PriorityQueue<DataTruncation>>) null, (Predicate<? super PriorityQueue<DataTruncation>>) predicate0);
      Properties[] propertiesArray0 = new Properties[1];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0, (-1913), (-1222));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("org.apache.commons.collections4.iterators.EmptyOrderedIterator", "org.apache.commons.collections4.iterators.EmptyOrderedIterator", 352);
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>(sQLWarning0);
      IteratorUtils.get((Iterator<SQLWarning>) singletonIterator0, 0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      OrderedIterator<PriorityQueue<DataTruncation>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<PriorityQueue<DataTruncation>>) orderedIterator0, (Predicate<? super PriorityQueue<DataTruncation>>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      OrderedMapIterator<SQLTransientException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLTransientException, SQLDataException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientException, SQLDataException>) orderedMapIterator0);
      IteratorUtils.size(mapIterator0);
      PriorityQueue<DataTruncation>[] priorityQueueArray0 = (PriorityQueue<DataTruncation>[]) Array.newInstance(PriorityQueue.class, 3);
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<DataTruncation> priorityQueue1 = new PriorityQueue<DataTruncation>();
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<DataTruncation> priorityQueue2 = new PriorityQueue<DataTruncation>();
      priorityQueueArray0[2] = priorityQueue2;
      ObjectArrayIterator<PriorityQueue<DataTruncation>> objectArrayIterator0 = new ObjectArrayIterator<PriorityQueue<DataTruncation>>(priorityQueueArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) priorityQueue0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<PriorityQueue<DataTruncation>>) objectArrayIterator0, (Predicate<? super PriorityQueue<DataTruncation>>) predicate0);
      assertFalse(objectArrayIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Iterator<SQLTimeoutException> iterator0 = null;
      Comparator<SQLTransientException> comparator0 = (Comparator<SQLTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Predicate must not be null");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      InvokerTransformer.invokerTransformer("T(*Q*");
      OrderedMapIterator<SQLClientInfoException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, Properties>) orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, Properties>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableListIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(stack0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      SQLException sQLException0 = new SQLException();
      DataTruncation dataTruncation0 = new DataTruncation(2689, true, true, 2689, 2689, sQLException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1, true, true, (-541), (-2895));
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-541), true, true, 0, 1604, dataTruncation1);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(2689, true, true, 0, (-939));
      dataTruncationArray0[3] = dataTruncation3;
      stack0.toArray(dataTruncationArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      IteratorUtils.toString((Iterator<String>) loopingListIterator0, (Transformer<? super String, String>) transformer0, "", "", "");
      OrderedMapIterator<SQLTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0);
      IteratorUtils.getIterator("");
      OrderedMapIterator<SQLClientInfoException, Properties> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, Properties> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, Properties>) orderedMapIterator1);
      MapIterator<SQLClientInfoException, Properties> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, Properties>) orderedMapIterator1);
      assertNotSame(mapIterator1, mapIterator0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Stack<ArrayList<Object>> stack0 = new Stack<ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      stack0.add(arrayList0);
      LoopingListIterator<ArrayList<Object>> loopingListIterator0 = new LoopingListIterator<ArrayList<Object>>(stack0);
      IteratorUtils.skippingIterator((Iterator<ArrayList<Object>>) loopingListIterator0, 0L);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("wJ.-", "", (-1368));
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[8];
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException0;
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) singletonIterator0, (Iterator<? extends Properties>) singletonIterator0, (Iterator<? extends Properties>) singletonIterator0);
      IteratorUtils.toList((Iterator<? extends Properties>) singletonIterator0, 671);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException>(orderedMapIterator0);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTransientConnectionException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException>(abstractOrderedMapIteratorDecorator0);
      abstractOrderedMapIteratorDecorator0.hasNext();
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException>(orderedMapIterator1);
      Stack<SQLClientInfoException> stack1 = new Stack<SQLClientInfoException>();
      ArrayDeque<SQLClientInfoException> arrayDeque0 = new ArrayDeque<SQLClientInfoException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) arrayDeque0);
      Enumeration<SQLTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) arrayList0);
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) vector0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.fillInStackTrace();
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Stack<ArrayList<Object>> stack0 = new Stack<ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      stack0.add(arrayList0);
      LoopingListIterator<ArrayList<Object>> loopingListIterator0 = new LoopingListIterator<ArrayList<Object>>(stack0);
      IteratorUtils.skippingIterator((Iterator<ArrayList<Object>>) loopingListIterator0, 0L);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("f#%b*`17 SX<E}X", "wJ.-", (-1537));
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>) singletonIterator0, (Iterator<? extends Properties>) singletonIterator0, (Iterator<? extends Properties>) singletonIterator0);
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) zippingIterator0, 93);
      ReverseListIterator<Properties> reverseListIterator0 = new ReverseListIterator<Properties>(list0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      predicateArray0[0] = (Predicate<Object>) orPredicate0;
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>(1);
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) orPredicate0);
      predicateArray0[2] = predicate1;
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(orPredicate0);
      predicateArray0[3] = (Predicate<Object>) nullIsFalsePredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Stack<ArrayList<Object>> stack0 = new Stack<ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      stack0.add(arrayList0);
      LoopingListIterator<ArrayList<Object>> loopingListIterator0 = new LoopingListIterator<ArrayList<Object>>(stack0);
      IteratorUtils.skippingIterator((Iterator<ArrayList<Object>>) loopingListIterator0, 0L);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      Properties properties0 = new Properties();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[3];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException0;
      ObjectArrayIterator<SQLNonTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      ListIteratorWrapper<SQLNonTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLNonTransientConnectionException>(objectArrayIterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientConnectionException>) listIteratorWrapper0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException>(orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException>(abstractOrderedMapIteratorDecorator0);
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException>(abstractOrderedMapIteratorDecorator0);
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException> abstractMapIteratorDecorator1 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException>(abstractMapIteratorDecorator0);
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) stack0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLException>) resettableIterator0, 1641L, 0L);
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<SQLDataException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException>(orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException>(abstractOrderedMapIteratorDecorator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractMapIteratorDecorator0.forEachRemaining(consumer0);
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientConnectionException>) abstractMapIteratorDecorator0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MapIterator<Integer, LinkedHashSet<SQLInvalidAuthorizationSpecException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends Integer>) mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      MapIterator<DataTruncation, ArrayDeque<SQLSyntaxErrorException>> mapIterator1 = IteratorUtils.emptyMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) mapIterator1, (Iterator<? extends DataTruncation>) mapIterator1);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) resettableListIterator0, (Iterator<? extends SQLTimeoutException>) resettableListIterator0, (Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>) zippingIterator0, (Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) arrayDeque0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLRecoverableException, LinkedList<SQLRecoverableException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(stack0);
      HashMap<SQLWarning, SQLException> hashMap0 = new HashMap<SQLWarning, SQLException>();
      EntrySetMapIterator<SQLWarning, SQLException> entrySetMapIterator0 = new EntrySetMapIterator<SQLWarning, SQLException>(hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLWarning>) entrySetMapIterator0, 2689);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2689
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Stack<ArrayList<Object>> stack0 = new Stack<ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      stack0.add(arrayList0);
      LoopingListIterator<ArrayList<Object>> loopingListIterator0 = new LoopingListIterator<ArrayList<Object>>(stack0);
      IteratorUtils.skippingIterator((Iterator<ArrayList<Object>>) loopingListIterator0, 0L);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("f#%b*`17 SX<E}X", "wJ.-", (-1537));
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) singletonIterator0, (Iterator<? extends Properties>) singletonIterator0, (Iterator<? extends Properties>) singletonIterator0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLRecoverableException, LinkedList<SQLRecoverableException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ArrayDeque<SQLRecoverableException> arrayDeque0 = new ArrayDeque<SQLRecoverableException>();
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLException sQLException0 = new SQLException(mockThrowable0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLException0);
      arrayDeque0.add(sQLRecoverableException0);
      DataTruncation dataTruncation0 = new DataTruncation(100, true, true, 128, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation0, (-677), 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MapIterator<Integer, LinkedHashSet<SQLInvalidAuthorizationSpecException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends Integer>) mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      int int0 = 707;
      int[] intArray0 = new int[0];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Iterator must not be null", "Iterator must not be null", 1796);
      SQLException sQLException0 = new SQLException("", "Iterator must not be null", sQLRecoverableException0);
      sQLRecoverableException0.getLocalizedMessage();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "Iterator must not be null", intArray0, sQLException0);
      SQLDataException sQLDataException0 = new SQLDataException("", batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLDataException0, 707, 707);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(stack0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      SQLException sQLException0 = new SQLException();
      DataTruncation dataTruncation0 = new DataTruncation(2689, true, true, 2689, 2689, sQLException0);
      dataTruncationArray0[0] = dataTruncation0;
      int int0 = (-2895);
      DataTruncation dataTruncation1 = new DataTruncation(1, true, true, (-541), (-2895));
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-541), true, true, 0, 1604, dataTruncation1);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(2689, true, true, 0, (-939));
      dataTruncationArray0[3] = dataTruncation3;
      stack0.toArray(dataTruncationArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      IteratorUtils.toString((Iterator<String>) loopingListIterator0, (Transformer<? super String, String>) transformer0, "", "", "");
      OrderedMapIterator<SQLTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator1);
      IteratorUtils.getIterator(orderedMapIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "There are no elements for this iterator to Foop on", true);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) stringTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque0 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      stack0.containsAll(arrayDeque0);
      IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) stack0);
      OrderedMapIterator<SQLRecoverableException, LinkedList<SQLRecoverableException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLRecoverableException, LinkedList<SQLRecoverableException>>) orderedMapIterator0);
      SQLDataException sQLDataException0 = new SQLDataException("Criterion must not be null.", "Criterion must not be null.", 916);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Predicate must not be null", "N=hRX[~");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      Transformer<SQLException, SQLTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("T(*Q*");
      Iterator<SQLTransientException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLTransientException>) transformer0);
      assertNotNull(iterator0);
      
      OrderedMapIterator<SQLTransactionRollbackException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransactionRollbackException, SQLNonTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransactionRollbackException, ? extends SQLNonTransientException>) orderedMapIterator0);
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator1);
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      DataTruncation dataTruncation0 = new DataTruncation(19, true, true, 1113, 19);
      linkedList0.addLast(dataTruncation0);
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(linkedList0);
      DataTruncation dataTruncation1 = new DataTruncation((-1918), true, true, 19, (-5003));
      // Undeclared exception!
      try { 
        loopingListIterator0.set(dataTruncation1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[2];
      SQLException sQLException0 = new SQLException("", "", 0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("e`9S]Mx4!A^J6ObG>wA", sQLException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, 0, sQLRecoverableException0);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("2[oR|CNYq$Iqim40X", "");
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLSyntaxErrorException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, 0, (-663));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      PriorityQueue<DataTruncation> priorityQueue1 = new PriorityQueue<DataTruncation>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      int int0 = 1893;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLSyntaxErrorException[]) null, 785, 1893);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      ResettableListIterator<Integer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<Integer> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) resettableListIterator0);
      Iterator<Integer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Integer>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
      
      ArrayList<IIOMetadataNode>[] arrayListArray0 = (ArrayList<IIOMetadataNode>[]) Array.newInstance(ArrayList.class, 5);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      arrayListArray0[0] = arrayList0;
      ArrayList<IIOMetadataNode> arrayList1 = new ArrayList<IIOMetadataNode>(0);
      arrayListArray0[1] = arrayList1;
      ArrayList<IIOMetadataNode> arrayList2 = new ArrayList<IIOMetadataNode>();
      arrayListArray0[2] = arrayList2;
      ArrayList<IIOMetadataNode> arrayList3 = new ArrayList<IIOMetadataNode>();
      arrayListArray0[3] = arrayList3;
      ArrayList<IIOMetadataNode> arrayList4 = new ArrayList<IIOMetadataNode>();
      arrayListArray0[4] = arrayList4;
      ResettableListIterator<ArrayList<IIOMetadataNode>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayListArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[8];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("D_xI3orzS18", "The current criterion '");
      sQLExceptionArray0[0] = (SQLException) sQLNonTransientConnectionException0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLNonTransientConnectionException0);
      sQLExceptionArray0[1] = (SQLException) sQLNonTransientException0;
      SQLDataException sQLDataException0 = new SQLDataException("D_xI3orzS18", sQLNonTransientConnectionException0);
      sQLExceptionArray0[2] = (SQLException) sQLDataException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("The current criterion '", "The current criterion '", (-3492), sQLDataException0);
      sQLExceptionArray0[3] = (SQLException) sQLTransactionRollbackException0;
      SQLException sQLException0 = new SQLException();
      sQLExceptionArray0[4] = sQLException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLException0);
      sQLExceptionArray0[5] = (SQLException) sQLTimeoutException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("The current criterion '", "The current criterion '", sQLExceptionArray0[3]);
      sQLExceptionArray0[6] = (SQLException) sQLFeatureNotSupportedException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("");
      sQLExceptionArray0[7] = (SQLException) sQLTimeoutException1;
      ObjectArrayListIterator<SQLException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLException>(sQLExceptionArray0);
      int int0 = IteratorUtils.size(objectArrayListIterator0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      List<SQLDataException> list0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(stack0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      SQLException sQLException0 = new SQLException();
      DataTruncation dataTruncation0 = new DataTruncation(2689, true, true, 2689, 2689, sQLException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1, true, true, (-541), (-2895));
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-541), true, true, 0, 1604, dataTruncation1);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(2689, true, true, 0, (-939));
      dataTruncationArray0[3] = dataTruncation3;
      stack0.toArray(dataTruncationArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      IteratorUtils.toString((Iterator<String>) loopingListIterator0, (Transformer<? super String, String>) transformer0, "", "", "");
      OrderedMapIterator<SQLTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientConnectionException, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator1);
      IteratorUtils.getIterator(orderedMapIterator0);
      OrderedMapIterator<SQLClientInfoException, Properties> orderedMapIterator2 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, Properties> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, Properties>) orderedMapIterator2);
      MapIterator<SQLClientInfoException, Properties> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertSame(mapIterator1, mapIterator0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ArrayDeque<SQLRecoverableException> arrayDeque0 = new ArrayDeque<SQLRecoverableException>();
      IteratorUtils.singletonIterator(arrayDeque0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 707, 707);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLWarning>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLWarning>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ResettableListIterator<ServiceLoader<Object>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends ServiceLoader<Object>>) resettableListIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Stack<ArrayList<Object>> stack0 = new Stack<ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      stack0.add(arrayList0);
      LoopingListIterator<ArrayList<Object>> loopingListIterator0 = new LoopingListIterator<ArrayList<Object>>(stack0);
      IteratorUtils.skippingIterator((Iterator<ArrayList<Object>>) loopingListIterator0, 0L);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("f#%b*`17 SX<E}X", "wJ.-", (-1537));
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("f#%b*`17 SX<E}X", "wJ.-", 2, sQLTimeoutException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("wJ.-");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("g'@9pu+u");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("", "f#%b*`17 SX<E}X", sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException((String) null, "~<Tqq/vE=->bh", 10);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLFeatureNotSupportedException[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>) null, (Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(stack0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      SQLException sQLException0 = new SQLException();
      DataTruncation dataTruncation0 = new DataTruncation(2689, true, true, 2689, 2689, sQLException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1, true, true, (-541), (-2895));
      dataTruncationArray0[1] = dataTruncation1;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(dataTruncation1);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) iterator0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0, (Collection<? super SQLTransientException>) arrayDeque0);
      // Undeclared exception!
      try { 
        UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLRecoverableException, ? extends LinkedList<SQLRecoverableException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Stack<ArrayList<Object>> stack0 = new Stack<ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      stack0.add(arrayList0);
      LoopingListIterator<ArrayList<Object>> loopingListIterator0 = new LoopingListIterator<ArrayList<Object>>(stack0);
      IteratorUtils.skippingIterator((Iterator<ArrayList<Object>>) loopingListIterator0, 0L);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("f#%b*`17 SX<E}X", "wJ.-", (-1537));
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      SQLWarning sQLWarning0 = new SQLWarning("wJ.-", "f#%b*`17 SX<E}X", (-347));
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>(sQLWarning0);
      IteratorUtils.get((Iterator<SQLWarning>) singletonIterator0, 0);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException>(orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransientConnectionException>(abstractOrderedMapIteratorDecorator0);
      Stack<SQLClientInfoException> stack1 = new Stack<SQLClientInfoException>();
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) stack1);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLException>) resettableIterator0, 0L, (long) (-1537));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[5];
      DataTruncation dataTruncation0 = new DataTruncation((-1416), true, true, (-1), (-1416));
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(0, true, true, 0, 2114, dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-1), true, true, 1, 1);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation((-1), true, false, 0, 0, dataTruncation1);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(0, false, true, 0, 0, dataTruncation3);
      dataTruncationArray0[4] = dataTruncation4;
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("EDj(JK|&+\"|uV3^hoOU", "EDj(JK|&+\"|uV3^hoOU");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("EDj(JK|&+\"|uV3^hoOU", "EDj(JK|&+\"|uV3^hoOU", 12, sQLInvalidAuthorizationSpecException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "gzfgTkC[3A", 12, sQLIntegrityConstraintViolationException1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("EDj(JK|&+\"|uV3^hoOU", "X5<,!3OM*n`n_'apFb", 12, sQLTransientConnectionException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("mc]", "!Q", (Throwable) null);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("", "q$RR`-x)V");
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, (-1302), 2070);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) stack0);
      BoundedIterator<SQLException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLException>) resettableIterator0, 1641L, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<ArrayDeque<SQLNonTransientConnectionException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Stack<ArrayList<Object>> stack0 = new Stack<ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      stack0.add(arrayList0);
      LoopingListIterator<ArrayList<Object>> loopingListIterator0 = new LoopingListIterator<ArrayList<Object>>(stack0);
      IteratorUtils.skippingIterator((Iterator<ArrayList<Object>>) loopingListIterator0, 0L);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("f#%b*`17 SX<E}X", "wJ.-", (-1537));
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>) singletonIterator0, (Iterator<? extends Properties>) singletonIterator0, (Iterator<? extends Properties>) singletonIterator0);
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) zippingIterator0, 93);
      ReverseListIterator<Properties> reverseListIterator0 = new ReverseListIterator<Properties>(list0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      predicateArray0[0] = (Predicate<Object>) orPredicate0;
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>(0);
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) orPredicate0);
      predicateArray0[2] = predicate1;
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(orPredicate0);
      predicateArray0[3] = (Predicate<Object>) nullIsFalsePredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[4] = (Predicate<Object>) onePredicate0;
      Predicate<Object> predicate2 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      predicateArray0[5] = predicate2;
      Predicate<Object> predicate3 = EqualPredicate.equalPredicate((Object) sQLTimeoutException0);
      predicateArray0[6] = predicate3;
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicateArray0[0]);
      predicateArray0[7] = (Predicate<Object>) nullIsTruePredicate0;
      Predicate<Object> predicate4 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) reverseListIterator0, (Predicate<? super Properties>) predicate4);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[7];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("P)&[=EtPGN7LNJc$", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.IteratorUtils", "", 2, sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("");
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("P)&[=EtPGN7LNJc$");
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("", "OlMB7", sQLFeatureNotSupportedException3);
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException("~<Tqq/vE=->bh", "org.apache.commons.collections4.IteratorUtils", 2);
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, 31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 3);
      Stack<String> stack0 = new Stack<String>();
      ResettableIterator<String> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends String>) stack0);
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) resettableIterator0);
      iteratorArray0[0] = (Iterator<String>) zippingIterator0;
      LoopingIterator<String> loopingIterator0 = new LoopingIterator<String>(stack0);
      iteratorArray0[1] = (Iterator<String>) loopingIterator0;
      MapIterator<String, TreeSet<StringTokenizer>> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[2] = (Iterator<String>) mapIterator0;
      Iterator<String> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      int int0 = (-7469);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException0, (-7469));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(stack0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      SQLException sQLException0 = new SQLException();
      DataTruncation dataTruncation0 = new DataTruncation(2689, true, true, 2689, 2689);
      dataTruncationArray0[0] = dataTruncation0;
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      Class<SQLTransactionRollbackException> class2 = SQLTransactionRollbackException.class;
      Class<SQLTransactionRollbackException> class3 = SQLTransactionRollbackException.class;
      Class<SQLTransactionRollbackException>[] classArray0 = (Class<SQLTransactionRollbackException>[]) Array.newInstance(Class.class, 5);
      classArray0[0] = class0;
      classArray0[2] = class3;
      classArray0[2] = class2;
      classArray0[3] = class1;
      classArray0[4] = class3;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toString((Iterator<String>) resettableIterator0, (Transformer<? super String, String>) invokerTransformer0);
      int int0 = (-1537);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) class2, (-1537));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[7];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", "");
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("] 2iMUZ#[2dV$r?t1p`");
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("{}", "] 2iMUZ#[2dV$r?t1p`");
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("{}", "", sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("", "");
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("InstantiateTransformer: Input object was not an instanceof Class, it was a null object", "NOVtk S", 3558, sQLNonTransientConnectionException3);
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[3];
      SQLWarning sQLWarning0 = new SQLWarning();
      sQLWarningArray0[0] = sQLWarning0;
      DataTruncation dataTruncation0 = new DataTruncation(249, false, false, (-933), (-773));
      sQLWarningArray0[1] = (SQLWarning) dataTruncation0;
      dataTruncation0.getRead();
      SQLWarning sQLWarning1 = new SQLWarning("c:A3X@6W0F", "c:A3X@6W0F", dataTruncation0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      StackTraceElement stackTraceElement0 = new StackTraceElement("c:A3X@6W0F", "prefix may not be null", "c:A3X@6W0F", (-933));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("]", "c:A3X@6W0F", "prefix may not be null", (-933));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("", "prefix may not be null", "org.apache.commons.collections4.functors.ExceptionClosure", 2724);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("org.apache.commons.collections4.functors.ExceptionClosure", "", "transformer may not be null", 10);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("", "\"G6@5^L7^4Lqg'b =", "", 10);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("c:A3X@6W0F", "", "", 2724);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("transformer may not be null", "\"G6@5^L7^4Lqg'b =", (String) null, 0);
      stackTraceElementArray0[6] = stackTraceElement6;
      sQLWarning1.setStackTrace(stackTraceElementArray0);
      dataTruncation0.setNextWarning(sQLWarning1);
      sQLWarning0.getLocalizedMessage();
      SQLWarning sQLWarning2 = new SQLWarning(sQLWarningArray0[1]);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLWarning0.getLocalizedMessage();
      sQLWarning2.forEach(consumer0);
      sQLWarningArray0[2] = sQLWarning2;
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.arrayIterator(sQLWarningArray0);
      IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends Locale.Category>[]) iteratorArray0);
      SQLWarning sQLWarning3 = dataTruncation0.getNextWarning();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLWarning3, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      PriorityQueue<Properties> priorityQueue0 = new PriorityQueue<Properties>();
      IteratorUtils.loopingIterator((Collection<? extends Properties>) priorityQueue0);
      Properties properties0 = new Properties();
      priorityQueue0.add(properties0);
      long long0 = 0L;
      // Undeclared exception!
      try { 
        priorityQueue0.add(properties0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Properties cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>) resettableListIterator0, (Iterator<? extends SQLTransientException>) resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNodeValue();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[9];
      DataTruncation dataTruncation0 = new DataTruncation(10, false, false, 10, 10);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(10, false, true, 10, 0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(1346, true, true, (-1779), 1346);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(10, false, true, 0, 0, dataTruncation2);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(1346, false, false, 128, 414, dataTruncation0);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(414, true, false, 0, (-668));
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation((-3483), false, false, 128, (-3325), dataTruncation0);
      dataTruncationArray0[6] = dataTruncation6;
      DataTruncation dataTruncation7 = new DataTruncation(100, true, false, 1346, 0);
      dataTruncationArray0[7] = dataTruncation7;
      DataTruncation dataTruncation8 = new DataTruncation(0, false, true, 387, 593);
      dataTruncationArray0[8] = dataTruncation8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, (-1779), (-1074));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      OrderedMapIterator<DataTruncation, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<DataTruncation, Integer> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, Integer>) orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<?>) orderedMapIterator0, (-4386L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      MapIterator<Integer, LinkedHashSet<SQLInvalidAuthorizationSpecException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends Integer>) mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Integer[] integerArray0 = new Integer[0];
      int int0 = 1796;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(integerArray0, 1796);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }
}
