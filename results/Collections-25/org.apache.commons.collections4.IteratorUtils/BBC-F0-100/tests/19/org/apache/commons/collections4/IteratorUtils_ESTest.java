/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 05:45:37 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      Transformer<SQLNonTransientException, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<Integer> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) objectArrayIterator0, (Transformer<? super SQLDataException, ? extends Integer>) transformer0);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) objectArrayIterator0, (Iterator<?>) iterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, Object> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ?>) orderedMapIterator0);
      SkippingIterator<SQLTimeoutException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLTimeoutException>) orderedMapIterator1, 1L);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) skippingIterator0, (Iterator<? extends SQLTimeoutException>) orderedMapIterator1);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      DataTruncation dataTruncation0 = new DataTruncation(156, true, false, 156, 564, sQLTransientException0);
      HashMap<Object, SQLNonTransientException> hashMap0 = new HashMap<Object, SQLNonTransientException>();
      Transformer<Object, SQLException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLException>) hashMap0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator((Object) dataTruncation0);
      IteratorUtils.apply((Iterator<Object>) resettableIterator0, (Closure<? super Object>) transformerClosure0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 4);
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<DataTruncation>) orderedIterator0;
      OrderedMapIterator<DataTruncation, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[1] = (Iterator<DataTruncation>) orderedMapIterator0;
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(iteratorArray0[0]);
      iteratorArray0[2] = (Iterator<DataTruncation>) listIteratorWrapper0;
      iteratorArray0[3] = (Iterator<DataTruncation>) listIteratorWrapper0;
      ZippingIterator<SQLWarning> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ListIterator<ArrayDeque<SQLWarning>> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<ArrayDeque<SQLWarning>> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MapIterator<String, HashSet<SQLRecoverableException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<String> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<String>) mapIterator0);
      BoundedIterator<String> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends String>) iterator0, 0L);
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) boundedIterator0, (Iterator<? extends String>) iterator0, (Iterator<? extends String>) mapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      OrderedMapIterator<HashSet<SQLTimeoutException>, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<HashSet<SQLTimeoutException>, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<HashSet<SQLTimeoutException>, SQLFeatureNotSupportedException>(orderedMapIterator0);
      AbstractMapIteratorDecorator<HashSet<SQLTimeoutException>, SQLFeatureNotSupportedException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<HashSet<SQLTimeoutException>, SQLFeatureNotSupportedException>(abstractOrderedMapIteratorDecorator0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>(".vy)}$");
      String string0 = IteratorUtils.toString((Iterator<HashSet<SQLTimeoutException>>) abstractMapIteratorDecorator0, (Transformer<? super HashSet<SQLTimeoutException>, String>) constantTransformer0, ".vy)}$", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>(1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("s?UicqRAiG 5L", "s?UicqRAiG 5L", (Throwable) null);
      vector0.add(sQLNonTransientConnectionException0);
      ReverseListIterator<SQLNonTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLNonTransientConnectionException>(vector0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      reverseListIterator0.forEachRemaining(consumer0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientConnectionException>) reverseListIterator0);
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int[] intArray0 = new int[5];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("EwBIKLy5S2\")|^od=", "EwBIKLy5S2\")|^od=");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLSyntaxErrorException0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[9];
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, 4);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<SQLRecoverableException>[] classArray0 = (Class<SQLRecoverableException>[]) Array.newInstance(Class.class, 0);
      ResettableListIterator<Class<SQLRecoverableException>> resettableListIterator0 = IteratorUtils.arrayListIterator(classArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Object, SQLTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      Transformer<SQLNonTransientException, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      IfTransformer<SQLDataException, Integer> ifTransformer0 = new IfTransformer<SQLDataException, Integer>(andPredicate0, transformer0, transformer0);
      Iterator<Integer> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) objectArrayIterator0, (Transformer<? super SQLDataException, ? extends Integer>) ifTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[6];
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0, (-3205L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<BatchUpdateException>) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) orderedMapIterator0, (-61L), 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Iterator<SQLSyntaxErrorException>[]) null, 1981);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLWarning[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 4);
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ZippingIterator<SQLTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0);
      iteratorArray0[1] = (Iterator<SQLTransientConnectionException>) zippingIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iteratorArray0[1], 0, (-1018));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((ArrayDeque<SQLWarning>[]) null, (-1191), 91);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLSyntaxErrorException[]) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[5];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, 844);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((InstanceofPredicate[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[4];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("6 ", "Z-hTfHBhDp ", (-667), intArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(")]XHk5jnEH-9gB./", ")]XHk5jnEH-9gB./", batchUpdateException0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 0, sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0, 16, (-1329));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      ResettableIterator<HashSet<SQLTimeoutException>> resettableIterator0 = IteratorUtils.singletonIterator(hashSet0);
      String string0 = IteratorUtils.toString((Iterator<HashSet<SQLTimeoutException>>) resettableIterator0, (Transformer<? super HashSet<SQLTimeoutException>, String>) transformer0, "Closure must not be null", "Closure must not be null", "fY&");
      assertEquals("Closure must not be nullnullfY&", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      String string0 = IteratorUtils.toString((Iterator<InstanceofPredicate>) null, (Transformer<? super InstanceofPredicate, String>) transformer0, "Enumeration must not be null", "ExceptionPredicate invoked", "vI1[hv");
      assertEquals("ExceptionPredicate invokedvI1[hv", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator(sQLClientInfoException0);
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) listIterator0, 8);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ArrayList<SQLWarning> arrayList0 = new ArrayList<SQLWarning>();
      LoopingListIterator<SQLWarning> loopingListIterator0 = new LoopingListIterator<SQLWarning>(arrayList0);
      List<SQLWarning> list0 = IteratorUtils.toList((Iterator<? extends SQLWarning>) loopingListIterator0, 1086);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLWarning>) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      BoundedIterator<Object> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<?>) mapIterator0, 0L, (long) 91);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("_xM5*0]3i");
      Hashtable<HashSet<SQLTimeoutException>, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<HashSet<SQLTimeoutException>, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<HashSet<SQLTimeoutException>, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<HashSet<SQLTimeoutException>, SQLFeatureNotSupportedException>(hashtable0);
      AbstractMapIteratorDecorator<HashSet<SQLTimeoutException>, SQLFeatureNotSupportedException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<HashSet<SQLTimeoutException>, SQLFeatureNotSupportedException>(entrySetMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<HashSet<SQLTimeoutException>>) abstractMapIteratorDecorator0, (Transformer<? super HashSet<SQLTimeoutException>, String>) constantTransformer0, "org.apache.commons.collections4.functors.AbstractQuantifierPredicate", "_xM5*0]3i", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      OrderedMapIterator<HashSet<SQLTimeoutException>, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<HashSet<SQLTimeoutException>>) orderedMapIterator0, (Transformer<? super HashSet<SQLTimeoutException>, String>) transformer0, ".Davy)}$", (String) null, "4IIsgOH");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<HashSet<SQLTimeoutException>, SQLFeatureNotSupportedException> hashMap0 = new HashMap<HashSet<SQLTimeoutException>, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<HashSet<SQLTimeoutException>, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<HashSet<SQLTimeoutException>, SQLFeatureNotSupportedException>(hashMap0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("delimiter may not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<HashSet<SQLTimeoutException>>) entrySetMapIterator0, (Transformer<? super HashSet<SQLTimeoutException>, String>) constantTransformer0, (String) null, "delimiter may not be null", "suffix may not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator((Integer) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Integer>) listIterator0, (Transformer<? super Integer, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ListIterator<Object> listIterator0 = IteratorUtils.singletonListIterator((Object) instanceofPredicate0);
      int int0 = IteratorUtils.size(listIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      SingletonIterator<Class<DataTruncation>> singletonIterator0 = new SingletonIterator<Class<DataTruncation>>(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Class<DataTruncation>>) singletonIterator0, 123);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 122
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Locale.Category>) resettableIterator0, 923);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 923
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MapIterator<Boolean, Locale.Category> mapIterator0 = IteratorUtils.emptyMapIterator();
      boolean boolean0 = IteratorUtils.isEmpty(mapIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>((Object) null);
      boolean boolean0 = IteratorUtils.isEmpty(singletonListIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[1];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_CategoryArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLFeatureNotSupportedException0, defaultEquator0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(equalPredicate0);
      OrPredicate<Locale.Category> orPredicate0 = new OrPredicate<Locale.Category>(nullIsTruePredicate0, nullIsTruePredicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Locale.Category>) resettableListIterator0, (Predicate<? super Locale.Category>) orPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[1];
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_CategoryArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLFeatureNotSupportedException0, defaultEquator0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(equalPredicate0);
      OrPredicate<Locale.Category> orPredicate0 = new OrPredicate<Locale.Category>(nullIsTruePredicate0, nullIsTruePredicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Locale.Category>) resettableListIterator0, (Predicate<? super Locale.Category>) orPredicate0);
      assertTrue(resettableListIterator0.hasPrevious());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ResettableIterator<SQLWarning> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLWarning>) resettableIterator0, (Predicate<? super SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[6];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, 6, intArray0);
      SQLDataException sQLDataException0 = new SQLDataException(batchUpdateException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLDataException0, comparator0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayList<DataTruncation>>) null, (Predicate<? super ArrayList<DataTruncation>>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("", "");
      DataTruncation dataTruncation0 = new DataTruncation((-1905), false, true, (-1), (-1905), sQLWarning0);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[4];
      sQLWarningArray0[0] = (SQLWarning) dataTruncation0;
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLWarningArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLWarning>) resettableListIterator0, (Object) dataTruncation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) "@[XCSI\"XRZF|I^(H", (Equator<Object>) defaultEquator0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(andPredicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<PriorityQueue<EnumSet>>) null, (Predicate<? super PriorityQueue<EnumSet>>) nullIsFalsePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[9];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("6", "ZF[rml-lJ=]B<1L_", (-2418));
      sQLNonTransientExceptionArray0[8] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, 0);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLNonTransientExceptionArray0[8]);
      SQLNonTransientException sQLNonTransientException0 = IteratorUtils.find((Iterator<SQLNonTransientException>) resettableIterator0, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 6", sQLNonTransientException0.toString());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[4];
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLNonTransientException>) resettableIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      Predicate<SQLNonTransientException> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLNonTransientException>) anyPredicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      assertNull(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "pqeXa_fcddNvGN0|", 10);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[2];
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, (int) 2);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLFeatureNotSupportedException0);
      SQLNonTransientException sQLNonTransientException0 = IteratorUtils.find((Iterator<SQLNonTransientException>) resettableIterator0, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      assertNull(sQLNonTransientException0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("CD<M;%ryK6");
      ListIterator<Object> listIterator0 = IteratorUtils.singletonListIterator((Object) sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Object>) listIterator0, (Closure<? super Object>) transformerClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformerClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      DataTruncation dataTruncation0 = new DataTruncation((-1038), true, false, (-1038), (-1), sQLTimeoutException0);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.constantTransformer(dataTruncation0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<Object>) null, (Closure<? super Object>) closure0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ListIterator<ArrayDeque<SQLWarning>> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<ArrayDeque<SQLWarning>>) listIterator0, (Closure<? super ArrayDeque<SQLWarning>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>(3299);
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(vector0);
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) reverseListIterator0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("u;E", "u;E", (-366));
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLTransientConnectionException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MapIterator<Boolean, Locale.Category> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      SingletonIterator<Class<DataTruncation>> singletonIterator0 = new SingletonIterator<Class<DataTruncation>>(class0);
      List<Class<DataTruncation>> list0 = IteratorUtils.toList((Iterator<? extends Class<DataTruncation>>) singletonIterator0);
      assertTrue(list0.contains(class0));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) listIterator0, (-8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) mapIterator0, class0);
      assertEquals(0, sQLSyntaxErrorExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      LoopingListIterator<SQLSyntaxErrorException> loopingListIterator0 = new LoopingListIterator<SQLSyntaxErrorException>(linkedList0);
      Iterable<SQLSyntaxErrorException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLSyntaxErrorException>) loopingListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterable<IIOMetadataNode> iterable0 = IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>(3299);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) null, (Collection<? super StringTokenizer>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>(3299);
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(vector0);
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) reverseListIterator0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0, (Collection<? super StringTokenizer>) vector0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      Enumeration<SQLTransientConnectionException> enumeration0 = stack0.elements();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransientConnectionException>) iterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("NTtxv ^4X~\"oT89Q)2f");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) nodeListIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) vector0);
      Iterator<SQLTransientException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>) resettableIterator0, (Iterator<? extends SQLTransientException>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) objectArrayListIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) objectArrayListIterator0, (Predicate<? super SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) andPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Predicate<SQLException> predicate0 = FalsePredicate.falsePredicate();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      Transformer<SQLNonTransientException, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      IfTransformer<SQLDataException, Integer> ifTransformer0 = new IfTransformer<SQLDataException, Integer>(andPredicate0, transformer0, transformer0);
      Iterator<Integer> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) objectArrayIterator0, (Transformer<? super SQLDataException, ? extends Integer>) ifTransformer0);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) iterator0, (Iterator<?>) iterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("10x");
      Transformer<Object, SQLTransactionRollbackException> transformer1 = ConstantTransformer.constantTransformer(sQLTransactionRollbackException0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer1);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Object>) zippingIterator0, (Closure<? super Object>) transformerClosure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OrderedMapIterator<SQLDataException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) orderedMapIterator0, (Transformer<? super SQLDataException, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator0, (Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1086, 1086);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.arrayIterator((SQLNonTransientException[]) sQLDataExceptionArray0, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLNonTransientException>) resettableIterator0, (Predicate<? super SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>) null, (Iterator<? extends SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<Boolean> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Boolean>>) stack0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(predicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<HashSet<SQLTimeoutException>, SQLFeatureNotSupportedException> hashMap0 = new HashMap<HashSet<SQLTimeoutException>, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<HashSet<SQLTimeoutException>, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<HashSet<SQLTimeoutException>, SQLFeatureNotSupportedException>(hashMap0);
      MapIterator<HashSet<SQLTimeoutException>, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<HashSet<SQLTimeoutException>, SQLFeatureNotSupportedException>) entrySetMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLDataException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.arrayIterator(locale_CategoryArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      OrderedMapIterator<SQLTimeoutException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, Object> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ?>) orderedMapIterator0);
      SkippingIterator<SQLTimeoutException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLTimeoutException>) orderedMapIterator1, 1L);
      Iterator<SQLTransientException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientException>) comparator0, (Iterator<? extends SQLTransientException>) resettableIterator0, (Iterator<? extends SQLTransientException>) skippingIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[8];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, 1073741824, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((ArrayDeque<SQLWarning>[]) null, 999, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = IteratorUtils.toString((Iterator<Object>) null);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("`;", "", 2);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
      HashMap<Predicate<BatchUpdateException>, Closure<BatchUpdateException>> hashMap0 = new HashMap<Predicate<BatchUpdateException>, Closure<BatchUpdateException>>();
      Closure<BatchUpdateException> closure0 = SwitchClosure.switchClosure((Map<Predicate<BatchUpdateException>, Closure<BatchUpdateException>>) hashMap0);
      Transformer<BatchUpdateException, BatchUpdateException> transformer0 = ClosureTransformer.closureTransformer((Closure<? super BatchUpdateException>) closure0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) listIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MapIterator<Properties, InstanceofPredicate> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<Properties> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Properties>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ServiceLoader<Boolean>[] serviceLoaderArray0 = (ServiceLoader<Boolean>[]) Array.newInstance(ServiceLoader.class, 5);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(serviceLoaderArray0, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Hashtable<Stack<BatchUpdateException>, SQLTransactionRollbackException> hashtable0 = new Hashtable<Stack<BatchUpdateException>, SQLTransactionRollbackException>();
      EntrySetMapIterator<Stack<BatchUpdateException>, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<Stack<BatchUpdateException>, SQLTransactionRollbackException>(hashtable0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLDataException sQLDataException0 = new SQLDataException(", ");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "w*5d'={", sQLDataException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", hashMap0, sQLInvalidAuthorizationSpecException0);
      boolean boolean0 = IteratorUtils.contains((Iterator<Stack<BatchUpdateException>>) entrySetMapIterator0, (Object) sQLClientInfoException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0);
      PredicateTransformer<IIOMetadataNode> predicateTransformer0 = new PredicateTransformer<IIOMetadataNode>(predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Boolean boolean0 = predicateTransformer0.transform(iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) boolean0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Integer integer0 = new Integer((-1344));
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      Factory<String> factory0 = ConstantFactory.constantFactory("E*I{)}hQfp");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      String string0 = IteratorUtils.toString((Iterator<Integer>) listIterator0, (Transformer<? super Integer, String>) transformer0);
      assertFalse(listIterator0.hasNext());
      assertEquals("[E*I{)}hQfp]", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<SQLDataException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("w!R]A(xa#C]Z`E", "w!R]A(xa#C]Z`E");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLRecoverableException0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[7];
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) resettableListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }
}
