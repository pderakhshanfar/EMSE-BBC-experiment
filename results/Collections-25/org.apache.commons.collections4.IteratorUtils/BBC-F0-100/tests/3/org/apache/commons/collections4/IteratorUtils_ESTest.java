/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 05:46:17 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 3);
      ResettableListIterator<EnumSet<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.arrayListIterator(enumSetArray0, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<EnumSet<Locale.FilteringMode>>) resettableListIterator0, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(stack0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) loopingListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLTransactionRollbackException, SQLSyntaxErrorException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransactionRollbackException, SQLSyntaxErrorException>(mapIterator0);
      MapIterator<SQLTransactionRollbackException, SQLSyntaxErrorException> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransactionRollbackException, SQLSyntaxErrorException>) abstractMapIteratorDecorator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) arrayList0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = EmptyIterator.emptyIterator();
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = IteratorUtils.toString(iterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) transformer0, "sRp5cG", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLNonTransientConnectionException0);
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("suffix may not be null", "", (-861), sQLTimeoutException0);
      stack0.add(sQLTransientConnectionException0);
      ListIterator<SQLTransientConnectionException> listIterator0 = stack0.listIterator(1);
      ListIterator<SQLTransientConnectionException> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends SQLTransientConnectionException>) listIterator0);
      assertFalse(listIterator1.equals((Object)listIterator0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.emptyIterator();
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("X,{wY3 U6M;}rK{p", sQLNonTransientException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("J/D", "X,{wY3 U6M;}rK{p", 0, sQLTimeoutException0);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      Class<SQLException> class0 = SQLException.class;
      SQLException[] sQLExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLException>) resettableIterator0, class0);
      assertEquals(1, sQLExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      linkedList0.add(sQLIntegrityConstraintViolationException0);
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) linkedList0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 7);
      enumSetArray0[4] = enumSet0;
      ResettableListIterator<EnumSet<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.arrayListIterator(enumSetArray0, 2);
      EnumSet<Locale.FilteringMode> enumSet1 = IteratorUtils.get((Iterator<EnumSet<Locale.FilteringMode>>) resettableListIterator0, 2);
      assertSame(enumSet1, enumSet0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Comparator<SQLRecoverableException> comparator0 = (Comparator<SQLRecoverableException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) comparator0, (Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 1);
      ListIterator<SQLRecoverableException> listIterator0 = EmptyListIterator.emptyListIterator();
      iteratorArray0[0] = (Iterator<SQLRecoverableException>) listIterator0;
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      BoundedIterator<DataTruncation> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) resettableIterator0, 0L, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Iterator<SQLTransactionRollbackException> iterator0 = EmptyIterator.emptyIterator();
      BoundedIterator<SQLTransactionRollbackException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) iterator0, 1L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1);
      ResettableListIterator<Class<String>> resettableListIterator0 = IteratorUtils.arrayListIterator(classArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 0);
      ResettableListIterator<EnumSet<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.arrayListIterator(enumSetArray0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 0);
      ResettableIterator<Class<SQLClientInfoException>> resettableIterator0 = IteratorUtils.arrayIterator(classArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0, (Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<StringTokenizer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Properties>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("PE?s096k", "");
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Enumeration<SQLNonTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) resettableIterator0);
      Iterator<Object> iterator0 = IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) priorityQueue0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super Object, String>) transformer0, "lw6L>mh^oD 4  y", "a=x(,M44", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0);
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.loopingIterator((Collection<?>) enumSet0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("");
      // Undeclared exception!
      IteratorUtils.toString((Iterator<Object>) resettableIterator0, (Transformer<? super Object, String>) transformer0, "TT&C*0JE", "", "org.apache.commons.collections4.map.AbstractReferenceMap$WeakRef");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 2);
      Transformer<Object, SQLRecoverableException> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) transformer0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) iterator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLRecoverableException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(stack0);
      DataTruncation dataTruncation0 = new DataTruncation(10, true, true, 1966, 1966);
      stack0.add(dataTruncation0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(loopingListIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 2);
      OrderedMapIterator<SQLTransactionRollbackException, PriorityQueue<SQLSyntaxErrorException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) orderedMapIterator0;
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("D(NCL!(^4R+TPl", "", sQLTransientException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "D(NCL!(^4R+TPl", 0, sQLSyntaxErrorException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("D(NCL!(^4R+TPl", "D(NCL!(^4R+TPl", 519, sQLTransientConnectionException0);
      Factory<SQLTransactionRollbackException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, SQLTransactionRollbackException> factoryTransformer0 = new FactoryTransformer<Object, SQLTransactionRollbackException>(factory0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransactionRollbackException0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) factoryTransformer0);
      iteratorArray0[1] = iterator0;
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransactionRollbackException>) zippingIterator0, 3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.singletonIterator((EnumSet<Locale.FilteringMode>) null);
      List<EnumSet<Locale.FilteringMode>> list0 = IteratorUtils.toList((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0);
      LoopingListIterator<EnumSet<Locale.FilteringMode>> loopingListIterator0 = new LoopingListIterator<EnumSet<Locale.FilteringMode>>(list0);
      Iterator<EnumSet<Locale.FilteringMode>> iterator0 = IteratorUtils.collatedIterator((Comparator<? super EnumSet<Locale.FilteringMode>>) comparator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) loopingListIterator0);
      // Undeclared exception!
      IteratorUtils.get(iterator0, 590);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransactionRollbackException>) null, 52);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      OrderedMapIterator<Properties, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, BatchUpdateException>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<?>) abstractOrderedMapIteratorDecorator0, 0L, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((StringTokenizer[]) null, (-821), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Integer[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 691);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLSyntaxErrorException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 888, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("%a#kO5(.Q841");
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0, true);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) singletonIterator0, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringArray0, (-4105), (-1231));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((LinkedHashSet<SQLDataException>[]) null, 2937);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[4];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("@lg~]H'#5|AeCUWiU", "@lg~]H'#5|AeCUWiU", intArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, Vector<SQLTransientException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>>(orderedMapIterator0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Iterator<Object> iterator0 = IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) priorityQueue0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = IteratorUtils.toString(iterator0, (Transformer<? super Object, String>) transformer0, "", "", "TT&C*0JE");
      assertEquals("TT&C*0JE", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = IteratorUtils.toString((Iterator<Object>) null, (Transformer<? super Object, String>) transformer0, "", "TT&C*0JE", "");
      assertEquals("TT&C*0JE", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[20];
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      Predicate<SQLNonTransientException> predicate0 = NullPredicate.nullPredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) objectArrayListIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) null, (Predicate<? super SQLNonTransientException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(":UnqMjM");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(":UnqMjM", sQLFeatureNotSupportedException0);
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      List<SQLRecoverableException> list0 = IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) singletonListIterator0, 534);
      assertTrue(list0.contains(sQLRecoverableException0));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      List<EnumSet<Locale.FilteringMode>> list0 = IteratorUtils.toList((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0, 1411);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[8];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLNonTransientConnectionExceptionArray0[0]);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      ListIterator<SQLTransientException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransientException>) resettableIterator0);
      ListIterator<Object> listIterator1 = IteratorUtils.singletonListIterator((Object) listIterator0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator");
      String string0 = IteratorUtils.toString((Iterator<Object>) listIterator1, (Transformer<? super Object, String>) constantTransformer0, "org.apache.commons.collections4.map.AbstractReferenceMap$SoftRef", "0", "org.apache.commons.collections4.map.AbstractReferenceMap$SoftRef");
      assertEquals("0org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIteratororg.apache.commons.collections4.map.AbstractReferenceMap$SoftRef", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 2);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("No previous() entry in the iteration", (Class<?>[]) classArray0, (Object[]) classArray0);
      String string0 = IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) null, (Transformer<? super SQLSyntaxErrorException, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      Object[] objectArray0 = new Object[8];
      ObjectArrayIterator<Object> objectArrayIterator0 = new ObjectArrayIterator<Object>(objectArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) objectArrayIterator0, (Transformer<? super Object, String>) transformer0, "", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[8];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLNonTransientConnectionExceptionArray0[0]);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      ListIterator<SQLTransientException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransientException>) resettableIterator0);
      int int0 = IteratorUtils.size(listIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(stack0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) loopingListIterator0);
      int int0 = IteratorUtils.size(zippingIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 7);
      ResettableListIterator<EnumSet<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.arrayListIterator(enumSetArray0, 2);
      EnumSet<Locale.FilteringMode> enumSet0 = IteratorUtils.get((Iterator<EnumSet<Locale.FilteringMode>>) resettableListIterator0, 2);
      assertNull(enumSet0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      Stack<EnumSet<Locale.FilteringMode>> stack0 = new Stack<EnumSet<Locale.FilteringMode>>();
      LoopingIterator<EnumSet<Locale.FilteringMode>> loopingIterator0 = new LoopingIterator<EnumSet<Locale.FilteringMode>>(stack0);
      stack0.add(enumSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<EnumSet<Locale.FilteringMode>>) loopingIterator0, 1749);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      ArrayList<Properties> arrayList0 = new ArrayList<Properties>(linkedList0);
      Properties properties0 = new Properties();
      arrayList0.add(properties0);
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Properties>) arrayList0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.singletonIterator(sQLSyntaxErrorException0);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) resettableIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.singletonIterator(sQLSyntaxErrorException0);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) resettableIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("Predicate must not be null");
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLDataException0);
      Predicate<SQLException> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) predicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) predicate1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Integer>) objectArrayIterator0, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLSyntaxErrorException, IIOMetadataNode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLSyntaxErrorException, IIOMetadataNode>(orderedMapIterator0);
      SQLDataException sQLDataException0 = new SQLDataException("h0.tHF&DA;:");
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLDataException0);
      Predicate<SQLException> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) predicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) abstractMapIteratorDecorator0, (Predicate<? super SQLSyntaxErrorException>) predicate1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[3];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("*bNgm('|N~@=.&", "*bNgm('|N~@=.&", 336);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLDataException0;
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLSyntaxErrorException0;
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      Predicate<SQLNonTransientException> predicate0 = NullPredicate.nullPredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) objectArrayListIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("TT&C*0JE");
      boolean boolean0 = IteratorUtils.contains((Iterator<String>) singletonIterator0, (Object) "TT&C*0JE");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[3];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      Predicate<SQLNonTransientException> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) objectArrayListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      assertNull(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("BxX=ky?t1FY", "TT&C*0JE", 4);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", sQLFeatureNotSupportedException0);
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) singletonListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object object0 = new Object();
      ListIterator<Object> listIterator0 = IteratorUtils.singletonListIterator(object0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.find((Iterator<Object>) listIterator0, (Predicate<? super Object>) predicate0);
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("transformer may not be null", "]F;Ghat*pj0BB", true);
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLSyntaxErrorException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ResettableListIterator<EnumSet<Locale.FilteringMode>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableListIterator0, (-821));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) null, 221);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      OrderedMapIterator<SQLRecoverableException, Locale.FilteringMode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) orderedMapIterator0, class0);
      assertEquals(0, sQLRecoverableExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) mapIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends ArrayDeque<SQLTransientConnectionException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLSyntaxErrorException, IIOMetadataNode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLSyntaxErrorException, IIOMetadataNode>(orderedMapIterator0);
      Iterable<SQLException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) abstractMapIteratorDecorator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterable<DataTruncation> iterable0 = IteratorUtils.asIterable((Iterator<? extends DataTruncation>) resettableIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, Vector<SQLTransientException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>>(orderedMapIterator0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Iterator<Object> iterator0 = IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) priorityQueue0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super Object, String>) transformer0, (String) null, "", "4y/.3'?}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) null, (Collection<? super SQLFeatureNotSupportedException>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, Transformer<ServiceLoader, BatchUpdateException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, Vector<SQLTransientException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>>(orderedMapIterator0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[8];
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) objectArrayListIterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLNonTransientConnectionException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) sQLTimeoutException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLNonTransientConnectionException0);
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      ListIterator<SQLTransientException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransientException>) resettableIterator0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) sQLTimeoutException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      ListIterator<SQLTransientException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientException>) listIterator0, (Predicate<? super SQLTransientException>) predicate0);
      assertFalse(listIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      Predicate<SQLException> predicate0 = AndPredicate.andPredicate((Predicate<? super SQLException>) anyPredicate0, (Predicate<? super SQLException>) anyPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = IteratorUtils.emptyIterator();
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      Iterator<EnumSet<Locale.FilteringMode>> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0, (Predicate<? super EnumSet<Locale.FilteringMode>>) predicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLWarning>) resettableListIterator0, (Transformer<? super SQLWarning, ? extends IIOMetadataNode>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Hashtable<Object, EnumSet<Locale.FilteringMode>> hashtable0 = new Hashtable<Object, EnumSet<Locale.FilteringMode>>();
      Transformer<Object, EnumSet<Locale.FilteringMode>> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends EnumSet<Locale.FilteringMode>>) hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Transformer<? super SQLFeatureNotSupportedException, ? extends EnumSet<Locale.FilteringMode>>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      OrderedMapIterator<DataTruncation, Locale.FilteringMode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLWarning>) orderedMapIterator0, (Transformer<? super SQLWarning, ? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Comparator<SQLTransactionRollbackException> comparator0 = (Comparator<SQLTransactionRollbackException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Properties>) null, 2560L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ReverseListIterator<String> reverseListIterator0 = new ReverseListIterator<String>(arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<String>) reverseListIterator0, (Transformer<? super String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-956), 2087);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 1748);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) linkedList0);
      Iterator<Object> iterator0 = IteratorUtils.chainedIterator((Iterator<?>) resettableListIterator0, (Iterator<?>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super Object, String>) null, "V24D[Qg6<?", "l$(2mA,jbDU$2", "l$(2mA,jbDU$2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MapIterator<Integer, ArrayDeque<ArrayDeque>> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) mapIterator0, (-1681), (-1681));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<ClientInfoStatus, Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MapIterator<String, SQLWarning> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<String> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<String>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLClientInfoException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLIntegrityConstraintViolationException[]) null, 518, (-5398));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((IIOMetadataNode[]) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      String string0 = IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) resettableIterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MapIterator<SQLClientInfoException, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) mapIterator0, (Iterator<? extends SQLClientInfoException>) orderedIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[8];
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 2);
      InvokerTransformer<Object, SQLRecoverableException> invokerTransformer0 = new InvokerTransformer<Object, SQLRecoverableException>("W\"io7Q|{0", classArray0, locale_FilteringModeArray0);
      IfTransformer<SQLException, SQLRecoverableException> ifTransformer0 = new IfTransformer<SQLException, SQLRecoverableException>((Predicate<? super SQLException>) null, invokerTransformer0, invokerTransformer0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) ifTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) iterator0, (long) 2, (long) 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 7);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iteratorArray0[1], 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) comparator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<DataTruncation> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", (String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0, 93, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 4);
      ResettableListIterator<EnumSet<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.arrayListIterator(enumSetArray0, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super EnumSet<Locale.FilteringMode>>) null, (Iterator<? extends EnumSet<Locale.FilteringMode>>) null, (Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableListIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLFeatureNotSupportedException>) null, (Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<EnumSet<Locale.FilteringMode>> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1537);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) resettableListIterator0, (Transformer<? super Object, String>) constantTransformer0, "", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      ListIterator<SQLTimeoutException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertTrue(listIterator1.hasNext());
  }
}
