/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 06:43:05 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.stream.Stream;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.DOMException;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Dh1cWU.z>HnUO%C d");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.contains((Iterator<SQLSyntaxErrorException>) resettableIterator0, (Object) sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[7];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode();
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0, 0);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<IIOMetadataNode>) objectArrayListIterator0);
      Transformer<IIOMetadataNode, String> transformer0 = InvokerTransformer.invokerTransformer("Rq<& 229Pi|bo", (Class<?>[]) null, (Object[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) listIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Rq<& 229Pi|bo' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      int int0 = 100;
      DataTruncation dataTruncation0 = new DataTruncation((-2946), true, true, 100, (-1730));
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      String string0 = "You must invoke setComparator() to set a comparator first.";
      Transformer<SQLWarning, String> transformer0 = InvokerTransformer.invokerTransformer("You must invoke setComparator() to set a comparator first.");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) listIterator0, (Transformer<? super DataTruncation, String>) transformer0, "|NmlEH\"", "|NmlEH\"", "Vzt$/CB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'You must invoke setComparator() to set a comparator first.' on 'class java.sql.DataTruncation' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ResettableListIterator<LinkedList<SQLRecoverableException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Transformer<Object, String> transformer0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<LinkedList<SQLRecoverableException>>) resettableListIterator0, (Transformer<? super LinkedList<SQLRecoverableException>, String>) null, "", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyIterator();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[9];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Fhh(=P2Lo;'-");
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("Fhh(=P2Lo;'-", "Fhh(=P2Lo;'-", 277);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("", (String) null, 1164, sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("3.pm", (String) null, sQLIntegrityConstraintViolationException2);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("", sQLIntegrityConstraintViolationException3);
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException((String) null);
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException7 = new SQLIntegrityConstraintViolationException("The predicate collection must not contain a null predicate, index ", "\u0000 (V6TeL@/jI#1,");
      sQLIntegrityConstraintViolationExceptionArray0[7] = sQLIntegrityConstraintViolationException7;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException8 = new SQLIntegrityConstraintViolationException("The predicate collection must not contain a null predicate, index ", (String) null, 277, sQLIntegrityConstraintViolationException4);
      sQLIntegrityConstraintViolationExceptionArray0[8] = sQLIntegrityConstraintViolationException8;
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      NotPredicate<SQLIntegrityConstraintViolationException> notPredicate0 = new NotPredicate<SQLIntegrityConstraintViolationException>((Predicate<? super SQLIntegrityConstraintViolationException>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) objectArrayListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) notPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NotPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      MapIterator<SQLClientInfoException, SQLTransactionRollbackException> mapIterator0 = IteratorUtils.emptyMapIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "~.E#wc p3t=F", 1, sQLInvalidAuthorizationSpecException0);
      IteratorUtils.getIterator(sQLSyntaxErrorException0);
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      Stream<SQLNonTransientConnectionException> stream0 = linkedList0.stream();
      IteratorUtils.getIterator(stream0);
      IteratorUtils.emptyMapIterator();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("~.E#wc p3t=F");
      IteratorUtils.getIterator(mapIterator0);
      linkedList0.stream();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) singletonListIterator0, 1015);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1014
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
      SQLWarning sQLWarning0 = new SQLWarning("", "", (-2671));
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLWarning0, (-2671));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.collections4.functors.InstantiateTransformer");
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("org.apache.commons.collections4.functors.InstantiateTransformer");
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) listIterator0, (Transformer<? super DataTruncation, String>) transformer0, "List must not be null", (String) null, ")z[*3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator");
      IteratorUtils.toString((Iterator<DataTruncation>) null, (Transformer<? super DataTruncation, String>) transformer0, "org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", "org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", "org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-108));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>((SQLNonTransientConnectionException) null);
      IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) singletonListIterator0, 0);
      EmptyListIterator.resettableEmptyListIterator();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IteratorUtils.emptyIterator();
      OrderedMapIterator<Properties, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Properties>) orderedMapIterator0, (Transformer<? super Properties, ? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Transformer<SQLException, SQLSyntaxErrorException> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) null, (Transformer<? super SQLDataException, ? extends SQLSyntaxErrorException>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Properties[] propertiesArray0 = new Properties[1];
      ObjectArrayIterator<Properties> objectArrayIterator0 = new ObjectArrayIterator<Properties>(propertiesArray0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<Properties>) objectArrayIterator0, (Transformer<? super Properties, String>) transformer0, "m", "m", "m");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[3];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "", hashMap0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.collections4.map.Flat3Map$EntrySet");
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("$mW+YV4e", "Ha26G!9e=(3`#@UH`bl", hashMap0, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 1, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      Properties[] propertiesArray0 = new Properties[8];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) resettableListIterator0);
      LoopingListIterator<Properties> loopingListIterator0 = new LoopingListIterator<Properties>(list0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<Properties>) loopingListIterator0, (Transformer<? super Properties, String>) transformer0, "#E~ w,'KY6*^", "^P%;!G*$[y}!", "#E~ w,'KY6*^");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      Iterator<?> iterator0 = IteratorUtils.getIterator(comparator0);
      IteratorUtils.toArray(iterator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer((String) null);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      DataTruncation dataTruncation0 = new DataTruncation(741, true, true, 741, 741);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(100, true, true, 741, 1);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(741, true, true, 1, 1);
      dataTruncation2.getSuppressed();
      dataTruncationArray0[2] = dataTruncation2;
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) objectArrayIterator0, (Transformer<? super DataTruncation, String>) transformer0, (String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) orderedMapIterator0, class0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) resettableIterator0);
      MapIterator<SQLIntegrityConstraintViolationException, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("");
      IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) mapIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) constantTransformer0, "", "Cannot store a duplicate key (\"", "Cannot store a duplicate key (\"");
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Cannot store a duplicate key (\"Cannot store a duplicate key (\"", "", 0, hashMap0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("equator may not be null", "IteratorChain cannot be changed after the first use of a method from the Iterator interface", 2375, hashMap0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("equator may not be null", map0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException(map0, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException7;
      ObjectArrayIterator<SQLClientInfoException> objectArrayIterator0 = new ObjectArrayIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      IteratorUtils.size(objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<EnumSet<Locale.FilteringMode>>) resettableIterator0, (Closure<? super EnumSet<Locale.FilteringMode>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<Properties, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Properties>) orderedMapIterator0, (Closure<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[9];
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      PredicateTransformer<ArrayList<SQLWarning>> predicateTransformer0 = new PredicateTransformer<ArrayList<SQLWarning>>(predicate1);
      ArrayList<SQLWarning> arrayList0 = new ArrayList<SQLWarning>();
      Boolean boolean0 = predicateTransformer0.transform(arrayList0);
      booleanArray0[0] = boolean0;
      ArrayList<SQLWarning> arrayList1 = new ArrayList<SQLWarning>(16);
      Boolean boolean1 = predicateTransformer0.transform(arrayList1);
      booleanArray0[1] = boolean1;
      Boolean boolean2 = predicateTransformer0.transform(arrayList1);
      booleanArray0[2] = boolean2;
      Boolean boolean3 = predicateTransformer0.transform(arrayList1);
      booleanArray0[3] = boolean3;
      Boolean boolean4 = predicateTransformer0.transform(arrayList0);
      booleanArray0[4] = boolean4;
      Boolean boolean5 = predicateTransformer0.transform(arrayList0);
      booleanArray0[5] = boolean5;
      Boolean boolean6 = predicateTransformer0.transform(arrayList0);
      booleanArray0[6] = boolean6;
      Boolean boolean7 = predicateTransformer0.transform(arrayList0);
      booleanArray0[7] = boolean7;
      Boolean boolean8 = predicateTransformer0.transform(arrayList1);
      booleanArray0[8] = boolean8;
      ObjectArrayListIterator<Boolean> objectArrayListIterator0 = new ObjectArrayListIterator<Boolean>(booleanArray0);
      List<Boolean> list0 = IteratorUtils.toList((Iterator<? extends Boolean>) objectArrayListIterator0);
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      ListIterator<Boolean> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Boolean>) resettableListIterator0);
      Enumeration<Boolean> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Boolean>) listIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Boolean>) enumeration0, (Collection<? super Boolean>) list0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) boolean0, (-1807), 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      Iterator<?> iterator0 = IteratorUtils.getIterator(comparator0);
      IteratorUtils.toList(iterator0, 255);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("h7Lm..Z4+,ec");
      IteratorUtils.toString((Iterator<DataTruncation>) null, (Transformer<? super DataTruncation, String>) transformer0, "h7Lm..Z4+,ec", "h7Lm..Z4+,ec", "h7Lm..Z4+,ec");
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("h7Lm..Z4+,ech7Lm..Z4+,ec", "");
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      UniquePredicate<SQLNonTransientException> uniquePredicate0 = new UniquePredicate<SQLNonTransientException>();
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0, (Iterator<? extends SQLNonTransientException>) resettableIterator0, (Iterator<? extends SQLNonTransientException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) zippingIterator0, (Predicate<? super SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[3];
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      NullPredicate.nullPredicate();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Properties properties0 = new Properties();
      ConstantTransformer<Object, Properties> constantTransformer0 = new ConstantTransformer<Object, Properties>(properties0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(constantTransformer0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, (String) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, sQLNonTransientException0);
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", (String) null);
      IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) singletonListIterator0, 0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Locale.FilteringMode>[] iteratorArray0 = (Iterator<Locale.FilteringMode>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) comparator0, (Iterator<? extends Locale.FilteringMode>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ConstantTransformer.constantTransformer("h7Lm..Z4+,ec");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(".)*gyVv[!0rUz8hKAlO", "BZlA3Rc/?#t");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("h7Lm..Z4+,ec", sQLNonTransientException0);
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) singletonListIterator0, 0);
      ArrayListIterator<SQLRecoverableException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLRecoverableException>("ListIterator must not be null", (-1), 277);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      UniquePredicate<SQLNonTransientException> uniquePredicate0 = new UniquePredicate<SQLNonTransientException>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((String[]) null, 9, 43);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("3Fz0tMyP48t[JbFG");
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) singletonListIterator0, (Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("");
      IteratorUtils.toString((Iterator<DataTruncation>) null, (Transformer<? super DataTruncation, String>) transformer0, "", "", "");
      SQLWarning sQLWarning0 = new SQLWarning("OKlnH-", "?yBh");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "?yBh");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "B5SSf'", sQLInvalidAuthorizationSpecException0);
      Stack<EnumSet<Locale.FilteringMode>> stack0 = new Stack<EnumSet<Locale.FilteringMode>>();
      ResettableListIterator<EnumSet<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<EnumSet<Locale.FilteringMode>>) stack0);
      NullPredicate.nullPredicate();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      IteratorUtils.apply((Iterator<EnumSet<Locale.FilteringMode>>) resettableListIterator0, (Closure<? super EnumSet<Locale.FilteringMode>>) transformerClosure0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ResettableIterator<EnumSet<ClientInfoStatus>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.skippingIterator((Iterator<EnumSet<ClientInfoStatus>>) resettableIterator0, 350L);
      Comparator<Object> comparator0 = null;
      // Undeclared exception!
      try { 
        ComparatorPredicate.comparatorPredicate((Object) resettableIterator0, (Comparator<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator must not be null.
         //
         verifyException("org.apache.commons.collections4.functors.ComparatorPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = ">.";
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer(">.");
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) resettableIterator0, (Transformer<? super DataTruncation, String>) transformer0, "h7Lm..Z4+,ec", "h7Lm..Z4+,ec", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ListIterator<IIOMetadataNode> listIterator0 = stack0.listIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) listIterator0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[2];
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      IteratorUtils.size(resettableListIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) arrayDeque0);
      ExceptionTransformer.exceptionTransformer();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Node must not be null", "WcJ<", 44);
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("The type to check instanceof must not be null");
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) transformer0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("WcJ<", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.addSuppressed(sQLNonTransientConnectionException1);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'The type to check instanceof must not be null' on 'class java.sql.SQLNonTransientConnectionException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>((Comparator<? super Predicate<Object>>) null);
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ForClosure<Object> forClosure0 = new ForClosure<Object>(286, closure0);
      IfClosure<SQLTransientException> ifClosure0 = new IfClosure<SQLTransientException>(predicate0, forClosure0, forClosure0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("$0", "y4<<BK", (-963));
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      IfClosure<SQLTransientException> ifClosure1 = new IfClosure<SQLTransientException>(predicate0, forClosure0);
      IteratorUtils.apply((Iterator<SQLTransactionRollbackException>) singletonIterator0, (Closure<? super SQLTransactionRollbackException>) ifClosure1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ListIterator<IIOMetadataNode> listIterator0 = stack0.listIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) listIterator0);
      UniquePredicate<SQLNonTransientException> uniquePredicate0 = new UniquePredicate<SQLNonTransientException>();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLTimeoutException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("h7Lm..Z4+,ec");
      IteratorUtils.toString((Iterator<DataTruncation>) null, (Transformer<? super DataTruncation, String>) transformer0, "h7Lm..Z4+,ec", "h7Lm..Z4+,ec", "h7Lm..Z4+,ec");
      SQLWarning sQLWarning0 = new SQLWarning("B5SSf'", "h7Lm..Z4+,ec");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("iESP#%", "h7Lm..Z4+,ech7Lm..Z4+,ec", sQLWarning0);
      Transformer<SQLException, SQLTimeoutException> transformer1 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer1);
      IteratorUtils.asIterable((Iterator<? extends SQLTimeoutException>) iterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("iESP#%");
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Enumeration<SQLTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) singletonIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0);
      int[] intArray0 = new int[8];
      intArray0[0] = 100;
      intArray0[1] = (-807);
      intArray0[2] = (-905);
      intArray0[3] = 43;
      DataTruncation dataTruncation0 = new DataTruncation(100, true, true, 43, (-1073));
      SQLWarning[] sQLWarningArray0 = new SQLWarning[7];
      sQLWarningArray0[0] = (SQLWarning) dataTruncation0;
      sQLWarningArray0[1] = (SQLWarning) dataTruncation0;
      sQLWarningArray0[2] = (SQLWarning) dataTruncation0;
      sQLWarningArray0[3] = sQLWarning0;
      sQLWarningArray0[4] = (SQLWarning) dataTruncation0;
      sQLWarningArray0[5] = (SQLWarning) dataTruncation0;
      sQLWarningArray0[6] = (SQLWarning) dataTruncation0;
      ObjectArrayIterator<SQLWarning> objectArrayIterator0 = new ObjectArrayIterator<SQLWarning>(sQLWarningArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate.notPredicate((Predicate<? super Object>) uniquePredicate0);
      IteratorUtils.matchesAll((Iterator<SQLWarning>) objectArrayIterator0, (Predicate<? super SQLWarning>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ListIterator<IIOMetadataNode> listIterator0 = stack0.listIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) listIterator0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[2];
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      IteratorUtils.size(resettableListIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      ArrayList<Predicate<SQLTimeoutException>> arrayList0 = new ArrayList<Predicate<SQLTimeoutException>>();
      LoopingListIterator<Predicate<SQLTimeoutException>> loopingListIterator0 = new LoopingListIterator<Predicate<SQLTimeoutException>>(arrayList0);
      ListIterator<Predicate<SQLTimeoutException>> listIterator1 = IteratorUtils.unmodifiableListIterator((ListIterator<Predicate<SQLTimeoutException>>) loopingListIterator0);
      java.util.function.Predicate.isEqual((Object) listIterator1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("The predicate and transformer arrays must be the same size", "", 2);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, (-3181));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -3181
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      MapIterator<IIOMetadataNode, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<IIOMetadataNode>) mapIterator0, (-1454L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("h7Lm..Z4+,ec");
      IteratorUtils.toString((Iterator<DataTruncation>) null, (Transformer<? super DataTruncation, String>) transformer0, "h7Lm..Z4+,ec", "h7Lm..Z4+,ec", "h7Lm..Z4+,ec");
      SQLWarning sQLWarning0 = new SQLWarning("B5SSf'", "h7Lm..Z4+,ec");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("iESP#%", "h7Lm..Z4+,ech7Lm..Z4+,ec", sQLWarning0);
      Transformer<SQLException, SQLTimeoutException> transformer1 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer1);
      IteratorUtils.asIterable((Iterator<? extends SQLTimeoutException>) iterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("iESP#%");
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Enumeration<SQLTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) singletonIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[8];
      int[] intArray0 = new int[8];
      intArray0[0] = 100;
      intArray0[1] = (-807);
      intArray0[2] = (-905);
      intArray0[3] = 43;
      intArray0[4] = (-1073);
      intArray0[5] = 10;
      intArray0[6] = (-881);
      intArray0[7] = (-3024);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("iESP#%", "", sQLTimeoutException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray0, sQLNonTransientException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      int[] intArray1 = new int[5];
      intArray1[0] = 43;
      intArray1[1] = (-3024);
      intArray1[2] = (-905);
      intArray1[3] = 51;
      intArray1[4] = 10;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("T0;d:H.Ji^[co", "T0;d:H.Ji^[co", (-5035), intArray1);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("iESP#%", (String) null, intArray1);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("T0;d:H.Ji^[co", "h7Lm..Z4+,ech7Lm..Z4+,ec", 100, intArray1);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException(sQLTimeoutException0);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException("a3=S", "h7Lm..Z4+,ech7Lm..Z4+,ec", (-3024), intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      BatchUpdateException batchUpdateException7 = new BatchUpdateException(intArray0, batchUpdateException1);
      batchUpdateExceptionArray0[7] = batchUpdateException7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(batchUpdateExceptionArray0, (-3024), 4663);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning>(orderedMapIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("/p]f^O{");
      DataTruncation dataTruncation0 = new DataTruncation(10, true, true, 370, 370);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[4];
      sQLWarningArray0[0] = (SQLWarning) dataTruncation0;
      sQLWarningArray0[1] = (SQLWarning) dataTruncation0;
      sQLWarningArray0[2] = (SQLWarning) dataTruncation0;
      sQLWarningArray0[3] = (SQLWarning) dataTruncation0;
      ObjectArrayIterator<SQLWarning> objectArrayIterator0 = new ObjectArrayIterator<SQLWarning>(sQLWarningArray0);
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAll((Iterator<SQLWarning>) objectArrayIterator0, (Predicate<? super SQLWarning>) predicate1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ListIterator<IIOMetadataNode> listIterator0 = stack0.listIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, Vector<SQLTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>>(orderedMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("/p]f^O{");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Io^NAV(MAm", sQLSyntaxErrorException0);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0, false);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate<Object> uniquePredicate1 = new UniquePredicate<Object>();
      Properties properties0 = new Properties();
      Integer integer0 = new Integer(1685);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLSyntaxErrorException0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(uniquePredicate1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      java.util.function.Predicate.isEqual((Object) sQLTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("The predicate and transformer arrays must be the same size", "", 1685);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 1685);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1684
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[3];
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      NullPredicate.nullPredicate();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAll((Iterator<SQLWarning>) null, (Predicate<? super SQLWarning>) predicate1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, Vector<SQLTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>>(orderedMapIterator0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[7];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLDataException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fR}{dCHl");
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLNonTransientExceptionArray0[2]);
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("fR}{dCHl", "OXUiMq5BH\b>({*9");
      sQLNonTransientExceptionArray0[6] = sQLNonTransientException0;
      IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      IteratorUtils.size((Iterator<?>) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) arrayDeque0);
      Transformer<SQLException, SQLFeatureNotSupportedException> transformer0 = ExceptionTransformer.exceptionTransformer();
      IfTransformer<SQLIntegrityConstraintViolationException, SQLFeatureNotSupportedException> ifTransformer0 = new IfTransformer<SQLIntegrityConstraintViolationException, SQLFeatureNotSupportedException>((Predicate<? super SQLIntegrityConstraintViolationException>) null, transformer0, transformer0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLFeatureNotSupportedException>) ifTransformer0);
      ArrayDeque<SQLNonTransientConnectionException> arrayDeque1 = new ArrayDeque<SQLNonTransientConnectionException>();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning>(orderedMapIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[6];
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLSyntaxErrorException0;
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLSyntaxErrorException0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLSyntaxErrorException0;
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLSyntaxErrorException0;
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      NullPredicate.nullPredicate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, Vector<SQLTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>>(orderedMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("/4f^O");
      DataTruncation dataTruncation0 = new DataTruncation((-1), true, true, (-2946), 10);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[3];
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      Predicate<SQLNonTransientException> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) objectArrayListIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      MapIterator<SQLTransientException, SQLWarning> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, Vector<SQLTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>>(orderedMapIterator0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, SQLTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning>(orderedMapIterator0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) abstractOrderedMapIteratorDecorator0, class0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, Vector<SQLTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>>(orderedMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.isEmpty(orderedMapIterator0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) resettableIterator0);
      IteratorUtils.emptyOrderedIterator();
      SQLWarning[] sQLWarningArray0 = new SQLWarning[3];
      SQLWarning sQLWarning0 = new SQLWarning();
      sQLWarningArray0[0] = sQLWarning0;
      DataTruncation dataTruncation0 = new DataTruncation((-1), true, false, (-1), 1, sQLWarning0);
      sQLWarningArray0[1] = (SQLWarning) dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(695, true, false, (-1), 1);
      sQLWarningArray0[2] = (SQLWarning) dataTruncation1;
      ObjectArrayIterator<SQLWarning> objectArrayIterator0 = new ObjectArrayIterator<SQLWarning>(sQLWarningArray0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0, 0);
      IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableListIterator0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, Vector<SQLTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>>(orderedMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.isEmpty(orderedMapIterator0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) resettableIterator0);
      IteratorUtils.emptyOrderedIterator();
      SQLWarning[] sQLWarningArray0 = new SQLWarning[3];
      SQLWarning sQLWarning0 = new SQLWarning();
      sQLWarningArray0[0] = sQLWarning0;
      DataTruncation dataTruncation0 = new DataTruncation((-1), true, false, (-1), 1, sQLWarning0);
      sQLWarningArray0[1] = (SQLWarning) dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(695, true, false, (-1), 1);
      sQLWarningArray0[2] = (SQLWarning) dataTruncation1;
      ObjectArrayIterator<SQLWarning> objectArrayIterator0 = new ObjectArrayIterator<SQLWarning>(sQLWarningArray0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLWarning>) objectArrayIterator0, (Predicate<? super SQLWarning>) predicate1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      NullPredicate.nullPredicate();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLDataException sQLDataException0 = new SQLDataException("?00I!?mv!9", "u_.e#BjoE[S*Q@z ", batchUpdateException0);
      SQLWarning sQLWarning0 = new SQLWarning("u_.e#BjoE[S*Q@z ", sQLDataException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("u_.e#BjoE[S*Q@z ", "u_.e#BjoE[S*Q@z ", 44, sQLWarning0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("d", batchUpdateException0);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException1, false);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Properties properties0 = new Properties();
      Integer integer0 = new Integer(1685);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(integer0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<DataTruncation> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) resettableIterator0);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super DataTruncation>) nullIsExceptionPredicate0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) resettableIterator0, (Iterator<? extends SQLWarning>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ListIterator<IIOMetadataNode> listIterator0 = stack0.listIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) listIterator0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("4'", ";pjx");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException(";pjx", ";pjx", 32);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException3);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("4'", "\u0005bHIm", 32);
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) objectArrayListIterator0);
      IteratorUtils.isEmpty(objectArrayListIterator0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) resettableIterator0);
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ListIterator<IIOMetadataNode> listIterator0 = stack0.listIterator();
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) listIterator0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[2];
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      IteratorUtils.size(resettableListIterator0);
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) arrayDeque0);
      Transformer<SQLException, SQLFeatureNotSupportedException> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator1, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLFeatureNotSupportedException>) transformer0);
      ArrayDeque<SQLNonTransientConnectionException> arrayDeque1 = new ArrayDeque<SQLNonTransientConnectionException>();
      LoopingIterator<SQLNonTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLNonTransientConnectionException>(arrayDeque1);
      java.util.function.Predicate.isEqual((Object) zippingIterator0);
      EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((DataTruncation[]) null, 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) resettableIterator0);
      IteratorUtils.emptyListIterator();
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[2];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("|jF~@>\t>");
      SQLException sQLException0 = new SQLException(";reZK^xCTd]j`Q=", "|jF~@>\t>", 2277, sQLInvalidAuthorizationSpecException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLException0);
      batchUpdateException0.getNextException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 248, (Throwable) null);
      SQLDataException sQLDataException0 = new SQLDataException(";reZK^xCTd]j`Q=", sQLIntegrityConstraintViolationException0);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("", sQLInvalidAuthorizationSpecException0);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLDataException1;
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      NullPredicate.nullPredicate();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate1);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) objectArrayListIterator0, (Predicate<? super SQLNonTransientException>) nullIsExceptionPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      OrderedMapIterator<SQLNonTransientConnectionException, Vector<SQLTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>>(orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>>(abstractOrderedMapIteratorDecorator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      IteratorUtils.isEmpty(abstractOrderedMapIteratorDecorator0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) resettableIterator0);
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>) null, (Iterator<? extends String>) null, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("=TAw?hBOg9s%n", "=TAw?hBOg9s%n");
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      StringTokenizer stringTokenizer0 = new StringTokenizer("Vz.juozSp", "", true);
      IteratorUtils.getIterator(stringTokenizer0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException((String) null, (String) null);
      sQLInvalidAuthorizationSpecException1.fillInStackTrace();
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      NullPredicate.nullPredicate();
      Properties properties0 = new Properties();
      ConstantTransformer<Object, Properties> constantTransformer0 = new ConstantTransformer<Object, Properties>(properties0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(constantTransformer0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      IteratorUtils.getIterator(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[3];
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Predicate<SQLNonTransientException> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) objectArrayListIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) singletonListIterator0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) listIterator0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0, (Collection<? super IIOMetadataNode>) arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning>(orderedMapIterator0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) abstractOrderedMapIteratorDecorator0, class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, (-3638));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransactionRollbackException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLSyntaxErrorException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLFeatureNotSupportedException0, (Equator<Object>) defaultEquator0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      Integer integer0 = new Integer(119);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(integer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = (Predicate<Object>) nullIsExceptionPredicate0;
      predicateArray0[1] = (Predicate<Object>) nullIsExceptionPredicate0;
      OnePredicate<SQLException> onePredicate0 = new OnePredicate<SQLException>(predicateArray0);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLTransientException>) predicateArray0[1]);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IfClosure<SQLTransientException> ifClosure0 = new IfClosure<SQLTransientException>((Predicate<? super SQLTransientException>) null, closure0, closure0);
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLTransactionRollbackException>) singletonListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply(iterator0, (Closure<? super SQLTransactionRollbackException>) ifClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      LoopingListIterator<Locale.FilteringMode> loopingListIterator0 = new LoopingListIterator<Locale.FilteringMode>(linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ListIterator<IIOMetadataNode> listIterator0 = stack0.listIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) listIterator0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<Locale.FilteringMode> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Locale.FilteringMode>) predicate0);
      IteratorUtils.find((Iterator<Locale.FilteringMode>) null, (Predicate<? super Locale.FilteringMode>) predicate1);
      ArrayIterator<SQLSyntaxErrorException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLSyntaxErrorException>(predicate1, 1246, 1779);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      IteratorUtils.isEmpty((Iterator<?>) null);
      IteratorUtils.emptyMapIterator();
      int int0 = 100;
      ArrayListIterator<Integer> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<Integer>((Object) null, 12, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      IteratorUtils.isEmpty((Iterator<?>) null);
      IteratorUtils.emptyMapIterator();
      ArrayListIterator<Integer> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<Integer>((Object) null, 12, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, Vector<SQLTransientException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>>(orderedMapIterator0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.isEmpty(abstractOrderedMapIteratorDecorator0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      IteratorUtils.emptyIterator();
      Stack<SQLException> stack0 = new Stack<SQLException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLRecoverableException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) null);
      IteratorUtils.emptyListIterator();
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(stack0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<BatchUpdateException>) loopingListIterator0);
      ListIteratorWrapper<BatchUpdateException> listIteratorWrapper0 = new ListIteratorWrapper<BatchUpdateException>(iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) listIteratorWrapper0, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      IteratorUtils.emptyListIterator();
      String string0 = "Transformer must not be null";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Transformer must not be null", "Transformer must not be null", sQLDataException0);
      Hashtable<SQLInvalidAuthorizationSpecException, PriorityQueue<Object>> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, PriorityQueue<Object>>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      IteratorUtils.emptyListIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Transformer must not be null", "Transformer must not be null", sQLDataException0);
      Hashtable<SQLInvalidAuthorizationSpecException, PriorityQueue<Object>> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, PriorityQueue<Object>>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, PriorityQueue<Object>> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, PriorityQueue<Object>>(hashtable0);
      entrySetMapIterator0.toString();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLSyntaxErrorException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<BatchUpdateException>) objectArrayListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) listIterator0, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      OrderedMapIterator<SQLRecoverableException, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning>(orderedMapIterator0);
      OrderedMapIterator<SQLRecoverableException, SQLWarning> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLRecoverableException, ? extends SQLWarning>) abstractOrderedMapIteratorDecorator0);
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning>(orderedMapIterator1);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) orderedMapIterator0, class0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<DataTruncation> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) resettableIterator0);
      IteratorUtils.getIterator(iterator0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "org.apache.commons.collections4.IteratorUtils";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.IteratorUtils");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.IteratorUtils");
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[7];
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      sQLNonTransientExceptionArray0[6] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      Predicate<SQLNonTransientException> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) objectArrayListIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientExceptionArray0[6]);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) sQLNonTransientConnectionException0, (Equator<Object>) defaultEquator0);
      Predicate<Object> predicate2 = NotPredicate.notPredicate((Predicate<? super Object>) predicate1);
      int int0 = 10;
      Transformer<Object, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.IteratorUtils");
      Closure<SQLException> closure0 = TransformerClosure.transformerClosure((Transformer<? super SQLException, ?>) transformer0);
      Closure<SQLException> closure1 = IfClosure.ifClosure((Predicate<? super SQLException>) predicate2, (Closure<? super SQLException>) closure0);
      Closure<SQLException> closure2 = ForClosure.forClosure(10, (Closure<? super SQLException>) closure1);
      Closure<SQLException> closure3 = IfClosure.ifClosure((Predicate<? super SQLException>) predicate2, (Closure<? super SQLException>) closure2, (Closure<? super SQLException>) closure2);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0, (Closure<? super SQLInvalidAuthorizationSpecException>) closure3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'org.apache.commons.collections4.IteratorUtils' on 'class java.sql.SQLInvalidAuthorizationSpecException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      OrderedMapIterator<SQLRecoverableException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning>(orderedMapIterator0);
      OrderedMapIterator<SQLRecoverableException, SQLWarning> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLRecoverableException, ? extends SQLWarning>) abstractOrderedMapIteratorDecorator0);
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning>(orderedMapIterator1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) null);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) iterator0, class0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ListIterator<IIOMetadataNode> listIterator0 = stack0.listIterator();
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) listIterator0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[3];
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      Predicate<SQLNonTransientException> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) objectArrayListIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      IteratorUtils.contains((Iterator<BatchUpdateException>) null, (Object) zippingIterator0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      int[] intArray0 = new int[6];
      intArray0[0] = 128;
      intArray0[1] = 1798;
      intArray0[2] = (-1739);
      intArray0[3] = (-602);
      intArray0[4] = 10;
      intArray0[5] = (-1463);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "]Osn}`su_", intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 100, 122);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Properties>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ListIterator<IIOMetadataNode> listIterator0 = stack0.listIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) listIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("RO");
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      Iterable<SQLIntegrityConstraintViolationException> iterable0 = new Vector<SQLIntegrityConstraintViolationException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("RO");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      stack0.add(iIOMetadataNode1);
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.size(listIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning>(orderedMapIterator0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) abstractOrderedMapIteratorDecorator0, class0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) resettableIterator0);
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) orderedMapIterator0, class0);
      OrderedMapIterator<EnumSet<Locale.FilteringMode>, Object> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<EnumSet<Locale.FilteringMode>, Object> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<EnumSet<Locale.FilteringMode>, Object>(orderedMapIterator1);
      IteratorUtils.boundedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) abstractOrderedMapIteratorDecorator1, 1L);
      // Undeclared exception!
      try { 
        FactoryTransformer.factoryTransformer((Factory<? extends String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factory must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, Vector<SQLTransientException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>>(orderedMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.IteratorUtils");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.IteratorUtils");
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      IteratorUtils.asIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.IteratorUtils");
      iIOMetadataNode0.getParentNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<LinkedList<TreeSet>>) singletonIterator0, (Transformer<? super LinkedList<TreeSet>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)60;
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-50);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Hashtable<SQLInvalidAuthorizationSpecException, PriorityQueue<Object>> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, PriorityQueue<Object>>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, PriorityQueue<Object>> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, PriorityQueue<Object>>(hashtable0);
      entrySetMapIterator0.toString();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0);
      Comparator<SQLTransientException> comparator0 = (Comparator<SQLTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 8);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) null, (Predicate<? super SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      OrderedMapIterator<SQLFeatureNotSupportedException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLFeatureNotSupportedException, IIOMetadataNode>) orderedMapIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) resettableIterator0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) resettableListIterator0, (Equator<Object>) defaultEquator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) null, (Predicate<? super Properties>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet.of(locale_FilteringMode0, locale_FilteringMode1, locale_FilteringMode0);
      Stack<EnumSet<Locale.FilteringMode>> stack0 = new Stack<EnumSet<Locale.FilteringMode>>();
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.noneOf(class0);
      stack0.add(enumSet0);
      IteratorUtils.loopingListIterator((List<EnumSet<Locale.FilteringMode>>) stack0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NOPClosure.nopClosure();
      Transformer<Object, SQLDataException> transformer0 = InvokerTransformer.invokerTransformer("o72AwJs)MguH");
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure0, true);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(1482, closure1);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, forClosure0, true);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) resettableIterator0);
      IteratorUtils.emptyListIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) "RZ*UDJas;K4|;", comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      WhileClosure.whileClosure((Predicate<? super Object>) predicate1, (Closure<? super Object>) closure0, true);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate1, closure0, true);
      IteratorUtils.apply((Iterator<EnumSet<Locale.FilteringMode>>) null, (Closure<? super EnumSet<Locale.FilteringMode>>) whileClosure0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ListIterator<IIOMetadataNode> listIterator0 = stack0.listIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) listIterator0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[2];
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      IteratorUtils.size(resettableListIterator0);
      ExceptionTransformer.exceptionTransformer();
      ArrayDeque<SQLNonTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLNonTransientConnectionException>();
      LoopingIterator<SQLNonTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLNonTransientConnectionException>(arrayDeque0);
      ExceptionClosure.exceptionClosure();
      Closure<SQLTransientException> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLTransactionRollbackException>) null, (Closure<? super SQLTransactionRollbackException>) closure0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientException, PriorityQueue<ArrayDeque>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      int int0 = 4;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[0];
      int int0 = 0;
      IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, 0);
      String string0 = "bv@n";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("bv@n");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[9];
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      DataTruncation dataTruncation0 = null;
      arrayList0.add((DataTruncation) null);
      IteratorUtils.singletonIterator(arrayList0);
      ArrayList<SQLNonTransientConnectionException> arrayList1 = new ArrayList<SQLNonTransientConnectionException>();
      arrayList1.trimToSize();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) arrayList1);
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) resettableListIterator0;
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) resettableListIterator0;
      iteratorArray0[2] = (Iterator<SQLNonTransientConnectionException>) resettableListIterator0;
      iteratorArray0[3] = (Iterator<SQLNonTransientConnectionException>) resettableListIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLException>[]) iteratorArray0);
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.unmodifiableIterator((Iterator<BatchUpdateException>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning>(orderedMapIterator0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) abstractOrderedMapIteratorDecorator0, class0);
      Stack<EnumSet<Locale.FilteringMode>> stack0 = new Stack<EnumSet<Locale.FilteringMode>>();
      ResettableListIterator<EnumSet<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<EnumSet<Locale.FilteringMode>>) stack0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure0, true);
      ForClosure<Object> forClosure0 = new ForClosure<Object>((-1), closure1);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, forClosure0, true);
      IteratorUtils.apply((Iterator<EnumSet<Locale.FilteringMode>>) resettableListIterator0, (Closure<? super EnumSet<Locale.FilteringMode>>) whileClosure0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte byte0 = (byte)60;
      Iterator<Object> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning>(orderedMapIterator0);
      Iterator<SQLSyntaxErrorException> iterator0 = null;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fi.k", "");
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("fi.k", "");
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("", sQLSyntaxErrorException1);
      sQLSyntaxErrorException2.addSuppressed(sQLSyntaxErrorException3);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[9];
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException1;
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException(sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException4;
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException1;
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException3;
      sQLSyntaxErrorExceptionArray0[7] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException((String) null, "org.apache.commons.collections4.functors.ConstantFactory");
      sQLSyntaxErrorExceptionArray0[8] = sQLSyntaxErrorException5;
      ObjectArrayIterator<SQLSyntaxErrorException> objectArrayIterator0 = new ObjectArrayIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) objectArrayIterator0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) objectArrayIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator((IIOMetadataNode) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ListIteratorWrapper<IIOMetadataNode> listIteratorWrapper0 = new ListIteratorWrapper<IIOMetadataNode>(resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) listIteratorWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Node must not be null", "Node must not be null");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[8];
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException1;
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException1;
      OrderedMapIterator<DataTruncation, EnumSet<Locale.FilteringMode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, EnumSet<Locale.FilteringMode>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, EnumSet<Locale.FilteringMode>>(orderedMapIterator0);
      MapIterator<DataTruncation, EnumSet<Locale.FilteringMode>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, EnumSet<Locale.FilteringMode>>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.isEmpty(mapIterator0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      IteratorUtils.emptyIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) orderedMapIterator0);
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) orderedMapIterator0, (-2946));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.IteratorUtils");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientConnectionException0);
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      IteratorUtils.asIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.IteratorUtils");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.size(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ListIterator<IIOMetadataNode> listIterator0 = stack0.listIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) listIterator0);
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      linkedHashSet0.add(locale_FilteringMode0);
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) linkedHashSet0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>("QqTj=Ll", classArray0, predicateArray0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(invokerTransformer0);
      predicateArray0[0] = (Predicate<Object>) transformerPredicate0;
      Predicate<Object> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) invokerTransformer0, (Predicate<? super Object>) transformerPredicate0);
      predicateArray0[1] = predicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Locale.FilteringMode>) resettableIterator0, (Predicate<? super Locale.FilteringMode>) anyPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'QqTj=Ll' on 'class java.util.Locale$FilteringMode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning>(orderedMapIterator0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>((BatchUpdateException) null);
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) singletonIterator0);
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(list0);
      IteratorUtils.unmodifiableIterator((Iterator<BatchUpdateException>) singletonIterator0);
      ListIteratorWrapper<BatchUpdateException> listIteratorWrapper0 = new ListIteratorWrapper<BatchUpdateException>(singletonIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) listIteratorWrapper0, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, Vector<SQLTransientException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>>(orderedMapIterator0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) linkedList0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) iterator0, (Iterator<? extends SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 5);
      OrderedMapIterator<Properties, SQLFeatureNotSupportedException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<Properties, SQLFeatureNotSupportedException>(orderedMapIterator1);
      MapIterator<Properties, SQLFeatureNotSupportedException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Properties, ? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator1);
      iteratorArray0[0] = (Iterator<Properties>) mapIterator0;
      ListIteratorWrapper<Properties> listIteratorWrapper0 = new ListIteratorWrapper<Properties>(mapIterator0);
      iteratorArray0[1] = (Iterator<Properties>) listIteratorWrapper0;
      BoundedIterator<Properties> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Properties>) abstractOrderedMapIteratorDecorator1, 0L, 0L);
      iteratorArray0[2] = (Iterator<Properties>) boundedIterator0;
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) listIteratorWrapper0);
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Properties>) list0);
      iteratorArray0[3] = (Iterator<Properties>) resettableIterator0;
      Properties[] propertiesArray0 = new Properties[5];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      ResettableIterator<Properties> resettableIterator1 = IteratorUtils.arrayIterator(propertiesArray0);
      iteratorArray0[4] = (Iterator<Properties>) resettableIterator1;
      Iterator<Properties> iterator1 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>[]) iteratorArray0);
      IteratorUtils.chainedIterator((Iterator<? extends Properties>) iterator1, (Iterator<? extends Properties>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, Vector<SQLTransientException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>>(orderedMapIterator0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) linkedList0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) iterator0, (Iterator<? extends SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      OrderedIterator<Locale.FilteringMode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) orderedIterator0, 1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "e'K|<PcIqx");
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      IteratorUtils.asIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      EmptyListIterator.resettableEmptyListIterator();
      Iterator<SQLTransactionRollbackException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0);
      IteratorUtils.unmodifiableIterator(iterator0);
      int int0 = 89;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 89, 691);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate.uniquePredicate();
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      uniquePredicate0.evaluate(locale_FilteringMode0);
      linkedHashSet0.add(locale_FilteringMode0);
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) linkedHashSet0);
      // Undeclared exception!
      IteratorUtils.find((Iterator<Locale.FilteringMode>) resettableIterator0, (Predicate<? super Locale.FilteringMode>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, Vector<SQLTransientException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>>(orderedMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Array class must not be null");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapIterator");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("I5@Wc+r&n{");
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[0];
      IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      IteratorUtils.getIterator((Object) null);
      IIOMetadataNode[] iIOMetadataNodeArray1 = new IIOMetadataNode[4];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("End index must not be less than start index.");
      iIOMetadataNodeArray1[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("O");
      iIOMetadataNodeArray1[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("End index must not be less than start index.");
      iIOMetadataNodeArray1[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode((String) null);
      iIOMetadataNodeArray1[3] = iIOMetadataNode3;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("+i>VfBa7VfI,dg=CO");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLFeatureNotSupportedException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IteratorUtils.find((Iterator<IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 31, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ListIterator<IIOMetadataNode> listIterator0 = stack0.listIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) listIterator0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[3];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLDataException0;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      OrderedMapIterator<DataTruncation, EnumSet<Locale.FilteringMode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<DataTruncation, EnumSet<Locale.FilteringMode>> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends EnumSet<Locale.FilteringMode>>) orderedMapIterator0);
      MapIterator<DataTruncation, EnumSet<Locale.FilteringMode>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.isEmpty(mapIterator1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      IteratorUtils.size(resettableListIterator0);
      IteratorUtils.emptyListIterator();
      HashMap<IIOMetadataNode, Object> hashMap0 = new HashMap<IIOMetadataNode, Object>();
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate.uniquePredicate();
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      linkedHashSet0.add(locale_FilteringMode0);
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) linkedHashSet0);
      IteratorUtils.find((Iterator<Locale.FilteringMode>) resettableIterator0, (Predicate<? super Locale.FilteringMode>) uniquePredicate0);
      ArrayIterator<SQLSyntaxErrorException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLSyntaxErrorException>((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning>(orderedMapIterator0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) resettableIterator0);
      Iterator<Locale.FilteringMode>[] iteratorArray0 = (Iterator<Locale.FilteringMode>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      LoopingListIterator<Locale.FilteringMode> loopingListIterator0 = new LoopingListIterator<Locale.FilteringMode>(linkedList0);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      byte byte0 = (byte)1;
      byte byte1 = (byte)85;
      byte byte2 = (byte)91;
      byte byte3 = (byte)10;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = byte3;
      byteArray0[1] = byte0;
      byteArray0[2] = byte2;
      byteArray0[3] = byte3;
      byteArray0[4] = byte3;
      byteArray0[5] = byte2;
      byteArray0[6] = byte1;
      byteArray0[7] = byte0;
      byte byte4 = (byte)100;
      byteArray0[8] = byte4;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      String string0 = "&\\=qlz7M";
      String string1 = "";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(string0, string1);
      String string2 = null;
      int int0 = 381;
      SQLTransientException sQLTransientException0 = new SQLTransientException(string2, string0, int0);
      sQLSyntaxErrorException0.initCause(sQLTransientException0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning>(orderedMapIterator0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)43;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "nodeList must not be null!";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("nodeList must not be null!");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("nodeList must not be null!");
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[0];
      IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      try { 
        iIOMetadataNode2.setTextContent("nodeList must not be null!");
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Method not supported
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      IteratorUtils.getIterator(sQLInvalidAuthorizationSpecException0);
      OrderedMapIterator<IIOMetadataNode, Vector<SQLClientInfoException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<IIOMetadataNode, Vector<SQLClientInfoException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, Vector<SQLClientInfoException>>(orderedMapIterator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) abstractMapIteratorDecorator0);
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Iterator<? extends IIOMetadataNode>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) iterator1, 873L, (-2514L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-50);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Hashtable<SQLInvalidAuthorizationSpecException, PriorityQueue<Object>> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, PriorityQueue<Object>>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, PriorityQueue<Object>> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, PriorityQueue<Object>>(hashtable0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      LoopingListIterator<Locale.FilteringMode> loopingListIterator0 = new LoopingListIterator<Locale.FilteringMode>(arrayList0);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Locale.FilteringMode>) loopingListIterator0, (Predicate<? super Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ListIterator<IIOMetadataNode> listIterator0 = stack0.listIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) listIterator0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[3];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLDataException0;
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<DataTruncation, EnumSet<Locale.FilteringMode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, EnumSet<Locale.FilteringMode>>) orderedMapIterator0);
      Stack<BatchUpdateException> stack1 = new Stack<BatchUpdateException>();
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(stack1);
      IteratorUtils.unmodifiableIterator((Iterator<BatchUpdateException>) loopingListIterator0);
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLDataException0, (Equator<SQLException>) null);
      IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) loopingListIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      ListIteratorWrapper<BatchUpdateException> listIteratorWrapper0 = new ListIteratorWrapper<BatchUpdateException>(loopingListIterator0);
      IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) listIteratorWrapper0, (Predicate<? super BatchUpdateException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      MapIterator<SQLTransientConnectionException, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException((String) null);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.emptyIterator();
      HashMap<SQLNonTransientException, String> hashMap0 = new HashMap<SQLNonTransientException, String>();
      Transformer<SQLNonTransientException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLNonTransientException, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) transformer0);
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      OrderedIterator<SQLException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<SQLException>) orderedIterator0);
      Predicate<SQLException> predicate0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) resettableIterator0);
      IteratorUtils.emptyListIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Transformer must not be null", (String) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientConnectionException0.forEach(consumer0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException((String) null);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator1 = IteratorUtils.emptyIterator();
      HashMap<SQLNonTransientException, String> hashMap0 = new HashMap<SQLNonTransientException, String>();
      Transformer<SQLNonTransientException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLNonTransientException, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator1, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) transformer0);
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      OrderedIterator<SQLException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<SQLException>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ListIterator<IIOMetadataNode> listIterator0 = stack0.listIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) listIterator0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[3];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLDataException0;
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      Predicate<SQLNonTransientException> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) objectArrayListIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      IteratorUtils.getIterator(sQLInvalidAuthorizationSpecException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("xh", "org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("(DzWC", "org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", 261, sQLInvalidAuthorizationSpecException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException(";PDV", (String) null, (-3635), sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("9c^EN|H*7[8'K{f'Y?D", (String) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("9c^EN|H*7[8'K{f'Y?D", "org.apache.commons.collections4.functors.NullIsFalsePredicate");
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("(DzWC", "");
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException5;
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException3;
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException4;
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException1;
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0, 0);
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<SQLException> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLException>>) arrayList0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) objectArrayListIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet.of(locale_FilteringMode0, locale_FilteringMode1, locale_FilteringMode0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "=TAw?hBOg9s%n");
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      Iterator<?> iterator0 = IteratorUtils.getIterator(comparator0);
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ListIterator<IIOMetadataNode> listIterator0 = stack0.listIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) listIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Itbt", "");
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      IteratorUtils.emptyOrderedIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, Vector<SQLTransientException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Vector<SQLTransientException>>(orderedMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends StringTokenizer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLRecoverableException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning>(orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning>(abstractOrderedMapIteratorDecorator0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) abstractOrderedMapIteratorDecorator0, class0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = (Iterator<DataTruncation>) resettableIterator0;
      iteratorArray0[1] = (Iterator<DataTruncation>) resettableIterator0;
      iteratorArray0[2] = (Iterator<DataTruncation>) resettableIterator0;
      Iterator<DataTruncation> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) iterator0);
      IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) resettableIterator0, 0L, 0L);
      IteratorUtils.asIterable((Iterator<? extends DataTruncation>) iterator0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[2];
      SQLDataException sQLDataException0 = new SQLDataException("2*7D!<\"", "Iterator must not be null", 100);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLDataException0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-103);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null);
      sQLSyntaxErrorException0.initCause(sQLDataException0);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLSyntaxErrorException0;
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLException>) resettableListIterator0);
      IteratorUtils.size(resettableListIterator0);
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) arrayDeque0);
      Transformer<SQLException, SQLFeatureNotSupportedException> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLFeatureNotSupportedException>) transformer0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ListIterator<IIOMetadataNode> listIterator0 = stack0.listIterator();
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) listIterator0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[2];
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      IteratorUtils.size(resettableListIterator0);
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) arrayDeque0);
      Transformer<SQLException, SQLFeatureNotSupportedException> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator1, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLFeatureNotSupportedException>) transformer0);
      ArrayDeque<SQLNonTransientConnectionException> arrayDeque1 = new ArrayDeque<SQLNonTransientConnectionException>();
      LoopingIterator<SQLNonTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLNonTransientConnectionException>(arrayDeque1);
      java.util.function.Predicate.isEqual((Object) zippingIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) null, (Iterator<? extends Locale.FilteringMode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 4);
      Comparator<DataTruncation> comparator0 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      ArrayList<Properties> arrayList0 = new ArrayList<Properties>();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Properties>) arrayList0);
      IteratorUtils.isEmpty(resettableIterator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      String string0 = "prefix may not be null";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("prefix may not be null");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("nodeList must not be null!");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("prefix may not be null");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      try { 
        iIOMetadataNode4.setTextContent("prefix may not be null");
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Method not supported
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-1321), (-2092));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      stack0.listIterator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0);
      IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) singletonIterator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) null, (Collection<? super Locale.FilteringMode>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.functors.FactoryTransformer", sQLTransientConnectionException0);
      arrayList0.add(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) arrayList0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[6];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.functors.FactoryTransformer", sQLTransientConnectionException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("org.apache.commons.collections4.functors.FactoryTransformer", "2(");
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("org.apache.commons.collections4.functors.FactoryTransformer", "2(");
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("2(", "org.apache.commons.collections4.functors.FactoryTransformer", sQLTransientConnectionException0);
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0, true);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) singletonIterator0);
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>();
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) linkedHashSet0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) singletonIterator0, (Iterator<? extends SQLNonTransientConnectionException>) iterator0, (Iterator<? extends SQLNonTransientConnectionException>) iterator0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[8];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "F7n^#S`[+LDKxA%{L-", 0, sQLTransactionRollbackException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 0, sQLTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("=QXtM8", "");
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("", "(DzWC", 0, sQLTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("_Cgks%d", (String) null, (-17), sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("=QXtM8", "9]a");
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("F7n^#S`[+LDKxA%{L-", "");
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("9]a", (String) null);
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[7] = sQLNonTransientConnectionException7;
      Predicate<SQLNonTransientException> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) null, (Predicate<? super SQLNonTransientException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning>(orderedMapIterator0);
      NullPredicate.nullPredicate();
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[2];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "@gflbnU_");
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      SQLDataException sQLDataException0 = new SQLDataException("", "", 9);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLDataException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, 0, (-2946));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, Vector<SQLTransientException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) orderedMapIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      DataTruncation dataTruncation0 = new DataTruncation((-382), true, true, 255, (-382));
      SQLDataException sQLDataException0 = new SQLDataException((String) null, dataTruncation0);
      sQLDataException0.fillInStackTrace();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.map.Flat3Map$EntrySetIterator", (String) null, 0, hashtable0, sQLDataException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", (String) null, 1099, sQLClientInfoException0);
      arrayDeque0.add(sQLFeatureNotSupportedException0);
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) arrayDeque0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Integer[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Properties>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[0];
      int int0 = 0;
      IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, 0);
      String string0 = "bv@n";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("bv@n");
      iIOMetadataNode0.getLastChild();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getLastChild();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 5;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("@lg~]H'#5|AeCUWiU", "@lg~]H'#5|AeCUWiU", intArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      ArrayList<Properties> arrayList0 = new ArrayList<Properties>(linkedList0);
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Properties>) arrayList0);
      IteratorUtils.isEmpty(resettableIterator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      String string0 = "prefix may not be null";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("prefix may not be null");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      try { 
        iIOMetadataNode0.isSameNode(iIOMetadataNode1);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Method not supported
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) orderedMapIterator0;
      iteratorArray0[1] = (Iterator<IIOMetadataNode>) orderedMapIterator0;
      OrderedMapIterator<IIOMetadataNode, SQLSyntaxErrorException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<IIOMetadataNode, SQLSyntaxErrorException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ? extends SQLSyntaxErrorException>) orderedMapIterator1);
      iteratorArray0[2] = (Iterator<IIOMetadataNode>) mapIterator0;
      iteratorArray0[3] = (Iterator<IIOMetadataNode>) orderedMapIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[8];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("|xf@~Gu", "", sQLTransactionRollbackException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", "|xf@~Gu", 0, sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("R(iJEN/");
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException2;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("|xf@~Gu", "&s'y}eVEc=r ", intArray0, sQLNonTransientConnectionException2);
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("R(iJEN/", "R(iJEN/", 0, batchUpdateException0);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("bwtCzXeyb", "bwtCzXeyb", 0);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("No next() entry in the iteration", batchUpdateException0);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException6;
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException("[");
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException7;
      SQLNonTransientConnectionException sQLNonTransientConnectionException8 = new SQLNonTransientConnectionException("", "Bj", sQLNonTransientConnectionException5);
      sQLNonTransientConnectionExceptionArray0[7] = sQLNonTransientConnectionException8;
      IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      LoopingListIterator<Locale.FilteringMode> loopingListIterator0 = new LoopingListIterator<Locale.FilteringMode>(linkedList0);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      IteratorUtils.find((Iterator<Locale.FilteringMode>) loopingListIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      ArrayIterator<SQLSyntaxErrorException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLSyntaxErrorException>((Object) null, 44, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 7);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode1, locale_FilteringMode0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertSame(locale_FilteringMode0, locale_FilteringMode1);
      assertSame(locale_FilteringMode1, locale_FilteringMode0);
      
      EnumSet<Locale.FilteringMode> enumSet1 = EnumSet.complementOf(enumSet0);
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertFalse(enumSet1.contains(locale_FilteringMode0));
      assertEquals(1, enumSet0.size());
      assertEquals(4, enumSet1.size());
      assertNotNull(enumSet1);
      assertSame(locale_FilteringMode0, locale_FilteringMode1);
      assertSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      
      enumSetArray0[0] = enumSet1;
      EnumSet<Locale.FilteringMode> enumSet2 = EnumSet.of(locale_FilteringMode1);
      assertFalse(enumSet2.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertTrue(enumSet2.contains(locale_FilteringMode0));
      assertEquals(1, enumSet2.size());
      assertNotNull(enumSet2);
      assertSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet2, enumSet1);
      
      enumSetArray0[1] = enumSet2;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet3 = EnumSet.range(locale_FilteringMode2, locale_FilteringMode0);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode0));
      assertFalse(enumSet3.equals((Object)enumSet1));
      assertFalse(enumSet3.equals((Object)enumSet0));
      assertFalse(enumSet3.equals((Object)enumSet2));
      assertTrue(enumSet3.contains(locale_FilteringMode0));
      assertEquals(4, enumSet3.size());
      assertNotNull(enumSet3);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode2);
      assertSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode0);
      assertNotSame(enumSet3, enumSet1);
      assertNotSame(enumSet3, enumSet0);
      assertNotSame(enumSet3, enumSet2);
      
      enumSetArray0[2] = enumSet3;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet4 = EnumSet.of(locale_FilteringMode1, locale_FilteringMode2, locale_FilteringMode3, locale_FilteringMode0);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode3));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode3));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode3));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode0));
      assertFalse(locale_FilteringMode3.equals((Object)locale_FilteringMode0));
      assertFalse(locale_FilteringMode3.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode3.equals((Object)locale_FilteringMode1));
      assertFalse(enumSet4.equals((Object)enumSet3));
      assertFalse(enumSet4.equals((Object)enumSet2));
      assertFalse(enumSet4.equals((Object)enumSet1));
      assertFalse(enumSet4.equals((Object)enumSet0));
      assertTrue(enumSet4.contains(locale_FilteringMode0));
      assertEquals(3, enumSet4.size());
      assertNotNull(enumSet4);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode3);
      assertSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode3);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode2);
      assertSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode3);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode3, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode3, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode3, locale_FilteringMode1);
      assertNotSame(enumSet4, enumSet3);
      assertNotSame(enumSet4, enumSet2);
      assertNotSame(enumSet4, enumSet1);
      assertNotSame(enumSet4, enumSet0);
      
      enumSetArray0[3] = enumSet4;
      EnumSet<Locale.FilteringMode> enumSet5 = EnumSet.of(locale_FilteringMode3);
      assertFalse(locale_FilteringMode3.equals((Object)locale_FilteringMode0));
      assertFalse(locale_FilteringMode3.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode3.equals((Object)locale_FilteringMode1));
      assertFalse(enumSet5.equals((Object)enumSet1));
      assertFalse(enumSet5.equals((Object)enumSet0));
      assertFalse(enumSet5.equals((Object)enumSet2));
      assertFalse(enumSet5.equals((Object)enumSet3));
      assertFalse(enumSet5.equals((Object)enumSet4));
      assertFalse(enumSet5.contains(locale_FilteringMode0));
      assertTrue(enumSet5.contains(locale_FilteringMode3));
      assertEquals(1, enumSet5.size());
      assertNotNull(enumSet5);
      assertNotSame(locale_FilteringMode3, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode3, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode3, locale_FilteringMode1);
      assertNotSame(enumSet5, enumSet1);
      assertNotSame(enumSet5, enumSet0);
      assertNotSame(enumSet5, enumSet2);
      assertNotSame(enumSet5, enumSet3);
      assertNotSame(enumSet5, enumSet4);
      
      enumSetArray0[4] = enumSet5;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[9];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      locale_FilteringModeArray0[2] = locale_FilteringMode0;
      locale_FilteringModeArray0[3] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[4] = locale_FilteringMode5;
      locale_FilteringModeArray0[5] = locale_FilteringMode2;
      locale_FilteringModeArray0[6] = locale_FilteringMode2;
      locale_FilteringModeArray0[7] = locale_FilteringMode1;
      locale_FilteringModeArray0[8] = locale_FilteringMode0;
      EnumSet<Locale.FilteringMode> enumSet6 = EnumSet.of(locale_FilteringMode4, locale_FilteringModeArray0);
      assertFalse(locale_FilteringMode4.equals((Object)locale_FilteringMode3));
      assertFalse(locale_FilteringMode4.equals((Object)locale_FilteringMode5));
      assertFalse(locale_FilteringMode4.equals((Object)locale_FilteringMode2));
      assertFalse(enumSet6.equals((Object)enumSet1));
      assertFalse(enumSet6.equals((Object)enumSet0));
      assertFalse(enumSet6.equals((Object)enumSet2));
      assertFalse(enumSet6.equals((Object)enumSet3));
      assertFalse(enumSet6.equals((Object)enumSet4));
      assertFalse(enumSet6.equals((Object)enumSet5));
      assertEquals(9, locale_FilteringModeArray0.length);
      assertTrue(enumSet6.contains(locale_FilteringMode0));
      assertFalse(enumSet6.contains(locale_FilteringMode3));
      assertEquals(3, enumSet6.size());
      assertNotNull(enumSet6);
      assertNotSame(locale_FilteringMode4, locale_FilteringMode3);
      assertSame(locale_FilteringMode4, locale_FilteringMode1);
      assertSame(locale_FilteringMode4, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode4, locale_FilteringMode5);
      assertNotSame(locale_FilteringMode4, locale_FilteringMode2);
      assertNotSame(enumSet6, enumSet1);
      assertNotSame(enumSet6, enumSet0);
      assertNotSame(enumSet6, enumSet2);
      assertNotSame(enumSet6, enumSet3);
      assertNotSame(enumSet6, enumSet4);
      assertNotSame(enumSet6, enumSet5);
      
      enumSetArray0[5] = enumSet6;
      EnumSet<Locale.FilteringMode> enumSet7 = enumSet5.clone();
      assertFalse(locale_FilteringMode3.equals((Object)locale_FilteringMode0));
      assertFalse(locale_FilteringMode3.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode3.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode3.equals((Object)locale_FilteringMode4));
      assertFalse(locale_FilteringMode3.equals((Object)locale_FilteringMode5));
      assertFalse(enumSet7.equals((Object)enumSet2));
      assertTrue(enumSet7.equals((Object)enumSet5));
      assertFalse(enumSet7.equals((Object)enumSet1));
      assertFalse(enumSet7.equals((Object)enumSet3));
      assertFalse(enumSet7.equals((Object)enumSet4));
      assertFalse(enumSet7.equals((Object)enumSet6));
      assertFalse(enumSet7.equals((Object)enumSet0));
      assertFalse(enumSet5.equals((Object)enumSet1));
      assertFalse(enumSet5.equals((Object)enumSet0));
      assertFalse(enumSet5.equals((Object)enumSet2));
      assertFalse(enumSet5.equals((Object)enumSet3));
      assertFalse(enumSet5.equals((Object)enumSet4));
      assertFalse(enumSet5.equals((Object)enumSet6));
      assertFalse(enumSet7.contains(locale_FilteringMode0));
      assertTrue(enumSet7.contains(locale_FilteringMode3));
      assertFalse(enumSet5.contains(locale_FilteringMode0));
      assertTrue(enumSet5.contains(locale_FilteringMode3));
      assertEquals(1, enumSet7.size());
      assertEquals(1, enumSet5.size());
      assertNotNull(enumSet7);
      assertNotSame(locale_FilteringMode3, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode3, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode3, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode3, locale_FilteringMode4);
      assertNotSame(locale_FilteringMode3, locale_FilteringMode5);
      assertNotSame(enumSet7, enumSet2);
      assertNotSame(enumSet7, enumSet1);
      assertNotSame(enumSet7, enumSet3);
      assertNotSame(enumSet7, enumSet4);
      assertNotSame(enumSet7, enumSet5);
      assertNotSame(enumSet7, enumSet6);
      assertNotSame(enumSet7, enumSet0);
      assertNotSame(enumSet5, enumSet1);
      assertNotSame(enumSet5, enumSet0);
      assertNotSame(enumSet5, enumSet2);
      assertNotSame(enumSet5, enumSet7);
      assertNotSame(enumSet5, enumSet3);
      assertNotSame(enumSet5, enumSet4);
      assertNotSame(enumSet5, enumSet6);
      
      enumSetArray0[6] = enumSet7;
      ResettableListIterator<EnumSet<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.arrayListIterator(enumSetArray0, 0);
      assertEquals(7, enumSetArray0.length);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      Iterator<EnumSet<Locale.FilteringMode>> iterator0 = IteratorUtils.collatedIterator((Comparator<? super EnumSet<Locale.FilteringMode>>) comparator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableListIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableListIterator0);
      assertEquals(7, enumSetArray0.length);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, (-2954));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -2954
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringArray0, (-4105), (-1231));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNotNull(sQLTransientException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, 1, sQLTransientException0);
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(1, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException();
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException1.toString());
      assertNull(sQLRecoverableException1.getMessage());
      assertNull(sQLRecoverableException1.getSQLState());
      assertNotNull(sQLRecoverableException1);
      
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("");
      assertFalse(sQLRecoverableException2.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException2.equals((Object)sQLRecoverableException1));
      assertNull(sQLRecoverableException2.getSQLState());
      assertEquals("", sQLRecoverableException2.getMessage());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException2.toString());
      assertEquals(0, sQLRecoverableException2.getErrorCode());
      assertNotNull(sQLRecoverableException2);
      
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException(sQLRecoverableException2);
      assertFalse(sQLRecoverableException2.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException2.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException1));
      assertNull(sQLRecoverableException2.getSQLState());
      assertEquals("", sQLRecoverableException2.getMessage());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException2.toString());
      assertEquals(0, sQLRecoverableException2.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLRecoverableException: ", sQLRecoverableException3.toString());
      assertEquals(0, sQLRecoverableException3.getErrorCode());
      assertNull(sQLRecoverableException3.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException3.getMessage());
      assertNotNull(sQLRecoverableException3);
      
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 1);
      assertEquals(4, sQLRecoverableExceptionArray0.length);
      assertNotNull(resettableIterator0);
      
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0, (Iterator<? extends SQLRecoverableException>) resettableIterator0, (Iterator<? extends SQLRecoverableException>) resettableIterator0);
      assertEquals(4, sQLRecoverableExceptionArray0.length);
      assertNotNull(zippingIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLRecoverableException3, 44);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[8];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "F7n^#S`[+LDKxA%{L-", 0, sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("F7n^#S`[+LDKxA%{L-", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 0, sQLTransientConnectionException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("F7n^#S`[+LDKxA%{L-", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("=QXtM8", "");
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertEquals("=QXtM8", sQLNonTransientConnectionException1.getMessage());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: =QXtM8", sQLNonTransientConnectionException1.toString());
      assertNotNull(sQLNonTransientConnectionException1);
      
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("", "(DzWC", 0, sQLTransientConnectionException0);
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException0));
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("F7n^#S`[+LDKxA%{L-", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException2.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException2.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException2.toString());
      assertEquals("(DzWC", sQLNonTransientConnectionException2.getSQLState());
      assertNotNull(sQLNonTransientConnectionException2);
      
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("_Cgks%d", (String) null, (-17), sQLNonTransientConnectionException1);
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException0));
      assertEquals("=QXtM8", sQLNonTransientConnectionException1.getMessage());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: =QXtM8", sQLNonTransientConnectionException1.toString());
      assertEquals("_Cgks%d", sQLNonTransientConnectionException3.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: _Cgks%d", sQLNonTransientConnectionException3.toString());
      assertNull(sQLNonTransientConnectionException3.getSQLState());
      assertEquals((-17), sQLNonTransientConnectionException3.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException3);
      
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("=QXtM8", "9]a");
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException4.equals((Object)sQLNonTransientConnectionException0));
      assertEquals("9]a", sQLNonTransientConnectionException4.getSQLState());
      assertEquals("=QXtM8", sQLNonTransientConnectionException4.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: =QXtM8", sQLNonTransientConnectionException4.toString());
      assertEquals(0, sQLNonTransientConnectionException4.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException4);
      
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("F7n^#S`[+LDKxA%{L-", "");
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException5.equals((Object)sQLNonTransientConnectionException0));
      assertEquals("java.sql.SQLNonTransientConnectionException: F7n^#S`[+LDKxA%{L-", sQLNonTransientConnectionException5.toString());
      assertEquals("F7n^#S`[+LDKxA%{L-", sQLNonTransientConnectionException5.getMessage());
      assertEquals("", sQLNonTransientConnectionException5.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException5.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException5);
      
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("9]a", (String) null);
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException6.equals((Object)sQLNonTransientConnectionException3));
      assertNull(sQLNonTransientConnectionException6.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException6.getErrorCode());
      assertEquals("9]a", sQLNonTransientConnectionException6.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: 9]a", sQLNonTransientConnectionException6.toString());
      assertNotNull(sQLNonTransientConnectionException6);
      
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException();
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException4));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException5));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException3));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException6));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException7.equals((Object)sQLNonTransientConnectionException0));
      assertNull(sQLNonTransientConnectionException7.getSQLState());
      assertNull(sQLNonTransientConnectionException7.getMessage());
      assertEquals(0, sQLNonTransientConnectionException7.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException7.toString());
      assertNotNull(sQLNonTransientConnectionException7);
      
      sQLNonTransientConnectionExceptionArray0[7] = sQLNonTransientConnectionException7;
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0, 1);
      assertEquals(8, sQLNonTransientConnectionExceptionArray0.length);
      assertEquals(1, objectArrayListIterator0.getStartIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(8, objectArrayListIterator0.getEndIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertNotNull(objectArrayListIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) objectArrayListIterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[2];
      SQLDataException sQLDataException0 = new SQLDataException("2*7D!<\"", "Iterator must not be null", 100);
      assertEquals("Iterator must not be null", sQLDataException0.getSQLState());
      assertEquals(100, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: 2*7D!<\"", sQLDataException0.toString());
      assertEquals("2*7D!<\"", sQLDataException0.getMessage());
      assertNotNull(sQLDataException0);
      
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLDataException0;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-103);
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-118), (byte)1, (byte)85, (byte) (-1), (byte)91, (byte)10, (byte) (-103)}, byteArray0);
      assertFalse(boolean2);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = (SQLSyntaxErrorException)sQLSyntaxErrorException0.initCause(sQLDataException0);
      assertEquals("Iterator must not be null", sQLDataException0.getSQLState());
      assertEquals(100, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: 2*7D!<\"", sQLDataException0.toString());
      assertEquals("2*7D!<\"", sQLDataException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertNull(sQLSyntaxErrorException1.getMessage());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException1.toString());
      assertNotNull(sQLSyntaxErrorException1);
      assertSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
      
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLSyntaxErrorException0;
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      assertEquals(2, sQLNonTransientExceptionArray0.length);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      sQLSyntaxErrorException0.setNextException(sQLNonTransientExceptionArray0[1]);
      assertEquals(2, sQLNonTransientExceptionArray0.length);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      
      Enumeration<SQLException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLException>) resettableListIterator0);
      assertEquals(2, sQLNonTransientExceptionArray0.length);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertNotNull(enumeration0);
      
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertEquals(2, sQLNonTransientExceptionArray0.length);
      assertFalse(resettableListIterator0.hasNext());
      assertTrue(resettableListIterator0.hasPrevious());
      assertEquals(2, int0);
      
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(resettableIterator0);
      
      Transformer<SQLException, SQLFeatureNotSupportedException> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLFeatureNotSupportedException>) transformer0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      
      ArrayDeque<SQLNonTransientConnectionException> arrayDeque1 = new ArrayDeque<SQLNonTransientConnectionException>();
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertNotNull(arrayDeque1);
      
      LoopingIterator<SQLNonTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLNonTransientConnectionException>(arrayDeque1);
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertNotNull(loopingIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) loopingIterator0, 879);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 879
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      OrderedMapIterator<DataTruncation, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      MapIterator<DataTruncation, SQLRecoverableException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends SQLRecoverableException>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(mapIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<DataTruncation>) mapIterator0, (-477));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -477
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      String string0 = IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) singletonIterator0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertFalse(singletonIterator0.hasNext());
      assertNotNull(string0);
      assertEquals("[java.sql.SQLFeatureNotSupportedException]", string0);
      
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      Predicate<SQLException> predicate0 = null;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      String string1 = "ExceptionClosure invoked";
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("ExceptionClosure invoked", "RZ*UDJas;K4|;", sQLSyntaxErrorException0);
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("ExceptionClosure invoked", sQLSyntaxErrorException1.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ExceptionClosure invoked", sQLSyntaxErrorException1.toString());
      assertEquals("RZ*UDJas;K4|;", sQLSyntaxErrorException1.getSQLState());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertNotNull(sQLSyntaxErrorException1);
      
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("", "[java.sql.SQLFeatureNotSupportedException]", (-220), sQLSyntaxErrorException0);
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals((-220), sQLSyntaxErrorException2.getErrorCode());
      assertEquals("", sQLSyntaxErrorException2.getMessage());
      assertEquals("[java.sql.SQLFeatureNotSupportedException]", sQLSyntaxErrorException2.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException2.toString());
      assertNotNull(sQLSyntaxErrorException2);
      
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      ObjectArrayIterator<SQLSyntaxErrorException> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0, (-15));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) resettableListIterator0, (Iterator<? extends SQLNonTransientException>) resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(zippingIterator0);
      
      Vector<SQLDataException>[] vectorArray0 = (Vector<SQLDataException>[]) Array.newInstance(Vector.class, 5);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      vectorArray0[0] = vector0;
      Vector<SQLDataException> vector1 = new Vector<SQLDataException>();
      assertTrue(vector1.equals((Object)vector0));
      assertEquals(10, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertNotNull(vector1);
      
      vectorArray0[1] = vector1;
      Vector<SQLDataException> vector2 = new Vector<SQLDataException>();
      assertTrue(vector2.equals((Object)vector0));
      assertTrue(vector2.equals((Object)vector1));
      assertTrue(vector2.isEmpty());
      assertEquals("[]", vector2.toString());
      assertEquals(10, vector2.capacity());
      assertEquals(0, vector2.size());
      assertNotNull(vector2);
      
      vectorArray0[2] = vector2;
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      vectorArray0[3] = (Vector<SQLDataException>) stack0;
      Vector<SQLDataException> vector3 = new Vector<SQLDataException>();
      assertTrue(vector3.equals((Object)vector0));
      assertTrue(vector3.equals((Object)vector2));
      assertTrue(vector3.equals((Object)vector1));
      assertTrue(vector3.isEmpty());
      assertEquals("[]", vector3.toString());
      assertEquals(0, vector3.size());
      assertEquals(10, vector3.capacity());
      assertNotNull(vector3);
      
      vectorArray0[4] = vector3;
      int int0 = 4857;
      int int1 = (-73);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(vectorArray0, 4857, (-73));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      String string0 = IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) resettableIterator0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      int int0 = 100;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[]", "[]", 100);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: []", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("[]", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(100, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("[]", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      Throwable[] throwableArray0 = sQLInvalidAuthorizationSpecException0.getSuppressed();
      assertEquals(0, throwableArray0.length);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: []", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("[]", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(100, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("[]", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(throwableArray0);
      
      int int1 = (-170);
      DataTruncation dataTruncation0 = new DataTruncation((-170), false, false, 100, 1076);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNotNull(dataTruncation0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(dataTruncation0);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNotNull(iterator0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = (SQLInvalidAuthorizationSpecException)sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: []", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("[]", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(100, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("[]", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("[]", sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("[]", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals(100, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: []", sQLInvalidAuthorizationSpecException1.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) properties0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      String string0 = IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) resettableIterator0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[4];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Transformer must not be null", (String) null);
      assertEquals("java.sql.SQLTransientConnectionException: Transformer must not be null", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("Transformer must not be null", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientConnectionException0.forEach(consumer0);
      assertEquals("java.sql.SQLTransientConnectionException: Transformer must not be null", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("Transformer must not be null", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException();
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertNull(sQLTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException1.toString());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertNotNull(sQLTransientConnectionException1);
      
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException(sQLTransientConnectionException1);
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLTransientConnectionException2.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLTransientConnectionException2.equals((Object)sQLTransientConnectionException1));
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertNull(sQLTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException1.toString());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertEquals(0, sQLTransientConnectionException2.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLTransientConnectionException", sQLTransientConnectionException2.toString());
      assertNull(sQLTransientConnectionException2.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException2.getMessage());
      assertNotNull(sQLTransientConnectionException2);
      
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException((String) null);
      assertFalse(sQLTransientConnectionException3.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException3.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLTransientConnectionException3.equals((Object)sQLTransientConnectionException2));
      assertEquals(0, sQLTransientConnectionException3.getErrorCode());
      assertNull(sQLTransientConnectionException3.getSQLState());
      assertNull(sQLTransientConnectionException3.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException3.toString());
      assertNotNull(sQLTransientConnectionException3);
      
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      assertEquals(4, sQLTransientConnectionExceptionArray0.length);
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(4, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertNotNull(objectArrayListIterator0);
      
      // Undeclared exception!
      try { 
        objectArrayListIterator0.set(sQLTransientConnectionException1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // must call next() or previous() before a call to set()
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(resettableIterator0);
      
      int int0 = 360;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableIterator0, 360, 360);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", (String) null);
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = (SQLIntegrityConstraintViolationException)sQLIntegrityConstraintViolationException0.fillInStackTrace();
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException1.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException1.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException1);
      assertSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      assertSame(sQLIntegrityConstraintViolationException1, sQLIntegrityConstraintViolationException0);
      
      int int0 = 4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0, 93, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(3485);
      assertNotNull(integer0);
      assertEquals(3485, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(3, integerArray0.length);
      assertNotNull(integer2);
      assertEquals(3485, (int)integer2);
      
      integerArray0[2] = integer2;
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0, 0);
      assertEquals(3, integerArray0.length);
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(3, objectArrayIterator0.getEndIndex());
      assertNotNull(objectArrayIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Integer>) objectArrayIterator0, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      ResettableListIterator<Class<String>> resettableListIterator0 = IteratorUtils.arrayListIterator(classArray0, 0, 0);
      assertEquals(1, classArray0.length);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      String string0 = "J,dk:";
      String string1 = "g81!64;vz%\\/#Jg";
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      String string2 = "#,IDz=";
      String string3 = "zn=GQDR{I(mID,:8;";
      String string4 = "~||lAp";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLWarning sQLWarning0 = new SQLWarning("~||lAp", "~||lAp", 0, sQLInvalidAuthorizationSpecException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("#,IDz=", "zn=GQDR{I(mID,:8;", sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("J,dk:", "g81!64;vz%/#Jg", 0, intArray0, sQLTransientException0);
      sQLTransientException0.fillInStackTrace();
      batchUpdateException0.getSuppressed();
      ArrayIterator<Integer> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<Integer>(batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(sQLDataException0);
      
      SQLDataException sQLDataException1 = new SQLDataException("eD0`eH}P?o%O=", "eD0`eH}P?o%O=", (-901), sQLDataException0);
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("eD0`eH}P?o%O=", sQLDataException1.getMessage());
      assertEquals("eD0`eH}P?o%O=", sQLDataException1.getSQLState());
      assertEquals((-901), sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException: eD0`eH}P?o%O=", sQLDataException1.toString());
      assertNotNull(sQLDataException1);
      
      ConstantTransformer<SQLDataException, SQLDataException> constantTransformer0 = new ConstantTransformer<SQLDataException, SQLDataException>(sQLDataException0);
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(constantTransformer0);
      
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException1, (Transformer<? super SQLDataException, ? extends SQLDataException>) constantTransformer0);
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("eD0`eH}P?o%O=", sQLDataException1.getMessage());
      assertEquals("eD0`eH}P?o%O=", sQLDataException1.getSQLState());
      assertEquals((-901), sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException: eD0`eH}P?o%O=", sQLDataException1.toString());
      assertNotNull(iterator0);
      assertNotSame(sQLDataException0, sQLDataException1);
      assertNotSame(sQLDataException1, sQLDataException0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-901);
      intArray0[1] = 1;
      intArray0[2] = (-901);
      intArray0[3] = (-901);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0, sQLDataException0);
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertEquals(4, intArray0.length);
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {(-901), 1, (-901), (-901)}, intArray0);
      
      sQLDataException0.printStackTrace();
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotSame(sQLDataException0, sQLDataException1);
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        batchUpdateException0.forEach((Consumer<? super Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("u]GSO7?");
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: u]GSO7?", sQLTimeoutException0.toString());
      assertEquals("u]GSO7?", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("prd*~8zsI#?V/2F4~", sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: u]GSO7?", sQLTimeoutException0.toString());
      assertEquals("u]GSO7?", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: prd*~8zsI#?V/2F4~", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("prd*~8zsI#?V/2F4~", sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("u]GSO7?", "u]GSO7?", hashtable0, sQLRecoverableException0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: u]GSO7?", sQLTimeoutException0.toString());
      assertEquals("u]GSO7?", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: prd*~8zsI#?V/2F4~", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("prd*~8zsI#?V/2F4~", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: u]GSO7?", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("u]GSO7?", sQLClientInfoException0.getSQLState());
      assertEquals("u]GSO7?", sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("Collection must not be null", hashtable0);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: Collection must not be null", sQLClientInfoException1.toString());
      assertEquals("Collection must not be null", sQLClientInfoException1.getMessage());
      assertNotNull(sQLClientInfoException1);
      
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(hashtable0);
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException2.toString());
      assertEquals(0, sQLClientInfoException2.getErrorCode());
      assertNull(sQLClientInfoException2.getSQLState());
      assertNull(sQLClientInfoException2.getMessage());
      assertNotNull(sQLClientInfoException2);
      
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("u]GSO7?", hashtable0, sQLClientInfoException1);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException0));
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: Collection must not be null", sQLClientInfoException1.toString());
      assertEquals("Collection must not be null", sQLClientInfoException1.getMessage());
      assertEquals("u]GSO7?", sQLClientInfoException3.getMessage());
      assertNull(sQLClientInfoException3.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: u]GSO7?", sQLClientInfoException3.toString());
      assertEquals(0, sQLClientInfoException3.getErrorCode());
      assertNotNull(sQLClientInfoException3);
      
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException((String) null, "]", hashtable0, sQLClientInfoException2);
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException4.equals((Object)sQLClientInfoException0));
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException2.toString());
      assertEquals(0, sQLClientInfoException2.getErrorCode());
      assertNull(sQLClientInfoException2.getSQLState());
      assertNull(sQLClientInfoException2.getMessage());
      assertNull(sQLClientInfoException4.getMessage());
      assertEquals(0, sQLClientInfoException4.getErrorCode());
      assertEquals("]", sQLClientInfoException4.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException4.toString());
      assertNotNull(sQLClientInfoException4);
      
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Collection must not be null", "");
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Collection must not be null", sQLFeatureNotSupportedException0.toString());
      assertEquals("Collection must not be null", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("nQ|x%'aIo7ljH'n$#d", hashtable0, sQLFeatureNotSupportedException0);
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException5.equals((Object)sQLClientInfoException2));
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Collection must not be null", sQLFeatureNotSupportedException0.toString());
      assertEquals("Collection must not be null", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(0, sQLClientInfoException5.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: nQ|x%'aIo7ljH'n$#d", sQLClientInfoException5.toString());
      assertEquals("nQ|x%'aIo7ljH'n$#d", sQLClientInfoException5.getMessage());
      assertNull(sQLClientInfoException5.getSQLState());
      assertNotNull(sQLClientInfoException5);
      
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException((String) null, "nQ|x%'aIo7ljH'n$#d", hashtable0, sQLClientInfoException3);
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException6.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException3.equals((Object)sQLClientInfoException4));
      assertNull(sQLClientInfoException6.getMessage());
      assertEquals("nQ|x%'aIo7ljH'n$#d", sQLClientInfoException6.getSQLState());
      assertEquals(0, sQLClientInfoException6.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException6.toString());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: Collection must not be null", sQLClientInfoException1.toString());
      assertEquals("Collection must not be null", sQLClientInfoException1.getMessage());
      assertEquals("u]GSO7?", sQLClientInfoException3.getMessage());
      assertNull(sQLClientInfoException3.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: u]GSO7?", sQLClientInfoException3.toString());
      assertEquals(0, sQLClientInfoException3.getErrorCode());
      assertNotNull(sQLClientInfoException6);
      
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException(hashtable0);
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException7.equals((Object)sQLClientInfoException5));
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException7.toString());
      assertEquals(0, sQLClientInfoException7.getErrorCode());
      assertNull(sQLClientInfoException7.getSQLState());
      assertNull(sQLClientInfoException7.getMessage());
      assertNotNull(sQLClientInfoException7);
      
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException7;
      SQLClientInfoException sQLClientInfoException8 = new SQLClientInfoException(hashtable0);
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException5));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException3));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException7));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException2));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException4));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException6));
      assertFalse(sQLClientInfoException8.equals((Object)sQLClientInfoException1));
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, sQLClientInfoException8.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException8.toString());
      assertNull(sQLClientInfoException8.getMessage());
      assertNull(sQLClientInfoException8.getSQLState());
      assertNotNull(sQLClientInfoException8);
      
      sQLClientInfoExceptionArray0[8] = sQLClientInfoException8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 691);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      ListIterator<IIOMetadataNode> listIterator0 = stack0.listIterator();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) listIterator0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(zippingIterator0);
      
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[3];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("*bNgm('|N~@=.&", "*bNgm('|N~@=.&", 336);
      assertEquals("*bNgm('|N~@=.&", sQLSyntaxErrorException0.getMessage());
      assertEquals("*bNgm('|N~@=.&", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: *bNgm('|N~@=.&", sQLSyntaxErrorException0.toString());
      assertEquals(336, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLDataException sQLDataException0 = new SQLDataException();
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertNotNull(sQLDataException0);
      
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLDataException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("org.apache.commons.collections4.functors.ClosureTransformer", "org.apache.commons.collections4.functors.ClosureTransformer", 336);
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertEquals(336, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.ClosureTransformer", sQLSyntaxErrorException1.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.functors.ClosureTransformer", sQLSyntaxErrorException1.toString());
      assertEquals("org.apache.commons.collections4.functors.ClosureTransformer", sQLSyntaxErrorException1.getSQLState());
      assertNotNull(sQLSyntaxErrorException1);
      
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLSyntaxErrorException1;
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      assertEquals(3, sQLNonTransientExceptionArray0.length);
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(3, objectArrayListIterator0.getEndIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertNotNull(objectArrayListIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Iterator<BatchUpdateException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning>(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) abstractOrderedMapIteratorDecorator0, class0);
      assertEquals(0, sQLRecoverableExceptionArray0.length);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(sQLRecoverableExceptionArray0);
      
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Iterator<DataTruncation> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) resettableIterator0);
      assertNotNull(iterator0);
      
      BoundedIterator<DataTruncation> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) iterator0, 0L, 0L);
      assertNotNull(boundedIterator0);
      
      Iterable<DataTruncation> iterable0 = IteratorUtils.asIterable((Iterator<? extends DataTruncation>) boundedIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      MapIterator<Locale.FilteringMode, ArrayDeque<Predicate>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", (-1), sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals((-1), sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals((-1), sQLTransientConnectionException0.getErrorCode());
      assertNotNull(resettableIterator0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLSyntaxErrorException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "", (-1), sQLRecoverableException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLSyntaxErrorException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals((-1), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("", "", (-1), sQLIntegrityConstraintViolationException0);
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLSyntaxErrorException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals((-1), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals((-1), sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException1.toString());
      assertEquals("", sQLRecoverableException1.getSQLState());
      assertEquals("", sQLRecoverableException1.getMessage());
      assertNotNull(sQLRecoverableException1);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLRecoverableException1);
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLSyntaxErrorException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals((-1), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals((-1), sQLRecoverableException1.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException1.toString());
      assertEquals("", sQLRecoverableException1.getSQLState());
      assertEquals("", sQLRecoverableException1.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLRecoverableException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) orderedIterator0);
      assertNotNull(enumeration0);
      
      Iterator<DataTruncation> iterator0 = IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0);
      assertNotNull(iterator0);
      
      Iterator<DataTruncation> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      
      // Undeclared exception!
      try { 
        FactoryTransformer.factoryTransformer((Factory<? extends String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factory must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLWarning>(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) abstractOrderedMapIteratorDecorator0, class0);
      assertEquals(0, sQLRecoverableExceptionArray0.length);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(sQLRecoverableExceptionArray0);
      
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(", ");
      assertNotNull(iIOMetadataNode0);
      
      ResettableIterator<IIOMetadataNode> resettableIterator1 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      assertNotNull(resettableIterator1);
      
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) resettableIterator1, (Iterator<? extends IIOMetadataNode>) resettableIterator1);
      assertNotNull(iterator0);
      
      Iterable<IIOMetadataNode> iterable0 = IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) iterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[4];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("fiT.0", "fiT.0");
      assertEquals("fiT.0", sQLSyntaxErrorException0.getSQLState());
      assertEquals("fiT.0", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: fiT.0", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertEquals("fiT.0", sQLSyntaxErrorException0.getSQLState());
      assertEquals("fiT.0", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: fiT.0", sQLSyntaxErrorException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: fiT.0", sQLSyntaxErrorException1.getMessage());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLSyntaxErrorException: fiT.0", sQLSyntaxErrorException1.toString());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertNotNull(sQLSyntaxErrorException1);
      
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("fiT.0", "to7SM");
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      assertEquals(0, sQLSyntaxErrorException2.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: fiT.0", sQLSyntaxErrorException2.toString());
      assertEquals("fiT.0", sQLSyntaxErrorException2.getMessage());
      assertEquals("to7SM", sQLSyntaxErrorException2.getSQLState());
      assertNotNull(sQLSyntaxErrorException2);
      
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("to7SM", sQLSyntaxErrorException0);
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException1));
      assertEquals("fiT.0", sQLSyntaxErrorException0.getSQLState());
      assertEquals("fiT.0", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: fiT.0", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException3.getErrorCode());
      assertEquals("to7SM", sQLSyntaxErrorException3.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: to7SM", sQLSyntaxErrorException3.toString());
      assertNull(sQLSyntaxErrorException3.getSQLState());
      assertNotNull(sQLSyntaxErrorException3);
      
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      sQLSyntaxErrorException1.addSuppressed(sQLSyntaxErrorException3);
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException1));
      assertEquals("fiT.0", sQLSyntaxErrorException0.getSQLState());
      assertEquals("fiT.0", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: fiT.0", sQLSyntaxErrorException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: fiT.0", sQLSyntaxErrorException1.getMessage());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLSyntaxErrorException: fiT.0", sQLSyntaxErrorException1.toString());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertEquals(0, sQLSyntaxErrorException3.getErrorCode());
      assertEquals("to7SM", sQLSyntaxErrorException3.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: to7SM", sQLSyntaxErrorException3.toString());
      assertNull(sQLSyntaxErrorException3.getSQLState());
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException2);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertNotSame(sQLSyntaxErrorException0, sQLSyntaxErrorException3);
      assertNotSame(sQLSyntaxErrorException1, sQLSyntaxErrorException3);
      assertNotSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
      assertNotSame(sQLSyntaxErrorException1, sQLSyntaxErrorException2);
      assertNotSame(sQLSyntaxErrorException3, sQLSyntaxErrorException0);
      assertNotSame(sQLSyntaxErrorException3, sQLSyntaxErrorException2);
      assertNotSame(sQLSyntaxErrorException3, sQLSyntaxErrorException1);
      
      ObjectArrayIterator<SQLSyntaxErrorException> objectArrayIterator0 = new ObjectArrayIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      assertEquals(4, sQLSyntaxErrorExceptionArray0.length);
      assertEquals(4, objectArrayIterator0.getEndIndex());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertNotNull(objectArrayIterator0);
      
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) objectArrayIterator0);
      assertEquals(4, sQLSyntaxErrorExceptionArray0.length);
      assertEquals(4, objectArrayIterator0.getEndIndex());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertNotNull(enumeration0);
      
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0);
      assertEquals(4, sQLSyntaxErrorExceptionArray0.length);
      assertEquals(4, objectArrayIterator0.getEndIndex());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertNotNull(iterator0);
      
      Comparator<IIOMetadataNode> comparator0 = (Comparator<IIOMetadataNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator((IIOMetadataNode) null);
      assertNotNull(resettableIterator0);
      
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>) resettableIterator0, (Iterator<? extends IIOMetadataNode>) resettableIterator0);
      assertNotNull(iterator1);
      
      Iterable<IIOMetadataNode> iterable0 = IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) iterator1);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Iterator<ArrayDeque<SQLTransientConnectionException>> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends ArrayDeque<SQLTransientConnectionException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[6];
      String string0 = "%\"CaWVX\\)";
      SQLDataException sQLDataException0 = new SQLDataException("%\"CaWVX)");
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLDataException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("}&c\"2So7I@", "%\"CaWVX)");
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLDataException0);
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.NullIsTruePredicate");
      SQLDataException sQLDataException1 = new SQLDataException(sQLTransactionRollbackException0);
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("add() is not supported by this iterator", "org.apache.commons.collections4.map.Flat3Map$EntrySetIterator", sQLNonTransientExceptionArray0[3]);
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLDataException2;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Entry does not exist: ");
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLSyntaxErrorException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, 1121);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      LinkedHashSet<SQLDataException>[] linkedHashSetArray0 = null;
      int int0 = 2937;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((LinkedHashSet<SQLDataException>[]) null, 2937);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(713);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(713);
      integerArray0[2] = integer2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(integerArray0, 813);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MapIterator<Integer, ArrayDeque<ArrayDeque>> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLTransientConnectionException, SQLTransientException> mapIterator1 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toArray((Iterator<?>) mapIterator1);
      int int0 = (-1681);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) mapIterator0, (-1681), (-1681));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      linkedHashSet0.add((SQLFeatureNotSupportedException) null);
      IteratorUtils.singletonListIterator((HashSet<SQLFeatureNotSupportedException>) linkedHashSet0);
      MapIterator<SQLException, Vector<IIOMetadataNode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ListIterator<IIOMetadataNode> listIterator0 = stack0.listIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) listIterator0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[3];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("*bNgm('|N~@=.&", "*bNgm('|N~@=.&", 336);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLDataException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("org.apache.commons.collections4.functors.ClosureTransformer", "org.apache.commons.collections4.functors.ClosureTransformer", 336);
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLSyntaxErrorException1;
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      Predicate<SQLNonTransientException> predicate0 = NullPredicate.nullPredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) objectArrayListIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLDataException sQLDataException0 = new SQLDataException("koJ=A{='vY", "koJ=A{='vY");
      Class<SQLDataException> class0 = SQLDataException.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 6);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      Class<Object> class2 = Object.class;
      classArray0[1] = class2;
      Class<Object> class3 = Object.class;
      classArray0[2] = class3;
      Class<Object> class4 = Object.class;
      classArray0[3] = class4;
      Class<Object> class5 = Object.class;
      classArray0[4] = class5;
      Class<Object> class6 = Object.class;
      classArray0[5] = class6;
      // Undeclared exception!
      try { 
        InstantiateFactory.instantiateFactory(class0, (Class<?>[]) classArray0, (Object[]) classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InstantiateFactory: The constructor must exist and be public 
         //
         verifyException("org.apache.commons.collections4.functors.InstantiateFactory", e);
      }
  }
}
