/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 18:11:03 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.DOMException;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("gABNJ");
      linkedList0.add(sQLIntegrityConstraintViolationException0);
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator0 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(linkedList0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      loopingListIterator0.previous();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) loopingListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      SQLException sQLException0 = new SQLException("", sQLInvalidAuthorizationSpecException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("{-7]ncpES\"k4", sQLException0);
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 1);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class0;
      Transformer<SQLException, SQLNonTransientException> transformer0 = InvokerTransformer.invokerTransformer("{-7]ncpES\"k4", (Class<?>[]) classArray0, (Object[]) classArray0);
      Closure<SQLException> closure0 = TransformerClosure.transformerClosure((Transformer<? super SQLException, ?>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLNonTransientConnectionException>) singletonListIterator0, (Closure<? super SQLNonTransientConnectionException>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '{-7]ncpES\"k4' on 'class java.sql.SQLNonTransientConnectionException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      SingletonListIterator<Closure<Object>> singletonListIterator0 = new SingletonListIterator<Closure<Object>>(closure0);
      singletonListIterator0.next();
      IteratorUtils.toListIterator((Iterator<? extends Closure<Object>>) singletonListIterator0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyIterator();
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("o)5b7:hgapZd", (-1619.730687));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=-1619.730687
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      linkedList0.add(iIOMetadataNode0);
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(linkedList0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      ResettableIterator<Vector<SQLClientInfoException>> resettableIterator0 = IteratorUtils.singletonIterator((Vector<SQLClientInfoException>) null);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>((Predicate<? super Object>) null, (Transformer<? super Object, ? extends String>) null, (Transformer<? super Object, ? extends String>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Vector<SQLClientInfoException>>) resettableIterator0, (Transformer<? super Vector<SQLClientInfoException>, String>) ifTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientException>) vector0);
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientException>) resettableListIterator0);
      SQLException sQLException0 = new SQLException((String) null, "");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("R?ZobGu@", ":WPA6~t>@zhk/D2_*c", sQLNonTransientConnectionException0);
      vector0.add((SQLNonTransientException) sQLNonTransientConnectionException1);
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 1);
      Class<SQLException> class0 = SQLException.class;
      classArray0[0] = class0;
      Transformer<SQLNonTransientException, String> transformer0 = InvokerTransformer.invokerTransformer("R?ZobGu@", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientException>) listIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTimeoutException0, false);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLTimeoutException0);
      IteratorUtils.find((Iterator<SQLTransientException>) singletonIterator0, (Predicate<? super SQLTransientException>) identityPredicate0);
      PriorityQueue<SQLSyntaxErrorException> priorityQueue0 = new PriorityQueue<SQLSyntaxErrorException>();
      SingletonIterator<PriorityQueue<SQLSyntaxErrorException>> singletonIterator1 = new SingletonIterator<PriorityQueue<SQLSyntaxErrorException>>(priorityQueue0, false);
      IteratorUtils.skippingIterator((Iterator<PriorityQueue<SQLSyntaxErrorException>>) singletonIterator1, 0L);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) uniquePredicate0, comparator0);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, (Closure<? super Object>) null, true);
      Closure<Object> closure0 = ForClosure.forClosure(1, (Closure<? super Object>) null);
      IteratorUtils.apply((Iterator<BatchUpdateException>) null, (Closure<? super BatchUpdateException>) closure0);
      EmptyListIterator.emptyListIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.singletonIterator("2");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      ChainedClosure<SQLException> chainedClosure0 = new ChainedClosure<SQLException>(closureArray0);
      ChainedClosure.chainedClosure((Closure<? super EnumSet<Locale.FilteringMode>>[]) closureArray0);
      IteratorUtils.apply((Iterator<SQLNonTransientException>) null, (Closure<? super SQLNonTransientException>) chainedClosure0);
      Class<Integer> class0 = Integer.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      PredicateTransformer<ArrayList<Properties>> predicateTransformer0 = new PredicateTransformer<ArrayList<Properties>>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform((ArrayList<Properties>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) boolean0, 1665);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      int[] intArray0 = new int[6];
      intArray0[0] = 224;
      intArray0[1] = 970;
      intArray0[2] = (-3128);
      intArray0[3] = 90;
      intArray0[4] = (-2540);
      intArray0[5] = 16;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      IteratorUtils.unmodifiableIterator((Iterator<BatchUpdateException>) singletonListIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(uniquePredicate0, (Closure<? super Object>) null, true);
      Closure<Object> closure0 = ForClosure.forClosure(3, (Closure<? super Object>) null);
      IteratorUtils.apply((Iterator<BatchUpdateException>) singletonListIterator0, (Closure<? super BatchUpdateException>) closure0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getAttributeNodeNS("org.apache.commons.collections4.functors.IdentityPredicate", "5hj;k0ekEW:M");
      ListIterator<Object> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<HashSet<HashSet>>) listIterator0, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 3
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0, false);
      IteratorUtils.unmodifiableIterator((Iterator<BatchUpdateException>) singletonIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 5);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      ForClosure.forClosure(3207, (Closure<? super Object>) chainedClosure0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<BatchUpdateException>) singletonIterator0, (Closure<? super BatchUpdateException>) closureArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>((BatchUpdateException) null);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<BatchUpdateException>) singletonListIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(uniquePredicate0, (Closure<? super Object>) null, true);
      Closure<Object> closure0 = ForClosure.forClosure(3207, (Closure<? super Object>) whileClosure0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply(iterator0, (Closure<? super BatchUpdateException>) closure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.WhileClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>((SQLWarning) null);
      IteratorUtils.get((Iterator<SQLWarning>) singletonIterator0, 0);
      IteratorUtils.toArray((Iterator<?>) singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) listIterator0, (Class<SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      IteratorUtils.getIterator(locale_FilteringMode0);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-1553), (-1216));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLWarning>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) equalPredicate0, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Predicate<SQLWarning>>) null, (Transformer<? super Predicate<SQLWarning>, String>) transformer1, "There are no elements for this iterator to loop on", (String) null, "org.apache.commons.collections4.map.AbstractReferenceMap$WeakRef");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("M]DoChxs");
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>(sQLWarning0);
      SingletonIterator<SQLWarning> singletonIterator1 = new SingletonIterator<SQLWarning>(sQLWarning0, true);
      IteratorUtils.get((Iterator<SQLWarning>) singletonIterator1, 0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      SingletonListIterator<ClientInfoStatus> singletonListIterator0 = new SingletonListIterator<ClientInfoStatus>(clientInfoStatus0);
      IteratorUtils.unmodifiableListIterator((ListIterator<ClientInfoStatus>) singletonListIterator0);
      Hashtable<SQLFeatureNotSupportedException, SQLClientInfoException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLClientInfoException>();
      Enumeration<SQLClientInfoException> enumeration0 = hashtable0.elements();
      TreeSet<SQLClientInfoException> treeSet0 = new TreeSet<SQLClientInfoException>();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) treeSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLClientInfoException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ResettableIterator<Transformer<SQLRecoverableException, SQLClientInfoException>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Transformer<SQLRecoverableException, SQLClientInfoException>>) resettableIterator0, (Predicate<? super Transformer<SQLRecoverableException, SQLClientInfoException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      IteratorUtils.getIterator(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.collections4.functors.ExceptionPredicate";
      stringArray0[1] = "Node must not be null";
      stringArray0[2] = "";
      stringArray0[3] = "{W=9qi^$)ALV";
      stringArray0[4] = "";
      stringArray0[5] = "4Zofh,tUBh!x1";
      stringArray0[6] = "}Ef)EkzTS!<7)d\"&Kj";
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stringArray0, 1, (-1003));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 2);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      classArray0[1] = class1;
      InvokerTransformer<SQLException, SQLInvalidAuthorizationSpecException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLInvalidAuthorizationSpecException>("", classArray0, classArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) invokerTransformer0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientException>) iterator0);
      DefaultEquator.defaultEquator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator(sQLClientInfoException0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", "Dd?ruL%q9v", 0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("Dd?ruL%q9v", "Dd?ruL%q9v");
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("", "Dz~e_=<,>");
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) iterator0, (Iterator<? extends SQLException>) listIterator0, (Iterator<? extends SQLException>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) zippingIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLInvalidAuthorizationSpecException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 2);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      classArray0[0] = class0;
      InvokerTransformer<SQLException, SQLInvalidAuthorizationSpecException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLInvalidAuthorizationSpecException>("", classArray0, classArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) invokerTransformer0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientException>) iterator0);
      DefaultEquator.defaultEquator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<SQLException> class1 = SQLException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) iterator0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLInvalidAuthorizationSpecException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      TreeSet<DataTruncation>[] treeSetArray0 = (TreeSet<DataTruncation>[]) Array.newInstance(TreeSet.class, 0);
      IteratorUtils.arrayListIterator(treeSetArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<SQLDataException> class0 = SQLDataException.class;
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      IteratorUtils.getIterator(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLDataException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 3);
      int int0 = 101;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLIntegrityConstraintViolationException[]) null, 101);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicateTransformer<ArrayList<Properties>> predicateTransformer0 = new PredicateTransformer<ArrayList<Properties>>(uniquePredicate0);
      ArrayList<Properties> arrayList0 = new ArrayList<Properties>();
      Boolean boolean0 = predicateTransformer0.transform(arrayList0);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("");
      Transformer<Boolean, Boolean> transformer1 = IfTransformer.ifTransformer((Predicate<? super Boolean>) uniquePredicate0, (Transformer<? super Boolean, ? extends Boolean>) transformer0);
      Iterator<Boolean> iterator0 = IteratorUtils.objectGraphIterator(boolean0, (Transformer<? super Boolean, ? extends Boolean>) transformer1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Transformer<Object, String> transformer2 = ConstantTransformer.constantTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super Boolean, String>) transformer2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.lang.Boolean' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      IteratorUtils.getIterator("Predicate must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      LoopingIterator<SQLException> loopingIterator0 = new LoopingIterator<SQLException>(stack0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("n~zKHU[", "\"", (-516));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("n~zKHU[", "N{EyMeq+A_", (-516), sQLRecoverableException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLSyntaxErrorException0);
      stack0.add(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) loopingIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      IteratorUtils.isEmpty((Iterator<?>) null);
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      IteratorUtils.emptyOrderedMapIterator();
      int[] intArray0 = new int[5];
      intArray0[0] = 12;
      intArray0[1] = 102;
      intArray0[2] = (-1846);
      intArray0[3] = 16;
      intArray0[4] = 3966;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      DataTruncation dataTruncation0 = new DataTruncation(12, true, true, 12, 102);
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>(dataTruncation0, true);
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.isEmpty(listIterator0);
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      DataTruncation dataTruncation0 = new DataTruncation(916, true, true, 916, 916);
      arrayDeque0.add(dataTruncation0);
      OrderedMapIterator<SQLDataException, SQLRecoverableException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, SQLRecoverableException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, SQLRecoverableException>(orderedMapIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      LoopingIterator<SQLException> loopingIterator0 = new LoopingIterator<SQLException>(arrayDeque0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<SQLException>) loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      IteratorUtils.getIterator("");
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException((String) null, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.initCause(sQLIntegrityConstraintViolationException1);
      SQLWarning sQLWarning0 = new SQLWarning("s7{", sQLIntegrityConstraintViolationException0);
      IdentityPredicate.identityPredicate((Object) "s7{");
      IteratorUtils.isEmpty(singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      IteratorUtils.getIterator("");
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      SQLWarning sQLWarning0 = new SQLWarning("\"{", sQLIntegrityConstraintViolationException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLWarning0);
      IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) singletonIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>((SQLDataException) null);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 4);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("iterator");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLTransientConnectionException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Predicate<SQLException> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLException>) predicate0);
      NonePredicate<SQLException> nonePredicate0 = new NonePredicate<SQLException>(predicateArray0);
      predicateArray0[1] = (Predicate<SQLException>) nonePredicate0;
      Predicate<SQLException> predicate2 = IdentityPredicate.identityPredicate((SQLException) sQLTransientConnectionException0);
      predicateArray0[2] = predicate2;
      NotPredicate<SQLException> notPredicate0 = new NotPredicate<SQLException>(predicate1);
      predicateArray0[3] = (Predicate<SQLException>) notPredicate0;
      AnyPredicate<SQLException> anyPredicate0 = new AnyPredicate<SQLException>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLDataException>) singletonIterator0, (Predicate<? super SQLDataException>) notPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input Object must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Hashtable<SQLFeatureNotSupportedException, SQLClientInfoException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLClientInfoException>();
      IteratorUtils.getIterator(hashtable0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      Comparator<IIOMetadataNode> comparator0 = (Comparator<IIOMetadataNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 5);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      Iterator<IIOMetadataNode> iterator0 = arrayList0.iterator();
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) iterator0);
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(list0);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) loopingListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.isEmpty(listIterator0);
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      try { 
        iIOMetadataNode0.getFeature("?F5bKFK@GrBhie%", "?F5bKFK@GrBhie%");
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Method not supported
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.isEmpty(listIterator0);
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      IteratorUtils.emptyOrderedMapIterator();
      DefaultEquator.defaultEquator();
      OrderedMapIterator<SQLWarning, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLWarning, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLWarning, DataTruncation>(orderedMapIterator0);
      MapIterator<SQLWarning, DataTruncation> mapIterator0 = new AbstractOrderedMapIteratorDecorator<SQLWarning, DataTruncation>(orderedMapIterator0);
      Transformer<SQLWarning, String> transformer0 = ConstantTransformer.nullTransformer();
      SQLWarning sQLWarning0 = new SQLWarning(")a", "DdN;(|WTHa<lR", 1227, (Throwable) null);
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.singletonIterator(sQLWarning0);
      IteratorUtils.toString((Iterator<SQLWarning>) resettableIterator0, (Transformer<? super SQLWarning, String>) transformer0, "|jQTs}VW1:6qBs", "}s|:br1Nl#kS[v", "e*B>Uf0M<o/B");
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[3];
      StringTokenizer stringTokenizer0 = new StringTokenizer("e*B>Uf0M<o/B");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("}s|:br1Nl#kS[v");
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("Array class must not be null");
      stringTokenizerArray0[2] = stringTokenizer2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringTokenizerArray0, 1227, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[1];
      String string0 = null;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLSyntaxErrorException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("+Tku`A?", sQLTransientException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      LinkedList<Hashtable<Integer, SQLInvalidAuthorizationSpecException>> linkedList0 = new LinkedList<Hashtable<Integer, SQLInvalidAuthorizationSpecException>>();
      ReverseListIterator<Hashtable<Integer, SQLInvalidAuthorizationSpecException>> reverseListIterator0 = new ReverseListIterator<Hashtable<Integer, SQLInvalidAuthorizationSpecException>>(linkedList0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Hashtable<Integer, SQLInvalidAuthorizationSpecException>>) reverseListIterator0, (Transformer<? super Hashtable<Integer, SQLInvalidAuthorizationSpecException>, String>) transformer0, (String) null, "org.apache.commons.collections4.iterators.NodeListIterator", "delimiter may not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.isEmpty(listIterator0);
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashtable0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "", 10, sQLClientInfoException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLSyntaxErrorException0, defaultEquator0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(equalPredicate0);
      NullPredicate.nullPredicate();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(equalPredicate0);
      IteratorUtils.find((Iterator<Integer>) null, (Predicate<? super Integer>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      String string0 = "H8nsA,+4?eXkj*Q~kf";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("H8nsA,+4?eXkj*Q~kf");
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.nodeListIterator(nodeList0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      IteratorUtils.getIterator("");
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      Hashtable<Locale.FilteringMode, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<Locale.FilteringMode, SQLInvalidAuthorizationSpecException>();
      EntrySetMapIterator<Locale.FilteringMode, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<Locale.FilteringMode, SQLInvalidAuthorizationSpecException>(hashtable0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Predicate<Locale.FilteringMode> predicate0 = EqualPredicate.equalPredicate(locale_FilteringMode0);
      IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) entrySetMapIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      int int0 = 0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 0);
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLIntegrityConstraintViolationException, IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.getIterator("");
      Integer[] integerArray0 = new Integer[0];
      IteratorUtils.arrayIterator(integerArray0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashtable0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLClientInfoException0, defaultEquator0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(equalPredicate0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLDataException[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(arrayList0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) reverseListIterator0);
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>(transformer0, predicate0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) transformedPredicate0);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 9);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      classArray0[2] = class2;
      Class<SQLClientInfoException> class3 = SQLClientInfoException.class;
      classArray0[3] = class3;
      Class<SQLClientInfoException> class4 = SQLClientInfoException.class;
      classArray0[4] = class4;
      Class<SQLClientInfoException> class5 = SQLClientInfoException.class;
      classArray0[5] = class5;
      Class<SQLClientInfoException> class6 = SQLClientInfoException.class;
      classArray0[6] = class6;
      Class<SQLClientInfoException> class7 = SQLClientInfoException.class;
      classArray0[7] = class7;
      Class<SQLClientInfoException> class8 = SQLClientInfoException.class;
      classArray0[8] = class8;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("org.apache.commons.collections4.map.Flat3Map$EntrySetIterator", classArray0, classArray0);
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) listIterator1, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) invokerTransformer0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("OP?K1KyM5", "", 32);
      DefaultEquator.defaultEquator();
      IteratorUtils.emptyOrderedMapIterator();
      SQLWarning sQLWarning0 = new SQLWarning();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("OKRWc'#.'vq(a>)", "Predicate must not be null", "OKRWc'#.'vq(a>)", 101);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("Predicate must not be null", "zw^/-j", "zw^/-j", 101);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("Node must not be null", "R~m$62?|", "Node must not be null", 101);
      stackTraceElementArray0[2] = stackTraceElement2;
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Hashtable<SQLFeatureNotSupportedException, SQLClientInfoException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLClientInfoException>();
      hashtable0.elements();
      DefaultEquator.defaultEquator();
      Properties properties0 = new Properties();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Hashtable<Locale.FilteringMode, SQLInvalidAuthorizationSpecException> hashtable1 = new Hashtable<Locale.FilteringMode, SQLInvalidAuthorizationSpecException>();
      OrderedMapIterator<SQLWarning, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLWarning, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLWarning, DataTruncation>(orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLWarning, DataTruncation> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLWarning, DataTruncation>(abstractOrderedMapIteratorDecorator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLWarning, DataTruncation>) orderedMapIterator0);
      Transformer<SQLWarning, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLWarning>) abstractOrderedMapIteratorDecorator1, (Transformer<? super SQLWarning, String>) transformer0, "org.apache.commons.collections4.bidimap.TreeBidiMap$Inverse", "org.apache.commons.collections4.bidimap.TreeBidiMap$Inverse", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Zu!T[7$", "org.apache.commons.collections4.bidimap.TreeBidiMap", 32);
      DefaultEquator.defaultEquator();
      OrderedMapIterator<SQLWarning, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLWarning, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLWarning, DataTruncation>(orderedMapIterator0);
      MapIterator<SQLWarning, DataTruncation> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLWarning, DataTruncation>) orderedMapIterator0);
      ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLWarning>) mapIterator0, (Transformer<? super SQLWarning, String>) null, "", "", "org.apache.commons.collections4.bidimap.TreeBidiMap$Inverse");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.isEmpty(listIterator0);
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(1587);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(846);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(128);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1884));
      integerArray0[5] = integer3;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("ck(-ETb=uU4wr$TN]", "", 1587);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Properties properties0 = new Properties();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) integerArray0[1], (Equator<Object>) defaultEquator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.singletonIterator(locale_FilteringMode0);
      IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) resettableIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>((SQLDataException) null);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashtable0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLClientInfoException0, (Equator<Object>) null);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(equalPredicate0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(equalPredicate0);
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer((-1));
      stack0.add(integer0);
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Integer>) stack0);
      IteratorUtils.find((Iterator<Integer>) resettableListIterator0, (Predicate<? super Integer>) predicate0);
      SQLTransientException[] sQLTransientExceptionArray0 = null;
      int int0 = 509;
      int int1 = 1019;
      ResettableListIterator<SQLTransientException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLTransientExceptionArray0, int0, int1);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientException>) resettableListIterator1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Hashtable<SQLFeatureNotSupportedException, SQLClientInfoException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLClientInfoException>();
      hashtable0.elements();
      OrderedMapIterator<SQLWarning, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLWarning, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLWarning, DataTruncation>(orderedMapIterator0);
      MapIterator<SQLWarning, DataTruncation> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLWarning, DataTruncation>) orderedMapIterator0);
      Transformer<SQLWarning, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<SQLWarning>) mapIterator0, (Transformer<? super SQLWarning, String>) transformer0, "Collection must not be null", "", "");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("OP?K1KyM5", "", 32);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Hashtable<Locale.FilteringMode, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<Locale.FilteringMode, SQLInvalidAuthorizationSpecException>();
      HashMap<Locale.FilteringMode, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Locale.FilteringMode, SQLInvalidAuthorizationSpecException>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLTransactionRollbackException0);
      hashMap0.put(locale_FilteringMode0, sQLInvalidAuthorizationSpecException0);
      EntrySetMapIterator<Locale.FilteringMode, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<Locale.FilteringMode, SQLInvalidAuthorizationSpecException>(hashMap0);
      IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) entrySetMapIterator0, (Predicate<? super Locale.FilteringMode>) uniquePredicate0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 32);
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0, true);
      IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) singletonIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) uniquePredicate0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      ArrayIterator<ServiceLoader<Integer>> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<ServiceLoader<Integer>>(sQLRecoverableException0, 1422);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>((SQLDataException) null);
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Integer[]) null, 323, (-1050));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("OP?K1KyM5", "", 32);
      DefaultEquator.defaultEquator();
      IteratorUtils.emptyOrderedMapIterator();
      SQLWarning sQLWarning0 = new SQLWarning();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("OKRWc'#.'vq(a>)", "Predicate must not be null", "OKRWc'#.'vq(a>)", 101);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("Predicate must not be null", "zw^/-j", "zw^/-j", 101);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("Node must not be null", "R~m$62?|", "Node must not be null", 101);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("nvQA\"suoAW#'D", "", "", (-2146));
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("Estimated size must be greater than 0", "ListIterator must not be null", "Predicate must not be null", 1488);
      stackTraceElementArray0[4] = stackTraceElement4;
      sQLWarning0.setStackTrace(stackTraceElementArray0);
      sQLWarning0.getSuppressed();
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>(sQLWarning0, false);
      IteratorUtils.get((Iterator<SQLWarning>) singletonIterator0, 0);
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 7);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLWarning0);
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) singletonListIterator0;
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(linkedList0);
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) reverseListIterator0;
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) iteratorArray0[1]);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) linkedList0);
      iteratorArray0[2] = iterator0;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      iteratorArray0[3] = (Iterator<SQLSyntaxErrorException>) resettableListIterator0;
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[3];
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("OKRWc'#.'vq(a>)", sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException1;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      iteratorArray0[4] = (Iterator<SQLSyntaxErrorException>) resettableIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Hashtable<SQLFeatureNotSupportedException, SQLClientInfoException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLClientInfoException>();
      hashtable0.elements();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, 32);
      DefaultEquator.defaultEquator();
      Properties properties0 = new Properties();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null);
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      Hashtable<Locale.FilteringMode, SQLInvalidAuthorizationSpecException> hashtable1 = new Hashtable<Locale.FilteringMode, SQLInvalidAuthorizationSpecException>();
      EntrySetMapIterator<Locale.FilteringMode, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<Locale.FilteringMode, SQLInvalidAuthorizationSpecException>(hashtable1);
      IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) entrySetMapIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("{RS", "{RS", 32);
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0, false);
      IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) singletonIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      ArrayIterator<ServiceLoader<Integer>> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<ServiceLoader<Integer>>(sQLRecoverableException0, 2386);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      IteratorUtils.getIterator("");
      EmptyMapIterator.emptyMapIterator();
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      Iterator<?> iterator0 = IteratorUtils.getIterator("");
      EmptyMapIterator.emptyMapIterator();
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      List<Object> list0 = IteratorUtils.toList(iterator0);
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      ListIterator<Object> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Object>) resettableListIterator0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) null, (Object[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) listIterator0, (Transformer<? super Object, String>) transformer0, "", "", "H,0C$J8Z~vqRy%>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.lang.String' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Iterator<?> iterator0 = IteratorUtils.getIterator("");
      EmptyMapIterator.emptyMapIterator();
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      Iterable<Object> iterable0 = new LinkedHashSet<Object>();
      IteratorUtils.size(iterator0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      IteratorUtils.arrayListIterator(stringArray0, 0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      IteratorUtils.loopingIterator((Collection<? extends Integer>) arrayList0);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLClientInfoException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLFeatureNotSupportedException, ? extends SQLClientInfoException>) orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator1, (Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<Object>) null, (Transformer<? super Object, String>) transformer0, "vnSte", "vnSte", "f*!{U$Q");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate((Object) locale_FilteringMode0, (Equator<Object>) defaultEquator0);
      SQLWarning sQLWarning0 = new SQLWarning("", "e^h\"V8#*`lL`aL", 103);
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>(sQLWarning0, true);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLWarning>) singletonIterator0, 103);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 102
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Locale.FilteringMode, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.FilteringMode, ? extends SQLException>) orderedMapIterator0);
      IteratorUtils.asIterable((Iterator<? extends Locale.FilteringMode>) orderedMapIterator1);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      Integer[] integerArray0 = new Integer[9];
      int int0 = (-52);
      Integer integer0 = new Integer((-52));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-52));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-52));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(int0);
      integerArray0[8] = integer8;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Integer>) resettableListIterator0, (Predicate<? super Integer>) nullIsExceptionPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.isEmpty(listIterator0);
      Properties properties0 = new Properties();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate((Object) properties0, (Equator<Object>) defaultEquator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLWarning>) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.FilteringMode, ? extends SQLException>) orderedMapIterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      SQLDataException sQLDataException0 = new SQLDataException((Throwable) null);
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      arrayDeque0.iterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Locale.FilteringMode, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.FilteringMode, ? extends SQLException>) orderedMapIterator0);
      IteratorUtils.asIterable((Iterator<? extends Locale.FilteringMode>) orderedMapIterator1);
      Integer integer0 = new Integer((-1250));
      Integer integer1 = new Integer((-1250));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", sQLNonTransientConnectionException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLTimeoutException0, (Equator<Object>) defaultEquator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator(sQLClientInfoException0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) listIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<?>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("p");
      IteratorUtils.getIterator((Object) null);
      MapIterator<Properties, Predicate<Object>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      IteratorUtils.asMultipleUseIterable((Iterator<?>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Locale.FilteringMode, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.FilteringMode, ? extends SQLException>) orderedMapIterator0);
      IteratorUtils.asIterable((Iterator<? extends Locale.FilteringMode>) orderedMapIterator1);
      Integer integer0 = new Integer((-1250));
      Integer integer1 = new Integer((-1250));
      Integer[] integerArray0 = new Integer[8];
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      IteratorUtils.arrayIterator(integerArray0);
      DefaultEquator.defaultEquator();
      OrderedMapIterator<SQLDataException, SQLException> orderedMapIterator2 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLDataException>) orderedMapIterator2, (Predicate<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0, 0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.filteredIterator((Iterator<? extends Integer>) objectArrayIterator0, (Predicate<? super Integer>) uniquePredicate0);
      uniquePredicate0.evaluate(integer2);
      EmptyListIterator.resettableEmptyListIterator();
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      FactoryTransformer<SQLWarning, String> factoryTransformer0 = new FactoryTransformer<SQLWarning, String>(instantiateFactory0);
      IteratorUtils.toString((Iterator<SQLWarning>) null, (Transformer<? super SQLWarning, String>) factoryTransformer0, "", "org.apache.commons.collections4.IteratorUtils", "");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DefaultEquator.defaultEquator();
      Iterator<SQLFeatureNotSupportedException> iterator0 = null;
      IteratorUtils.size((Iterator<?>) null);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>((SQLDataException) null);
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[3];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("t9&Efsd&zxWx40", "DD*)A1d", 2870);
      SQLException sQLException0 = new SQLException("D2jW5ct[", "p+3~d@Y$L/", sQLNonTransientException0);
      SQLException sQLException1 = new SQLException("p+3~d@Y$L/", ")-t71`?", 3169, sQLException0);
      SQLWarning sQLWarning0 = new SQLWarning("D2jW5ct[", sQLException1);
      SQLDataException sQLDataException0 = new SQLDataException("p+3~d@Y$L/", "p+3~d@Y$L/", 2870, sQLWarning0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("", (String) null, 1714, sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException((String) null, sQLDataException1);
      sQLDataExceptionArray0[2] = sQLDataException2;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      IteratorUtils.toString((Iterator<SQLDataException>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.FilteringMode, ? extends SQLException>) orderedMapIterator0);
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode0.getNextSibling();
      iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IteratorUtils.singletonListIterator(sQLClientInfoException0);
      OrderedIterator<SQLWarning> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<String> class0 = String.class;
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 0);
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0, classArray0, classArray0);
      Transformer<SQLException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      IteratorUtils.toString((Iterator<SQLWarning>) orderedIterator0, (Transformer<? super SQLWarning, String>) transformer0, "", "", "#E");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      String string0 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.getIterator("");
      String string1 = "hCZOH 'Ywo:?Tr`mL%y";
      SQLDataException sQLDataException0 = new SQLDataException("", "hCZOH 'Ywo:?Tr`mL%y", 3254);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) singletonIterator0, class0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Integer integer0 = new Integer((-3202));
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) integer0, (Equator<Object>) defaultEquator0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLException>) nullIsTruePredicate0);
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      OrderedMapIterator<SQLTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Enumeration<SQLTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) enumeration0);
      Iterator<SQLTransientConnectionException>[] iteratorArray1 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 5);
      iteratorArray1[0] = iterator0;
      iteratorArray1[1] = iterator0;
      String string0 = "Transformer must not be null";
      SQLTransientException sQLTransientException0 = new SQLTransientException("cG7A6|", "", (-3202));
      SQLDataException sQLDataException0 = new SQLDataException("Transformer must not be null", "cG7A6|", sQLTransientException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLDataException0, (-3202), (-2639));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.FilteringMode, ? extends SQLException>) orderedMapIterator0);
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>((SQLDataException) null);
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(stack0);
      SingletonIterator<SQLDataException> singletonIterator1 = new SingletonIterator<SQLDataException>((SQLDataException) null);
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) reverseListIterator0, class0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) singletonIterator0, (Iterator<? extends SQLNonTransientException>) reverseListIterator0, (Iterator<? extends SQLNonTransientException>) reverseListIterator0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Integer integer0 = new Integer((-3202));
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) integer0, (Equator<Object>) defaultEquator0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      Predicate<SQLException> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLException>) nullIsTruePredicate0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) resettableListIterator0, (Predicate<? super SQLClientInfoException>) predicate1);
      IteratorUtils.size(listIterator0);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[4];
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.list.CursorableLinkedList$Cursor", "l", false);
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("l", "/n!'s1VsW)J");
      stringTokenizerArray0[1] = stringTokenizer1;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "l");
      StringTokenizer stringTokenizer2 = new StringTokenizer("");
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("org.apache.commons.collections4.list.CursorableLinkedList$Cursor", "", false);
      stringTokenizerArray0[3] = stringTokenizer3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringTokenizerArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.FilteringMode, ? extends SQLException>) orderedMapIterator0);
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode1.getNextSibling();
      iIOMetadataNode1.getChildNodes();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IteratorUtils.singletonListIterator(sQLClientInfoException0);
      OrderedIterator<SQLWarning> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<String> class0 = String.class;
      Class<SQLTransientException>[] classArray0 = (Class<SQLTransientException>[]) Array.newInstance(Class.class, 0);
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0, classArray0, classArray0);
      Transformer<SQLException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      IteratorUtils.toString((Iterator<SQLWarning>) orderedIterator0, (Transformer<? super SQLWarning, String>) transformer0, "", "org.apache.commons.collections4.IteratorUtils", "");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Locale.FilteringMode, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.FilteringMode, ? extends SQLException>) orderedMapIterator0);
      IteratorUtils.asIterable((Iterator<? extends Locale.FilteringMode>) orderedMapIterator1);
      Integer integer0 = new Integer((-1250));
      Integer integer1 = new Integer((-1250));
      Integer[] integerArray0 = new Integer[8];
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      IteratorUtils.arrayIterator(integerArray0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(orderedMapIterator0, defaultEquator0);
      IteratorUtils.matchesAll((Iterator<BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) equalPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) orderedMapIterator1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.isEmpty(listIterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      ListIterator<SQLClientInfoException> listIterator1 = IteratorUtils.singletonListIterator(sQLClientInfoException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      sQLClientInfoException0.initCause(batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) listIterator1, (Predicate<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ListIterator<EnumSet<Locale.FilteringMode>> listIterator0 = null;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, comparator0, comparatorPredicate_Criterion0);
      int int0 = 512;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 512, hashtable0);
      Comparator<SQLClientInfoException> comparator1 = (Comparator<SQLClientInfoException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate(sQLClientInfoException0, comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Predicate<Object> predicate0 = OrPredicate.orPredicate((Predicate<? super Object>) comparatorPredicate0, (Predicate<? super Object>) comparatorPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends EnumSet<Locale.FilteringMode>>) null, (Predicate<? super EnumSet<Locale.FilteringMode>>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Locale.FilteringMode, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.FilteringMode, ? extends SQLException>) orderedMapIterator0);
      IteratorUtils.asIterable((Iterator<? extends Locale.FilteringMode>) orderedMapIterator1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IteratorUtils.singletonListIterator(sQLClientInfoException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) allPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.getIterator(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      OrderedMapIterator<Object, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Object, SQLFeatureNotSupportedException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Object, ? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      int int0 = 0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) orderedMapIterator1, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Comparator<Object> comparator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      DefaultEquator.defaultEquator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      EqualPredicate.equalPredicate((Object) sQLFeatureNotSupportedException0, (Equator<Object>) defaultEquator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode1.getParentNode();
      iIOMetadataNode1.getChildNodes();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      IteratorUtils.singletonListIterator(sQLClientInfoException1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      MapIterator<String, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[0] = (Iterator<String>) mapIterator0;
      IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>[]) iteratorArray0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      IteratorUtils.loopingListIterator((List<Boolean>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      MapIterator<SQLSyntaxErrorException, ClientInfoStatus> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      OrderedMapIterator<Locale.FilteringMode, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Locale.FilteringMode, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Locale.FilteringMode, DataTruncation>(orderedMapIterator0);
      OrderedMapIterator<Locale.FilteringMode, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.FilteringMode, ? extends DataTruncation>) abstractOrderedMapIteratorDecorator0);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.FilteringMode, ? extends SQLException>) orderedMapIterator1);
      IteratorUtils.asIterable((Iterator<? extends Locale.FilteringMode>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Locale.FilteringMode, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.FilteringMode, ? extends SQLException>) orderedMapIterator0);
      IteratorUtils.asIterable((Iterator<? extends Locale.FilteringMode>) orderedMapIterator1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Transformer<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException> transformer0 = InvokerTransformer.invokerTransformer("[zWn: lU%{_9\"c%");
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientException>) iterator0);
      DefaultEquator.defaultEquator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNodeType();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IteratorUtils.singletonListIterator(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-4804));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      IteratorUtils.loopingIterator((Collection<?>) stack0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[0] = predicate0;
      DefaultEquator.defaultEquator();
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = IdentityPredicate.identityPredicate((Object) predicate0);
      predicateArray0[2] = predicate1;
      AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      stack0.add((SQLRecoverableException) null);
      NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Locale.FilteringMode, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.FilteringMode, ? extends SQLException>) orderedMapIterator0);
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>((SQLDataException) null);
      Iterator<Object> iterator0 = IteratorUtils.chainedIterator((Iterator<?>) orderedMapIterator1, (Iterator<?>) orderedMapIterator0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(singletonIterator0);
      IteratorUtils.find(iterator0, (Predicate<? super Object>) identityPredicate0);
      SQLWarning sQLWarning0 = new SQLWarning("'hn;^$F", "'hn;^$F", (-692));
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("null keys not alloRed");
      SQLDataException sQLDataException0 = new SQLDataException("null keys not alloRed", (Throwable) null);
      ArrayListIterator<Properties> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<Properties>(sQLDataException0, (-1), 482);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(") is the size of the list.");
      IteratorUtils.getIterator(iIOMetadataNode0);
      IteratorUtils.emptyOrderedMapIterator();
      EmptyMapIterator.emptyMapIterator();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      ListIterator<Properties> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends Properties>) listIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) listIterator1);
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, SQLException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      String string0 = "9/6PCvYbQqJu#_{";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("9/6PCvYbQqJu#_{", "9/6PCvYbQqJu#_{", 2024);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SingletonListIterator<SQLNonTransientException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientException>(sQLSyntaxErrorException0);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) singletonListIterator0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) list0);
      singletonListIterator0.remove();
      BoundedIterator<SQLNonTransientException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientException>) iterator0, (long) 2024);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientException>) boundedIterator0);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) resettableIterator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 1734;
      DataTruncation dataTruncation0 = new DataTruncation(2024, true, true, 1734, 1734);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.FilteringMode, ? extends SQLException>) orderedMapIterator0);
      EmptyListIterator.emptyListIterator();
      MapIterator<StringTokenizer, Predicate<Object>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) mapIterator0, 0L, 0L);
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 3);
      LinkedHashSet<StringTokenizer> linkedHashSet0 = new LinkedHashSet<StringTokenizer>();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.loopingIterator((Collection<?>) linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(orderedMapIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Collection must not be null", "Collection must not be null", (-200));
      MapIterator<Locale.FilteringMode, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Collection must not be null", "rYif8", (-2041));
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Properties properties1 = new Properties();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) "", (Equator<Object>) defaultEquator0);
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Predicate<Object> predicate2 = UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) mapIterator0, (Predicate<? super Locale.FilteringMode>) predicate2);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.matchesAll((Iterator<BatchUpdateException>) resettableListIterator0, (Predicate<? super BatchUpdateException>) predicate1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends String>) null, (-872L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.unmodifiableListIterator(listIterator0);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      PriorityQueue<Predicate<Object>> priorityQueue1 = new PriorityQueue<Predicate<Object>>(priorityQueue0);
      ResettableIterator<Predicate<Object>> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Predicate<Object>>) priorityQueue0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      priorityQueue0.spliterator();
      ResettableListIterator<Predicate<Object>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.collatedIterator((Comparator<? super Predicate<Object>>) comparator0, (Iterator<? extends Predicate<Object>>) resettableListIterator0, (Iterator<? extends Predicate<Object>>) resettableIterator0);
      EmptyListIterator.resettableEmptyListIterator();
      MapIterator<Properties, Predicate<Object>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) mapIterator0);
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) hashSet0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      ArrayListIterator<Properties> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<Properties>(locale_FilteringMode0, 10, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyMapIterator();
      Hashtable<DataTruncation, SQLTransientException>[] hashtableArray0 = (Hashtable<DataTruncation, SQLTransientException>[]) Array.newInstance(Hashtable.class, 4);
      Hashtable<DataTruncation, SQLTransientException> hashtable0 = new Hashtable<DataTruncation, SQLTransientException>();
      hashtableArray0[0] = hashtable0;
      Hashtable<DataTruncation, SQLTransientException> hashtable1 = new Hashtable<DataTruncation, SQLTransientException>();
      hashtableArray0[1] = hashtable1;
      Hashtable<DataTruncation, SQLTransientException> hashtable2 = new Hashtable<DataTruncation, SQLTransientException>();
      hashtableArray0[2] = hashtable2;
      int int0 = 128;
      Hashtable<DataTruncation, SQLTransientException> hashtable3 = new Hashtable<DataTruncation, SQLTransientException>(128);
      hashtableArray0[3] = hashtable3;
      IteratorUtils.arrayIterator(hashtableArray0);
      MapIterator<Properties, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<Properties, SQLClientInfoException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<PriorityQueue<ServiceLoader>>) mapIterator1, (Predicate<? super PriorityQueue<ServiceLoader>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*g");
      int int0 = 1;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Vector<SQLFeatureNotSupportedException> vector0 = new Vector<SQLFeatureNotSupportedException>();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      Properties properties0 = new Properties();
      ListIterator<Integer> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.peekingIterator((Iterator<? extends Integer>) listIterator0);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("");
      ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends String>) resettableIterator0, (Transformer<? super String, ? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.FilteringMode, ? extends SQLException>) orderedMapIterator0);
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "Ty", 100);
      IteratorUtils.emptyMapIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", (-936));
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Properties properties0 = new Properties();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransactionRollbackException0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLTimeoutException0, (Equator<Object>) defaultEquator0);
      OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) null, (Predicate<? super Locale.FilteringMode>) predicate0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.iterators.EmptyOrderedIterator", "", 777);
      IteratorUtils.emptyMapIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "losures must not be null", 1360);
      DefaultEquator.defaultEquator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) properties4, (Equator<Object>) defaultEquator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator(sQLClientInfoException0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) listIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0, 0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Iterator<Integer> iterator0 = new SingletonListIterator<Integer>(integer1);
      uniquePredicate0.evaluate(integer2);
      SkippingIterator<Integer> skippingIterator0 = IteratorUtils.skippingIterator(iterator0, (long) int0);
      IteratorUtils.boundedIterator((Iterator<? extends Integer>) skippingIterator0, 0L);
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.peekingIterator((Iterator<? extends Integer>) resettableListIterator0);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("~7wV");
      ExceptionTransformer.exceptionTransformer();
      Transformer<Object, SQLWarning> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLWarning> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends String>) resettableIterator0, (Transformer<? super String, ? extends SQLWarning>) transformer0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) iterator1);
      ServiceLoader<SQLRecoverableException>[] serviceLoaderArray0 = (ServiceLoader<SQLRecoverableException>[]) Array.newInstance(ServiceLoader.class, 4);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      ServiceLoader<SQLRecoverableException> serviceLoader0 = ServiceLoader.load(class0);
      serviceLoaderArray0[0] = serviceLoader0;
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      ServiceLoader<SQLRecoverableException> serviceLoader1 = ServiceLoader.loadInstalled(class1);
      serviceLoaderArray0[1] = serviceLoader1;
      Class<SQLRecoverableException> class2 = SQLRecoverableException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<SQLRecoverableException> serviceLoader2 = ServiceLoader.load(class2, classLoader0);
      serviceLoaderArray0[2] = serviceLoader2;
      Class<SQLRecoverableException> class3 = SQLRecoverableException.class;
      ServiceLoader<SQLRecoverableException> serviceLoader3 = ServiceLoader.loadInstalled(class3);
      serviceLoaderArray0[3] = serviceLoader3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(serviceLoaderArray0, 2008);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 4);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class0;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      classArray0[2] = class1;
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      classArray0[3] = class2;
      InvokerTransformer<SQLException, SQLInvalidAuthorizationSpecException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLInvalidAuthorizationSpecException>("", classArray0, classArray0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) invokerTransformer0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientException>) iterator0);
      IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 4);
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[0] = (Iterator<SQLRecoverableException>) resettableListIterator0;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.singletonIterator(locale_FilteringMode0);
      IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) resettableIterator0, 10);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate1 = IdentityPredicate.identityPredicate((Object) defaultEquator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate1;
      predicateArray0[2] = predicate1;
      predicateArray0[3] = predicate1;
      predicateArray0[4] = predicate0;
      predicateArray0[5] = predicate0;
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      predicateArray0[6] = (Predicate<Object>) andPredicate0;
      AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      stack0.add((SQLRecoverableException) null);
      NotPredicate.notPredicate((Predicate<? super Object>) predicate1);
      ListIterator<Object> listIterator0 = IteratorUtils.toListIterator(iterator0);
      IteratorUtils.find((Iterator<Object>) listIterator0, (Predicate<? super Object>) predicate0);
      SQLWarning sQLWarning0 = new SQLWarning("", "", (-1));
      int int0 = 12;
      ArrayListIterator<Properties> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<Properties>(",?r;", 2905, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      IteratorUtils.loopingIterator((Collection<?>) stack0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("List must not be null", "Po oA;,$1Q", 100);
      IteratorUtils.emptyMapIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("List must not be null", "|0FmDE=*;n$[x]", 1);
      Properties properties0 = new Properties();
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<?>) null, (Collection<? super Object>) arrayDeque0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-986);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("\"", "T[B6&$KR=E;b<*onz", 0, sQLNonTransientConnectionException0);
      sQLIntegrityConstraintViolationException0.setNextException(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "\"", "", 0);
      batchUpdateException0.setNextException(sQLIntegrityConstraintViolationException0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("\"", "\"", ":;kGE{$U0Rh[<:L)I;o", 1);
      stackTraceElementArray0[1] = stackTraceElement1;
      batchUpdateException0.setStackTrace(stackTraceElementArray0);
      sQLNonTransientConnectionException0.initCause(sQLIntegrityConstraintViolationException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0);
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) resettableIterator0, (-986));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -986
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      IteratorUtils.getIterator(sQLInvalidAuthorizationSpecException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", (String) null, 794);
      MapIterator<Locale.FilteringMode, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, 2829);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Properties properties0 = new Properties();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) batchUpdateException0, (Equator<Object>) defaultEquator0);
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) mapIterator0, (Predicate<? super Locale.FilteringMode>) predicate1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = (-952);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(";CsfU_e|(4g2:]&x3");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "T[B6&$KR=E;b<*onz", 0, sQLNonTransientConnectionException0);
      sQLIntegrityConstraintViolationException0.setNextException(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement(";CsfU_e|(4g2:]&x3", "", "", 0);
      batchUpdateException0.setNextException(sQLIntegrityConstraintViolationException0);
      stackTraceElementArray0[0] = stackTraceElement0;
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) objectArrayIterator0, (Iterator<? extends SQLNonTransientException>) objectArrayIterator0, (Iterator<? extends SQLNonTransientException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Locale.FilteringMode, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.FilteringMode, ? extends SQLException>) orderedMapIterator0);
      IteratorUtils.asIterable((Iterator<? extends Locale.FilteringMode>) orderedMapIterator1);
      int int0 = (-200);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) orderedMapIterator0, (-200));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.getIterator(iIOMetadataNode0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "List must not be null", (-2041));
      IteratorUtils.emptyMapIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("|0FmDE=*;n$[x]", "List must not be null", 794);
      DefaultEquator.defaultEquator();
      Properties properties0 = new Properties();
      HashSet<IIOMetadataNode> hashSet0 = new HashSet<IIOMetadataNode>();
      IteratorUtils.loopingIterator((Collection<?>) hashSet0);
      IteratorUtils.emptyMapIterator();
      OrderedMapIterator<SQLException, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<HashMap<SQLNonTransientException, SQLNonTransientConnectionException>, ArrayList<HashSet>>) orderedMapIterator0);
      MapIterator<DataTruncation, Stack<HashSet>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<DataTruncation> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) mapIterator0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 8);
      iteratorArray0[0] = (Iterator<DataTruncation>) mapIterator0;
      iteratorArray0[1] = (Iterator<DataTruncation>) mapIterator0;
      iteratorArray0[2] = (Iterator<DataTruncation>) mapIterator0;
      iteratorArray0[3] = (Iterator<DataTruncation>) mapIterator0;
      iteratorArray0[4] = iterator0;
      iteratorArray0[5] = (Iterator<DataTruncation>) mapIterator0;
      iteratorArray0[6] = (Iterator<DataTruncation>) mapIterator0;
      OrderedMapIterator<DataTruncation, Locale.FilteringMode> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[7] = (Iterator<DataTruncation>) orderedMapIterator1;
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      DataTruncation dataTruncation0 = new DataTruncation((-2553), false, false, (-1), 1, sQLNonTransientConnectionException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(14, true, true, 0, 2304, sQLTransactionRollbackException0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-2553), true, false, (-2041), 2390);
      dataTruncationArray0[2] = dataTruncation2;
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<Locale.FilteringMode, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.FilteringMode, ? extends SQLException>) orderedMapIterator0);
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>((SQLDataException) null);
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) singletonIterator0, class0);
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<?>) null, (Transformer<? super Object, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.FilteringMode, ? extends SQLException>) orderedMapIterator0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) listIterator0, (Iterator<? extends SQLNonTransientException>) listIterator0, (Iterator<? extends SQLNonTransientException>) listIterator0);
      MapIterator<StringTokenizer, Predicate<Object>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) mapIterator0, 0L, 0L);
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 3);
      OrderedMapIterator<SQLTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) orderedMapIterator1;
      Enumeration<SQLTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) iteratorArray0[0]);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) enumeration0);
      iteratorArray0[1] = iterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.unmodifiableListIterator(listIterator0);
      OrderedMapIterator<Locale.FilteringMode, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Locale.FilteringMode, SQLInvalidAuthorizationSpecException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Locale.FilteringMode, SQLInvalidAuthorizationSpecException>(orderedMapIterator0);
      OrderedMapIterator<Locale.FilteringMode, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.FilteringMode, ? extends SQLException>) abstractOrderedMapIteratorDecorator0);
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>((SQLDataException) null);
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) listIterator0, class0);
      IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) orderedMapIterator1, 128);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.FilteringMode, ? extends SQLException>) orderedMapIterator0);
      Integer integer0 = new Integer((-1250));
      Integer integer1 = new Integer((-1250));
      Integer[] integerArray0 = new Integer[8];
      IteratorUtils.arrayIterator(integerArray0);
      ArrayDeque<SQLException>[] arrayDequeArray0 = (ArrayDeque<SQLException>[]) Array.newInstance(ArrayDeque.class, 3);
      ArrayDeque<SQLException> arrayDeque0 = new ArrayDeque<SQLException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLException> arrayDeque1 = new ArrayDeque<SQLException>();
      arrayDequeArray0[1] = arrayDeque1;
      ArrayDeque<SQLException> arrayDeque2 = new ArrayDeque<SQLException>();
      arrayDequeArray0[2] = arrayDeque2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(arrayDequeArray0, (-1250), (-1250));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<SQLTransactionRollbackException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      IteratorUtils.isEmpty(listIterator1);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      int[] intArray0 = new int[3];
      intArray0[0] = 794;
      intArray0[1] = 794;
      intArray0[2] = 794;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.iterators.EmptyOrderedIterator", "org.apache.commons.collections4.map.Flat3Map$EntryIterator", (-661));
      IteratorUtils.emptyMapIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Closures must not be null", "org.apache.commons.collections4.map.Flat3Map$EntryIterator", 1360);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate((Object) sQLTransactionRollbackException0, (Equator<Object>) defaultEquator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.map.Flat3Map$EntryIterator");
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<SQLTransactionRollbackException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      IteratorUtils.isEmpty(listIterator1);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      String string0 = "org.apache.commons.collections4.map.Flat3Map$EntryIterator";
      int[] intArray0 = new int[4];
      intArray0[0] = 794;
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0, 0);
      assertNotNull(objectArrayIterator0);
      assertEquals(3, integerArray0.length);
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(3, objectArrayIterator0.getEndIndex());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("GtazO;mF|Py");
      assertNotNull(sQLRecoverableException0);
      assertEquals("GtazO;mF|Py", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: GtazO;mF|Py", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("GtazO;mF|Py", "5", sQLRecoverableException0);
      assertNotNull(sQLRecoverableException1);
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertEquals("GtazO;mF|Py", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: GtazO;mF|Py", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("GtazO;mF|Py", sQLRecoverableException1.getMessage());
      assertEquals("java.sql.SQLRecoverableException: GtazO;mF|Py", sQLRecoverableException1.toString());
      assertEquals("5", sQLRecoverableException1.getSQLState());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[6];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("..Qw N;M)", "org.apache.commons.collections4.functors.IdentityPredicate", 9, sQLRecoverableException0);
      assertNotNull(sQLRecoverableException2);
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException2.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException2.equals((Object)sQLRecoverableException0));
      assertEquals("GtazO;mF|Py", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: GtazO;mF|Py", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ..Qw N;M)", sQLRecoverableException2.toString());
      assertEquals(9, sQLRecoverableException2.getErrorCode());
      assertEquals("..Qw N;M)", sQLRecoverableException2.getMessage());
      assertEquals("org.apache.commons.collections4.functors.IdentityPredicate", sQLRecoverableException2.getSQLState());
      
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException2;
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException1;
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("GtazO;mF|Py", "GtazO;mF|Py", 512);
      assertNotNull(sQLRecoverableException3);
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException1));
      assertEquals("GtazO;mF|Py", sQLRecoverableException3.getMessage());
      assertEquals("GtazO;mF|Py", sQLRecoverableException3.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: GtazO;mF|Py", sQLRecoverableException3.toString());
      assertEquals(512, sQLRecoverableException3.getErrorCode());
      
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException3;
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException0;
      ObjectArrayIterator<SQLRecoverableException> objectArrayIterator1 = new ObjectArrayIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0, 0);
      assertNotNull(objectArrayIterator1);
      assertEquals(6, sQLRecoverableExceptionArray0.length);
      assertTrue(objectArrayIterator1.hasNext());
      assertEquals(0, objectArrayIterator1.getStartIndex());
      assertEquals(6, objectArrayIterator1.getEndIndex());
      
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLRecoverableException>) objectArrayIterator1, (Object) int0);
      assertEquals(6, sQLRecoverableExceptionArray0.length);
      assertFalse(boolean0);
      assertEquals(0, objectArrayIterator1.getStartIndex());
      assertFalse(objectArrayIterator1.hasNext());
      assertEquals(6, objectArrayIterator1.getEndIndex());
      
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      List<SQLInvalidAuthorizationSpecException> list0 = IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, 512);
      assertNotNull(list0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(list0);
      assertNotNull(loopingListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(loopingListIterator0.hasPrevious());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasNext());
      
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) loopingListIterator0);
      assertNotNull(enumeration0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(loopingListIterator0.hasPrevious());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasNext());
      
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0, (Collection<? super SQLInvalidAuthorizationSpecException>) list0);
      assertNotNull(iterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(loopingListIterator0.hasPrevious());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasNext());
      
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Locale.FilteringMode, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.FilteringMode, ? extends SQLException>) orderedMapIterator0);
      IteratorUtils.asIterable((Iterator<? extends Locale.FilteringMode>) orderedMapIterator1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      uniquePredicate0.evaluate((Object) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-817), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = 512;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 512, 231);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<SQLTransientConnectionException>[] linkedListArray0 = (LinkedList<SQLTransientConnectionException>[]) Array.newInstance(LinkedList.class, 0);
      IteratorUtils.arrayListIterator(linkedListArray0, 0, 0);
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyListIterator();
      EmptyListIterator.emptyListIterator();
      Class<String> class0 = String.class;
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 9);
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      classArray0[0] = class1;
      Class<SQLTimeoutException> class2 = SQLTimeoutException.class;
      classArray0[1] = class2;
      Class<SQLTimeoutException> class3 = SQLTimeoutException.class;
      classArray0[2] = class3;
      Class<SQLTimeoutException> class4 = SQLTimeoutException.class;
      classArray0[3] = class4;
      Class<SQLTimeoutException> class5 = SQLTimeoutException.class;
      classArray0[4] = class5;
      Class<SQLTimeoutException> class6 = SQLTimeoutException.class;
      classArray0[5] = class6;
      Class<SQLTimeoutException> class7 = SQLTimeoutException.class;
      classArray0[6] = class7;
      Class<SQLTimeoutException> class8 = SQLTimeoutException.class;
      classArray0[7] = class8;
      Class<SQLTimeoutException> class9 = SQLTimeoutException.class;
      classArray0[8] = class9;
      // Undeclared exception!
      try { 
        InstantiateFactory.instantiateFactory(class0, (Class<?>[]) classArray0, (Object[]) classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InstantiateFactory: The constructor must exist and be public 
         //
         verifyException("org.apache.commons.collections4.functors.InstantiateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.FilteringMode, ? extends SQLException>) orderedMapIterator0);
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      String string0 = "";
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList1.descendingIterator();
      Iterator<Integer> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator(iterator1, (long) (-27));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0, 0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Iterator<Integer> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Integer>) objectArrayIterator0, (Predicate<? super Integer>) uniquePredicate0);
      uniquePredicate0.evaluate(integer2);
      SkippingIterator<Integer> skippingIterator0 = IteratorUtils.skippingIterator(iterator0, (long) int0);
      BoundedIterator<Integer> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Integer>) skippingIterator0, 0L);
      IteratorUtils.peekingIterator((Iterator<? extends Integer>) boundedIterator0);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("~7wV");
      Transformer<Object, SQLWarning> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends String>) resettableIterator0, (Transformer<? super String, ? extends SQLWarning>) transformer0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = "ejnntxZ5mKzO";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("ejnntxZ5mKzO");
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      PriorityQueue<Predicate<Object>> priorityQueue1 = new PriorityQueue<Predicate<Object>>(priorityQueue0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.FilteringMode, ? extends SQLException>) orderedMapIterator0);
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.emptyOrderedIterator();
      Class<String> class0 = String.class;
      Class<SQLTransientException>[] classArray0 = (Class<SQLTransientException>[]) Array.newInstance(Class.class, 0);
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0, classArray0, classArray0);
      FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[2] = integer1;
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0, 0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      uniquePredicate0.evaluate(objectArrayIterator0);
      IteratorUtils.filteredIterator((Iterator<? extends Integer>) objectArrayIterator0, (Predicate<? super Integer>) uniquePredicate0);
      String string0 = "org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("}mz@6'D 1Kl1B/J", "org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("}mz@6'D 1Kl1B/J", sQLNonTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", "'YTG", 1724, sQLNonTransientException0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      ListIteratorWrapper<SQLRecoverableException> listIteratorWrapper0 = new ListIteratorWrapper<SQLRecoverableException>(listIterator0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLRecoverableException>) listIteratorWrapper0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", "org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", true);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) stringTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<SQLTransactionRollbackException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      IteratorUtils.isEmpty(listIterator1);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      int[] intArray0 = new int[3];
      intArray0[0] = 794;
      intArray0[1] = 794;
      intArray0[2] = 794;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.iterators.EmptyOrderedIterator", "org.apache.commons.collections4.map.Flat3Map$EntryIterator", (-661));
      MapIterator<Locale.FilteringMode, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Closures must not be null", "org.apache.commons.collections4.map.Flat3Map$EntryIterator", 1360);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLTransactionRollbackException0, (Equator<Object>) defaultEquator0);
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) mapIterator0, (Predicate<? super Locale.FilteringMode>) predicate1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[6];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "");
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("");
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("5", "..Qw N;M)", sQLRecoverableException1);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException2;
      ObjectArrayIterator<SQLRecoverableException> objectArrayIterator0 = new ObjectArrayIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0, 0);
      IteratorUtils.contains((Iterator<SQLRecoverableException>) objectArrayIterator0, (Object) sQLRecoverableExceptionArray0[5]);
      TreeSet<ClientInfoStatus>[] treeSetArray0 = (TreeSet<ClientInfoStatus>[]) Array.newInstance(TreeSet.class, 6);
      TreeSet<ClientInfoStatus> treeSet0 = new TreeSet<ClientInfoStatus>();
      treeSetArray0[0] = treeSet0;
      TreeSet<ClientInfoStatus> treeSet1 = new TreeSet<ClientInfoStatus>();
      treeSetArray0[1] = treeSet1;
      TreeSet<ClientInfoStatus> treeSet2 = new TreeSet<ClientInfoStatus>();
      treeSetArray0[2] = treeSet2;
      TreeSet<ClientInfoStatus> treeSet3 = new TreeSet<ClientInfoStatus>();
      treeSetArray0[3] = treeSet3;
      TreeSet<ClientInfoStatus> treeSet4 = new TreeSet<ClientInfoStatus>();
      treeSetArray0[4] = treeSet4;
      TreeSet<ClientInfoStatus> treeSet5 = new TreeSet<ClientInfoStatus>();
      treeSetArray0[5] = treeSet5;
      IteratorUtils.arrayListIterator(treeSetArray0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) locale_FilteringMode0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[6];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "");
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      uniquePredicate0.evaluate("");
      Iterator<Integer> iterator0 = null;
      Predicate<Object> predicate0 = AndPredicate.andPredicate((Predicate<? super Object>) uniquePredicate0, (Predicate<? super Object>) uniquePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Integer>) null, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0, 0);
      assertNotNull(objectArrayIterator0);
      assertEquals(3, integerArray0.length);
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(3, objectArrayIterator0.getEndIndex());
      
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      boolean boolean0 = uniquePredicate0.evaluate(objectArrayIterator0);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(3, objectArrayIterator0.getEndIndex());
      
      Iterator<Integer> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Integer>) objectArrayIterator0, (Predicate<? super Integer>) uniquePredicate0);
      assertNotNull(iterator0);
      assertEquals(3, integerArray0.length);
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(3, objectArrayIterator0.getEndIndex());
      
      boolean boolean1 = uniquePredicate0.evaluate(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      SkippingIterator<Integer> skippingIterator0 = IteratorUtils.skippingIterator(iterator0, (long) int0);
      assertNotNull(skippingIterator0);
      assertEquals(3, integerArray0.length);
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(3, objectArrayIterator0.getEndIndex());
      
      BoundedIterator<Integer> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Integer>) skippingIterator0, 0L);
      assertNotNull(boundedIterator0);
      assertEquals(3, integerArray0.length);
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(3, objectArrayIterator0.getEndIndex());
      
      IteratorUtils.peekingIterator((Iterator<? extends Integer>) boundedIterator0);
      IteratorUtils.singletonIterator("~7wV");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.loopingIterator((Collection<?>) stack0);
      assertNotNull(resettableIterator0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      assertNotNull(predicate0);
      
      predicateArray0[0] = predicate0;
      int int0 = (-243);
      int int1 = 264;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) predicate0, (-243), 264);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      PriorityQueue<Predicate<Object>> priorityQueue1 = new PriorityQueue<Predicate<Object>>(priorityQueue0);
      assertNotNull(priorityQueue1);
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, priorityQueue1.size());
      
      ResettableIterator<Predicate<Object>> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Predicate<Object>>) priorityQueue1);
      assertNotNull(resettableIterator0);
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, priorityQueue1.size());
      
      Iterator<Predicate<Object>> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Predicate<Object>>) comparator0, (Iterator<? extends Predicate<Object>>) resettableIterator0, (Iterator<? extends Predicate<Object>>) resettableIterator0);
      assertNotNull(iterator0);
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, priorityQueue1.size());
      
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 4);
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLRecoverableException>) resettableListIterator0);
      assertNotNull(listIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      iteratorArray0[0] = (Iterator<SQLRecoverableException>) listIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) priorityQueue1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ArrayList<Transformer<SQLRecoverableException, SQLClientInfoException>> arrayList0 = new ArrayList<Transformer<SQLRecoverableException, SQLClientInfoException>>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0);
      assertNotNull(iterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) iterator0);
      assertNotNull(enumeration0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0);
      assertNotNull(iterator1);
      assertFalse(iterator1.equals((Object)iterator0));
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      boolean boolean0 = IteratorUtils.isEmpty(iterator1);
      assertFalse(iterator0.equals((Object)iterator1));
      assertFalse(iterator1.equals((Object)iterator0));
      assertTrue(boolean0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) iterator1);
      assertNotNull(list0);
      assertFalse(iterator0.equals((Object)iterator1));
      assertFalse(iterator1.equals((Object)iterator0));
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      assertNotNull(predicate0);
      
      predicateArray0[0] = predicate0;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) predicate0, (Equator<Object>) defaultEquator0);
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = IdentityPredicate.identityPredicate((Object) predicate0);
      assertNotNull(predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      predicateArray0[2] = predicate2;
      Predicate<Object> predicate3 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      assertNotNull(predicate3);
      assertEquals(3, predicateArray0.length);
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      
      boolean boolean0 = stack0.add((SQLRecoverableException) null);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      
      Predicate<Object> predicate4 = NotPredicate.notPredicate((Predicate<? super Object>) predicate3);
      assertNotNull(predicate4);
      assertEquals(3, predicateArray0.length);
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate3));
      
      int int0 = 1937;
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0);
      assertNotNull(resettableIterator0);
      assertEquals(2, objectArray0.length);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Vector<SQLTransientException> vector0 = new Vector<SQLTransientException>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      boolean boolean0 = vector0.add((SQLTransientException) null);
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      Properties properties1 = new Properties();
      assertNotNull(properties1);
      assertTrue(properties1.equals((Object)properties0));
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      
      Properties properties2 = new Properties();
      assertNotNull(properties2);
      assertTrue(properties2.equals((Object)properties1));
      assertTrue(properties2.equals((Object)properties0));
      assertEquals(0, properties2.size());
      assertTrue(properties2.isEmpty());
      
      Properties properties3 = new Properties();
      assertNotNull(properties3);
      assertTrue(properties3.equals((Object)properties2));
      assertTrue(properties3.equals((Object)properties0));
      assertTrue(properties3.equals((Object)properties1));
      assertTrue(properties3.isEmpty());
      assertEquals(0, properties3.size());
      
      Properties[] propertiesArray0 = new Properties[8];
      propertiesArray0[0] = properties3;
      propertiesArray0[1] = properties1;
      Properties properties4 = new Properties();
      assertNotNull(properties4);
      assertTrue(properties4.equals((Object)properties2));
      assertTrue(properties4.equals((Object)properties0));
      assertTrue(properties4.equals((Object)properties1));
      assertTrue(properties4.equals((Object)properties3));
      assertEquals(0, properties4.size());
      assertTrue(properties4.isEmpty());
      
      propertiesArray0[2] = properties4;
      propertiesArray0[3] = properties1;
      propertiesArray0[4] = properties1;
      propertiesArray0[5] = properties2;
      propertiesArray0[6] = properties3;
      propertiesArray0[7] = properties2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      OrderedMapIterator<Locale.FilteringMode, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.FilteringMode, ? extends SQLException>) orderedMapIterator0);
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      
      Iterable<Locale.FilteringMode> iterable0 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(iterable0);
      
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>((SQLDataException) null);
      assertNotNull(singletonIterator0);
      assertTrue(singletonIterator0.hasNext());
      
      Class<SQLException> class0 = SQLException.class;
      SQLException[] sQLExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLException>) singletonIterator0, class0);
      assertNotNull(sQLExceptionArray0);
      assertEquals(1, sQLExceptionArray0.length);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[6];
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("4u^XK%", "4u^XK%", intArray0);
      assertNotNull(batchUpdateException0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("4u^XK%", batchUpdateException0.getSQLState());
      assertEquals("4u^XK%", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: 4u^XK%", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("4=]6g+w#BYN", "4u^XK%", intArray0);
      assertNotNull(batchUpdateException1);
      assertEquals(0, intArray0.length);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("java.sql.BatchUpdateException: 4=]6g+w#BYN", batchUpdateException1.toString());
      assertEquals("4u^XK%", batchUpdateException1.getSQLState());
      assertEquals("4=]6g+w#BYN", batchUpdateException1.getMessage());
      assertEquals(0, batchUpdateException1.getErrorCode());
      
      batchUpdateException0.addSuppressed(batchUpdateException1);
      assertNotSame(batchUpdateException0, batchUpdateException1);
      assertNotSame(batchUpdateException1, batchUpdateException0);
      assertEquals(0, intArray0.length);
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("4u^XK%", batchUpdateException0.getSQLState());
      assertEquals("4u^XK%", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: 4u^XK%", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: 4=]6g+w#BYN", batchUpdateException1.toString());
      assertEquals("4u^XK%", batchUpdateException1.getSQLState());
      assertEquals("4=]6g+w#BYN", batchUpdateException1.getMessage());
      assertEquals(0, batchUpdateException1.getErrorCode());
      
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("4=]6g+w#BYN", "4=]6g+w#BYN", (-1), intArray0);
      assertNotNull(batchUpdateException2);
      assertEquals(0, intArray0.length);
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException0));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("4=]6g+w#BYN", batchUpdateException2.getMessage());
      assertEquals("java.sql.BatchUpdateException: 4=]6g+w#BYN", batchUpdateException2.toString());
      assertEquals("4=]6g+w#BYN", batchUpdateException2.getSQLState());
      assertEquals((-1), batchUpdateException2.getErrorCode());
      
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray0);
      assertNotNull(batchUpdateException3);
      assertEquals(0, intArray0.length);
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException0));
      assertArrayEquals(new int[] {}, intArray0);
      assertNull(batchUpdateException3.getMessage());
      assertNull(batchUpdateException3.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException3.toString());
      assertEquals(0, batchUpdateException3.getErrorCode());
      
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("V7R)", "_JAY\"/*g8*5}@.NCb$j", 0, intArray0, batchUpdateException0);
      assertNotNull(batchUpdateException4);
      assertEquals(0, intArray0.length);
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException2));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("4u^XK%", batchUpdateException0.getSQLState());
      assertEquals("4u^XK%", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: 4u^XK%", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("_JAY\"/*g8*5}@.NCb$j", batchUpdateException4.getSQLState());
      assertEquals("java.sql.BatchUpdateException: V7R)", batchUpdateException4.toString());
      assertEquals("V7R)", batchUpdateException4.getMessage());
      assertEquals(0, batchUpdateException4.getErrorCode());
      
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      String string0 = "q :f04X)Ls";
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("_JAY\"/*g8*5}@.NCb$j", "q :f04X)Ls", intArray0, batchUpdateException2);
      assertNotNull(batchUpdateException5);
      assertEquals(0, intArray0.length);
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException3));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("4=]6g+w#BYN", batchUpdateException2.getMessage());
      assertEquals("java.sql.BatchUpdateException: 4=]6g+w#BYN", batchUpdateException2.toString());
      assertEquals("4=]6g+w#BYN", batchUpdateException2.getSQLState());
      assertEquals((-1), batchUpdateException2.getErrorCode());
      assertEquals("_JAY\"/*g8*5}@.NCb$j", batchUpdateException5.getMessage());
      assertEquals(0, batchUpdateException5.getErrorCode());
      assertEquals("q :f04X)Ls", batchUpdateException5.getSQLState());
      assertEquals("java.sql.BatchUpdateException: _JAY\"/*g8*5}@.NCb$j", batchUpdateException5.toString());
      
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0, 0, 0);
      assertNotNull(resettableIterator0);
      assertEquals(6, batchUpdateExceptionArray0.length);
      
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) resettableIterator0);
      assertNotNull(enumeration0);
      assertEquals(6, batchUpdateExceptionArray0.length);
      
      int int0 = (-1514);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("q :f04X)Ls", "_JAY\"/*g8*5}@.NCb$j");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // _JAY\"/*g8*5}@.NCb$j
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("");
      assertNotNull(iterator0);
      
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 4);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class0;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      classArray0[1] = class1;
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      classArray0[2] = class2;
      Class<SQLIntegrityConstraintViolationException> class3 = SQLIntegrityConstraintViolationException.class;
      classArray0[3] = class3;
      InvokerTransformer<SQLException, SQLInvalidAuthorizationSpecException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLInvalidAuthorizationSpecException>("", classArray0, classArray0);
      assertNotNull(invokerTransformer0);
      assertEquals(4, classArray0.length);
      
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) invokerTransformer0);
      assertNotNull(iterator0);
      assertEquals(4, classArray0.length);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      
      Iterable<SQLNonTransientException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientException>) iterator0);
      assertNotNull(iterable0);
      assertEquals(4, classArray0.length);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      
      OrderedIterator<HashMap<SQLNonTransientException, IIOMetadataNode>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 100, (-171));
      assertNotNull(dataTruncation0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 4);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class0;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      classArray0[2] = class1;
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      classArray0[3] = class2;
      InvokerTransformer<SQLException, SQLInvalidAuthorizationSpecException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLInvalidAuthorizationSpecException>("", classArray0, classArray0);
      assertNotNull(invokerTransformer0);
      assertEquals(4, classArray0.length);
      
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) invokerTransformer0);
      assertNotNull(iterator0);
      assertEquals(4, classArray0.length);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      
      Iterable<SQLNonTransientException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientException>) iterator0);
      assertNotNull(iterable0);
      assertEquals(4, classArray0.length);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      
      OrderedIterator<HashMap<SQLNonTransientException, IIOMetadataNode>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.singletonIterator(locale_FilteringMode0);
      assertNotNull(resettableIterator0);
      
      List<Locale.FilteringMode> list0 = IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) resettableIterator0, 3254);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(list0.contains(locale_FilteringMode0));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = (-972);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "T[B6&$KR=E;b<*onz", 0, sQLNonTransientConnectionException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("T[B6&$KR=E;b<*onz", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      sQLIntegrityConstraintViolationException0.setNextException(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("T[B6&$KR=E;b<*onz", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      sQLNonTransientConnectionException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("T[B6&$KR=E;b<*onz", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "T[B6&$KR=E;b<*onz", intArray0, sQLNonTransientConnectionException0);
      assertNotNull(batchUpdateException0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 0, (-972)}, intArray0);
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("T[B6&$KR=E;b<*onz", batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "", 0);
      assertNotNull(stackTraceElement0);
      assertEquals(".(:0)", stackTraceElement0.toString());
      assertEquals(0, stackTraceElement0.getLineNumber());
      assertEquals("", stackTraceElement0.getClassName());
      assertEquals("", stackTraceElement0.getFileName());
      assertEquals("", stackTraceElement0.getMethodName());
      assertFalse(stackTraceElement0.isNativeMethod());
      
      batchUpdateException0.setNextException(sQLIntegrityConstraintViolationException0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 0, (-972)}, intArray0);
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("T[B6&$KR=E;b<*onz", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("T[B6&$KR=E;b<*onz", batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "", ":;kGE{$U0Rh[<:L)I;o", 1);
      assertNotNull(stackTraceElement1);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertEquals(":;kGE{$U0Rh[<:L)I;o", stackTraceElement1.getFileName());
      assertEquals("", stackTraceElement1.getMethodName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals(".(:;kGE{$U0Rh[<:L)I;o:1)", stackTraceElement1.toString());
      assertEquals("", stackTraceElement1.getClassName());
      assertEquals(1, stackTraceElement1.getLineNumber());
      
      stackTraceElementArray0[1] = stackTraceElement1;
      batchUpdateException0.setStackTrace(stackTraceElementArray0);
      assertEquals(4, intArray0.length);
      assertEquals(2, stackTraceElementArray0.length);
      assertArrayEquals(new int[] {0, 1, 0, (-972)}, intArray0);
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("T[B6&$KR=E;b<*onz", batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)sQLNonTransientConnectionException0.initCause(sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertEquals("", sQLNonTransientConnectionException1.getMessage());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException1.toString());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("T[B6&$KR=E;b<*onz", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 1);
      assertNotNull(resettableListIterator0);
      assertEquals(1, batchUpdateExceptionArray0.length);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      Object[] objectArray0 = new Object[1];
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) resettableIterator0, (-972));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -972
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      OrderedMapIterator<Locale.FilteringMode, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.FilteringMode, ? extends SQLException>) orderedMapIterator0);
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      
      Iterable<Locale.FilteringMode> iterable0 = IteratorUtils.asIterable((Iterator<? extends Locale.FilteringMode>) orderedMapIterator1);
      assertNotNull(iterable0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      
      Integer integer0 = new Integer((-1250));
      assertNotNull(integer0);
      assertEquals((-1250), (int)integer0);
      
      Integer integer1 = new Integer((-1250));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-1250), (int)integer1);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      assertNotNull(resettableIterator0);
      assertEquals(8, integerArray0.length);
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(orderedMapIterator0, defaultEquator0);
      assertNotNull(equalPredicate0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(equalPredicate0);
      assertNotNull(notPredicate0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(equalPredicate0);
      assertNotNull(nullIsExceptionPredicate0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      Integer integer2 = IteratorUtils.find((Iterator<Integer>) resettableIterator0, (Predicate<? super Integer>) notPredicate0);
      assertNull(integer2);
      assertEquals(8, integerArray0.length);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      OrderedMapIterator<Locale.FilteringMode, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.FilteringMode, ? extends SQLException>) orderedMapIterator0);
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      
      Iterable<Locale.FilteringMode> iterable0 = IteratorUtils.asIterable((Iterator<? extends Locale.FilteringMode>) orderedMapIterator1);
      assertNotNull(iterable0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      
      Integer integer0 = new Integer((-2171));
      assertNotNull(integer0);
      assertEquals((-2171), (int)integer0);
      
      Integer integer1 = new Integer((-1250));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1250), (int)integer1);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      assertNotNull(resettableIterator0);
      assertEquals(4, integerArray0.length);
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(integerArray0[0], defaultEquator0);
      assertNotNull(equalPredicate0);
      assertEquals(4, integerArray0.length);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(equalPredicate0);
      assertNotNull(notPredicate0);
      assertEquals(4, integerArray0.length);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(notPredicate0);
      assertNotNull(nullIsExceptionPredicate0);
      assertEquals(4, integerArray0.length);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      Integer integer2 = IteratorUtils.find((Iterator<Integer>) resettableIterator0, (Predicate<? super Integer>) nullIsExceptionPredicate0);
      assertNotNull(integer2);
      assertEquals(4, integerArray0.length);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-2171), (int)integer2);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      Integer integer3 = new Integer((-2171));
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertEquals((-2171), (int)integer3);
      
      ResettableIterator<Object> resettableIterator1 = IteratorUtils.singletonIterator((Object) integer3);
      assertNotNull(resettableIterator1);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) resettableListIterator0);
      assertNotNull(list0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.loopingIterator((Collection<?>) list0);
      assertNotNull(resettableIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      assertNotNull(predicate0);
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Predicate<Object> predicate1 = IdentityPredicate.identityPredicate((Object) integer0);
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      predicateArray0[0] = predicate1;
      predicateArray0[1] = predicate1;
      predicateArray0[2] = predicate0;
      Predicate<Object> predicate2 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      assertNotNull(predicate2);
      assertEquals(3, predicateArray0.length);
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      boolean boolean0 = stack0.add((SQLRecoverableException) null);
      assertTrue(boolean0);
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      
      Predicate<Object> predicate3 = NotPredicate.notPredicate((Predicate<? super Object>) predicate2);
      assertNotNull(predicate3);
      assertEquals(3, predicateArray0.length);
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      
      Object object0 = IteratorUtils.find((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) predicate0);
      assertNull(object0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      SQLWarning sQLWarning0 = new SQLWarning("+Fie", "+Fie", (-1));
      assertNotNull(sQLWarning0);
      assertEquals((-1), sQLWarning0.getErrorCode());
      assertEquals("+Fie", sQLWarning0.getMessage());
      assertEquals("+Fie", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: +Fie", sQLWarning0.toString());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLWarning0);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals((-1), sQLWarning0.getErrorCode());
      assertEquals("+Fie", sQLWarning0.getMessage());
      assertEquals("+Fie", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: +Fie", sQLWarning0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLWarning: +Fie", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLWarning: +Fie", sQLSyntaxErrorException0.toString());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((Throwable) null);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "'hn;^$F", 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.loopingIterator((Collection<?>) stack0);
      assertNotNull(resettableIterator0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      assertNotNull(predicate0);
      
      predicateArray0[0] = predicate0;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) predicate0, (Equator<Object>) defaultEquator0);
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = IdentityPredicate.identityPredicate((Object) predicate0);
      assertNotNull(predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      predicateArray0[2] = predicate2;
      Predicate<Object> predicate3 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      assertNotNull(predicate3);
      assertEquals(3, predicateArray0.length);
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      
      boolean boolean0 = stack0.add((SQLRecoverableException) null);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      
      Predicate<Object> predicate4 = NotPredicate.notPredicate((Predicate<? super Object>) predicate3);
      assertNotNull(predicate4);
      assertEquals(3, predicateArray0.length);
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate1));
      
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) predicate4);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.loopingIterator((Collection<?>) stack0);
      assertNotNull(resettableIterator0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      assertNotNull(predicate0);
      
      predicateArray0[0] = predicate0;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) predicate0, (Equator<Object>) defaultEquator0);
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = IdentityPredicate.identityPredicate((Object) predicate0);
      assertNotNull(predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      
      predicateArray0[2] = predicate2;
      Predicate<Object> predicate3 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      assertNotNull(predicate3);
      assertEquals(3, predicateArray0.length);
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      
      SQLRecoverableException sQLRecoverableException0 = null;
      boolean boolean0 = stack0.add((SQLRecoverableException) null);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      
      Predicate<Object> predicate4 = NotPredicate.notPredicate((Predicate<? super Object>) predicate3);
      assertNotNull(predicate4);
      assertEquals(3, predicateArray0.length);
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate0));
      
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) predicate4);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("End index must not be less than start index.");
      assertNotNull(iIOMetadataNode0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
      
      OrderedMapIterator<Properties, SQLSyntaxErrorException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      MapIterator<Properties, Predicate<Object>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) orderedMapIterator1);
      assertNotNull(enumeration0);
      assertFalse(orderedMapIterator1.hasPrevious());
      
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Iterator<Properties> iterator1 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) hashSet0);
      assertNotNull(iterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      SQLWarning sQLWarning0 = new SQLWarning(",lZuRVC+t&'W;", (Throwable) null);
      assertNotNull(sQLWarning0);
      assertEquals(",lZuRVC+t&'W;", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: ,lZuRVC+t&'W;", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      
      ArrayListIterator<Properties> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<Properties>(sQLWarning0, 38, 407);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator("");
      assertNotNull(iterator0);
      
      OrderedMapIterator<Properties, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      MapIterator<Properties, Predicate<Object>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) orderedMapIterator0);
      assertNotNull(enumeration0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Iterator<Properties> iterator1 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) hashSet0);
      assertNotNull(iterator1);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      ArrayListIterator<Properties> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<Properties>(stack0, 1783, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) linkedList0);
      assertNotNull(resettableIterator0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertTrue(boolean0);
      assertEquals(0, linkedList0.size());
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(resettableIterator0);
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("TP7@}F7p*0*Z5'|c0w", sQLClientInfoException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("TP7@}F7p*0*Z5'|c0w", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: TP7@}F7p*0*Z5'|c0w", sQLInvalidAuthorizationSpecException0.toString());
      
      stack0.addElement(sQLInvalidAuthorizationSpecException0);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[java.sql.SQLInvalidAuthorizationSpecException: TP7@}F7p*0*Z5'|c0w]", stack0.toString());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("TP7@}F7p*0*Z5'|c0w", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: TP7@}F7p*0*Z5'|c0w", sQLInvalidAuthorizationSpecException0.toString());
      assertTrue(stack0.contains(sQLInvalidAuthorizationSpecException0));
      
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) stack0);
      assertNotNull(resettableListIterator0);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[java.sql.SQLInvalidAuthorizationSpecException: TP7@}F7p*0*Z5'|c0w]", stack0.toString());
      assertTrue(resettableListIterator0.hasNext());
      assertTrue(resettableListIterator0.hasPrevious());
      assertTrue(stack0.contains(sQLInvalidAuthorizationSpecException0));
      
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 3);
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      // Undeclared exception!
      try { 
        EnumSet.copyOf((Collection<Locale.FilteringMode>) priorityQueue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Collection is empty
         //
         verifyException("java.util.EnumSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 8);
      OrderedMapIterator<Properties, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      iteratorArray0[0] = (Iterator<Properties>) orderedMapIterator0;
      MapIterator<Properties, Predicate<Object>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      iteratorArray0[1] = (Iterator<Properties>) mapIterator0;
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) orderedMapIterator0);
      assertNotNull(enumeration0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      HashSet<Properties> hashSet0 = new HashSet<Properties>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Iterator<Properties> iterator1 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) hashSet0);
      assertNotNull(iterator1);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      iteratorArray0[2] = iterator1;
      int int0 = 920;
      int int1 = (-5855);
      ArrayListIterator<Properties> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<Properties>(mapIterator0, 920, (-5855));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      String string0 = "\\@^`JE\"uiWMI/YKl";
      SQLDataException sQLDataException0 = new SQLDataException("@^`JE\"uiWMI/YKl");
      assertNotNull(sQLDataException0);
      assertEquals("@^`JE\"uiWMI/YKl", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: @^`JE\"uiWMI/YKl", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLDataException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("@^`JE\"uiWMI/YKl", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: @^`JE\"uiWMI/YKl", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: @^`JE\"uiWMI/YKl", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLDataException: @^`JE\"uiWMI/YKl", sQLNonTransientConnectionException0.toString());
      
      SQLDataException sQLDataException1 = (SQLDataException)sQLDataException0.initCause(sQLNonTransientConnectionException0);
      assertNotNull(sQLDataException1);
      assertSame(sQLDataException0, sQLDataException1);
      assertSame(sQLDataException1, sQLDataException0);
      assertEquals("@^`JE\"uiWMI/YKl", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: @^`JE\"uiWMI/YKl", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: @^`JE\"uiWMI/YKl", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLDataException: @^`JE\"uiWMI/YKl", sQLNonTransientConnectionException0.toString());
      assertEquals("java.sql.SQLDataException: @^`JE\"uiWMI/YKl", sQLDataException1.toString());
      assertEquals("@^`JE\"uiWMI/YKl", sQLDataException1.getMessage());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertNull(sQLDataException1.getSQLState());
      
      sQLDataExceptionArray0[0] = sQLDataException0;
      int int0 = 0;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0, 0);
      assertNotNull(resettableIterator0);
      assertEquals(1, sQLDataExceptionArray0.length);
      
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) resettableIterator0);
      assertNotNull(enumeration0);
      assertEquals(1, sQLDataExceptionArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<SQLTransactionRollbackException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      IteratorUtils.isEmpty(listIterator1);
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.iterators.EmptyOrderedIterator", "org.apache.commons.collections4.map.Flat3Map$EntryIterator", (-661));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.iterators.EmptyOrderedIterator", sQLNonTransientConnectionException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.map.Flat3Map$EntryIterator", "org.apache.commons.collections4.map.Flat3Map$EntryIterator", 0, intArray0, sQLSyntaxErrorException0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, batchUpdateException0);
      properties3.put(batchUpdateException0, sQLClientInfoException0);
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      Properties properties8 = new Properties();
      propertiesArray0[8] = properties8;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0, 61);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLSyntaxErrorException>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[4];
      StringTokenizer stringTokenizer0 = new StringTokenizer("mU@pj5~BI|_", "mU@pj5~BI|_");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("p)YB9d(", (String) null);
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("mU@pj5~BI|_", (String) null);
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("p)YB9d(", "mU@pj5~BI|_");
      stringTokenizerArray0[3] = stringTokenizer3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringTokenizerArray0, 0, (-1635));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Locale.FilteringMode, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Locale.FilteringMode, ? extends SQLException>) orderedMapIterator0);
      IteratorUtils.asIterable((Iterator<? extends Locale.FilteringMode>) orderedMapIterator1);
      SQLWarning sQLWarning0 = new SQLWarning("}M_Mzq9hu;3K#9-a", "", 0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLWarning0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLSyntaxErrorException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.getIterator("");
      IteratorUtils.emptyOrderedMapIterator();
      Factory<IIOMetadataNode> factory0 = ConstantFactory.constantFactory(iIOMetadataNode0);
      Transformer<IIOMetadataNode, IIOMetadataNode> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends IIOMetadataNode>) factory0);
      DefaultEquator<IIOMetadataNode> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<IIOMetadataNode> equalPredicate0 = new EqualPredicate<IIOMetadataNode>(iIOMetadataNode0, defaultEquator0);
      Predicate<IIOMetadataNode> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0, (Predicate<? super IIOMetadataNode>) equalPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) predicate0, (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("");
      int int0 = 100;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLDataException0, 100, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      Throwable throwable0 = null;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        singletonIterator0.forEachRemaining((Consumer<? super SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Locale.FilteringMode[]) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[6];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(propertiesArray0, 125, 125);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLClientInfoException[]) null, 10, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyMapIterator();
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) listIterator0, (Iterator<? extends SQLNonTransientException>) listIterator0, (Iterator<? extends SQLNonTransientException>) listIterator0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) zippingIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("g$E<MK5JtC+Dw1");
      IteratorUtils.getIterator(iIOMetadataNode0);
      int int0 = 781;
      IteratorUtils.emptyMapIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "OP?K1KyM5", 781);
      DefaultEquator.defaultEquator();
      Object object0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 781);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Vector<SQLTransientException> vector0 = new Vector<SQLTransientException>();
      vector0.add((SQLTransientException) null);
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.loopingIterator((Collection<?>) vector0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("lY18z,GB Zdiq|{");
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(object0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toList((Iterator<? extends String>) resettableListIterator0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[5];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("UAOH", "C<>TSd!%:'?[l<]2");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      String string0 = "U_/";
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("U_/", "U_/");
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("C<>TSd!%:'?[l<]2", "");
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("U_/", sQLRecoverableException1);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException((String) null, "");
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) objectArrayListIterator0, (-1115L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[6];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("[", "");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException((String) null, "");
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("");
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("5", "..Qw N;M)", sQLRecoverableException3);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException("", sQLRecoverableException1);
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      ObjectArrayIterator<SQLRecoverableException> objectArrayIterator0 = new ObjectArrayIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0, 0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLRecoverableException>) objectArrayIterator0, (Object) sQLRecoverableException5);
      assertFalse(objectArrayIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      IteratorUtils.singletonListIterator(stack0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      // Undeclared exception!
      try { 
        invokerTransformer0.transform(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.lang.Class' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode0.insertBefore(iIOMetadataNode1, iIOMetadataNode1);
      IteratorUtils.nodeListIterator(node0);
      ObjectArrayIterator<IIOMetadataNode> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<IIOMetadataNode>((IIOMetadataNode[]) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ArrayDeque<SQLIntegrityConstraintViolationException>[] arrayDequeArray0 = (ArrayDeque<SQLIntegrityConstraintViolationException>[]) Array.newInstance(ArrayDeque.class, 7);
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque0 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque1 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      arrayDequeArray0[1] = arrayDeque1;
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque2 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      arrayDequeArray0[2] = arrayDeque2;
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque3 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      arrayDequeArray0[3] = arrayDeque3;
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque4 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      arrayDequeArray0[4] = arrayDeque4;
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque5 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      arrayDequeArray0[5] = arrayDeque5;
      ArrayDeque<SQLIntegrityConstraintViolationException> arrayDeque6 = new ArrayDeque<SQLIntegrityConstraintViolationException>();
      arrayDequeArray0[6] = arrayDeque6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(arrayDequeArray0, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, Locale.FilteringMode> abstractOrderedMapIteratorDecorator0 = null;
      try {
        abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, Locale.FilteringMode>((OrderedMapIterator<SQLClientInfoException, Locale.FilteringMode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OrderedMapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      int int0 = 1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<String, SQLRecoverableException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<String, SQLRecoverableException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, SQLRecoverableException>(orderedMapIterator0);
      SQLWarning sQLWarning0 = new SQLWarning();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("MS[-eTf1'AS4\"b<");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      sQLWarning0.printStackTrace((PrintWriter) mockPrintWriter1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("#5uBEw1nB9z]J%O\",3", "#5uBEw1nB9z]J%O\",3", sQLWarning0);
      // Undeclared exception!
      try { 
        abstractOrderedMapIteratorDecorator0.setValue(sQLRecoverableException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = ":kDPez{=?Si *p";
      String string1 = "Collection must not be null";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(":kDPez{=?Si *p", "Collection must not be null", hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLClientInfoException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = "";
      int int0 = (-479);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException((String) null, (String) null);
      sQLFeatureNotSupportedException0.setNextException(sQLFeatureNotSupportedException1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("[Y=Bq8mmmwYgm_|(N", (String) null, (-479), sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.getSuppressed();
      sQLTransactionRollbackException0.printStackTrace();
      sQLTransactionRollbackException0.fillInStackTrace();
      SQLDataException sQLDataException0 = new SQLDataException("", (String) null, (-479), sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLDataException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLException>) listIterator0, 0L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = "M&p";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("M&p", "Iterator getKey() can only be called after next() and before remove()", 200);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLNonTransientException0, 200, 200);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      MapIterator<SQLNonTransientException, LinkedHashSet<SQLFeatureNotSupportedException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      BatchUpdateException[] batchUpdateExceptionArray0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((BatchUpdateException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLWarning>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }
}
