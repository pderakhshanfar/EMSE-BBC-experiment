/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 13:44:39 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.UnaryOperator;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[3];
      StringTokenizer stringTokenizer0 = new StringTokenizer("end", "end", false);
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("end", "end", true);
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("end", "hi`DC{_OPyeT|mG", true);
      stringTokenizerArray0[2] = stringTokenizer2;
      IteratorUtils.arrayListIterator(stringTokenizerArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.getIterator((Object) null);
      UniquePredicate.uniquePredicate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>((Transformer<? super Object, ?>) null, uniquePredicate0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("maxSize pKrameter must not be negative.", "");
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) mapIterator0, class0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashtable0, sQLRecoverableException0);
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 9);
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class1;
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      classArray0[1] = class2;
      Class<SQLIntegrityConstraintViolationException> class3 = SQLIntegrityConstraintViolationException.class;
      classArray0[2] = class3;
      Class<SQLIntegrityConstraintViolationException> class4 = SQLIntegrityConstraintViolationException.class;
      classArray0[3] = class4;
      Class<SQLIntegrityConstraintViolationException> class5 = SQLIntegrityConstraintViolationException.class;
      classArray0[4] = class5;
      Class<SQLIntegrityConstraintViolationException> class6 = SQLIntegrityConstraintViolationException.class;
      classArray0[5] = class6;
      Class<SQLIntegrityConstraintViolationException> class7 = SQLIntegrityConstraintViolationException.class;
      classArray0[6] = class7;
      Class<SQLIntegrityConstraintViolationException> class8 = SQLIntegrityConstraintViolationException.class;
      classArray0[7] = class8;
      Class<SQLIntegrityConstraintViolationException> class9 = SQLIntegrityConstraintViolationException.class;
      classArray0[8] = class9;
      Transformer<Object, SQLClientInfoException> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) iterator0, 1706);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLClientInfoException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[7];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("7Q", sQLIntegrityConstraintViolationException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTransientConnectionException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("XUfj/p)NCfsqoh{~", "zRY>H::=f", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("ListIterator must not be null", hashMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("XUfj/p)NCfsqoh{~", "7Q", 10, sQLClientInfoException0);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("XUfj/p)NCfsqoh{~", "qqLn5Dt*0Hh,%]TAP", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("/GQ)@dc(:C=#qRib#Vu");
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException("7Q", "ExceptionPredicate invoked", 1622);
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException6;
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 7);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      classArray0[0] = class0;
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      classArray0[1] = class1;
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      classArray0[2] = class2;
      Class<BatchUpdateException> class3 = BatchUpdateException.class;
      classArray0[3] = class3;
      Class<BatchUpdateException> class4 = BatchUpdateException.class;
      classArray0[4] = class4;
      Class<BatchUpdateException> class5 = BatchUpdateException.class;
      classArray0[5] = class5;
      Class<BatchUpdateException> class6 = BatchUpdateException.class;
      classArray0[6] = class6;
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("ListIterator must not be null", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) objectArrayListIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) invokerTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'ListIterator must not be null' on 'class java.sql.SQLInvalidAuthorizationSpecException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[18];
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      IteratorUtils.get((Iterator<SQLFeatureNotSupportedException>) objectArrayIterator0, 5);
      Closure<SQLDataException>[] closureArray0 = (Closure<SQLDataException>[]) Array.newInstance(Closure.class, 2);
      Vector<Closure<Object>> vector0 = new Vector<Closure<Object>>();
      Closure<SQLDataException> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super SQLDataException>>) vector0);
      closureArray0[0] = closure0;
      ChainedClosure<SQLDataException> chainedClosure0 = new ChainedClosure<SQLDataException>(closureArray0);
      closureArray0[1] = (Closure<SQLDataException>) chainedClosure0;
      ObjectArrayListIterator<Closure<SQLDataException>> objectArrayListIterator0 = new ObjectArrayListIterator<Closure<SQLDataException>>(closureArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Closure<SQLDataException>>) objectArrayListIterator0, (Transformer<? super Closure<SQLDataException>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) mapIterator0);
      Properties properties0 = new Properties();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLTimeoutException0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(identityPredicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", sQLTimeoutException0);
      IdentityPredicate.identityPredicate(sQLInvalidAuthorizationSpecException0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>((Transformer<? super Object, ?>) null, notPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTransientException sQLTransientException0 = new SQLTransientException("LxcAQqryI");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.functors.DefaultEquator", "eD-\"", hashMap0, sQLTransientException0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("LxcAQqryI", clientInfoStatus0);
      EqualPredicate.equalPredicate((Object) predicate0);
      FalsePredicate.falsePredicate();
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>(predicateArray1);
      HashMap<Object, SQLTimeoutException> hashMap1 = new HashMap<Object, SQLTimeoutException>();
      MapTransformer.mapTransformer((Map<? super Object, ? extends SQLTransientException>) hashMap1);
      StringTokenizer stringTokenizer0 = new StringTokenizer("LxcAQqryI", " y{HM$=D");
      IteratorUtils.getIterator(stringTokenizer0);
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Properties>) iterator0, 5399L, 1192L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Stack<Iterator<SQLSyntaxErrorException>> stack0 = new Stack<Iterator<SQLSyntaxErrorException>>();
      LoopingListIterator<Iterator<SQLSyntaxErrorException>> loopingListIterator0 = new LoopingListIterator<Iterator<SQLSyntaxErrorException>>(stack0);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<DataTruncation> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLSyntaxErrorException>>) loopingListIterator0, (Transformer<? super Iterator<SQLSyntaxErrorException>, ? extends DataTruncation>) transformer0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends DataTruncation>) iterator0);
      Vector<SQLSyntaxErrorException> vector0 = new Vector<SQLSyntaxErrorException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("vOg", (String) null, (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLClientInfoException1);
      PredicateTransformer<Vector<SQLSyntaxErrorException>> predicateTransformer0 = new PredicateTransformer<Vector<SQLSyntaxErrorException>>(predicate0);
      predicateTransformer0.transform(vector0);
      IteratorUtils.getIterator(predicate0);
      IteratorUtils.getIterator((Object) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "vOg", 970);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((ArrayList<SQLWarning>[]) null, 4335, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Stack<Iterator<SQLSyntaxErrorException>> stack0 = new Stack<Iterator<SQLSyntaxErrorException>>();
      LoopingListIterator<Iterator<SQLSyntaxErrorException>> loopingListIterator0 = new LoopingListIterator<Iterator<SQLSyntaxErrorException>>(stack0);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<DataTruncation> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLSyntaxErrorException>>) loopingListIterator0, (Transformer<? super Iterator<SQLSyntaxErrorException>, ? extends DataTruncation>) transformer0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends DataTruncation>) iterator0);
      Vector<SQLSyntaxErrorException> vector0 = new Vector<SQLSyntaxErrorException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("vOg", (String) null, (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLClientInfoException1);
      PredicateTransformer<Vector<SQLSyntaxErrorException>> predicateTransformer0 = new PredicateTransformer<Vector<SQLSyntaxErrorException>>(predicate0);
      predicateTransformer0.transform(vector0);
      IteratorUtils.getIterator(predicate0);
      IteratorUtils.getIterator((Object) null);
      SQLWarning sQLWarning0 = new SQLWarning("vOg", "", 14);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLClientInfoException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("vOg", "", 970, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("", "Estimated size must be greater than 0");
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0, 806);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 806
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      ReverseListIterator<SQLIntegrityConstraintViolationException> reverseListIterator0 = new ReverseListIterator<SQLIntegrityConstraintViolationException>(arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) reverseListIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      MapIterator<Integer, TreeSet<Locale.FilteringMode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<String> class0 = String.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      AndPredicate<Integer> andPredicate0 = new AndPredicate<Integer>(predicate0, predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Integer>) mapIterator0, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Vector<Iterator<SQLSyntaxErrorException>> vector0 = new Vector<Iterator<SQLSyntaxErrorException>>();
      LoopingListIterator<Iterator<SQLSyntaxErrorException>> loopingListIterator0 = new LoopingListIterator<Iterator<SQLSyntaxErrorException>>(vector0);
      Predicate<BatchUpdateException> predicate0 = NullPredicate.nullPredicate();
      SingletonIterator<Predicate<BatchUpdateException>> singletonIterator0 = new SingletonIterator<Predicate<BatchUpdateException>>(predicate0, true);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(predicate0);
      Predicate<Object> predicate1 = TruePredicate.truePredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate1);
      IteratorUtils.matchesAny((Iterator<Predicate<BatchUpdateException>>) singletonIterator0, (Predicate<? super Predicate<BatchUpdateException>>) identityPredicate0);
      EmptyListIterator.emptyListIterator();
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0, 429, 2273);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Locale.FilteringMode[]) null, 9, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLSyntaxErrorException0.getStackTrace();
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<PriorityQueue<ArrayList>>) singletonIterator0, (Closure<? super PriorityQueue<ArrayList>>) transformerClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformerClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLSyntaxErrorException0.getStackTrace();
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) orderedIterator0, (Predicate<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.nullTransformer();
      MapIterator<SQLDataException, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      IteratorUtils.apply((Iterator<PriorityQueue<ArrayList>>) mapIterator0, (Closure<? super PriorityQueue<ArrayList>>) transformerClosure0);
      String string0 = " ";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" ");
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer1 = InvokerTransformer.invokerTransformer(")cYy;iJ,&-yRi");
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.objectGraphIterator(sQLIntegrityConstraintViolationException0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) transformer1);
      String string1 = "org.apache.commons.collections4.list.TreeList";
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) "org.apache.commons.collections4.list.TreeList", (Equator<Object>) defaultEquator0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<LinkedList<ServiceLoader>>) iterator0, (Predicate<? super LinkedList<ServiceLoader>>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method ')cYy;iJ,&-yRi' on 'class java.sql.SQLIntegrityConstraintViolationException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      MapIterator<SQLDataException, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Bdd%g>T");
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLNonTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.CloneTransformer");
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLIntegrityConstraintViolationException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      predicateArray0[0] = (Predicate<Object>) identityPredicate0;
      predicateArray0[1] = (Predicate<Object>) identityPredicate0;
      predicateArray0[2] = (Predicate<Object>) identityPredicate0;
      predicateArray0[3] = (Predicate<Object>) identityPredicate0;
      predicateArray0[4] = (Predicate<Object>) identityPredicate0;
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicateArray0[1], predicateArray0[1]);
      predicateArray0[5] = (Predicate<Object>) andPredicate0;
      predicateArray0[6] = (Predicate<Object>) identityPredicate0;
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(andPredicate0);
      IteratorUtils.matchesAny((Iterator<Predicate<BatchUpdateException>>) null, (Predicate<? super Predicate<BatchUpdateException>>) nullIsTruePredicate0);
      IteratorUtils.size(mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Vector<Iterator<SQLSyntaxErrorException>> vector0 = new Vector<Iterator<SQLSyntaxErrorException>>();
      LoopingListIterator<Iterator<SQLSyntaxErrorException>> loopingListIterator0 = new LoopingListIterator<Iterator<SQLSyntaxErrorException>>(vector0);
      Predicate<BatchUpdateException> predicate0 = NullPredicate.nullPredicate();
      SingletonIterator<Predicate<BatchUpdateException>> singletonIterator0 = new SingletonIterator<Predicate<BatchUpdateException>>(predicate0, true);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLNonTransientConnectionException0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLTransientException0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(identityPredicate0);
      IteratorUtils.matchesAny((Iterator<Predicate<BatchUpdateException>>) singletonIterator0, (Predicate<? super Predicate<BatchUpdateException>>) nullIsFalsePredicate0);
      IteratorUtils.size(singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLSyntaxErrorException0.getStackTrace();
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) singletonIterator0, (Iterator<? extends SQLException>) singletonIterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[7];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedExceptionArray0[1];
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "Enumeration must not be null", sQLFeatureNotSupportedException0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator1 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0, true);
      List<SQLTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) singletonIterator1);
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(list0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) loopingListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLSyntaxErrorException0.getStackTrace();
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) singletonIterator0, (Iterator<? extends SQLException>) singletonIterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedExceptionArray0[1];
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException0;
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.nullTransformer();
      MapIterator<SQLDataException, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      IteratorUtils.apply((Iterator<PriorityQueue<ArrayList>>) mapIterator0, (Closure<? super PriorityQueue<ArrayList>>) transformerClosure0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("The predicate to call must not be null");
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, constantTransformer0, constantTransformer0);
      IteratorUtils.toString((Iterator<Closure<Object>>) null, (Transformer<? super Closure<Object>, String>) ifTransformer0, "", "", "r-v_pu6O2 w>t&^'");
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(123);
      integerArray0[0] = integer0;
      IteratorUtils.arrayIterator(integerArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      MapIterator<SQLException, PriorityQueue<Integer>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) mapIterator0, (Transformer<? super SQLException, String>) constantTransformer0, "<}qwNY", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[0];
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) orderedIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      IteratorUtils.emptyOrderedIterator();
      ExceptionPredicate.exceptionPredicate();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("c7|atPM", "/T+", sQLIntegrityConstraintViolationException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLIntegrityConstraintViolationException1);
      sQLSyntaxErrorException0.getStackTrace();
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) singletonIterator0, (Iterator<? extends SQLException>) singletonIterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[7];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("", sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedExceptionArray0[1];
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException0;
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      IteratorUtils.get((Iterator<SQLFeatureNotSupportedException>) objectArrayIterator0, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLSyntaxErrorException0, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      SQLDataException sQLDataException0 = new SQLDataException();
      linkedList0.offerLast(sQLDataException0);
      ListIterator<SQLDataException> listIterator0 = linkedList0.listIterator();
      IteratorUtils.unmodifiableListIterator(listIterator0);
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ForClosure<SQLException> forClosure0 = new ForClosure<SQLException>((-1189), closure0);
      IteratorUtils.apply(iterator0, (Closure<? super SQLNonTransientConnectionException>) forClosure0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.size(resettableIterator0);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, false, 1440, 1440);
      dataTruncation0.getNextWarning();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(dataTruncation0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(", ", "", 1440, (Throwable) null);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("'}", "gSl");
      SQLException sQLException0 = new SQLException("", "Node must not be null", 1699, sQLFeatureNotSupportedException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("0fC'KXnw0w?'1h", "org.apache.commons.collections4.functors.FunctorUtils", 1440);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLNonTransientException0);
      SQLException[] sQLExceptionArray0 = new SQLException[2];
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("Node must not be null", sQLNonTransientException0);
      sQLExceptionArray0[0] = (SQLException) sQLTimeoutException1;
      sQLExceptionArray0[1] = (SQLException) sQLRecoverableException1;
      ObjectArrayListIterator<SQLException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLException>(sQLExceptionArray0);
      Transformer<SQLException, String> transformer0 = ConstantTransformer.constantTransformer("$W01");
      IteratorUtils.toString((Iterator<SQLException>) objectArrayListIterator0, (Transformer<? super SQLException, String>) transformer0, "", "%=&5?.Q&UDN[", "&(:,eDk0+VY|QiB^R");
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      dataTruncationArray0[0] = dataTruncation0;
      dataTruncationArray0[1] = dataTruncation0;
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0, 0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLWarning>) resettableListIterator0, 0L);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      IteratorUtils.emptyOrderedIterator();
      ExceptionPredicate.exceptionPredicate();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      Closure<SQLNonTransientException> closure0 = ForClosure.forClosure(509, (Closure<? super SQLNonTransientException>) null);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      ChainedClosure<SQLNonTransientException> chainedClosure0 = new ChainedClosure<SQLNonTransientException>(closureArray0);
      chainedClosure0.execute(sQLIntegrityConstraintViolationException0);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) stack0);
      PriorityQueue<Closure<Object>> priorityQueue0 = new PriorityQueue<Closure<Object>>();
      PriorityQueue<Closure<Object>> priorityQueue1 = new PriorityQueue<Closure<Object>>(priorityQueue0);
      Closure<Object> closure1 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) priorityQueue1);
      IfClosure<SQLNonTransientException> ifClosure0 = new IfClosure<SQLNonTransientException>(predicate0, (Closure<? super SQLNonTransientException>) null, closure1);
      IteratorUtils.apply((Iterator<SQLSyntaxErrorException>) singletonListIterator0, (Closure<? super SQLSyntaxErrorException>) closure0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super SQLException>) comparator0, (Iterator<? extends SQLException>) singletonListIterator0, (Iterator<? extends SQLException>) singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.size(resettableIterator0);
      ArrayDeque<Closure<Object>> arrayDeque0 = new ArrayDeque<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) arrayDeque0);
      IteratorUtils.apply((Iterator<PriorityQueue<ArrayList>>) resettableIterator0, (Closure<? super PriorityQueue<ArrayList>>) closure0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        iIOMetadataNode0.getElementsByTagName("fR5?TuYk9\"1\"_&g");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Stack<Iterator<SQLSyntaxErrorException>> stack0 = new Stack<Iterator<SQLSyntaxErrorException>>();
      LoopingListIterator<Iterator<SQLSyntaxErrorException>> loopingListIterator0 = new LoopingListIterator<Iterator<SQLSyntaxErrorException>>(stack0);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.nullTransformer();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      IteratorUtils.apply((Iterator<PriorityQueue<ArrayList>>) null, (Closure<? super PriorityQueue<ArrayList>>) transformerClosure0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Vector<Iterator<SQLSyntaxErrorException>> vector0 = new Vector<Iterator<SQLSyntaxErrorException>>();
      LoopingListIterator<Iterator<SQLSyntaxErrorException>> loopingListIterator0 = new LoopingListIterator<Iterator<SQLSyntaxErrorException>>(vector0);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.nullTransformer();
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) transformer0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      PredicateTransformer<Vector<SQLSyntaxErrorException>> predicateTransformer0 = new PredicateTransformer<Vector<SQLSyntaxErrorException>>(predicate0);
      Vector<SQLSyntaxErrorException> vector1 = new Vector<SQLSyntaxErrorException>();
      PredicateTransformer<Vector<SQLSyntaxErrorException>> predicateTransformer1 = new PredicateTransformer<Vector<SQLSyntaxErrorException>>(predicate0);
      predicateTransformer1.transform(vector1);
      Vector<SQLSyntaxErrorException> vector2 = new Vector<SQLSyntaxErrorException>();
      predicateTransformer1.transform(vector2);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
      TreeSet<SQLRecoverableException> treeSet0 = new TreeSet<SQLRecoverableException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) treeSet0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      ExceptionPredicate.exceptionPredicate();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) orderedIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      linkedList0.clone();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(linkedList0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) loopingIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate.comparatorPredicate((Object) enumeration0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("CRTgA0>rAG", (String) null);
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 4);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      classArray0[1] = class1;
      Class<SQLNonTransientException> class2 = SQLNonTransientException.class;
      classArray0[2] = class2;
      Class<SQLNonTransientException> class3 = SQLNonTransientException.class;
      classArray0[3] = class3;
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = InvokerTransformer.invokerTransformer(";oXx`<!10kZ</N1>L2", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method ';oXx`<!10kZ</N1>L2' on 'class java.sql.SQLInvalidAuthorizationSpecException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      IteratorUtils.emptyOrderedIterator();
      ExceptionPredicate.exceptionPredicate();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("c7|atPM", "/vruM", sQLIntegrityConstraintViolationException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLIntegrityConstraintViolationException1);
      sQLSyntaxErrorException0.getStackTrace();
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) singletonIterator0, (Iterator<? extends SQLException>) singletonIterator0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) zippingIterator0, (Transformer<? super SQLException, String>) transformer0, "UB2E@mpg`y9=", (String) null, "Predicate must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      IteratorUtils.emptyOrderedIterator();
      ExceptionPredicate.exceptionPredicate();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("c7|atPM", "/vruM", sQLIntegrityConstraintViolationException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLIntegrityConstraintViolationException1);
      sQLSyntaxErrorException0.getStackTrace();
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) singletonIterator0, (Iterator<? extends SQLException>) singletonIterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[7];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("O08H?Z!rprE", sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException0;
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      IteratorUtils.get((Iterator<SQLFeatureNotSupportedException>) objectArrayIterator0, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLSyntaxErrorException0, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      IteratorUtils.emptyOrderedIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLIntegrityConstraintViolationException0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 5);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      classArray0[1] = class1;
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      classArray0[2] = class2;
      Class<SQLNonTransientConnectionException> class3 = SQLNonTransientConnectionException.class;
      classArray0[3] = class3;
      Class<SQLNonTransientConnectionException> class4 = SQLNonTransientConnectionException.class;
      classArray0[4] = class4;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("+v(vERO&{idsht", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) singletonIterator0, (Transformer<? super SQLException, String>) invokerTransformer0, "Predicate must not be null", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '+v(vERO&{idsht' on 'class java.sql.SQLIntegrityConstraintViolationException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      IteratorUtils.emptyOrderedIterator();
      ExceptionPredicate.exceptionPredicate();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      ForClosure.forClosure(818, (Closure<? super SQLNonTransientException>) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "org.apache.commons.collections4.IterableUtils$5", 818, sQLSyntaxErrorException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.IterableUtils$5");
      IteratorUtils.contains((Iterator<HashSet<HashMap>>) resettableIterator0, (Object) sQLFeatureNotSupportedException0);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.size(resettableIterator0);
      IteratorUtils.toString((Iterator<LinkedHashSet<SQLClientInfoException>>) null);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[6];
      SQLDataException sQLDataException0 = new SQLDataException("9i>/PPApV-|O #1sJL", "[]", 1339);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("[]", "The closure array must not contain a null closure, index ", 100, sQLDataException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("[]", "9i>/PPApV-|O #1sJL", 0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException(" qGTR*gU", "", (-1));
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      Integer integer0 = new Integer(261);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      hashSet0.add(integer0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) null, (Collection<? super Properties>) hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Stack<Iterator<SQLSyntaxErrorException>> stack0 = new Stack<Iterator<SQLSyntaxErrorException>>();
      LoopingListIterator<Iterator<SQLSyntaxErrorException>> loopingListIterator0 = new LoopingListIterator<Iterator<SQLSyntaxErrorException>>(stack0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      PredicateTransformer<Vector<SQLSyntaxErrorException>> predicateTransformer0 = new PredicateTransformer<Vector<SQLSyntaxErrorException>>(predicate0);
      Vector<SQLSyntaxErrorException> vector0 = new Vector<SQLSyntaxErrorException>();
      Stack<SQLSyntaxErrorException> stack1 = new Stack<SQLSyntaxErrorException>();
      predicateTransformer0.transform(stack1);
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) null, (Collection<? super SQLNonTransientException>) treeSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      IteratorUtils.emptyOrderedIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      Closure<SQLNonTransientException>[] closureArray0 = (Closure<SQLNonTransientException>[]) Array.newInstance(Closure.class, 1);
      Closure<SQLNonTransientException> closure0 = ForClosure.forClosure(818, (Closure<? super SQLNonTransientException>) null);
      closureArray0[0] = closure0;
      ChainedClosure<SQLNonTransientException> chainedClosure0 = new ChainedClosure<SQLNonTransientException>(closureArray0);
      chainedClosure0.execute(sQLIntegrityConstraintViolationException0);
      IfClosure<SQLNonTransientException> ifClosure0 = new IfClosure<SQLNonTransientException>(predicate0, chainedClosure0, closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLSyntaxErrorException>) singletonListIterator0, (Closure<? super SQLSyntaxErrorException>) ifClosure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      Closure<SQLNonTransientException>[] closureArray0 = (Closure<SQLNonTransientException>[]) Array.newInstance(Closure.class, 1);
      int int0 = 818;
      Closure<SQLNonTransientException> closure0 = ForClosure.forClosure(818, (Closure<? super SQLNonTransientException>) null);
      closureArray0[0] = closure0;
      ChainedClosure<SQLNonTransientException> chainedClosure0 = new ChainedClosure<SQLNonTransientException>(closureArray0);
      chainedClosure0.execute(sQLIntegrityConstraintViolationException0);
      IfClosure<SQLNonTransientException> ifClosure0 = new IfClosure<SQLNonTransientException>(predicate0, chainedClosure0, closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLSyntaxErrorException>) singletonListIterator0, (Closure<? super SQLSyntaxErrorException>) ifClosure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[0];
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) predicate0);
      IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) predicate1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      linkedList0.clone();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(linkedList0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) loopingIterator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) linkedList0);
      Class<Integer> class0 = Integer.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) nullIsFalsePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("ListIterator must not be null");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("9", "Node must not be null", sQLRecoverableException0);
      IteratorUtils.contains((Iterator<HashSet<HashMap>>) null, (Object) sQLTimeoutException0);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(";_G\"aG1Az7K4", ";_G\"aG1Az7K4");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLNonTransientException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(batchUpdateException1);
      sQLNonTransientException0.getStackTrace();
      batchUpdateException0.printStackTrace();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      IteratorUtils.contains((Iterator<HashSet<HashMap>>) resettableIterator0, (Object) sQLRecoverableException0);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      linkedList0.clone();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(linkedList0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) loopingIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate.comparatorPredicate((Object) enumeration0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      SQLException sQLException0 = new SQLException("", "", (-879), (Throwable) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", (-841));
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLException0);
      SQLException[] sQLExceptionArray0 = new SQLException[9];
      sQLExceptionArray0[0] = (SQLException) sQLNonTransientException0;
      sQLExceptionArray0[1] = sQLException0;
      sQLExceptionArray0[2] = (SQLException) sQLTransientException0;
      sQLExceptionArray0[3] = (SQLException) sQLTransientException0;
      sQLExceptionArray0[4] = sQLException0;
      sQLExceptionArray0[5] = sQLException0;
      sQLExceptionArray0[6] = (SQLException) sQLTimeoutException0;
      sQLExceptionArray0[7] = (SQLException) sQLTimeoutException0;
      sQLExceptionArray0[8] = (SQLException) sQLTransientException0;
      ObjectArrayListIterator<SQLException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLException>(sQLExceptionArray0);
      Transformer<SQLException, String> transformer0 = ConstantTransformer.constantTransformer("");
      IteratorUtils.toString((Iterator<SQLException>) objectArrayListIterator0, (Transformer<? super SQLException, String>) transformer0, "", "", "rNes@Kac b/:T");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      linkedList0.clone();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(linkedList0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) loopingIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Vector<SQLSyntaxErrorException> vector0 = new Vector<SQLSyntaxErrorException>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLException>) comparator1, (Iterator<? extends SQLException>) loopingIterator0, (Iterator<? extends SQLException>) iterator0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(vector0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) loopingIterator0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) loopingIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      PredicateTransformer<Vector<SQLSyntaxErrorException>> predicateTransformer0 = new PredicateTransformer<Vector<SQLSyntaxErrorException>>(predicate0);
      Vector<SQLSyntaxErrorException> vector1 = new Vector<SQLSyntaxErrorException>();
      predicateTransformer0.transform(vector1);
      IteratorUtils.getIterator((Object) null);
      TreeSet<SQLRecoverableException> treeSet0 = new TreeSet<SQLRecoverableException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) treeSet0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.size(resettableIterator0);
      OrderedMapIterator<SQLSyntaxErrorException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLSyntaxErrorException, SQLFeatureNotSupportedException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, SQLFeatureNotSupportedException>(orderedMapIterator1);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      IteratorUtils.getIterator((Object) null);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLFeatureNotSupportedException0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) singletonIterator0, (Transformer<? super SQLException, String>) constantTransformer0, (String) null, "", "Predicate must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[6];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[1] = clientInfoStatus1;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[2] = clientInfoStatus2;
      ClientInfoStatus clientInfoStatus3 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[3] = clientInfoStatus3;
      ClientInfoStatus clientInfoStatus4 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[4] = clientInfoStatus4;
      ClientInfoStatus clientInfoStatus5 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[5] = clientInfoStatus5;
      IteratorUtils.arrayIterator(clientInfoStatusArray0);
      MapIterator<SQLTransactionRollbackException, Boolean> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<TreeSet<HashSet>>) mapIterator0, (Predicate<? super TreeSet<HashSet>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Stack<Iterator<SQLSyntaxErrorException>> stack0 = new Stack<Iterator<SQLSyntaxErrorException>>();
      LoopingListIterator<Iterator<SQLSyntaxErrorException>> loopingListIterator0 = new LoopingListIterator<Iterator<SQLSyntaxErrorException>>(stack0);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLSyntaxErrorException>>) loopingListIterator0, (Transformer<? super Iterator<SQLSyntaxErrorException>, ? extends DataTruncation>) transformer0);
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) vector0);
      PredicateTransformer<Vector<SQLSyntaxErrorException>> predicateTransformer0 = new PredicateTransformer<Vector<SQLSyntaxErrorException>>(predicate0);
      Vector<SQLSyntaxErrorException> vector1 = new Vector<SQLSyntaxErrorException>();
      predicateTransformer0.transform(vector1);
      IteratorUtils.getIterator(loopingListIterator0);
      TreeSet<SQLRecoverableException> treeSet0 = new TreeSet<SQLRecoverableException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) treeSet0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[7];
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) objectArrayIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Stack<Iterator<SQLSyntaxErrorException>> stack0 = new Stack<Iterator<SQLSyntaxErrorException>>();
      LoopingListIterator<Iterator<SQLSyntaxErrorException>> loopingListIterator0 = new LoopingListIterator<Iterator<SQLSyntaxErrorException>>(stack0);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<DataTruncation> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLSyntaxErrorException>>) loopingListIterator0, (Transformer<? super Iterator<SQLSyntaxErrorException>, ? extends DataTruncation>) transformer0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends DataTruncation>) iterator0);
      Vector<SQLSyntaxErrorException> vector0 = new Vector<SQLSyntaxErrorException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("vOg", (String) null, (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLClientInfoException1);
      PredicateTransformer<Vector<SQLSyntaxErrorException>> predicateTransformer0 = new PredicateTransformer<Vector<SQLSyntaxErrorException>>(predicate0);
      predicateTransformer0.transform(vector0);
      IteratorUtils.getIterator(predicate0);
      TreeSet<SQLRecoverableException> treeSet0 = new TreeSet<SQLRecoverableException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) treeSet0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) locale_FilteringMode0, 1475, 1475);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Stack<Iterator<SQLSyntaxErrorException>> stack0 = new Stack<Iterator<SQLSyntaxErrorException>>();
      LoopingListIterator<Iterator<SQLSyntaxErrorException>> loopingListIterator0 = new LoopingListIterator<Iterator<SQLSyntaxErrorException>>(stack0);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLSyntaxErrorException>>) loopingListIterator0, (Transformer<? super Iterator<SQLSyntaxErrorException>, ? extends DataTruncation>) transformer0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      PredicateTransformer<Vector<SQLSyntaxErrorException>> predicateTransformer0 = new PredicateTransformer<Vector<SQLSyntaxErrorException>>(predicate0);
      Vector<SQLSyntaxErrorException> vector0 = new Vector<SQLSyntaxErrorException>();
      Stack<SQLSyntaxErrorException> stack1 = new Stack<SQLSyntaxErrorException>();
      predicateTransformer0.transform(stack1);
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      TreeSet<SQLRecoverableException> treeSet0 = new TreeSet<SQLRecoverableException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) treeSet0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      linkedList0.clone();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(linkedList0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) loopingIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) enumeration0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      PredicateTransformer<Vector<SQLSyntaxErrorException>> predicateTransformer0 = new PredicateTransformer<Vector<SQLSyntaxErrorException>>(predicate0);
      Vector<SQLSyntaxErrorException> vector0 = new Vector<SQLSyntaxErrorException>();
      Boolean boolean0 = predicateTransformer0.transform(vector0);
      IteratorUtils.getIterator(boolean0);
      TreeSet<SQLRecoverableException> treeSet0 = new TreeSet<SQLRecoverableException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) treeSet0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(";_G\"aG1Az7K4", ";_G\"aG1Az7K4");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLNonTransientException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(batchUpdateException1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "", sQLNonTransientException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTimeoutException0, defaultEquator0);
      PredicateTransformer<Vector<SQLSyntaxErrorException>> predicateTransformer0 = new PredicateTransformer<Vector<SQLSyntaxErrorException>>(equalPredicate0);
      Vector<SQLSyntaxErrorException> vector0 = new Stack<SQLSyntaxErrorException>();
      Boolean boolean0 = predicateTransformer0.transform(vector0);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.constantTransformer(boolean0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      predicateArray0[0] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      PredicateTransformer<Vector<SQLSyntaxErrorException>> predicateTransformer1 = new PredicateTransformer<Vector<SQLSyntaxErrorException>>(allPredicate0);
      Vector<SQLSyntaxErrorException> vector1 = new Vector<SQLSyntaxErrorException>();
      predicateTransformer0.transform(vector0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "sqkRP4Yye6PU^");
      IteratorUtils.getIterator(stringTokenizer0);
      TreeSet<SQLRecoverableException> treeSet0 = new TreeSet<SQLRecoverableException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) treeSet0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[1];
      ObjectArrayIterator<SQLWarning> objectArrayIterator0 = new ObjectArrayIterator<SQLWarning>(sQLWarningArray0);
      IteratorUtils.pushbackIterator((Iterator<?>) objectArrayIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) objectArrayIterator0, (Iterator<? extends SQLException>) objectArrayIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Transformer<SQLNonTransientException, SQLFeatureNotSupportedException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) transformer0);
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) linkedList0);
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator0, (Iterator<? extends SQLFeatureNotSupportedException>) iterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLFeatureNotSupportedException>) zippingIterator0, 316);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[0];
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) objectArrayIterator0, class0);
      ListIterator<Integer> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toString((Iterator<Integer>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Iterator must not be null", "Iterator must not be null", (-462), hashtable0);
      IteratorUtils.getIterator(sQLClientInfoException0);
      TreeSet<SQLRecoverableException> treeSet0 = new TreeSet<SQLRecoverableException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) treeSet0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(";_G\"aG1Az7K4", ";_G\"aG1Az7K4");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLNonTransientException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(batchUpdateException1);
      sQLNonTransientException0.getStackTrace();
      batchUpdateException0.printStackTrace();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, 100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 99
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Closure<SQLException> closure0 = null;
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      LoopingListIterator<SQLSyntaxErrorException> loopingListIterator0 = new LoopingListIterator<SQLSyntaxErrorException>(stack0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("80Kf(Pzqimgn\"!DSnk", "80Kf(Pzqimgn\"!DSnk");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLNonTransientException0);
      stack0.add(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLSyntaxErrorException>) loopingListIterator0, 1L);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLFeatureNotSupportedException0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLFeatureNotSupportedException>) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLNonTransientConnectionException, Properties> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientConnectionException, ? extends Properties>) orderedMapIterator0);
      SkippingIterator<SQLNonTransientConnectionException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLNonTransientConnectionException>) orderedMapIterator1, 1491L);
      IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) skippingIterator0, 1491L, 1158L);
      IteratorUtils.singletonIterator((SQLTimeoutException) null);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>();
      Properties properties0 = new Properties();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(linkedList0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Zd5VG7rB/Q?m3", "Zd5VG7rB/Q?m3", sQLRecoverableException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      String string0 = "!w";
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("!w", "!w", 10);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[3];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      DataTruncation dataTruncation0 = new DataTruncation(2527, true, true, 2527, 2527, sQLNonTransientConnectionException0);
      sQLWarningArray0[0] = (SQLWarning) dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-4420), true, false, 266, 266);
      sQLWarningArray0[1] = (SQLWarning) dataTruncation1;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", (-4420), hashtable0);
      SQLWarning sQLWarning0 = new SQLWarning("", "", sQLClientInfoException0);
      sQLWarningArray0[2] = sQLWarning0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLWarningArray0, (-4420), 266);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Locale.FilteringMode[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.size(resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      UnaryOperator<SQLTimeoutException> unaryOperator0 = UnaryOperator.identity();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>();
      linkedList0.replaceAll(unaryOperator0);
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLDataException>) stack0);
      Properties properties0 = new Properties();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) properties0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAll((Iterator<SQLDataException>) resettableListIterator0, (Predicate<? super SQLDataException>) predicate1);
      IteratorUtils.contains((Iterator<HashSet<HashMap>>) resettableListIterator0, (Object) unaryOperator0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, 100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 100
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[0];
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) objectArrayIterator0, class0);
      Stack<String> stack0 = new Stack<String>();
      stack0.add("");
      IteratorUtils.loopingListIterator((List<String>) stack0);
      Predicate<String>[] predicateArray0 = (Predicate<String>[]) Array.newInstance(Predicate.class, 2);
      Predicate<String> predicate0 = IdentityPredicate.identityPredicate("CEaEU [Yf2bs$");
      predicateArray0[0] = predicate0;
      NonePredicate<String> nonePredicate0 = new NonePredicate<String>(predicateArray0);
      // Undeclared exception!
      try { 
        nonePredicate0.evaluate("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NonePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(linkedList0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) loopingIterator0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) linkedList0);
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) iterator0);
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>(10, 10);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Predicate<Object> predicate2 = NotPredicate.notPredicate((Predicate<? super Object>) predicate1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      predicateArray0[0] = predicate1;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate1;
      predicateArray0[3] = predicate1;
      predicateArray0[4] = predicate0;
      predicateArray0[5] = predicate2;
      predicateArray0[6] = predicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate2);
      Predicate<Object> predicate3 = FalsePredicate.falsePredicate();
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      predicateArray1[0] = (Predicate<Object>) nonePredicate0;
      predicateArray1[1] = predicate1;
      predicateArray1[2] = (Predicate<Object>) orPredicate0;
      predicateArray1[3] = predicate0;
      predicateArray1[4] = (Predicate<Object>) nonePredicate0;
      predicateArray1[5] = predicate3;
      predicateArray1[6] = predicate2;
      predicateArray1[7] = (Predicate<Object>) nonePredicate0;
      predicateArray1[8] = predicate0;
      OnePredicate.onePredicate((Predicate<? super SQLException>[]) predicateArray1);
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>((SQLTimeoutException) null);
      IteratorUtils.find((Iterator<SQLTimeoutException>) singletonIterator0, (Predicate<? super SQLTimeoutException>) predicate2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) null, (Predicate<? super String>) uniquePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      ListIterator<SQLException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) listIterator0, (Predicate<? super SQLException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLException>) listIterator1, (Predicate<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) null, (Iterator<? extends SQLTransientException>) null, (Iterator<? extends SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(stack0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) listIterator0, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(vector0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) loopingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(stack0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) loopingIterator0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) stack0);
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) iterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.map.Flat3Map$FlatMapEntry");
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.map.Flat3Map$FlatMapEntry", sQLIntegrityConstraintViolationException0);
      IteratorUtils.singletonIterator(sQLDataException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedException0.fillInStackTrace();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      OrPredicate.orPredicate((Predicate<? super Object>) instanceofPredicate0, (Predicate<? super Object>) instanceofPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MapIterator<DataTruncation, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<SQLWarning> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) null, (Iterator<? extends SQLWarning>) mapIterator0, (Iterator<? extends SQLWarning>) mapIterator0);
      IteratorUtils.size(iterator0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[5];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("6>.>We)pzBHL9m~w1Zi", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("suffix may not be null");
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0, 100, 1350);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      MapIterator<Integer, TreeSet<Locale.FilteringMode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<String> class0 = String.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      AndPredicate<Integer> andPredicate0 = new AndPredicate<Integer>(predicate0, predicate0);
      IteratorUtils.matchesAny((Iterator<Integer>) mapIterator0, (Predicate<? super Integer>) andPredicate0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      ObjectArrayIterator<SQLInvalidAuthorizationSpecException> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0, (-1972));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(uniquePredicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(uniquePredicate0, nullIsFalsePredicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends String>) resettableListIterator0, (Predicate<? super String>) uniquePredicate0);
      MapIterator<String, EnumSet<Locale.FilteringMode>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<String, EnumSet<Locale.FilteringMode>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, EnumSet<Locale.FilteringMode>>(mapIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0);
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      ResettableListIterator<SQLTimeoutException> resettableListIterator1 = new ReverseListIterator<SQLTimeoutException>(list0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>();
      UnaryOperator<SQLTimeoutException> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      IteratorUtils.loopingListIterator((List<SQLTimeoutException>) linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(stack0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) loopingIterator0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) stack0);
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) iterator0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[2];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.Flat3Map$FlatMapEntry", "ListIterator must not be null");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.Flat3Map$FlatMapEntry", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, 27);
      IteratorUtils.isEmpty(resettableIterator0);
      Stack<SQLFeatureNotSupportedException> stack1 = new Stack<SQLFeatureNotSupportedException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) stack1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(";_G\"aG1Az7K4", ";_G\"aG1Az7K4");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLNonTransientException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(batchUpdateException1);
      sQLNonTransientException0.getStackTrace();
      batchUpdateException0.printStackTrace();
      IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      ArrayList<LinkedList<SQLSyntaxErrorException>> arrayList0 = new ArrayList<LinkedList<SQLSyntaxErrorException>>();
      IteratorUtils.loopingListIterator((List<LinkedList<SQLSyntaxErrorException>>) arrayList0);
      MapIterator<IIOMetadataNode, DataTruncation> mapIterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<IIOMetadataNode, DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLWarning[] sQLWarningArray0 = new SQLWarning[8];
      DataTruncation dataTruncation0 = new DataTruncation(4159, false, false, 4159, 941);
      sQLWarningArray0[0] = (SQLWarning) dataTruncation0;
      SQLWarning sQLWarning0 = new SQLWarning(sQLWarningArray0[0]);
      sQLWarningArray0[1] = sQLWarning0;
      SQLWarning sQLWarning1 = new SQLWarning(", ", ", ");
      sQLWarningArray0[2] = sQLWarning1;
      SQLWarning sQLWarning2 = new SQLWarning(", ", ", ", 4159);
      sQLWarningArray0[3] = sQLWarning2;
      DataTruncation dataTruncation1 = new DataTruncation(4159, false, true, (-1105), (-1105), sQLWarning0);
      sQLWarningArray0[4] = (SQLWarning) dataTruncation1;
      SQLWarning sQLWarning3 = new SQLWarning(sQLWarning0);
      sQLWarningArray0[5] = sQLWarning3;
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLWarning sQLWarning4 = new SQLWarning(sQLDataException0);
      sQLWarningArray0[6] = sQLWarning4;
      SQLWarning sQLWarning5 = new SQLWarning(", ", ", ", sQLWarning3);
      sQLWarningArray0[7] = sQLWarning5;
      ObjectArrayIterator<SQLWarning> objectArrayIterator0 = new ObjectArrayIterator<SQLWarning>(sQLWarningArray0);
      Iterator<Object> iterator0 = IteratorUtils.pushbackIterator((Iterator<?>) objectArrayIterator0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) dataTruncation0);
      IteratorUtils.find(iterator0, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation1, 941, 125);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[0];
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) null, 1201L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("/e01r*yw+", "", (int[]) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/e01r*yw+", "Nf3n` @", 466, batchUpdateException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", sQLTimeoutException0);
      sQLNonTransientException0.fillInStackTrace();
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.singletonListIterator(sQLNonTransientException0);
      SkippingIterator<SQLNonTransientException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLNonTransientException>) listIterator0, (long) 466);
      IteratorUtils.skippingIterator((Iterator<SQLNonTransientException>) skippingIterator0, (long) 466);
      Enumeration<DataTruncation> enumeration0 = (Enumeration<DataTruncation>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation> iterator0 = IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) iterator0, (long) 466, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Iterator<IIOMetadataNode> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-1455));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 12);
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(uniquePredicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nullIsFalsePredicate0, nullIsFalsePredicate0);
      ListIterator<String> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends String>) resettableListIterator0, (Predicate<? super String>) andPredicate0);
      iteratorArray0[0] = (Iterator<String>) listIterator0;
      MapIterator<String, EnumSet<Locale.FilteringMode>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<String, EnumSet<Locale.FilteringMode>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, EnumSet<Locale.FilteringMode>>(mapIterator0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.SingletonMap$SingletonValues");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("");
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException2;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLDataException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedHashSet<StringTokenizer>[] linkedHashSetArray0 = (LinkedHashSet<StringTokenizer>[]) Array.newInstance(LinkedHashSet.class, 1);
      LinkedHashSet<StringTokenizer> linkedHashSet0 = new LinkedHashSet<StringTokenizer>();
      linkedHashSet0.add((StringTokenizer) null);
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      linkedHashSet0.add(stringTokenizer0);
      linkedHashSetArray0[0] = linkedHashSet0;
      ResettableIterator<LinkedHashSet<StringTokenizer>> resettableIterator0 = IteratorUtils.arrayIterator(linkedHashSetArray0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLDataException sQLDataException0 = new SQLDataException("", sQLFeatureNotSupportedException0);
      ResettableIterator<SQLDataException> resettableIterator1 = IteratorUtils.singletonIterator(sQLDataException0);
      sQLFeatureNotSupportedException0.fillInStackTrace();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate0 = OrPredicate.orPredicate((Predicate<? super Object>) instanceofPredicate0, (Predicate<? super Object>) instanceofPredicate0);
      IteratorUtils.matchesAll((Iterator<SQLDataException>) resettableIterator1, (Predicate<? super SQLDataException>) predicate0);
      IteratorUtils.contains((Iterator<HashSet<HashMap>>) zippingIterator0, (Object) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(";_G\"aG1Az7K4", ";_G\"aG1Az7K4");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLNonTransientException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(sQLNonTransientException0);
      batchUpdateException0.printStackTrace();
      StringTokenizer stringTokenizer0 = new StringTokenizer(";_G\"aG1Az7K4");
      EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.isEmpty((Iterator<?>) null);
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) stack0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 12);
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(uniquePredicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nullIsFalsePredicate0, nullIsFalsePredicate0);
      ListIterator<String> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends String>) resettableListIterator0, (Predicate<? super String>) andPredicate0);
      iteratorArray0[0] = (Iterator<String>) listIterator0;
      MapIterator<String, EnumSet<Locale.FilteringMode>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<String, EnumSet<Locale.FilteringMode>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, EnumSet<Locale.FilteringMode>>(mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableIterator0, (Transformer<? super IIOMetadataNode, String>) constantTransformer0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "{Wsv", 3);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0, (-2218), 26);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      EmptyIterator.resettableEmptyIterator();
      SQLException[] sQLExceptionArray0 = new SQLException[0];
      IteratorUtils.arrayListIterator(sQLExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) null, (Iterator<? extends SQLTransientException>) null, (Iterator<? extends SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Stack<SQLWarning> stack0 = new Stack<SQLWarning>();
      LoopingListIterator<SQLWarning> loopingListIterator0 = new LoopingListIterator<SQLWarning>(stack0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Transformer must not be null";
      stringArray0[1] = "UVNwf~WuLAt^fxe3<r$";
      int int0 = (-3890);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringArray0, (-3890));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) resettableListIterator0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "hkg^/";
      stringArray0[1] = "";
      stringArray0[2] = "^Y0I!m";
      stringArray0[3] = "";
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>) objectArrayIterator0, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.emptyOrderedIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" L4=\"AC", " L4=\"AC");
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", (-4763), sQLIntegrityConstraintViolationException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(" L4=\"AC", "", (-4763), sQLTransientException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("B|._qe`Ot=EnLS7", " L4=\"AC", sQLInvalidAuthorizationSpecException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("iterator", "org.apache.commons.collections4.set.AbstractSetDecorator", sQLFeatureNotSupportedException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLTransactionRollbackException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.set.AbstractSetDecorator", "Cannot remove from list until next() or previous() called");
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("", " L4=\"AC");
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.set.AbstractSetDecorator");
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0, (-4763), (-4763));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Stack<SQLWarning> stack0 = new Stack<SQLWarning>();
      LinkedHashSet<StringTokenizer> linkedHashSet0 = new LinkedHashSet<StringTokenizer>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedHashSet<StringTokenizer> linkedHashSet1 = new LinkedHashSet<StringTokenizer>();
      LinkedHashSet<StringTokenizer>[] linkedHashSetArray0 = (LinkedHashSet<StringTokenizer>[]) Array.newInstance(LinkedHashSet.class, 3);
      linkedHashSetArray0[0] = linkedHashSet1;
      linkedHashSetArray0[1] = linkedHashSet1;
      LinkedHashSet<StringTokenizer> linkedHashSet2 = new LinkedHashSet<StringTokenizer>();
      linkedHashSetArray0[2] = linkedHashSet2;
      ResettableIterator<LinkedHashSet<StringTokenizer>> resettableIterator0 = IteratorUtils.arrayIterator(linkedHashSetArray0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      OrderedMapIterator<SQLRecoverableException, Vector<IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) orderedMapIterator0, (Iterator<? extends SQLRecoverableException>) orderedMapIterator0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "The transformer array must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(";_G\"aG1Az7K4", ";_G\"aG1Az7K4");
      int[] intArray0 = new int[5];
      intArray0[0] = 4;
      intArray0[1] = (-766);
      intArray0[2] = 1553;
      int int0 = 18;
      intArray0[3] = 18;
      intArray0[4] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLNonTransientException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(sQLNonTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(batchUpdateException0);
      sQLNonTransientException0.getStackTrace();
      batchUpdateException1.printStackTrace();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) nonePredicate0;
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      predicateArray1[0] = (Predicate<Object>) nonePredicate0;
      predicateArray1[1] = (Predicate<Object>) nonePredicate0;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(iIOMetadataNode0);
      predicateArray1[2] = (Predicate<Object>) identityPredicate0;
      predicateArray1[3] = (Predicate<Object>) nonePredicate0;
      predicateArray1[4] = (Predicate<Object>) nonePredicate0;
      predicateArray1[5] = (Predicate<Object>) nonePredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray1);
      predicateArray0[1] = (Predicate<Object>) allPredicate0;
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      predicateArray0[2] = predicate0;
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate1 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      predicateArray0[3] = predicate1;
      Predicate<Object> predicate2 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      predicateArray0[4] = predicate2;
      Predicate<Object> predicate3 = EqualPredicate.equalPredicate((Object) null);
      Predicate<Object> predicate4 = NotPredicate.notPredicate((Predicate<? super Object>) predicate3);
      predicateArray0[5] = predicate4;
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[6] = (Predicate<Object>) allPredicate1;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) predicateArray1[3];
      objectArray0[1] = (Object) predicateArray1[1];
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) predicateArray1[1];
      objectArray0[4] = (Object) predicate1;
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>("ListIterator must not be null", (Class<?>[]) null, objectArray0);
      IfTransformer<Object, Boolean> ifTransformer0 = new IfTransformer<Object, Boolean>(predicateArray1[4], invokerTransformer0, invokerTransformer0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(ifTransformer0);
      predicateArray0[7] = (Predicate<Object>) transformerPredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(onePredicate0);
      IteratorUtils.matchesAll((Iterator<PriorityQueue<Properties>>) null, (Predicate<? super PriorityQueue<Properties>>) nullIsTruePredicate0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 5);
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nullIsFalsePredicate0, nullIsFalsePredicate0);
      ListIterator<String> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends String>) resettableListIterator0, (Predicate<? super String>) andPredicate0);
      iteratorArray0[0] = (Iterator<String>) listIterator0;
      MapIterator<String, EnumSet<Locale.FilteringMode>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<String, EnumSet<Locale.FilteringMode>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, EnumSet<Locale.FilteringMode>>(mapIterator0);
      iteratorArray0[2] = (Iterator<String>) abstractMapIteratorDecorator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) orderedIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTransientConnectionException[]) null, (-288));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TreeSet<SQLTimeoutException> treeSet0 = new TreeSet<SQLTimeoutException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) treeSet0);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[7];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("&Q7;F/^");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("&Q7;F/^", "&Q7;F/^", (-631), sQLIntegrityConstraintViolationException0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[0];
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) objectArrayIterator0, class0);
      OrderedMapIterator<SQLClientInfoException, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLClientInfoException>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) resettableListIterator0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.map.Flat3Map$FlatMapEntry");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 368, sQLIntegrityConstraintViolationException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) objectArrayIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Locale.FilteringMode[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(";_G\"aG1Az7K4", ";_G\"aG1Az7K4");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLNonTransientException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(batchUpdateException1);
      sQLNonTransientException0.getStackTrace();
      batchUpdateException0.printStackTrace();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      IteratorUtils.size(zippingIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer(";_G\"aG1Az7K4");
      LinkedHashSet<StringTokenizer>[] linkedHashSetArray0 = (LinkedHashSet<StringTokenizer>[]) Array.newInstance(LinkedHashSet.class, 6);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLSyntaxErrorException>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Stack<SQLWarning> stack0 = new Stack<SQLWarning>();
      LoopingListIterator<SQLWarning> loopingListIterator0 = new LoopingListIterator<SQLWarning>(stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Stack<SQLWarning> stack0 = new Stack<SQLWarning>();
      stack0.add((SQLWarning) null);
      LoopingListIterator<SQLWarning> loopingListIterator0 = new LoopingListIterator<SQLWarning>(stack0);
      IteratorUtils.isEmpty(loopingListIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("]", "]", (-2410));
      IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 10;
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransientException>) linkedHashSet0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Stack<SQLWarning> stack0 = new Stack<SQLWarning>();
      LoopingListIterator<SQLWarning> loopingListIterator0 = new LoopingListIterator<SQLWarning>(stack0);
      IteratorUtils.isEmpty(loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[0];
      Iterator<Locale.FilteringMode> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(";_G\"aG1Az7K4", ";_G\"aG1Az7K4");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLNonTransientException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(batchUpdateException1);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      IteratorUtils.size(zippingIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer(";_G\"aG1Az7K4");
      LinkedHashSet<StringTokenizer> linkedHashSet0 = new LinkedHashSet<StringTokenizer>();
      linkedHashSet0.add(stringTokenizer0);
      LinkedHashSet<StringTokenizer>[] linkedHashSetArray0 = (LinkedHashSet<StringTokenizer>[]) Array.newInstance(LinkedHashSet.class, 6);
      linkedHashSetArray0[0] = linkedHashSet0;
      linkedHashSetArray0[1] = linkedHashSet0;
      linkedHashSetArray0[2] = linkedHashSet0;
      LinkedHashSet<StringTokenizer> linkedHashSet1 = new LinkedHashSet<StringTokenizer>();
      linkedHashSetArray0[3] = linkedHashSet1;
      linkedHashSetArray0[4] = linkedHashSet0;
      linkedHashSetArray0[5] = linkedHashSet0;
      IteratorUtils.arrayIterator(linkedHashSetArray0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 1);
      OrderedMapIterator<SQLRecoverableException, Vector<IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) orderedMapIterator0, (Iterator<? extends SQLRecoverableException>) orderedMapIterator0);
      iteratorArray0[0] = iterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      SQLDataException sQLDataException0 = new SQLDataException("", batchUpdateException1);
      ResettableIterator<SQLDataException> resettableIterator1 = IteratorUtils.singletonIterator(sQLDataException0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      OrPredicate.orPredicate((Predicate<? super Object>) instanceofPredicate0, (Predicate<? super Object>) instanceofPredicate0);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      IteratorUtils.matchesAll((Iterator<SQLDataException>) resettableIterator1, (Predicate<? super SQLDataException>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(";_G\"aG1Az7K4");
      IteratorUtils.objectGraphIterator((Object) iIOMetadataNode0, (Transformer<? super Object, ?>) null);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 2);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) zippingIterator0, 1);
      IteratorUtils.loopingListIterator(list0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(">X++TYb3:4", ">X++TYb3:4");
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("?Nys6&`U#W+PY7]T0b");
      String string0 = "";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLException>) comparator0, (Iterator<? extends SQLException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(";_G\"aG1Az7K4", ";_G\"aG1Az7K4");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLNonTransientException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(batchUpdateException1);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      IteratorUtils.size(zippingIterator0);
      IteratorUtils.pushbackIterator((Iterator<?>) resettableIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(";_G\"aG1Az7K4", (String) null, batchUpdateException1);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException((String) null, batchUpdateException0);
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("Cannot remove element at index {0}.", ";_G\"aG1Az7K4", 1);
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("L>5:BpPMK__");
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException1;
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException2;
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0, 1);
      String string0 = "<iJR;H&6RDr+VH%Ca6";
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) zippingIterator0, (Transformer<? super SQLException, String>) null, "#bQ:=^", "A4-I;hZa4&$", "<iJR;H&6RDr+VH%Ca6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<SQLDataException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(stack0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) loopingIterator0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) stack0);
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) iterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.map.Flat3Map$FlatMapEntry");
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[6];
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) objectArrayIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLClientInfoException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 2);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) zippingIterator0, 1);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) resettableListIterator0;
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator1 = IteratorUtils.loopingListIterator(list0);
      iteratorArray0[1] = (Iterator<SQLTransactionRollbackException>) resettableListIterator1;
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>[]) iteratorArray0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      Stack<Object> stack0 = new Stack<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0, (Collection<? super SQLInvalidAuthorizationSpecException>) stack0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(orderedMapIterator0, defaultEquator0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 7);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      TreeSet<Closure<Object>> treeSet0 = new TreeSet<Closure<Object>>();
      Vector<Closure<Object>> vector0 = new Vector<Closure<Object>>(treeSet0);
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) vector0);
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure0, false);
      closureArray0[0] = closure1;
      Closure<Object> closure2 = IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure1);
      closureArray0[1] = closure2;
      ForClosure<Object> forClosure0 = new ForClosure<Object>((-1), closure1);
      closureArray0[2] = (Closure<Object>) forClosure0;
      Hashtable<Predicate<Object>, Closure<Object>> hashtable0 = new Hashtable<Predicate<Object>, Closure<Object>>();
      // Undeclared exception!
      try { 
        SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) resettableListIterator0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.map.Flat3Map$FlatMapEntry");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 368, sQLIntegrityConstraintViolationException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) objectArrayIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLClientInfoException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) orderedIterator0);
      IteratorUtils.skippingIterator(iterator0, 1527L);
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 1, 1);
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) zippingIterator0, 3281, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedHashSet<StringTokenizer> linkedHashSet0 = new LinkedHashSet<StringTokenizer>();
      linkedHashSet0.add((StringTokenizer) null);
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) listIterator0, 839);
      IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) list0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("");
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("D[");
      SQLTransientException sQLTransientException0 = new SQLTransientException("D[", "<Xm/VnkkZjWS");
      sQLSyntaxErrorException1.setNextException(sQLTransientException0);
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("Predicate must not be null", "");
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException((String) null);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 31, 1089);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ArrayList<Iterator<SQLSyntaxErrorException>> arrayList0 = new ArrayList<Iterator<SQLSyntaxErrorException>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>[]) iteratorArray0);
      int int0 = (-108);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      int int1 = 16;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object[]) iteratorArray0, (-108), 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 273;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 273);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      InvokerTransformer.invokerTransformer("E8^OqD");
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<SQLDataException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLDataException>) resettableListIterator0);
      IteratorUtils.toList((Iterator<? extends SQLDataException>) iterator0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 4);
      MapIterator<DataTruncation, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[0] = (Iterator<DataTruncation>) mapIterator0;
      Transformer<SQLWarning, DataTruncation> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<DataTruncation> iterator1 = IteratorUtils.objectGraphIterator((DataTruncation) null, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
      iteratorArray0[1] = iterator1;
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) mapIterator0);
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(list0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) loopingListIterator0);
      iteratorArray0[2] = (Iterator<DataTruncation>) listIterator0;
      IteratorUtils.loopingListIterator(list0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TreeSet<SQLTimeoutException> treeSet0 = new TreeSet<SQLTimeoutException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) treeSet0);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[7];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[4] = locale_FilteringMode4;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[5] = locale_FilteringMode5;
      Locale.FilteringMode locale_FilteringMode6 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[6] = locale_FilteringMode6;
      IteratorUtils.arrayIterator(locale_FilteringModeArray0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedHashSet<StringTokenizer>[] linkedHashSetArray0 = (LinkedHashSet<StringTokenizer>[]) Array.newInstance(LinkedHashSet.class, 1);
      LinkedHashSet<StringTokenizer> linkedHashSet0 = new LinkedHashSet<StringTokenizer>();
      linkedHashSet0.add((StringTokenizer) null);
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      linkedHashSet0.add(stringTokenizer0);
      linkedHashSetArray0[0] = linkedHashSet0;
      ResettableIterator<LinkedHashSet<StringTokenizer>> resettableIterator0 = IteratorUtils.arrayIterator(linkedHashSetArray0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLDataException sQLDataException0 = new SQLDataException("CinO)", sQLFeatureNotSupportedException0);
      ResettableIterator<SQLDataException> resettableIterator1 = IteratorUtils.singletonIterator(sQLDataException0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate0 = OrPredicate.orPredicate((Predicate<? super Object>) instanceofPredicate0, (Predicate<? super Object>) instanceofPredicate0);
      IteratorUtils.matchesAll((Iterator<SQLDataException>) resettableIterator1, (Predicate<? super SQLDataException>) predicate0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[7];
      DataTruncation dataTruncation0 = new DataTruncation((-3413), true, false, 125, 125);
      dataTruncationArray0[0] = dataTruncation0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", (String) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLRecoverableException0);
      DataTruncation dataTruncation1 = new DataTruncation((-3413), false, true, (-497), 2591, sQLTransientConnectionException0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(2591, false, true, 4137, 2591, sQLFeatureNotSupportedException0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation((-561), true, true, 743, 125, dataTruncation2);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation((-497), true, false, 2591, 2591);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation((-1), true, true, (-1), 4137, dataTruncation1);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation((-1913), false, false, 27, 839, dataTruncation2);
      dataTruncationArray0[6] = dataTruncation6;
      IteratorUtils.arrayListIterator(dataTruncationArray0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MapIterator<String, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<String, DataTruncation> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      MapIterator<String, SQLWarning> mapIterator2 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends String, ? extends SQLWarning>) mapIterator1);
      IteratorUtils.unmodifiableMapIterator(mapIterator2);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mapIterator2;
      objectArray0[1] = (Object) mapIterator0;
      IteratorUtils.arrayListIterator(objectArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLTimeoutException>) null, (Closure<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[1];
      ObjectArrayIterator<SQLWarning> objectArrayIterator0 = new ObjectArrayIterator<SQLWarning>(sQLWarningArray0);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLSyntaxErrorException>>) null, (Transformer<? super Iterator<SQLSyntaxErrorException>, ? extends DataTruncation>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(";_G\"aG1Az7K4", ";_G\"aG1Az7K4");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLNonTransientException0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(";_G\"aG1Az7K4", ";_G\"aG1Az7K4");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLNonTransientException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(batchUpdateException1);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      IteratorUtils.size(zippingIterator0);
      IteratorUtils.pushbackIterator((Iterator<?>) resettableIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(";_G\"aG1Az7K4", (String) null, batchUpdateException1);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException((String) null, batchUpdateException0);
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("Cannot remove element at index {0}.", ";_G\"aG1Az7K4", 1);
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("L>5:BpPMK__");
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException1;
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException2;
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0, 1);
      DataTruncation dataTruncation0 = new DataTruncation(100, true, true, 1, (-1727));
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.constantTransformer(dataTruncation0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLTransientConnectionException>) objectArrayIterator0, (Transformer<? super SQLTransientConnectionException, ? extends SQLWarning>) transformer0);
      ResettableIterator<BatchUpdateException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) resettableIterator1);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ArrayList<Iterator<SQLSyntaxErrorException>> arrayList0 = new ArrayList<Iterator<SQLSyntaxErrorException>>();
      LoopingListIterator<Iterator<SQLSyntaxErrorException>> loopingListIterator0 = new LoopingListIterator<Iterator<SQLSyntaxErrorException>>(arrayList0);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<DataTruncation> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLSyntaxErrorException>>) loopingListIterator0, (Transformer<? super Iterator<SQLSyntaxErrorException>, ? extends DataTruncation>) transformer0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends DataTruncation>) iterator0);
      // Undeclared exception!
      try { 
        loopingListIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // There are no elements for this iterator to loop on
         //
         verifyException("org.apache.commons.collections4.iterators.LoopingListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Iterator<SQLSyntaxErrorException>> linkedList0 = new LinkedList<Iterator<SQLSyntaxErrorException>>();
      LoopingListIterator<Iterator<SQLSyntaxErrorException>> loopingListIterator0 = new LoopingListIterator<Iterator<SQLSyntaxErrorException>>(linkedList0);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<DataTruncation> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLSyntaxErrorException>>) loopingListIterator0, (Transformer<? super Iterator<SQLSyntaxErrorException>, ? extends DataTruncation>) transformer0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends DataTruncation>) iterator0);
      // Undeclared exception!
      try { 
        loopingListIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // There are no elements for this iterator to loop on
         //
         verifyException("org.apache.commons.collections4.iterators.LoopingListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Integer integer0 = new Integer(879);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 10;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 10, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<IIOMetadataNode, IIOMetadataNode> invokerTransformer0 = new InvokerTransformer<IIOMetadataNode, IIOMetadataNode>("", classArray0, classArray0);
      InvokerTransformer.invokerTransformer("E8^OqD");
      InvokerTransformer.invokerTransformer("prefix may not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.objectGraphIterator((IIOMetadataNode) null, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) invokerTransformer0);
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<SQLDataException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLDataException>) resettableListIterator0);
      IteratorUtils.toList((Iterator<? extends SQLDataException>) iterator0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 4);
      MapIterator<DataTruncation, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[0] = (Iterator<DataTruncation>) mapIterator0;
      Transformer<SQLWarning, DataTruncation> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<DataTruncation> iterator1 = IteratorUtils.objectGraphIterator((DataTruncation) null, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
      iteratorArray0[1] = iterator1;
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) mapIterator0);
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(list0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) loopingListIterator0);
      iteratorArray0[2] = (Iterator<DataTruncation>) listIterator0;
      ResettableListIterator<DataTruncation> resettableListIterator1 = IteratorUtils.loopingListIterator(list0);
      iteratorArray0[3] = (Iterator<DataTruncation>) resettableListIterator1;
      IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) iterator0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 6);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      predicateArray0[0] = predicate0;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("+0k8Iy<wb-q", hashtable0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("+0k8Iy<wb-q", "+0k8Iy<wb-q", 1353, sQLClientInfoException0);
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) sQLTimeoutException0, (Equator<Object>) null);
      predicateArray0[1] = predicate1;
      predicateArray0[2] = predicate0;
      Transformer<Object, SQLTimeoutException>[] transformerArray0 = (Transformer<Object, SQLTimeoutException>[]) Array.newInstance(Transformer.class, 3);
      Class<SQLRecoverableException>[] classArray0 = (Class<SQLRecoverableException>[]) Array.newInstance(Class.class, 8);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      classArray0[0] = class0;
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      classArray0[1] = class1;
      Class<SQLRecoverableException> class2 = SQLRecoverableException.class;
      classArray0[2] = class2;
      Class<SQLRecoverableException> class3 = SQLRecoverableException.class;
      classArray0[3] = class3;
      Class<SQLRecoverableException> class4 = SQLRecoverableException.class;
      classArray0[4] = class4;
      Class<SQLRecoverableException> class5 = SQLRecoverableException.class;
      classArray0[5] = class5;
      Class<SQLRecoverableException> class6 = SQLRecoverableException.class;
      classArray0[6] = class6;
      Class<SQLRecoverableException> class7 = SQLRecoverableException.class;
      classArray0[7] = class7;
      // Undeclared exception!
      try { 
        InvokerTransformer.invokerTransformer("+0k8Iy<wb-q", (Class<?>[]) classArray0, (Object[]) closureArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter types must match the arguments
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLWarning>) null, (-858L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNextSibling();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[0];
      ObjectArrayIterator<SQLWarning> objectArrayIterator0 = new ObjectArrayIterator<SQLWarning>(sQLWarningArray0);
      Iterator<Object> iterator0 = IteratorUtils.pushbackIterator((Iterator<?>) objectArrayIterator0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) objectArrayIterator0);
      IteratorUtils.find(iterator0, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 2691, (-2389));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      IteratorUtils.emptyIterator();
      OrderedMapIterator<BatchUpdateException, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Object, SQLFeatureNotSupportedException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<?, ? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      AbstractMapIteratorDecorator<Object, SQLFeatureNotSupportedException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Object, SQLFeatureNotSupportedException>(mapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<Object, SQLFeatureNotSupportedException>) abstractMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) abstractMapIteratorDecorator0, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(";_G\"aG1Az7K4", ";_G\"aG1Az7K4");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLNonTransientException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(";_G\"aG1Az7K4");
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      StringTokenizer stringTokenizer0 = new StringTokenizer(";_G\"aG1Az7K4");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLNonTransientException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationException0.getStackTrace();
      batchUpdateException1.printStackTrace();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator1 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableIterator1, (Iterator<? extends SQLException>) resettableIterator0);
      OrderedMapIterator<BatchUpdateException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<BatchUpdateException, DataTruncation> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<BatchUpdateException, DataTruncation>) orderedMapIterator0);
      AbstractMapIteratorDecorator<BatchUpdateException, DataTruncation> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<BatchUpdateException, DataTruncation>(mapIterator0);
      IteratorUtils.size(abstractMapIteratorDecorator0);
      StringTokenizer stringTokenizer1 = new StringTokenizer(";_G\"aG1Az7K4");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode0);
      Iterator<SQLSyntaxErrorException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLSyntaxErrorException>) null, 1071L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, EnumSet<Locale.FilteringMode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLException>) orderedMapIterator0, 1016L);
      MapIterator<SQLNonTransientConnectionException, Object> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      // Undeclared exception!
      try { 
        AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not contain a null predicate, index 0 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) resettableListIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLSyntaxErrorException>) orderedIterator0, (Closure<? super SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      LoopingListIterator<StringTokenizer> loopingListIterator0 = new LoopingListIterator<StringTokenizer>(vector0);
      IteratorUtils.unmodifiableListIterator((ListIterator<StringTokenizer>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      String string0 = ":dKoU$9FA";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(":dKoU$9FA");
      SQLWarning sQLWarning0 = new SQLWarning(":dKoU$9FA", sQLTransactionRollbackException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("):FlFkRfcq\"G7]E/d|N", "", hashtable0, sQLWarning0);
      sQLClientInfoException0.addSuppressed(sQLWarning0);
      sQLClientInfoException0.spliterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      LinkedHashSet<SQLNonTransientException>[] linkedHashSetArray0 = (LinkedHashSet<SQLNonTransientException>[]) Array.newInstance(LinkedHashSet.class, 1);
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      linkedHashSetArray0[0] = linkedHashSet0;
      SQLDataException sQLDataException0 = new SQLDataException();
      linkedHashSet0.add(sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(linkedHashSetArray0, 512);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("ListIterator must not be null", "ListIterator must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0, (-1180));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Entry does not exist: ");
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[8];
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      iIOMetadataNodeArray0[2] = iIOMetadataNode0;
      iIOMetadataNodeArray0[3] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode1;
      iIOMetadataNodeArray0[5] = iIOMetadataNode0;
      iIOMetadataNodeArray0[6] = iIOMetadataNode0;
      iIOMetadataNodeArray0[7] = iIOMetadataNode0;
      ObjectArrayIterator<IIOMetadataNode> objectArrayIterator0 = new ObjectArrayIterator<IIOMetadataNode>(iIOMetadataNodeArray0, 0);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) singletonIterator0, (Iterator<? extends IIOMetadataNode>) objectArrayIterator0, (Iterator<? extends IIOMetadataNode>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(";_G\"aG1Az7K4", ";_G\"aG1Az7K4");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLNonTransientException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(batchUpdateException1);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      IteratorUtils.size(zippingIterator0);
      IteratorUtils.pushbackIterator((Iterator<?>) resettableIterator0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[8];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(";_G\"aG1Az7K4", "");
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException(sQLTimeoutException1);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("eDUA/(bTb", "", batchUpdateException0);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("", "", 0);
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("");
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException("(%8s7M", "");
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      SQLTimeoutException sQLTimeoutException7 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException7;
      IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, 1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("/e01r*yw+", "", (int[]) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/e01r*yw+", "Nf3n` @", 466, batchUpdateException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", sQLTimeoutException0);
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.singletonListIterator(sQLNonTransientException0);
      SkippingIterator<SQLNonTransientException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLNonTransientException>) listIterator0, (long) 466);
      IteratorUtils.skippingIterator((Iterator<SQLNonTransientException>) skippingIterator0, (long) 466);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLFeatureNotSupportedException0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      IteratorUtils.toString((Iterator<SQLException>) singletonIterator0, (Transformer<? super SQLException, String>) constantTransformer0, "Predicate must not be null", "", "Predicate must not be null");
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Iterator<IIOMetadataNode> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) orderedIterator0);
      IteratorUtils.skippingIterator(iterator0, 1527L);
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("%>;_", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException3;
      sQLClientInfoException1.fillInStackTrace();
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("%>;_", "org.apache.commons.collections4.map.AbstractHashedMap$Values", 1, (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException4.printStackTrace();
      sQLClientInfoException4.fillInStackTrace();
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException4;
      IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 1, 1);
      IteratorUtils.emptyOrderedIterator();
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 123;
      intArray0[6] = 1;
      intArray0[7] = 1;
      intArray0[8] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "Enumeration must not be null", intArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException0, 1662, (-3509));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientConnectionException0, 44);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 5);
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nullIsFalsePredicate0, nullIsFalsePredicate0);
      ListIterator<String> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends String>) resettableListIterator0, (Predicate<? super String>) andPredicate0);
      iteratorArray0[0] = (Iterator<String>) listIterator0;
      MapIterator<String, EnumSet<Locale.FilteringMode>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<String, EnumSet<Locale.FilteringMode>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, EnumSet<Locale.FilteringMode>>(mapIterator0);
      iteratorArray0[1] = (Iterator<String>) abstractMapIteratorDecorator0;
      String[] stringArray0 = null;
      int int0 = (-622);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((String[]) null, (-622));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[0];
      ObjectArrayIterator<SQLWarning> objectArrayIterator0 = new ObjectArrayIterator<SQLWarning>(sQLWarningArray0);
      Iterator<Object> iterator0 = IteratorUtils.pushbackIterator((Iterator<?>) objectArrayIterator0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UI_i_%X;A$2#");
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) objectArrayIterator0);
      IteratorUtils.find(iterator0, (Predicate<? super Object>) predicate0);
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 2691, (-2389));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ResettableIterator<Hashtable<StringTokenizer, Properties>> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 5);
      int int0 = 0;
      ArrayIterator<IIOMetadataNode> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<IIOMetadataNode>(resettableIterator0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      LinkedHashSet<StringTokenizer>[] linkedHashSetArray0 = (LinkedHashSet<StringTokenizer>[]) Array.newInstance(LinkedHashSet.class, 1);
      LinkedHashSet<StringTokenizer> linkedHashSet0 = new LinkedHashSet<StringTokenizer>();
      linkedHashSet0.add((StringTokenizer) null);
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      linkedHashSet0.add(stringTokenizer0);
      linkedHashSetArray0[0] = linkedHashSet0;
      ResettableIterator<LinkedHashSet<StringTokenizer>> resettableIterator0 = IteratorUtils.arrayIterator(linkedHashSetArray0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLDataException sQLDataException0 = new SQLDataException("", sQLFeatureNotSupportedException0);
      ResettableIterator<SQLDataException> resettableIterator1 = IteratorUtils.singletonIterator(sQLDataException0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate0 = OrPredicate.orPredicate((Predicate<? super Object>) instanceofPredicate0, (Predicate<? super Object>) instanceofPredicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLDataException>) resettableIterator1, (Predicate<? super SQLDataException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Iterator<Properties> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }
}
