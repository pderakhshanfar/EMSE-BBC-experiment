/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 14:47:13 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "{q]IK!", 9);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", sQLNonTransientException0);
      Class<InstanceofPredicate>[] classArray0 = (Class<InstanceofPredicate>[]) Array.newInstance(Class.class, 6);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      classArray0[0] = class0;
      Class<InstanceofPredicate> class1 = InstanceofPredicate.class;
      classArray0[1] = class1;
      Class<InstanceofPredicate> class2 = InstanceofPredicate.class;
      sQLNonTransientException0.spliterator();
      classArray0[2] = class2;
      Class<InstanceofPredicate> class3 = InstanceofPredicate.class;
      classArray0[3] = class3;
      Class<InstanceofPredicate> class4 = InstanceofPredicate.class;
      classArray0[4] = class4;
      Class<InstanceofPredicate> class5 = InstanceofPredicate.class;
      classArray0[5] = class5;
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("{q]IK!", "", "{q]IK!", 9);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "{q]IK!", "F", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLSyntaxErrorException0.setStackTrace(stackTraceElementArray0);
      InvokerTransformer<SQLNonTransientException, SQLSyntaxErrorException> invokerTransformer0 = new InvokerTransformer<SQLNonTransientException, SQLSyntaxErrorException>("{q]IK!", classArray0, classArray0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '{q]IK!' on 'class java.sql.SQLSyntaxErrorException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[7];
      SQLTransientException sQLTransientException0 = new SQLTransientException("h#kkq2BAwg[?:q~s", "", 1073741824);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransientException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("7l)@a'PA|G6nBu", "azsRJbHE");
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("LB6;+`oB'%nN}DL**~", "s/1");
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException("prefix may not be null", "prefix may not be null", 1073741824);
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0, 0, 0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) objectArrayListIterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 9);
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) resettableIterator0);
      iteratorArray0[0] = (Iterator<SQLDataException>) listIterator0;
      OrderedMapIterator<SQLDataException, Iterator<Properties>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, Iterator<Properties>> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends Iterator<Properties>>) orderedMapIterator0);
      iteratorArray0[1] = (Iterator<SQLDataException>) orderedMapIterator1;
      MapIterator<SQLDataException, SQLNonTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLDataException, SQLNonTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, SQLNonTransientException>(mapIterator0);
      iteratorArray0[2] = (Iterator<SQLDataException>) abstractMapIteratorDecorator0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>((SQLSyntaxErrorException) null);
      singletonIterator0.reset();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = IteratorUtils.get((Iterator<SQLSyntaxErrorException>) singletonIterator0, 0);
      assertNull(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[0];
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, 0, 0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLClientInfoException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      SQLTimeoutException sQLTimeoutException0 = IteratorUtils.find((Iterator<SQLTimeoutException>) resettableIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      assertNull(sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((InstanceofPredicate[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Transformer<Object, SQLTransactionRollbackException> transformer0 = ExceptionTransformer.exceptionTransformer();
      IfTransformer<SQLTransientException, SQLTransactionRollbackException> ifTransformer0 = new IfTransformer<SQLTransientException, SQLTransactionRollbackException>(predicate1, transformer0, transformer0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransactionRollbackException0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) ifTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLTransactionRollbackException>) predicate1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Transformer<SQLRecoverableException, String> transformer0 = ConstantTransformer.nullTransformer();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("}", sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("", "c#sx1Ynwz");
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) objectArrayListIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0, "", "~. `3'8r7?b(4", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLNonTransientConnectionException, ClientInfoStatus> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0, (Class<SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Transformer<SQLRecoverableException, String> transformer0 = ConstantTransformer.nullTransformer();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("}", sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("}", "N8s*qN:%G;#");
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException0;
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      IteratorUtils.toString((Iterator<SQLRecoverableException>) objectArrayListIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0, "org.apache.commons.collections4.iterators.SkippingIterator", "org.apache.commons.collections4.iterators.SkippingIterator", "");
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      DataTruncation dataTruncation0 = new DataTruncation(98, false, true, 98, 98);
      arrayList0.add(dataTruncation0);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, true);
      singletonIterator0.next();
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<SQLWarning, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLWarning, ? extends String>) hashtable0);
      IteratorUtils.toString((Iterator<DataTruncation>) singletonIterator0, (Transformer<? super DataTruncation, String>) transformer0, "vOmUMP", "vOmUMP", "iterator");
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) singletonIterator0);
      Iterator<SQLWarning> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0);
      IteratorUtils.contains(iterator0, (Object) dataTruncation0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "]z<t42+2tf/*$$gp{:Y");
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator1 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0, true);
      sQLNonTransientConnectionException0.printStackTrace();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) singletonIterator1, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Iterator<Properties>[]) null, 1607, 98);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      singletonIterator0.reset();
      IteratorUtils.get((Iterator<SQLSyntaxErrorException>) singletonIterator0, 0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[8];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("rk:QOxEOi(", "rk:QOxEOi(", 0, sQLSyntaxErrorException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("rk:QOxEOi(", "k[WOjbne<,%$", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("rk:QOxEOi(", sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLException sQLException0 = new SQLException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("Collection must not be null", (String) null, sQLException0);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("rk:QOxEOi(", (String) null, sQLNonTransientConnectionException2);
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[7] = sQLNonTransientConnectionException7;
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray1 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, class0);
      assertEquals(8, sQLNonTransientConnectionExceptionArray1.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Estimated size must be greater than 0");
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      singletonIterator0.reset();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException();
      IteratorUtils.emptyOrderedMapIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Estimated size must be greater than 0", "Closure must not be null", 0);
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 3);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      classArray0[0] = class0;
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      IteratorUtils.singletonListIterator(clientInfoStatus0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("Estimated size must be greater than 0");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 0, (-1438));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      ConstantTransformer.nullTransformer();
      Iterator<BatchUpdateException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Properties>) listIterator0, (Transformer<? super Properties, ? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Estimated size must be greater than 0");
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      singletonIterator0.reset();
      int int0 = 0;
      IteratorUtils.get((Iterator<SQLSyntaxErrorException>) singletonIterator0, 0);
      OrderedMapIterator<SQLWarning, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLWarning, ? extends SQLTransactionRollbackException>) orderedMapIterator0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) singletonListIterator0, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) resettableIterator0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, sQLTransientException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) sQLClientInfoException0, comparator0);
      Iterator<SQLWarning> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLWarning>) listIterator0, (Predicate<? super SQLWarning>) predicate0);
      IteratorUtils.unmodifiableIterator(iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<IIOMetadataNode> resettableIterator1 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      AndPredicate<IIOMetadataNode> andPredicate0 = new AndPredicate<IIOMetadataNode>((Predicate<? super IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) resettableIterator1, (Predicate<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<BatchUpdateException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      AndPredicate<IIOMetadataNode> andPredicate0 = new AndPredicate<IIOMetadataNode>((Predicate<? super IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "", sQLDataException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 0, sQLNonTransientException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", "", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("", "", (-1105), sQLDataException0);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("BF|@T\"B", "e!4");
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("?7/Z|G)HGosv", "");
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("?7/Z|G)HGosv");
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 6);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      classArray0[0] = class0;
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      classArray0[1] = class1;
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      classArray0[2] = class2;
      Class<SQLFeatureNotSupportedException> class3 = SQLFeatureNotSupportedException.class;
      classArray0[3] = class3;
      Class<SQLFeatureNotSupportedException> class4 = SQLFeatureNotSupportedException.class;
      classArray0[4] = class4;
      Class<SQLFeatureNotSupportedException> class5 = SQLFeatureNotSupportedException.class;
      classArray0[5] = class5;
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("e!4", (Class<?>[]) classArray0, (Object[]) sQLNonTransientConnectionExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) singletonIterator0, (Transformer<? super BatchUpdateException, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'e!4' on 'class java.sql.BatchUpdateException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Estimated size must be greater than 0");
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      singletonIterator0.reset();
      IteratorUtils.get((Iterator<SQLSyntaxErrorException>) singletonIterator0, 0);
      OrderedMapIterator<SQLWarning, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLWarning, ? extends SQLTransactionRollbackException>) orderedMapIterator0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLWarning>) orderedMapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      AndPredicate<IIOMetadataNode> andPredicate0 = new AndPredicate<IIOMetadataNode>((Predicate<? super IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) andPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AndPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      ConstantTransformer.nullTransformer();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLTransactionRollbackException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      EmptyIterator.emptyIterator();
      EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) null, (Collection<? super Properties>) treeSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator((IIOMetadataNode) null);
      AndPredicate<IIOMetadataNode> andPredicate0 = new AndPredicate<IIOMetadataNode>((Predicate<? super IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) andPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AndPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("8Yu8oL10cNAF", "8Yu8oL10cNAF");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("8Yu8oL10cNAF", "8Yu8oL10cNAF", sQLTransactionRollbackException0);
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0);
      IteratorUtils.size(singletonIterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransactionRollbackException0.forEach(consumer0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLSyntaxErrorException>) resettableIterator0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "~.=";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("~.=", "h Z&D", 31, sQLSyntaxErrorException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLNonTransientException0);
      sQLSyntaxErrorException1.addSuppressed(sQLNonTransientException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "", sQLSyntaxErrorException1);
      hashSet0.add(sQLTransientConnectionException0);
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientException>) hashSet0);
      // Undeclared exception!
      IteratorUtils.size(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      UniquePredicate<IIOMetadataNode> uniquePredicate0 = new UniquePredicate<IIOMetadataNode>();
      IteratorUtils.emptyOrderedIterator();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      IteratorUtils.singletonListIterator(clientInfoStatus0);
      IteratorUtils.emptyIterator();
      OrderedMapIterator<IIOMetadataNode, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<IIOMetadataNode, SQLSyntaxErrorException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<IIOMetadataNode, ? extends SQLSyntaxErrorException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) orderedMapIterator1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      UniquePredicate<IIOMetadataNode> uniquePredicate0 = new UniquePredicate<IIOMetadataNode>();
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IfTransformer<SQLRecoverableException, String> ifTransformer0 = new IfTransformer<SQLRecoverableException, String>(predicate0, transformer0, transformer0);
      IteratorUtils.toString((Iterator<SQLRecoverableException>) null, (Transformer<? super SQLRecoverableException, String>) ifTransformer0, "org.apache.commons.collections4.set.ListOrderedSet", "Ni8s*q(N:%G;#", "org.apache.commons.collections4.set.ListOrderedSet");
      UniquePredicate<Object> uniquePredicate1 = new UniquePredicate<Object>();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAny((Iterator<SQLTimeoutException>) listIterator0, (Predicate<? super SQLTimeoutException>) predicate1);
      String string0 = "]:DI";
      SQLDataException sQLDataException0 = new SQLDataException("]:DI", "dnJ~atG|}`8quy#Hn");
      sQLDataException0.getSuppressed();
      IteratorUtils.singletonListIterator(sQLDataException0);
      ComparatorPredicate.Criterion[] comparatorPredicate_CriterionArray0 = null;
      int int0 = 2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((ComparatorPredicate.Criterion[]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      ConstantTransformer.nullTransformer();
      ResettableListIterator<Properties> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) resettableListIterator0);
      OrderedIterator<SQLRecoverableException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) orderedIterator0, (Transformer<? super SQLRecoverableException, String>) null, "Ze v^u2Vv)", "Ze v^u2Vv)", "Ze v^u2Vv)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      EmptyIterator.emptyIterator();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLDataException>) null, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLTransientException>) nullIsTruePredicate0);
      nullIsTruePredicate0.evaluate((Object) null);
      IteratorUtils.matchesAny((Iterator<ServiceLoader<Hashtable>>) null, (Predicate<? super ServiceLoader<Hashtable>>) nullIsTruePredicate0);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.functors.CloneTransformer");
      assertEquals("java.sql.SQLTimeoutException: org.apache.commons.collections4.functors.CloneTransformer", sQLTimeoutException0.toString());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MapIterator<SQLWarning, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Properties[] propertiesArray0 = new Properties[19];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[0] = properties5;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      IteratorUtils.skippingIterator((Iterator<Properties>) resettableListIterator0, 2793L);
      Transformer<Properties, SQLRecoverableException> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Properties>) null, (Transformer<? super Properties, ? extends SQLRecoverableException>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MapIterator<SQLWarning, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, 344);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      arrayList0.add(dataTruncation0);
      IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      UniquePredicate<Object> uniquePredicate1 = new UniquePredicate<Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      Predicate<DataTruncation> predicate0 = NotPredicate.notPredicate((Predicate<? super DataTruncation>) uniquePredicate0);
      DataTruncation dataTruncation1 = IteratorUtils.find((Iterator<DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) predicate0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      ConstantTransformer.nullTransformer();
      EmptyListIterator.resettableEmptyListIterator();
      DataTruncation dataTruncation0 = new DataTruncation(91, true, true, 66, 66);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      arrayList0.add(dataTruncation0);
      IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add(dataTruncation0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      IteratorUtils.find((Iterator<DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) uniquePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((IIOMetadataNode[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      DataTruncation dataTruncation0 = new DataTruncation(98, false, true, 98, 98);
      arrayList0.add(dataTruncation0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      NullIsExceptionPredicate<DataTruncation> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<DataTruncation>((Predicate<? super DataTruncation>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) nullIsExceptionPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      NOPClosure.nopClosure();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLException>) null, (Closure<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Transformer<SQLRecoverableException, String> transformer0 = ConstantTransformer.nullTransformer();
      ResettableListIterator<Properties> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<Properties> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) resettableListIterator0);
      SkippingIterator<Properties> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Properties>) listIterator0, 0L);
      Transformer<Properties, SQLRecoverableException> transformer1 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Properties>) skippingIterator0, (Transformer<? super Properties, ? extends SQLRecoverableException>) transformer1);
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) iterator0, (Iterator<? extends SQLRecoverableException>) iterator0, (Iterator<? extends SQLRecoverableException>) iterator0);
      IteratorUtils.toString((Iterator<SQLRecoverableException>) zippingIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0, "#aoRO%", "", "");
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) priorityQueue0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.functors.NOPClosure");
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("V(", "", 20);
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException1);
      Iterable<SQLTimeoutException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTimeoutException>) singletonListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      DataTruncation dataTruncation0 = new DataTruncation(10, false, true, 98, 98);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      arrayList0.add(dataTruncation0);
      IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      UniquePredicate<Object> uniquePredicate1 = new UniquePredicate<Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      IteratorUtils.find((Iterator<DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) uniquePredicate1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 2);
      OrderedMapIterator<SQLRecoverableException, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<SQLRecoverableException>) orderedMapIterator0;
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLRecoverableException>) orderedMapIterator0);
      iteratorArray0[1] = iterator0;
      Iterator<SQLRecoverableException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) comparator0, (Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
      SQLRecoverableException sQLRecoverableException0 = IteratorUtils.find(iterator1, (Predicate<? super SQLRecoverableException>) uniquePredicate0);
      assertNull(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super IIOMetadataNode>>) arrayDeque0);
      IteratorUtils.isEmpty((Iterator<?>) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLTransientException0, true);
      MapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLWarning>) mapIterator0, (Predicate<? super SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyOrderedMapIterator();
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      treeSet0.pollFirst();
      Iterator<BatchUpdateException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) treeSet0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Entry does not exist: ", "", 0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) listIterator0, (Transformer<? super SQLTransactionRollbackException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      UniquePredicate<IIOMetadataNode> uniquePredicate0 = new UniquePredicate<IIOMetadataNode>();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>((IIOMetadataNode) null);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<ComparatorPredicate.Criterion>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrderedIterator<DataTruncation> orderedIterator1 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.filteredIterator((Iterator<? extends SQLWarning>) orderedIterator1, (Predicate<? super SQLWarning>) uniquePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MapIterator<SQLWarning, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      IteratorUtils.getIterator(mapIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MapIterator<SQLWarning, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      IteratorUtils.getIterator(mapIterator0);
      IteratorUtils.isEmpty(mapIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getElementsByTagNameNS((String) null, "k4U,M");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyOrderedMapIterator();
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList1 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList2 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList3 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList4 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList5 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList6 = new LinkedList<SQLClientInfoException>(linkedList1);
      LinkedList<SQLClientInfoException>[] linkedListArray0 = (LinkedList<SQLClientInfoException>[]) Array.newInstance(LinkedList.class, 6);
      linkedListArray0[0] = linkedList0;
      linkedListArray0[1] = linkedList5;
      linkedListArray0[2] = linkedList4;
      linkedListArray0[3] = linkedList1;
      linkedListArray0[2] = linkedList0;
      linkedListArray0[5] = linkedList4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(linkedListArray0, 0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      DataTruncation dataTruncation0 = new DataTruncation(98, false, true, 98, 98);
      arrayList0.add(dataTruncation0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      DataTruncation dataTruncation1 = IteratorUtils.find((Iterator<DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) predicate0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      SingletonIterator<ClientInfoStatus> singletonIterator0 = new SingletonIterator<ClientInfoStatus>(clientInfoStatus0, false);
      singletonIterator0.next();
      ArrayDeque<ClientInfoStatus> arrayDeque0 = new ArrayDeque<ClientInfoStatus>();
      LoopingIterator<ClientInfoStatus> loopingIterator0 = new LoopingIterator<ClientInfoStatus>(arrayDeque0);
      singletonIterator0.reset();
      Iterator<ClientInfoStatus>[] iteratorArray0 = (Iterator<ClientInfoStatus>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray0[0] = (Iterator<ClientInfoStatus>) loopingIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends ClientInfoStatus>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super IIOMetadataNode>>) arrayDeque0);
      DataTruncation dataTruncation0 = new DataTruncation((-1), true, true, (-737), (-737));
      Hashtable<DataTruncation, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<DataTruncation, SQLInvalidAuthorizationSpecException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("DYn]>/9`8J'", "");
      hashtable0.put(dataTruncation0, sQLInvalidAuthorizationSpecException0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("DYn]>/9`8J'");
      hashtable0.clone();
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, true);
      singletonIterator0.next();
      IteratorUtils.toString((Iterator<DataTruncation>) singletonIterator0, (Transformer<? super DataTruncation, String>) transformer0, "DYn]>/9`8J'", "vOmUMP", "");
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) singletonIterator0);
      Iterator<SQLWarning> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0);
      IteratorUtils.contains(iterator0, (Object) null);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      SingletonListIterator<ClientInfoStatus> singletonListIterator0 = new SingletonListIterator<ClientInfoStatus>(clientInfoStatus0);
      assertEquals(0, singletonListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MapIterator<SQLWarning, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(mapIterator0);
      IteratorUtils.isEmpty(mapIterator0);
      OrderedMapIterator<SQLNonTransientConnectionException, ClientInfoStatus> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0, class0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ReverseListIterator<Object> reverseListIterator0 = new ReverseListIterator<Object>(linkedList0);
      IteratorUtils.skippingIterator((Iterator<Object>) reverseListIterator0, 2441L);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Iterator<?> iterator1 = IteratorUtils.getIterator(instanceofPredicate0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MapIterator<SQLWarning, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(mapIterator0);
      IteratorUtils.getIterator(iterator0);
      IteratorUtils.isEmpty(iterator0);
      OrderedMapIterator<SQLNonTransientConnectionException, ClientInfoStatus> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0, class0);
      OrderedMapIterator<BatchUpdateException, SQLInvalidAuthorizationSpecException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLInvalidAuthorizationSpecException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLInvalidAuthorizationSpecException>(orderedMapIterator1);
      OrderedMapIterator<BatchUpdateException, SQLInvalidAuthorizationSpecException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<BatchUpdateException, ? extends SQLInvalidAuthorizationSpecException>) abstractOrderedMapIteratorDecorator0);
      MapIterator<BatchUpdateException, SQLInvalidAuthorizationSpecException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends BatchUpdateException, ? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator2);
      AbstractMapIteratorDecorator<BatchUpdateException, SQLInvalidAuthorizationSpecException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<BatchUpdateException, SQLInvalidAuthorizationSpecException>(mapIterator1);
      Iterator<SQLException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLException>) mapIterator0, (Iterator<? extends SQLException>) abstractMapIteratorDecorator0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MapIterator<SQLWarning, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(batchUpdateException0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLSyntaxErrorException>) singletonIterator0, 2181);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2180
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MapIterator<SQLWarning, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      IteratorUtils.getIterator(mapIterator0);
      IteratorUtils.isEmpty(mapIterator0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLSyntaxErrorException>) resettableIterator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) priorityQueue0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("tx1;H/'VVIeJAn");
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      ListIterator<IIOMetadataNode> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(listIterator1.equals((Object)listIterator0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      Predicate<Object> predicate1 = NotNullPredicate.notNullPredicate();
      PredicateTransformer<Object> predicateTransformer1 = new PredicateTransformer<Object>(predicate1);
      DataTruncation dataTruncation0 = new DataTruncation((-1), false, true, (-1), 0);
      predicateTransformer0.transform(dataTruncation0);
      OrderedMapIterator<Object, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.find((Iterator<Object>) orderedMapIterator0, (Predicate<? super Object>) instanceofPredicate0);
      IteratorUtils.getIterator((Object) null);
      boolean boolean0 = IteratorUtils.isEmpty(resettableListIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MapIterator<SQLWarning, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      IteratorUtils.getIterator(mapIterator0);
      IteratorUtils.isEmpty(mapIterator0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTransientException sQLTransientException1 = new SQLTransientException("", "", sQLTransientException0);
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLTransientException1, true);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLException>) singletonIterator0, (Closure<? super SQLException>) closure0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("pH", "cCqhikO<");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Transformer<SQLRecoverableException, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<SQLRecoverableException>) orderedIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0, "", "", "Ni8s*q(N:%G;#");
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) priorityQueue0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Ni8s*q(N:%G;#");
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super IIOMetadataNode>>) arrayDeque0);
      DataTruncation dataTruncation0 = new DataTruncation((-1), true, true, (-737), (-737));
      Hashtable<DataTruncation, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<DataTruncation, SQLInvalidAuthorizationSpecException>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Iterator<SQLWarning> iterator0 = null;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLSyntaxErrorException>) resettableIterator0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -1
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ListIterator<Locale.Category> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.size(listIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("}PlC8@6H%{xh.z+%O", ";7V'3I");
      IteratorUtils.getIterator(stringTokenizer0);
      IteratorUtils.isEmpty(listIterator0);
      Properties properties0 = new Properties();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTransientException sQLTransientException1 = new SQLTransientException("}PlC8@6H%{xh.z+%O", "}PlC8@6H%{xh.z+%O", sQLTransientException0);
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLTransientException0, false);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLException>) singletonIterator0, (Closure<? super SQLException>) closure0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(";7V'3I", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(";7V'3I", ";7V'3I", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("4_XY1U.2)4hQl", hashtable0, sQLClientInfoException2);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate<Object> uniquePredicate1 = new UniquePredicate<Object>();
      IteratorUtils.emptyOrderedIterator();
      DataTruncation dataTruncation0 = IteratorUtils.find((Iterator<DataTruncation>) null, (Predicate<? super DataTruncation>) uniquePredicate1);
      assertNull(dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      DataTruncation dataTruncation0 = new DataTruncation(10, true, true, 66, (-1694), sQLClientInfoException0);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, true);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 9);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      iteratorArray0[0] = (Iterator<DataTruncation>) resettableIterator0;
      iteratorArray0[1] = (Iterator<DataTruncation>) singletonIterator0;
      iteratorArray0[2] = (Iterator<DataTruncation>) singletonIterator0;
      iteratorArray0[3] = (Iterator<DataTruncation>) singletonIterator0;
      iteratorArray0[4] = (Iterator<DataTruncation>) singletonIterator0;
      Iterator<DataTruncation> iterator0 = IteratorUtils.unmodifiableIterator(iteratorArray0[3]);
      iteratorArray0[5] = iterator0;
      iteratorArray0[6] = (Iterator<DataTruncation>) singletonIterator0;
      iteratorArray0[7] = (Iterator<DataTruncation>) singletonIterator0;
      iteratorArray0[8] = (Iterator<DataTruncation>) singletonIterator0;
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      Transformer<SQLException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<DataTruncation>) zippingIterator0, (Transformer<? super DataTruncation, String>) transformer0, "vOmUMP", "vOmUMP", "");
      MapIterator<Integer, HashSet<IIOMetadataNode>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLClientInfoException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLTransientConnectionException0);
      Transformer<Object, SQLSyntaxErrorException> transformer1 = ExceptionTransformer.exceptionTransformer();
      Transformer<Object, SQLSyntaxErrorException> transformer2 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends SQLSyntaxErrorException>) transformer1, (Transformer<? super Object, ? extends SQLSyntaxErrorException>) transformer1);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer2, predicate0);
      IteratorUtils.peekingIterator((Iterator<? extends Integer>) mapIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("vOmUMP", "vOmUMP", 66);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Stack<Properties>[] stackArray0 = (Stack<Properties>[]) Array.newInstance(Stack.class, 0);
      IteratorUtils.arrayListIterator(stackArray0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[8];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("iterator", "b", 10);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("b");
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("iterator", "u8oU2UWpr]`#y", 10, sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("g,SFj", sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("");
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("iterator");
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("", "g,SFj", (-1), sQLSyntaxErrorException3);
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      sQLSyntaxErrorException2.addSuppressed(sQLSyntaxErrorException5);
      SQLSyntaxErrorException sQLSyntaxErrorException7 = new SQLSyntaxErrorException("", "", (-1));
      sQLSyntaxErrorExceptionArray0[7] = sQLSyntaxErrorException7;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0, 10);
      OrderedMapIterator<IIOMetadataNode, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) orderedMapIterator0, (Iterator<? extends IIOMetadataNode>) orderedMapIterator0);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Iterator<? extends IIOMetadataNode>) orderedMapIterator0);
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) zippingIterator0);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) iterator1, 1);
      ResettableListIterator<IIOMetadataNode> resettableListIterator1 = IteratorUtils.loopingListIterator(list0);
      assertFalse(resettableListIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<DataTruncation, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<DataTruncation, SQLInvalidAuthorizationSpecException>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.emptyOrderedIterator();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      SingletonListIterator<SQLWarning> singletonListIterator0 = new SingletonListIterator<SQLWarning>((SQLWarning) null);
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLWarning>) singletonListIterator0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLWarning>) listIterator0, (Predicate<? super SQLWarning>) uniquePredicate0);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      LoopingIterator<SQLFeatureNotSupportedException> loopingIterator0 = new LoopingIterator<SQLFeatureNotSupportedException>(arrayList0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) loopingIterator0);
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 7);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) orderedIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super IIOMetadataNode>>) arrayDeque0);
      MapIterator<DataTruncation, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<DataTruncation, SQLDataException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, SQLDataException>(mapIterator0);
      OrderedMapIterator<DataTruncation, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, SQLNonTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      MapIterator<SQLWarning, Object> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLWarning, ?>) orderedMapIterator1);
      LinkedList<SQLWarning> linkedList0 = new LinkedList<SQLWarning>();
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLWarning>) linkedList0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Collection must not be null");
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(orderedMapIterator1);
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = predicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLWarning>) resettableListIterator0, (Predicate<? super SQLWarning>) onePredicate0);
      Integer integer0 = new Integer(15);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLWarning> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) comparator0, (Iterator<? extends SQLWarning>) orderedMapIterator0, (Iterator<? extends SQLWarning>) mapIterator1);
      boolean boolean0 = IteratorUtils.contains(iterator0, (Object) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MapIterator<SQLWarning, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      IteratorUtils.getIterator(mapIterator0);
      IteratorUtils.isEmpty(mapIterator0);
      Properties properties0 = new Properties();
      IteratorUtils.emptyOrderedMapIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLException>) null, (Closure<? super SQLException>) closure0);
      ArrayListIterator<SQLTransientConnectionException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLTransientConnectionException>((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      MapIterator<SQLRecoverableException, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) mapIterator0, (Iterator<? extends SQLRecoverableException>) resettableListIterator0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "x.3");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      MapIterator<SQLNonTransientConnectionException, IIOMetadataNode> mapIterator1 = IteratorUtils.emptyMapIterator();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) mapIterator1, class0);
      assertEquals(0, sQLNonTransientConnectionExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyOrderedMapIterator();
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      treeSet0.pollFirst();
      Iterator<BatchUpdateException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) treeSet0);
      IteratorUtils.isEmpty(iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ListIterator<Locale.Category> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends Locale.Category>) listIterator0);
      MapIterator<DataTruncation, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<DataTruncation, SQLDataException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, SQLDataException>(mapIterator0);
      MapIterator<SQLWarning, Object> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLWarning, ?>) mapIterator0);
      LinkedList<SQLWarning> linkedList0 = new LinkedList<SQLWarning>();
      IteratorUtils.loopingListIterator((List<SQLWarning>) linkedList0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fv1L:WiZ");
      IteratorUtils.contains((Iterator<SQLWarning>) mapIterator1, (Object) "fv1L:WiZ");
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyOrderedMapIterator();
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      treeSet0.pollFirst();
      Iterator<BatchUpdateException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) treeSet0);
      IteratorUtils.isEmpty(iterator0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) priorityQueue0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAll((Iterator<InstanceofPredicate>) resettableIterator0, (Predicate<? super InstanceofPredicate>) predicate0);
      int int0 = 1302;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((ClientInfoStatus[]) null, 20, 1302);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<DataTruncation, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<DataTruncation, SQLInvalidAuthorizationSpecException>();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      MapIterator<DataTruncation, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<DataTruncation, SQLDataException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, SQLDataException>(mapIterator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLWarning, ?>) abstractMapIteratorDecorator0);
      LinkedList<SQLWarning> linkedList0 = new LinkedList<SQLWarning>();
      IteratorUtils.loopingListIterator((List<SQLWarning>) linkedList0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Collection must not be null");
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(abstractMapIteratorDecorator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      Predicate<Object> predicate2 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate1);
      predicateArray0[0] = predicate2;
      predicateArray0[1] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[2] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[2] = predicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLWarning>) listIteratorWrapper0, (Predicate<? super SQLWarning>) onePredicate0);
      Integer integer0 = new Integer(2235);
      IteratorUtils.contains((Iterator<SQLWarning>) listIterator0, (Object) integer0);
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLInvalidAuthorizationSpecException0, false);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLException>) singletonIterator0, (Closure<? super SQLException>) closure0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      ConstantTransformer.nullTransformer();
      ResettableListIterator<Properties> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) resettableListIterator0);
      DataTruncation dataTruncation0 = new DataTruncation((-273), false, false, 1, (-2047));
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      arrayList0.add(dataTruncation0);
      ResettableListIterator<DataTruncation> resettableListIterator1 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends DataTruncation>) resettableListIterator1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Integer[] integerArray0 = new Integer[5];
      int int0 = 93;
      Integer integer0 = new Integer(93);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(93);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(100);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(10);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2220);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      integerArray0[4] = integer4;
      IteratorUtils.arrayListIterator(integerArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLRecoverableException[]) null, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      EmptyIterator.emptyIterator();
      SQLWarning sQLWarning0 = new SQLWarning("There are no elements for this iterator to loop on", "There are no elements for this iterator to loop on", (-1));
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.singletonIterator(sQLWarning0);
      ResettableIterator<EnumSet<ComparatorPredicate.Criterion>> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) anyPredicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, anyPredicate0);
      predicateArray0[0] = (Predicate<Object>) andPredicate0;
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      predicateArray0[1] = predicate1;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      IteratorUtils.find((Iterator<EnumSet<ComparatorPredicate.Criterion>>) resettableIterator1, (Predicate<? super EnumSet<ComparatorPredicate.Criterion>>) onePredicate0);
      IteratorUtils.contains((Iterator<SQLWarning>) resettableIterator0, (Object) null);
      EmptyListIterator.resettableEmptyListIterator();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      IteratorUtils.singletonListIterator(clientInfoStatus0);
      ResettableListIterator<Closure<Object>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("There are no elements for this iterator to loop on", "There are no elements for this iterator to loop on", (-1), sQLWarning0);
      IteratorUtils.contains((Iterator<Closure<Object>>) resettableListIterator0, (Object) sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super IIOMetadataNode>>) arrayDeque0);
      DataTruncation dataTruncation0 = new DataTruncation((-1), true, true, (-752), (-752));
      Hashtable<DataTruncation, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<DataTruncation, SQLInvalidAuthorizationSpecException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("DYn]>`9`8J'", "");
      hashtable0.put(dataTruncation0, sQLInvalidAuthorizationSpecException0);
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("G/`DB^{2|wRs!ak", "", 16, hashtable1);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0);
      IteratorUtils.singletonListIterator(sQLClientInfoException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>) iterator0, (Iterator<? extends SQLClientInfoException>) iterator0);
      IteratorUtils.emptyMapIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLInvalidAuthorizationSpecException0);
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      Iterable<SQLTimeoutException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTimeoutException>) singletonListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      Hashtable<DataTruncation, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<DataTruncation, SQLInvalidAuthorizationSpecException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("DYn]>`9`8J'", "DYn]>`9`8J'");
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("DYn]>`9`8J'", "", 15, hashtable1);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0);
      IteratorUtils.singletonListIterator(sQLClientInfoException1);
      EmptyIterator.emptyIterator();
      IteratorUtils.emptyMapIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLClientInfoException1);
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      Iterable<SQLTimeoutException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTimeoutException>) singletonListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.size((Iterator<?>) null);
      Iterator<?> iterator0 = IteratorUtils.getIterator(orderedIterator0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>((Transformer<? super Object, Boolean>) null);
      SingletonListIterator<Predicate<Object>> singletonListIterator0 = new SingletonListIterator<Predicate<Object>>(transformerPredicate0);
      IteratorUtils.isEmpty(iterator0);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      priorityQueue0.add(instanceofPredicate0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) priorityQueue0);
      boolean boolean1 = IteratorUtils.matchesAll((Iterator<InstanceofPredicate>) resettableIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttribute("");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0, 0, 0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("suffix may not be null", dataTruncationArray0[2]);
      List<SQLWarning> list0 = IteratorUtils.toList((Iterator<? extends SQLWarning>) objectArrayListIterator0);
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("");
      IteratorUtils.contains((Iterator<SQLWarning>) resettableListIterator0, (Object) "");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<DataTruncation, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<DataTruncation, SQLInvalidAuthorizationSpecException>();
      ExceptionPredicate.exceptionPredicate();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      MapIterator<DataTruncation, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<DataTruncation, SQLDataException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, SQLDataException>(mapIterator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLWarning, ?>) abstractMapIteratorDecorator0);
      LinkedList<SQLWarning> linkedList0 = new LinkedList<SQLWarning>();
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLWarning>) linkedList0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Collection must not be null");
      IteratorUtils.contains((Iterator<SQLWarning>) resettableListIterator0, (Object) "Collection must not be null");
      MapIterator<SQLNonTransientConnectionException, IIOMetadataNode> mapIterator1 = IteratorUtils.emptyMapIterator();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) mapIterator1, class0);
      assertEquals(0, sQLNonTransientConnectionExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Iterator<IIOMetadataNode> iterator0 = null;
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super IIOMetadataNode>>) arrayDeque0);
      DataTruncation dataTruncation0 = new DataTruncation((-1), true, true, (-752), (-752));
      Hashtable<DataTruncation, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<DataTruncation, SQLInvalidAuthorizationSpecException>();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Transformer<SQLRecoverableException, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<SQLRecoverableException>) orderedIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0, "", "", "Ni8s*q(N:%G;#t");
      OrderedMapIterator<SQLDataException, Iterator<Integer>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      arrayList0.clone();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      predicateTransformer0.transform(predicate0);
      IteratorUtils.getIterator(resettableListIterator0);
      IteratorUtils.isEmpty(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1), 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<DataTruncation, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<DataTruncation, SQLInvalidAuthorizationSpecException>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.find((Iterator<DataTruncation>) orderedIterator0, (Predicate<? super DataTruncation>) uniquePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<IIOMetadataNode> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super IIOMetadataNode>>) arrayDeque0);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) predicate0);
      IteratorUtils.isEmpty((Iterator<?>) null);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      priorityQueue0.add(instanceofPredicate0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) priorityQueue0);
      Predicate<Object> predicate1 = TruePredicate.truePredicate();
      // Undeclared exception!
      IteratorUtils.matchesAll((Iterator<InstanceofPredicate>) resettableIterator0, (Predicate<? super InstanceofPredicate>) predicate1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0, 0, 0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>((Transformer<? super Object, Boolean>) null);
      SingletonListIterator<Predicate<Object>> singletonListIterator0 = new SingletonListIterator<Predicate<Object>>(transformerPredicate0);
      IteratorUtils.isEmpty(singletonListIterator0);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "suffix may not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[7];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(")g}iEtQ{Udc6", ")g}iEtQ{Udc6", (-639));
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("U?:{[UU#,WlOuz", "", 100, sQLNonTransientException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.functors.FunctorUtils", ")g}iEtQ{Udc6", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException(")g}iEtQ{Udc6", "org.apache.commons.collections4.iterators.ListIteratorWrapper");
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("", "");
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException("U?:{[UU#,WlOuz", "");
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException6;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 1, (int) 1);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      IteratorUtils.emptyOrderedIterator();
      Hashtable<SQLException, Object> hashtable0 = new Hashtable<SQLException, Object>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "pH", sQLNonTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, sQLTimeoutException0);
      hashtable0.put(sQLInvalidAuthorizationSpecException0, "pH");
      EntrySetMapIterator<SQLException, Object> entrySetMapIterator0 = new EntrySetMapIterator<SQLException, Object>(hashtable0);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) entrySetMapIterator0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[9];
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("z1eaXCL%Wh6@9HB", sQLNonTransientConnectionException0);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException1;
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[8] = sQLTimeoutException0;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      Iterable<SQLTransientException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLTransientException>) objectArrayListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<IIOMetadataNode> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super IIOMetadataNode>>) arrayDeque0);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) predicate0);
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) priorityQueue0);
      Predicate<Object> predicate1 = TruePredicate.truePredicate();
      boolean boolean1 = IteratorUtils.matchesAll((Iterator<InstanceofPredicate>) resettableIterator0, (Predicate<? super InstanceofPredicate>) predicate1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0, 0, 0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("suffix may not be null", dataTruncationArray0[2]);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      LinkedList<SQLWarning> linkedList0 = new LinkedList<SQLWarning>();
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLWarning>) linkedList0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("Collection must not be null");
      IteratorUtils.contains((Iterator<SQLWarning>) resettableListIterator0, (Object) listIterator0);
      Comparator<SQLClientInfoException> comparator0 = (Comparator<SQLClientInfoException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      ListIterator<SQLClientInfoException> listIterator1 = IteratorUtils.singletonListIterator(sQLClientInfoException0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>) listIterator1, (Iterator<? extends SQLClientInfoException>) listIterator1);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<DataTruncation, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<DataTruncation, SQLInvalidAuthorizationSpecException>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.find((Iterator<DataTruncation>) orderedIterator0, (Predicate<? super DataTruncation>) uniquePredicate0);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      Transformer<String, String> transformer0 = IfTransformer.ifTransformer((Predicate<? super String>) uniquePredicate0, (Transformer<? super String, ? extends String>) factoryTransformer0, (Transformer<? super String, ? extends String>) factoryTransformer0);
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("", (Transformer<? super String, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.isEmpty(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<DataTruncation, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<DataTruncation, SQLInvalidAuthorizationSpecException>();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      MapIterator<DataTruncation, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<DataTruncation, SQLDataException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, SQLDataException>(mapIterator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLWarning, ?>) abstractMapIteratorDecorator0);
      LinkedList<SQLWarning> linkedList0 = new LinkedList<SQLWarning>();
      IteratorUtils.loopingListIterator((List<SQLWarning>) linkedList0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Collection must not be null");
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(abstractMapIteratorDecorator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      Predicate<Object> predicate2 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate1);
      predicateArray0[0] = predicate2;
      predicateArray0[1] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[2] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[3] = predicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLWarning>) listIteratorWrapper0, (Predicate<? super SQLWarning>) onePredicate0);
      Integer integer0 = new Integer(2235);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLWarning>) listIterator0, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ListIterator<Locale.Category> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends Locale.Category>) listIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", (Throwable) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      sQLInvalidAuthorizationSpecException0.printStackTrace((PrintStream) mockPrintStream0);
      Hashtable<DataTruncation, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<DataTruncation, SQLInvalidAuthorizationSpecException>();
      DataTruncation dataTruncation0 = new DataTruncation(91, false, false, (-827), 44);
      hashtable0.put(dataTruncation0, sQLInvalidAuthorizationSpecException0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("xP@,4.q::3kLkQ&3<");
      hashtable0.clone();
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, false);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) singletonIterator0, (Transformer<? super DataTruncation, String>) transformer0, "", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'xP@,4.q::3kLkQ&3<' on 'class java.sql.DataTruncation' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ListIterator<Locale.Category> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<Locale.Category> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Locale.Category>) listIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      PredicateTransformer<Object> predicateTransformer1 = new PredicateTransformer<Object>(predicate0);
      IteratorUtils.getIterator(predicate0);
      SingletonListIterator<Predicate<Object>> singletonListIterator0 = new SingletonListIterator<Predicate<Object>>(predicate0);
      IteratorUtils.isEmpty(iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) listIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<DataTruncation, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<DataTruncation, SQLInvalidAuthorizationSpecException>();
      EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException>(hashMap0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      predicateArray0[0] = (Predicate<Object>) comparatorPredicate0;
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[2] = predicate0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(":G%k:*\u0003[F{;\"MOd");
      OrderedMapIterator<BatchUpdateException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) orderedMapIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      treeSet0.pollFirst();
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) treeSet0);
      MapIterator<SQLWarning, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLWarning, Object> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLWarning, ?>) mapIterator0);
      IteratorUtils.contains((Iterator<SQLWarning>) mapIterator1, (Object) sQLNonTransientConnectionException0);
      IteratorUtils.toString((Iterator<SQLException>) null);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Transformer<SQLRecoverableException, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<SQLRecoverableException>) orderedIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0, "", "", "Ni8s*q(N:%G;#t");
      IteratorUtils.emptyOrderedMapIterator();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      treeSet0.pollFirst();
      Iterator<BatchUpdateException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Hashtable<DataTruncation, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<DataTruncation, SQLInvalidAuthorizationSpecException>();
      EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException>(hashtable0);
      DataTruncation dataTruncation0 = new DataTruncation((-470), false, false, (-1241), (-470));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, dataTruncation0);
      hashtable0.put(dataTruncation0, sQLInvalidAuthorizationSpecException0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("~V@>wlTgw~^9Rl'");
      hashtable0.clone();
      IteratorUtils.toString((Iterator<DataTruncation>) entrySetMapIterator0, (Transformer<? super DataTruncation, String>) transformer0, "~V@>wlTgw~^9Rl'", "", "");
      MapIterator<Integer, HashSet<IIOMetadataNode>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) "");
      Transformer<Object, SQLSyntaxErrorException> transformer1 = ExceptionTransformer.exceptionTransformer();
      Transformer<Object, SQLSyntaxErrorException> transformer2 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends SQLSyntaxErrorException>) transformer1, (Transformer<? super Object, ? extends SQLSyntaxErrorException>) transformer1);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer2, predicate0);
      Iterator<Integer> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Integer>) mapIterator0, (Predicate<? super Integer>) predicate0);
      IteratorUtils.peekingIterator((Iterator<? extends Integer>) mapIterator0);
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<DataTruncation, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<DataTruncation, SQLInvalidAuthorizationSpecException>();
      EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException>(hashMap0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      predicateArray0[0] = (Predicate<Object>) comparatorPredicate0;
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[2] = predicate0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(":G%k:*\u0003[F{;\"MOd");
      OrderedMapIterator<BatchUpdateException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) orderedMapIterator0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      treeSet0.pollFirst();
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) treeSet0);
      MapIterator<SQLWarning, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLWarning, Object> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLWarning, ?>) mapIterator0);
      IteratorUtils.contains((Iterator<SQLWarning>) mapIterator1, (Object) sQLNonTransientConnectionException0);
      IteratorUtils.toString((Iterator<SQLException>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Transformer<SQLRecoverableException, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<SQLRecoverableException>) orderedIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0, "", "", "Ni8s*q(N:%G;#t");
      IteratorUtils.emptyOrderedMapIterator();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      NotNullPredicate.notNullPredicate();
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(arrayList0);
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) loopingListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) resettableListIterator0, 0L, 2707L);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "Ni8s*q(N:%G;#t", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation(4, false, false, 4, 1896, sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0, 1896, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Predicate<SQLTransientException> predicate0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLTransientConnectionException>) orderedMapIterator0, (Predicate<? super SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Hashtable<DataTruncation, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<DataTruncation, SQLInvalidAuthorizationSpecException>();
      EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException>(hashtable0);
      DataTruncation dataTruncation0 = new DataTruncation((-470), false, false, (-1241), (-470));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, dataTruncation0);
      hashtable0.put(dataTruncation0, sQLInvalidAuthorizationSpecException0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("~V@>wlTgw~^9Rl'");
      hashtable0.clone();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) entrySetMapIterator0, (Transformer<? super DataTruncation, String>) transformer0, (String) null, "Collection must not be null", "Collection must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Transformer<SQLRecoverableException, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<SQLRecoverableException>) orderedIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0, "", "", "Ni8s*q(N:%G;#t");
      OrderedMapIterator<SQLDataException, Iterator<Integer>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      predicateTransformer0.transform(predicate0);
      IteratorUtils.getIterator(resettableListIterator0);
      SingletonListIterator<Predicate<Object>> singletonListIterator0 = new SingletonListIterator<Predicate<Object>>(predicate0);
      IteratorUtils.isEmpty(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<DataTruncation, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<DataTruncation, SQLInvalidAuthorizationSpecException>();
      EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException>(hashMap0);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      ArrayDeque<InstanceofPredicate> arrayDeque1 = arrayDeque0.clone();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque1);
      ExceptionPredicate.exceptionPredicate();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.find((Iterator<DataTruncation>) orderedIterator0, (Predicate<? super DataTruncation>) uniquePredicate0);
      Hashtable<InstanceofPredicate, Transformer<Object, String>> hashtable0 = new Hashtable<InstanceofPredicate, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashtable0);
      String string0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) orderedIterator0, (Transformer<? super DataTruncation, String>) transformer0, "", (String) null, "Pl!<(bf[]3#9RB2p");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Hashtable<DataTruncation, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<DataTruncation, SQLInvalidAuthorizationSpecException>();
      EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException>(hashtable0);
      DataTruncation dataTruncation0 = new DataTruncation((-470), false, false, (-1241), (-470));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, dataTruncation0);
      hashtable0.put(dataTruncation0, sQLInvalidAuthorizationSpecException0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("~V@>wlTgw~^9Rl'");
      hashtable0.clone();
      IteratorUtils.toString((Iterator<DataTruncation>) entrySetMapIterator0, (Transformer<? super DataTruncation, String>) transformer0, "~V@>wlTgw~^9Rl'", "", "Collection must not be null");
      MapIterator<Integer, HashSet<IIOMetadataNode>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) "Collection must not be null");
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      Iterator<Integer> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Integer>) mapIterator0, (Predicate<? super Integer>) transformedPredicate0);
      Iterator<Integer> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends Integer>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<DataTruncation, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<DataTruncation, SQLInvalidAuthorizationSpecException>();
      EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException>(hashMap0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      ExceptionPredicate.exceptionPredicate();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(":G%k:*\u0003[F{;\"MOd");
      OrderedMapIterator<BatchUpdateException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) orderedMapIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      treeSet0.pollFirst();
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) treeSet0);
      IteratorUtils.isEmpty(orderedMapIterator0);
      Boolean[] booleanArray0 = new Boolean[1];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      int int0 = 2626;
      int int1 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) dataTruncationArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<DataTruncation, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<DataTruncation, SQLInvalidAuthorizationSpecException>();
      EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException>(hashMap0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      predicateArray0[0] = (Predicate<Object>) comparatorPredicate0;
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[2] = predicate1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(":G%k:*\u0003[F{;\"MOd");
      ConstantFactory<SQLNonTransientConnectionException> constantFactory0 = new ConstantFactory<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      FactoryTransformer<Object, SQLNonTransientConnectionException> factoryTransformer0 = new FactoryTransformer<Object, SQLNonTransientConnectionException>(constantFactory0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(factoryTransformer0, predicateArray0[0]);
      predicateArray0[3] = (Predicate<Object>) transformedPredicate0;
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      predicateArray0[4] = (Predicate<Object>) nullIsExceptionPredicate0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[5] = (Predicate<Object>) uniquePredicate0;
      TransformedPredicate<Object> transformedPredicate1 = new TransformedPredicate<Object>(factoryTransformer0, uniquePredicate0);
      predicateArray0[6] = (Predicate<Object>) transformedPredicate1;
      int int0 = (-1);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Integer>) null, (Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("J", (String) null, 1);
      SQLWarning sQLWarning1 = new SQLWarning("2/q6JJ,A&'-}x", "kj,/PA5vy-c!Jie3<~", 581, sQLWarning0);
      sQLWarning1.fillInStackTrace();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("2/q6JJ,A&'-}x", "2/q6JJ,A&'-}x", 11, sQLWarning1);
      IteratorUtils.getIterator(sQLInvalidAuthorizationSpecException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("J");
      iIOMetadataNode0.getPreviousSibling();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Transformer<SQLRecoverableException, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<SQLRecoverableException>) orderedIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0, "", "", "NZ8s*q(N:%G;L#t");
      IteratorUtils.emptyOrderedMapIterator();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      Boolean[] booleanArray0 = new Boolean[4];
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform(predicate0);
      booleanArray0[0] = boolean0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("NZ8s*q(N:%G;L#t", sQLIntegrityConstraintViolationException0);
      Boolean boolean1 = predicateTransformer0.transform(sQLRecoverableException0);
      booleanArray0[1] = boolean1;
      Boolean boolean2 = predicateTransformer0.transform("NZ8s*q(N:%G;L#t");
      booleanArray0[2] = boolean2;
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      PredicateTransformer<Object> predicateTransformer1 = new PredicateTransformer<Object>(instanceofPredicate0);
      Boolean boolean3 = predicateTransformer1.transform(boolean0);
      booleanArray0[3] = boolean3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(booleanArray0, (-1115), 506);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ListIterator<Locale.Category> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends Locale.Category>) listIterator0);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<IIOMetadataNode> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super IIOMetadataNode>>) arrayDeque0);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) predicate0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      IteratorUtils.isEmpty((Iterator<?>) null);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      BoundedIterator<BatchUpdateException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) objectArrayListIterator0, 3367L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<DataTruncation, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<DataTruncation, SQLInvalidAuthorizationSpecException>();
      EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException>(hashMap0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      predicateArray0[0] = (Predicate<Object>) comparatorPredicate0;
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[2] = predicate1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(":G%k:*\u0003[F{;\"MOd");
      OrderedMapIterator<BatchUpdateException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) orderedMapIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      treeSet0.pollFirst();
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) treeSet0);
      IteratorUtils.isEmpty(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLNonTransientConnectionException0, 4603);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      DataTruncation dataTruncation0 = new DataTruncation(3172, true, true, 3172, 3172);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(3172, true, true, 2626, 3172);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(0, false, false, (-1477), 2626, dataTruncation1);
      dataTruncationArray0[2] = dataTruncation2;
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0, 0, 0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("suffix may not be null", dataTruncation2);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0, class0);
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[0];
      IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      TreeSet<DataTruncation> treeSet0 = new TreeSet<DataTruncation>();
      TreeSet<Object> treeSet1 = new TreeSet<Object>();
      treeSet1.pollFirst();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) treeSet0, 1367, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Properties properties0 = new Properties();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 32;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("=zB", intArray0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[7];
      batchUpdateExceptionArray0[0] = batchUpdateException1;
      batchUpdateExceptionArray0[1] = batchUpdateException0;
      batchUpdateExceptionArray0[2] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException();
      batchUpdateExceptionArray0[3] = batchUpdateException2;
      batchUpdateExceptionArray0[0] = batchUpdateException1;
      batchUpdateExceptionArray0[5] = batchUpdateException1;
      batchUpdateExceptionArray0[6] = batchUpdateException2;
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(vector0);
      DefaultEquator<BatchUpdateException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate(batchUpdateException2, (Equator<BatchUpdateException>) defaultEquator0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<BatchUpdateException>) reverseListIterator0, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      int[] intArray0 = new int[7];
      intArray0[0] = 45;
      intArray0[1] = 0;
      intArray0[2] = 32;
      intArray0[3] = (-912);
      intArray0[4] = 0;
      intArray0[5] = (-388);
      intArray0[6] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(32);
      Integer integer3 = new Integer(0);
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) (-388);
      integerArray0[3] = integer1;
      integerArray0[4] = (Integer) 32;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      IteratorUtils.toList((Iterator<? extends Integer>) objectArrayListIterator0, 10);
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals(4, objectArrayListIterator0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ListIterator<Locale.Category> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends Locale.Category>) listIterator0);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<IIOMetadataNode> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super IIOMetadataNode>>) arrayDeque0);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) predicate0);
      String string0 = "Transformer must not be null";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "Transformer must not be null", 16);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLFeatureNotSupportedException0, (-1802), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      Transformer<Object, SQLTimeoutException> transformer0 = ConstantTransformer.constantTransformer(sQLTimeoutException0);
      IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer0);
      LoopingIterator<SQLInvalidAuthorizationSpecException> loopingIterator0 = null;
      try {
        loopingIterator0 = new LoopingIterator<SQLInvalidAuthorizationSpecException>((Collection<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The collection must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.LoopingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Properties properties0 = new Properties();
      properties0.setProperty("VV%L2!VWk", "VV%L2!VWk");
      properties0.stringPropertyNames();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      IteratorUtils.emptyListIterator();
      ArrayIterator<BatchUpdateException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<BatchUpdateException>(iterator0, 1461, 1461);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) stack0);
      IteratorUtils.size(resettableListIterator0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[4];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("8 85n6}d|ou[.Y'O", "", 0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      String string0 = "org.apache.commons.collections4.functors.AbstractQuantifierPredicate";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("", "org.apache.commons.collections4.functors.AbstractQuantifierPredicate", 0, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      sQLIntegrityConstraintViolationException0.getSuppressed();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("|]@~?R$?7{!FC", "|]@~?R$?7{!FC", 0, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) properties0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      String string0 = " 7k3tH+s]=.^FO|Ngec";
      StringTokenizer stringTokenizer0 = new StringTokenizer(" 7k3tH+s]=.^FO|Ngec", "xW6^hN`pqK1P:");
      stringTokenizer0.nextToken();
      stringTokenizer0.hasMoreTokens();
      priorityQueue0.add(stringTokenizer0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer(" 7k3tH+s]=.^FO|Ngec", "xW6^hN`pqK1P:");
      stringTokenizer0.nextToken();
      stringTokenizer0.hasMoreTokens();
      priorityQueue0.add(stringTokenizer0);
      IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) priorityQueue0);
      MapIterator<SQLRecoverableException, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) mapIterator0, (Iterator<? extends SQLRecoverableException>) mapIterator0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      IteratorUtils.isEmpty(zippingIterator0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-1802);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Transformer must not be null", " 7k3tH+s]=.^FO|Ngec", intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(" 7k3tH+s]=.", "", (int[]) null, batchUpdateException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException((int[]) null, batchUpdateException0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException((int[]) null);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) objectArrayListIterator0, (long) (-1802));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer(" 7k3tH+s]=.^FO|Ngec", "xW6^hN`pqK1P:");
      stringTokenizer0.nextToken();
      stringTokenizer0.hasMoreTokens();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) priorityQueue0);
      EmptyMapIterator.emptyMapIterator();
      int int0 = 2626;
      DataTruncation dataTruncation0 = new DataTruncation(100, true, false, 2626, 2626);
      DataTruncation dataTruncation1 = new DataTruncation((-2315), false, true, (-1), 0, dataTruncation0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      dataTruncationArray0[0] = dataTruncation1;
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0, (-1477), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MapIterator<SQLWarning, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      String string0 = "(+#M~oXv";
      int[] intArray0 = new int[5];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("(+#M~oXv", clientInfoStatus0);
      IteratorUtils.singletonIterator((Object) mapIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("S%N0$E~l'VO1$vC0+");
      String string1 = "ppK";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("ppK", "3+(B/;b%1", (-3838), sQLRecoverableException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer(" 7k3tH+s]=.^FO|Ngec", "xW6^hN`pqK1P:");
      stringTokenizer0.nextToken();
      stringTokenizer0.hasMoreTokens();
      priorityQueue0.add(stringTokenizer0);
      IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) priorityQueue0);
      MapIterator<SQLRecoverableException, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) mapIterator0, (Iterator<? extends SQLRecoverableException>) mapIterator0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(" 7k3tH+s]=.", hashMap0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLClientInfoException0.forEach(consumer0);
      hashMap0.put((String) null, clientInfoStatus0);
      IteratorUtils.singletonIterator((Object) sQLClientInfoException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLClientInfoException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientException, Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Hashtable<Properties, SQLDataException> hashtable0 = new Hashtable<Properties, SQLDataException>();
      EntrySetMapIterator<Properties, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<Properties, SQLDataException>(hashtable0);
      entrySetMapIterator0.reset();
      IteratorUtils.toArray((Iterator<?>) entrySetMapIterator0);
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 5);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[0] = (Iterator<InstanceofPredicate>) resettableIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<InstanceofPredicate>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      int int0 = 66;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      DataTruncation dataTruncation0 = new DataTruncation(10, true, true, 66, (-1694), sQLClientInfoException0);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, true);
      String string0 = "vOmUMP";
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 9);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      iteratorArray0[0] = (Iterator<DataTruncation>) resettableIterator0;
      iteratorArray0[1] = (Iterator<DataTruncation>) singletonIterator0;
      iteratorArray0[2] = (Iterator<DataTruncation>) singletonIterator0;
      iteratorArray0[3] = (Iterator<DataTruncation>) singletonIterator0;
      iteratorArray0[4] = (Iterator<DataTruncation>) singletonIterator0;
      Iterator<DataTruncation> iterator0 = IteratorUtils.unmodifiableIterator(iteratorArray0[3]);
      iteratorArray0[5] = iterator0;
      iteratorArray0[7] = (Iterator<DataTruncation>) singletonIterator0;
      iteratorArray0[8] = (Iterator<DataTruncation>) singletonIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PriorityQueue<StringTokenizer> priorityQueue0 = new PriorityQueue<StringTokenizer>();
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<InstanceofPredicate> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
      IteratorUtils.size(zippingIterator0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(zippingIterator0);
      IteratorUtils.isEmpty(iterator0);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Comparator<SQLWarning> comparator0 = (Comparator<SQLWarning>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLWarning>[] iteratorArray0 = (Iterator<SQLWarning>[]) Array.newInstance(Iterator.class, 9);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<DataTruncation, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<DataTruncation, SQLInvalidAuthorizationSpecException>();
      EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException>(hashMap0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      predicateArray0[0] = (Predicate<Object>) comparatorPredicate0;
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[2] = predicate1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(":G%k:*\u0003[F{;\"MOd");
      ConstantFactory<SQLNonTransientConnectionException> constantFactory0 = new ConstantFactory<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      FactoryTransformer<Object, SQLNonTransientConnectionException> factoryTransformer0 = new FactoryTransformer<Object, SQLNonTransientConnectionException>(constantFactory0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(factoryTransformer0, predicateArray0[0]);
      predicateArray0[3] = (Predicate<Object>) transformedPredicate0;
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      predicateArray0[4] = (Predicate<Object>) nullIsExceptionPredicate0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[5] = (Predicate<Object>) uniquePredicate0;
      TransformedPredicate<Object> transformedPredicate1 = new TransformedPredicate<Object>(factoryTransformer0, uniquePredicate0);
      predicateArray0[6] = (Predicate<Object>) transformedPredicate1;
      Predicate<Object> predicate2 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.find((Iterator<DataTruncation>) entrySetMapIterator0, (Predicate<? super DataTruncation>) predicate2);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MapIterator<SQLException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLException>) mapIterator0);
      int int0 = (-759);
      DataTruncation dataTruncation0 = new DataTruncation((-759), false, false, 1708, 1708);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation0, 1708);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[8];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("mZKs5*");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode();
      iIOMetadataNodeArray0[7] = iIOMetadataNode7;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      int int0 = 3172;
      DataTruncation dataTruncation0 = new DataTruncation(3172, true, true, 3172, 3172);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(3172, true, true, 2626, 3172);
      dataTruncationArray0[1] = dataTruncation1;
      int int1 = (-1477);
      DataTruncation dataTruncation2 = new DataTruncation(0, false, false, (-1477), 2626, dataTruncation1);
      dataTruncationArray0[2] = dataTruncation2;
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0, 0, 0);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      vector0.add(dataTruncation1);
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(vector0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) objectArrayListIterator0, (Iterator<? extends DataTruncation>) objectArrayListIterator0, (Iterator<? extends DataTruncation>) loopingListIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) zippingIterator0, (long) 0, 2707L);
      StringTokenizer stringTokenizer0 = null;
      try {
        stringTokenizer0 = new StringTokenizer((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[8];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("ListIterator must not be null", "ListIterator must not be null");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("ListIterator must not be null");
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("ListIterator must not be null", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" b$J-5dl", "", 16, sQLFeatureNotSupportedException3);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException(sQLIntegrityConstraintViolationException0);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("g$1pRa(AMnxy", "4 \"&bj@W~<y<ZO3W\"m", 2094);
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException6;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException7 = new SQLFeatureNotSupportedException("", " b$J-5dl", (-1461), sQLFeatureNotSupportedException2);
      sQLFeatureNotSupportedExceptionArray0[7] = sQLFeatureNotSupportedException7;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      assertTrue(list0.contains(sQLFeatureNotSupportedException7));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLDataException>(orderedMapIterator0);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientConnectionException, ? extends SQLDataException>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        abstractOrderedMapIteratorDecorator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[7];
      DataTruncation dataTruncation0 = new DataTruncation((-2869), true, true, 0, (-2869));
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(0, true, false, (-2869), 0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-2869), false, true, (-2869), 2);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(0, true, false, (-3760), 56);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation((-3760), true, false, 2395, (-1752), dataTruncation0);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(100, true, false, 2395, 0);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(2395, false, true, (-1752), 3956);
      dataTruncationArray0[6] = dataTruncation6;
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) objectArrayIterator0, 0L, (long) (-1752));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      String string0 = "";
      iIOMetadataNode0.getAttributes();
      iIOMetadataNode0.getAttributeNode("");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[6];
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLDataException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("@|(dbk>q", "@|(dbk>q", sQLTransactionRollbackException2);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException((String) null, sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, (-699));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ArrayDeque<SQLRecoverableException> arrayDeque0 = new ArrayDeque<SQLRecoverableException>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      arrayDeque0.add(sQLRecoverableException0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) arrayDeque0);
      Enumeration<SQLRecoverableException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-2589), 378);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Iterator<Properties> iterator0 = null;
      int int0 = 2676;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1, 2676);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableIterator0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      TreeSet<Locale.Category>[] treeSetArray0 = (TreeSet<Locale.Category>[]) Array.newInstance(TreeSet.class, 3);
      TreeSet<Locale.Category> treeSet0 = new TreeSet<Locale.Category>();
      treeSetArray0[0] = treeSet0;
      TreeSet<Locale.Category> treeSet1 = new TreeSet<Locale.Category>();
      treeSetArray0[1] = treeSet1;
      TreeSet<Locale.Category> treeSet2 = new TreeSet<Locale.Category>();
      treeSetArray0[2] = treeSet2;
      int int0 = 1260;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(treeSetArray0, 1260);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Hashtable<SQLNonTransientConnectionException, SQLWarning> hashtable0 = new Hashtable<SQLNonTransientConnectionException, SQLWarning>();
      EntrySetMapIterator<SQLNonTransientConnectionException, SQLWarning> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, SQLWarning>(hashtable0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, SQLWarning>) entrySetMapIterator0);
      // Undeclared exception!
      try { 
        entrySetMapIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$EmptyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Parameter types must match the arguments", "kB", 1393, sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("ne", "f@%)SXM$D[y}E|/+c-", (-1165), sQLNonTransientException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLIntegrityConstraintViolationException1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", (String) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("0HI", "", hashtable0, sQLSyntaxErrorException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "", hashtable0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("", "", (-705), hashtable1, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException(hashtable1, sQLClientInfoException2);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, (-705));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.filteredIterator((Iterator<? extends SQLWarning>) orderedIterator0, (Predicate<? super SQLWarning>) uniquePredicate0);
      IteratorUtils.emptyOrderedIterator();
      boolean boolean0 = IteratorUtils.contains((Iterator<LinkedHashSet<ClientInfoStatus>>) null, (Object) uniquePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      int[] intArray0 = new int[7];
      intArray0[0] = 45;
      intArray0[1] = 0;
      intArray0[2] = 32;
      intArray0[3] = (-912);
      intArray0[4] = 0;
      intArray0[5] = (-388);
      intArray0[6] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("Criterion must not be null.", intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(list0);
      DefaultEquator<BatchUpdateException> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<BatchUpdateException> predicate0 = EqualPredicate.equalPredicate(batchUpdateException1, (Equator<BatchUpdateException>) defaultEquator0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<BatchUpdateException>) reverseListIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      assertTrue(reverseListIterator0.hasPrevious());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 4);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      classArray0[0] = class0;
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      classArray0[1] = class1;
      Class<SQLInvalidAuthorizationSpecException> class2 = SQLInvalidAuthorizationSpecException.class;
      classArray0[2] = class2;
      Class<SQLInvalidAuthorizationSpecException> class3 = SQLInvalidAuthorizationSpecException.class;
      classArray0[3] = class3;
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-388);
      intArray0[4] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("sUS>AY;@|p)RjlYWg@Y", intArray0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      batchUpdateExceptionArray0[0] = batchUpdateException1;
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      batchUpdateExceptionArray0[2] = batchUpdateException1;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(list0);
      DefaultEquator<BatchUpdateException> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<BatchUpdateException> predicate0 = EqualPredicate.equalPredicate(batchUpdateException1, (Equator<BatchUpdateException>) defaultEquator0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<BatchUpdateException>) resettableListIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashMap<DataTruncation, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<DataTruncation, SQLInvalidAuthorizationSpecException>();
      EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException>(hashMap0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      predicateArray0[0] = (Predicate<Object>) comparatorPredicate0;
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[2] = predicate1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(":G%k:*\u0003[F{;\"MOd");
      OrderedMapIterator<BatchUpdateException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) orderedMapIterator0);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      treeSet0.pollFirst();
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) treeSet0);
      MapIterator<SQLWarning, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLWarning, Object> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLWarning, ?>) mapIterator0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLWarning>) mapIterator1, (Object) sQLNonTransientConnectionException0);
      assertFalse(boolean0);
      
      String string0 = IteratorUtils.toString((Iterator<SQLException>) null);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ListIterator<ComparatorPredicate.Criterion> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<ComparatorPredicate.Criterion> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      IteratorUtils.unmodifiableIterator((Iterator<ComparatorPredicate.Criterion>) listIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) listIterator1, 1094);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) orderedIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      OrderedMapIterator<SQLTransientException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransientException, Integer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransientException, ? extends Integer>) orderedMapIterator0);
      IteratorUtils.contains((Iterator<SQLTransientException>) orderedMapIterator1, (Object) orderedMapIterator0);
      Iterator<SQLTransientException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLTransientException>) orderedMapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      int[] intArray0 = new int[7];
      intArray0[0] = 45;
      intArray0[1] = 0;
      intArray0[2] = 32;
      intArray0[3] = (-912);
      intArray0[4] = 0;
      intArray0[5] = (-388);
      intArray0[6] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("Criterion must not be null.", intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(list0);
      DefaultEquator<BatchUpdateException> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<BatchUpdateException> predicate0 = EqualPredicate.equalPredicate(batchUpdateException1, (Equator<BatchUpdateException>) defaultEquator0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<BatchUpdateException>) reverseListIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      assertFalse(resettableListIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      integerArray0[2] = integer2;
      int int1 = 0;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1360));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(318);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((int) integerArray0[6]);
      integerArray0[8] = integer8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, 318, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      OrderedMapIterator<Properties, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Properties>) orderedMapIterator0, (-556L), (-556L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 4);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      classArray0[0] = class0;
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      classArray0[1] = class1;
      Class<SQLInvalidAuthorizationSpecException> class2 = SQLInvalidAuthorizationSpecException.class;
      classArray0[2] = class2;
      Class<SQLInvalidAuthorizationSpecException> class3 = SQLInvalidAuthorizationSpecException.class;
      classArray0[3] = class3;
      ResettableListIterator<Class<SQLInvalidAuthorizationSpecException>> resettableListIterator0 = IteratorUtils.arrayListIterator(classArray0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      IteratorUtils.size(resettableListIterator0);
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      ResettableListIterator<Properties> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) resettableListIterator1, 100);
      vector0.removeAll(list0);
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(vector0);
      // Undeclared exception!
      try { 
        reverseListIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = "Mj5{]";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Mj5{]", (Throwable) null);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
