/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 04:27:02 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, SQLTransactionRollbackException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) arrayList0);
      LoopingIterator<SQLInvalidAuthorizationSpecException> loopingIterator0 = new LoopingIterator<SQLInvalidAuthorizationSpecException>(arrayList0);
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) loopingIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[4];
      ObjectArrayIterator<ClientInfoStatus> objectArrayIterator0 = new ObjectArrayIterator<ClientInfoStatus>(clientInfoStatusArray0);
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends ClientInfoStatus>) objectArrayIterator0);
      ZippingIterator<ClientInfoStatus> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends ClientInfoStatus>) objectArrayIterator0, (Iterator<? extends ClientInfoStatus>) iterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0);
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 3);
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      ReverseListIterator<SQLRecoverableException> reverseListIterator0 = new ReverseListIterator<SQLRecoverableException>(stack0);
      iteratorArray0[0] = (Iterator<SQLRecoverableException>) reverseListIterator0;
      iteratorArray0[1] = (Iterator<SQLRecoverableException>) reverseListIterator0;
      iteratorArray0[2] = (Iterator<SQLRecoverableException>) reverseListIterator0;
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MapIterator<ArrayDeque<Integer>, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<ArrayDeque<Integer>, SQLTimeoutException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ResettableListIterator<Integer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<Integer> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) resettableListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<SQLTransientException, String> hashMap0 = new HashMap<SQLTransientException, String>();
      Transformer<SQLTimeoutException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLTimeoutException, ? extends String>) hashMap0);
      String string0 = IteratorUtils.toString((Iterator<SQLTimeoutException>) null, (Transformer<? super SQLTimeoutException, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ResettableListIterator<Boolean> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      List<Boolean> list0 = IteratorUtils.toList((Iterator<? extends Boolean>) resettableListIterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) objectArrayListIterator0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      Class<SQLException> class0 = SQLException.class;
      SQLException[] sQLExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLException>) listIterator0, class0);
      assertEquals(0, sQLExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<StringTokenizer, HashSet<Boolean>> hashMap0 = new HashMap<StringTokenizer, HashSet<Boolean>>(3532);
      EntrySetMapIterator<StringTokenizer, HashSet<Boolean>> entrySetMapIterator0 = new EntrySetMapIterator<StringTokenizer, HashSet<Boolean>>(hashMap0);
      SkippingIterator<StringTokenizer> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<StringTokenizer>) entrySetMapIterator0, (long) 3532);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ListIterator<SQLTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientConnectionException>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", (String) null, (Throwable) null);
      arrayList0.add(sQLSyntaxErrorException0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) arrayList0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLSyntaxErrorException>) resettableListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[7];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationExceptionArray0[0];
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0, 1);
      assertNull(sQLIntegrityConstraintViolationException1.getMessage());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 1);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) resettableIterator0;
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>) iteratorArray0[0], (Iterator<? extends BatchUpdateException>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 5);
      MapIterator<String, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[1] = (Iterator<String>) mapIterator0;
      BoundedIterator<String> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends String>) iteratorArray0[1], 0L, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[0];
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLWarningArray0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[6];
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, 2);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<ClientInfoStatus>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedList<SQLTransactionRollbackException>[] linkedListArray0 = (LinkedList<SQLTransactionRollbackException>[]) Array.newInstance(LinkedList.class, 1);
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      linkedListArray0[0] = linkedList0;
      ResettableListIterator<LinkedList<SQLTransactionRollbackException>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedListArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<LinkedList<SQLTransactionRollbackException>>) resettableListIterator0, (Transformer<? super LinkedList<SQLTransactionRollbackException>, String>) transformer0, "", "org.apache.commons.collections4.iterators.CollatingIterator", "org.apache.commons.collections4.iterators.CollatingIterator");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.util.LinkedList' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Y-/3[GzRNJ|WO", "Y-/3[GzRNJ|WO", 3199);
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 5);
      InvokerTransformer<Object, SQLSyntaxErrorException> invokerTransformer0 = new InvokerTransformer<Object, SQLSyntaxErrorException>("Y-/3[GzRNJ|WO", classArray0, classArray0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) iterator0, 3199);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Y-/3[GzRNJ|WO' on 'class java.sql.SQLSyntaxErrorException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      LoopingListIterator<SQLSyntaxErrorException> loopingListIterator0 = new LoopingListIterator<SQLSyntaxErrorException>(arrayList0);
      arrayList0.add((SQLSyntaxErrorException) null);
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) loopingListIterator0, class0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      ObjectArrayIterator<SQLException> objectArrayIterator0 = new ObjectArrayIterator<SQLException>(sQLInvalidAuthorizationSpecExceptionArray0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLException>) objectArrayIterator0, (Predicate<? super SQLException>) predicate1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input Object must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(arrayList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Iterator<SQLException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLException>) loopingListIterator0, (Predicate<? super SQLException>) uniquePredicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      arrayList0.add(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLException>) uniquePredicate0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[5];
      ObjectArrayIterator<SQLException> objectArrayIterator0 = new ObjectArrayIterator<SQLException>(sQLExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      OrPredicate<SQLException> orPredicate0 = new OrPredicate<SQLException>(nonePredicate0, predicateArray0[1]);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLException>) objectArrayIterator0, (Predicate<? super SQLException>) orPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NonePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[7];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      ObjectArrayIterator<Locale.FilteringMode> objectArrayIterator0 = new ObjectArrayIterator<Locale.FilteringMode>(locale_FilteringModeArray0);
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 1);
      InvokerTransformer<Object, SQLIntegrityConstraintViolationException> invokerTransformer0 = new InvokerTransformer<Object, SQLIntegrityConstraintViolationException>("", classArray0, locale_FilteringModeArray0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Locale.FilteringMode>) objectArrayIterator0, (Transformer<? super Locale.FilteringMode, ? extends SQLIntegrityConstraintViolationException>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.util.Locale$FilteringMode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Stack<SQLIntegrityConstraintViolationException> stack0 = new Stack<SQLIntegrityConstraintViolationException>();
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator0 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(stack0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("DJOSl>?1KH=", "6Yvs@IVinlGiZN_}q");
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLRecoverableException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("DJOSl>?1KH=", (String) null, (-1), sQLTransientException0);
      stack0.push(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) loopingListIterator0, 12);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<IIOMetadataNode>) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(arrayList0);
      SQLDataException sQLDataException0 = new SQLDataException();
      arrayList0.add(sQLDataException0);
      Predicate<SQLNonTransientException> predicate0 = UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLDataException>) loopingIterator0, (Predicate<? super SQLDataException>) predicate0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 5);
      Comparator<SQLTimeoutException> comparator0 = (Comparator<SQLTimeoutException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Comparator<SQLIntegrityConstraintViolationException> comparator0 = (Comparator<SQLIntegrityConstraintViolationException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Locale.LanguageRange>) null, (Iterator<? extends Locale.LanguageRange>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Boolean[]) null, 1466, 1466);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLIntegrityConstraintViolationException[]) null, (-2055));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[4];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 1534);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Iterator<SQLTimeoutException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("null values not allowed", (Map<String, ClientInfoStatus>) null);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLClientInfoException0);
      predicateArray0[0] = (Predicate<Object>) identityPredicate0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) predicateArray0[0], 3, 123);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) arrayList0);
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) zippingIterator0, 1073741824);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLException[]) null, 100, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[3];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object[]) sQLIntegrityConstraintViolationExceptionArray0, 1, (-659));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[5];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(locale_FilteringModeArray0, 0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((String[]) null, (-1463));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLIntegrityConstraintViolationException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1892, 1892);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(0, 270);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("1kKz\u0001g", "List must not be null");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("\"}O", "Collection must not be null", 270, hashMap0, sQLRecoverableException0);
      DataTruncation dataTruncation0 = new DataTruncation(270, false, false, 270, 270, sQLClientInfoException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0, 270);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MapIterator<SQLNonTransientException, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("G1 ~whC");
      String string0 = IteratorUtils.toString((Iterator<SQLNonTransientException>) mapIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator((SQLRecoverableException) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) resettableIterator0, (Transformer<? super SQLRecoverableException, String>) null, "iterator", "org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.map.Flat3Map$EntryIterator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[5];
      ObjectArrayIterator<SQLException> objectArrayIterator0 = new ObjectArrayIterator<SQLException>(sQLExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      predicateArray0[0] = predicate0;
      Object object0 = new Object();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(object0);
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      predicateArray0[2] = predicate1;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      OrPredicate<SQLException> orPredicate0 = new OrPredicate<SQLException>(nonePredicate0, predicateArray0[1]);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLException>) objectArrayIterator0, (Predicate<? super SQLException>) orPredicate0);
      assertFalse(objectArrayIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "Jv=~A{3#by*(Y\":.@(", (-2697));
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLNonTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("nu&Qz2)PD^k]J", "transformer may not be null", (-829), batchUpdateException0);
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLIntegrityConstraintViolationException0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLException>) singletonIterator0, (Predicate<? super SQLException>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[6];
      ObjectArrayIterator<Locale.FilteringMode> objectArrayIterator0 = new ObjectArrayIterator<Locale.FilteringMode>(locale_FilteringModeArray0);
      List<Locale.FilteringMode> list0 = IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) objectArrayIterator0, 5);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIteratorWrapper<SQLRecoverableException> listIteratorWrapper0 = new ListIteratorWrapper<SQLRecoverableException>(resettableIterator0);
      List<SQLRecoverableException> list0 = IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) listIteratorWrapper0, 2007);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) null, (-962));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) null, (-1L), 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[4];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionExceptionArray0[0];
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionExceptionArray0[0];
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionExceptionArray0[0];
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      String string0 = IteratorUtils.toString((Iterator<SQLTransientConnectionException>) objectArrayListIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "5!Zac", "set() is not supported", "");
      assertEquals("set() is not supportednull5!Zacnull5!Zacnull5!Zacnull", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("org.apache.commons.collections4.map.AbstractMapDecorator");
      String string0 = IteratorUtils.toString((Iterator<SQLNonTransientException>) null, (Transformer<? super SQLNonTransientException, String>) transformer0, "G|UbM", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer(", ");
      OrderedMapIterator<SQLNonTransientException, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientException>) orderedMapIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0, "", "s", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MapIterator<SQLNonTransientException, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("G1 ~whC");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientException>) mapIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0, "G1 ~whC", (String) null, "org.apache.commons.collections4.functors.NotNullPredicate");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MapIterator<SQLNonTransientException, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("G1 ~whC");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientException>) mapIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0, (String) null, "G1 ~whC", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Closure<Predicate<Object>>[] closureArray0 = (Closure<Predicate<Object>>[]) Array.newInstance(Closure.class, 1);
      ObjectArrayIterator<Closure<Predicate<Object>>> objectArrayIterator0 = new ObjectArrayIterator<Closure<Predicate<Object>>>(closureArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Closure<Predicate<Object>>>) objectArrayIterator0, (Transformer<? super Closure<Predicate<Object>>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>((BatchUpdateException) null, false);
      int int0 = IteratorUtils.size(singletonIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[3];
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0, 1);
      assertNull(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[7];
      ObjectArrayIterator<Locale.FilteringMode> objectArrayIterator0 = new ObjectArrayIterator<Locale.FilteringMode>(locale_FilteringModeArray0);
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 1);
      InvokerTransformer<Object, SQLIntegrityConstraintViolationException> invokerTransformer0 = new InvokerTransformer<Object, SQLIntegrityConstraintViolationException>("", classArray0, locale_FilteringModeArray0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Locale.FilteringMode>) objectArrayIterator0, (Transformer<? super Locale.FilteringMode, ? extends SQLIntegrityConstraintViolationException>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 3
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[2];
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLExceptionArray0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableListIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, Locale.FilteringMode> mapIterator0 = IteratorUtils.emptyMapIterator();
      boolean boolean0 = IteratorUtils.isEmpty(mapIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      Transformer<Object, SQLTimeoutException> transformer0 = ConstantTransformer.nullTransformer();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[1];
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLWarningArray0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLWarning>) resettableListIterator0, (Predicate<? super SQLWarning>) transformedPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Transformer<Object, SQLTimeoutException> transformer0 = ConstantTransformer.nullTransformer();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, uniquePredicate0);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[1];
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLWarningArray0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLWarning>) resettableListIterator0, (Predicate<? super SQLWarning>) transformedPredicate0);
      assertFalse(resettableListIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MapIterator<String, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<String>) mapIterator0, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      Predicate<SQLWarning> predicate1 = NotPredicate.notPredicate((Predicate<? super SQLWarning>) predicate0);
      NullIsTruePredicate<SQLWarning> nullIsTruePredicate0 = new NullIsTruePredicate<SQLWarning>(predicate1);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLWarning>) null, (Predicate<? super SQLWarning>) nullIsTruePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLFeatureNotSupportedException>) objectArrayIterator0, (Object) sQLFeatureNotSupportedExceptionArray0[1]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Predicate<SQLNonTransientException> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLNonTransientException>>) treeSet0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OrderedIterator<SQLException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLException>) orderedIterator0, (Predicate<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null);
      SQLWarning sQLWarning0 = new SQLWarning(sQLNonTransientException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.sql.SQLException.class) , any(java.sql.SQLException.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) sQLWarning0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null);
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) singletonListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      assertNotNull(sQLFeatureNotSupportedException1);
      assertFalse(singletonListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      OrderedIterator<SQLDataException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLDataException>) orderedIterator0, (Predicate<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(listIterator0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(identityPredicate0);
      HashSet<Closure<Object>> hashSet0 = IteratorUtils.find((Iterator<HashSet<Closure<Object>>>) null, (Predicate<? super HashSet<Closure<Object>>>) nullIsExceptionPredicate0);
      assertNull(hashSet0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[8];
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 5);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      closureArray0[0] = closure0;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(onePredicate0, closure0, false);
      closureArray0[1] = (Closure<Object>) whileClosure0;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      closureArray0[2] = (Closure<Object>) chainedClosure0;
      closureArray0[3] = (Closure<Object>) whileClosure0;
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(onePredicate0, whileClosure0);
      closureArray0[4] = (Closure<Object>) ifClosure0;
      Closure<String> closure1 = ChainedClosure.chainedClosure((Closure<? super String>[]) closureArray0);
      ForClosure<String> forClosure0 = new ForClosure<String>((-1173), closure1);
      IteratorUtils.apply((Iterator<String>) objectArrayIterator0, (Closure<? super String>) forClosure0);
      assertFalse(objectArrayIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Transformer<Object, Locale.FilteringMode> transformer0 = ConstantTransformer.nullTransformer();
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<SQLWarning>) null, (Closure<? super SQLWarning>) closure0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MapIterator<Boolean, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<Boolean, SQLWarning> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Boolean, ? extends SQLWarning>) mapIterator0);
      AbstractMapIteratorDecorator<Boolean, SQLWarning> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Boolean, SQLWarning>(mapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Boolean>) abstractMapIteratorDecorator0, (Closure<? super Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-156), false, false, 0, (-156));
      Iterator<?> iterator0 = IteratorUtils.getIterator(dataTruncation0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OrderedMapIterator<Integer, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, Locale.FilteringMode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends StringTokenizer>) orderedMapIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Integer>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>((SQLTransactionRollbackException) null, true);
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) singletonIterator0, class0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      LoopingListIterator<SQLSyntaxErrorException> loopingListIterator0 = new LoopingListIterator<SQLSyntaxErrorException>(arrayList0);
      Iterable<SQLSyntaxErrorException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLSyntaxErrorException>) loopingListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(arrayList0);
      Iterable<SQLFeatureNotSupportedException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLFeatureNotSupportedException>) loopingListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("%j^w_Ahm7Z-*K%}rB&");
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<?>) stringTokenizer0, (Collection<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) null, (Collection<? super InstanceofPredicate>) treeSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 7);
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) resettableListIterator0;
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) iteratorArray0[0]);
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) priorityQueue0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[3];
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TreeSet<SQLTimeoutException> treeSet0 = new TreeSet<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) treeSet0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      LoopingListIterator<SQLSyntaxErrorException> loopingListIterator0 = new LoopingListIterator<SQLSyntaxErrorException>(arrayList0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("aBKdXkl{[");
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLTransientConnectionException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLSyntaxErrorException>) loopingListIterator0, (Predicate<? super SQLSyntaxErrorException>) equalPredicate0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      Predicate<SQLNonTransientException> predicate1 = AndPredicate.andPredicate((Predicate<? super SQLNonTransientException>) predicate0, (Predicate<? super SQLNonTransientException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) predicate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("m Mcx8iW<:v#MwtU,T,", "m Mcx8iW<:v#MwtU,T,");
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLSyntaxErrorException>) singletonListIterator0, (Predicate<? super SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayDeque0, locale_FilteringMode0);
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(list0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends String>) loopingListIterator0, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLException>) null, (Predicate<? super SQLException>) instanceofPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Factory<BatchUpdateException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, BatchUpdateException> factoryTransformer0 = new FactoryTransformer<Object, BatchUpdateException>(factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Integer>) null, (Transformer<? super Integer, ? extends BatchUpdateException>) factoryTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("m Mcx8iW<:v#MwtU,T,", "m Mcx8iW<:v#MwtU,T,");
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) singletonListIterator0, (Iterator<? extends SQLSyntaxErrorException>) singletonListIterator0, (Iterator<? extends SQLSyntaxErrorException>) singletonListIterator0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) zippingIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.FluentIterable");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.FluentIterable", "org.apache.commons.collections4.FluentIterable", 2309, sQLRecoverableException0);
      Transformer<SQLNonTransientException, SQLFeatureNotSupportedException> transformer0 = InvokerTransformer.invokerTransformer("vP'''h{");
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'vP'''h{' on 'class java.sql.SQLFeatureNotSupportedException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 7);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator(iteratorArray0[0], 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "P43d", 616, (Throwable) null);
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      Transformer<SQLIntegrityConstraintViolationException, String> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) singletonListIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLIntegrityConstraintViolationException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0, 10, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, (-4007));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      Object[] objectArray0 = IteratorUtils.toArray(iterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLIntegrityConstraintViolationException, SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MapIterator<ArrayList<Iterator<SQLTimeoutException>>, EnumSet<Locale.FilteringMode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<ArrayList<Iterator<SQLTimeoutException>>> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<ArrayList<Iterator<SQLTimeoutException>>>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, (-534), 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[3];
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, 1, 1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Integer integer0 = new Integer(387);
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<Integer> iterator0 = IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Integer>) iterator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Ao4,qO=");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLRecoverableException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ResettableListIterator<Integer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      BoundedIterator<Integer> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Integer>) resettableListIterator0, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) boundedIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) predicateArray0[0], 3, 123);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[1];
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0, 1);
      ZippingIterator<InstanceofPredicate> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>) resettableListIterator0, (Iterator<? extends InstanceofPredicate>) resettableListIterator0);
      String string0 = IteratorUtils.toString((Iterator<InstanceofPredicate>) zippingIterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "s0~U]1aAp;)p/");
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLFeatureNotSupportedException>) objectArrayIterator0, (Object) sQLFeatureNotSupportedException0);
      assertFalse(objectArrayIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1992);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("");
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<String> predicate1 = AndPredicate.andPredicate((Predicate<? super String>) predicate0, (Predicate<? super String>) predicate0);
      IteratorUtils.find((Iterator<String>) listIterator0, (Predicate<? super String>) predicate1);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      OrderedMapIterator<Integer, ClientInfoStatus> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Integer>) orderedMapIterator0, (Transformer<? super Integer, ? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 651);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
