/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 04:26:54 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[6];
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTimeoutException>) resettableIterator0, 34);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 28
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) vector0);
      Iterator<SQLTimeoutException> iterator0 = EmptyIterator.emptyIterator();
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) iterator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(stack0);
      LoopingListIterator<SQLTimeoutException> loopingListIterator1 = new LoopingListIterator<SQLTimeoutException>(stack0);
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) loopingListIterator1, (Iterator<? extends SQLTimeoutException>) loopingListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ListIterator<SQLNonTransientException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<SQLNonTransientException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(listIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) objectArrayIterator0, 3776);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Transformer<SQLException, SQLClientInfoException> transformer0 = ExceptionTransformer.exceptionTransformer();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLClientInfoException>) transformer0);
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) iterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Aee)\"h[", ")P#I7e", 1756);
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      BoundedIterator<SQLIntegrityConstraintViolationException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonIterator0, 0L, 417L);
      SQLException[] sQLExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLException>) boundedIterator0, class0);
      assertFalse(singletonIterator0.hasNext());
      assertEquals(1, sQLExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[3];
      ObjectArrayIterator<SQLTransactionRollbackException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) objectArrayIterator0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) arrayList0);
      SkippingIterator<SQLTimeoutException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLTimeoutException>) resettableIterator0, 0L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<SQLTransientException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientException>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("=ct^SZwMu", "=ct^SZwMu");
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException1 = IteratorUtils.get((Iterator<SQLTimeoutException>) singletonIterator0, 0);
      assertEquals("java.sql.SQLTimeoutException: =ct^SZwMu", sQLTimeoutException1.toString());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ArrayList<SQLNonTransientException> arrayList0 = new ArrayList<SQLNonTransientException>();
      ArrayList<SQLNonTransientException>[] arrayListArray0 = (ArrayList<SQLNonTransientException>[]) Array.newInstance(ArrayList.class, 4);
      arrayListArray0[0] = arrayList0;
      ObjectArrayIterator<ArrayList<SQLNonTransientException>> objectArrayIterator0 = new ObjectArrayIterator<ArrayList<SQLNonTransientException>>(arrayListArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<ArrayList<SQLNonTransientException>>) objectArrayIterator0, (Object) arrayList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 0);
      Iterator<String> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MapIterator<BatchUpdateException, Hashtable<Properties, Iterator<DataTruncation>>> mapIterator0 = IteratorUtils.emptyMapIterator();
      BoundedIterator<Object> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<?>) mapIterator0, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 8);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[0];
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[3];
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.arrayIterator(stringTokenizerArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[1];
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.arrayIterator(stringTokenizerArray0, 1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTimeoutException, Closure<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLTimeoutException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<InstanceofPredicate>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ArrayList<Vector<DataTruncation>> arrayList0 = new ArrayList<Vector<DataTruncation>>();
      LoopingListIterator<Vector<DataTruncation>> loopingListIterator0 = new LoopingListIterator<Vector<DataTruncation>>(arrayList0);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      arrayList0.add(vector0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("8vGZ!T");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Vector<DataTruncation>>) loopingListIterator0, (Transformer<? super Vector<DataTruncation>, String>) constantTransformer0, "", "Predicate must not be null", "8vGZ!T");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>((Factory<? extends String>) null);
      HashMap<SQLTransactionRollbackException, SQLClientInfoException>[] hashMapArray0 = (HashMap<SQLTransactionRollbackException, SQLClientInfoException>[]) Array.newInstance(HashMap.class, 4);
      ResettableIterator<HashMap<SQLTransactionRollbackException, SQLClientInfoException>> resettableIterator0 = IteratorUtils.arrayIterator(hashMapArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<HashMap<SQLTransactionRollbackException, SQLClientInfoException>>) resettableIterator0, (Transformer<? super HashMap<SQLTransactionRollbackException, SQLClientInfoException>, String>) factoryTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ArrayList<Properties>[] arrayListArray0 = (ArrayList<Properties>[]) Array.newInstance(ArrayList.class, 4);
      ObjectArrayIterator<ArrayList<Properties>> objectArrayIterator0 = new ObjectArrayIterator<ArrayList<Properties>>(arrayListArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ArrayList<Properties>>) objectArrayIterator0, (Transformer<? super ArrayList<Properties>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashSet<SQLFeatureNotSupportedException> hashSet0 = new HashSet<SQLFeatureNotSupportedException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(")5#ZsrN)Bj6~#p");
      hashSet0.add(sQLFeatureNotSupportedException0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) hashSet0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("$u1bt }oQ_7>\u0003)~V$(", "", 3);
      UniquePredicate<SQLNonTransientException> uniquePredicate0 = new UniquePredicate<SQLNonTransientException>();
      Factory<SQLInvalidAuthorizationSpecException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, SQLInvalidAuthorizationSpecException> factoryTransformer0 = new FactoryTransformer<Object, SQLInvalidAuthorizationSpecException>(factory0);
      Transformer<SQLNonTransientException, SQLInvalidAuthorizationSpecException> transformer0 = IfTransformer.ifTransformer((Predicate<? super SQLNonTransientException>) uniquePredicate0, (Transformer<? super SQLNonTransientException, ? extends SQLInvalidAuthorizationSpecException>) factoryTransformer0, (Transformer<? super SQLNonTransientException, ? extends SQLInvalidAuthorizationSpecException>) factoryTransformer0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) iterator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("msUG'h0e7", (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, sQLIntegrityConstraintViolationException0);
      arrayList0.add(sQLNonTransientConnectionException0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) arrayList0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/Ce;)_iD", "/Ce;)_iD", (-1983));
      arrayList0.add(sQLTransactionRollbackException0);
      LoopingIterator<Object> loopingIterator0 = new LoopingIterator<Object>(arrayList0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[5];
      int[] intArray0 = new int[0];
      SQLWarning sQLWarning0 = new SQLWarning("W8!Nkt{Bz", ";zxoGNN{Mz3mzR;}O");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLWarning0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 6);
      InvokerTransformer<Object, SQLNonTransientConnectionException> invokerTransformer0 = new InvokerTransformer<Object, SQLNonTransientConnectionException>("NodeList must not be null", classArray0, batchUpdateExceptionArray0);
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>(invokerTransformer0, (Predicate<? super SQLException>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<BatchUpdateException>) resettableListIterator0, (Predicate<? super BatchUpdateException>) transformedPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'NodeList must not be null' on 'class java.sql.BatchUpdateException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<DataTruncation>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) arrayList0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("The prototype must be cloneable via a public clone method", "The prototype must be cloneable via a public clone method");
      arrayList0.add(sQLTimeoutException0);
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLTimeoutException>) resettableIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Comparator<SQLInvalidAuthorizationSpecException> comparator0 = (Comparator<SQLInvalidAuthorizationSpecException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 6);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0, 2849L, (-598L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTimeoutException[]) null, 2029, 813);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[9];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 5, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[6];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, (-197), (-384));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Vector<DataTruncation>[]) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Vector<DataTruncation>[] vectorArray0 = (Vector<DataTruncation>[]) Array.newInstance(Vector.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(vectorArray0, 3776);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLDataException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 34, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.ComparatorPredicate");
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Vector<Integer>[]) null, 100, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[5];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(locale_CategoryArray0, 1757, 2371);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(batchUpdateExceptionArray0, (-326));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTimeoutException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableIterator0, 33, 34);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-3080));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Vector<DataTruncation>[] vectorArray0 = (Vector<DataTruncation>[]) Array.newInstance(Vector.class, 9);
      ResettableListIterator<Vector<DataTruncation>> resettableListIterator0 = IteratorUtils.arrayListIterator(vectorArray0, 3);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("");
      String string0 = IteratorUtils.toString((Iterator<Vector<DataTruncation>>) resettableListIterator0, (Transformer<? super Vector<DataTruncation>, String>) transformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Vector<DataTruncation>[] vectorArray0 = (Vector<DataTruncation>[]) Array.newInstance(Vector.class, 3);
      ResettableListIterator<Vector<DataTruncation>> resettableListIterator0 = IteratorUtils.arrayListIterator(vectorArray0, 1);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer(" VTvX&WG");
      String string0 = IteratorUtils.toString((Iterator<Vector<DataTruncation>>) resettableListIterator0, (Transformer<? super Vector<DataTruncation>, String>) transformer0, " VTvX&WG", "Cannot store a duplicate value (\"", "");
      assertEquals("Cannot store a duplicate value (\" VTvX&WG VTvX&WG VTvX&WG", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(class0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Object>) singletonIterator0, (Predicate<? super Object>) predicate0);
      assertFalse(singletonIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      stack0.setSize(128);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) stack0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, 9);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      ResettableIterator<LinkedList<SQLNonTransientConnectionException>> resettableIterator0 = IteratorUtils.singletonIterator(linkedList0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ResettableListIterator<HashMap<SQLTransactionRollbackException, SQLClientInfoException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>((Factory<? extends String>) null);
      String string0 = IteratorUtils.toString((Iterator<HashMap<SQLTransactionRollbackException, SQLClientInfoException>>) resettableListIterator0, (Transformer<? super HashMap<SQLTransactionRollbackException, SQLClientInfoException>, String>) factoryTransformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[9];
      ObjectArrayListIterator<SQLException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLException>(sQLExceptionArray0);
      String string0 = IteratorUtils.toString((Iterator<SQLException>) objectArrayListIterator0);
      assertEquals(8, objectArrayListIterator0.previousIndex());
      assertEquals("[null, null, null, null, null, null, null, null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer(".vx(zO");
      String string0 = IteratorUtils.toString((Iterator<SQLClientInfoException>) null, (Transformer<? super SQLClientInfoException, String>) transformer0, "@5E7P:", "delimiter may not be null", "9");
      assertEquals("delimiter may not be null9", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Vector<DataTruncation>[] vectorArray0 = (Vector<DataTruncation>[]) Array.newInstance(Vector.class, 2);
      ResettableListIterator<Vector<DataTruncation>> resettableListIterator0 = IteratorUtils.arrayListIterator(vectorArray0, 1);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer(" VTvX&WG");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Vector<DataTruncation>>) resettableListIterator0, (Transformer<? super Vector<DataTruncation>, String>) transformer0, " VTvX&WG", "CK", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Vector<DataTruncation>[] vectorArray0 = (Vector<DataTruncation>[]) Array.newInstance(Vector.class, 9);
      ResettableListIterator<Vector<DataTruncation>> resettableListIterator0 = IteratorUtils.arrayListIterator(vectorArray0, 3);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, transformer0, transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Vector<DataTruncation>>) resettableListIterator0, (Transformer<? super Vector<DataTruncation>, String>) ifTransformer0, "", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      SingletonListIterator<Vector<DataTruncation>> singletonListIterator0 = new SingletonListIterator<Vector<DataTruncation>>(stack0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>((String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Vector<DataTruncation>>) singletonListIterator0, (Transformer<? super Vector<DataTruncation>, String>) constantTransformer0, (String) null, "~zLN}ed", "~zLN}ed");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Vector<DataTruncation>>) null, (Transformer<? super Vector<DataTruncation>, String>) null, ")I$D^HNi<{Z%2w", "\"yE8:YG6[qijs", ")I$D^HNi<{Z%2w");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[1];
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Stack<SQLWarning> stack0 = new Stack<SQLWarning>();
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLWarning>) stack0);
      SQLWarning sQLWarning0 = new SQLWarning("q", "VO@jk1ust@");
      stack0.add(sQLWarning0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLWarning>) resettableListIterator0, 364);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>((SQLTimeoutException) null);
      SQLTimeoutException sQLTimeoutException0 = IteratorUtils.get((Iterator<SQLTimeoutException>) singletonIterator0, 0);
      assertNull(sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("");
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "");
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      ListIteratorWrapper<SQLIntegrityConstraintViolationException> listIteratorWrapper0 = new ListIteratorWrapper<SQLIntegrityConstraintViolationException>(singletonListIterator0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) listIteratorWrapper0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<SQLException> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLException>>) stack0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) null, (Predicate<? super SQLTransientConnectionException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) null, (Predicate<? super SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Transformer<SQLException, SQLClientInfoException> transformer0 = ExceptionTransformer.exceptionTransformer();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLClientInfoException>) transformer0);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(iterator0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Object>) singletonIterator0, (Predicate<? super Object>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Object>) null, (Predicate<? super Object>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OrderedIterator<Object> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Object>) orderedIterator0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) listIterator0, (Iterator<? extends SQLTimeoutException>) listIterator0);
      Comparator<SQLTransientException> comparator0 = (Comparator<SQLTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.sql.SQLTransientException.class) , any(java.sql.SQLTransientException.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<SQLTransientException> comparatorPredicate0 = new ComparatorPredicate<SQLTransientException>(sQLTimeoutException0, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.find((Iterator<SQLTimeoutException>) zippingIterator0, (Predicate<? super SQLTimeoutException>) comparatorPredicate0);
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) listIterator0, (Iterator<? extends SQLTimeoutException>) listIterator0);
      Comparator<SQLTransientException> comparator0 = (Comparator<SQLTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1016)).when(comparator0).compare(any(java.sql.SQLTransientException.class) , any(java.sql.SQLTransientException.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<SQLTransientException> comparatorPredicate0 = new ComparatorPredicate<SQLTransientException>(sQLTimeoutException0, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.find((Iterator<SQLTimeoutException>) zippingIterator0, (Predicate<? super SQLTimeoutException>) comparatorPredicate0);
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLTimeoutException sQLTimeoutException0 = IteratorUtils.find((Iterator<SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) uniquePredicate0);
      assertNull(sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[1];
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Properties>) objectArrayListIterator0, (Predicate<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Integer integer0 = new Integer(0);
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("Transformer must not be null");
      Iterator<Integer> iterator0 = IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.find(iterator0, (Predicate<? super Integer>) uniquePredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Transformer must not be null' on 'class java.lang.Integer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      IteratorUtils.apply((Iterator<Vector<LinkedHashSet>>) null, (Closure<? super Vector<LinkedHashSet>>) closure0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Node must not be null");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("52");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      OrderedIterator<InstanceofPredicate> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) orderedIterator0, (-1437));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) null, 947);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<SQLException> class0 = SQLException.class;
      SQLException[] sQLExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLException>) resettableIterator0, class0);
      assertEquals(0, sQLExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      LoopingIterator<Object> loopingIterator0 = new LoopingIterator<Object>(arrayList0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) loopingIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) orderedMapIterator0);
      ListIteratorWrapper<SQLClientInfoException> listIteratorWrapper0 = new ListIteratorWrapper<SQLClientInfoException>(listIterator0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) listIteratorWrapper0, (Iterator<? extends SQLClientInfoException>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[3];
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.arrayIterator(locale_CategoryArray0);
      Iterable<Locale.Category> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends Locale.Category>) resettableIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) arrayList0);
      Iterable<SQLTimeoutException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.Category>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      Enumeration<SQLRecoverableException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) resettableIterator0);
      LinkedHashSet<SQLRecoverableException> linkedHashSet0 = new LinkedHashSet<SQLRecoverableException>();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) enumeration0, (Collection<? super SQLRecoverableException>) linkedHashSet0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) null, (Collection<? super SQLRecoverableException>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ArrayList<Properties> arrayList0 = new ArrayList<Properties>();
      LoopingIterator<Properties> loopingIterator0 = new LoopingIterator<Properties>(arrayList0);
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) loopingIterator0);
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("3$Qh");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) stack0);
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, 9);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLSyntaxErrorException>) resettableListIterator0, (Predicate<? super SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) null, (Predicate<? super SQLTransactionRollbackException>) predicateArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("96uRT1c", "96uRT1c");
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTransientConnectionException0);
      OrPredicate<BatchUpdateException> orPredicate0 = new OrPredicate<BatchUpdateException>(equalPredicate0, equalPredicate0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) resettableListIterator0, (Predicate<? super BatchUpdateException>) orPredicate0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) listIterator0, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.constantTransformer((DataTruncation) null);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<SQLException> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) uniquePredicate0);
      TransformedPredicate<SQLWarning> transformedPredicate0 = new TransformedPredicate<SQLWarning>(transformer0, predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLWarning>) null, (Predicate<? super SQLWarning>) transformedPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) listIterator0, (Predicate<? super BatchUpdateException>) uniquePredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Properties>) resettableListIterator0, (Transformer<? super Properties, ? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("=ct^SZw8u");
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Properties>) null, (Transformer<? super Properties, ? extends SQLNonTransientConnectionException>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MapIterator<SQLRecoverableException, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      FactoryTransformer<Object, SQLFeatureNotSupportedException> factoryTransformer0 = new FactoryTransformer<Object, SQLFeatureNotSupportedException>((Factory<? extends SQLFeatureNotSupportedException>) null);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLRecoverableException>) mapIterator0, (Transformer<? super SQLRecoverableException, ? extends SQLFeatureNotSupportedException>) factoryTransformer0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ZippingIterator<SQLIntegrityConstraintViolationException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) zippingIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) objectArrayIterator0);
      assertFalse(objectArrayIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLTimeoutException>) resettableIterator0, (-1375L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[1];
      ObjectArrayIterator<Properties> objectArrayIterator0 = new ObjectArrayIterator<Properties>(propertiesArray0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Properties>) objectArrayIterator0, (Transformer<? super Properties, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1542, 89);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((IIOMetadataNode[]) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, Integer> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, Integer>) orderedMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[1];
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ResettableListIterator<Integer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Integer>) null, (Iterator<? extends Integer>) resettableListIterator0, (Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, 0, (-2939));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Transformer<Object, Locale.Category> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<Locale.Category> iterator0 = IteratorUtils.objectGraphIterator(locale_Category0, (Transformer<? super Locale.Category, ? extends Locale.Category>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("=ct^SZwMu", "=ct^SZwMu");
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLException>) singletonIterator0, (-1722L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends Properties>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) batchUpdateException0, (-2006), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ArrayList<SQLNonTransientException> arrayList0 = new ArrayList<SQLNonTransientException>();
      ArrayList<SQLNonTransientException>[] arrayListArray0 = (ArrayList<SQLNonTransientException>[]) Array.newInstance(ArrayList.class, 4);
      ObjectArrayIterator<ArrayList<SQLNonTransientException>> objectArrayIterator0 = new ObjectArrayIterator<ArrayList<SQLNonTransientException>>(arrayListArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<ArrayList<SQLNonTransientException>>) objectArrayIterator0, (Object) arrayList0);
      assertFalse(objectArrayIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 356);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Properties properties0 = new Properties();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Properties>) listIterator0, (Predicate<? super Properties>) predicate0);
      assertFalse(listIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      BoundedIterator<BatchUpdateException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0, 0L, (long) 48);
      IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) boundedIterator0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", (-2066));
      DataTruncation dataTruncation0 = new DataTruncation((-2004), true, false, 100, 100, sQLTransientException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 1, dataTruncation0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLIntegrityConstraintViolationException0, (-2066));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      boolean boolean0 = IteratorUtils.isEmpty(orderedIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[4];
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<InstanceofPredicate>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Vector<DataTruncation>[] vectorArray0 = (Vector<DataTruncation>[]) Array.newInstance(Vector.class, 8);
      ResettableListIterator<Vector<DataTruncation>> resettableListIterator0 = IteratorUtils.arrayListIterator(vectorArray0, 3);
      ListIterator<Vector<DataTruncation>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Vector<DataTruncation>>) resettableListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }
}
