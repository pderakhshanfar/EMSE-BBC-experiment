/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:29:14 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, String>(orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLTimeoutException, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, String>(abstractOrderedMapIteratorDecorator0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Hashtable<StringTokenizer, ArrayDeque<SQLWarning>> hashtable0 = new Hashtable<StringTokenizer, ArrayDeque<SQLWarning>>();
      EntrySetMapIterator<StringTokenizer, ArrayDeque<SQLWarning>> entrySetMapIterator0 = new EntrySetMapIterator<StringTokenizer, ArrayDeque<SQLWarning>>(hashtable0);
      MapIterator<StringTokenizer, ArrayDeque<SQLWarning>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, ArrayDeque<SQLWarning>>) entrySetMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ListIterator<SQLTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<SQLTransientConnectionException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      ZippingIterator<SQLTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) listIterator1, (Iterator<? extends SQLTransientConnectionException>) listIterator1, (Iterator<? extends SQLTransientConnectionException>) listIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLIntegrityConstraintViolationException>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Hashtable<SQLDataException, Vector<SQLWarning>> hashtable0 = new Hashtable<SQLDataException, Vector<SQLWarning>>();
      EntrySetMapIterator<SQLDataException, Vector<SQLWarning>> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, Vector<SQLWarning>>(hashtable0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<SQLException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends String>) hashMap0);
      String string0 = IteratorUtils.toString((Iterator<SQLDataException>) entrySetMapIterator0, (Transformer<? super SQLDataException, String>) transformer0, "u9mHWl", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, 1067);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) objectArrayIterator0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.singletonIterator(locale_FilteringMode0);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      Locale.FilteringMode[] locale_FilteringModeArray0 = IteratorUtils.toArray((Iterator<? extends Locale.FilteringMode>) resettableIterator0, class0);
      assertEquals(1, locale_FilteringModeArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      Iterator<Integer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Integer>) objectArrayListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      int[] intArray0 = new int[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("V ]Ym8T", intArray0);
      linkedList0.add(batchUpdateException0);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<BatchUpdateException>) linkedList0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Hb", "Hb", 100);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[6];
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException0;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, 2);
      assertEquals(100, sQLInvalidAuthorizationSpecException1.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 3);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      ResettableListIterator<Class<Properties>> resettableListIterator0 = IteratorUtils.arrayListIterator(classArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) class0, comparator0);
      Class<Properties> class1 = IteratorUtils.find((Iterator<Class<Properties>>) resettableListIterator0, (Predicate<? super Class<Properties>>) predicate0);
      assertNotNull(class1);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[6];
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLException>) resettableIterator0, (Object) sQLExceptionArray0[1]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ListIterator<SQLTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLTransientConnectionException>) listIterator0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Comparator<ClientInfoStatus> comparator0 = (Comparator<ClientInfoStatus>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<ClientInfoStatus>[] iteratorArray0 = (Iterator<ClientInfoStatus>[]) Array.newInstance(Iterator.class, 1);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      SingletonIterator<ClientInfoStatus> singletonIterator0 = new SingletonIterator<ClientInfoStatus>(clientInfoStatus0);
      iteratorArray0[0] = (Iterator<ClientInfoStatus>) singletonIterator0;
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.collatedIterator((Comparator<? super ClientInfoStatus>) comparator0, (Iterator<? extends ClientInfoStatus>[]) iteratorArray0);
      ZippingIterator<ClientInfoStatus> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends ClientInfoStatus>) iterator0, (Iterator<? extends ClientInfoStatus>) singletonIterator0, (Iterator<? extends ClientInfoStatus>) singletonIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 1);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) resettableIterator0;
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, Iterator<SQLDataException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      BoundedIterator<SQLClientInfoException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) orderedMapIterator0, 4656L, 4656L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[4];
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.arrayIterator(clientInfoStatusArray0, 1, 1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 0;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0, int0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 16);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<TreeSet<SQLNonTransientException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      SingletonIterator<ArrayList<SQLIntegrityConstraintViolationException>> singletonIterator0 = new SingletonIterator<ArrayList<SQLIntegrityConstraintViolationException>>(arrayList0, false);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ArrayList<SQLIntegrityConstraintViolationException>>) singletonIterator0, (Transformer<? super ArrayList<SQLIntegrityConstraintViolationException>, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0);
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 0);
      Transformer<Object, Locale.FilteringMode> transformer0 = InvokerTransformer.invokerTransformer(").", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Predicate<Object>>) singletonIterator0, (Transformer<? super Predicate<Object>, ? extends Locale.FilteringMode>) transformer0);
      Class<Locale.FilteringMode> class1 = Locale.FilteringMode.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Locale.FilteringMode>) iterator0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method ').' on 'class org.apache.commons.collections4.functors.InstanceofPredicate' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLIntegrityConstraintViolationException>) null, 1279L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MapIterator<InstanceofPredicate, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(mapIterator0, defaultEquator0);
      SingletonListIterator<LinkedHashSet<SQLTransactionRollbackException>> singletonListIterator0 = new SingletonListIterator<LinkedHashSet<SQLTransactionRollbackException>>((LinkedHashSet<SQLTransactionRollbackException>) null);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(equalPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<LinkedHashSet<SQLTransactionRollbackException>>) singletonListIterator0, (Predicate<? super LinkedHashSet<SQLTransactionRollbackException>>) nullIsExceptionPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input Object must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet0 = new LinkedHashSet<SQLTransactionRollbackException>();
      SingletonListIterator<LinkedHashSet<SQLTransactionRollbackException>> singletonListIterator0 = new SingletonListIterator<LinkedHashSet<SQLTransactionRollbackException>>(linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<LinkedHashSet<SQLTransactionRollbackException>>) singletonListIterator0, (Predicate<? super LinkedHashSet<SQLTransactionRollbackException>>) nullIsExceptionPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<DataTruncation>) null, 18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 3);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ResettableIterator<InstanceofPredicate> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends InstanceofPredicate>) null, (Iterator<? extends InstanceofPredicate>) resettableIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLException>) orderedIterator0, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[4];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(propertiesArray0, 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[5];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 0, 4700);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Integer[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[4];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(propertiesArray0, 56);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLClientInfoException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<StringTokenizer> class0 = StringTokenizer.class;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) class0, 3586);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Iterator<String> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Locale[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLNonTransientException[]) null, (-3216), (-3216));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLExceptionArray0, (-2303));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLNonTransientConnectionException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("|%RIBp", "", (-2));
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLWarning0, (-2), 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "+:/?4T>Gi`ht*f@;sB", false);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) stringTokenizer0, (-1354));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("tlL");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("t^#fb2qpm\"(msdeVa", (Throwable) null);
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.singletonIterator(sQLDataException0);
      Transformer<SQLDataException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) resettableIterator0, (Transformer<? super SQLDataException, String>) transformer0, "`Kg7j", "`Kg7j", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = IteratorUtils.toString((Iterator<ServiceLoader<Transformer>>) null, (Transformer<? super ServiceLoader<Transformer>, String>) transformer0, "MapIterator must not be null", "MapIterator must not be null", "?gT*'F");
      assertEquals("MapIterator must not be null?gT*'F", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) orderedIterator0, (Iterator<? extends SQLTimeoutException>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTimeoutException>) zippingIterator0, (Transformer<? super SQLTimeoutException, String>) null, "org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory", "org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory", "u9'Ov=zh~zd&,m");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) null, 1L, 3176L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException("", sQLNonTransientConnectionException0);
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.singletonIterator(sQLDataException0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) resettableIterator0, (Transformer<? super SQLDataException, String>) transformer0, "*ED1$", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableIterator0, (Transformer<? super IIOMetadataNode, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      int int0 = IteratorUtils.size(objectArrayListIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, 22);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 21
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0);
      ZippingIterator<InstanceofPredicate> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>) singletonIterator0, (Iterator<? extends InstanceofPredicate>) singletonIterator0);
      IteratorUtils.toString((Iterator<InstanceofPredicate>) zippingIterator0);
      boolean boolean0 = IteratorUtils.isEmpty(singletonIterator0);
      assertFalse(singletonIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      boolean boolean0 = IteratorUtils.isEmpty(listIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[9];
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.arrayListIterator(clientInfoStatusArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ClientInfoStatus>) resettableListIterator0, (Predicate<? super ClientInfoStatus>) uniquePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MapIterator<InstanceofPredicate, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(mapIterator0, defaultEquator0);
      HashMap<SQLRecoverableException, Object> hashMap0 = new HashMap<SQLRecoverableException, Object>();
      EntrySetMapIterator<SQLRecoverableException, Object> entrySetMapIterator0 = new EntrySetMapIterator<SQLRecoverableException, Object>(hashMap0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLRecoverableException>) entrySetMapIterator0, (Predicate<? super SQLRecoverableException>) equalPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[2];
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.arrayListIterator(clientInfoStatusArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ClientInfoStatus>) resettableListIterator0, (Predicate<? super ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ClientInfoStatus>) null, (Predicate<? super ClientInfoStatus>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet0 = new LinkedHashSet<SQLTransactionRollbackException>();
      SingletonListIterator<LinkedHashSet<SQLTransactionRollbackException>> singletonListIterator0 = new SingletonListIterator<LinkedHashSet<SQLTransactionRollbackException>>(linkedHashSet0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<LinkedHashSet<SQLTransactionRollbackException>>) singletonListIterator0, (Predicate<? super LinkedHashSet<SQLTransactionRollbackException>>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(instanceofPredicate0);
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet0 = new LinkedHashSet<SQLTransactionRollbackException>();
      SingletonListIterator<LinkedHashSet<SQLTransactionRollbackException>> singletonListIterator0 = new SingletonListIterator<LinkedHashSet<SQLTransactionRollbackException>>(linkedHashSet0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<LinkedHashSet<SQLTransactionRollbackException>>) singletonListIterator0, (Predicate<? super LinkedHashSet<SQLTransactionRollbackException>>) nullIsExceptionPredicate0);
      assertTrue(singletonListIterator0.hasPrevious());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(instanceofPredicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<LinkedHashSet<SQLTransactionRollbackException>>) null, (Predicate<? super LinkedHashSet<SQLTransactionRollbackException>>) nullIsExceptionPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SingletonListIterator<LinkedHashSet<SQLTransactionRollbackException>> singletonListIterator0 = new SingletonListIterator<LinkedHashSet<SQLTransactionRollbackException>>((LinkedHashSet<SQLTransactionRollbackException>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<LinkedHashSet<SQLTransactionRollbackException>>) singletonListIterator0, (Predicate<? super LinkedHashSet<SQLTransactionRollbackException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 3);
      Class<Properties> class0 = Properties.class;
      ResettableListIterator<Class<Properties>> resettableListIterator0 = IteratorUtils.arrayListIterator(classArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1, 0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) class0, comparator0);
      Class<Properties> class1 = IteratorUtils.find((Iterator<Class<Properties>>) resettableListIterator0, (Predicate<? super Class<Properties>>) predicate0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) "");
      Class<Properties> class0 = IteratorUtils.find((Iterator<Class<Properties>>) null, (Predicate<? super Class<Properties>>) predicate0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ResettableListIterator<Class<Properties>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Class<Properties> class1 = IteratorUtils.find((Iterator<Class<Properties>>) resettableListIterator0, (Predicate<? super Class<Properties>>) instanceofPredicate0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Transformer<Object, SQLTransientConnectionException> transformer0 = ConstantTransformer.nullTransformer();
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<Predicate<Object>>) null, (Closure<? super Predicate<Object>>) closure0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ListIterator<Predicate<Object>> listIterator0 = IteratorUtils.singletonListIterator((Predicate<Object>) instanceofPredicate0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<Predicate<Object>>) listIterator0, (Closure<? super Predicate<Object>>) closure0);
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(hashtable0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<Locale.FilteringMode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) resettableIterator0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("|Y1=L0e[+%7_nP'[E");
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLNonTransientConnectionException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0);
      ZippingIterator<InstanceofPredicate> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>) singletonIterator0, (Iterator<? extends InstanceofPredicate>) singletonIterator0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(zippingIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      SingletonListIterator<ClientInfoStatus> singletonListIterator0 = new SingletonListIterator<ClientInfoStatus>(clientInfoStatus0);
      List<ClientInfoStatus> list0 = IteratorUtils.toList((Iterator<? extends ClientInfoStatus>) singletonListIterator0, 10);
      assertTrue(list0.contains(clientInfoStatus0));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ListIterator<SQLTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) listIterator0, (-3248));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Locale.FilteringMode>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.emptyIterator();
      Locale.FilteringMode[] locale_FilteringModeArray0 = IteratorUtils.toArray((Iterator<? extends Locale.FilteringMode>) resettableIterator0, class0);
      assertEquals(0, locale_FilteringModeArray0.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OrderedMapIterator<InstanceofPredicate, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<Properties> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Properties>) resettableListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 1);
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(linkedList0);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) reverseListIterator0;
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      Iterable<BatchUpdateException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends BatchUpdateException>) zippingIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      LoopingIterator<SQLSyntaxErrorException> loopingIterator0 = new LoopingIterator<SQLSyntaxErrorException>(arrayDeque0);
      Iterable<SQLSyntaxErrorException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLSyntaxErrorException>) loopingIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<Locale.FilteringMode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) enumeration0, (Collection<? super Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) null, (Collection<? super Locale.FilteringMode>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<Locale.FilteringMode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) resettableIterator0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableIterator0);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) enumeration0, (Collection<? super Locale.FilteringMode>) list0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Hashtable<HashSet<SQLInvalidAuthorizationSpecException>, Properties> hashtable0 = new Hashtable<HashSet<SQLInvalidAuthorizationSpecException>, Properties>();
      Enumeration<Properties> enumeration0 = hashtable0.elements();
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) vector0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      vector0.add(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0, 965);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      ResettableIterator<Predicate<Object>> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Predicate<Object>>) linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Predicate<Object>>) resettableIterator0, (Closure<? super Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      NonePredicate<SQLNonTransientException> nonePredicate0 = new NonePredicate<SQLNonTransientException>((Predicate<? super SQLNonTransientException>[]) null);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) nonePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator1, 3778);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NonePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) null, (Predicate<? super Properties>) uniquePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) resettableListIterator0, (Predicate<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MapIterator<Locale.FilteringMode, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIteratorWrapper<Locale.FilteringMode> listIteratorWrapper0 = new ListIteratorWrapper<Locale.FilteringMode>(mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Locale.FilteringMode>) listIteratorWrapper0, (Predicate<? super Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Hashtable<HashSet<SQLInvalidAuthorizationSpecException>, Properties> hashtable0 = new Hashtable<HashSet<SQLInvalidAuthorizationSpecException>, Properties>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(hashtable0, defaultEquator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      EqualPredicate<IIOMetadataNode> equalPredicate0 = new EqualPredicate<IIOMetadataNode>(iIOMetadataNode0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) singletonListIterator0, (Predicate<? super IIOMetadataNode>) equalPredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Transformer<Object, Locale.FilteringMode> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) null, (Object[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Predicate<Object>>) null, (Transformer<? super Predicate<Object>, ? extends Locale.FilteringMode>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MapIterator<InstanceofPredicate, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Predicate<Object>>) mapIterator0, (Transformer<? super Predicate<Object>, ? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[0];
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      SkippingIterator<SQLTransientConnectionException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLTransientConnectionException>) resettableListIterator0, (long) 100);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) null, (Object[]) null);
      String string0 = IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) null, (Transformer<? super SQLIntegrityConstraintViolationException, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-1), (-199));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Boolean[]) null, 57);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MapIterator<InstanceofPredicate, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends InstanceofPredicate>) mapIterator0, (Iterator<? extends InstanceofPredicate>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      Iterator<?> iterator0 = IteratorUtils.getIterator(class0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<ClientInfoStatus, Transformer<Object, BatchUpdateException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[7];
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, 0);
      assertNull(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((InstanceofPredicate[]) null, 100, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[4];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(clientInfoStatusArray0, 1, (-699));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Hashtable<SQLTimeoutException, TreeSet<SQLClientInfoException>> hashtable0 = new Hashtable<SQLTimeoutException, TreeSet<SQLClientInfoException>>();
      EntrySetMapIterator<SQLTimeoutException, TreeSet<SQLClientInfoException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, TreeSet<SQLClientInfoException>>(hashtable0);
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) entrySetMapIterator0, (Iterator<? extends SQLTimeoutException>) orderedIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MapIterator<IIOMetadataNode, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      BoundedIterator<IIOMetadataNode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) mapIterator0, 1396L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Locale>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iteratorArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1), (-483));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PriorityQueue<BatchUpdateException>[] priorityQueueArray0 = (PriorityQueue<BatchUpdateException>[]) Array.newInstance(PriorityQueue.class, 5);
      ResettableListIterator<PriorityQueue<BatchUpdateException>> resettableListIterator0 = IteratorUtils.arrayListIterator(priorityQueueArray0, 2);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      Transformer<Object, Locale.FilteringMode> transformer0 = InvokerTransformer.invokerTransformer("O&_S%", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.objectGraphIterator(locale_FilteringMode0, (Transformer<? super Locale.FilteringMode, ? extends Locale.FilteringMode>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.contains(iterator0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'O&_S%' on 'class java.util.Locale$FilteringMode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 2715);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLWarning0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("xVAH", sQLNonTransientConnectionException0);
      SQLDataException sQLDataException0 = new SQLDataException("kH~f?:/|s8tz)*", "kH~f?:/|s8tz)*", 4651, sQLFeatureNotSupportedException0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLDataException>) listIterator0, (Predicate<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      OrderedIterator<InstanceofPredicate> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends InstanceofPredicate>) orderedIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) orderedIterator0, 0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<SQLRecoverableException>[] classArray0 = (Class<SQLRecoverableException>[]) Array.newInstance(Class.class, 2);
      ResettableListIterator<Class<SQLRecoverableException>> resettableListIterator0 = IteratorUtils.arrayListIterator(classArray0);
      ListIterator<Class<SQLRecoverableException>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Class<SQLRecoverableException>>) resettableListIterator0);
      assertTrue(listIterator0.hasNext());
  }
}
