/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 06:40:13 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      int int0 = 0;
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 9);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      classArray0[0] = class0;
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      classArray0[1] = class1;
      Class<IIOMetadataNode> class2 = IIOMetadataNode.class;
      classArray0[2] = class2;
      Class<IIOMetadataNode> class3 = IIOMetadataNode.class;
      classArray0[3] = class3;
      Class<IIOMetadataNode> class4 = IIOMetadataNode.class;
      classArray0[4] = class4;
      Class<IIOMetadataNode> class5 = IIOMetadataNode.class;
      classArray0[5] = class5;
      Class<IIOMetadataNode> class6 = IIOMetadataNode.class;
      classArray0[6] = class6;
      Class<IIOMetadataNode> class7 = IIOMetadataNode.class;
      classArray0[7] = class7;
      Class<IIOMetadataNode> class8 = IIOMetadataNode.class;
      classArray0[8] = class8;
      Transformer<Locale.Category, Locale.Category> transformer0 = InvokerTransformer.invokerTransformer("aZ\"%[", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.objectGraphIterator(locale_Category0, (Transformer<? super Locale.Category, ? extends Locale.Category>) transformer0);
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Locale.Category>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Locale.Category>) listIterator0, 4150L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'aZ\"%[' on 'class java.util.Locale$Category' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = (-1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(",+wSo5DOl9c&egm8", "x#Mne] fn3U0.xUj6", (-1));
      sQLSyntaxErrorException0.getSuppressed();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) null);
      String string0 = "CKpxw";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("CKpxw");
      sQLSyntaxErrorException0.initCause(sQLInvalidAuthorizationSpecException0);
      Transformer<SQLNonTransientException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0, "", "The predicate and closure map must not be null", ">KS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("D%=?gA)\"RxkJGFVm", "D%=?gA)\"RxkJGFVm", (-1));
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("D%=?gA)\"RxkJGFVm", "D%=?gA)\"RxkJGFVm", sQLRecoverableException0);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      FactoryTransformer<SQLTransientException, String> factoryTransformer0 = new FactoryTransformer<SQLTransientException, String>((Factory<? extends String>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) singletonIterator0, (Transformer<? super SQLTransactionRollbackException, String>) factoryTransformer0, "D%=?gA)\"RxkJGFVm", "D%=?gA)\"RxkJGFVm", "D%=?gA)\"RxkJGFVm");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 1);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      classArray0[0] = class0;
      InvokerTransformer<Object, Locale.Category> invokerTransformer0 = new InvokerTransformer<Object, Locale.Category>("Iterator must not be null", classArray0, classArray0);
      IfTransformer<Object, Locale.Category> ifTransformer0 = new IfTransformer<Object, Locale.Category>(predicate0, invokerTransformer0, invokerTransformer0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.objectGraphIterator(locale_Category0, (Transformer<? super Locale.Category, ? extends Locale.Category>) ifTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Stack<SQLWarning> stack0 = new Stack<SQLWarning>();
      Vector<SQLWarning> vector0 = new Vector<SQLWarning>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Stack<ClientInfoStatus> stack1 = new Stack<ClientInfoStatus>();
      LoopingListIterator<ClientInfoStatus> loopingListIterator0 = new LoopingListIterator<ClientInfoStatus>(stack1);
      UniquePredicate.uniquePredicate();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      loopingListIterator0.add(clientInfoStatus0);
      ListIterator<ClientInfoStatus> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends ClientInfoStatus>) loopingListIterator0, (Predicate<? super ClientInfoStatus>) uniquePredicate0);
      Comparator<Boolean> comparator0 = (Comparator<Boolean>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 3);
      MapIterator<Boolean, HashSet<Integer>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[0] = (Iterator<Boolean>) mapIterator0;
      int int0 = 1073741824;
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) listIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 1);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      classArray0[0] = class0;
      InvokerTransformer<Object, Locale.Category> invokerTransformer0 = new InvokerTransformer<Object, Locale.Category>("Iterator must not be null", classArray0, classArray0);
      IfTransformer<Object, Locale.Category> ifTransformer0 = new IfTransformer<Object, Locale.Category>(predicate0, invokerTransformer0, invokerTransformer0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.objectGraphIterator(locale_Category0, (Transformer<? super Locale.Category, ? extends Locale.Category>) ifTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 128);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      IteratorUtils.get((Iterator<Locale.Category>) singletonIterator0, 0);
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 0);
      ResettableListIterator<Iterator<BatchUpdateException>> resettableListIterator0 = IteratorUtils.arrayListIterator(iteratorArray0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator((SQLRecoverableException) null);
      Predicate<SQLException> predicate0 = NotNullPredicate.notNullPredicate();
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>((Transformer<? super SQLException, ? extends SQLException>) null, predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLRecoverableException>) listIterator0, (Predicate<? super SQLRecoverableException>) transformedPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformedPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      List<Locale.Category> list0 = IteratorUtils.toList((Iterator<? extends Locale.Category>) singletonIterator0);
      ResettableListIterator<Locale.Category> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Locale.Category>) resettableListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      int int0 = 0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[6];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category2;
      locale_CategoryArray0[4] = locale_Category0;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      locale_CategoryArray0[5] = locale_Category3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(locale_CategoryArray0, 0, (-584));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-739));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-739));
      integerArray0[1] = integer1;
      int int0 = (-301);
      Integer integer2 = new Integer((-301));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(827);
      integerArray0[3] = integer3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, 0, (-403));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      IteratorUtils.get((Iterator<Locale.Category>) singletonIterator0, 0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[4];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", "", 2111);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException(sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLDataException sQLDataException0 = new SQLDataException("Predicate must not be null", "k AIO+];v@", 0);
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("", "3+sP", sQLDataException0);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, 0, 1);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, HashSet<BatchUpdateException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("");
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) orderedMapIterator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "6", "", "");
      MapIterator<StringTokenizer, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) mapIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("suffix may not be null", "%JW", 32, (Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) listIterator0, (Class<SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Object[] objectArray0 = new Object[9];
      ListIterator<Object> listIterator0 = IteratorUtils.singletonListIterator((Object) null);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.find((Iterator<Object>) listIterator0, (Predicate<? super Object>) predicate0);
      objectArray0[1] = null;
      objectArray0[8] = (Object) orderedIterator0;
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0);
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) vector0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      vector0.add(sQLTransactionRollbackException0);
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) resettableIterator0, class0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedMapIterator<SQLTransientException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<?, ? extends SQLNonTransientException>) orderedMapIterator0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Object>) null, (Predicate<? super Object>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      OrderedMapIterator<Iterator<BatchUpdateException>, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Iterator<BatchUpdateException>, SQLTimeoutException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Iterator<BatchUpdateException>, SQLTimeoutException>(orderedMapIterator0);
      OrderedMapIterator<Iterator<BatchUpdateException>, SQLTimeoutException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Iterator<BatchUpdateException>, ? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<?, ? extends SQLTransientException>) abstractOrderedMapIteratorDecorator0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) orderedMapIterator0;
      objectArray0[1] = (Object) abstractOrderedMapIteratorDecorator0;
      objectArray0[2] = (Object) orderedMapIterator1;
      objectArray0[3] = (Object) orderedMapIterator1;
      objectArray0[4] = (Object) predicate0;
      objectArray0[5] = (Object) predicate0;
      objectArray0[6] = (Object) abstractOrderedMapIteratorDecorator0;
      objectArray0[7] = (Object) orderedMapIterator1;
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0);
      objectArrayListIterator0.hasNext();
      IteratorUtils.get((Iterator<Object>) objectArrayListIterator0, 0);
      Hashtable<SQLWarning, DataTruncation> hashtable0 = new Hashtable<SQLWarning, DataTruncation>();
      assertEquals(0, hashtable0.size());
      
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) null, (Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      IteratorUtils.singletonIterator(locale_Category1);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[6];
      locale_CategoryArray0[0] = locale_Category1;
      locale_CategoryArray0[1] = locale_Category1;
      locale_CategoryArray0[2] = locale_Category0;
      locale_CategoryArray0[3] = locale_Category0;
      locale_CategoryArray0[4] = locale_Category0;
      locale_CategoryArray0[5] = locale_Category1;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.arrayIterator(locale_CategoryArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Locale.Category>) resettableIterator0, (-4945));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -4945
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      StringTokenizer stringTokenizer0 = new StringTokenizer("", (String) null);
      IteratorUtils.getIterator(stringTokenizer0);
      SQLDataException sQLDataException0 = new SQLDataException("Predicate must not be null", "Equator must not be null.", (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", (-903), sQLDataException0);
      IdentityPredicate<SQLIntegrityConstraintViolationException> identityPredicate0 = new IdentityPredicate<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      ListIterator<Predicate<SQLIntegrityConstraintViolationException>> listIterator0 = IteratorUtils.singletonListIterator((Predicate<SQLIntegrityConstraintViolationException>) identityPredicate0);
      ListIterator<Predicate<SQLIntegrityConstraintViolationException>> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(listIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Enumeration must not be null", "Enumeration must not be null", 123);
      Vector<SQLTransientConnectionException>[] vectorArray0 = (Vector<SQLTransientConnectionException>[]) Array.newInstance(Vector.class, 9);
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      vectorArray0[0] = (Vector<SQLTransientConnectionException>) stack0;
      Stack<SQLTransientConnectionException> stack1 = new Stack<SQLTransientConnectionException>();
      vectorArray0[1] = (Vector<SQLTransientConnectionException>) stack1;
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      vectorArray0[2] = vector0;
      Vector<SQLTransientConnectionException> vector1 = new Vector<SQLTransientConnectionException>();
      vectorArray0[3] = vector1;
      Stack<SQLTransientConnectionException> stack2 = new Stack<SQLTransientConnectionException>();
      vectorArray0[4] = (Vector<SQLTransientConnectionException>) stack2;
      Stack<SQLTransientConnectionException> stack3 = new Stack<SQLTransientConnectionException>();
      vectorArray0[5] = (Vector<SQLTransientConnectionException>) stack3;
      Vector<SQLTransientConnectionException> vector2 = new Vector<SQLTransientConnectionException>();
      vectorArray0[6] = vector2;
      Vector<SQLTransientConnectionException> vector3 = new Vector<SQLTransientConnectionException>();
      vectorArray0[7] = vector3;
      Vector<SQLTransientConnectionException> vector4 = new Vector<SQLTransientConnectionException>();
      vectorArray0[8] = vector4;
      ResettableListIterator<Vector<SQLTransientConnectionException>> resettableListIterator0 = IteratorUtils.arrayListIterator(vectorArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(stack3);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Vector<SQLTransientConnectionException>>) resettableListIterator0, (Predicate<? super Vector<SQLTransientConnectionException>>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ExceptionPredicate.exceptionPredicate();
      HashMap<SQLClientInfoException, SQLTimeoutException> hashMap0 = new HashMap<SQLClientInfoException, SQLTimeoutException>();
      EntrySetMapIterator<SQLClientInfoException, SQLTimeoutException> entrySetMapIterator0 = new EntrySetMapIterator<SQLClientInfoException, SQLTimeoutException>(hashMap0);
      MapIterator<Object, SQLTimeoutException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<?, ? extends SQLTimeoutException>) entrySetMapIterator0);
      MapIterator<Object, SQLTimeoutException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Object>) mapIterator1, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLWarning>) resettableListIterator0, (Closure<? super SQLWarning>) closure0);
      Class<SQLException> class0 = SQLException.class;
      IteratorUtils.toArray((Iterator<? extends SQLException>) resettableListIterator0, class0);
      ResettableListIterator<BatchUpdateException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<BatchUpdateException>) resettableListIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<BatchUpdateException>) listIterator0, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      OrderedMapIterator<SQLTransientException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Object, SQLNonTransientException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<?, ? extends SQLNonTransientException>) orderedMapIterator0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) orderedMapIterator0;
      objectArray0[1] = (Object) mapIterator0;
      objectArray0[2] = (Object) mapIterator0;
      objectArray0[3] = (Object) predicate0;
      objectArray0[4] = (Object) orderedMapIterator0;
      objectArray0[5] = (Object) predicate0;
      objectArray0[6] = (Object) orderedMapIterator0;
      objectArray0[7] = (Object) mapIterator0;
      objectArray0[8] = (Object) predicate0;
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Object>) resettableListIterator0, (Predicate<? super Object>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "`kVZ[Vmh<O9.IZIU";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`kVZ[Vmh<O9.IZIU");
      int int0 = 749;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 749);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Stack<ClientInfoStatus> stack0 = new Stack<ClientInfoStatus>();
      stack0.removeAllElements();
      LoopingListIterator<ClientInfoStatus> loopingListIterator0 = new LoopingListIterator<ClientInfoStatus>(stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends ClientInfoStatus>) loopingListIterator0, (Predicate<? super ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Vector<SQLTransientConnectionException>[] vectorArray0 = (Vector<SQLTransientConnectionException>[]) Array.newInstance(Vector.class, 1);
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      ResettableListIterator<Vector<SQLTransientConnectionException>> resettableListIterator0 = IteratorUtils.arrayListIterator(vectorArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Vector<SQLTransientConnectionException>>) resettableListIterator0, (Predicate<? super Vector<SQLTransientConnectionException>>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.EqualPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Stack<SQLWarning> stack0 = new Stack<SQLWarning>();
      Vector<SQLWarning> vector0 = new Vector<SQLWarning>(stack0);
      ReverseListIterator<SQLWarning> reverseListIterator0 = new ReverseListIterator<SQLWarning>(vector0);
      UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLWarning>) reverseListIterator0, (Closure<? super SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonListIterator<Locale.Category> singletonListIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      singletonListIterator0.reset();
      IteratorUtils.contains((Iterator<Locale.Category>) singletonListIterator0, (Object) singletonListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Stack<Locale.Category>[]) null, 9, 523);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonListIterator<Locale.Category> singletonListIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      OrderedMapIterator<Iterator<BatchUpdateException>, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Iterator<BatchUpdateException>, SQLTimeoutException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Iterator<BatchUpdateException>, SQLTimeoutException>(orderedMapIterator0);
      OrderedMapIterator<Iterator<BatchUpdateException>, SQLTimeoutException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Iterator<BatchUpdateException>, ? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<?, ? extends SQLTransientException>) abstractOrderedMapIteratorDecorator0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) abstractOrderedMapIteratorDecorator0;
      objectArray0[2] = (Object) orderedMapIterator1;
      objectArray0[3] = (Object) orderedMapIterator1;
      objectArray0[4] = (Object) nullIsFalsePredicate0;
      objectArray0[5] = (Object) predicate0;
      objectArray0[6] = (Object) abstractOrderedMapIteratorDecorator0;
      objectArray0[7] = (Object) orderedMapIterator1;
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0);
      objectArrayListIterator0.hasNext();
      IteratorUtils.get((Iterator<Object>) objectArrayListIterator0, 0);
      Hashtable<SQLWarning, DataTruncation> hashtable0 = new Hashtable<SQLWarning, DataTruncation>();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 0, 0);
      BoundedIterator<SQLException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLException>) resettableIterator0, (long) 0);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MapIterator<StringTokenizer, ServiceLoader<SQLTimeoutException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.getIterator(mapIterator0);
      Vector<SQLTransientConnectionException>[] vectorArray0 = (Vector<SQLTransientConnectionException>[]) Array.newInstance(Vector.class, 2);
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      vectorArray0[0] = vector0;
      Vector<SQLTransientConnectionException> vector1 = new Vector<SQLTransientConnectionException>();
      vectorArray0[1] = vector1;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "H#Ig%<j&j", 10);
      vector1.add(sQLTransientConnectionException0);
      ResettableListIterator<Vector<SQLTransientConnectionException>> resettableListIterator0 = IteratorUtils.arrayListIterator(vectorArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("org.apache.commons.collections4.functors.NullIsFalsePredicate");
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Vector<SQLTransientConnectionException>>) resettableListIterator0, (Predicate<? super Vector<SQLTransientConnectionException>>) equalPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IteratorUtils.getIterator("+=x>");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.singletonIterator(locale_Category0);
      IteratorUtils.boundedIterator((Iterator<? extends Locale.Category>) resettableIterator0, 0L);
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      IteratorUtils.getIterator(stringTokenizer0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[7];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("jp@6%uGt~F^RB");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode((String) null);
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode("org.apache.commons.collections4.map.Flat3Map$Values");
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode(";O ppy6Z{p,");
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, (-1552));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Iterator<BatchUpdateException>, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Iterator<BatchUpdateException>, SQLTimeoutException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Iterator<BatchUpdateException>, SQLTimeoutException>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning((String) null, (String) null);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[1];
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<SQLException> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLException>>) hashSet0);
      Predicate<SQLException> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLException>) predicate0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLRecoverableException>) resettableListIterator0, (Predicate<? super SQLRecoverableException>) predicate1);
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) vector0);
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) listIterator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input Object must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Integer integer0 = new Integer(2);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      Predicate<Integer> predicate0 = ExceptionPredicate.exceptionPredicate();
      ListIterator<Integer> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) singletonListIterator0, (Predicate<? super Integer>) predicate0);
      ListIterator<Integer> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) listIterator1, (Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) listIterator0);
      EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.emptyOrderedIterator();
      OrderedMapIterator<SQLTransactionRollbackException, SQLRecoverableException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MapIterator<StringTokenizer, ServiceLoader<SQLTimeoutException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("48=x'");
      IteratorUtils.getIterator(mapIterator0);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      EmptyIterator.emptyIterator();
      ExceptionClosure.exceptionClosure();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("[", "[", 65);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("[", sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<SQLException> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLException>>) hashSet0);
      Predicate<SQLException> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLException>) predicate0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLRecoverableException>) resettableListIterator0, (Predicate<? super SQLRecoverableException>) predicate1);
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) vector0);
      Class<SQLException> class0 = SQLException.class;
      SQLException[] sQLExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLException>) listIterator0, class0);
      assertEquals(2, sQLExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning((String) null, (String) null);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[0];
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<SQLException> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLException>>) hashSet0);
      Predicate<SQLException> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLException>) predicate0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLRecoverableException>) resettableListIterator0, (Predicate<? super SQLRecoverableException>) predicate1);
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) vector0);
      Class<SQLException> class0 = SQLException.class;
      SQLException[] sQLExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLException>) listIterator0, class0);
      assertEquals(0, sQLExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 5);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      LoopingIterator<SQLSyntaxErrorException> loopingIterator0 = new LoopingIterator<SQLSyntaxErrorException>(stack0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator0, (Iterator<? extends SQLSyntaxErrorException>) loopingIterator0, (Iterator<? extends SQLSyntaxErrorException>) loopingIterator0);
      iteratorArray0[0] = iterator0;
      ListIteratorWrapper<SQLSyntaxErrorException> listIteratorWrapper0 = new ListIteratorWrapper<SQLSyntaxErrorException>(iterator0);
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) listIteratorWrapper0;
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) iteratorArray0[1], (Iterator<? extends SQLSyntaxErrorException>) iteratorArray0[1], (Iterator<? extends SQLSyntaxErrorException>) loopingIterator0);
      iteratorArray0[2] = (Iterator<SQLSyntaxErrorException>) zippingIterator0;
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      iteratorArray0[3] = (Iterator<SQLSyntaxErrorException>) listIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLSyntaxErrorException>) iteratorArray0[1], (-2310L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLWarning>) resettableListIterator0, (Closure<? super SQLWarning>) closure0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      Hashtable<SQLWarning, DataTruncation> hashtable0 = new Hashtable<SQLWarning, DataTruncation>();
      long[] longArray0 = new long[0];
      SQLWarning sQLWarning0 = new SQLWarning("|75L4+k", "");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("{Q6_6>", "|75L4+k", 58, longArray0, sQLWarning0);
      SQLDataException sQLDataException0 = new SQLDataException("`WGUF77[3dQ%", "`WGUF77[3dQ%", 3866, batchUpdateException0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0, false);
      singletonIterator0.next();
      IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) singletonIterator0, 0L);
      IteratorUtils.asIterable((Iterator<? extends SQLDataException>) singletonIterator0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[8];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException((String) null, "InstantiateTransformer: InstantiationException", sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("`WGUF77[3dQ%", "", 58, batchUpdateException0);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("InstantiateTransformer: InstantiationException", batchUpdateException0);
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      SQLTransientConnectionException sQLTransientConnectionException6 = new SQLTransientConnectionException("ugC6L{` Pcsjca", ";8mCt^ZN|>v>J ]YW", 58);
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException6;
      SQLTransientConnectionException sQLTransientConnectionException7 = new SQLTransientConnectionException("{Q6_6>", ";8mCt^ZN|>v>J ]YW", 58, sQLTransientConnectionException3);
      sQLTransientConnectionExceptionArray0[7] = sQLTransientConnectionException7;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, 1);
      assertFalse(resettableListIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      IteratorUtils.emptyMapIterator();
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      String string0 = "VEwV,!q4PPF";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("VEwV,!q4PPF", "VEwV,!q4PPF");
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) sQLNonTransientException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLRecoverableException>) null, (Predicate<? super SQLRecoverableException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      OrderedMapIterator<Iterator<BatchUpdateException>, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) orderedMapIterator0;
      Predicate<SQLException> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLException>) predicate0);
      ListIterator<SQLRecoverableException> listIterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLRecoverableException>) null, (Predicate<? super SQLRecoverableException>) predicate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ExceptionClosure.exceptionClosure();
      Vector<SQLWarning> vector0 = new Vector<SQLWarning>();
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLWarning>) vector0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLWarning>) resettableListIterator0);
      EmptyMapIterator.emptyMapIterator();
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(stack0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) reverseListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) listIterator0, (Transformer<? super BatchUpdateException, ? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning((String) null, (String) null);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      boolean boolean0 = IteratorUtils.contains((Iterator<Locale.Category>) listIterator0, (Object) sQLTransientConnectionException0);
      assertFalse(boolean0);
      
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[7];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "{ eiJ*}-IP ]bqE", 0, hashtable0, sQLWarning0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", hashtable1, sQLWarning0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException(hashtable0, sQLDataException0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("", (String) null, hashtable0);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ListIterator<Integer> listIterator0 = EmptyListIterator.emptyListIterator();
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) listIterator0);
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) zippingIterator0;
      objectArray0[1] = (Object) zippingIterator0;
      objectArray0[2] = (Object) listIterator0;
      objectArray0[3] = (Object) orderedIterator0;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.singletonListIterator(locale_Category0);
      UniquePredicate<Locale.Category> uniquePredicate0 = new UniquePredicate<Locale.Category>();
      NotPredicate<Locale.Category> notPredicate0 = new NotPredicate<Locale.Category>(uniquePredicate0);
      Transformer<Object, Locale.Category> transformer0 = ExceptionTransformer.exceptionTransformer();
      IfTransformer<Locale.Category, Locale.Category> ifTransformer0 = new IfTransformer<Locale.Category, Locale.Category>(notPredicate0, transformer0, transformer0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.objectGraphIterator(locale_Category0, (Transformer<? super Locale.Category, ? extends Locale.Category>) ifTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.contains(iterator0, (Object) zippingIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category0);
      IteratorUtils.contains((Iterator<Locale.Category>) listIterator0, (Object) locale_Category0);
      OrderedMapIterator<SQLTransactionRollbackException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0, 1507);
      LoopingListIterator<SQLTransactionRollbackException> loopingListIterator0 = new LoopingListIterator<SQLTransactionRollbackException>(list0);
      List<SQLTransactionRollbackException> list1 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) loopingListIterator0, 38);
      assertTrue(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning((String) null, (String) null);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[0];
      IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ConstantTransformer<Object, IIOMetadataNode> constantTransformer0 = new ConstantTransformer<Object, IIOMetadataNode>(iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLFeatureNotSupportedException[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 3);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>(vector0);
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(linkedList0);
      iteratorArray0[0] = (Iterator<SQLDataException>) loopingIterator0;
      Iterator<SQLDataException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLDataException>) loopingIterator0);
      iteratorArray0[1] = iterator0;
      OrderedMapIterator<SQLDataException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[2] = (Iterator<SQLDataException>) orderedMapIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(">*qMd*h%m#xiW(bhH<", (String) null);
      sQLTransactionRollbackException0.spliterator();
      Transformer<SQLTransactionRollbackException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends String>) null);
      String string0 = IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) null, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "NodeList must not be null", "!|k", "DH'#p~3AuefD");
      assertEquals("!|kDH'#p~3AuefD", string0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      hashtable0.getOrDefault("", clientInfoStatus0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", (String) null);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[1];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      IteratorUtils.size(resettableListIterator0);
      IteratorUtils.toListIterator((Iterator<?>) resettableListIterator0);
      ResettableIterator<LinkedHashSet<SQLSyntaxErrorException>> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Vector<SQLWarning> vector0 = new Vector<SQLWarning>();
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLWarning>) vector0);
      Iterator<SQLWarning> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLWarning>) resettableListIterator0);
      IteratorUtils.apply(iterator0, (Closure<? super SQLWarning>) closure0);
      IteratorUtils.size(iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 3);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      SQLDataException sQLDataException0 = new SQLDataException("r/mHS/");
      vector0.add(sQLDataException0);
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>(vector0);
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(linkedList0);
      iteratorArray0[0] = (Iterator<SQLDataException>) loopingIterator0;
      iteratorArray0[1] = (Iterator<SQLDataException>) loopingIterator0;
      OrderedMapIterator<SQLDataException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Integer integer0 = new Integer(2129);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLNonTransientConnectionException, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0, 2129);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0);
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 24);
      iteratorArray0[0] = iterator0;
      iteratorArray0[2] = iterator0;
      iteratorArray0[3] = iterator0;
      iteratorArray0[4] = iterator0;
      OrderedMapIterator<SQLRecoverableException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) orderedMapIterator0, 0L);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) stringTokenizer0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      predicateArray0[0] = predicate0;
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      predicateArray0[1] = predicate1;
      // Undeclared exception!
      try { 
        AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not contain a null predicate, index 2 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, sQLException0);
      Predicate<SQLRecoverableException> predicate0 = EqualPredicate.equalPredicate(sQLRecoverableException0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[6];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException((String) null, "9!7w0e}d%I@w");
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException1;
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      IteratorUtils.matchesAll((Iterator<SQLRecoverableException>) resettableListIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "", (-129), sQLRecoverableException1);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("{XhvFsO?", "");
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("", "z/N6 @|Qi2&#)o", sQLRecoverableException0);
      assertFalse(sQLRecoverableException2.equals((Object)sQLRecoverableException0));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning((String) null, (String) null);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLWarning0);
      sQLWarning0.spliterator();
      IteratorUtils.find((Iterator<SQLWarning>) null, (Predicate<? super SQLWarning>) identityPredicate0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", (String) null, 660, sQLWarning0);
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 1931;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<DataTruncation>) null, 1931);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 6);
      iteratorArray0[0] = iterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "", (-1059), (-1059));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 3);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>(vector0);
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(linkedList0);
      iteratorArray0[0] = (Iterator<SQLDataException>) loopingIterator0;
      Iterator<SQLDataException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLDataException>) loopingIterator0);
      iteratorArray0[1] = iterator0;
      OrderedMapIterator<SQLDataException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[2] = (Iterator<SQLDataException>) orderedMapIterator0;
      Iterator<SQLDataException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) iterator1);
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(iteratorArray0);
      objectArrayListIterator0.hasNext();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("V", "V", 953);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate.comparatorPredicate((Object) orderedMapIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(onePredicate0);
      NotPredicate<Properties> notPredicate0 = new NotPredicate<Properties>(onePredicate0);
      OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      Properties properties0 = new Properties();
      IteratorUtils.singletonListIterator(properties0);
      Properties[] propertiesArray0 = new Properties[2];
      propertiesArray0[0] = properties0;
      propertiesArray0[1] = properties0;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      Iterator<Properties> iterator2 = IteratorUtils.filteredIterator((Iterator<? extends Properties>) resettableIterator0, (Predicate<? super Properties>) notPredicate0);
      IteratorUtils.toListIterator((Iterator<? extends Properties>) iterator2);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("&/H=a_ }", "PrototypeCloneFactory: Clone method threw an exception");
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      //  // Unstable assertion: assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      LinkedList<IIOMetadataNode>[] linkedListArray0 = (LinkedList<IIOMetadataNode>[]) Array.newInstance(LinkedList.class, 1);
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      linkedListArray0[0] = linkedList0;
      ResettableListIterator<LinkedList<IIOMetadataNode>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedListArray0);
      String string0 = IteratorUtils.toString((Iterator<LinkedList<IIOMetadataNode>>) resettableListIterator0);
      assertEquals("[[]]", string0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "");
      IteratorUtils.emptyOrderedIterator();
      OrderedMapIterator<SQLDataException, Iterator<BatchUpdateException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, Iterator<BatchUpdateException>> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends Iterator<BatchUpdateException>>) orderedMapIterator0);
      Factory<String> factory0 = ConstantFactory.constantFactory("");
      FactoryTransformer<SQLException, String> factoryTransformer0 = new FactoryTransformer<SQLException, String>(factory0);
      String string1 = IteratorUtils.toString((Iterator<SQLDataException>) orderedMapIterator1, (Transformer<? super SQLDataException, String>) factoryTransformer0);
      assertEquals("[]", string1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", (Throwable) null);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      OrderedMapIterator<SQLFeatureNotSupportedException, Locale.Category> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) orderedMapIterator0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) iterator0;
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0);
      ObjectArrayListIterator<Object> objectArrayListIterator1 = new ObjectArrayListIterator<Object>(objectArray0);
      objectArrayListIterator1.hasNext();
      Stack<Object> stack0 = new Stack<Object>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      stack0.add((Object) sQLTransientConnectionException0);
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Object>) stack0);
      int int0 = (-189);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) resettableListIterator0, (-189));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -189
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 3);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>(vector0);
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(linkedList0);
      iteratorArray0[0] = (Iterator<SQLDataException>) loopingIterator0;
      Iterator<SQLDataException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLDataException>) loopingIterator0);
      iteratorArray0[1] = iterator0;
      OrderedMapIterator<SQLDataException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[2] = (Iterator<SQLDataException>) orderedMapIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((ArrayList<Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLRecoverableException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLRecoverableException, SQLRecoverableException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLRecoverableException, SQLRecoverableException>(orderedMapIterator0);
      SQLException sQLException0 = new SQLException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("4nk{", sQLException0);
      Predicate<SQLRecoverableException> predicate0 = EqualPredicate.equalPredicate(sQLRecoverableException0);
      IteratorUtils.matchesAll((Iterator<SQLRecoverableException>) abstractMapIteratorDecorator0, (Predicate<? super SQLRecoverableException>) predicate0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[4];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "4nk{", (-480), sQLException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("", "");
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("", "UId7", (-4067), sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, (-480));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLWarning>) resettableListIterator0, (Closure<? super SQLWarning>) closure0);
      Hashtable<SQLException, String> hashtable0 = new Hashtable<SQLException, String>();
      MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends String>) hashtable0);
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<Integer, SQLInvalidAuthorizationSpecException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) orderedIterator0, (Iterator<? extends Integer>) mapIterator0);
      ResettableListIterator<Integer> resettableListIterator1 = IteratorUtils.emptyListIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      Integer integer0 = new Integer((-1914));
      IteratorUtils.toArray((Iterator<?>) resettableListIterator1);
      IteratorUtils.emptyOrderedIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Iterator getKey() can only be called after next() and before remove()", "Iterator getKey() can only be called after next() and before remove()", (-113));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Iterator getKey() can only be called after next() and before remove()", "Iterator getKey() can only be called after next() and before remove()", sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientConnectionException0, 65, 65);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category0);
      IteratorUtils.contains((Iterator<Locale.Category>) listIterator0, (Object) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLWarning>) null, (-1L), (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLWarning>) resettableListIterator0, (Closure<? super SQLWarning>) closure0);
      IteratorUtils.toString((Iterator<LinkedList<IIOMetadataNode>>) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[]", "[]");
      Properties[] propertiesArray0 = new Properties[4];
      Properties properties0 = new Properties();
      Properties properties1 = new Properties(properties0);
      propertiesArray0[0] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[1] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[2] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[3] = properties4;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0, 0, 0);
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) resettableIterator0);
      ResettableIterator<Properties> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends Properties>) list0);
      assertFalse(list0.contains(properties2));
      
      String string0 = IteratorUtils.toString((Iterator<Properties>) resettableIterator1);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Properties properties0 = new Properties();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator((Properties) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Object>) linkedList0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(";LBOI1)HwC^xCso", "}$w`)Gk]V~vLm @6(#g");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(properties0, comparator0, comparatorPredicate_Criterion0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate1 = ComparatorPredicate.comparatorPredicate((Object) comparatorPredicate0, comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate((Object) null, comparator2, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate1;
      predicateArray0[2] = (Predicate<Object>) comparatorPredicate0;
      predicateArray0[3] = predicate1;
      predicateArray0[4] = predicate0;
      predicateArray0[5] = predicate1;
      predicateArray0[6] = (Predicate<Object>) comparatorPredicate0;
      predicateArray0[7] = predicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate1);
      NotPredicate<Properties> notPredicate0 = new NotPredicate<Properties>(nullIsTruePredicate0);
      Predicate<Object> predicate2 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.filteredIterator((Iterator<? extends Properties>) listIterator0, (Predicate<? super Properties>) predicate2);
      IteratorUtils.toListIterator((Iterator<? extends Properties>) listIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "j?E vqB}U5$~%");
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("j?E vqB}U5$~%", "|HsZ}p>&37b$6x9[jC");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      List<SQLSyntaxErrorException> list0 = IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      IteratorUtils.emptyListIterator();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[0];
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      int int0 = 2490;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) null, 2490);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "";
      SQLException sQLException0 = new SQLException("Ts4jD'4n;<Pag/<#T", "", 1);
      MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends String>) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLException0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[7];
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException((String) null, sQLException0);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException1;
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException0;
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("Ts4jD'4n;<Pag/<#T", "", 1);
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException2;
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException0;
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      int int0 = (-1299);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) objectArrayIterator0, (-1299));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", (Throwable) null);
      Object object0 = new Object();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "iterator");
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 2);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Transformer<Object, SQLDataException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLDataException>) null);
      Transformer<Object, SQLException> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends SQLException>) transformer0, (Transformer<? super Object, ? extends SQLException>) transformer0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer1);
      closureArray0[0] = (Closure<Object>) transformerClosure0;
      TransformerClosure<Object> transformerClosure1 = new TransformerClosure<Object>(transformer1);
      closureArray0[1] = (Closure<Object>) transformerClosure1;
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Closure<? super Object>[]) closureArray0);
      IteratorUtils.apply((Iterator<SQLWarning>) null, (Closure<? super SQLWarning>) closure0);
      IteratorUtils.toString((Iterator<LinkedList<IIOMetadataNode>>) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "");
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashtable0.getOrDefault(iIOMetadataNode0, clientInfoStatus0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("`l7K{zo7?rm", "");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException0;
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<SQLException> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLException>>) hashSet0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLRecoverableException>) resettableListIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) listIterator0);
      Properties[] propertiesArray0 = new Properties[8];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 0, 478);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      MapIterator<StringTokenizer, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) mapIterator0);
      OrderedMapIterator<SQLNonTransientException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientException, SQLSyntaxErrorException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientException, SQLSyntaxErrorException>(orderedMapIterator0);
      MapIterator<SQLNonTransientException, SQLSyntaxErrorException> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientException, SQLSyntaxErrorException>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLNonTransientException>) mapIterator1, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      OrderedIterator<ArrayList<ArrayDeque>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      SQLException sQLException0 = new SQLException((String) null, "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", 1);
      MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends String>) null);
      OrderedIterator<Integer> orderedIterator1 = IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) orderedIterator1, (Iterator<? extends Integer>) orderedIterator1);
      IteratorUtils.emptyListIterator();
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0, (Collection<? super SQLIntegrityConstraintViolationException>) arrayList0);
      Iterator<SQLIntegrityConstraintViolationException> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator(iterator1, (-3311L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Properties properties0 = new Properties();
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>(vector0);
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(vector0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLDataException>) loopingIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLDataException>[] iteratorArray0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Iterator<Locale.Category> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.contains(iterator0, (Object) "");
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>((SQLSyntaxErrorException) null);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>((SQLSyntaxErrorException) null);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, batchUpdateException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, sQLDataException0);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.spliterator();
      Transformer<SQLTransactionRollbackException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends String>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) singletonIterator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "Q@UCAIjf|~T", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.toString((Iterator<LinkedList<IIOMetadataNode>>) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("s&&Io*3VuNs^{", "tw}wrtXS");
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.toString((Iterator<LinkedList<IIOMetadataNode>>) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "M.=.D3vCKTg|#");
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLWarning>) resettableListIterator0, (Closure<? super SQLWarning>) closure0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      Properties properties0 = new Properties();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashtable0.getOrDefault(properties0, clientInfoStatus0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("iterator");
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[0];
      ResettableListIterator<SQLRecoverableException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<SQLException> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLException>>) hashSet0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLRecoverableException>) resettableListIterator1, (Predicate<? super SQLRecoverableException>) predicate0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLWarning0);
      IteratorUtils.find((Iterator<SQLWarning>) null, (Predicate<? super SQLWarning>) identityPredicate0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, (Throwable) null);
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLException>>) hashSet0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[9];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[8] = sQLRecoverableException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 182);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      OrderedMapIterator<SQLTransientException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Object, SQLNonTransientException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<?, ? extends SQLNonTransientException>) orderedMapIterator0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      IteratorUtils.matchesAll((Iterator<Object>) mapIterator0, (Predicate<? super Object>) predicate0);
      Vector<SQLTransientConnectionException>[] vectorArray0 = (Vector<SQLTransientConnectionException>[]) Array.newInstance(Vector.class, 1);
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      vectorArray0[0] = vector0;
      ResettableListIterator<Vector<SQLTransientConnectionException>> resettableListIterator0 = IteratorUtils.arrayListIterator(vectorArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Vector<SQLTransientConnectionException>>) resettableListIterator0, (Predicate<? super Vector<SQLTransientConnectionException>>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[4];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("uIz)Esp9w");
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("v[.tKZS", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("", "uIz)Esp9w", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("6X\"n=9 Ox#v\"Ra", "v[.tKZS", sQLTransactionRollbackException2);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      SkippingIterator<SQLTransactionRollbackException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLTransactionRollbackException>) resettableListIterator0, 0L);
      Predicate<SQLTransientException>[] predicateArray0 = (Predicate<SQLTransientException>[]) Array.newInstance(Predicate.class, 7);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<SQLTransientException> predicate1 = OrPredicate.orPredicate((Predicate<? super SQLTransientException>) predicate0, (Predicate<? super SQLTransientException>) predicate0);
      predicateArray0[0] = predicate1;
      AndPredicate<SQLTransientException> andPredicate0 = new AndPredicate<SQLTransientException>(predicate1, predicate0);
      predicateArray0[1] = (Predicate<SQLTransientException>) andPredicate0;
      Predicate<SQLTransientException> predicate2 = NotNullPredicate.notNullPredicate();
      predicateArray0[2] = predicate2;
      Predicate<SQLTransientException> predicate3 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLTransientException>) predicate1);
      predicateArray0[3] = predicate3;
      OnePredicate<SQLTransientException> onePredicate0 = new OnePredicate<SQLTransientException>(predicateArray0);
      predicateArray0[4] = (Predicate<SQLTransientException>) onePredicate0;
      Comparator<SQLTransientException> comparator0 = (Comparator<SQLTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<SQLTransientException> comparatorPredicate0 = new ComparatorPredicate<SQLTransientException>(sQLTransactionRollbackException0, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[5] = (Predicate<SQLTransientException>) comparatorPredicate0;
      Predicate<SQLTransientException> predicate4 = NullPredicate.nullPredicate();
      predicateArray0[6] = predicate4;
      NonePredicate<SQLTransactionRollbackException> nonePredicate0 = new NonePredicate<SQLTransactionRollbackException>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLTransactionRollbackException>) skippingIterator0, (Predicate<? super SQLTransactionRollbackException>) nonePredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Transformer<SQLTransactionRollbackException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends String>) null);
      ListIterator<Integer> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) listIterator0);
      ArrayListIterator<SQLIntegrityConstraintViolationException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLIntegrityConstraintViolationException>(transformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0, (Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashtable0.getOrDefault(iIOMetadataNode0, clientInfoStatus0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("`l7K{zo7?rm", "");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("Entry does not exist: ");
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<SQLException> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLException>>) hashSet0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLRecoverableException>) resettableListIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 3);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>(vector0);
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(linkedList0);
      iteratorArray0[0] = (Iterator<SQLDataException>) loopingIterator0;
      Iterator<SQLDataException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLDataException>) loopingIterator0);
      iteratorArray0[0] = iterator0;
      OrderedMapIterator<SQLDataException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[2] = (Iterator<SQLDataException>) orderedMapIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLWarning0);
      IteratorUtils.find((Iterator<SQLWarning>) null, (Predicate<? super SQLWarning>) identityPredicate0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, (Throwable) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.constantTransformer(iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Transformer<? super SQLFeatureNotSupportedException, ? extends IIOMetadataNode>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", (Throwable) null);
      sQLTransactionRollbackException0.getStackTrace();
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      ConstantTransformer.constantTransformer(iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLFeatureNotSupportedException[]) null, 57);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", (Throwable) null);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends String>) null);
      OrderedMapIterator<SQLSyntaxErrorException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OrderedMapIterator<ArrayDeque<SQLDataException>, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<ArrayDeque<SQLDataException>, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<ArrayDeque<SQLDataException>, Object>(orderedMapIterator0);
      IteratorUtils.skippingIterator((Iterator<ArrayDeque<SQLDataException>>) abstractOrderedMapIteratorDecorator0, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(stack0);
      Stack<SQLSyntaxErrorException> stack1 = new Stack<SQLSyntaxErrorException>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.map.AbstractSortedMapDecorator", "48=x'", (-2262), (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLRecoverableException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(batchUpdateException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("48=x'");
      IteratorUtils.getIterator(iIOMetadataNode0);
      ResettableIterator<SQLTransientConnectionException> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLWarning0);
      IteratorUtils.find((Iterator<SQLWarning>) null, (Predicate<? super SQLWarning>) identityPredicate0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, (Throwable) null);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException((String) null, "jZd<Z", 2905, sQLWarning0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "!D>SXQ3a3q", sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(batchUpdateException0);
      IteratorUtils.getIterator((Object) null);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) resettableListIterator0;
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) resettableListIterator0;
      iteratorArray0[2] = iterator0;
      iteratorArray0[3] = iterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "org.apache.commons.collections4.map.AbstractSortedMapDecorator", (-2262), (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLRecoverableException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLRecoverableException0);
      IteratorUtils.getIterator("");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 4, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) resettableListIterator0;
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) resettableListIterator0;
      iteratorArray0[2] = iterator0;
      iteratorArray0[3] = iterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "org.apache.commons.collections4.map.AbstractSortedMapDecorator", (-2262), (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLRecoverableException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLRecoverableException0);
      IteratorUtils.getIterator("");
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLNonTransientException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) arrayList0);
      IteratorUtils.emptyOrderedIterator();
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate2 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      PredicateTransformer.predicateTransformer((Predicate<? super Object>) predicate1);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(predicateTransformer0);
      PredicateTransformer.predicateTransformer((Predicate<? super SQLFeatureNotSupportedException>) predicate2);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("]TE@?BQTu");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate2;
      predicateArray0[2] = (Predicate<Object>) transformerPredicate0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      ConstantTransformer.constantTransformer(iIOMetadataNode1);
      Transformer<Object, IIOMetadataNode> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, (Transformer<? super SQLFeatureNotSupportedException, ? extends IIOMetadataNode>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLWarning>) resettableListIterator0, (Closure<? super SQLWarning>) closure0);
      IteratorUtils.toString((Iterator<LinkedList<IIOMetadataNode>>) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "Rdi&^");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientConnectionException0, 976);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category0);
      IteratorUtils.contains((Iterator<Locale.Category>) listIterator0, (Object) listIterator0);
      TreeSet<SQLException> treeSet0 = new TreeSet<SQLException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) null, (Collection<? super SQLSyntaxErrorException>) treeSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLWarning>) resettableListIterator0, (Closure<? super SQLWarning>) closure0);
      HashMap<SQLFeatureNotSupportedException, Properties> hashMap0 = new HashMap<SQLFeatureNotSupportedException, Properties>();
      String string0 = null;
      SQLException sQLException0 = new SQLException((String) null, (String) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, sQLException0);
      Properties properties0 = new Properties();
      hashMap0.put(sQLFeatureNotSupportedException0, properties0);
      SingletonListIterator<HashMap<SQLFeatureNotSupportedException, Properties>> singletonListIterator0 = new SingletonListIterator<HashMap<SQLFeatureNotSupportedException, Properties>>(hashMap0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate0;
      predicateArray0[4] = predicate0;
      predicateArray0[5] = predicate0;
      predicateArray0[6] = predicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      nonePredicate0.evaluate(properties0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(nonePredicate0);
      IteratorUtils.find((Iterator<HashMap<SQLFeatureNotSupportedException, Properties>>) singletonListIterator0, (Predicate<? super HashMap<SQLFeatureNotSupportedException, Properties>>) predicate0);
      ArrayListIterator<SQLTransientConnectionException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLTransientConnectionException>(predicate0, (-814));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 3);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>(vector0);
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(linkedList0);
      iteratorArray0[0] = (Iterator<SQLDataException>) loopingIterator0;
      Iterator<SQLDataException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLDataException>) loopingIterator0);
      iteratorArray0[1] = iterator0;
      OrderedMapIterator<SQLDataException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[2] = (Iterator<SQLDataException>) orderedMapIterator0;
      Iterator<SQLDataException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) iterator1);
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(iteratorArray0);
      objectArrayListIterator0.hasNext();
      int int0 = 12;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) objectArrayListIterator0, 12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 9
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category0);
      IteratorUtils.contains((Iterator<Locale.Category>) listIterator0, (Object) listIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("add() not supported for empty Iterator", "List must not be null");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0, true);
      ConstantTransformer.constantTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) singletonIterator0, (Transformer<? super SQLTransactionRollbackException, String>) null, "&}(5z{<^u[D 3M", "add() not supported for empty Iterator", "$]yaRu2$UL=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.setAttribute("JV8N/w!4]4N)`", "(i%%M0P>");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("", "JV8N/w!4]4N)`");
      IteratorUtils.nodeListIterator(nodeList0);
      IteratorUtils.emptyMapIterator();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[9];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("(i%%M0P>");
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      sQLTransactionRollbackException0.setNextException(sQLTransactionRollbackException0);
      SQLException sQLException0 = new SQLException(sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>((SQLSyntaxErrorException) null);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 9);
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) singletonIterator0;
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) singletonIterator0;
      iteratorArray0[2] = (Iterator<SQLSyntaxErrorException>) resettableListIterator0;
      iteratorArray0[3] = (Iterator<SQLSyntaxErrorException>) singletonIterator0;
      iteratorArray0[4] = (Iterator<SQLSyntaxErrorException>) singletonIterator0;
      iteratorArray0[5] = (Iterator<SQLSyntaxErrorException>) resettableListIterator0;
      iteratorArray0[6] = (Iterator<SQLSyntaxErrorException>) resettableListIterator0;
      iteratorArray0[7] = (Iterator<SQLSyntaxErrorException>) resettableListIterator0;
      iteratorArray0[8] = (Iterator<SQLSyntaxErrorException>) singletonIterator0;
      IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      IteratorUtils.size(iteratorArray0[7]);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 6);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(stack0);
      Stack<SQLSyntaxErrorException> stack1 = new Stack<SQLSyntaxErrorException>();
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) reverseListIterator0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) stack1);
      ListIteratorWrapper<SQLSyntaxErrorException> listIteratorWrapper0 = new ListIteratorWrapper<SQLSyntaxErrorException>(iterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) reverseListIterator0, (Iterator<? extends SQLSyntaxErrorException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OrderedIterator<ArrayList<ArrayDeque>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      int int0 = 1;
      SQLException sQLException0 = new SQLException((String) null, "Entry does not exist: ", 1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("1bEa0rzH`]O@?~+", sQLException0);
      MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends String>) null);
      OrderedIterator<Integer> orderedIterator1 = IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) orderedIterator1, (Iterator<? extends Integer>) orderedIterator1);
      IteratorUtils.emptyListIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException1, 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", (Throwable) null);
      Object object0 = new Object();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("axC*~eKSN28Dz", "iterator");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", "#2K6ue", (Throwable) null);
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.collatedIterator((Comparator<? super Integer>) null, (Iterator<? extends Integer>) orderedIterator0, (Iterator<? extends Integer>) orderedIterator0);
      IteratorUtils.emptyListIterator();
      EmptyOrderedIterator.emptyOrderedIterator();
      Integer integer0 = new Integer(61);
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      OrderedIterator<SQLTransientConnectionException> orderedIterator1 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      OrderedIterator<ArrayList<ArrayDeque>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) predicate0);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("l^", "]T @?BnQTu");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("]T @?BnQTu");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(iIOMetadataNode0, comparator0, comparatorPredicate_Criterion0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      predicateArray0[0] = (Predicate<Object>) comparatorPredicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = (Predicate<Object>) comparatorPredicate0;
      TransformerPredicate<Object> transformerPredicate1 = new TransformerPredicate<Object>(transformer0);
      predicateArray0[4] = (Predicate<Object>) transformerPredicate1;
      predicateArray0[5] = (Predicate<Object>) transformerPredicate0;
      predicateArray0[6] = (Predicate<Object>) transformerPredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>(predicateArray0);
      AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Locale.Category>) null, (Predicate<? super Locale.Category>) uniquePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      ExceptionClosure.exceptionClosure();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "CiC~", 1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("#lzQ$5v0).U", "#lzQ$5v0).U", 1, sQLIntegrityConstraintViolationException0);
      SQLWarning sQLWarning0 = new SQLWarning("", sQLSyntaxErrorException0);
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>(sQLWarning0);
      TransformerClosure<SQLWarning> transformerClosure0 = new TransformerClosure<SQLWarning>(transformer0);
      TransformerClosure.transformerClosure((Transformer<? super ServiceLoader<SQLWarning>, ?>) transformer0);
      TransformerClosure.transformerClosure((Transformer<? super ServiceLoader<SQLWarning>, ?>) transformer0);
      IteratorUtils.apply((Iterator<SQLWarning>) singletonIterator0, (Closure<? super SQLWarning>) transformerClosure0);
      sQLSyntaxErrorException0.getLocalizedMessage();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Transformer<SQLException, String> transformer1 = ConstantTransformer.constantTransformer("org.apache.commons.collections4.IterableUtils");
      assertNotNull(transformer1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      ExceptionClosure.exceptionClosure();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "CiC~", 1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("#lzQ$5v0).U", "#lzQ$5v0).U", 1, sQLIntegrityConstraintViolationException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLSyntaxErrorException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", "EmO");
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException();
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException1, true);
      Transformer<SQLException, String> transformer0 = ConstantTransformer.constantTransformer("|O1BasJ9");
      OrderedMapIterator<SQLTransactionRollbackException, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransactionRollbackException, SQLFeatureNotSupportedException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransactionRollbackException, ? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLFeatureNotSupportedException>(orderedMapIterator1);
      String string0 = IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) abstractOrderedMapIteratorDecorator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "2@|4m!|Gvb~V&", "/c)cGq=+)TM@XR#", "");
      assertEquals("/c)cGq=+)TM@XR#", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = iterator0;
      iteratorArray0[1] = iterator0;
      iteratorArray0[2] = (Iterator<SQLSyntaxErrorException>) resettableListIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", ">F/S", 10, (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLRecoverableException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(batchUpdateException0);
      IteratorUtils.getIterator(sQLTransactionRollbackException0);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      OrderedIterator<ArrayList<ArrayDeque>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      SQLException sQLException0 = new SQLException((String) null, "Entry does not exist: ", 1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("1bEa0rzH`]O@?~+", sQLException0);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Transformer<SQLTransactionRollbackException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends String>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) singletonIterator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, (String) null, "e", "Entry does not exist: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", (Throwable) null);
      sQLTransactionRollbackException0.getStackTrace();
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Transformer<SQLTransactionRollbackException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends String>) null);
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) singletonIterator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "", "", "Q@UCAIjf|~T");
      MapIterator<StringTokenizer, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterable<StringTokenizer> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) mapIterator0);
      assertNotNull(iterable0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) arrayList0);
      IteratorUtils.emptyOrderedIterator();
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      PredicateTransformer.predicateTransformer((Predicate<? super Object>) predicate1);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(predicateTransformer0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("]TE@?BQTu");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLTransientConnectionException0, comparator0, comparatorPredicate_Criterion0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Comparator<SQLException> comparator1 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 5);
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) resettableListIterator0;
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) resettableListIterator0;
      iteratorArray0[2] = (Iterator<SQLSyntaxErrorException>) resettableListIterator0;
      iteratorArray0[3] = (Iterator<SQLSyntaxErrorException>) resettableListIterator0;
      iteratorArray0[4] = (Iterator<SQLSyntaxErrorException>) resettableListIterator0;
      IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator1, (Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      int int0 = IteratorUtils.size(iteratorArray0[2]);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 6);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(stack0);
      Stack<SQLSyntaxErrorException> stack1 = new Stack<SQLSyntaxErrorException>();
      IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) reverseListIterator0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>((SQLSyntaxErrorException) null);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, HashSet<IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, HashSet<IIOMetadataNode>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, HashSet<IIOMetadataNode>>(orderedMapIterator0);
      IteratorUtils.isEmpty(abstractOrderedMapIteratorDecorator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTimeoutException0);
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("gx,g", "Uz9%B/@aGVBVJxvkBQc", 0, batchUpdateException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("gx,g", sQLIntegrityConstraintViolationException0);
      IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) null);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      OrderedMapIterator<String, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.isEmpty(orderedMapIterator0);
      ListIterator<Object> listIterator0 = IteratorUtils.toListIterator((Iterator<?>) orderedMapIterator0);
      ListIterator<Object> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      String string0 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      String string1 = "+SUs";
      IteratorUtils.isEmpty(listIterator1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("+SUs", "", (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLNonTransientConnectionException0);
      IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) stack0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Properties, SQLClientInfoException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      IteratorUtils.toString((Iterator<LinkedList<IIOMetadataNode>>) null);
      IteratorUtils.getIterator("[]");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("[]", "[]");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonListIterator<Locale.Category> singletonListIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.contains((Iterator<Locale.Category>) singletonListIterator0, (Object) sQLRecoverableException0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category0);
      IteratorUtils.contains((Iterator<Locale.Category>) listIterator0, (Object) listIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("List must not be null", "gBP,:8-:#8QE@Ean");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("sH<F", (String) null);
      int int0 = 10;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("gBP,:8-:#8QE@Ean", "gBP,:8-:#8QE@Ean", (-1543), sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("");
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[7];
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException1;
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("' on '", sQLTransactionRollbackException3);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException5;
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException1;
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException1;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0, (-1378));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) arrayList0);
      OrderedIterator<Locale.Category> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate2 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      PredicateTransformer.predicateTransformer((Predicate<? super Object>) predicate1);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(predicateTransformer0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("]TE@?BQTu");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLTransientConnectionException0, comparator0, comparatorPredicate_Criterion0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate2;
      predicateArray0[2] = (Predicate<Object>) transformerPredicate0;
      Predicate<Object> predicate3 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate2);
      predicateArray0[3] = predicate3;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>(predicateArray0);
      AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Locale.Category>) orderedIterator0, (Predicate<? super Locale.Category>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Iterator<Properties> iterator0 = null;
      ConstantTransformer.nullTransformer();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      String string0 = "#lzQ$5v0).U";
      int int0 = 1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "CiC~", 1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("#lzQ$5v0).U", "#lzQ$5v0).U", 1, sQLIntegrityConstraintViolationException0);
      SQLWarning sQLWarning0 = new SQLWarning("#lzQ$5v0).U", sQLSyntaxErrorException0);
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>(sQLWarning0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLWarning>) singletonIterator0, (Closure<? super SQLWarning>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, sQLException0);
      Predicate<SQLRecoverableException> predicate0 = EqualPredicate.equalPredicate(sQLRecoverableException0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[6];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("9!7w0e}d%I@w", sQLException0);
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException1;
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLRecoverableException>) resettableListIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      assertTrue(resettableListIterator0.hasPrevious());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "", (-129), sQLRecoverableException1);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("{XhvFsO?", "");
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("", "", 0, sQLRecoverableException0);
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Properties properties0 = new Properties();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IteratorUtils.loopingListIterator((List<Object>) linkedList0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(";LBOI1)HwC^xCso", "}$w`)Gk]V~vLm @6(#g");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(properties0, comparator0, comparatorPredicate_Criterion0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      ComparatorPredicate.Criterion comparatorPredicate_Criterion1 = ComparatorPredicate.Criterion.GREATER;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate1 = ComparatorPredicate.comparatorPredicate((Object) comparatorPredicate0, comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion1);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("$,x_fc<:<`-", hashtable0, sQLTimeoutException0);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate((Object) null, comparator2, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate1;
      predicateArray0[2] = (Predicate<Object>) comparatorPredicate0;
      predicateArray0[3] = predicate1;
      predicateArray0[4] = predicate0;
      predicateArray0[5] = predicate1;
      predicateArray0[6] = (Predicate<Object>) comparatorPredicate0;
      predicateArray0[7] = predicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate1);
      NotPredicate<Properties> notPredicate0 = new NotPredicate<Properties>(nullIsTruePredicate0);
      Predicate<Object> predicate2 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.filteredIterator((Iterator<? extends Properties>) listIterator0, (Predicate<? super Properties>) predicate2);
      IteratorUtils.toListIterator((Iterator<? extends Properties>) listIterator0);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[5];
      StringTokenizer stringTokenizer0 = new StringTokenizer("$,x_fc<:<`-", "|");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("$");
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("|", "org.apache.commons.collections4.bidimap.TreeBidiMap");
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("org.apache.commons.collections4.bidimap.TreeBidiMap");
      stringTokenizerArray0[3] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = null;
      try {
        stringTokenizer4 = new StringTokenizer((String) null, "$,x_fc<:<`-", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      OrderedMapIterator<String, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.isEmpty(orderedMapIterator0);
      ListIterator<Object> listIterator0 = IteratorUtils.toListIterator((Iterator<?>) orderedMapIterator0);
      ListIterator<Object> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      String string0 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      String string1 = "+SUs";
      IteratorUtils.isEmpty(listIterator1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("+SUs", "", (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLNonTransientConnectionException0);
      IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) stack0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", (Throwable) null);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Transformer<SQLTransactionRollbackException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends String>) null);
      String string0 = IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) singletonIterator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "Q@UCAIjf|~T", "|O1BasJ9", "6AnmP)t*J(LoM3");
      assertFalse(singletonIterator0.hasNext());
      assertEquals("|O1BasJ9null6AnmP)t*J(LoM3", string0);
      
      ArrayDeque<Properties>[] arrayDequeArray0 = (ArrayDeque<Properties>[]) Array.newInstance(ArrayDeque.class, 6);
      ArrayDeque<Properties> arrayDeque0 = new ArrayDeque<Properties>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<Properties> arrayDeque1 = new ArrayDeque<Properties>();
      arrayDequeArray0[1] = arrayDeque1;
      ArrayDeque<Properties> arrayDeque2 = new ArrayDeque<Properties>();
      arrayDequeArray0[2] = arrayDeque2;
      ArrayDeque<Properties> arrayDeque3 = new ArrayDeque<Properties>();
      arrayDequeArray0[3] = arrayDeque3;
      ArrayDeque<Properties> arrayDeque4 = new ArrayDeque<Properties>();
      arrayDequeArray0[4] = arrayDeque4;
      ArrayDeque<Properties> arrayDeque5 = new ArrayDeque<Properties>();
      arrayDequeArray0[5] = arrayDeque5;
      IteratorUtils.arrayListIterator(arrayDequeArray0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[9];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("Q@UCAIjf|~T");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode("Q@UCAIjf|~T");
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode("|O1BasJ9");
      iIOMetadataNodeArray0[7] = iIOMetadataNode7;
      IIOMetadataNode iIOMetadataNode8 = new IIOMetadataNode();
      iIOMetadataNodeArray0[8] = iIOMetadataNode8;
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      IteratorUtils.toString((Iterator<IIOMetadataNode>) objectArrayListIterator0);
      assertEquals(8, objectArrayListIterator0.previousIndex());
      assertEquals(9, objectArrayListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 6);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) zippingIterator0;
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) orderedIterator0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 1471, (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLNonTransientConnectionException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      iteratorArray0[2] = (Iterator<SQLSyntaxErrorException>) listIterator0;
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(stack0);
      iteratorArray0[3] = (Iterator<SQLSyntaxErrorException>) reverseListIterator0;
      stack0.add(sQLSyntaxErrorException0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) iteratorArray0[3]);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) stack0);
      iteratorArray0[4] = iterator0;
      sQLSyntaxErrorException0.fillInStackTrace();
      Iterator<SQLSyntaxErrorException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) iteratorArray0[1], (Iterator<? extends SQLSyntaxErrorException>) iteratorArray0[2]);
      iteratorArray0[5] = iterator1;
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.constantTransformer(iIOMetadataNode0);
      Iterator<IIOMetadataNode> iterator2 = IteratorUtils.transformedIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Transformer<? super SQLFeatureNotSupportedException, ? extends IIOMetadataNode>) transformer0);
      Iterator<IIOMetadataNode> iterator3 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) iterator2, (Iterator<? extends IIOMetadataNode>) iterator2);
      assertFalse(iterator3.equals((Object)iterator2));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ExceptionClosure.exceptionClosure();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Iterator must not be null");
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLRecoverableException>) singletonListIterator0, (Predicate<? super SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<?>) null, (Predicate<? super Object>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) transformer0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      predicateArray0[0] = (Predicate<Object>) transformedPredicate0;
      Predicate<Object> predicate1 = NotNullPredicate.notNullPredicate();
      predicateArray0[1] = predicate1;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(" y", " y");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLTimeoutException0, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[2] = (Predicate<Object>) comparatorPredicate0;
      Predicate<Object> predicate2 = FalsePredicate.falsePredicate();
      predicateArray0[3] = predicate2;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion1 = ComparatorPredicate.Criterion.GREATER;
      Predicate<Object> predicate3 = ComparatorPredicate.comparatorPredicate((Object) predicate2, comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion1);
      predicateArray0[4] = predicate3;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashtable0, sQLTimeoutException0);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate4 = ComparatorPredicate.comparatorPredicate((Object) sQLClientInfoException0, comparator2, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion1);
      predicateArray0[5] = predicate4;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(onePredicate0);
      NotPredicate<Properties> notPredicate0 = new NotPredicate<Properties>(nullIsTruePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Properties>) null, (Predicate<? super Properties>) notPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 6);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) zippingIterator0;
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) orderedIterator0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 1471, (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLNonTransientConnectionException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      iteratorArray0[2] = (Iterator<SQLSyntaxErrorException>) listIterator0;
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(stack0);
      iteratorArray0[3] = (Iterator<SQLSyntaxErrorException>) reverseListIterator0;
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) iteratorArray0[3]);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) stack0);
      iteratorArray0[4] = iterator0;
      Iterator<SQLSyntaxErrorException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) iteratorArray0[1], (Iterator<? extends SQLSyntaxErrorException>) iteratorArray0[2]);
      iteratorArray0[5] = iterator1;
      ZippingIterator<SQLSyntaxErrorException> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      assertNotSame(zippingIterator1, zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Transformer<Object, DataTruncation>[] transformerArray0 = (Transformer<Object, DataTruncation>[]) Array.newInstance(Transformer.class, 3);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.nullTransformer();
      transformerArray0[0] = transformer0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "", 100);
      DataTruncation dataTruncation0 = new DataTruncation(100, true, true, (-2724), (-2724), sQLNonTransientException0);
      ConstantTransformer<Object, DataTruncation> constantTransformer0 = new ConstantTransformer<Object, DataTruncation>(dataTruncation0);
      transformerArray0[1] = (Transformer<Object, DataTruncation>) constantTransformer0;
      HashMap<Object, DataTruncation> hashMap0 = new HashMap<Object, DataTruncation>();
      Transformer<Object, DataTruncation> transformer1 = MapTransformer.mapTransformer((Map<? super Object, ? extends DataTruncation>) hashMap0);
      transformerArray0[2] = transformer1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(transformerArray0, 4046);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = "\\`l7K{zo7?rm";
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("w7o<q}STlw32F5M", "`l7K{zo7?rm", (-2376), hashtable0);
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLClientInfoException>) singletonListIterator0);
      singletonListIterator0.next();
      String string1 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashtable0.getOrDefault(iIOMetadataNode0, clientInfoStatus0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLClientInfoException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      OrderedMapIterator<String, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.isEmpty(orderedMapIterator0);
      ListIterator<Object> listIterator0 = IteratorUtils.toListIterator((Iterator<?>) orderedMapIterator0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      String string0 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      String string1 = "+SUs";
      iIOMetadataNode0.getAttributeNodeNS("", "+SUs");
      // Undeclared exception!
      try { 
        iIOMetadataNode0.setAttributeNode((Attr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) stack0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[8];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Eo]28:GJ]:-l");
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.apache.commons.collections4.map.AbstractHashedMap", "org.apache.commons.collections4.map.AbstractHashedMap", sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Cursor closed", "Cursor closed", sQLTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLTransactionRollbackException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("7m>V8H", "", sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("7m>V8H", sQLFeatureNotSupportedException2);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.map.AbstractHashedMap", "7m>V8H", sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", sQLTransientException0);
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException6;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException7 = new SQLFeatureNotSupportedException("Cursor closed", sQLFeatureNotSupportedException5);
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException7;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException8 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[7] = sQLFeatureNotSupportedException8;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator1 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      assertFalse(resettableIterator1.equals((Object)resettableIterator0));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category0);
      BoundedIterator<Locale.Category> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Locale.Category>) listIterator0, 0L, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<SQLFeatureNotSupportedException, Properties> hashMap0 = new HashMap<SQLFeatureNotSupportedException, Properties>();
      String string0 = "?k#uU7BJBEL7SUrMj";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("?k#uU7BJBEL7SUrMj");
      sQLFeatureNotSupportedException0.getSuppressed();
      Properties properties0 = new Properties();
      hashMap0.put(sQLFeatureNotSupportedException0, properties0);
      SingletonListIterator<HashMap<SQLFeatureNotSupportedException, Properties>> singletonListIterator0 = new SingletonListIterator<HashMap<SQLFeatureNotSupportedException, Properties>>(hashMap0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      IteratorUtils.find((Iterator<HashMap<SQLFeatureNotSupportedException, Properties>>) singletonListIterator0, (Predicate<? super HashMap<SQLFeatureNotSupportedException, Properties>>) notPredicate0);
      ArrayListIterator<SQLTransientConnectionException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLTransientConnectionException>((Object) null, (-4192));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ResettableIterator<PriorityQueue<EnumSet>> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(264);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1569);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1888);
      integerArray0[2] = integer2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(integerArray0, (int) integerArray0[2], 1883);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = "";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("b(=Tmlu_&h*tWm");
      StackTraceElement[] stackTraceElementArray0 = sQLSyntaxErrorException0.getStackTrace();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      PrintStream printStream0 = mockPrintStream0.format("", (Object[]) stackTraceElementArray0);
      sQLFeatureNotSupportedException0.printStackTrace(printStream0);
      sQLSyntaxErrorException0.setNextException(sQLFeatureNotSupportedException0);
      sQLSyntaxErrorException0.initCause(sQLFeatureNotSupportedException0);
      sQLSyntaxErrorException0.forEach(consumer0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<SQLFeatureNotSupportedException, Properties> hashMap0 = new HashMap<SQLFeatureNotSupportedException, Properties>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("?k#uU7BJBEL7SUrMj");
      sQLFeatureNotSupportedException0.getSuppressed();
      Properties properties0 = new Properties();
      hashMap0.put(sQLFeatureNotSupportedException0, properties0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      AnyPredicate<SQLIntegrityConstraintViolationException> anyPredicate0 = new AnyPredicate<SQLIntegrityConstraintViolationException>(predicateArray0);
      IteratorUtils.singletonListIterator((Predicate<SQLIntegrityConstraintViolationException>) anyPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) predicateArray0[6]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLWarning0);
      IteratorUtils.find((Iterator<SQLWarning>) null, (Predicate<? super SQLWarning>) identityPredicate0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, (Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLRecoverableException0, 10, (-1777));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.singletonListIterator(properties0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IteratorUtils.loopingListIterator((List<Object>) linkedList0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 5);
      StringTokenizer stringTokenizer0 = new StringTokenizer(";LBOI1)HwC^xCso", "$,x_fc<:<`-", false);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) stringTokenizer0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator";
      String string1 = "";
      int int0 = 2135;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", "", 2135, sQLClientInfoException0);
      sQLClientInfoException0.spliterator();
      sQLNonTransientConnectionException0.getStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 3);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>(vector0);
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(linkedList0);
      iteratorArray0[0] = (Iterator<SQLDataException>) loopingIterator0;
      Iterator<SQLDataException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLDataException>) loopingIterator0);
      iteratorArray0[1] = iterator0;
      OrderedMapIterator<SQLDataException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[2] = (Iterator<SQLDataException>) orderedMapIterator0;
      Iterator<SQLDataException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) iterator1);
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(iteratorArray0);
      objectArrayListIterator0.hasNext();
      Object object0 = new Object();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[3];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("axC*~eKSN28Dz", "axC*~eKSN28Dz");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("axC*~eKSN28Dz", "", sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("", "axC*~eKSN28Dz", 12);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) objectArrayIterator0, 682);
      assertFalse(objectArrayIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category0);
      IteratorUtils.contains((Iterator<Locale.Category>) listIterator0, (Object) listIterator0);
      assertTrue(listIterator0.hasPrevious());
      
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 2);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>((SQLSyntaxErrorException) null);
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) singletonIterator0;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) resettableListIterator0;
      IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      int int0 = IteratorUtils.size(singletonIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, HashSet<IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, HashSet<IIOMetadataNode>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, HashSet<IIOMetadataNode>>(orderedMapIterator0);
      IteratorUtils.isEmpty(abstractOrderedMapIteratorDecorator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      sQLTimeoutException0.printStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      OrderedIterator<ArrayList<ArrayDeque>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.contains((Iterator<HashSet<Integer>>) null, (Object) null);
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[6];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("ListIterator must not be null", "org.apache.commons.collections4.map.AbstractReferenceMap$SoftRef", 100);
      SQLTransientException sQLTransientException0 = new SQLTransientException("P5", sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "ListIterator must not be null", sQLTransientException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException2;
      sQLInvalidAuthorizationSpecException0.initCause(sQLInvalidAuthorizationSpecException2);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("", "", 5);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException3;
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "|Jh(~}L8~}8", 100, intArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("R*Sx<N3", (String) null, batchUpdateException0);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException5;
      batchUpdateException0.spliterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.map.AbstractHashedMap$ValuesIterator");
      sQLTransientException0.fillInStackTrace();
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException6;
      IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttributeNode("P5");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      OrderedMapIterator<ArrayDeque<SQLDataException>, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<ArrayDeque<SQLDataException>, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<ArrayDeque<SQLDataException>, Object>(orderedMapIterator0);
      long long0 = 0L;
      IteratorUtils.skippingIterator((Iterator<ArrayDeque<SQLDataException>>) abstractOrderedMapIteratorDecorator0, 0L);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("a^$Z");
      SQLDataException sQLDataException0 = new SQLDataException("a^$Z", "a^$Z", 128, sQLTransactionRollbackException0);
      ArrayListIterator<DataTruncation> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<DataTruncation>(sQLDataException0, 128, 128);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[8];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("REayy<BwO`ooQt4I`", intArray0, batchUpdateException1);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("50Jd$Y", intArray0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 3;
      longArray0[1] = 0L;
      longArray0[2] = (long) 3;
      longArray0[3] = (long) 3;
      longArray0[4] = (long) 3;
      longArray0[5] = (long) 583;
      longArray0[6] = (long) 3;
      longArray0[7] = (long) 3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("f4I#l?", "REayy<BwO`ooQt4I`", 583, longArray0, batchUpdateException3);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException("", "", 3, intArray0);
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      BatchUpdateException batchUpdateException7 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[7] = batchUpdateException7;
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) objectArrayListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      MapIterator<Object, ArrayList<SQLTransactionRollbackException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<Object, ArrayList<SQLTransactionRollbackException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      int int0 = 1919;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) mapIterator1, 1919);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Iterator<Integer> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-2127));
      integerArray0[0] = integer0;
      int int0 = 10;
      Integer integer1 = new Integer(10);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(602);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-2752));
      integerArray0[5] = integer5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, (-2127), (-696));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(221);
      integerArray0[0] = integer0;
      int int0 = 1;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      objectArrayListIterator0.next();
      objectArrayListIterator0.hasNext();
      IteratorUtils.chainedIterator((Iterator<? extends Integer>) objectArrayListIterator0, (Iterator<? extends Integer>) objectArrayListIterator0);
      String string0 = "transformer may not be null";
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("transformer may not be null", (Map<String, ClientInfoStatus>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException0, (-1095));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(", ", sQLTransientConnectionException0);
      sQLTransientConnectionException0.addSuppressed(sQLNonTransientException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(", ", sQLTransientConnectionException0);
      sQLTransientConnectionException0.setNextException(sQLTransientConnectionException1);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      IteratorUtils.isEmpty(listIterator0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[7];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.FORMAT;
      locale_CategoryArray0[4] = locale_Category4;
      Locale.Category locale_Category5 = Locale.Category.DISPLAY;
      locale_CategoryArray0[5] = locale_Category5;
      Locale.Category locale_Category6 = Locale.Category.FORMAT;
      locale_CategoryArray0[6] = locale_Category6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(locale_CategoryArray0, (-1089), (-1089));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      long long0 = (-2133L);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) orderedIterator0, (-2133L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[2];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("qsY/", "qsY/");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "qsY/", sQLTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLIntegrityConstraintViolationException0);
      sQLExceptionArray0[0] = (SQLException) sQLNonTransientConnectionException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      sQLExceptionArray0[1] = (SQLException) sQLTimeoutException0;
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.setAttribute("JV8N/w!4]4N)`", "(i%%M0P>");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("", "JV8N/w!4]4N)`");
      IteratorUtils.nodeListIterator(nodeList0);
      IteratorUtils.emptyMapIterator();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[9];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("(i%%M0P>");
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLException sQLException0 = new SQLException(sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("gBP,:8-:#8QE@Ean", "List must not be null");
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("gBP,:8-:#8QE@Ean", "List must not be null");
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException("' on '", "sH<F");
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      SQLTransactionRollbackException sQLTransactionRollbackException7 = new SQLTransactionRollbackException("sH<F", "' on '", 10, sQLTransactionRollbackException2);
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException7;
      SQLTransactionRollbackException sQLTransactionRollbackException8 = new SQLTransactionRollbackException("Predicate must not be null");
      sQLTransactionRollbackExceptionArray0[8] = sQLTransactionRollbackException8;
      int int0 = (-1378);
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0, (-1378));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("");
      int int0 = (-791);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLWarning0, 0, (-791));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLWarning>) resettableListIterator0, (Closure<? super SQLWarning>) closure0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getLocalizedMessage();
      SQLException sQLException0 = new SQLException(sQLClientInfoException0);
      sQLClientInfoException0.addSuppressed(sQLException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException0, (-1294));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
