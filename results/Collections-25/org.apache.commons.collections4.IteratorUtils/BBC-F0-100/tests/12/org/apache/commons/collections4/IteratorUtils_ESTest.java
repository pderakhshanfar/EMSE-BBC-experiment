/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:33:21 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      IteratorUtils.toString((Iterator<LinkedList<IIOMetadataNode>>) null);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[25];
      IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Boolean>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<SQLFeatureNotSupportedException, Properties>[] hashMapArray0 = (HashMap<SQLFeatureNotSupportedException, Properties>[]) Array.newInstance(HashMap.class, 1);
      HashMap<SQLFeatureNotSupportedException, Properties> hashMap0 = new HashMap<SQLFeatureNotSupportedException, Properties>();
      hashMapArray0[0] = hashMap0;
      ResettableIterator<HashMap<SQLFeatureNotSupportedException, Properties>> resettableIterator0 = IteratorUtils.arrayIterator(hashMapArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<HashMap<SQLFeatureNotSupportedException, Properties>>) resettableIterator0, (Predicate<? super HashMap<SQLFeatureNotSupportedException, Properties>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getLocalizedMessage();
      SQLException sQLException0 = new SQLException(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IdentityPredicate<Locale.Category> identityPredicate0 = new IdentityPredicate<Locale.Category>(locale_Category0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(";T0lex");
      IdentityPredicate.identityPredicate(sQLTransactionRollbackException0);
      IteratorUtils.matchesAny((Iterator<Locale.Category>) null, (Predicate<? super Locale.Category>) identityPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Boolean>) null, (Iterator<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      OrderedMapIterator<ClientInfoStatus, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<ClientInfoStatus, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<ClientInfoStatus, String>(orderedMapIterator0);
      AbstractMapIteratorDecorator<ClientInfoStatus, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<ClientInfoStatus, String>(abstractOrderedMapIteratorDecorator0);
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      IteratorUtils.find((Iterator<ClientInfoStatus>) abstractMapIteratorDecorator0, (Predicate<? super ClientInfoStatus>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 123);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<SQLFeatureNotSupportedException, Properties> hashMap0 = new HashMap<SQLFeatureNotSupportedException, Properties>();
      SingletonListIterator<HashMap<SQLFeatureNotSupportedException, Properties>> singletonListIterator0 = new SingletonListIterator<HashMap<SQLFeatureNotSupportedException, Properties>>(hashMap0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      IteratorUtils.find((Iterator<HashMap<SQLFeatureNotSupportedException, Properties>>) singletonListIterator0, (Predicate<? super HashMap<SQLFeatureNotSupportedException, Properties>>) notPredicate0);
      HashSet<Boolean> hashSet0 = new HashSet<Boolean>();
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonListIterator<Locale.Category> singletonListIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) uniquePredicate0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) null, (Predicate<? super Properties>) transformerPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      EmptyIterator.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>((Transformer<? super Object, ?>) null, predicate0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      Properties properties0 = new Properties();
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      ListIterator<Properties> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Properties>) singletonListIterator0);
      ListIterator<Properties> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) listIterator0, (Predicate<? super Properties>) allPredicate0);
      IteratorUtils.filteredIterator((Iterator<? extends Properties>) singletonListIterator0, (Predicate<? super Properties>) predicate0);
      IteratorUtils.singletonIterator(properties0);
      IteratorUtils.toListIterator((Iterator<? extends Properties>) listIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) listIterator1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AllPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) predicate1);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>(predicateArray0);
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) listIterator0, (Predicate<? super Properties>) predicate0);
      HashSet<Integer>[] hashSetArray0 = (HashSet<Integer>[]) Array.newInstance(HashSet.class, 6);
      HashSet<Integer> hashSet0 = new HashSet<Integer>(3, 3);
      hashSetArray0[0] = hashSet0;
      HashSet<Integer> hashSet1 = new HashSet<Integer>();
      hashSetArray0[1] = hashSet1;
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      hashSetArray0[2] = (HashSet<Integer>) linkedHashSet0;
      HashSet<Integer> hashSet2 = new HashSet<Integer>();
      hashSetArray0[3] = hashSet2;
      HashSet<Integer> hashSet3 = new HashSet<Integer>();
      hashSetArray0[4] = hashSet3;
      HashSet<Integer> hashSet4 = new HashSet<Integer>();
      hashSetArray0[5] = hashSet4;
      ObjectArrayListIterator<HashSet<Integer>> objectArrayListIterator0 = new ObjectArrayListIterator<HashSet<Integer>>(hashSetArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<HashSet<Integer>>) objectArrayListIterator0, (Predicate<? super HashSet<Integer>>) allPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AllPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", (Throwable) null);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ArrayList<Class<Properties>> arrayList0 = new ArrayList<Class<Properties>>();
      Class<Properties> class0 = Properties.class;
      arrayList0.add(class0);
      ResettableListIterator<Class<Properties>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Class<Properties>>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableListIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Iterator<SQLException>[] iteratorArray0 = (Iterator<SQLException>[]) Array.newInstance(Iterator.class, 6);
      SQLException[] sQLExceptionArray0 = new SQLException[3];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Z", "org.apache.commons.collections4.map.AbstractReferenceMap$SoftRef", 0);
      sQLExceptionArray0[0] = (SQLException) sQLNonTransientException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLNonTransientException0);
      sQLExceptionArray0[1] = (SQLException) sQLTransactionRollbackException0;
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLExceptionArray0[2] = (SQLException) sQLDataException0;
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0);
      iteratorArray0[0] = (Iterator<SQLException>) resettableIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLException>) resettableIterator0, (long) 0, (-4574L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[18];
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.arrayListIterator(booleanArray0);
      ListIterator<Boolean> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Boolean>) resettableListIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends Boolean>) resettableListIterator0, (Iterator<? extends Boolean>) resettableListIterator0, (Iterator<? extends Boolean>) listIterator0);
      Class<Boolean> class0 = Boolean.class;
      IteratorUtils.toArray((Iterator<? extends Boolean>) listIterator0, class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<SQLFeatureNotSupportedException, Properties> hashMap0 = new HashMap<SQLFeatureNotSupportedException, Properties>();
      SingletonListIterator<HashMap<SQLFeatureNotSupportedException, Properties>> singletonListIterator0 = new SingletonListIterator<HashMap<SQLFeatureNotSupportedException, Properties>>(hashMap0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      IteratorUtils.find((Iterator<HashMap<SQLFeatureNotSupportedException, Properties>>) singletonListIterator0, (Predicate<? super HashMap<SQLFeatureNotSupportedException, Properties>>) notPredicate0);
      HashSet<Boolean> hashSet0 = new HashSet<Boolean>();
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) uniquePredicate0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      predicateArray0[0] = (Predicate<Object>) notPredicate0;
      predicateArray0[1] = (Predicate<Object>) transformerPredicate0;
      predicateArray0[2] = (Predicate<Object>) transformerPredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Locale.Category>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      EmptyIterator.emptyIterator();
      MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends String>) null);
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("L&C]A;-", (Throwable) null);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getLocalizedMessage();
      SQLException sQLException0 = new SQLException(sQLClientInfoException0);
      sQLClientInfoException0.addSuppressed(sQLTransactionRollbackException0);
      IteratorUtils.toList((Iterator<? extends SQLException>) singletonIterator0);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      OrderedMapIterator<Boolean, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Boolean, SQLNonTransientConnectionException> orderedMapIterator1 = new AbstractOrderedMapIteratorDecorator<Boolean, SQLNonTransientConnectionException>(orderedMapIterator0);
      Integer integer0 = new Integer(3151);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLClientInfoException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("L&C]A;-", (Throwable) null);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getLocalizedMessage();
      SQLException sQLException0 = new SQLException(sQLClientInfoException0);
      sQLClientInfoException0.addSuppressed(sQLTransactionRollbackException0);
      IteratorUtils.toString((Iterator<LinkedList<IIOMetadataNode>>) null);
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      PriorityQueue<Boolean> priorityQueue1 = new PriorityQueue<Boolean>();
      LoopingIterator<Boolean> loopingIterator0 = new LoopingIterator<Boolean>(priorityQueue1);
      MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends String>) null);
      String string0 = ") greater than the size of the ";
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) singletonIterator0, (Transformer<? super SQLTransactionRollbackException, String>) null, ") greater than the size of the ", "|O1BasJ9", "L&C]A;-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", (Throwable) null);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[8];
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[5] = (SQLTransientException) sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", "6U^|(>s%u&T", sQLTransientExceptionArray0[0]);
      sQLTransientExceptionArray0[6] = (SQLTransientException) sQLTransactionRollbackException1;
      sQLTransientExceptionArray0[7] = (SQLTransientException) sQLTransactionRollbackException0;
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      ArrayDeque<Boolean> arrayDeque0 = new ArrayDeque<Boolean>();
      LoopingIterator<Boolean> loopingIterator0 = new LoopingIterator<Boolean>(arrayDeque0);
      Consumer<Boolean> consumer0 = (Consumer<Boolean>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      loopingIterator0.forEachRemaining(consumer0);
      loopingIterator0.hasNext();
      IteratorUtils.get((Iterator<SQLTransientException>) resettableIterator0, 1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransientExceptionArray0[7]);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTransientConnectionException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("6U^|(>s%u&T");
      iIOMetadataNode0.getLastChild();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("L&C]A;-", (Throwable) null);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getLocalizedMessage();
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", sQLTransactionRollbackException0);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator1 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException1);
      Transformer<SQLTransactionRollbackException, String> transformer0 = new ConstantTransformer<SQLTransactionRollbackException, String>((String) null);
      Class<String> class0 = String.class;
      Class<SQLTransientConnectionException>[] classArray0 = (Class<SQLTransientConnectionException>[]) Array.newInstance(Class.class, 0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) singletonIterator1;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0, classArray0, objectArray0);
      Transformer<Object, String> transformer1 = FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) singletonIterator1, (Transformer<? super SQLTransactionRollbackException, String>) transformer1, "", "7", "|O1BasJ9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Array class must not be null");
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      EmptyListIterator.emptyListIterator();
      LinkedHashSet<SQLNonTransientConnectionException>[] linkedHashSetArray0 = (LinkedHashSet<SQLNonTransientConnectionException>[]) Array.newInstance(LinkedHashSet.class, 3);
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientConnectionException>();
      linkedHashSetArray0[0] = linkedHashSet0;
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet1 = new LinkedHashSet<SQLNonTransientConnectionException>();
      linkedHashSetArray0[1] = linkedHashSet1;
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet2 = new LinkedHashSet<SQLNonTransientConnectionException>();
      linkedHashSetArray0[2] = linkedHashSet2;
      IteratorUtils.arrayListIterator(linkedHashSetArray0);
      MapIterator<SQLRecoverableException, Stack<SQLClientInfoException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) mapIterator0, (Iterator<? extends SQLRecoverableException>) mapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PriorityQueue<ClientInfoStatus> priorityQueue0 = new PriorityQueue<ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      priorityQueue0.add(clientInfoStatus0);
      IteratorUtils.loopingIterator((Collection<? extends ClientInfoStatus>) priorityQueue0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("ListIterator must not be null", hashtable0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashtable0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLWarning sQLWarning0 = new SQLWarning("transformer may not be null", "ListIterator must not be null", sQLClientInfoException1);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(hashtable0, sQLWarning0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("transformer may not be null", "transformer may not be null", hashMap0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      ObjectArrayIterator<SQLClientInfoException> objectArrayIterator0 = new ObjectArrayIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLClientInfoException>) objectArrayIterator0, (Object) sQLClientInfoException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonListIterator<Locale.Category> singletonListIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) uniquePredicate0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = (Predicate<Object>) transformerPredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>[]) iteratorArray0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Locale.Category>) singletonListIterator0, (Predicate<? super Locale.Category>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("L&C]A;-", (Throwable) null);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getLocalizedMessage();
      sQLClientInfoException0.getLocalizedMessage();
      IteratorUtils.unmodifiableIterator((Iterator<SQLTransactionRollbackException>) singletonIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HashMap<SQLFeatureNotSupportedException, Properties> hashMap0 = new HashMap<SQLFeatureNotSupportedException, Properties>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("L&C]A;-", (Throwable) null);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getLocalizedMessage();
      SQLException sQLException0 = new SQLException(sQLClientInfoException0);
      sQLClientInfoException0.addSuppressed(sQLTransactionRollbackException0);
      IteratorUtils.toString((Iterator<LinkedList<IIOMetadataNode>>) null);
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      PriorityQueue<Boolean> priorityQueue1 = new PriorityQueue<Boolean>();
      LoopingIterator<Boolean> loopingIterator0 = new LoopingIterator<Boolean>(priorityQueue1);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[25];
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[5] = (SQLTransientException) sQLTransactionRollbackException0;
      IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      String[] stringArray0 = new String[0];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0, 0, 0);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) resettableIterator0);
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends String>) iterator0);
      OrderedMapIterator<Boolean, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Boolean, SQLNonTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Boolean, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Boolean, ? extends SQLNonTransientConnectionException>) orderedMapIterator1);
      Integer integer0 = new Integer(3151);
      Iterator<?> iterator1 = IteratorUtils.getIterator(enumeration0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<Properties, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, Properties>(orderedMapIterator0);
      OrderedMapIterator<Properties, Properties> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Properties, ? extends Properties>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Properties>) orderedMapIterator1, (-712L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[18];
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.arrayListIterator(booleanArray0);
      ZippingIterator<Boolean> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Boolean>) resettableListIterator0, (Iterator<? extends Boolean>) resettableListIterator0, (Iterator<? extends Boolean>) resettableListIterator0);
      Class<Boolean> class0 = Boolean.class;
      IteratorUtils.toArray((Iterator<? extends Boolean>) zippingIterator0, class0);
      MapIterator<SQLInvalidAuthorizationSpecException, Stack<SQLFeatureNotSupportedException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.emptyOrderedMapIterator();
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("org.apache.commons.collections4.iterators.EmptyMapIterator");
      IteratorUtils.asMultipleUseIterable((Iterator<? extends String>) listIterator0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) predicate0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      predicateArray0[0] = (Predicate<Object>) transformerPredicate0;
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate1);
      predicateArray0[2] = predicate2;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(vector0, defaultEquator0);
      predicateArray0[3] = (Predicate<Object>) equalPredicate0;
      predicateArray0[4] = (Predicate<Object>) transformerPredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>(predicateArray0);
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      EqualPredicate<Object> equalPredicate1 = new EqualPredicate<Object>(predicate2, defaultEquator0);
      ListIterator<Properties> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) listIterator0, (Predicate<? super Properties>) equalPredicate1);
      IteratorUtils.filteredIterator((Iterator<? extends Properties>) listIterator1, (Predicate<? super Properties>) predicateArray0[4]);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      OrderedMapIterator<Boolean, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Boolean, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Iterator<SQLTimeoutException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.singletonListIterator(locale_Category0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) uniquePredicate0);
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) predicate0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate1 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate1);
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) vector0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransactionRollbackException>) resettableListIterator0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>((String) null);
      Transformer<SQLTransactionRollbackException, String> transformer1 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) listIterator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer1, (String) null, "v2F|,PW~!", "|O1BasJ9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Transformer<SQLTransactionRollbackException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends String>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) singletonIterator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, (String) null, "iterator", "org.apache.commons.collections4.iterators.NodeListIterator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<SQLFeatureNotSupportedException, Properties> hashMap0 = new HashMap<SQLFeatureNotSupportedException, Properties>();
      SingletonListIterator<HashMap<SQLFeatureNotSupportedException, Properties>> singletonListIterator0 = new SingletonListIterator<HashMap<SQLFeatureNotSupportedException, Properties>>(hashMap0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      IteratorUtils.find((Iterator<HashMap<SQLFeatureNotSupportedException, Properties>>) singletonListIterator0, (Predicate<? super HashMap<SQLFeatureNotSupportedException, Properties>>) notPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      predicateArray0[0] = (Predicate<Object>) notPredicate0;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Boolean>) null, 1454);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Iterator<SQLTransactionRollbackException> iterator0 = EmptyIterator.emptyIterator();
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      Iterable<SQLTransactionRollbackException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLTransactionRollbackException>) iterator1);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      // Undeclared exception!
      try { 
        ComparatorPredicate.comparatorPredicate((Object) iterable0, (Comparator<Object>) null, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator must not be null.
         //
         verifyException("org.apache.commons.collections4.functors.ComparatorPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", (-1473));
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) resettableIterator0, (Iterator<? extends SQLTransientException>) resettableIterator0, (Iterator<? extends SQLTransientException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Locale.Category[]) null, 1073741824, 1073741824);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IteratorUtils.emptyIterator();
      MapIterator<SQLSyntaxErrorException, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) mapIterator0);
      IteratorUtils.toList((Iterator<? extends SQLException>) mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      predicateArray0[0] = predicate1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      DefaultEquator.defaultEquator();
      Predicate<Object> predicate2 = OrPredicate.orPredicate((Predicate<? super Object>) predicate1, (Predicate<? super Object>) predicate1);
      predicateArray0[2] = predicate2;
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate1, predicate1);
      predicateArray0[3] = (Predicate<Object>) orPredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[4] = (Predicate<Object>) nonePredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[5] = (Predicate<Object>) anyPredicate0;
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[6] = (Predicate<Object>) instanceofPredicate0;
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      SwitchTransformer<Object, String> switchTransformer0 = new SwitchTransformer<Object, String>(predicateArray0, (Transformer<? super Object, ? extends String>[]) null, transformer0);
      String string0 = IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) null, (Transformer<? super SQLTransactionRollbackException, String>) switchTransformer0, "", "org.apache.commons.collections4.iterators.IteratorEnumeration", "");
      assertEquals("org.apache.commons.collections4.iterators.IteratorEnumeration", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>((SQLTransactionRollbackException) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", (Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", "", 1396);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator1 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException1);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends String>) hashMap0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>((String) null, classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) singletonIterator1, (Transformer<? super SQLTransactionRollbackException, String>) invokerTransformer0, "rK;MX$", "Q@UCAIjf|~T", "org.apache.commons.collections4.iterators.UnmodifiableMapIterator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("L&C]A;-", (Throwable) null);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getLocalizedMessage();
      SQLException sQLException0 = new SQLException(sQLClientInfoException0);
      sQLClientInfoException0.addSuppressed(sQLTransactionRollbackException0);
      IteratorUtils.toString((Iterator<LinkedList<IIOMetadataNode>>) null);
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      PriorityQueue<Boolean> priorityQueue1 = new PriorityQueue<Boolean>();
      LoopingIterator<Boolean> loopingIterator0 = new LoopingIterator<Boolean>(priorityQueue1);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[25];
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[5] = (SQLTransientException) sQLTransactionRollbackException0;
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      loopingIterator0.hasNext();
      IteratorUtils.get((Iterator<SQLTransientException>) resettableIterator0, 18);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      LinkedList<ArrayDeque<SQLFeatureNotSupportedException>> linkedList0 = new LinkedList<ArrayDeque<SQLFeatureNotSupportedException>>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNode0.getAttributeNodeNS("L&C]A;-", "");
      OrderedMapIterator<String, SQLException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<String, SQLException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, SQLException>(orderedMapIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends String>) abstractOrderedMapIteratorDecorator0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) equalPredicate0, (Closure<? super Object>) closure0, true);
      IteratorUtils.apply((Iterator<SQLTransientException>) resettableIterator0, (Closure<? super SQLTransientException>) closure0);
      assertFalse(closure0.equals((Object)closure1));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[18];
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.arrayListIterator(booleanArray0);
      ZippingIterator<Boolean> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Boolean>) resettableListIterator0, (Iterator<? extends Boolean>) resettableListIterator0, (Iterator<? extends Boolean>) resettableListIterator0);
      Class<Boolean> class0 = Boolean.class;
      IteratorUtils.toArray((Iterator<? extends Boolean>) zippingIterator0, class0);
      IteratorUtils.emptyMapIterator();
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>((SQLTransactionRollbackException) null);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) singletonIterator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "Predicate must not be null", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) uniquePredicate0);
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) predicate0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(transformer0, comparator0, comparatorPredicate_Criterion0);
      Predicate<Object> predicate1 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = (Predicate<Object>) transformerPredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>(predicateArray0);
      AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>[]) iteratorArray0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Locale.Category>) listIterator0, (Predicate<? super Locale.Category>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.singletonListIterator(locale_Category0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "DaC|Q7<l[`ZI\u00039");
      DataTruncation dataTruncation0 = new DataTruncation((-1379), false, false, 100, 9, sQLFeatureNotSupportedException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", (String) null, 2, dataTruncation0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", (String) null, 2556, sQLRecoverableException0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLNonTransientConnectionException0);
      PredicateTransformer<LinkedHashSet<SQLInvalidAuthorizationSpecException>> predicateTransformer0 = new PredicateTransformer<LinkedHashSet<SQLInvalidAuthorizationSpecException>>(predicate0);
      predicateTransformer0.transform((LinkedHashSet<SQLInvalidAuthorizationSpecException>) null);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      predicateTransformer0.transform((LinkedHashSet<SQLInvalidAuthorizationSpecException>) null);
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      LoopingIterator<Boolean> loopingIterator0 = new LoopingIterator<Boolean>(priorityQueue0);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet1 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      OrderedMapIterator<Boolean, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Boolean, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category0);
      IteratorUtils.contains((Iterator<Locale.Category>) listIterator0, (Object) listIterator0);
      MapIterator<SQLSyntaxErrorException, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) mapIterator0);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) list0);
      EmptyListIterator.emptyListIterator();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[5];
      sQLSyntaxErrorExceptionArray0[0] = null;
      sQLSyntaxErrorExceptionArray0[1] = null;
      sQLSyntaxErrorExceptionArray0[2] = null;
      sQLSyntaxErrorExceptionArray0[3] = null;
      sQLSyntaxErrorExceptionArray0[4] = null;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Boolean, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Boolean, SQLNonTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Boolean, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      assertFalse(orderedMapIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 31, sQLFeatureNotSupportedException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "", 31);
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLFeatureNotSupportedException0.setStackTrace(stackTraceElementArray0);
      Transformer<Object, SQLTimeoutException> transformer0 = ConstantTransformer.nullTransformer();
      sQLFeatureNotSupportedException0.getStackTrace();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLWarning>) resettableListIterator0, (Closure<? super SQLWarning>) closure0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getLocalizedMessage();
      SQLException sQLException0 = new SQLException(sQLClientInfoException0);
      sQLClientInfoException0.addSuppressed(sQLException0);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      InstantiateFactory<SQLTimeoutException> instantiateFactory0 = new InstantiateFactory<SQLTimeoutException>(class0);
      FactoryTransformer<Object, SQLTimeoutException> factoryTransformer0 = new FactoryTransformer<Object, SQLTimeoutException>(instantiateFactory0);
      TransformerClosure.transformerClosure((Transformer<? super Object, ?>) factoryTransformer0);
      SQLException sQLException1 = new SQLException(sQLClientInfoException0);
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      LoopingIterator<Boolean> loopingIterator0 = new LoopingIterator<Boolean>(priorityQueue0);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet1 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) linkedHashSet1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0, true);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) singletonIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("L&C]A;-", (Throwable) null);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getLocalizedMessage();
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "", sQLTransactionRollbackException0);
      singletonIterator0.next();
      SQLException sQLException0 = new SQLException(sQLWarning0);
      sQLClientInfoException0.addSuppressed(sQLWarning0);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator1 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) singletonIterator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "6AnmP)t*J(LoM3", "remove() can not be called before calling next()", "");
      Iterator<SQLTransientException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLTransientException>) null, (Closure<? super SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(",E~O)z>~A0w,EQ", (Throwable) null);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      Predicate<Object> predicate2 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) predicate0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, comparator0, comparatorPredicate_Criterion0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, transformerPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = predicate2;
      TransformedPredicate<Object> transformedPredicate1 = new TransformedPredicate<Object>(transformer0, predicate1);
      predicateArray0[1] = (Predicate<Object>) transformedPredicate1;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>(predicateArray0);
      AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 3);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonListIterator<Locale.Category> singletonListIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      iteratorArray0[0] = (Iterator<Locale.Category>) singletonListIterator0;
      OrderedIterator<Locale.Category> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[1] = (Iterator<Locale.Category>) orderedIterator0;
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      ReverseListIterator<Locale.Category> reverseListIterator0 = new ReverseListIterator<Locale.Category>(arrayList0);
      iteratorArray0[2] = (Iterator<Locale.Category>) reverseListIterator0;
      ZippingIterator<Locale.Category> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>[]) iteratorArray0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) zippingIterator0, 44);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[18];
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.arrayListIterator(booleanArray0);
      IteratorUtils.zippingIterator((Iterator<? extends Boolean>) resettableListIterator0, (Iterator<? extends Boolean>) resettableListIterator0, (Iterator<? extends Boolean>) resettableListIterator0);
      Class<Boolean> class0 = Boolean.class;
      IteratorUtils.toArray((Iterator<? extends Boolean>) resettableListIterator0, class0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends ClientInfoStatus>) null, (Iterator<? extends ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[18];
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.arrayListIterator(booleanArray0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      PredicateTransformer<LinkedHashSet<SQLInvalidAuthorizationSpecException>> predicateTransformer0 = new PredicateTransformer<LinkedHashSet<SQLInvalidAuthorizationSpecException>>(predicate0);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      Boolean boolean0 = predicateTransformer0.transform(linkedHashSet0);
      SingletonIterator<Boolean> singletonIterator0 = new SingletonIterator<Boolean>(boolean0);
      IteratorUtils.zippingIterator((Iterator<? extends Boolean>) resettableListIterator0, (Iterator<? extends Boolean>) resettableListIterator0, (Iterator<? extends Boolean>) singletonIterator0);
      Class<Boolean> class0 = Boolean.class;
      IteratorUtils.toArray((Iterator<? extends Boolean>) singletonIterator0, class0);
      IteratorUtils.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      OrderedMapIterator<Boolean, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Boolean, SQLNonTransientConnectionException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<Boolean, SQLNonTransientConnectionException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Boolean, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      assertFalse(orderedMapIterator2.equals((Object)orderedMapIterator1));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[18];
      IteratorUtils.arrayListIterator(booleanArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "\"ar[4(", 11);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) predicate1);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      int int0 = (-2935);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("@6^|h", "\"ar[4(", (-2935));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLIntegrityConstraintViolationException0, comparator0, comparatorPredicate_Criterion0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, comparatorPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = (Predicate<Object>) comparatorPredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>(predicateArray0);
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) listIterator0, (Predicate<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<SQLFeatureNotSupportedException, Properties> hashMap0 = new HashMap<SQLFeatureNotSupportedException, Properties>();
      SingletonListIterator<HashMap<SQLFeatureNotSupportedException, Properties>> singletonListIterator0 = new SingletonListIterator<HashMap<SQLFeatureNotSupportedException, Properties>>(hashMap0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) listIterator0, (Predicate<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[18];
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.arrayListIterator(booleanArray0);
      IteratorUtils.zippingIterator((Iterator<? extends Boolean>) resettableListIterator0, (Iterator<? extends Boolean>) resettableListIterator0, (Iterator<? extends Boolean>) resettableListIterator0);
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      LoopingIterator<Boolean> loopingIterator0 = new LoopingIterator<Boolean>(priorityQueue0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransientException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(",E~O)z>~A0w,EQ", (Throwable) null);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) predicate1);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(comparatorPredicate_Criterion0, comparator0, comparatorPredicate_Criterion0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      predicateArray0[0] = predicate1;
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, transformerPredicate0);
      predicateArray0[1] = (Predicate<Object>) transformedPredicate0;
      predicateArray0[2] = (Predicate<Object>) comparatorPredicate0;
      predicateArray0[3] = (Predicate<Object>) comparatorPredicate0;
      predicateArray0[4] = predicate1;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>(predicateArray0);
      AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("");
      IteratorUtils.asMultipleUseIterable((Iterator<? extends String>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category0);
      IteratorUtils.contains((Iterator<Locale.Category>) listIterator0, (Object) listIterator0);
      MapIterator<SQLSyntaxErrorException, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) mapIterator0);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) list0);
      EmptyListIterator.emptyListIterator();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[5];
      sQLSyntaxErrorExceptionArray0[0] = null;
      sQLSyntaxErrorExceptionArray0[1] = null;
      sQLSyntaxErrorExceptionArray0[2] = null;
      sQLSyntaxErrorExceptionArray0[3] = null;
      sQLSyntaxErrorExceptionArray0[4] = null;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) mapIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      OrderedMapIterator<Boolean, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Boolean, SQLNonTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Boolean, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) resettableIterator0);
      IteratorUtils.loopingListIterator(list0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category.values();
      TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>((SQLSyntaxErrorException) null);
      IteratorUtils.emptyListIterator();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator0, (Iterator<? extends SQLSyntaxErrorException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[18];
      Iterator<Boolean> iterator0 = EmptyIterator.emptyIterator();
      Class<Boolean> class0 = Boolean.class;
      IteratorUtils.toArray((Iterator<? extends Boolean>) iterator0, class0);
      IteratorUtils.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttributeNode("");
      // Undeclared exception!
      try { 
        iIOMetadataNode0.replaceChild((Node) null, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newChild == null!
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = ",E~O)z>~A0w,EQ";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(",E~O)z>~A0w,EQ", (Throwable) null);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Iterator<Boolean> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Boolean>) null, (Iterator<? extends Boolean>) null, (Iterator<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLWarning>) resettableListIterator0, (Closure<? super SQLWarning>) closure0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Vb-@-.|vg");
      iIOMetadataNode0.getElementsByTagNameNS("", "3cI(:FPPpy>f 0gI:}");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      PredicateTransformer<LinkedHashSet<SQLInvalidAuthorizationSpecException>> predicateTransformer0 = new PredicateTransformer<LinkedHashSet<SQLInvalidAuthorizationSpecException>>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform((LinkedHashSet<SQLInvalidAuthorizationSpecException>) null);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(boolean0);
      PredicateTransformer<LinkedHashSet<SQLInvalidAuthorizationSpecException>> predicateTransformer1 = new PredicateTransformer<LinkedHashSet<SQLInvalidAuthorizationSpecException>>(predicate0);
      predicateTransformer0.transform((LinkedHashSet<SQLInvalidAuthorizationSpecException>) null);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      predicateTransformer0.transform((LinkedHashSet<SQLInvalidAuthorizationSpecException>) null);
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      LoopingIterator<Boolean> loopingIterator0 = new LoopingIterator<Boolean>(priorityQueue0);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet1 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      OrderedMapIterator<Boolean, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Boolean, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[18];
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.arrayListIterator(booleanArray0);
      IteratorUtils.zippingIterator((Iterator<? extends Boolean>) resettableListIterator0, (Iterator<? extends Boolean>) resettableListIterator0, (Iterator<? extends Boolean>) resettableListIterator0);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>((SQLTransactionRollbackException) null);
      ConstantTransformer.nullTransformer();
      HashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      EntrySetMapIterator<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>(hashMap0);
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) singletonIterator0, (Iterator<? extends SQLTransactionRollbackException>) entrySetMapIterator0, (Iterator<? extends SQLTransactionRollbackException>) singletonIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[18];
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.arrayListIterator(booleanArray0);
      ZippingIterator<Boolean> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Boolean>) resettableListIterator0, (Iterator<? extends Boolean>) resettableListIterator0, (Iterator<? extends Boolean>) resettableListIterator0);
      Class<Boolean> class0 = Boolean.class;
      IteratorUtils.toArray((Iterator<? extends Boolean>) zippingIterator0, class0);
      IteratorUtils.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      int[] intArray0 = new int[5];
      intArray0[0] = 44;
      intArray0[1] = 9;
      intArray0[2] = 3;
      intArray0[3] = 12;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, ".uK", batchUpdateException0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLTimeoutException0);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      Comparator<Boolean> comparator0 = (Comparator<Boolean>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ListIterator<Boolean> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Boolean>) resettableListIterator0, (Predicate<? super Boolean>) identityPredicate0);
      IteratorUtils.matchesAll((Iterator<Boolean>) listIterator0, (Predicate<? super Boolean>) identityPredicate0);
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      Comparator<Iterator<SQLTimeoutException>> comparator1 = (Comparator<Iterator<SQLTimeoutException>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Iterator<SQLTimeoutException>>) comparator1, (Iterator<? extends Iterator<SQLTimeoutException>>) null, (Iterator<? extends Iterator<SQLTimeoutException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("L&C]A;-", (Throwable) null);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) predicate1);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLTransactionRollbackException0, comparator0, comparatorPredicate_Criterion0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, comparatorPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = (Predicate<Object>) transformedPredicate0;
      predicateArray0[1] = (Predicate<Object>) transformedPredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>(predicateArray0);
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<Properties> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) listIterator0, (Predicate<? super Properties>) predicate0);
      IteratorUtils.filteredIterator((Iterator<? extends Properties>) listIterator1, (Predicate<? super Properties>) allPredicate0);
      TransformedPredicate<Object> transformedPredicate1 = new TransformedPredicate<Object>(transformer0, predicate0);
      PredicateTransformer<LinkedHashSet<SQLInvalidAuthorizationSpecException>> predicateTransformer0 = new PredicateTransformer<LinkedHashSet<SQLInvalidAuthorizationSpecException>>(transformerPredicate0);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      predicateTransformer0.transform(linkedHashSet0);
      Boolean boolean0 = predicateTransformer0.transform(linkedHashSet0);
      Comparator<Boolean> comparator1 = (Comparator<Boolean>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate(boolean0, comparator1);
      boolean boolean1 = IteratorUtils.matchesAll((Iterator<Boolean>) null, (Predicate<? super Boolean>) transformedPredicate1);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyOrderedMapIterator();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      HashSet<Integer> hashSet1 = new HashSet<Integer>();
      HashSet<Integer> hashSet2 = new HashSet<Integer>();
      HashSet<Integer>[] hashSetArray0 = (HashSet<Integer>[]) Array.newInstance(HashSet.class, 7);
      hashSetArray0[0] = hashSet0;
      hashSetArray0[1] = hashSet1;
      hashSetArray0[2] = hashSet0;
      hashSetArray0[3] = hashSet2;
      hashSetArray0[4] = (HashSet<Integer>) linkedHashSet0;
      hashSetArray0[5] = hashSet2;
      hashSetArray0[6] = hashSet1;
      ObjectArrayListIterator<HashSet<Integer>> objectArrayListIterator0 = new ObjectArrayListIterator<HashSet<Integer>>(hashSetArray0);
      HashSet<Predicate<Object>> hashSet3 = new HashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) hashSet3);
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<HashSet<Integer>>) null, (Predicate<? super HashSet<Integer>>) predicate1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) resettableIterator0);
      IteratorUtils.loopingListIterator(list0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category.values();
      TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getLocalizedMessage();
      SQLException sQLException0 = new SQLException(sQLClientInfoException0);
      sQLClientInfoException0.addSuppressed(sQLException0);
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      LoopingIterator<Boolean> loopingIterator0 = new LoopingIterator<Boolean>(priorityQueue0);
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator1 = IteratorUtils.singletonIterator(properties0);
      IteratorUtils.toListIterator((Iterator<? extends Properties>) resettableIterator1);
      IteratorUtils.toArray((Iterator<?>) resettableIterator1);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      PredicateTransformer<LinkedHashSet<SQLInvalidAuthorizationSpecException>> predicateTransformer0 = new PredicateTransformer<LinkedHashSet<SQLInvalidAuthorizationSpecException>>(predicate0);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      Boolean boolean0 = predicateTransformer0.transform(linkedHashSet0);
      ListIterator<Boolean> listIterator0 = IteratorUtils.singletonListIterator(boolean0);
      Iterator<Boolean> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Boolean>) listIterator0, (Predicate<? super Boolean>) predicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("L&C]A;-", (Throwable) null);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getLocalizedMessage();
      SQLException sQLException0 = new SQLException(sQLClientInfoException0);
      sQLClientInfoException0.addSuppressed(sQLTransactionRollbackException0);
      IteratorUtils.toString((Iterator<LinkedList<IIOMetadataNode>>) null);
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      PriorityQueue<Boolean> priorityQueue1 = new PriorityQueue<Boolean>();
      LoopingIterator<Boolean> loopingIterator0 = new LoopingIterator<Boolean>(priorityQueue1);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[6];
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[5] = (SQLTransientException) sQLTransactionRollbackException0;
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      loopingIterator0.hasNext();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransientException>) resettableIterator0, 18);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 12
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("L&C]A;-", (Throwable) null);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getLocalizedMessage();
      SQLException sQLException0 = new SQLException(sQLClientInfoException0);
      sQLClientInfoException0.addSuppressed(sQLTransactionRollbackException0);
      IteratorUtils.toString((Iterator<LinkedList<IIOMetadataNode>>) null);
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      PriorityQueue<Boolean> priorityQueue1 = new PriorityQueue<Boolean>();
      LoopingIterator<Boolean> loopingIterator0 = new LoopingIterator<Boolean>(priorityQueue1);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[25];
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[5] = (SQLTransientException) sQLTransactionRollbackException0;
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      int int0 = 18;
      loopingIterator0.hasNext();
      IteratorUtils.get((Iterator<SQLTransientException>) resettableIterator0, 18);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      LinkedList<ArrayDeque<SQLFeatureNotSupportedException>> linkedList0 = new LinkedList<ArrayDeque<SQLFeatureNotSupportedException>>();
      DefaultEquator.defaultEquator();
      Predicate<LinkedList<ArrayDeque<SQLFeatureNotSupportedException>>> predicate0 = new IdentityPredicate<LinkedList<ArrayDeque<SQLFeatureNotSupportedException>>>(linkedList0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, equalPredicate0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PredicateTransformer<LinkedHashSet<SQLInvalidAuthorizationSpecException>> predicateTransformer0 = new PredicateTransformer<LinkedHashSet<SQLInvalidAuthorizationSpecException>>(transformedPredicate0);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      // Undeclared exception!
      try { 
        predicateTransformer0.transform(linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.EqualPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLWarning>) resettableListIterator0, (Closure<? super SQLWarning>) closure0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getLocalizedMessage();
      SQLException sQLException0 = new SQLException(sQLClientInfoException0);
      sQLClientInfoException0.addSuppressed(sQLException0);
      String string0 = IteratorUtils.toString((Iterator<LinkedList<IIOMetadataNode>>) null);
      assertEquals("[]", string0);
      
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      LoopingIterator<Boolean> loopingIterator0 = new LoopingIterator<Boolean>(priorityQueue0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(loopingIterator0);
      PredicateTransformer<LinkedHashSet<SQLInvalidAuthorizationSpecException>> predicateTransformer0 = new PredicateTransformer<LinkedHashSet<SQLInvalidAuthorizationSpecException>>(equalPredicate0);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      predicateTransformer0.transform(linkedHashSet0);
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Vector<Properties> vector0 = new Vector<Properties>();
      LoopingIterator<Properties> loopingIterator1 = new LoopingIterator<Properties>(vector0);
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) loopingIterator1, (Iterator<? extends Properties>) loopingIterator1);
      IteratorUtils.toListIterator((Iterator<? extends Properties>) iterator0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      Iterator<Boolean> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends Boolean>) loopingIterator0, (Predicate<? super Boolean>) equalPredicate0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      IteratorUtils.emptyIterator();
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      IteratorUtils.loopingListIterator((List<SQLException>) linkedList0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category.values();
      TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getLocalizedMessage();
      SQLException sQLException0 = new SQLException(sQLClientInfoException0);
      sQLClientInfoException0.addSuppressed(sQLException0);
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      LoopingIterator<Boolean> loopingIterator0 = new LoopingIterator<Boolean>(priorityQueue0);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet1 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet2 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) linkedHashSet2);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Locale.Category.values();
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoException1.getLocalizedMessage();
      SQLException sQLException0 = new SQLException(sQLClientInfoException0);
      sQLClientInfoException0.addSuppressed(sQLException0);
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      LoopingIterator<Boolean> loopingIterator0 = new LoopingIterator<Boolean>(priorityQueue0);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      OrderedMapIterator<Boolean, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Boolean, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      ListIterator<Closure<Object>> listIterator0 = IteratorUtils.singletonListIterator(closure0);
      ListIteratorWrapper<Closure<Object>> listIteratorWrapper0 = new ListIteratorWrapper<Closure<Object>>(listIterator0);
      BoundedIterator<Closure<Object>> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Closure<Object>>) listIteratorWrapper0, 1L);
      String string0 = "";
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Closure<Object>>) boundedIterator0, (Transformer<? super Closure<Object>, String>) constantTransformer0, "", "Estimated size must be greater than 0", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[18];
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.arrayListIterator(booleanArray0);
      IteratorUtils.zippingIterator((Iterator<? extends Boolean>) resettableListIterator0, (Iterator<? extends Boolean>) resettableListIterator0, (Iterator<? extends Boolean>) resettableListIterator0);
      MapIterator<Locale.Category, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<Locale.Category, SQLTransientException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      AbstractMapIteratorDecorator<Locale.Category, SQLTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Locale.Category, SQLTransientException>(mapIterator1);
      IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) abstractMapIteratorDecorator0, (Iterator<? extends Locale.Category>) mapIterator0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-2996);
      longArray0[1] = (long) (-2996);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", (-2996), longArray0, sQLInvalidAuthorizationSpecException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException();
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException();
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Iterator<SQLTransientConnectionException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(",E~O)z>~A0w,EQ", (Throwable) null);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) predicate1);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(comparatorPredicate_Criterion0, comparator0, comparatorPredicate_Criterion0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      predicateArray0[0] = predicate1;
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, transformerPredicate0);
      predicateArray0[1] = (Predicate<Object>) transformedPredicate0;
      predicateArray0[2] = (Predicate<Object>) comparatorPredicate0;
      predicateArray0[3] = (Predicate<Object>) comparatorPredicate0;
      predicateArray0[4] = predicate1;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>(predicateArray0);
      AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>[]) iteratorArray0);
      IteratorUtils.find((Iterator<SQLTransientException>) zippingIterator0, (Predicate<? super SQLTransientException>) predicate1);
      transformerPredicate0.evaluate((Object) null);
      Iterator<Locale.Category>[] iteratorArray1 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Locale.Category> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>[]) iteratorArray1);
      IteratorUtils.matchesAny((Iterator<Locale.Category>) zippingIterator1, (Predicate<? super Locale.Category>) predicateArray0[1]);
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("");
      Iterable<String> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends String>) listIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[18];
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.arrayListIterator(booleanArray0);
      ZippingIterator<Boolean> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Boolean>) resettableListIterator0, (Iterator<? extends Boolean>) resettableListIterator0, (Iterator<? extends Boolean>) resettableListIterator0);
      Class<Boolean> class0 = Boolean.class;
      IteratorUtils.toArray((Iterator<? extends Boolean>) zippingIterator0, class0);
      IteratorUtils.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.emptyOrderedMapIterator();
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("org.apache.commons.collections4.iterators.EmptyMapIterator");
      IteratorUtils.asMultipleUseIterable((Iterator<? extends String>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>((SQLTransactionRollbackException) null);
      MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends String>) null);
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(stack0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) reverseListIterator0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) stack0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0, (Iterator<? extends SQLSyntaxErrorException>) reverseListIterator0);
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) listIterator0;
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) listIterator0;
      iteratorArray0[2] = (Iterator<SQLSyntaxErrorException>) listIterator0;
      iteratorArray0[3] = (Iterator<SQLSyntaxErrorException>) reverseListIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      LinkedHashSet<SQLNonTransientConnectionException>[] linkedHashSetArray0 = (LinkedHashSet<SQLNonTransientConnectionException>[]) Array.newInstance(LinkedHashSet.class, 0);
      IteratorUtils.arrayListIterator(linkedHashSetArray0);
      MapIterator<SQLRecoverableException, Stack<SQLClientInfoException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLRecoverableException, Stack<SQLClientInfoException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) mapIterator1, (Iterator<? extends SQLRecoverableException>) mapIterator1);
      Enumeration<SQLRecoverableException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) zippingIterator0);
      Iterator<SQLRecoverableException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) enumeration1);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ListIterator<SQLTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      Class<SQLWarning>[] classArray0 = (Class<SQLWarning>[]) Array.newInstance(Class.class, 4);
      Class<SQLWarning> class0 = SQLWarning.class;
      classArray0[0] = class0;
      Class<SQLWarning> class1 = SQLWarning.class;
      classArray0[1] = class1;
      Class<SQLWarning> class2 = SQLWarning.class;
      classArray0[2] = class2;
      Class<SQLWarning> class3 = SQLWarning.class;
      classArray0[3] = class3;
      Transformer<SQLTransientConnectionException, String> transformer0 = InvokerTransformer.invokerTransformer("NodeList must not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) listIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "NodeList must not be null", "transformer may not be null", "transformer may not be null");
      ListIterator<Transformer<Object, DataTruncation>> listIterator1 = EmptyListIterator.emptyListIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends Transformer<Object, DataTruncation>>) listIterator1);
      Hashtable<ClientInfoStatus, EnumSet<ClientInfoStatus>> hashtable0 = new Hashtable<ClientInfoStatus, EnumSet<ClientInfoStatus>>();
      EntrySetMapIterator<ClientInfoStatus, EnumSet<ClientInfoStatus>> entrySetMapIterator0 = new EntrySetMapIterator<ClientInfoStatus, EnumSet<ClientInfoStatus>>(hashtable0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<ClientInfoStatus, EnumSet<ClientInfoStatus>>) entrySetMapIterator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("transformer may not be null");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      int int0 = (-3093);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, (-1312), (-3093));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) resettableIterator0);
      IteratorUtils.loopingListIterator(list0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category.values();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)25;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)58;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<BatchUpdateException>) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.apply((Iterator<SQLWarning>) null, (Closure<? super SQLWarning>) closure0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLException sQLException0 = new SQLException(sQLClientInfoException0);
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      LoopingIterator<Boolean> loopingIterator0 = new LoopingIterator<Boolean>(priorityQueue0);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      Comparator<Boolean> comparator0 = (Comparator<Boolean>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<Boolean, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Boolean, SQLNonTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Boolean, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.setAttribute("", "(%MP>");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("", "");
      IteratorUtils.nodeListIterator(nodeList0);
      NotNullPredicate.notNullPredicate();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(iIOMetadataNode0);
      PredicateTransformer<LinkedHashSet<SQLInvalidAuthorizationSpecException>> predicateTransformer0 = new PredicateTransformer<LinkedHashSet<SQLInvalidAuthorizationSpecException>>(identityPredicate0);
      predicateTransformer0.transform((LinkedHashSet<SQLInvalidAuthorizationSpecException>) null);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      predicateTransformer0.transform(linkedHashSet0);
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      LoopingIterator<Boolean> loopingIterator0 = new LoopingIterator<Boolean>(priorityQueue0);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet1 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      OrderedMapIterator<Boolean, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Boolean, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      EmptyIterator.emptyIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "6JkUP*wue9ZOl#h=V");
      DataTruncation dataTruncation0 = new DataTruncation(2250, true, true, 1608, 2250, sQLFeatureNotSupportedException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("6JkUP*wue9ZOl#h=V", "", 2250, dataTruncation0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>("6JkUP*wue9ZOl#h=V");
      PredicateTransformer<LinkedHashSet<SQLInvalidAuthorizationSpecException>> predicateTransformer0 = new PredicateTransformer<LinkedHashSet<SQLInvalidAuthorizationSpecException>>(identityPredicate0);
      predicateTransformer0.transform((LinkedHashSet<SQLInvalidAuthorizationSpecException>) null);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      predicateTransformer0.transform(linkedHashSet0);
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      LoopingIterator<Boolean> loopingIterator0 = new LoopingIterator<Boolean>(priorityQueue0);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet1 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      OrderedMapIterator<Boolean, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Boolean, SQLNonTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Boolean, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) orderedMapIterator1, (-1841));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(",E~O)z>~A0w,EQ", (Throwable) null);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) predicate1);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(comparatorPredicate_Criterion0, comparator0, comparatorPredicate_Criterion0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      predicateArray0[0] = predicate1;
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, transformerPredicate0);
      predicateArray0[1] = (Predicate<Object>) transformedPredicate0;
      predicateArray0[2] = (Predicate<Object>) comparatorPredicate0;
      predicateArray0[3] = (Predicate<Object>) comparatorPredicate0;
      predicateArray0[4] = predicate1;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>(predicateArray0);
      AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Locale.Category> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>[]) iteratorArray0);
      IteratorUtils.matchesAny((Iterator<Locale.Category>) zippingIterator0, (Predicate<? super Locale.Category>) predicateArray0[1]);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) zippingIterator0, 44);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 6);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      iteratorArray0[2] = (Iterator<SQLSyntaxErrorException>) zippingIterator0;
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) orderedIterator0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super IIOMetadataNode>) uniquePredicate0);
      String string0 = "OQpSOcJHjr\\[";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("OQpSOcJHjr[", "OQpSOcJHjr[");
      IteratorUtils.getIterator(sQLSyntaxErrorException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "", 1471, (Throwable) null);
      IteratorUtils.toString((Iterator<LinkedList<IIOMetadataNode>>) null);
      IteratorUtils.size(iteratorArray0[2]);
      Integer integer0 = new Integer(1471);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) integer0, 286, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends String>) null);
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(stack0);
      MapIterator<SQLSyntaxErrorException, Class<SQLSyntaxErrorException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) mapIterator0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) stack0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLSyntaxErrorException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) listIterator0, (Iterator<? extends SQLSyntaxErrorException>) iterator0);
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 8);
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) reverseListIterator0;
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) listIterator0;
      Iterator<SQLSyntaxErrorException> iterator2 = EmptyIterator.emptyIterator();
      iteratorArray0[2] = iterator2;
      iteratorArray0[3] = (Iterator<SQLSyntaxErrorException>) listIterator0;
      iteratorArray0[4] = iterator1;
      iteratorArray0[5] = iterator0;
      iteratorArray0[6] = iterator1;
      iteratorArray0[7] = (Iterator<SQLSyntaxErrorException>) reverseListIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<SQLNonTransientException> predicate1 = AndPredicate.andPredicate((Predicate<? super SQLNonTransientException>) predicate0, (Predicate<? super SQLNonTransientException>) predicate0);
      IteratorUtils.singletonIterator(predicate1);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(hashtable0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", hashMap0, sQLTransactionRollbackException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", sQLClientInfoException0);
      ConstantTransformer<SQLException, SQLSyntaxErrorException> constantTransformer0 = new ConstantTransformer<SQLException, SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      Iterator<SQLException> iterator3 = IteratorUtils.transformedIterator((Iterator<? extends SQLTransactionRollbackException>) singletonIterator0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLException>) constantTransformer0);
      assertNotNull(iterator3);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends String>) null);
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(stack0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) reverseListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) null, (Collection<? super SQLSyntaxErrorException>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLRecoverableException, ComparatorPredicate.Criterion> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      String string0 = "F";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("F");
      iIOMetadataNode0.getAttributeNode("F");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("F", "F");
      IteratorUtils.nodeListIterator(nodeList0);
      int int0 = 100;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 6);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      iteratorArray0[2] = (Iterator<SQLSyntaxErrorException>) zippingIterator0;
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) orderedIterator0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.IteratorUtils", "NodeList must not be null");
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("org.apache.commons.collections4.IteratorUtils");
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[0];
      IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLException>>) hashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableIterator0, 1471);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      IteratorUtils.emptyIterator();
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)25;
      byteArray0[0] = (byte)25;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte)1;
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Predicate<SQLWarning>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("p\"");
      Node node0 = iIOMetadataNode0.cloneNode(false);
      IteratorUtils.nodeListIterator(node0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~DWLp_l\"Vx{[k");
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[3];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(locale_CategoryArray0, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 6);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      iteratorArray0[2] = (Iterator<SQLSyntaxErrorException>) zippingIterator0;
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) orderedIterator0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.IteratorUtils", "j", (-1718), (Throwable) null);
      IteratorUtils.toString((Iterator<LinkedList<IIOMetadataNode>>) null);
      IteratorUtils.size(iteratorArray0[1]);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1069, 1471);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) resettableIterator0);
      IteratorUtils.loopingListIterator(list0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-43);
      byteArray0[7] = (byte)71;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) locale_Category0, 680);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      EmptyListIterator.resettableEmptyListIterator();
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 3);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) listIterator0;
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      ArrayList<Predicate<SQLWarning>> arrayList0 = new ArrayList<Predicate<SQLWarning>>();
      IteratorUtils.loopingListIterator((List<Predicate<SQLWarning>>) arrayList0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLWarning>) resettableListIterator0, (Closure<? super SQLWarning>) closure0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getLocalizedMessage();
      SQLException sQLException0 = new SQLException(sQLClientInfoException0);
      sQLClientInfoException0.addSuppressed(sQLException0);
      IteratorUtils.toString((Iterator<LinkedList<IIOMetadataNode>>) null);
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      Comparator<Boolean> comparator0 = (Comparator<Boolean>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      OrderedIterator<ArrayList<ArrayDeque>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) arrayList0);
      IteratorUtils.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      predicateArray0[1] = predicate1;
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate2 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      predicateArray0[2] = predicate2;
      vector0.add(predicate0);
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) predicate0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      predicateArray0[3] = (Predicate<Object>) transformerPredicate0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[4] = (Predicate<Object>) comparatorPredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[5] = (Predicate<Object>) allPredicate0;
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[6] = (Predicate<Object>) allPredicate1;
      AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      int int0 = 1;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLClientInfoException>) resettableListIterator0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLWarning>) resettableListIterator0, (Closure<? super SQLWarning>) closure0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getLocalizedMessage();
      SQLException sQLException0 = new SQLException(sQLClientInfoException0);
      sQLClientInfoException0.addSuppressed(sQLException0);
      Iterator<LinkedList<IIOMetadataNode>> iterator0 = null;
      IteratorUtils.toString((Iterator<LinkedList<IIOMetadataNode>>) null);
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      LoopingIterator<Boolean> loopingIterator0 = new LoopingIterator<Boolean>(priorityQueue0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(loopingIterator0);
      PredicateTransformer<LinkedHashSet<SQLInvalidAuthorizationSpecException>> predicateTransformer0 = new PredicateTransformer<LinkedHashSet<SQLInvalidAuthorizationSpecException>>(equalPredicate0);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      Boolean boolean0 = predicateTransformer0.transform(linkedHashSet0);
      Comparator<Boolean> comparator0 = (Comparator<Boolean>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Boolean> predicate0 = ComparatorPredicate.comparatorPredicate(boolean0, comparator0);
      IteratorUtils.matchesAll((Iterator<Boolean>) loopingIterator0, (Predicate<? super Boolean>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Boolean>) loopingIterator0, (Transformer<? super Boolean, ? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OrderedIterator<ArrayList<ArrayDeque>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.contains((Iterator<HashSet<Integer>>) null, (Object) null);
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) arrayList0);
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(stack0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) reverseListIterator0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) stack0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLSyntaxErrorException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) reverseListIterator0, (Iterator<? extends SQLSyntaxErrorException>) reverseListIterator0);
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 7);
      iteratorArray0[0] = iterator1;
      iteratorArray0[1] = iterator1;
      iteratorArray0[2] = (Iterator<SQLSyntaxErrorException>) listIterator0;
      iteratorArray0[3] = (Iterator<SQLSyntaxErrorException>) listIterator0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)36;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      iteratorArray0[4] = iterator1;
      iteratorArray0[5] = iterator0;
      iteratorArray0[6] = (Iterator<SQLSyntaxErrorException>) reverseListIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<?>) resettableIterator0, (Transformer<? super Object, ? extends EnumSet<Locale.Category>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", (Throwable) null);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Transformer<SQLTransactionRollbackException, String> transformer0 = new ConstantTransformer<SQLTransactionRollbackException, String>("");
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) singletonIterator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "", "", "6AnmP)t*J(LoM3");
      ArrayList<Predicate<SQLWarning>> arrayList0 = new ArrayList<Predicate<SQLWarning>>();
      IteratorUtils.loopingListIterator((List<Predicate<SQLWarning>>) arrayList0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(object0, 2923);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.singletonListIterator(properties0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      int int0 = (-2376);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("72,|<vFND@\"&`/{Dof", "72,|<vFND@\"&`/{Dof", (-2376), hashtable0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashtable0);
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException1);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLClientInfoException>) singletonListIterator0);
      SQLClientInfoException sQLClientInfoException2 = singletonListIterator0.next();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Enumeration must not be null");
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashtable0.getOrDefault(sQLClientInfoException0, clientInfoStatus0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString(iterator0, (Transformer<? super SQLClientInfoException, String>) transformer0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLClientInfoException2);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super IIOMetadataNode>) predicate0);
      AnyPredicate<SQLIntegrityConstraintViolationException> anyPredicate0 = new AnyPredicate<SQLIntegrityConstraintViolationException>((Predicate<? super SQLIntegrityConstraintViolationException>[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Array class must not be null");
      sQLTimeoutException0.printStackTrace();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) batchUpdateException0, 0, (-312));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OrderedIterator<ArrayList<ArrayDeque>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.contains((Iterator<HashSet<Integer>>) null, (Object) null);
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) arrayList0);
      OrderedIterator<Locale.Category> orderedIterator1 = IteratorUtils.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      predicateArray0[1] = predicate1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("gX7r0)RG", "", (-2626), (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLNonTransientConnectionException0);
      IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      IteratorUtils.toString((Iterator<LinkedList<IIOMetadataNode>>) null);
      IteratorUtils.size(orderedIterator1);
      SQLWarning sQLWarning0 = new SQLWarning("[]", "_zOT!", (Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLWarning0, 0, (-2626));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      EmptyListIterator.resettableEmptyListIterator();
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 3);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) listIterator0;
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      ArrayList<Predicate<SQLWarning>> arrayList0 = new ArrayList<Predicate<SQLWarning>>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      IteratorUtils.loopingListIterator((List<Predicate<SQLWarning>>) arrayList0);
      Object object0 = new Object();
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>((DataTruncation) null, true);
      Predicate<SQLException> predicate0 = IdentityPredicate.identityPredicate((SQLException) null);
      Iterator<DataTruncation> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) singletonIterator0, (Predicate<? super DataTruncation>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLWarning>) iterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OrderedIterator<ArrayList<ArrayDeque>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.contains((Iterator<HashSet<Integer>>) null, (Object) null);
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) arrayList0);
      IteratorUtils.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      predicateArray0[1] = predicate1;
      FalsePredicate.falsePredicate();
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion1 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      Predicate<Object> predicate2 = ComparatorPredicate.comparatorPredicate((Object) comparatorPredicate_Criterion0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion1);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, 1, (Throwable) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashtable0, sQLNonTransientConnectionException0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate((Object) null, comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate1);
      NotPredicate<Properties> notPredicate0 = new NotPredicate<Properties>(predicate2);
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.filteredIterator((Iterator<? extends Properties>) listIterator0, (Predicate<? super Properties>) notPredicate0);
      IteratorUtils.toListIterator((Iterator<? extends Properties>) listIterator0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLRecoverableException>) null, (Object) arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.setAttribute("", "(%MP>");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(iIOMetadataNode0);
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      HashSet<Integer> hashSet1 = new HashSet<Integer>();
      HashSet<Integer> hashSet2 = new HashSet<Integer>();
      HashSet<Integer>[] hashSetArray0 = (HashSet<Integer>[]) Array.newInstance(HashSet.class, 5);
      hashSetArray0[0] = hashSet2;
      hashSetArray0[1] = hashSet1;
      hashSetArray0[2] = hashSet0;
      HashSet<Integer> hashSet3 = new HashSet<Integer>(hashSet1);
      hashSetArray0[3] = hashSet3;
      hashSetArray0[4] = hashSet1;
      ObjectArrayListIterator<HashSet<Integer>> objectArrayListIterator0 = new ObjectArrayListIterator<HashSet<Integer>>(hashSetArray0);
      IteratorUtils.matchesAll((Iterator<HashSet<Integer>>) objectArrayListIterator0, (Predicate<? super HashSet<Integer>>) identityPredicate0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 36, (Map<String, ClientInfoStatus>) null);
      DataTruncation dataTruncation0 = new DataTruncation(36, false, false, 36, 36, sQLClientInfoException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(36, false, false, (-901), (-901), dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-901), false, false, 17, (-901), dataTruncation0);
      dataTruncationArray0[2] = dataTruncation2;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(dataTruncation0);
      DataTruncation dataTruncation3 = new DataTruncation(17, true, true, 500, (-901), sQLTransactionRollbackException0);
      dataTruncationArray0[3] = dataTruncation3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, 0, 36);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashSet<IIOMetadataNode> hashSet0 = new HashSet<IIOMetadataNode>();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) hashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[18];
      IteratorUtils.arrayListIterator(booleanArray0);
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      HashSet<Integer> hashSet1 = new HashSet<Integer>();
      HashSet<Integer> hashSet2 = new HashSet<Integer>(hashSet0);
      HashSet<Integer>[] hashSetArray0 = (HashSet<Integer>[]) Array.newInstance(HashSet.class, 4);
      hashSetArray0[0] = hashSet2;
      hashSetArray0[1] = hashSet0;
      hashSetArray0[2] = hashSet1;
      hashSetArray0[3] = hashSet1;
      ObjectArrayListIterator<HashSet<Integer>> objectArrayListIterator0 = new ObjectArrayListIterator<HashSet<Integer>>(hashSetArray0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAll((Iterator<HashSet<Integer>>) objectArrayListIterator0, (Predicate<? super HashSet<Integer>>) predicate0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      assertEquals(0, singletonListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getLocalizedMessage();
      SQLException sQLException0 = new SQLException(sQLClientInfoException0);
      sQLClientInfoException0.addSuppressed(sQLException0);
      String string0 = IteratorUtils.toString((Iterator<LinkedList<IIOMetadataNode>>) null);
      assertEquals("[]", string0);
      
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      HashSet<Boolean> hashSet0 = new HashSet<Boolean>();
      LoopingIterator<Boolean> loopingIterator0 = new LoopingIterator<Boolean>(hashSet0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(hashSet0);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      Predicate<Boolean>[] predicateArray0 = (Predicate<Boolean>[]) Array.newInstance(Predicate.class, 4);
      AllPredicate<Boolean> allPredicate0 = new AllPredicate<Boolean>(predicateArray0);
      predicateArray0[3] = (Predicate<Boolean>) allPredicate0;
      AnyPredicate<Boolean> anyPredicate0 = new AnyPredicate<Boolean>(predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Boolean>) loopingIterator0, (Predicate<? super Boolean>) anyPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLWarning>) resettableListIterator0, (Closure<? super SQLWarning>) closure0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getLocalizedMessage();
      SQLException sQLException0 = new SQLException(sQLClientInfoException0);
      sQLClientInfoException0.addSuppressed(sQLException0);
      String string0 = IteratorUtils.toString((Iterator<LinkedList<IIOMetadataNode>>) null);
      assertEquals("[]", string0);
      
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      LoopingIterator<Boolean> loopingIterator0 = new LoopingIterator<Boolean>(priorityQueue0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(loopingIterator0);
      PredicateTransformer<LinkedHashSet<SQLInvalidAuthorizationSpecException>> predicateTransformer0 = new PredicateTransformer<LinkedHashSet<SQLInvalidAuthorizationSpecException>>(equalPredicate0);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      Boolean boolean0 = predicateTransformer0.transform(linkedHashSet0);
      Comparator<Boolean> comparator0 = (Comparator<Boolean>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Boolean> predicate0 = ComparatorPredicate.comparatorPredicate(boolean0, comparator0);
      boolean boolean1 = IteratorUtils.matchesAll((Iterator<Boolean>) loopingIterator0, (Predicate<? super Boolean>) predicate0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLWarning>) resettableListIterator0, (Closure<? super SQLWarning>) closure0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getLocalizedMessage();
      SQLException sQLException0 = new SQLException(sQLClientInfoException0);
      sQLClientInfoException0.addSuppressed(sQLException0);
      IteratorUtils.toString((Iterator<LinkedList<IIOMetadataNode>>) null);
      BoundedIterator<Object> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<?>) resettableListIterator0, 0L);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) onePredicate0, (Closure<? super Object>) closure0, true);
      IteratorUtils.apply((Iterator<Object>) boundedIterator0, (Closure<? super Object>) closure1);
      assertFalse(closure1.equals((Object)closure0));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      OrderedIterator<ArrayList<ArrayDeque>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.contains((Iterator<HashSet<Integer>>) null, (Object) null);
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) arrayList0);
      IteratorUtils.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      predicateArray0[0] = predicate0;
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      predicateArray0[2] = predicate1;
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) predicate0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[4] = (Predicate<Object>) comparatorPredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[5] = (Predicate<Object>) allPredicate0;
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[6] = (Predicate<Object>) allPredicate1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("gV4#6P!x", "gV4#6P!x");
      IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) null);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertFalse(treeSet0.contains("gV4#6P!x"));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Integer integer0 = new Integer(30);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableListIterator0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = NotNullPredicate.notNullPredicate();
      predicateArray0[2] = predicate1;
      Predicate<Object> predicate2 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      Predicate<Object> predicate3 = NotPredicate.notPredicate((Predicate<? super Object>) predicate2);
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      Transformer<Object, Integer> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate3, (Transformer<? super Object, ? extends Integer>) transformer0, (Transformer<? super Object, ? extends Integer>) transformer0);
      Iterator<Integer> iterator0 = IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) transformer1);
      IteratorUtils.toString(iterator0);
      SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      Integer integer1 = new Integer(1789);
      OrderedMapIterator<ArrayList<SQLIntegrityConstraintViolationException>, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OrderedMapIterator<String, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.isEmpty(orderedMapIterator0);
      ListIterator<Object> listIterator0 = IteratorUtils.toListIterator((Iterator<?>) orderedMapIterator0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      String string0 = "yoH0qKIOE";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("yoH0qKIOE");
      SQLException sQLException0 = new SQLException(sQLIntegrityConstraintViolationException0);
      int int0 = 100;
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Locale.Category>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)119;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((ArrayList<Properties>[]) null, 25, 824);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Transformer<SQLTransactionRollbackException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends String>) null);
      IteratorUtils.toString((Iterator<LinkedList<IIOMetadataNode>>) null);
      IteratorUtils.size(singletonIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) transformer0, 100, (-991));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<SQLFeatureNotSupportedException, Properties> hashMap0 = new HashMap<SQLFeatureNotSupportedException, Properties>();
      Properties properties0 = new Properties();
      SingletonListIterator<HashMap<SQLFeatureNotSupportedException, Properties>> singletonListIterator0 = new SingletonListIterator<HashMap<SQLFeatureNotSupportedException, Properties>>(hashMap0);
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      IteratorUtils.find((Iterator<HashMap<SQLFeatureNotSupportedException, Properties>>) singletonListIterator0, (Predicate<? super HashMap<SQLFeatureNotSupportedException, Properties>>) notPredicate0);
      int int0 = (-4192);
      ArrayListIterator<SQLTransientConnectionException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLTransientConnectionException>((Object) null, (-4192));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      PredicateTransformer<LinkedHashSet<SQLInvalidAuthorizationSpecException>> predicateTransformer0 = new PredicateTransformer<LinkedHashSet<SQLInvalidAuthorizationSpecException>>(predicate0);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      Boolean boolean0 = predicateTransformer0.transform(linkedHashSet0);
      booleanArray0[0] = boolean0;
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.arrayListIterator(booleanArray0);
      IteratorUtils.zippingIterator((Iterator<? extends Boolean>) resettableListIterator0, (Iterator<? extends Boolean>) resettableListIterator0, (Iterator<? extends Boolean>) resettableListIterator0);
      StringTokenizer stringTokenizer0 = null;
      try {
        stringTokenizer0 = new StringTokenizer((String) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("L&C]A;-", (Throwable) null);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getLocalizedMessage();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      sQLClientInfoException0.initCause(sQLIntegrityConstraintViolationException0);
      SQLException sQLException0 = new SQLException(sQLClientInfoException0);
      sQLClientInfoException0.addSuppressed(sQLTransactionRollbackException0);
      IteratorUtils.toString((Iterator<LinkedList<IIOMetadataNode>>) null);
      PriorityQueue<Boolean> priorityQueue0 = new PriorityQueue<Boolean>();
      PriorityQueue<Boolean> priorityQueue1 = new PriorityQueue<Boolean>();
      LoopingIterator<Boolean> loopingIterator0 = new LoopingIterator<Boolean>(priorityQueue1);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[25];
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[5] = (SQLTransientException) sQLTransactionRollbackException0;
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      loopingIterator0.hasNext();
      IteratorUtils.get((Iterator<SQLTransientException>) resettableIterator0, 18);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("L&C]A;-");
      iIOMetadataNode0.getLastChild();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      OrderedMapIterator<SQLSyntaxErrorException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLSyntaxErrorException, SQLNonTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, SQLNonTransientConnectionException>(orderedMapIterator1);
      IteratorUtils.skippingIterator((Iterator<SQLSyntaxErrorException>) abstractOrderedMapIteratorDecorator0, 1L);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.setAttribute("JV8N/w!4]N)5`", "(%MP>");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("", "JV8N/w!4]N)5`");
      IteratorUtils.nodeListIterator(nodeList0);
      NotNullPredicate.notNullPredicate();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((Throwable) null);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Transformer<SQLTransactionRollbackException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends String>) null);
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) singletonIterator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "EQUAL", "3.3+'!p", ".A%^Tv{B$_p;7P<");
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 1);
      DataTruncation dataTruncation0 = new DataTruncation(5, false, false, 61, 5);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      iteratorArray0[0] = (Iterator<DataTruncation>) listIterator0;
      Iterator<DataTruncation> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 6);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) zippingIterator0;
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) orderedIterator0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 1471, (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLNonTransientConnectionException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      iteratorArray0[2] = (Iterator<SQLSyntaxErrorException>) listIterator0;
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(stack0);
      iteratorArray0[3] = (Iterator<SQLSyntaxErrorException>) reverseListIterator0;
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) iteratorArray0[3]);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) stack0);
      iteratorArray0[4] = iterator0;
      Iterator<SQLSyntaxErrorException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) iteratorArray0[1], (Iterator<? extends SQLSyntaxErrorException>) iteratorArray0[2]);
      iteratorArray0[5] = iterator1;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.singletonListIterator(properties0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IteratorUtils.loopingListIterator((List<Object>) linkedList0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 5);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[1] = (Iterator<SQLClientInfoException>) resettableListIterator0;
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 4);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class0;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      classArray0[1] = class1;
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      classArray0[2] = class2;
      Class<SQLIntegrityConstraintViolationException> class3 = SQLIntegrityConstraintViolationException.class;
      classArray0[3] = class3;
      InvokerTransformer<Object, SQLClientInfoException> invokerTransformer0 = new InvokerTransformer<Object, SQLClientInfoException>("", classArray0, iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLClientInfoException>) invokerTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.singletonListIterator(properties0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("72,|<vFND@\"&`/{Dof", "72,|<vFND@\"&`/{Dof", (-2376), hashtable0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashtable0);
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException1);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLClientInfoException>) singletonListIterator0);
      SQLClientInfoException sQLClientInfoException2 = singletonListIterator0.next();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Enumeration must not be null");
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashtable0.getOrDefault(sQLClientInfoException0, clientInfoStatus0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString(iterator0, (Transformer<? super SQLClientInfoException, String>) transformer0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLClientInfoException2);
      Predicate<IIOMetadataNode> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super IIOMetadataNode>) predicate0);
      IteratorUtils.getIterator(predicate1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("The transformer to call must not be null", "");
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("Entry does not exist: ");
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[5];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException1;
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException1;
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException0;
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<SQLException> predicate2 = AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLException>>) hashSet0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLRecoverableException>) resettableListIterator0, (Predicate<? super SQLRecoverableException>) predicate2);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Entry does not exist: ", "", 1);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0, (Collection<? super SQLInvalidAuthorizationSpecException>) linkedList0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = "+SUs";
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) stack0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 6);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      iteratorArray0[2] = (Iterator<SQLSyntaxErrorException>) zippingIterator0;
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) orderedIterator0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 1471, (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLNonTransientConnectionException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      iteratorArray0[2] = (Iterator<SQLSyntaxErrorException>) listIterator0;
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(stack0);
      iteratorArray0[3] = (Iterator<SQLSyntaxErrorException>) reverseListIterator0;
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) iteratorArray0[3]);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) stack0);
      iteratorArray0[4] = iterator0;
      Iterator<SQLSyntaxErrorException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) iteratorArray0[1], (Iterator<? extends SQLSyntaxErrorException>) iteratorArray0[2]);
      iteratorArray0[5] = iterator1;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", (Throwable) null);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Transformer<SQLTransactionRollbackException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends String>) null);
      String string0 = IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) singletonIterator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "Q@UCAIjf|~T", "|O1BasJ9", "6AnmP)t*J(LoM3");
      assertFalse(singletonIterator0.hasNext());
      assertEquals("|O1BasJ9null6AnmP)t*J(LoM3", string0);
      
      ResettableListIterator<HashSet<SQLIntegrityConstraintViolationException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<HashSet<SQLIntegrityConstraintViolationException>>) resettableListIterator0, (Predicate<? super HashSet<SQLIntegrityConstraintViolationException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category0);
      IteratorUtils.contains((Iterator<Locale.Category>) listIterator0, (Object) listIterator0);
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 2);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>((SQLSyntaxErrorException) null);
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) singletonIterator0;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) resettableListIterator0;
      IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      int int0 = IteratorUtils.size(singletonIterator0);
      assertFalse(singletonIterator0.hasNext());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      OrderedIterator<ArrayList<ArrayDeque>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.contains((Iterator<HashSet<Integer>>) null, (Object) null);
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) arrayList0);
      OrderedIterator<Locale.Category> orderedIterator1 = IteratorUtils.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      predicateArray0[1] = predicate1;
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate2 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      predicateArray0[2] = predicate2;
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) predicate0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      predicateArray0[3] = (Predicate<Object>) transformerPredicate0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[4] = (Predicate<Object>) comparatorPredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[5] = (Predicate<Object>) allPredicate0;
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[6] = (Predicate<Object>) allPredicate1;
      Predicate<Object> predicate3 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Locale.Category>) orderedIterator1, (Predicate<? super Locale.Category>) predicate3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[18];
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.arrayListIterator(booleanArray0);
      ZippingIterator<Boolean> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Boolean>) resettableListIterator0, (Iterator<? extends Boolean>) resettableListIterator0, (Iterator<? extends Boolean>) resettableListIterator0);
      Class<Boolean> class0 = Boolean.class;
      IteratorUtils.toArray((Iterator<? extends Boolean>) zippingIterator0, class0);
      IteratorUtils.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Properties properties0 = new Properties();
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Properties>) singletonListIterator0, (Predicate<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<SQLFeatureNotSupportedException, Properties> hashMap0 = new HashMap<SQLFeatureNotSupportedException, Properties>();
      Properties properties0 = new Properties();
      SingletonListIterator<HashMap<SQLFeatureNotSupportedException, Properties>> singletonListIterator0 = new SingletonListIterator<HashMap<SQLFeatureNotSupportedException, Properties>>(hashMap0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      IteratorUtils.find((Iterator<HashMap<SQLFeatureNotSupportedException, Properties>>) singletonListIterator0, (Predicate<? super HashMap<SQLFeatureNotSupportedException, Properties>>) notPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      predicateArray0[0] = (Predicate<Object>) notPredicate0;
      predicateArray0[1] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[2] = (Predicate<Object>) notPredicate0;
      predicateArray0[3] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[4] = (Predicate<Object>) notPredicate0;
      predicateArray0[5] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[6] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[7] = (Predicate<Object>) uniquePredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicateArray0[1]);
      NotPredicate<Properties> notPredicate1 = new NotPredicate<Properties>(nullIsTruePredicate0);
      Iterator<Properties> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Properties>) null, (Predicate<? super Properties>) predicateArray0[6]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) transformer0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      predicateArray0[0] = (Predicate<Object>) transformedPredicate0;
      Predicate<Object> predicate1 = NotNullPredicate.notNullPredicate();
      predicateArray0[1] = predicate1;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(" y", " y");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLTimeoutException0, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[2] = (Predicate<Object>) comparatorPredicate0;
      Predicate<Object> predicate2 = FalsePredicate.falsePredicate();
      predicateArray0[3] = predicate2;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion1 = ComparatorPredicate.Criterion.GREATER;
      Predicate<Object> predicate3 = ComparatorPredicate.comparatorPredicate((Object) predicate2, comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion1);
      predicateArray0[4] = predicate3;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashtable0, sQLTimeoutException0);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate4 = ComparatorPredicate.comparatorPredicate((Object) sQLClientInfoException0, comparator2, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion1);
      predicateArray0[5] = predicate4;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(onePredicate0);
      NotPredicate<Properties> notPredicate0 = new NotPredicate<Properties>(nullIsTruePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Properties>) null, (Predicate<? super Properties>) notPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 6);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) zippingIterator0;
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) orderedIterator0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 1471, (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLNonTransientConnectionException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      iteratorArray0[2] = (Iterator<SQLSyntaxErrorException>) listIterator0;
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(stack0);
      iteratorArray0[3] = (Iterator<SQLSyntaxErrorException>) reverseListIterator0;
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) iteratorArray0[3]);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) stack0);
      iteratorArray0[4] = iterator0;
      Iterator<SQLSyntaxErrorException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) iteratorArray0[1], (Iterator<? extends SQLSyntaxErrorException>) iteratorArray0[2]);
      iteratorArray0[5] = iterator1;
      ZippingIterator<SQLSyntaxErrorException> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      assertFalse(zippingIterator1.equals((Object)zippingIterator0));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Transformer<Object, DataTruncation>[] transformerArray0 = (Transformer<Object, DataTruncation>[]) Array.newInstance(Transformer.class, 3);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.nullTransformer();
      transformerArray0[0] = transformer0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "", 100);
      DataTruncation dataTruncation0 = new DataTruncation(100, true, true, (-2724), (-2724), sQLNonTransientException0);
      ConstantTransformer<Object, DataTruncation> constantTransformer0 = new ConstantTransformer<Object, DataTruncation>(dataTruncation0);
      transformerArray0[1] = (Transformer<Object, DataTruncation>) constantTransformer0;
      HashMap<Object, DataTruncation> hashMap0 = new HashMap<Object, DataTruncation>();
      Transformer<Object, DataTruncation> transformer1 = MapTransformer.mapTransformer((Map<? super Object, ? extends DataTruncation>) hashMap0);
      transformerArray0[2] = transformer1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(transformerArray0, 4046);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "\\`l7K{zo7?rm";
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("w7o<q}STlw32F5M", "`l7K{zo7?rm", (-2376), hashtable0);
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLClientInfoException>) singletonListIterator0);
      singletonListIterator0.next();
      String string1 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashtable0.getOrDefault(iIOMetadataNode0, clientInfoStatus0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLClientInfoException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      OrderedMapIterator<String, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.isEmpty(orderedMapIterator0);
      ListIterator<Object> listIterator0 = IteratorUtils.toListIterator((Iterator<?>) orderedMapIterator0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      String string0 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      String string1 = "+SUs";
      iIOMetadataNode0.getAttributeNodeNS("", "+SUs");
      // Undeclared exception!
      try { 
        iIOMetadataNode0.setAttributeNode((Attr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) stack0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[8];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Eo]28:GJ]:-l");
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.apache.commons.collections4.map.AbstractHashedMap", "org.apache.commons.collections4.map.AbstractHashedMap", sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Cursor closed", "Cursor closed", sQLTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLTransactionRollbackException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("7m>V8H", "", sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("7m>V8H", sQLFeatureNotSupportedException2);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.map.AbstractHashedMap", "7m>V8H", sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", sQLTransientException0);
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException6;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException7 = new SQLFeatureNotSupportedException("Cursor closed", sQLFeatureNotSupportedException5);
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException7;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException8 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[7] = sQLFeatureNotSupportedException8;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator1 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      assertFalse(resettableIterator1.equals((Object)resettableIterator0));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category0);
      BoundedIterator<Locale.Category> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Locale.Category>) listIterator0, 0L, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<SQLFeatureNotSupportedException, Properties> hashMap0 = new HashMap<SQLFeatureNotSupportedException, Properties>();
      String string0 = "?k#uU7BJBEL7SUrMj";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("?k#uU7BJBEL7SUrMj");
      sQLFeatureNotSupportedException0.getSuppressed();
      Properties properties0 = new Properties();
      hashMap0.put(sQLFeatureNotSupportedException0, properties0);
      SingletonListIterator<HashMap<SQLFeatureNotSupportedException, Properties>> singletonListIterator0 = new SingletonListIterator<HashMap<SQLFeatureNotSupportedException, Properties>>(hashMap0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      IteratorUtils.find((Iterator<HashMap<SQLFeatureNotSupportedException, Properties>>) singletonListIterator0, (Predicate<? super HashMap<SQLFeatureNotSupportedException, Properties>>) notPredicate0);
      ArrayListIterator<SQLTransientConnectionException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLTransientConnectionException>((Object) null, (-4192));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ResettableIterator<PriorityQueue<EnumSet>> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(264);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1569);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1888);
      integerArray0[2] = integer2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(integerArray0, (int) integerArray0[2], 1883);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = "";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("b(=Tmlu_&h*tWm");
      StackTraceElement[] stackTraceElementArray0 = sQLSyntaxErrorException0.getStackTrace();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      PrintStream printStream0 = mockPrintStream0.format("", (Object[]) stackTraceElementArray0);
      sQLFeatureNotSupportedException0.printStackTrace(printStream0);
      sQLSyntaxErrorException0.setNextException(sQLFeatureNotSupportedException0);
      sQLSyntaxErrorException0.initCause(sQLFeatureNotSupportedException0);
      sQLSyntaxErrorException0.forEach(consumer0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLWarning0);
      IteratorUtils.find((Iterator<SQLWarning>) null, (Predicate<? super SQLWarning>) identityPredicate0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, (Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLRecoverableException0, 10, (-1777));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.singletonListIterator(properties0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IteratorUtils.loopingListIterator((List<Object>) linkedList0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 5);
      StringTokenizer stringTokenizer0 = new StringTokenizer(";LBOI1)HwC^xCso", "$,x_fc<:<`-", false);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) stringTokenizer0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator";
      String string1 = "";
      int int0 = 2135;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", "", 2135, sQLClientInfoException0);
      sQLClientInfoException0.spliterator();
      sQLNonTransientConnectionException0.getStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[18];
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.arrayListIterator(booleanArray0);
      ZippingIterator<Boolean> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Boolean>) resettableListIterator0, (Iterator<? extends Boolean>) resettableListIterator0, (Iterator<? extends Boolean>) resettableListIterator0);
      Class<Boolean> class0 = Boolean.class;
      IteratorUtils.toArray((Iterator<? extends Boolean>) zippingIterator0, class0);
      IteratorUtils.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getAttributeNodeNS("v^?S=#1[;L)$V", "");
      // Undeclared exception!
      try { 
        iIOMetadataNode0.replaceChild((Node) null, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newChild == null!
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category0);
      IteratorUtils.contains((Iterator<Locale.Category>) listIterator0, (Object) listIterator0);
      assertTrue(listIterator0.hasPrevious());
      
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 2);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>((SQLSyntaxErrorException) null);
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) singletonIterator0;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) resettableListIterator0;
      IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      int int0 = IteratorUtils.size(singletonIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, HashSet<IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, HashSet<IIOMetadataNode>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, HashSet<IIOMetadataNode>>(orderedMapIterator0);
      IteratorUtils.isEmpty(abstractOrderedMapIteratorDecorator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      sQLTimeoutException0.printStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      OrderedIterator<ArrayList<ArrayDeque>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.contains((Iterator<HashSet<Integer>>) null, (Object) null);
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      OrderedIterator<ArrayList<ArrayDeque>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.contains((Iterator<HashSet<Integer>>) null, (Object) null);
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) arrayList0);
      IteratorUtils.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      predicateArray0[0] = predicate0;
      UniquePredicate.uniquePredicate();
      AnyPredicate<SQLIntegrityConstraintViolationException> anyPredicate0 = new AnyPredicate<SQLIntegrityConstraintViolationException>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[6];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("ListIterator must not be null", "org.apache.commons.collections4.map.AbstractReferenceMap$SoftRef", 100);
      SQLTransientException sQLTransientException0 = new SQLTransientException("P5", sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "ListIterator must not be null", sQLTransientException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException2;
      sQLInvalidAuthorizationSpecException0.initCause(sQLInvalidAuthorizationSpecException2);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("", "", 5);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException3;
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "|Jh(~}L8~}8", 100, intArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("R*Sx<N3", (String) null, batchUpdateException0);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException5;
      batchUpdateException0.spliterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.map.AbstractHashedMap$ValuesIterator");
      sQLTransientException0.fillInStackTrace();
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException6;
      IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttributeNode("P5");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      OrderedMapIterator<ArrayDeque<SQLDataException>, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<ArrayDeque<SQLDataException>, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<ArrayDeque<SQLDataException>, Object>(orderedMapIterator0);
      long long0 = 0L;
      IteratorUtils.skippingIterator((Iterator<ArrayDeque<SQLDataException>>) abstractOrderedMapIteratorDecorator0, 0L);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("a^$Z");
      SQLDataException sQLDataException0 = new SQLDataException("a^$Z", "a^$Z", 128, sQLTransactionRollbackException0);
      ArrayListIterator<DataTruncation> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<DataTruncation>(sQLDataException0, 128, 128);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[8];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("REayy<BwO`ooQt4I`", intArray0, batchUpdateException1);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("50Jd$Y", intArray0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 3;
      longArray0[1] = 0L;
      longArray0[2] = (long) 3;
      longArray0[3] = (long) 3;
      longArray0[4] = (long) 3;
      longArray0[5] = (long) 583;
      longArray0[6] = (long) 3;
      longArray0[7] = (long) 3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("f4I#l?", "REayy<BwO`ooQt4I`", 583, longArray0, batchUpdateException3);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException("", "", 3, intArray0);
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      BatchUpdateException batchUpdateException7 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[7] = batchUpdateException7;
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) objectArrayListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MapIterator<Object, ArrayList<SQLTransactionRollbackException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<Object, ArrayList<SQLTransactionRollbackException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      int int0 = 1919;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) mapIterator1, 1919);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Iterator<Integer> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-2127));
      integerArray0[0] = integer0;
      int int0 = 10;
      Integer integer1 = new Integer(10);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(602);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-2752));
      integerArray0[5] = integer5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, (-2127), (-696));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(221);
      integerArray0[0] = integer0;
      int int0 = 1;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      objectArrayListIterator0.next();
      objectArrayListIterator0.hasNext();
      IteratorUtils.chainedIterator((Iterator<? extends Integer>) objectArrayListIterator0, (Iterator<? extends Integer>) objectArrayListIterator0);
      String string0 = "transformer may not be null";
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("transformer may not be null", (Map<String, ClientInfoStatus>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException0, (-1095));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(", ", sQLTransientConnectionException0);
      sQLTransientConnectionException0.addSuppressed(sQLNonTransientException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(", ", sQLTransientConnectionException0);
      sQLTransientConnectionException0.setNextException(sQLTransientConnectionException1);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      IteratorUtils.isEmpty(listIterator0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[7];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.FORMAT;
      locale_CategoryArray0[4] = locale_Category4;
      Locale.Category locale_Category5 = Locale.Category.DISPLAY;
      locale_CategoryArray0[5] = locale_Category5;
      Locale.Category locale_Category6 = Locale.Category.FORMAT;
      locale_CategoryArray0[6] = locale_Category6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(locale_CategoryArray0, (-1089), (-1089));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      long long0 = (-2133L);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) orderedIterator0, (-2133L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[2];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("qsY/", "qsY/");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "qsY/", sQLTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLIntegrityConstraintViolationException0);
      sQLExceptionArray0[0] = (SQLException) sQLNonTransientConnectionException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      sQLExceptionArray0[1] = (SQLException) sQLTimeoutException0;
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.setAttribute("JV8N/w!4]4N)`", "(i%%M0P>");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("", "JV8N/w!4]4N)`");
      IteratorUtils.nodeListIterator(nodeList0);
      IteratorUtils.emptyMapIterator();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[9];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("(i%%M0P>");
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLException sQLException0 = new SQLException(sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("gBP,:8-:#8QE@Ean", "List must not be null");
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("gBP,:8-:#8QE@Ean", "List must not be null");
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException("' on '", "sH<F");
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      SQLTransactionRollbackException sQLTransactionRollbackException7 = new SQLTransactionRollbackException("sH<F", "' on '", 10, sQLTransactionRollbackException2);
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException7;
      SQLTransactionRollbackException sQLTransactionRollbackException8 = new SQLTransactionRollbackException("Predicate must not be null");
      sQLTransactionRollbackExceptionArray0[8] = sQLTransactionRollbackException8;
      int int0 = (-1378);
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0, (-1378));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("");
      int int0 = (-791);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLWarning0, 0, (-791));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLWarning>) resettableListIterator0, (Closure<? super SQLWarning>) closure0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getLocalizedMessage();
      SQLException sQLException0 = new SQLException(sQLClientInfoException0);
      sQLClientInfoException0.addSuppressed(sQLException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException0, (-1294));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
